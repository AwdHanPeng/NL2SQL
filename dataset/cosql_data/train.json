{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of the department which has the highest average salary of professors.",
        "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find out the average salary of professors ?",
            "sql": "select avg ( salary ) from instructor"
        },
        {
            "utterance": "Find the average salary of the professors of each department ?",
            "sql": "select avg ( salary ) , dept_name from instructor group by dept_name"
        },
        {
            "utterance": "Which department has the highest average salary of professors ?",
            "sql": "select dept_name from instructor group by dept_name order by avg ( salary ) desc limit value"
        },
        {
            "utterance": "Which department has the lowest average salary of professors ?",
            "sql": "select dept_name from instructor group by dept_name order by avg ( salary ) limit value"
        },
        {
            "utterance": "In which department Mr. Mird work for ?",
            "sql": "select dept_name from instructor where name = value"
        },
        {
            "utterance": "How much is the salary Mr. Mird earns currently ?",
            "sql": "select salary from instructor where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the maximum and average capacity among rooms in each building.",
        "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "What is the maximum capacity in Lambert ? | Did you mean Lamberton ? | yes . my apologies .",
            "sql": "select max ( capacity ) from classroom where building = value"
        },
        {
            "utterance": "What is the maximum capacity of all of the rooms ?",
            "sql": "select max ( capacity ) from classroom"
        },
        {
            "utterance": "How many rooms are there ?",
            "sql": "select sum ( room_number ) from classroom"
        },
        {
            "utterance": "What is the average capacity of the rooms ?",
            "sql": "select avg ( capacity ) from classroom"
        },
        {
            "utterance": "Which classroom is the smallest ?",
            "sql": "select * from classroom order by capacity limit value"
        },
        {
            "utterance": "What room seats 120 people ?",
            "sql": "select * from classroom where capacity = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the id of the courses that do not have any prerequisite?",
        "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
    },
    "interaction": [
        {
            "utterance": "Can you list the names and ids of courses ?",
            "sql": "select course_id , title from course"
        },
        {
            "utterance": "I want to know the course names and the prerequisite ids .",
            "sql": "select t1 . title , t2 . prereq_id from course as t1 join prereq as t2 where t1 . course_id = t2 . course_id"
        },
        {
            "utterance": "Hmm , please tell me the course ids that do not have any prerequisite .",
            "sql": "select course_id from course except select course_id from prereq"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"
    },
    "interaction": [
        {
            "utterance": "What is the average salary for the physics department ?",
            "sql": "select avg ( salary ) from instructor where dept_name = value"
        },
        {
            "utterance": "How many instructors in the physics department make less than that ?",
            "sql": "select count ( * ) from instructor where dept_name = value and salary < ( select avg ( salary ) from instructor where dept_name = value )"
        },
        {
            "utterance": "What is the name and salary of that instructor ?",
            "sql": "select name , salary from instructor where dept_name = value and salary < ( select avg ( salary ) from instructor where dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the year and semester when offers the largest number of courses.",
        "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the year that offers the largest number of courses ?",
            "sql": "select year from section group by semester , year order by count ( * ) desc limit value"
        },
        {
            "utterance": "What semester in that year offers the largest number of courses ?",
            "sql": "select semester from section where year = value group by semester order by count ( * ) desc limit value"
        },
        {
            "utterance": "What buildings have course sections offered then ?",
            "sql": "select building from section where semester = value and year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    "interaction": [
        {
            "utterance": "Who is the instructor of the statistics department ?",
            "sql": "select name from instructor where dept_name = value"
        },
        {
            "utterance": "What is their average salary ?",
            "sql": "select avg ( salary ) from instructor where dept_name = value"
        },
        {
            "utterance": "Who in the statistics department has the highest salary ?",
            "sql": "select name from instructor where dept_name = value order by salary desc limit value"
        },
        {
            "utterance": "How much is his salary ?",
            "sql": "select salary from instructor where dept_name = value order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Find the names of top 3 departments ? | What do you mean by top ? | Top three departments that provide the largest amount of courses ?",
            "sql": "select dept_name from course group by dept_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Find the names of top 3 departments that provide the lowest amount of courses ?",
            "sql": "select dept_name from course group by dept_name order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many courses are offered ?",
            "sql": "select count ( course_id ) from course"
        },
        {
            "utterance": "How many courses have more than one prerequisite ?",
            "sql": "select count ( * ) from ( select t1 . title from course as t1 join prereq as t2 on t1 . course_id = t2 . course_id group by t2 . course_id having count ( * ) > value )"
        },
        {
            "utterance": "Can you tell me the titles of those courses ?",
            "sql": "select t1 . title from course as t1 join prereq as t2 on t1 . course_id = t2 . course_id group by t2 . course_id having count ( * ) > value"
        },
        {
            "utterance": "What departments are those courses in ?",
            "sql": "select t1 . dept_name , t1 . course_id from course as t1 join prereq as t2 on t1 . course_id = t2 . course_id group by t2 . course_id having count ( * ) > value"
        },
        {
            "utterance": "Can you also provide the number of credits for each of those courses ?",
            "sql": "select t1 . credits , t1 . course_id from course as t1 join prereq as t2 on t1 . course_id = t2 . course_id group by t2 . course_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
        "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    "interaction": [
        {
            "utterance": "can you show me the name and salary of all instructors ?",
            "sql": "select name , salary from instructor"
        },
        {
            "utterance": "How much does the biology professor make ?",
            "sql": "select name , salary from instructor where dept_name = value"
        },
        {
            "utterance": "How many professors make more than Valtchev ?",
            "sql": "select count ( * ) from instructor where salary > ( select salary from instructor where name = value )"
        },
        {
            "utterance": "Can you tell me the names of the professors that make more than Valtchev ?",
            "sql": "select name from instructor where salary > ( select salary from instructor where name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
    },
    "interaction": [
        {
            "utterance": "Whsts the name of the student thst took prerequisite course title internatoinal finance ?",
            "sql": "select t1 . name from student as t1 join takes as t2 on t1 . id = t2 . id where t2 . course_id in ( select t4 . prereq_id from course as t3 join prereq as t4 on t3 . course_id = t4 . course_id where t3 . title = value )"
        },
        {
            "utterance": "What is the title of course id 787 ?",
            "sql": "select title from course where course_id = value"
        },
        {
            "utterance": "What is the department name of course id 787 ?",
            "sql": "select dept_name from course where course_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the maximum and average capacity among rooms in each building.",
        "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which room number has a capacity higher than the average capacity ?",
            "sql": "select room_number from classroom where capacity > ( select avg ( capacity ) from classroom )"
        },
        {
            "utterance": "What is the range of capacity among rooms in each building ?",
            "sql": "select max ( capacity ) , min ( capacity ) , building from classroom group by building"
        },
        {
            "utterance": "Which building houses the room that has the maximum capacity ?",
            "sql": "select building from classroom order by capacity desc limit value"
        },
        {
            "utterance": "Which building houses the room that has the minimum capacity ?",
            "sql": "select building from classroom order by capacity limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
    },
    "interaction": [
        {
            "utterance": "Find the name of instructors who are advisors of students from the Math department , and sort the results by students ' total credit .",
            "sql": "select t2 . name from advisor as t1 join instructor as t2 on t1 . i_id = t2 . id join student as t3 on t1 . s_id = t3 . id where t3 . dept_name = value order by t3 . tot_cred"
        },
        {
            "utterance": "Find name of students in the Math department",
            "sql": "select name from student where dept_name = value"
        },
        {
            "utterance": "Give me IDs of instructors in the Marketing department",
            "sql": "select id from instructor where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the students who have more than one advisor?",
        "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Who are the students that have more than one advisor ?",
            "sql": "select t1 . name from student as t1 join advisor as t2 on t1 . id = t2 . s_id group by t2 . s_id having count ( * ) > value"
        },
        {
            "utterance": "How many students have more than one credit ?",
            "sql": "select t1 . name from student as t1 join advisor as t2 on t1 . id = t2 . s_id group by t2 . s_id having t1 . tot_cred > value"
        },
        {
            "utterance": "How many students have more than 115 credits ?",
            "sql": "select t1 . name from student as t1 join advisor as t2 on t1 . id = t2 . s_id group by t2 . s_id having t1 . tot_cred > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 13,
    "final": {
        "utterance": "How many courses that do not have prerequisite?",
        "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    "interaction": [
        {
            "utterance": "how many courses have prerequisite ?",
            "sql": "select count ( * ) from course where course_id in ( select course_id from prereq )"
        },
        {
            "utterance": "how many courses are there ?",
            "sql": "select count ( * ) from course"
        },
        {
            "utterance": "How many courses that do not have prerequisite ?",
            "sql": "select count ( * ) from course where course_id not in ( select course_id from prereq )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of instructors who are advising more than one student.",
        "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many instructors are there ?",
            "sql": "select count ( * ) from instructor"
        },
        {
            "utterance": "OK . Which instructor ids appear more than once in the advisor table",
            "sql": "select t1 . id from instructor as t1 join advisor as t2 on t1 . id = t2 . i_id group by t2 . i_id having count ( * ) > value"
        },
        {
            "utterance": "What are the instructors name for each of those ids the are advising more than one student ?",
            "sql": "select t1 . name from instructor as t1 join advisor as t2 on t1 . id = t2 . i_id group by t2 . i_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
    },
    "interaction": [
        {
            "utterance": "What are the names of all students who took any course in the fall semester of the year 2003 ?",
            "sql": "select name from student where id in ( select id from takes where semester = value and year = value )"
        },
        {
            "utterance": "What about in the spring semester ?",
            "sql": "select name from student where id in ( select id from takes where semester = value and year = value )"
        },
        {
            "utterance": "What about in 2004 ?",
            "sql": "select name from student where id in ( select id from takes where semester = value and year = value )"
        },
        {
            "utterance": "What course id were offered in that semester ?",
            "sql": "select distinct id from takes where semester = value and year = value"
        },
        {
            "utterance": "What 's the grade of 10838 ?",
            "sql": "select grade from takes where semester = value and year = value and id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 16,
    "final": {
        "utterance": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many instructors are in the statistics department ?",
            "sql": "select count ( * ) from instructor where dept_name = value"
        },
        {
            "utterance": "What is the lowest salary of the instructors in the statistics department ?",
            "sql": "select min ( salary ) from instructor where dept_name = value"
        },
        {
            "utterance": "And what is the name of the instructor that earns that salary ?",
            "sql": "select name from instructor where dept_name = value order by salary asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of the courses that do not have any prerequisite?",
        "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    "interaction": [
        {
            "utterance": "How many courses do not have a prerequisite ?",
            "sql": "select count ( * ) from course where course_id not in ( select course_id from prereq )"
        },
        {
            "utterance": "Which of those courses has the most number of credits ?",
            "sql": "select * from course where course_id not in ( select course_id from prereq ) order by credits desc limit value"
        },
        {
            "utterance": "How many courses are there ?",
            "sql": "select count ( * ) from course"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the title of the prerequisite class of International Finance course?",
        "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
    },
    "interaction": [
        {
            "utterance": "What is the course id for the International Finance course ?",
            "sql": "select course_id from course where title = value"
        },
        {
            "utterance": "What is the course id for the prerequisite of that course ?",
            "sql": "select course_id from course where course_id in ( select t1 . prereq_id from prereq as t1 join course as t2 on t1 . course_id = t2 . course_id where t2 . title = value )"
        },
        {
            "utterance": "What is the title of that course ?",
            "sql": "select title from course where course_id in ( select t1 . prereq_id from prereq as t1 join course as t2 on t1 . course_id = t2 . course_id where t2 . title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the number of rooms with more than 50 capacity for each building.",
        "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "How many buildings are in the list ?",
            "sql": "select count ( distinct building ) from classroom"
        },
        {
            "utterance": "What are the buildings that have more than 50 capacity ?",
            "sql": "select building from classroom where capacity > value group by building"
        },
        {
            "utterance": "Can you rind me the number of rooms with more than 50 capacity for those 20 buildings ?",
            "sql": "select count ( room_number ) from classroom where capacity > value"
        },
        {
            "utterance": "Can you show me the number of rooms with capacity greater than 50 for each building ?",
            "sql": "select building , count ( room_number ) from classroom where capacity > value group by building"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name of department has the highest amount of students?",
        "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which department has the highest amount of students ?",
            "sql": "select dept_name from student group by dept_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Do you know the total credits for the Civil Eng . Department ? | Did you want the sum of total credits across all students in the Civil Eng . department ? | Sure .",
            "sql": "select sum ( tot_cred ) from student where dept_name = value"
        },
        {
            "utterance": "Ok , do you know the ID number for the department ? | Did you want the ID numbers for the students in the Civil Eng . department ? | please",
            "sql": "select id from student where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "List all instructors who taught a class in Fall 2009 | Did you mean the instructor IDs who taught a class in Fall 2009 | yes",
            "sql": "select id from teaches where semester = value and year = value"
        },
        {
            "utterance": "Remove all instructor IDs who did not teach in Spring 2010 from the list . | Did you mean retain the instructor IDs who both teach in Spring 2010 and in Fall 2009 | Retain the instructor IDs who did not teach in Spring 2010 but did teach in Fall 2009",
            "sql": "select id from teaches where semester = value and year = value except select id from teaches where semester = value and year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "What are the names of the different departments ?",
            "sql": "select distinct dept_name from course"
        },
        {
            "utterance": "What are the names of all Statistics courses ?",
            "sql": "select title from course where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
    },
    "interaction": [
        {
            "utterance": "what is the highest salary ?",
            "sql": "select max ( salary ) from instructor"
        },
        {
            "utterance": "what is the salary of instructor in math department ?",
            "sql": "select t2 . salary from advisor as t1 join instructor as t2 on t1 . i_id = t2 . id join student as t3 on t1 . s_id = t3 . id where t3 . dept_name = value"
        },
        {
            "utterance": "what is McKinnon salary ?",
            "sql": "select salary from instructor where name = value"
        },
        {
            "utterance": "what department is McKinnon ?",
            "sql": "select dept_name from instructor where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "I 'd like to know about the prerequisites for courses",
            "sql": "select course_id , prereq_id from prereq"
        },
        {
            "utterance": "What courses have more than one prerequisite ?",
            "sql": "select course_id from prereq group by course_id having count ( * ) > value"
        },
        {
            "utterance": "What are the title , credit and department of these courses ?",
            "sql": "select t1 . title , t1 . credits , t1 . dept_name from course as t1 join prereq as t2 on t1 . course_id = t2 . course_id group by t2 . course_id having count ( * ) > value"
        },
        {
            "utterance": "how many prerequisite credits are needed ? | Which course ? | Game programming",
            "sql": "select sum ( t3 . credits ) from course as t1 join prereq as t2 on t1 . course_id = t2 . course_id join course as t3 on t3 . course_id = t2 . prereq_id where t1 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the title of the course that is offered by more than one department.",
        "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many courses are there ?",
            "sql": "select count ( * ) from course"
        },
        {
            "utterance": "How many courses are in Mech . eng ?",
            "sql": "select count ( * ) from course where dept_name = value"
        },
        {
            "utterance": "Out of those 12 how many of them are more than 3 credits ?",
            "sql": "select count ( * ) from course where dept_name = value and credits > value"
        },
        {
            "utterance": "Are any of these courses offered by more than one department ? | Did you mean the same course titles ? | Yes are there any courses `` same title '' in the list that are offered by more than one department ?",
            "sql": "select distinct ( dept_name ) from course where title in ( select title from course where dept_name = value and credits > value ) and dept_name ! = value"
        },
        {
            "utterance": "How many of those courses are there ?",
            "sql": "select count ( * ) from course where title in ( select title from course where dept_name = value and credits > value ) and dept_name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of instructors who didn't teach any courses?",
        "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of Instructor IDs for those who did not teach any courses ?",
            "sql": "select id from instructor where id not in ( select id from teaches )"
        },
        {
            "utterance": "Thank you ! Can you update that list with the professors ' names ?",
            "sql": "select id , name from instructor where id not in ( select id from teaches )"
        },
        {
            "utterance": "Thank you ! Can you update that list to include the instructor names and which departments they are in ?",
            "sql": "select name , dept_name from instructor where id not in ( select id from teaches )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "in what department is Rumat ? | Do you want the name of the department ? | Yes !",
            "sql": "select dept_name from student where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.",
        "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)"
    },
    "interaction": [
        {
            "utterance": "Show the average salary of all departments . | Would you like to the know the average salary grouped over each department name ? | Yes show average salary grouped over each department name .",
            "sql": "select dept_name , avg ( salary ) from instructor group by dept_name"
        },
        {
            "utterance": "Show the department with the lowest average salary .",
            "sql": "select dept_name from instructor group by dept_name order by avg ( salary ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the name of instructors in Comp . Sci . department whose salary is higher than 80000 ?",
            "sql": "select name from instructor where dept_name = value and salary > value"
        },
        {
            "utterance": "Oh only two of them . Thank you : ) Then could you please let me know the name of the instructor whose salary is the highest in the table ?",
            "sql": "select name from instructor order by salary desc limit value"
        },
        {
            "utterance": "That was quick , thank you again . Then could you please tell me the department name of instructor Wieland ?",
            "sql": "select dept_name from instructor where name = value"
        },
        {
            "utterance": "Thank you : ) If it is not too bothersome , could you please let me know the average salary of the instructors in Pol . Sci . ?",
            "sql": "select avg ( salary ) from instructor where dept_name = value"
        },
        {
            "utterance": "Thank you , then could you please tell me what would be the average salary of instructors for Cybernetics ?",
            "sql": "select avg ( salary ) from instructor where dept_name = value"
        },
        {
            "utterance": "Thank you : ) This will be my last question , could you please let me know the name and ID of the instructor whose salary is the lowest ?",
            "sql": "select name , id from instructor order by salary asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Who is the instructor with the highest salary?",
        "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , show me the instructors",
            "sql": "select name from instructor"
        },
        {
            "utterance": "Nice . What is their average salary ?",
            "sql": "select avg ( salary ) from instructor"
        },
        {
            "utterance": "Who earns the highest salary ?",
            "sql": "select name from instructor order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "Find the title of course that is provided by Statistics but not Psychology departments .",
            "sql": "select title from course where dept_name = value except select title from course where dept_name = value"
        },
        {
            "utterance": "How many credits is Care and Feeding of Cats ?",
            "sql": "select credits from course where title = value"
        },
        {
            "utterance": "What is the course id of that ?",
            "sql": "select course_id from course where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
    },
    "interaction": [
        {
            "utterance": "Find the department name of the instructor whose name contains 'Soisalon '",
            "sql": "select dept_name from instructor where name like value"
        },
        {
            "utterance": "Sorry , what is the id number of the instructor for psychology ?",
            "sql": "select id from instructor where dept_name = value"
        },
        {
            "utterance": "What is the salary of the instructor with id number 22591 ?",
            "sql": "select salary from instructor where id = value"
        },
        {
            "utterance": "And what about the salary of the instructor with id number 96895 ?",
            "sql": "select salary from instructor where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the total number of students and total number of instructors for each department.",
        "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
    },
    "interaction": [
        {
            "utterance": "What are the total number of students in each department ?",
            "sql": "select count ( distinct t2 . id ) , t3 . dept_name from department as t1 join student as t2 on t1 . dept_name = t2 . dept_name join instructor as t3 on t1 . dept_name = t3 . dept_name group by t3 . dept_name"
        },
        {
            "utterance": "And , do you also have information on the total number of instructors in each department ?",
            "sql": "select count ( distinct t2 . id ) , count ( distinct t3 . id ) , t3 . dept_name from department as t1 join student as t2 on t1 . dept_name = t2 . dept_name join instructor as t3 on t1 . dept_name = t3 . dept_name group by t3 . dept_name"
        },
        {
            "utterance": "Do you also have a total enrollment ? | What do you mean by enrollment ? | Total number of students .",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "Do you know the name of the Astronomy instructor ?",
            "sql": "select t2 . name from department as t1 join instructor as t2 on t1 . dept_name = t2 . dept_name where t1 . dept_name = value"
        },
        {
            "utterance": "Lastly , do you have his salary ?",
            "sql": "select t2 . name , t2 . salary from department as t1 join instructor as t2 on t1 . dept_name = t2 . dept_name where t1 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all of the instructors who are advisors ?",
            "sql": "select t2 . name from advisor as t1 join instructor as t2 on t1 . i_id = t2 . id"
        },
        {
            "utterance": "Could you narrow it down to just the names of instructors who are advisors to students from the Math department ?",
            "sql": "select t2 . name from advisor as t1 join instructor as t2 on t1 . i_id = t2 . id join student as t3 on t1 . s_id = t3 . id where t3 . dept_name = value"
        },
        {
            "utterance": "What are all of their salaries ?",
            "sql": "select t2 . name , t2 . salary from advisor as t1 join instructor as t2 on t1 . i_id = t2 . id join student as t3 on t1 . s_id = t3 . id where t3 . dept_name = value"
        },
        {
            "utterance": "What are the names and salaries of the instructors who are advisors to students from the History department ?",
            "sql": "select t2 . name , t2 . salary from advisor as t1 join instructor as t2 on t1 . i_id = t2 . id join student as t3 on t1 . s_id = t3 . id where t3 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the semester and year which has the least number of student taking any class.",
        "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all course IDs ?",
            "sql": "select course_id from takes"
        },
        {
            "utterance": "Wow that 's a lot ! Can you update that list to show me the semester and year which have the fewest number of students taking any class ?",
            "sql": "select semester , year from takes group by semester , year order by count ( * ) limit value"
        },
        {
            "utterance": "Excellent ! Can you update this list to show many total classes were taken in Fall of 2008 ? | Do you mean how many total classes were taken in Fall of 2008 ? | Yes ! That is what I meant ! Sorry ! How many total classes were taken in Fall of 2008 ?",
            "sql": "select count ( * ) from takes where semester = value and year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the total budgets of the Marketing or Finance department.",
        "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
    },
    "interaction": [
        {
            "utterance": "what is the budget for chandler ?",
            "sql": "select budget from department where building = value"
        },
        {
            "utterance": "how many departments are in table ?",
            "sql": "select count ( * ) from department"
        },
        {
            "utterance": "how many buildings are available ?",
            "sql": "select count ( distinct building ) from department"
        },
        {
            "utterance": "which department is managed by taylor ?",
            "sql": "select dept_name from department where building = value"
        },
        {
            "utterance": "how much budget is taking biology department ?",
            "sql": "select budget from department where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 37,
    "final": {
        "utterance": "Find the name of the instructors who taught C Programming course before.",
        "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
    },
    "interaction": [
        {
            "utterance": "Tell me title name for all course ids ... .",
            "sql": "select course_id , title from course"
        },
        {
            "utterance": "Tell me the name of the instructor who getting high salary ... And tell his department name too ... | How do you define a high salary ? | Higher than 80000 ... ..",
            "sql": "select name from instructor where salary > value"
        },
        {
            "utterance": "Find the name of the instructors who taught C programming course before..",
            "sql": "select t1 . name from instructor as t1 join teaches as t2 on t1 . id = t2 . id join course as t3 on t2 . course_id = t3 . course_id where t3 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?",
        "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)"
    },
    "interaction": [
        {
            "utterance": "Which building has a room with highest capacity ?",
            "sql": "select building from classroom order by capacity desc limit value"
        },
        {
            "utterance": "How many credits is `` Accounting '' worth ?",
            "sql": "select credits from course where title = value"
        },
        {
            "utterance": "And what is the capacity of the Whitman room ?",
            "sql": "select capacity from classroom where building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the id of the instructor who advises of all students from History department?",
        "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "Show me the instructor ID associated with the History department . | Do you mean the ids of the instructors who advises of all students from History department ? | Yes , what is the answer to your question ?",
            "sql": "select i_id from advisor as t1 join student as t2 on t1 . s_id = t2 . id where t2 . dept_name = value"
        },
        {
            "utterance": "How many instructors advising of students from the history department ?",
            "sql": "select count ( i_id ) from advisor as t1 join student as t2 on t1 . s_id = t2 . id where t2 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the names of all instructors in the Art department who have taught some course and the course_id.",
        "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"
    },
    "interaction": [
        {
            "utterance": "Find the names of all instructors in the Art department who have taught some course and the course id .",
            "sql": "select t1 . name , t2 . course_id from instructor as t1 join teaches as t2 on t1 . id = t2 . id where t1 . dept_name = value"
        },
        {
            "utterance": "Find the names of all instructors in the Art department",
            "sql": "select name from instructor where dept_name = value"
        },
        {
            "utterance": "Find the instructor id of all instructors in the Statistics department",
            "sql": "select id from instructor where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 41,
    "final": {
        "utterance": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Which courses ran in Fall 2009 and in Spring 2010 ?",
            "sql": "select * from section where semester = value and year = value intersect select course_id from section where semester = value and year = value"
        },
        {
            "utterance": "What building is the Spring 2010 course located ?",
            "sql": "select building from section where semester = value and year = value"
        },
        {
            "utterance": "Which building housed section ID 443 ? | You mean course id or section id ? | Section ID",
            "sql": "select building from section where sec_id = value"
        },
        {
            "utterance": "Which building housed course ID 443 ?",
            "sql": "select building from section where course_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 42,
    "final": {
        "utterance": "What is the id of the instructor who advises of all students from History department?",
        "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "Can you show me how many departments there are ? | Did you mean the number of distinct department names ? | Yes , please",
            "sql": "select count ( distinct dept_name ) from student"
        },
        {
            "utterance": "Can you also show me the total number of instructers ? | what did you mean by instructers ? can you give more info ? | Sorry , I meant instructors",
            "sql": "select count ( i_id ) from advisor"
        },
        {
            "utterance": "Can you show me the id of the instructor who is from the History department ?",
            "sql": "select i_id from advisor as t1 join student as t2 on t1 . s_id = t2 . id where t2 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 43,
    "final": {
        "utterance": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    "interaction": [
        {
            "utterance": "what is the name of dept of statistics | Do you mean the name of instructors from the statistics department ? | yes",
            "sql": "select name from instructor where dept_name = value"
        },
        {
            "utterance": "show the total no . of ID",
            "sql": "select count ( id ) from instructor"
        },
        {
            "utterance": "what is the salary of the the ID 78699",
            "sql": "select salary from instructor where id = value"
        },
        {
            "utterance": "what is the dept . name of the McKinnon",
            "sql": "select dept_name from instructor where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 44,
    "final": {
        "utterance": "What is the name of the student who has the highest total credits in the History department.",
        "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the student who has the highest total credits in the History department ?",
            "sql": "select name from student where dept_name = value order by tot_cred desc limit value"
        },
        {
            "utterance": "how many students are in the history department ?",
            "sql": "select count ( name ) from student where dept_name = value"
        },
        {
            "utterance": "what is the average total credits in the history department ?",
            "sql": "select avg ( tot_cred ) from student where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 45,
    "final": {
        "utterance": "Find the name of the department which has the highest average salary of professors.",
        "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of the department which has the highest average salary of professors",
            "sql": "select dept_name from instructor group by dept_name order by avg ( salary ) desc limit value"
        },
        {
            "utterance": "what is the average salary of a physics professor ?",
            "sql": "select avg ( salary ) from instructor where dept_name = value"
        },
        {
            "utterance": "find the department name which has the lowest average salary of professors",
            "sql": "select dept_name from instructor group by dept_name order by avg ( salary ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 46,
    "final": {
        "utterance": "Find the name of students who didn't take any course from Biology department.",
        "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    "interaction": [
        {
            "utterance": "how many course are presented on the table | Did you mean to ask for the number of entries in the table course ? | exactly",
            "sql": "select count ( * ) from course"
        },
        {
            "utterance": "what are all the title are on the table | Did you mean to ask for the titles in the table course ? | yeah correct",
            "sql": "select title from course"
        },
        {
            "utterance": "what is the credits of C Programming",
            "sql": "select credits from course where title = value"
        },
        {
            "utterance": "list out the student name",
            "sql": "select name from student"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 47,
    "final": {
        "utterance": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "What are courses provided by Statistics deparment ?",
            "sql": "select title from course where dept_name = value"
        },
        {
            "utterance": "What are courses provided by Psychology department ?",
            "sql": "select title from course where dept_name = value"
        },
        {
            "utterance": "Which Statistics courses are not provided by Psychology department ?",
            "sql": "select title from course where dept_name = value except select title from course where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 48,
    "final": {
        "utterance": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all courses that were offered in the Chandler building ? | Do you want just their titles , or all the course information ? | I would like both please !",
            "sql": "select * from course as t1 join section as t2 on t1 . course_id = t2 . course_id where building = value"
        },
        {
            "utterance": "Thank you for that ! Can you filter that list to show only the rows that correspond to Fall of 2010 ?",
            "sql": "select * from course as t1 join section as t2 on t1 . course_id = t2 . course_id where building = value and semester = value and year = value"
        },
        {
            "utterance": "Can you please tell me how many credits that course was worth ?",
            "sql": "select credits from course as t1 join section as t2 on t1 . course_id = t2 . course_id where building = value and semester = value and year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 49,
    "final": {
        "utterance": "What is the course title of the prerequisite of course Mobile Computing?",
        "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
    },
    "interaction": [
        {
            "utterance": "What is the prerequisite for Mobile computing ?",
            "sql": "select title from course where course_id in ( select t1 . prereq_id from prereq as t1 join course as t2 on t1 . course_id = t2 . course_id where t2 . title = value )"
        },
        {
            "utterance": "What is the department name for these courses ?",
            "sql": "select dept_name from course where course_id in ( select t1 . prereq_id from prereq as t1 join course as t2 on t1 . course_id = t2 . course_id where t2 . title = value )"
        },
        {
            "utterance": "How many courses are there in the History Department ?",
            "sql": "select count ( * ) from course where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 50,
    "final": {
        "utterance": "Which department has the lowest budget?",
        "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you show me a list of all of the departments and the budgets ?",
            "sql": "select dept_name , budget from department"
        },
        {
            "utterance": "Thank you ! Can you filter that list to show only the department with the lowest budget ?",
            "sql": "select dept_name , budget from department order by budget limit value"
        },
        {
            "utterance": "Awesome ! Can you add the building of the Comp Sci department to that list as well ?",
            "sql": "select dept_name , building , budget from department order by budget limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 51,
    "final": {
        "utterance": "Find the name of instructors who didn't teach any courses?",
        "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( name ) from instructor where id in ( select id from teaches )"
        },
        {
            "utterance": "How many teachers did n't teach at all ?",
            "sql": "select count ( name ) from instructor where id not in ( select id from teaches )"
        },
        {
            "utterance": "WHAT ARE THEIR NAMES ?",
            "sql": "select name from instructor where id not in ( select id from teaches )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 52,
    "final": {
        "utterance": "Find the number of rooms with more than 50 capacity for each building.",
        "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "Can you show all rooms with a capacity larger than 50 ?",
            "sql": "select * from classroom where capacity > value"
        },
        {
            "utterance": "Can you display only the number of rooms currently in the table ?",
            "sql": "select room_number from classroom where capacity > value"
        },
        {
            "utterance": "How many unique room numbers are currently in the table ?",
            "sql": "select count ( distinct room_number ) from classroom where capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 0,
    "final": {
        "utterance": "show the train name and station name for each train.",
        "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id"
    },
    "interaction": [
        {
            "utterance": "What is the station ID for London Waterloo",
            "sql": "select station_id from station where name = value"
        },
        {
            "utterance": "What trains go to station ID 1 ?",
            "sql": "select * from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id join train as t3 on t3 . train_id = t1 . train_id where t1 . station_id = value"
        },
        {
            "utterance": "Can you give me the names of those trains and tell me when they have service",
            "sql": "select t3 . name , t3 . time from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id join train as t3 on t3 . train_id = t1 . train_id where t1 . station_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\""
    },
    "interaction": [
        {
            "utterance": "Find the station id of Ananthapuri Express ? | the station ids that serve the train Ananthapuri Express are 1 and 2 | What are the annual entry exit of station id 1 ?",
            "sql": "select annual_entry_exit from station where station_id = value"
        },
        {
            "utterance": "Find the total passengers of station id 1 and 2 ?",
            "sql": "select total_passengers from station where station_id = value or station_id = value"
        },
        {
            "utterance": "What are the names of the stations which serve both `` Ananthapuri Express '' and `` Guruvayur Express '' train ?",
            "sql": "select t2 . name from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id join train as t3 on t3 . train_id = t1 . train_id where t3 . name = value intersect select t2 . name from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id join train as t3 on t3 . train_id = t1 . train_id where t3 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 2,
    "final": {
        "utterance": "show the train name and station name for each train.",
        "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id"
    },
    "interaction": [
        {
            "utterance": "Show the train name and station name for each train",
            "sql": "select t2 . name , t3 . name from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id join train as t3 on t3 . train_id = t1 . train_id"
        },
        {
            "utterance": "Give me total passengers on each station",
            "sql": "select total_passengers from station"
        },
        {
            "utterance": "Give me main services for each station",
            "sql": "select main_services from station"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all locations with only 1 station.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "what is the highest annual interchanges ?",
            "sql": "select annual_interchanges from station order by annual_interchanges desc limit value"
        },
        {
            "utterance": "what is stations ' total passengers ? | Do you mean sum of total passengers in all stations ? | yes",
            "sql": "select sum ( total_passengers ) from station"
        },
        {
            "utterance": "show all locations with only 1 station .",
            "sql": "select location from station group by location having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names and main services for train stations that have the top three total number of passengers.",
        "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you show me a list of all of the train station names ?",
            "sql": "select name from station"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "sql": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION"
    },
    "interaction": [
        {
            "utterance": "what is the Number_of_Platforms does Main_Services South Western Main Line West of England Main Line have ?",
            "sql": "select number_of_platforms from station where main_services = value"
        },
        {
            "utterance": "how many passengers are in the London Waterloo ?",
            "sql": "select total_passengers from station where name = value"
        },
        {
            "utterance": "can you help me with the Annual interchanges for London Bridge",
            "sql": "select annual_interchanges from station where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the station name with greatest number of trains.",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the station name with the greatest number of trains , please .",
            "sql": "select t2 . name from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id group by t1 . station_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the location of that station ?",
            "sql": "select t2 . location from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id group by t1 . station_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the main services of that station ?",
            "sql": "select t2 . main_services from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id group by t1 . station_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the station id of that station ?",
            "sql": "select t2 . station_id from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id group by t1 . station_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many annual interchanges are at that station ?",
            "sql": "select t2 . annual_interchanges from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id group by t1 . station_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of the station with station id 3 ?",
            "sql": "select name from station where station_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the location with most number of train stations.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which location has the most number of train stations ?",
            "sql": "select location , count ( * ) from station group by location order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the total number of passengers do train station in london has ?",
            "sql": "select sum ( total_passengers ) from station where location = value"
        },
        {
            "utterance": "How many number of platforms do they have ? | could you give more info of your problem ? it the `` they '' station id or location ? | What is the number of platforms does train station in london has ?",
            "sql": "select sum ( number_of_platforms ) from station where location = value"
        },
        {
            "utterance": "What is the name of the train station in londom ?",
            "sql": "select name from station where location = value"
        },
        {
            "utterance": "What is the main service of train station in london ?",
            "sql": "select main_services from station where location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all locations which don't have a train station with at least 15 platforms.",
        "sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"
    },
    "interaction": [
        {
            "utterance": "Find the total passengers of London Waterloo ?",
            "sql": "select total_passengers from station where name = value"
        },
        {
            "utterance": "How many Number of Platforms in station id 2 ?",
            "sql": "select number_of_platforms from station where station_id = value"
        },
        {
            "utterance": "What are the Main Services of station id 3 ?",
            "sql": "select main_services from station where station_id = value"
        },
        {
            "utterance": "Show all locations which do n't have a train station with at least 15 platforms .",
            "sql": "select location from station except select location from station where number_of_platforms > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the station name with greatest number of trains.",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which station has the greatest number of traims ?",
            "sql": "select * from train_station as t1 join station as t2 on t1 . station_id = t2 . station_id group by t1 . station_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Whats the total passengers london waterloo has ?",
            "sql": "select total_passengers from station where name = value"
        },
        {
            "utterance": "Whats the number of platforms do london waterloo has ?",
            "sql": "select number_of_platforms from station where name = value"
        },
        {
            "utterance": "Where is it located ?",
            "sql": "select location from station where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names and main services for train stations that have the top three total number of passengers.",
        "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the top three total number of passengers ?",
            "sql": "select total_passengers from station order by total_passengers desc limit value"
        },
        {
            "utterance": "What are the names and main services for train stations for these ?",
            "sql": "select name , main_services from station order by total_passengers desc limit value"
        },
        {
            "utterance": "What about the names and main services for the train stations with the least 3 number of passengers ?",
            "sql": "select name , main_services from station order by total_passengers asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25"
    },
    "interaction": [
        {
            "utterance": "Could you show me all the locations that have train stations with at least 15 platforms ?",
            "sql": "select distinct location from station where number_of_platforms > = value"
        },
        {
            "utterance": "Could you show me all the locations that have train stations with more than 25 total passengers ?",
            "sql": "select distinct location from station where total_passengers > value"
        },
        {
            "utterance": "Could you show me all the locations that have train stations with exactly 19 platforms ?",
            "sql": "select distinct location from station where number_of_platforms = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all locations with only 1 station.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Can you please list all of the locations with only one station ?",
            "sql": "select location from station group by location having count ( * ) = value"
        },
        {
            "utterance": "What is the name of the station in Glasgow ?",
            "sql": "select name from station where location = value"
        },
        {
            "utterance": "How many platforms does Glasgow Central have ?",
            "sql": "select number_of_platforms from station where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\""
    },
    "interaction": [
        {
            "utterance": "When did the violin players perform ?",
            "sql": "select t3 . date from member_attendance as t1 join member as t2 on t1 . member_id = t2 . member_id join performance as t3 on t1 . performance_id = t3 . performance_id where t2 . role = value"
        },
        {
            "utterance": "Which violin player attended the most ? | Do you mean the name of the violin player that attended the most number of performances ? | Yes , what is the name of the violin player who attended the most number of performances ?",
            "sql": "select t1 . name from member as t1 join member_attendance as t2 on t1 . member_id = t2 . member_id group by t2 . member_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the violin player who attended the least performances ?",
            "sql": "select t1 . name from member as t1 join member_attendance as t2 on t1 . member_id = t2 . member_id group by t2 . member_id order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the most common location of performances.",
        "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of locations ?",
            "sql": "select location from performance"
        },
        {
            "utterance": "what is the average of attendance ?",
            "sql": "select avg ( attendance ) from performance"
        },
        {
            "utterance": "what is the highest attendance 's ?",
            "sql": "select max ( attendance ) from performance"
        },
        {
            "utterance": "what is the lowest attendance 's ?",
            "sql": "select min ( attendance ) from performance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
        "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC"
    },
    "interaction": [
        {
            "utterance": "Hello , how many members are there ?",
            "sql": "select count ( * ) from member"
        },
        {
            "utterance": "What is the Nationality of the id number 4 .",
            "sql": "select nationality from member where member_id = value"
        },
        {
            "utterance": "What is the most common nationality ?",
            "sql": "select nationality from member group by nationality order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of members who did not attend any performance.",
        "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)"
    },
    "interaction": [
        {
            "utterance": "How many performances are listed ? | Did you mean the count of Performance ID in the member attendance table \uff1f | Yes",
            "sql": "select count ( distinct performance_id ) from member_attendance"
        },
        {
            "utterance": "What are the roles for each performance ?",
            "sql": "select t2 . performance_id , t1 . role from member as t1 join member_attendance as t2 on t1 . member_id = t2 . member_id group by t2 . performance_id"
        },
        {
            "utterance": "What country is each member from ? | Did you mean show the name of member and the related Nationality ? | yes",
            "sql": "select name , nationality from member"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the date of the performance with the highest number of attendees?",
        "sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list all dates available",
            "sql": "select date from performance"
        },
        {
            "utterance": "on what date of the performance with the highest number of attendees ?",
            "sql": "select date from performance order by attendance desc limit value"
        },
        {
            "utterance": "of the highest number of attendees | Did you mean to ask for the performance id of the performance with the highest number of attendees ? | yes",
            "sql": "select performance_id from performance order by attendance desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 0,
    "final": {
        "utterance": "Show director with the largest number of show times in total.",
        "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the films title that direct by Bill Schreiner ?",
            "sql": "select title from film where directed_by = value"
        },
        {
            "utterance": "show director with the largest number of show times in total",
            "sql": "select t2 . directed_by from schedule as t1 join film as t2 on t1 . film_id = t2 . film_id group by t2 . directed_by order by sum ( t1 . show_times_per_day ) desc limit value"
        },
        {
            "utterance": "show me a list of original air date ?",
            "sql": "select original_air_date from film"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the cinema name and location for cinemas with capacity above average.",
        "sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"
    },
    "interaction": [
        {
            "utterance": "How many cinemas are there in total ?",
            "sql": "select count ( * ) from cinema"
        },
        {
            "utterance": "What is the average capacity ?",
            "sql": "select avg ( capacity ) from cinema"
        },
        {
            "utterance": "How many cinemas have above average capacity ?",
            "sql": "select count ( * ) from cinema where capacity > ( select avg ( capacity ) from cinema )"
        },
        {
            "utterance": "What is the name and location of the 2 cinemas with above average capacity ?",
            "sql": "select name , location from cinema where capacity > ( select avg ( capacity ) from cinema )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the locations that have more than one movie theater with capacity above 300.",
        "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what is the capacity of county wicklow",
            "sql": "select capacity from cinema where location = value"
        },
        {
            "utterance": "what is the average capacity",
            "sql": "select avg ( capacity ) from cinema"
        },
        {
            "utterance": "find the locations that have more than one movie theater with capacity above 300",
            "sql": "select location from cinema where capacity > value group by location having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 3,
    "final": {
        "utterance": "How many films have the word 'Dummy' in their titles?",
        "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""
    },
    "interaction": [
        {
            "utterance": "What are the names of each of the films ?",
            "sql": "select title from film"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the title and maximum price of each film?",
        "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    "interaction": [
        {
            "utterance": "what is the highest price ?",
            "sql": "select max ( price ) from schedule"
        },
        {
            "utterance": "what is the average of prices*",
            "sql": "select avg ( price ) from schedule"
        },
        {
            "utterance": "what is the average of rank in series ?",
            "sql": "select avg ( rank_in_series ) from film"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the title and maximum price of each film?",
        "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    "interaction": [
        {
            "utterance": "How many film titles are there ?",
            "sql": "select count ( distinct title ) from film"
        },
        {
            "utterance": "Please list all the film titles .",
            "sql": "select title from film"
        },
        {
            "utterance": "Please list each title with its maximum price .",
            "sql": "select t1 . title , max ( price ) from film as t1 join schedule as t2 on t1 . film_id = t2 . film_id group by t1 . film_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011"
    },
    "interaction": [
        {
            "utterance": "Show all the locations where some cinemas were opened in year 2010",
            "sql": "select location from cinema where openning_year = value"
        },
        {
            "utterance": "Show all the locations where some cinemas were opened in year 2011",
            "sql": "select location from cinema where openning_year = value"
        },
        {
            "utterance": "How many locations where cinemas were opened in both year 2010 and 2011 ?",
            "sql": "select count ( * ) from ( select location from cinema where openning_year = value intersect select location from cinema where openning_year = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the location with the most cinemas opened in year 2010 or later?",
        "sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different cinemas are on the list ?",
            "sql": "select count ( distinct cinema_id ) from cinema"
        },
        {
            "utterance": "What is the average capacity of each cinema ?",
            "sql": "select avg ( capacity ) from cinema"
        },
        {
            "utterance": "Which cinema has the highest capacity , and which has the lowest capacity ?",
            "sql": "select name from cinema where capacity = ( select min ( capacity ) from cinema ) or capacity = ( select max ( capacity ) from cinema )"
        },
        {
            "utterance": "Which locations have the most cinemas ?",
            "sql": "select location from cinema group by location order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which location has the most cinemas opened in 2010 or later ?",
            "sql": "select location from cinema where openning_year > = value group by location order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all the locations where no cinema has capacity over 800.",
        "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of cinema names ?",
            "sql": "select name from cinema"
        },
        {
            "utterance": "which one is the opened first ?",
            "sql": "select name from cinema order by openning_year asc limit value"
        },
        {
            "utterance": "what is the average of capacities ?",
            "sql": "select avg ( capacity ) from cinema"
        },
        {
            "utterance": "show all the locations where no cinema has capacity over 800 .",
            "sql": "select location from cinema except select location from cinema where capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the name and location of the cinema with the largest capacity?",
        "sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the capacity of Codling ? | Did you mean the capacity of the cinema with a name of Coding ? | yes",
            "sql": "select capacity from cinema where name = value"
        },
        {
            "utterance": "Which is the largest capacity of cinema ?",
            "sql": "select max ( capacity ) from cinema"
        },
        {
            "utterance": "where is the location of Codling ?",
            "sql": "select location from cinema where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the locations that have more than one movie theater with capacity above 300.",
        "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many movie theatres have a capacity of at least 300 people ?",
            "sql": "select count ( * ) from cinema where capacity > = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from cinema where capacity > = value"
        },
        {
            "utterance": "What are their specific locations ?",
            "sql": "select location from cinema where capacity > = value"
        },
        {
            "utterance": "Which theatre has the largest capacity ?",
            "sql": "select * from cinema order by capacity desc limit value"
        },
        {
            "utterance": "Which year was Codling open ?",
            "sql": "select openning_year from cinema where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 11,
    "final": {
        "utterance": "What is total number of show times per dat for each cinema?",
        "sql": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id"
    },
    "interaction": [
        {
            "utterance": "what is the total number of showtimes at each cinema ?",
            "sql": "select t2 . name , sum ( t1 . show_times_per_day ) from schedule as t1 join cinema as t2 on t1 . cinema_id = t2 . cinema_id group by t1 . cinema_id"
        },
        {
            "utterance": "what cinema has the most showings in one day ?",
            "sql": "select t2 . name from schedule as t1 join cinema as t2 on t1 . cinema_id = t2 . cinema_id group by t1 . cinema_id order by sum ( t1 . show_times_per_day ) desc limit value"
        },
        {
            "utterance": "What cinema has the highest capacity ?",
            "sql": "select name from cinema order by capacity desc limit value"
        },
        {
            "utterance": "what cinema is in Cork county ?",
            "sql": "select name from cinema where location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all the locations where no cinema has capacity over 800.",
        "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"
    },
    "interaction": [
        {
            "utterance": "what is the capacity of Codling Cinema",
            "sql": "select capacity from cinema where name = value"
        },
        {
            "utterance": "what year was it opened ?",
            "sql": "select openning_year from cinema where name = value"
        },
        {
            "utterance": "where is it located ?",
            "sql": "select location from cinema where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 13,
    "final": {
        "utterance": "Show director with the largest number of show times in total.",
        "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many directors have multiple show times ?",
            "sql": "select count ( distinct t2 . directed_by ) from schedule as t1 join film as t2 on t1 . film_id = t2 . film_id where t1 . show_times_per_day > value"
        },
        {
            "utterance": "What are the names of the two directors who have multiple show times ?",
            "sql": "select distinct t2 . directed_by from schedule as t1 join film as t2 on t1 . film_id = t2 . film_id where t1 . show_times_per_day > value"
        },
        {
            "utterance": "How many show times does BIll Schreiner have",
            "sql": "select sum ( t1 . show_times_per_day ) from schedule as t1 join film as t2 on t1 . film_id = t2 . film_id where t2 . directed_by = value group by t2 . directed_by"
        },
        {
            "utterance": "How many show times does Jesus Salvador Trevino have ?",
            "sql": "select sum ( t1 . show_times_per_day ) from schedule as t1 join film as t2 on t1 . film_id = t2 . film_id where t2 . directed_by = value group by t2 . directed_by"
        },
        {
            "utterance": "Which show director has the largest number of show times in total ?",
            "sql": "select t2 . directed_by from schedule as t1 join film as t2 on t1 . film_id = t2 . film_id group by t2 . directed_by order by sum ( t1 . show_times_per_day ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'"
    },
    "interaction": [
        {
            "utterance": "Show me the captain ranks",
            "sql": "select rank from captain"
        },
        {
            "utterance": "Show me the captain rank that has no captain in Third-rate ship of the line class",
            "sql": "select rank from captain where class ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the ship type that are used by both ships with Panama and Malta flags.",
        "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'"
    },
    "interaction": [
        {
            "utterance": "What are the ship id of HM Cutter Avenger ?",
            "sql": "select ship_id from ship where name = value"
        },
        {
            "utterance": "what type of Flag is used by HMS Manxman ?",
            "sql": "select flag from ship where name = value"
        },
        {
            "utterance": "what are the Built Year of HMS Gorgon ?",
            "sql": "select built_year from ship where name = value"
        },
        {
            "utterance": "Find the ship type that are used by both ships with Panama and Malta flags ?",
            "sql": "select type from ship where flag = value intersect select type from ship where flag = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'"
    },
    "interaction": [
        {
            "utterance": "what ship is steered by a captain with lieutenant rank ? | do you want to return the names of these ships ? | yes",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . rank = value"
        },
        {
            "utterance": "give me the ship id",
            "sql": "select t1 . ship_id from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . rank = value"
        },
        {
            "utterance": "what is the captain 's age ?",
            "sql": "select t2 . age from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which flag is most widely used among all ships?",
        "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which flag is least widely used among all ships ?",
            "sql": "select flag from ship group by flag order by count ( * ) limit value"
        },
        {
            "utterance": "How many flags in this table ?",
            "sql": "select count ( flag ) from ship"
        },
        {
            "utterance": "How many built year same in this table ? | did you mean 'How many built year saved this table ' ? | Yes .",
            "sql": "select count ( distinct built_year ) from ship"
        },
        {
            "utterance": "How many names in this table ?",
            "sql": "select count ( distinct name ) from ship"
        },
        {
            "utterance": "How many types in this table ?",
            "sql": "select count ( distinct type ) from ship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 4,
    "final": {
        "utterance": "what are the names and classes of the ships that do not have any captain yet?",
        "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
    },
    "interaction": [
        {
            "utterance": "what are the names and classes of the ships that do not have any captain yet ?",
            "sql": "select name , class from ship where ship_id not in ( select ship_id from captain )"
        },
        {
            "utterance": "What are the names of the captains that have classes ?",
            "sql": "select name from captain where class ! = value"
        },
        {
            "utterance": "What is the id for HMS Gorgon ? | Did you mean ship id ? | yes",
            "sql": "select ship_id from ship where name = value"
        },
        {
            "utterance": "How many classes are there ? | Did you mean the number of distinct type classes of ships ? | yes",
            "sql": "select count ( distinct class ) from ship"
        },
        {
            "utterance": "What is HMS Gorgon 's rank ?",
            "sql": "select t1 . rank from captain as t1 join ship as t2 on t1 . ship_id = t2 . ship_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the ship that is steered by the youngest captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many ships in this table ?",
            "sql": "select count ( * ) from ship"
        },
        {
            "utterance": "How many captains in this table ?",
            "sql": "select count ( * ) from captain"
        },
        {
            "utterance": "Who is the most aged captain in this table ?",
            "sql": "select captain_id from captain order by age desc limit value"
        },
        {
            "utterance": "How many different ranks in this table ?",
            "sql": "select count ( distinct rank ) from captain"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which classes have more than two captains?",
        "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many captains does third-rate ship of the line have ?",
            "sql": "select count ( * ) from captain where class = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 7,
    "final": {
        "utterance": "what are the names and classes of the ships that do not have any captain yet?",
        "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
    },
    "interaction": [
        {
            "utterance": "What are the names of all ships ?",
            "sql": "select name from ship"
        },
        {
            "utterance": "And what about all the classes ?",
            "sql": "select class from ship"
        },
        {
            "utterance": "Can I see list of names and classes of ships that do n't have any captain ?",
            "sql": "select name , class from ship where ship_id not in ( select ship_id from captain )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the ships that have more than one captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many ships have more than one captain ?",
            "sql": "select count ( * ) from ( select * from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id group by t2 . ship_id having count ( * ) > value )"
        },
        {
            "utterance": "how many ships have a single captain ?",
            "sql": "select count ( * ) from ( select * from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id group by t2 . ship_id having count ( * ) = value )"
        },
        {
            "utterance": "what is the age of the oldest captain ?",
            "sql": "select age from captain order by age desc limit value"
        },
        {
            "utterance": "what about the youngest ?",
            "sql": "select age from captain order by age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the average and minimum age of captains in different class?",
        "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest in the list ?",
            "sql": "select name from captain order by age desc limit value"
        },
        {
            "utterance": "what is the rank of Captain Gilbert Pears ?",
            "sql": "select rank from captain where name = value"
        },
        {
            "utterance": "What 's about Captain Sir Henry Langford ?",
            "sql": "select rank from captain where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')"
    },
    "interaction": [
        {
            "utterance": "List name of ships ?",
            "sql": "select name from ship"
        },
        {
            "utterance": "Show flags of ships ?",
            "sql": "select name , flag from ship"
        },
        {
            "utterance": "Name of ships not steered by by any captain with Midshipman rank ?",
            "sql": "select name from ship where ship_id not in ( select ship_id from captain where rank = value )"
        },
        {
            "utterance": "Flags of ships not steered by any captain with Midshipman rank ?",
            "sql": "select flag from ship where ship_id not in ( select ship_id from captain where rank = value )"
        },
        {
            "utterance": "Okay . Name and flags of ships not steered by any captain of Midshipman rank ?",
            "sql": "select name , flag from ship where ship_id not in ( select ship_id from captain where rank = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many captains with younger than 50 are in each rank?",
        "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest captain ?",
            "sql": "select name from captain order by age desc limit value"
        },
        {
            "utterance": "What about the youngest captain ?",
            "sql": "select name from captain order by age asc limit value"
        },
        {
            "utterance": "How many captains are there younger than 50 in each rank ?",
            "sql": "select count ( * ) , rank from captain where age < value group by rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the name of the youngest captain?",
        "sql": "SELECT name FROM captain ORDER BY age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "let me know the name of the youngest captain",
            "sql": "select name from captain order by age limit value"
        },
        {
            "utterance": "How young is he ?",
            "sql": "select age from captain order by age limit value"
        },
        {
            "utterance": "Now who is the oldest captain ?",
            "sql": "select name from captain order by age desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the ships that have more than one captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many ships are there ?",
            "sql": "select count ( * ) from ship"
        },
        {
            "utterance": "Out of them which ship names have more than one captain ?",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id group by t2 . ship_id having count ( * ) > value"
        },
        {
            "utterance": "How about ship names with only one captain ?",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id group by t2 . ship_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'"
    },
    "interaction": [
        {
            "utterance": "What are the ships that are steered by a captain with Midshipman rank ?",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . rank = value"
        },
        {
            "utterance": "What are the ships that are steered by a captain with Lieutenant rank ?",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . rank = value"
        },
        {
            "utterance": "Are there any captains that are included in both lists ? | Did you mean ships that are included in both lists ? | Oh sorry , yes ships that are included in both lists",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . rank = value intersect select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
        "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'"
    },
    "interaction": [
        {
            "utterance": "What rank is Captain Conway ?",
            "sql": "select rank from captain where name like value"
        },
        {
            "utterance": "What is the average age of the midshipmans",
            "sql": "select avg ( age ) from captain where rank = value"
        },
        {
            "utterance": "What class of captain named Lieutenant Hugh Bolitho ?",
            "sql": "select class from captain where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many ship there",
            "sql": "select count ( * ) from ship"
        },
        {
            "utterance": "what is the name of ship id 2",
            "sql": "select name from ship where ship_id = value"
        },
        {
            "utterance": "what is the built year of the ship id 3",
            "sql": "select built_year from ship where ship_id = value"
        },
        {
            "utterance": "what is the class of the ship id 1",
            "sql": "select class from ship where ship_id = value"
        },
        {
            "utterance": "what is the flag of the ship id 1",
            "sql": "select flag from ship where ship_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of the ship that is steered by the youngest captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are the captains ? | Do you mean you want the name of captain ? | Yes , what are the captains names",
            "sql": "select t1 . name from captain as t1"
        },
        {
            "utterance": "Who is the youngest captain ?",
            "sql": "select t1 . name from captain as t1 order by t1 . age limit value"
        },
        {
            "utterance": "What ship does Captain Henry steer ? | Do you mean the name of ships of Captain Henry ? | Yes the name of the ship of Captain Henry",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . name like value"
        },
        {
            "utterance": "Which is the ship of Captain Henry Dumaresq ?",
            "sql": "select t1 . name from ship as t1 join captain as t2 on t1 . ship_id = t2 . ship_id where t2 . name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
    },
    "interaction": [
        {
            "utterance": "Who are the technicians from team `` CLE '' and `` CWS '' ?",
            "sql": "select name from technician where team = value or team = value"
        },
        {
            "utterance": "Please show me the starting years for them",
            "sql": "select starting_year from technician where team = value or team = value"
        },
        {
            "utterance": "What years are shared ?",
            "sql": "select starting_year from technician where team = value intersect select starting_year from technician where team = value"
        },
        {
            "utterance": "Can you also give me the minimum and maximum starting years ?",
            "sql": "select max ( starting_year ) , min ( starting_year ) from technician"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 1,
    "final": {
        "utterance": "Show names of technicians and series of machines they are assigned to repair.",
        "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID"
    },
    "interaction": [
        {
            "utterance": "Who are the technicians ?",
            "sql": "select name from technician"
        },
        {
            "utterance": "Show me which team of machine each technician is assigned .",
            "sql": "select t3 . name , t2 . team from repair_assignment as t1 join machine as t2 on t1 . machine_id = t2 . machine_id join technician as t3 on t1 . technician_id = t3 . technician_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 2,
    "final": {
        "utterance": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    "interaction": [
        {
            "utterance": "show names of technicians by order of quality rank of machine they are assigned from worst to best",
            "sql": "select t3 . name from repair_assignment as t1 join machine as t2 on t1 . machine_id = t2 . machine_id join technician as t3 on t1 . technician_id = t3 . technician_id order by t2 . quality_rank"
        },
        {
            "utterance": "Which technician is the oldest ? | Do you mean the id of the oldest technician ? | What is the Name of the oldest technician ?",
            "sql": "select name from technician order by age desc limit value"
        },
        {
            "utterance": "What is the name of the Team with the most number of value points ?",
            "sql": "select team from machine order by value_points desc limit value"
        },
        {
            "utterance": "What was the Making Year of the Machine series With the lowest quality rank ?",
            "sql": "select making_year from machine order by quality_rank limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 3,
    "final": {
        "utterance": "Show names of technicians and the number of machines they are assigned to repair.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many technicians are there in total ?",
            "sql": "select count ( * ) from technician"
        },
        {
            "utterance": "Can you show me a list of all of the technicians names the machines they are assigned to repair ? | Did you want the names of technicians and the ids of machines they are assigned to repair ? | Yes ! Can you show me their names and their machine ids that they are assigned to repair ?",
            "sql": "select t2 . name , t1 . machine_id from repair_assignment as t1 join technician as t2 on t1 . technician_id = t2 . technician_id"
        },
        {
            "utterance": "Great ! Also add to that list the starting year and age of each technician ?",
            "sql": "select t2 . name , t1 . machine_id , t2 . starting_year , t2 . age from repair_assignment as t1 join technician as t2 on t1 . technician_id = t2 . technician_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
    },
    "interaction": [
        {
            "utterance": "What are the names of technicians from `` CLE '' ?",
            "sql": "select name from technician where team = value"
        },
        {
            "utterance": "What about names from `` CWS '' ?",
            "sql": "select name from technician where team = value"
        },
        {
            "utterance": "And what are starting years shared by technicians from both teams ?",
            "sql": "select starting_year from technician where team = value intersect select starting_year from technician where team = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 5,
    "final": {
        "utterance": "List the names of technicians who have not been assigned to repair machines.",
        "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
    },
    "interaction": [
        {
            "utterance": "List out the all technician name",
            "sql": "select name from technician"
        },
        {
            "utterance": "list out the all machine id",
            "sql": "select machine_id from repair_assignment"
        },
        {
            "utterance": "list out the all technician age",
            "sql": "select technician_id , age from technician"
        },
        {
            "utterance": "list the name of technician who have not been assigned to repair machines",
            "sql": "select name from technician where technician_id not in ( select technician_id from repair_assignment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 6,
    "final": {
        "utterance": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    "interaction": [
        {
            "utterance": "Show the names of all technicians .",
            "sql": "select name from technician"
        },
        {
            "utterance": "Show the names of all technicians and the machines they are assigned to .",
            "sql": "select t3 . name , t1 . machine_id from repair_assignment as t1 join machine as t2 on t1 . machine_id = t2 . machine_id join technician as t3 on t1 . technician_id = t3 . technician_id"
        },
        {
            "utterance": "Show the names of all technicians assigned to the machine with ID 2 .",
            "sql": "select t3 . name , t1 . machine_id from repair_assignment as t1 join machine as t2 on t1 . machine_id = t2 . machine_id join technician as t3 on t1 . technician_id = t3 . technician_id and t1 . machine_id = value"
        },
        {
            "utterance": "Show the names of all technicians in ascending order of quality rank assigned to the machine with ID 2 .",
            "sql": "select t3 . name , t1 . machine_id , quality_rank from repair_assignment as t1 join machine as t2 on t1 . machine_id = t2 . machine_id join technician as t3 on t1 . technician_id = t3 . technician_id and t1 . machine_id = value order by quality_rank"
        },
        {
            "utterance": "Show the names of all technicians in ascending order of quality rank assigned to the machine with ID 1 .",
            "sql": "select t3 . name , t1 . machine_id , quality_rank from repair_assignment as t1 join machine as t2 on t1 . machine_id = t2 . machine_id join technician as t3 on t1 . technician_id = t3 . technician_id and t1 . machine_id = value order by quality_rank"
        },
        {
            "utterance": "Show the names of technicians in ascending order of quality rank of the machine they are assigned .",
            "sql": "select t3 . name from repair_assignment as t1 join machine as t2 on t1 . machine_id = t2 . machine_id join technician as t3 on t1 . technician_id = t3 . technician_id order by t2 . quality_rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the starting year of the oldest technicians?",
        "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the starting year of the oldest technician ?",
            "sql": "select starting_year from technician order by age desc limit value"
        },
        {
            "utterance": "What is their name and team ? | what do you mean their ? could you give more info ? | What is the name of the oldest technician ?",
            "sql": "select name from technician order by age desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many students does LORIA ONDERSMA teaches?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""
    },
    "interaction": [
        {
            "utterance": "Can you list the class room associated with the name Loria Ondersma in the teachers table ?",
            "sql": "select classroom from teachers where lastname = value"
        },
        {
            "utterance": "Can you show me all first and last names from the list table that have a classroom id of 108 ?",
            "sql": "select firstname , lastname from teachers where classroom = value"
        },
        {
            "utterance": "Can you tell me how many unique names are currently in the table ?",
            "sql": "select count ( distinct firstname ) from teachers"
        },
        {
            "utterance": "How many unique names in the list table have a classroom id of 108 ?",
            "sql": "select count ( distinct firstname ) from teachers where classroom = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list all of the first and last names for all of the students in the database ?",
            "sql": "select lastname , firstname from list"
        },
        {
            "utterance": "Excellent ! Could you filter that list to show only the students who were taught by the teacher with the last name Moyer ?",
            "sql": "select t1 . firstname , t1 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t2 . lastname = value"
        },
        {
            "utterance": "Great ! Could you update this list to include the grade of each student ?",
            "sql": "select t1 . firstname , t1 . lastname , grade from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t2 . lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""
    },
    "interaction": [
        {
            "utterance": "what is the lname of grade 2 | Do you mean what are the last names of the students in grade 2 ? | what is the lname of classroom 101",
            "sql": "select lastname from list where classroom = value"
        },
        {
            "utterance": "what is the fname of class room 102",
            "sql": "select firstname from list where classroom = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of the teacher who teaches the largest number of students.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all of the students ?",
            "sql": "select lastname , firstname from list"
        },
        {
            "utterance": "How many students are in that classroom ?",
            "sql": "select count ( * ) from list group by classroom order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of the teacher who teaches in that classroom ?",
            "sql": "select t2 . firstname , t2 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom group by t2 . firstname , t2 . lastname order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the last names of all the teachers that teach GELL TAMI.",
        "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of grades ?",
            "sql": "select grade from list"
        },
        {
            "utterance": "can you show me a list of first name that starting with 'J ' ?",
            "sql": "select firstname from list where firstname like value"
        },
        {
            "utterance": "can you show me a list of last name that starting with 'J ' ?",
            "sql": "select lastname from list where lastname like value"
        },
        {
            "utterance": "can you show me a list of teacher class room ?",
            "sql": "select classroom from teachers"
        },
        {
            "utterance": "`` Find the last names of all the teachers that teach GELL TAMI .",
            "sql": "select t2 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t1 . firstname = value and t1 . lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which classroom has the most students?",
        "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which classroom has the most students ?",
            "sql": "select classroom from list group by classroom order by count ( * ) desc limit value"
        },
        {
            "utterance": "Could you tell me what grade that is , please ?",
            "sql": "select classroom , grade from list group by classroom order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the first names of the students in that classroom that begin with the letter `` S '' ?",
            "sql": "select firstname from list where firstname like value and classroom in ( select classroom from list group by classroom order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which classroom has the most students?",
        "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which classroom has the most students ?",
            "sql": "select classroom from list group by classroom order by count ( * ) desc limit value"
        },
        {
            "utterance": "what grade is that classroom ?",
            "sql": "select grade from list group by classroom order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the teacher 's last name ?",
            "sql": "select lastname from list group by classroom order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 7,
    "final": {
        "utterance": "For each grade 0 classroom, report the total number of students.",
        "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
    },
    "interaction": [
        {
            "utterance": "how many classrooms are available ?",
            "sql": "select count ( distinct classroom ) from list"
        },
        {
            "utterance": "how many grades are available ?",
            "sql": "select count ( distinct grade ) from list"
        },
        {
            "utterance": "yes | LastName or FirstName ? | lastname",
            "sql": "select count ( distinct lastname ) from list"
        },
        {
            "utterance": "how many firstnames are available ?",
            "sql": "select count ( distinct firstname ) from list"
        },
        {
            "utterance": "what was the car grade ?",
            "sql": "select grade from list where lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "What students are n't taught by Otha Moyer ? | Did you want to return their full names ? | Yes please",
            "sql": "select distinct t1 . firstname , t1 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom except select t1 . firstname , t1 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t2 . firstname = value and t2 . lastname = value"
        },
        {
            "utterance": "Could you limit it to all first graders ?",
            "sql": "select distinct t1 . firstname , t1 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t1 . grade = value except select t1 . firstname , t1 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t2 . firstname = value and t2 . lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "what is the average of grades ?",
            "sql": "select avg ( grade ) from list"
        },
        {
            "utterance": "can you show me a list of teacchers first name ?",
            "sql": "select firstname from teachers"
        },
        {
            "utterance": "can you show me a list of teachers first name that starting with 'M ' ?",
            "sql": "select firstname from teachers where firstname like value"
        },
        {
            "utterance": "find all first-grade students who are not taught by otha moyer . | Do you mean First or Last names ? | first",
            "sql": "select distinct t1 . firstname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t1 . grade = value except select t1 . firstname , t1 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t2 . firstname = value and t2 . lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "How many teachers in this table ?",
            "sql": "select count ( * ) from teachers"
        },
        {
            "utterance": "Yes .",
            "sql": "select grade from list where firstname like value"
        },
        {
            "utterance": "Find the last name of Mr.STORMY",
            "sql": "select lastname from list where firstname like value"
        },
        {
            "utterance": "How many students in this table ?",
            "sql": "select count ( * ) from list"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of the teacher who teaches the largest number of students.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of the teacher who teaches the largest number of students .",
            "sql": "select t2 . firstname , t2 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom group by t2 . firstname , t2 . lastname order by count ( * ) desc limit value"
        },
        {
            "utterance": "What grade do they teach ? | Here are the grades of the students taught by the teacher who teaches the largest number of students . | What is their class room ?",
            "sql": "select t1 . classroom from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom group by t2 . firstname , t2 . lastname order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many students does KAWA GORDON teaches?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""
    },
    "interaction": [
        {
            "utterance": "How many students does KAWA GORDON teaches ?",
            "sql": "select count ( * ) from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t2 . firstname = value and t2 . lastname = value"
        },
        {
            "utterance": "How many students does MIN MACROSTIE teaches ?",
            "sql": "select count ( * ) from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t2 . firstname like value and t2 . lastname like value"
        },
        {
            "utterance": "What are the first and last names of the teachers that teach STORMY CHRISTENSEN ?",
            "sql": "select t2 . firstname , t2 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where t1 . firstname like value and t1 . lastname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the last names of the teachers that teach fifth grade.",
        "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
    },
    "interaction": [
        {
            "utterance": "Can you tell me how many teachers teach fifth grade ?",
            "sql": "select count ( distinct t2 . lastname ) from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where grade = value"
        },
        {
            "utterance": "What is that teacher 's last name ?",
            "sql": "select distinct t2 . lastname from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where grade = value"
        },
        {
            "utterance": "What classroom does this teacher teach in ?",
            "sql": "select distinct t2 . classroom from list as t1 join teachers as t2 on t1 . classroom = t2 . classroom where grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    "interaction": [
        {
            "utterance": "What are the duration 's of the longest and shortest track in milliseconds .",
            "sql": "select max ( milliseconds ) , min ( milliseconds ) from track"
        },
        {
            "utterance": "What is the name of the longest track ?",
            "sql": "select name from track where milliseconds = ( select max ( milliseconds ) from track )"
        },
        {
            "utterance": "Who was the longest track written by ?",
            "sql": "select composer from track where milliseconds = ( select max ( milliseconds ) from track )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Hom many albums does the artist \"Metallica\" have?",
        "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
    },
    "interaction": [
        {
            "utterance": "how many artists do you have ?",
            "sql": "select count ( distinct artistid ) from artist"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from artist"
        },
        {
            "utterance": "how many albums does AC/DC have ?",
            "sql": "select count ( * ) from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t2 . name = value"
        },
        {
            "utterance": "And for Metallica ?",
            "sql": "select count ( * ) from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the album names, ids and the number of tracks for each album.",
        "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID"
    },
    "interaction": [
        {
            "utterance": "Tell me the artist id and album id for title Balls to the Wall ?",
            "sql": "select albumid , artistid from album where title = value"
        },
        {
            "utterance": "k. Who is the composer for For Those About To Rock ( We Salute You ) ?",
            "sql": "select distinct t2 . composer from album as t1 join track as t2 on t1 . albumid = t2 . albumid where t1 . title = value"
        },
        {
            "utterance": "k. Who is the composer for Balls to the Wall ?",
            "sql": "select distinct t2 . composer from album as t1 join track as t2 on t1 . albumid = t2 . albumid where t1 . title = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select t1 . title , t2 . albumid , count ( * ) from album as t1 join track as t2 on t1 . albumid = t2 . albumid group by t2 . albumid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"
    },
    "interaction": [
        {
            "utterance": "List album titles for albums containing Reggae genre tracks . | Did you mean both contain 'Reggae ' and 'Rock ' genre tracks ? | yes",
            "sql": "select t1 . title from album as t1 join track as t2 on t1 . albumid = t2 . albumid join genre as t3 on t2 . genreid = t3 . genreid where t3 . name = value intersect select t1 . title from album as t1 join track as t2 on t1 . albumid = t2 . albumid join genre as t3 on t2 . genreid = t3 . genreid where t3 . name = value"
        },
        {
            "utterance": "List album titles for albums containing Rock genre tracks",
            "sql": "select t1 . title from album as t1 join track as t2 on t1 . albumid = t2 . albumid join genre as t3 on t2 . genreid = t3 . genreid where t3 . name = value intersect select t1 . title from album as t1 join track as t2 on t1 . albumid = t2 . albumid join genre as t3 on t2 . genreid = t3 . genreid where t3 . name = value"
        },
        {
            "utterance": "List album titles for albums containing Metal genre tracks",
            "sql": "select distinct t1 . title from album as t1 join track as t2 on t1 . albumid = t2 . albumid join genre as t3 on t2 . genreid = t3 . genreid where t3 . name = value"
        },
        {
            "utterance": "How many albums contain 'Metal ' genre tracks ?",
            "sql": "select count ( distinct t1 . title ) from album as t1 join track as t2 on t1 . albumid = t2 . albumid join genre as t3 on t2 . genreid = t3 . genreid where t3 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the genre ID for Latin and Pop ?",
            "sql": "select genreid from genre where name = value or name = value"
        },
        {
            "utterance": "That was very quick , thank you very much : ) Then , could you please let me know the average duration ( milliseconds ) of Latin and Pop ?",
            "sql": "select avg ( milliseconds ) from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value or t1 . name = value"
        },
        {
            "utterance": "That 's an amazingly precise number , thank you again . Then what about the average unit price of Latin and Pop ?",
            "sql": "select avg ( unitprice ) from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value or t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "State the email id of custormer id 1 ?",
            "sql": "select email from customer where customerid = value"
        },
        {
            "utterance": "How many employees are from Calgary city ?",
            "sql": "select count ( * ) from employee where city = value"
        },
        {
            "utterance": "Please show the employee first names and ids of employees who serve at least 10 customers ?",
            "sql": "select t1 . firstname , t1 . supportrepid from customer as t1 join employee as t2 on t1 . supportrepid = t2 . employeeid group by t1 . supportrepid having count ( * ) > = value"
        },
        {
            "utterance": "State the title of employee id 2 ?",
            "sql": "select title from employee where employeeid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many tracks belong to rock genre?",
        "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    "interaction": [
        {
            "utterance": "In the rock genre , how many tracks are there ?",
            "sql": "select count ( * ) from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value"
        },
        {
            "utterance": "What about jazz ?",
            "sql": "select count ( * ) from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value"
        },
        {
            "utterance": "Can you list the composer who wrote the most rock genre songs ?",
            "sql": "select composer from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value group by composer order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you list all composers who wrote tracks with the letter B in their name ?",
            "sql": "select composer from track where name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the title of all the albums of the artist \"AC/DC\".",
        "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""
    },
    "interaction": [
        {
            "utterance": "What is the title of AC/DC 's albums ?",
            "sql": "select title from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the average unit price of rock tracks?",
        "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    "interaction": [
        {
            "utterance": "What is the average unit price of Rock tracks ?",
            "sql": "select avg ( t2 . unitprice ) from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value"
        },
        {
            "utterance": "What 's the average milliseconds of the Rock Tracks ?",
            "sql": "select avg ( t2 . milliseconds ) from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value"
        },
        {
            "utterance": "and for the Jazz tracks ?",
            "sql": "select avg ( t2 . milliseconds ) from genre as t1 join track as t2 on t1 . genreid = t2 . genreid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many artists do not have any album?",
        "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    "interaction": [
        {
            "utterance": "How many artists have album ?",
            "sql": "select count ( distinct artistid ) from album"
        },
        {
            "utterance": "Find the album id of accept ? | The album ids of the artist named 'Accept ' are 2 and 3 . | How many artists in this table ?",
            "sql": "select count ( distinct t1 . artistid ) from artist as t1 join album as t2 on t1 . artistid = t2 . artistid where t1 . name = value"
        },
        {
            "utterance": "How many albums in this table ? | did you mean the number of all the albums shown in the table ? | Yes .",
            "sql": "select count ( * ) from album"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""
    },
    "interaction": [
        {
            "utterance": "I want to know the invoice dates corresponding to customers",
            "sql": "select t1 . firstname , t1 . lastname , t2 . invoicedate from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid"
        },
        {
            "utterance": "Could you please help me with the billing addresses of the named customers ?",
            "sql": "select t1 . firstname , t1 . lastname , t2 . billingaddress from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid"
        },
        {
            "utterance": "Ok , I will also want to know the billing countries of the named customers",
            "sql": "select t1 . firstname , t1 . lastname , t2 . billingcountry from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid"
        },
        {
            "utterance": "OK , I will like to know the billing city of the names customers please .",
            "sql": "select t1 . firstname , t1 . lastname , t2 . billingcity from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the title of all the albums of the artist \"AC/DC\".",
        "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""
    },
    "interaction": [
        {
            "utterance": "Find the titles of all the albums of the artist AC/DC ?",
            "sql": "select title from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t2 . name = value"
        },
        {
            "utterance": "Find the titles of all the albums of the artist Aerosmith please ?",
            "sql": "select title from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t2 . name = value"
        },
        {
            "utterance": "What are the titles of all the albums by artist id 4 ?",
            "sql": "select title from album where artistid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "Show me the title of album id 1 ?",
            "sql": "select t1 . title from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t1 . albumid = value"
        },
        {
            "utterance": "Show me the name of artist with artist id 3 ?",
            "sql": "select name from artist where artistid = value"
        },
        {
            "utterance": "Show me the names of all artist ?",
            "sql": "select name from artist"
        },
        {
            "utterance": "Show me the list of all id and names of all artists that have at least 3 albums in alphabetical order ?",
            "sql": "select t2 . name , t1 . artistid from album as t1 join artist as t2 on t1 . artistid = t2 . artistid group by t1 . artistid having count ( * ) > = value order by t2 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many customers have email that contains \"gmail.com\"?",
        "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( * ) from customer"
        },
        {
            "utterance": "What is the most popular company ?",
            "sql": "select company from customer group by company order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many customers have gmail emails ?",
            "sql": "select count ( * ) from customer where email like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which artist does the album \"Balls to the Wall\" belong to?",
        "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""
    },
    "interaction": [
        {
            "utterance": "I am interested in learning who the artist is .",
            "sql": "select t2 . name from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t1 . title = value"
        },
        {
            "utterance": "That 's okay . What are some of Accept 's other albums ?",
            "sql": "select t1 . title from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t2 . name = value and t1 . title ! = value"
        },
        {
            "utterance": "That sounds good . What about the album `` For Those About To Rock , We Salute You '' ? Which artist produced that one ?",
            "sql": "select t2 . name from album as t1 join artist as t2 on t1 . artistid = t2 . artistid where t1 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the least common media type in all tracks?",
        "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you tell me , which media type is the least common associated with all tracks ?",
            "sql": "select t1 . name from mediatype as t1 join track as t2 on t1 . mediatypeid = t2 . mediatypeid group by t2 . mediatypeid order by count ( * ) asc limit value"
        },
        {
            "utterance": "Thank you ! Can you show me the total number of occurrences for Purchased AAC as the media type ?",
            "sql": "select t1 . name , count ( * ) from mediatype as t1 join track as t2 on t1 . mediatypeid = t2 . mediatypeid group by t2 . mediatypeid order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of the most common genre in all tracks?",
        "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the name of the Track 2 ?",
            "sql": "select name from track where trackid = value"
        },
        {
            "utterance": "what is the unit price of the Fast as a shark ?",
            "sql": "select unitprice from track where name = value"
        },
        {
            "utterance": "Find the milliseconds of Track id 1 ?",
            "sql": "select milliseconds from track where trackid = value"
        },
        {
            "utterance": "how many genre in the list ?",
            "sql": "select count ( * ) from genre"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "How many employees serve at least 10 customers ?",
            "sql": "select count ( * ) from customer as t1 join employee as t2 on t1 . supportrepid = t2 . employeeid group by t1 . supportrepid having count ( * ) > = value"
        },
        {
            "utterance": "What are the first names of employees that serve at least 10 customers ?",
            "sql": "select t1 . firstname from customer as t1 join employee as t2 on t1 . supportrepid = t2 . employeeid group by t1 . supportrepid having count ( * ) > = value"
        },
        {
            "utterance": "What is diego work title ? | is Diego the employee first name ? | Yes",
            "sql": "select company from customer where firstname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the first name and last name employee helps the customer with first name Leonie?",
        "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""
    },
    "interaction": [
        {
            "utterance": "how many customers are there",
            "sql": "select count ( * ) from customer"
        },
        {
            "utterance": "what is the email id of fran\u00e7ois tremblay | ftremblay @ gmail.com is the email of the customer with first and last names fran\u00e7ois tremblay . | what is the birth date of Adams Andrew",
            "sql": "select birthdate from employee where firstname is value and lastname is value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the address of all customers that live in Germany and have invoice.",
        "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
    },
    "interaction": [
        {
            "utterance": "how many customers live in germany and have invoice",
            "sql": "select count ( * ) from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid where t1 . country = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select t1 . address from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid where t1 . country = value"
        },
        {
            "utterance": "include the first and last name of customers of this address in the table",
            "sql": "select t1 . address , t1 . firstname , t1 . lastname from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid where t1 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which artist has the most albums?",
        "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which artist has the most albums ?",
            "sql": "select t2 . name from album as t1 join artist as t2 on t1 . artistid = t2 . artistid group by t2 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which artist has the lowest albums ? | Did you mean which artist has the least number of albums ? | Yes , I mean it . which artist has the least number of albums ?",
            "sql": "select t2 . name from album as t1 join artist as t2 on t1 . artistid = t2 . artistid group by t2 . name order by count ( * ) asc limit value"
        },
        {
            "utterance": "Can you tell me the artist ID number of the Iron Maiden ?",
            "sql": "select t1 . artistid from album as t1 join artist as t2 on t1 . artistid = t2 . artistid group by t2 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you tell me the artist ID number of the Aaron Copland & London Symphony Orchestra .",
            "sql": "select t1 . artistid from album as t1 join artist as t2 on t1 . artistid = t2 . artistid group by t2 . name order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the first names of all customers that live in Brazil and have an invoice.",
        "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
    },
    "interaction": [
        {
            "utterance": "Can you show me the customer names that have an invoice ?",
            "sql": "select firstname , lastname from customer where customerid in ( select customerid from customer intersect select customerid from invoice )"
        },
        {
            "utterance": "Hmm , I want to know all the customer names that live in Brazil and have an invoice . | Here are the distinct first names of all the customer that live in Brazil and have an invoice . | Can you also list their customer ids ?",
            "sql": "select distinct t1 . firstname , t1 . customerid from customer as t1 join invoice as t2 on t1 . customerid = t2 . customerid where t1 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 22,
    "final": {
        "utterance": "How many tracks are in the AAC audio file media type?",
        "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
    },
    "interaction": [
        {
            "utterance": "How many composers do you have recorded in the system ?",
            "sql": "select count ( distinct composer ) from track"
        },
        {
            "utterance": "Have many MPEG media audio files are in the system ?",
            "sql": "select count ( * ) from mediatype as t1 join track as t2 on t1 . mediatypeid = t2 . mediatypeid where t1 . name = value"
        },
        {
            "utterance": "What is the highest recorded millisecond for a single track ?",
            "sql": "select max ( milliseconds ) from track"
        },
        {
            "utterance": "What is the title name for the highest recorded single track ?",
            "sql": "select name from track order by milliseconds desc limit value"
        },
        {
            "utterance": "What is the Album Id for Occupation / Precipice ?",
            "sql": "select albumid from track where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"
    },
    "interaction": [
        {
            "utterance": "Filter the track table to show only those records with unit price bigger than 1",
            "sql": "select * from track where unitprice > value"
        },
        {
            "utterance": "Count the number of records in the previous table .",
            "sql": "select count ( * ) from track"
        },
        {
            "utterance": "Calculate average price for all tracks",
            "sql": "select avg ( unitprice ) from track"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the names of all the tracks that contain the word \"you\".",
        "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
    },
    "interaction": [
        {
            "utterance": "what is the average of the milliseconds ?",
            "sql": "select avg ( milliseconds ) from track"
        },
        {
            "utterance": "what is the average of the bytes ?",
            "sql": "select avg ( bytes ) from track"
        },
        {
            "utterance": "what is the highest unit price ?",
            "sql": "select max ( unitprice ) from track"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the least common media type in all tracks?",
        "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the least common media type in all tracks",
            "sql": "select t1 . name from mediatype as t1 join track as t2 on t1 . mediatypeid = t2 . mediatypeid group by t2 . mediatypeid order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many different kinds of media types are there ?",
            "sql": "select count ( * ) from ( select t2 . mediatypeid from mediatype as t1 join track as t2 on t1 . mediatypeid = t2 . mediatypeid group by t2 . mediatypeid )"
        },
        {
            "utterance": "What is the most common media type ?",
            "sql": "select t1 . name from mediatype as t1 join track as t2 on t1 . mediatypeid = t2 . mediatypeid group by t2 . mediatypeid order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many tracks are there ?",
            "sql": "select count ( * ) from track"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    "interaction": [
        {
            "utterance": "what are the durations of the longest tracts ?",
            "sql": "select max ( milliseconds ) from track"
        },
        {
            "utterance": "what are the shortest tracks ?",
            "sql": "select min ( milliseconds ) from track"
        },
        {
            "utterance": "How many composer are there ?",
            "sql": "select count ( composer ) from track"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\""
    },
    "interaction": [
        {
            "utterance": "Provide all the details of the song Tumi robe nirobe ?",
            "sql": "select * from song where song_name = value"
        },
        {
            "utterance": "What are the maximum and minimum resolution of songs whose duration in 3 minutes ?",
            "sql": "select max ( t2 . resolution ) , min ( t2 . resolution ) from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . duration like value"
        },
        {
            "utterance": "List the songs with size more than 4MB ?",
            "sql": "select * from files as t1 join song as t2 on t1 . f_id = t2 . f_id where file_size > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"
    },
    "interaction": [
        {
            "utterance": "What are the names of the artists from Bangladesh ?",
            "sql": "select artist_name from artist where country = value"
        },
        {
            "utterance": "Which artists from Bangladesh have never received a rating higher that 7 ?",
            "sql": "select distinct artist_name from artist where country = value except select distinct artist_name from song where rating > value"
        },
        {
            "utterance": "Can you add their genders into the table please ?",
            "sql": "select artist_name , gender from artist where artist_name in ( select distinct artist_name from artist where country = value except select distinct artist_name from song where rating > value )"
        },
        {
            "utterance": "What are their preferred genres ?",
            "sql": "select preferred_genre from artist where artist_name in ( select distinct artist_name from artist where country = value except select distinct artist_name from song where rating > value )"
        },
        {
            "utterance": "What are the names of the songs they have sung ?",
            "sql": "select song_name from song where artist_name in ( select distinct artist_name from artist where country = value except select distinct artist_name from song where rating > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"
    },
    "interaction": [
        {
            "utterance": "Give me the names of the English Artist",
            "sql": "select distinct artist_name from song where languages = value"
        },
        {
            "utterance": "List the names of the English Artist whose song 's rating is not 10",
            "sql": "select distinct artist_name from song where languages = value except select distinct artist_name from song where rating = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
    },
    "interaction": [
        {
            "utterance": "Can you show the artist name of f id 2 ?",
            "sql": "select artist_name from files where f_id = value"
        },
        {
            "utterance": "Can you show the ids of songs that are available in either mp4 format or have resolution above 720 ?",
            "sql": "select f_id from files where formats = value union select f_id from song where resolution > value"
        },
        {
            "utterance": "Can you the artist name of Song Tum robe nirobe ?",
            "sql": "select artist_name from song where song_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the id of the longest song?",
        "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many songs are there ?",
            "sql": "select count ( * ) from files"
        },
        {
            "utterance": "Who sings the song with a length of 5minutes and 23 seconds ?",
            "sql": "select artist_name from files where duration = value"
        },
        {
            "utterance": "what 's the id of that song ?",
            "sql": "select f_id from files where duration = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names of the top 3 artists with the largest number of songs ?",
            "sql": "select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name group by t2 . artist_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the top 3 artists with the largest number of songs whose language is Bangla ?",
            "sql": "select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t2 . artist_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are their preferred genres ?",
            "sql": "select t1 . preferred_genre from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t2 . artist_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "Could you list the names of all artists that prefer the genre folk and speak the language Bangla ?",
            "sql": "select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value and t1 . preferred_genre = value"
        },
        {
            "utterance": "How about the names of all artists that prefer the genre folk ?",
            "sql": "select artist_name from artist where preferred_genre = value"
        },
        {
            "utterance": "How about the names of all artists that prefer the genre tagore ?",
            "sql": "select artist_name from artist where preferred_genre = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the song that was released in the most recent year?",
        "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the newest song ?",
            "sql": "select song_name from song order by releasedate desc limit value"
        },
        {
            "utterance": "And the oldest song ?",
            "sql": "select song_name from song order by releasedate limit value"
        },
        {
            "utterance": "What are the names of the artists that released the oldest song on the list ?",
            "sql": "select artist_name from song order by releasedate limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
    },
    "interaction": [
        {
            "utterance": "Find the distinct names of all songs that have a higher resolution than some songs in English .",
            "sql": "select distinct song_name from song where resolution > ( select min ( resolution ) from song where languages = value )"
        },
        {
            "utterance": "what is the total number of songs ?",
            "sql": "select count ( * ) from song"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the country of origin for the artist who made the least number of songs?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which artist made the most songs ? | did you want to return his/her name ? | Yes",
            "sql": "select artist_name from song group by artist_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the name of artist with least number of songs ?",
            "sql": "select artist_name from song group by artist_name order by count ( * ) limit value"
        },
        {
            "utterance": "Ok , then what is the country of origin of Enrique ?",
            "sql": "select country from artist where artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"
    },
    "interaction": [
        {
            "utterance": "What 's the rating of all songs in English ?",
            "sql": "select rating from song where languages = value"
        },
        {
            "utterance": "What are the names of all the songs ?",
            "sql": "select song_name from song"
        },
        {
            "utterance": "Which of those have rating below that of all songs in English ?",
            "sql": "select song_name from song where rating < ( select min ( rating ) from song where languages = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of songs whose genre is modern or language is English.",
        "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "Can you show the artist name of song Tumi robe nirobe ?",
            "sql": "select artist_name from song where song_name = value"
        },
        {
            "utterance": "Can you show the rating of the song Tumi robe nirobe ?",
            "sql": "select rating from song where song_name = value"
        },
        {
            "utterance": "What is the genre of the song Tumi robe nirobe ?",
            "sql": "select genre_is from song where song_name = value"
        },
        {
            "utterance": "Can you show the names of songs whose genre is modern or language is English ?",
            "sql": "select song_name from song where genre_is = value or languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with the song name for the song with the lowest resolution ?",
            "sql": "select t2 . song_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name order by t2 . resolution limit value"
        },
        {
            "utterance": "Thanks ! What is the name of the artist who produced the song with the lowest resolution ?",
            "sql": "select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name order by t2 . resolution limit value"
        },
        {
            "utterance": "Thank you very much ! Can you please tell me what the gender of the artist is ?",
            "sql": "select t1 . gender from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name order by t2 . resolution limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 12,
    "final": {
        "utterance": "List the file size and format for all songs that have resolution lower than 800.",
        "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"
    },
    "interaction": [
        {
            "utterance": "How many songs have a resolution below 800 ?",
            "sql": "select count ( t2 . song_name ) from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t2 . resolution < value"
        },
        {
            "utterance": "What are the file sizes of those songs ?",
            "sql": "select t1 . file_size from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t2 . resolution < value"
        },
        {
            "utterance": "What are the formats for the songs with a resolution below 800 ?",
            "sql": "select t1 . formats from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t2 . resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the country of origin for the artist who made the least number of songs?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . how many countries of origin are represented by the artists ?",
            "sql": "select count ( country ) from artist"
        },
        {
            "utterance": "and which artist has made the least number of songs ?",
            "sql": "select artist_name from song group by artist_name order by count ( * ) limit value"
        },
        {
            "utterance": "OK. and what is that artist 's country of origin ? | Do you mean the country of the artist named Enrique ? | yes",
            "sql": "select country from artist where artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Return the names of singers who are from UK and released an English song.",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "Hello there ! How are you doing tonight ! ? Can you provide me with a list of all of the artist names in this database ?",
            "sql": "select artist_name from artist"
        },
        {
            "utterance": "Thank you very much ! Can you filter that list to show only the artist_names who have song for which the country code is the UK ?",
            "sql": "select artist_name from artist where country = value intersect select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the songs that have a lower rating than some song of the blues genre ?",
            "sql": "select song_name from song where rating < ( select max ( rating ) from song where genre_is = value )"
        },
        {
            "utterance": "What are the names of all the songs that have a higher rating than some song of the blues genre ?",
            "sql": "select song_name from song where rating > ( select max ( rating ) from song where genre_is = value )"
        },
        {
            "utterance": "What are the names and ratings of all songs of the blues genre ?",
            "sql": "select song_name , rating from song where genre_is = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"
    },
    "interaction": [
        {
            "utterance": "What are the resolutions of all songs with a rating lower than 8 ?",
            "sql": "select resolution from song where rating < value"
        },
        {
            "utterance": "What are the IDs and resolutions of all the songs with resolutions higher than those ?",
            "sql": "select f_id , resolution from song where resolution > ( select max ( resolution ) from song where rating < value )"
        },
        {
            "utterance": "What are the IDs and resolutions of all the songs with resolutions higher than or equal to 1080 ?",
            "sql": "select f_id , resolution from song where resolution > = value"
        },
        {
            "utterance": "What are the song names and ratings of those songs ?",
            "sql": "select song_name , rating from song where resolution > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"
    },
    "interaction": [
        {
            "utterance": "what are the shortest duration and lowest rating of songs grouped by genre and ordered by genre ?",
            "sql": "select min ( t1 . duration ) , min ( t2 . rating ) , t2 . genre_is from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . genre_is order by t2 . genre_is"
        },
        {
            "utterance": "WHICH ARTISTS SUNG THE SONGS ?",
            "sql": "select artist_name from song"
        },
        {
            "utterance": "how many songs has Enrique produced ?",
            "sql": "select count ( * ) from song where artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the names and number of works of all artists who have at least one English songs.",
        "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "How many artists have recorded at least one song in English ?",
            "sql": "select count ( * ) from ( select * from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t2 . artist_name having count ( * ) > = value )"
        },
        {
            "utterance": "What are the names of the artists ?",
            "sql": "select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t2 . artist_name having count ( * ) > = value"
        },
        {
            "utterance": "How many songs has Enrique recorded ?",
            "sql": "select count ( * ) from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t1 . artist_name = value"
        },
        {
            "utterance": "What about the other artist ?",
            "sql": "select count ( * ) from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t1 . artist_name = ( select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value and t1 . artist_name ! = value group by t2 . artist_name having count ( * ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
    },
    "interaction": [
        {
            "utterance": "how many artist are there in total ?",
            "sql": "select count ( * ) from artist"
        },
        {
            "utterance": "How about the total number of songs ?",
            "sql": "select count ( * ) from song"
        },
        {
            "utterance": "Can you list the songs ' names ?",
            "sql": "select song_name from song"
        },
        {
            "utterance": "Who was the singer for the song My love ?",
            "sql": "select artist_name from song where song_name = value"
        },
        {
            "utterance": "Where was the singer from ? | Do you mean Enrique ? | Yes",
            "sql": "select country from song where artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the names of artists who are Male and are from UK?",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
    },
    "interaction": [
        {
            "utterance": "Which are the male artists ?",
            "sql": "select * from artist where gender = value"
        },
        {
            "utterance": "And which of them are from the UK ?",
            "sql": "select artist_name from artist where country = value and gender = value"
        },
        {
            "utterance": "Okay , and what genre does Michel prefer ?",
            "sql": "select preferred_genre from artist where artist_name = value"
        },
        {
            "utterance": "Alright , and how many male artists who prefer pop are there in the entire world , according to the table ?",
            "sql": "select count ( * ) from artist where preferred_genre = value and gender = value"
        },
        {
            "utterance": "How many female artists prefer pop ?",
            "sql": "select count ( * ) from artist where preferred_genre = value and gender = value"
        },
        {
            "utterance": "Finally , what is the most preferred genre in the entire world ?",
            "sql": "select preferred_genre from artist group by preferred_genre order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the language that was used most often in songs with resolution above 500?",
        "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What language is used most often in songs ?",
            "sql": "select languages from song group by languages order by count ( * ) desc limit value"
        },
        {
            "utterance": "And what is the range of resolution in songs ?",
            "sql": "select min ( resolution ) , max ( resolution ) from song"
        },
        {
            "utterance": "What is the range of ratings for those songs ?",
            "sql": "select min ( rating ) , max ( rating ) from song"
        },
        {
            "utterance": "What is the language most often used in songs with resolution below 500 ?",
            "sql": "select languages from song where resolution < value group by languages order by count ( * ) desc limit value"
        },
        {
            "utterance": "And what language is most often used in songs with resolution above 500 ?",
            "sql": "select languages from song where resolution > value group by languages order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "Which songs are in mp3 format ?",
            "sql": "select t2 . song_name from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value"
        },
        {
            "utterance": "Of the which have resolution below 1000 ?",
            "sql": "select t2 . song_name from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value intersect select song_name from song where resolution < value"
        },
        {
            "utterance": "What is their actual resolution ?",
            "sql": "select song_name , resolution from song where song_name in ( select t2 . song_name from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value intersect select song_name from song where resolution < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the most popular file format?",
        "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many file formats are supported ?",
            "sql": "select count ( distinct formats ) from files"
        },
        {
            "utterance": "How many songs are available in each format ?",
            "sql": "select formats , count ( * ) from files group by formats"
        },
        {
            "utterance": "Is MP4 the most popular format ?",
            "sql": "select formats from files group by formats order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"
    },
    "interaction": [
        {
            "utterance": "what is the artist name of india",
            "sql": "select artist_name from song where country = value"
        },
        {
            "utterance": "what is the f id of bangala",
            "sql": "select f_id from song where languages = value"
        },
        {
            "utterance": "what is the rating of resolution 512",
            "sql": "select rating from song where resolution = value"
        },
        {
            "utterance": "what is the song name of tagore",
            "sql": "select song_name from song where genre_is = value"
        },
        {
            "utterance": "what is the song name of bangladesh",
            "sql": "select song_name from song where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
    },
    "interaction": [
        {
            "utterance": "Find the distinct names of all the songs that have a higher resolution than some songs in English , please ?",
            "sql": "select distinct song_name from song where resolution > ( select min ( resolution ) from song where languages = value )"
        },
        {
            "utterance": "What countries are those songs from ?",
            "sql": "select country from song where resolution > ( select min ( resolution ) from song where languages = value )"
        },
        {
            "utterance": "Can you add the songs ' names and resolutions to the table ?",
            "sql": "select country , song_name , resolution from song where resolution > ( select min ( resolution ) from song where languages = value )"
        },
        {
            "utterance": "What are the names of the top 3 rated songs ?",
            "sql": "select song_name from song order by rating desc limit value"
        },
        {
            "utterance": "Could you add the artists ' names to the table ?",
            "sql": "select song_name , artist_name from song order by rating desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages"
    },
    "interaction": [
        {
            "utterance": "What are the maximum duration and resolution of songs grouped and ordered by languages ?",
            "sql": "select max ( t1 . duration ) , max ( t2 . resolution ) , t2 . languages from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . languages order by t2 . languages"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select file_size , formats from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . languages order by t2 . languages"
        },
        {
            "utterance": "What are the maximum duration and resolution of songs grouped and ordered by country ?",
            "sql": "select max ( t1 . duration ) , max ( t2 . resolution ) from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . country order by t2 . country"
        },
        {
            "utterance": "What are the the file size and fomats of songs grouped and ordered by country for each file ?",
            "sql": "select file_size , formats from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . country order by t2 . country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 27,
    "final": {
        "utterance": "List the id, genre and artist name of English songs ordered by rating.",
        "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"
    },
    "interaction": [
        {
            "utterance": "how many artist_name in the song table",
            "sql": "select count ( * ) from song"
        },
        {
            "utterance": "ok i want to highest rating in the song table",
            "sql": "select rating from song order by rating desc limit value"
        },
        {
            "utterance": "how many song_name in the song table",
            "sql": "select count ( * ) from song"
        },
        {
            "utterance": "i want to highest resolution in the song table",
            "sql": "select resolution from song order by resolution desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 28,
    "final": {
        "utterance": "How many songs have 4 minute duration?",
        "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
    },
    "interaction": [
        {
            "utterance": "What is the longest duration ?",
            "sql": "select duration from files order by duration desc limit value"
        },
        {
            "utterance": "What is the shortest duration ?",
            "sql": "select duration from files order by duration limit value"
        },
        {
            "utterance": "How many songs have a short duration less than 4 minutes ?",
            "sql": "select count ( * ) from files where duration < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Return the names of singers who are from UK and released an English song.",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "how artist are from India",
            "sql": "select count ( * ) from artist where country = value"
        },
        {
            "utterance": "how many persons are from folk genre",
            "sql": "select count ( * ) from artist where preferred_genre = value"
        },
        {
            "utterance": "how many artists are from Bangladesh",
            "sql": "select count ( * ) from artist where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the names and number of works of all artists who have at least one English songs.",
        "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "I need to know the names of artists with at least one English Song",
            "sql": "select t1 . artist_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t2 . artist_name having count ( * ) > = value"
        },
        {
            "utterance": "What is the country of origin of artists with at least one English song",
            "sql": "select t1 . country from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t1 . artist_name having count ( * ) > = value"
        },
        {
            "utterance": "What is the gender of artists with at least one English song ?",
            "sql": "select t1 . gender from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t1 . artist_name having count ( * ) > = value"
        },
        {
            "utterance": "What is the rating of artists with at least one English song ?",
            "sql": "select t2 . rating from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . languages = value group by t1 . artist_name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 31,
    "final": {
        "utterance": "List the name and gender for all artists who released songs in March.",
        "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
    },
    "interaction": [
        {
            "utterance": "How many artist are there ?",
            "sql": "select count ( artist_name ) from artist"
        },
        {
            "utterance": "Can you list all songs that were released in March ? | Do you mean the songs name ? | Yes",
            "sql": "select t2 . song_name from song as t2 where t2 . releasedate like value"
        },
        {
            "utterance": "Can you include the artist names and their genders too ?",
            "sql": "select t1 . artist_name , t1 . gender , t2 . song_name from artist as t1 join song as t2 on t1 . artist_name = t2 . artist_name where t2 . releasedate like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"
    },
    "interaction": [
        {
            "utterance": "What is the lowest duration of songs that have mp3 format and resolution below 800 ?",
            "sql": "select min ( t1 . duration ) from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value and t2 . resolution < value"
        },
        {
            "utterance": "What is the highest duration of songs that have mp3 format and resolution below 800 ?",
            "sql": "select max ( t1 . duration ) from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value and t2 . resolution < value"
        },
        {
            "utterance": "What is the average duration of songs that have mp3 format and resolution below 800 ?",
            "sql": "select avg ( t1 . duration ) from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value and t2 . resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\""
    },
    "interaction": [
        {
            "utterance": "can you how me a list of artists ?",
            "sql": "select artist_name from artist"
        },
        {
            "utterance": "can you show me their ratings ?",
            "sql": "select artist_name , rating from song"
        },
        {
            "utterance": "can you show me song 's language ?",
            "sql": "select song_name , languages from song"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "Return the names of songs for which the format is mp3 and resolution is below 1000 .",
            "sql": "select t2 . song_name from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value intersect select song_name from song where resolution < value"
        },
        {
            "utterance": "Please also show me names of songs for which the format is mp3 and resolution is above 1000 . | Do you mean the names of songs for which the format is mp3 ? | Yes",
            "sql": "select t2 . song_name from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value"
        },
        {
            "utterance": "What is the resolution for song name `` Just beat it '' ?",
            "sql": "select resolution from song where song_name = value"
        },
        {
            "utterance": "Please show me the names of songs for which the format is mp4 and resolution is below 1000 .",
            "sql": "select t2 . song_name from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . formats = value intersect select song_name from song where resolution < value"
        },
        {
            "utterance": "Can you show me the resolution for song name `` Aj ei Akash '' ?",
            "sql": "select resolution from song where song_name = value"
        },
        {
            "utterance": "Can you please show me the song name with highest resolution ?",
            "sql": "select song_name from song order by resolution desc limit value"
        },
        {
            "utterance": "And what was the resolution for this song name ?",
            "sql": "select resolution from song where song_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What is the id of the longest song?",
        "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the ID of the longest song , please ?",
            "sql": "select f_id from files order by duration desc limit value"
        },
        {
            "utterance": "What is the artist name of that song ?",
            "sql": "select artist_name from files order by duration desc limit value"
        },
        {
            "utterance": "What is the duration of that song ?",
            "sql": "select duration from files order by duration desc limit value"
        },
        {
            "utterance": "What about the shortest song ?",
            "sql": "select duration from files order by duration limit value"
        },
        {
            "utterance": "What is the average duration of all songs ?",
            "sql": "select avg ( duration ) from files"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "how many file ids ?",
            "sql": "select count ( distinct f_id ) from files"
        },
        {
            "utterance": "what is country for Shrikanta ?",
            "sql": "select t2 . country from files as t1 join song as t2 on t1 . f_id = t2 . f_id where t1 . artist_name = value"
        },
        {
            "utterance": "who is highest rating ?",
            "sql": "select artist_name from song order by rating desc limit value"
        },
        {
            "utterance": "what is languages for Prity and genre ? | Do you mean the song with the artist name Prity ? | yes",
            "sql": "select languages , genre_is from song where artist_name = value"
        },
        {
            "utterance": "find the file size for Farida ?",
            "sql": "select file_size from files where artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"
    },
    "interaction": [
        {
            "utterance": "what is the duration of the longest song grouped by genre ?",
            "sql": "select max ( t1 . duration ) , t2 . genre_is from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . genre_is"
        },
        {
            "utterance": "How about the shortest ?",
            "sql": "select min ( t1 . duration ) , t2 . genre_is from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . genre_is"
        },
        {
            "utterance": "Can you order them by genre ?",
            "sql": "select min ( t1 . duration ) , t2 . genre_is from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . genre_is order by t2 . genre_is"
        },
        {
            "utterance": "Can you also show me the lowest rating of songs for each genre ? | do you want to order them by genre as well ? | Yes please",
            "sql": "select min ( t1 . duration ) , min ( t2 . rating ) , t2 . genre_is from files as t1 join song as t2 on t1 . f_id = t2 . f_id group by t2 . genre_is order by t2 . genre_is"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 0,
    "final": {
        "utterance": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Please list each gender code with its corresponding amount of guests and sort it in descending order by that count ?",
            "sql": "select gender_code , count ( * ) from guests group by gender_code order by count ( * ) desc"
        },
        {
            "utterance": "What are the full names of all the people with unknown genders ?",
            "sql": "select guest_first_name , guest_last_name from guests where gender_code = value"
        },
        {
            "utterance": "What were their birth dates ?",
            "sql": "select date_of_birth from guests where gender_code = value"
        },
        {
            "utterance": "What are the birth dates of all guests with the letter M in their first or last name ?",
            "sql": "select date_of_birth from guests where guest_first_name like value or guest_last_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
        "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "What are the first names of all guest with apartment booking status `` Confirmed '' ?",
            "sql": "select t2 . guest_first_name from apartment_bookings as t1 join guests as t2 on t1 . guest_id = t2 . guest_id where t1 . booking_status_code = value"
        },
        {
            "utterance": "And how about their last names ?",
            "sql": "select t2 . guest_last_name from apartment_bookings as t1 join guests as t2 on t1 . guest_id = t2 . guest_id where t1 . booking_status_code = value"
        },
        {
            "utterance": "And what about guests with `` Provisional '' status ?",
            "sql": "select t2 . guest_last_name from apartment_bookings as t1 join guests as t2 on t1 . guest_id = t2 . guest_id where t1 . booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the facility codes of apartments with more than 4 bedrooms.",
        "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    "interaction": [
        {
            "utterance": "Can you list all of the apartments with more than 4 bedrooms ? | do you mean the apartment ids of apartments with more than 4 bedrooms ? | Yes , please ! I believe that 's the only discrete identifier of the apartments ( at least that I can see ) ...",
            "sql": "select apt_id from apartments where bedroom_count > value"
        },
        {
            "utterance": "Thank you ! Can you list the facility codes for each of those apartment IDs ( 3 4 6 11 12 13 15 ) ?",
            "sql": "select t2 . facility_code from apartments as t1 join apartment_facilities as t2 on t1 . apt_id = t2 . apt_id where t1 . bedroom_count > value"
        },
        {
            "utterance": "Can you please list the 'building id ' , 'apartment type code ' and 'apartment number ' for all apartment IDs with more than 4 bedrooms ?",
            "sql": "select building_id , apt_type_code , apt_number from apartments where bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 3,
    "final": {
        "utterance": "How many apartments do not have any facility?",
        "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
    },
    "interaction": [
        {
            "utterance": "How many apartments are there ?",
            "sql": "select count ( * ) from apartments"
        },
        {
            "utterance": "How many different facilities are there ?",
            "sql": "select count ( * ) from apartment_facilities"
        },
        {
            "utterance": "Can you list the different facilities ?",
            "sql": "select * from apartment_facilities"
        },
        {
            "utterance": "How many apartments have facilities ?",
            "sql": "select count ( * ) from apartments where apt_id in ( select apt_id from apartment_facilities )"
        },
        {
            "utterance": "How many apartments have no facilities ?",
            "sql": "select count ( * ) from apartments where apt_id not in ( select apt_id from apartment_facilities )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "Show me the addresses of the buildings .",
            "sql": "select building_address from apartment_buildings"
        },
        {
            "utterance": "Any of those have apartments with more than 1 bedrooms ? | Sorry , do you want me to list apartments with more than 1 bedrooms ? | Yes",
            "sql": "select t1 . building_address from apartment_buildings as t1 join apartments as t2 on t1 . building_id = t2 . building_id where t2 . bedroom_count > value"
        },
        {
            "utterance": "How about more than 2 bathrooms ?",
            "sql": "select t1 . building_address from apartment_buildings as t1 join apartments as t2 on t1 . building_id = t2 . building_id where t2 . bathroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What about the code with the least rooms ?",
            "sql": "select apt_type_code from apartments order by room_count limit value"
        },
        {
            "utterance": "What is the building ID with apartment Suite 645 ?",
            "sql": "select building_id from apartments where apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
    },
    "interaction": [
        {
            "utterance": "what is the building id for the apt number suite 645",
            "sql": "select building_id from apartments where apt_number = value"
        },
        {
            "utterance": "what is the bathroom count and bedroom count of the apartment number suite 645 ?",
            "sql": "select bathroom_count , bedroom_count from apartments where apt_number = value"
        },
        {
            "utterance": "what is the room count in the building 624 ?",
            "sql": "select room_count from apartments where building_id = value"
        },
        {
            "utterance": "what is minimum and maximum number of bathrooms and bedrooms of all the apartments ?",
            "sql": "select min ( bathroom_count ) , max ( bathroom_count ) , min ( bedroom_count ) , max ( bedroom_count ) from apartments"
        },
        {
            "utterance": "what is the building_id of the apartment apt.908 ?",
            "sql": "select building_id from apartments where apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "how many apartments have bookings with status code `` confirmed '' ?",
            "sql": "select count ( * ) from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_status_code = value"
        },
        {
            "utterance": "show me the apartment type for the 7 apartments",
            "sql": "select t2 . apt_type_code from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_status_code = value"
        },
        {
            "utterance": "what are the apartment numbers for those 7 ?",
            "sql": "select distinct t2 . apt_number from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the most common apartment type code.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many different types of apartments are there ?",
            "sql": "select count ( distinct apt_type_code ) from apartments"
        },
        {
            "utterance": "what are they ?",
            "sql": "select distinct apt_type_code from apartments"
        },
        {
            "utterance": "Great ! how many apartments does each of them have ?",
            "sql": "select count ( * ) , apt_type_code from apartments group by apt_type_code"
        },
        {
            "utterance": "could you please show their names as well ? | Do you mean the apartment type code ? | yes !",
            "sql": "select apt_type_code , count ( * ) from apartments group by apt_type_code"
        },
        {
            "utterance": "ok , which of them is the most common one ?",
            "sql": "select apt_type_code from apartments group by apt_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "What are the booking start and end dates of the apartments with more than 2 bedrooms ?",
            "sql": "select t1 . booking_start_date , t1 . booking_start_date from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . bedroom_count > value"
        },
        {
            "utterance": "What are the dates for apartment 585 ? | Did you mean the booking start and end dates of the apartments with id 585 ? | Yes",
            "sql": "select t1 . booking_start_date , t1 . booking_start_date from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . apt_number = value"
        },
        {
            "utterance": "Okay , what are the dates for the apartment in building 225 ?",
            "sql": "select t1 . booking_start_date , t1 . booking_start_date from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . building_id = value"
        },
        {
            "utterance": "What are the apartment numbers of all apartments with more than 2 bedrooms ?",
            "sql": "select t2 . apt_number from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    "interaction": [
        {
            "utterance": "What is the booking status of the apartment with number `` Suite 634 '' ?",
            "sql": "select t1 . booking_status_code from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . apt_number = value"
        },
        {
            "utterance": "What is the bathroom count for `` Suite 643 '' ?",
            "sql": "select t2 . bathroom_count from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . apt_number = value"
        },
        {
            "utterance": "What is the apartment type code for `` Suite 643 '' ?",
            "sql": "select t2 . apt_type_code from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the apartment number with the largest number of bedrooms.",
        "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the number of the apartment with the greatest number of bedrooms ?",
            "sql": "select apt_number from apartments order by bedroom_count desc limit value"
        },
        {
            "utterance": "What is the number of the apartment with the least number of bedrooms ?",
            "sql": "select apt_number from apartments order by bedroom_count limit value"
        },
        {
            "utterance": "What is the apartment type code of the apartment with the greatest number of bathrooms ?",
            "sql": "select apt_type_code from apartments order by bathroom_count desc limit value"
        },
        {
            "utterance": "How many rooms does that apartment have , and what is the number of that apartment ?",
            "sql": "select room_count , apt_number from apartments order by bathroom_count desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "How many different apartment building are there ?",
            "sql": "select count ( distinct building_id ) from apartment_buildings"
        },
        {
            "utterance": "How many of those apartment building are managed by Kyle ?",
            "sql": "select count ( * ) from apartment_buildings as t1 join apartments as t2 on t1 . building_id = t2 . building_id where t1 . building_manager = value"
        },
        {
            "utterance": "How many apartment type codes are there ?",
            "sql": "select count ( distinct apt_type_code ) from apartments"
        },
        {
            "utterance": "Show the apartment types codes in buildings managed by Kyle ?",
            "sql": "select t2 . apt_type_code from apartment_buildings as t1 join apartments as t2 on t1 . building_id = t2 . building_id where t1 . building_manager = value"
        },
        {
            "utterance": "Show the apartment numbers in the buildings managed by Kyle .",
            "sql": "select t2 . apt_number from apartment_buildings as t1 join apartments as t2 on t1 . building_id = t2 . building_id where t1 . building_manager = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""
    },
    "interaction": [
        {
            "utterance": "how many rooms are available in the apartment with short name columbus square",
            "sql": "select sum ( t2 . room_count ) from apartment_buildings as t1 join apartments as t2 on t1 . building_id = t2 . building_id where t1 . building_short_name = value"
        },
        {
            "utterance": "how many bathrooms are there in these 2 rooms | Did you mean the number of bathrooms in the apartment with id is 2 ? | yes , thanks",
            "sql": "select bathroom_count from apartments where apt_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the building full names that contain the word \"court\"?",
        "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    "interaction": [
        {
            "utterance": "What are the building short name of building id 133 ?",
            "sql": "select building_short_name from apartment_buildings where building_id = value"
        },
        {
            "utterance": "Who is building manager of Mercedes House ?",
            "sql": "select building_manager from apartment_buildings where building_full_name = value"
        },
        {
            "utterance": "Find the building address of building manager Melyssa .",
            "sql": "select building_address from apartment_buildings where building_manager = value"
        },
        {
            "utterance": "What are the building full names that contain the word `` court '' ?",
            "sql": "select building_full_name from apartment_buildings where building_full_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many apartments are there ?",
            "sql": "select count ( * ) from apartments"
        },
        {
            "utterance": "Which apartments has the largest number of total rooms ? | what attribute did you want me to return for the apartment with the largest number of total rooms ? the apartment type code ? | The apt ID first .",
            "sql": "select apt_id from apartments group by apt_id order by sum ( room_count ) desc limit value"
        },
        {
            "utterance": "Now what is the apartment type code of that apartment .",
            "sql": "select apt_type_code from apartments group by apt_type_code order by sum ( room_count ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "Can you show me the numbers of the apartments ?",
            "sql": "select count ( * ) from apartments"
        },
        {
            "utterance": "Of those apartments , which ones have more than 2 bedrooms ?",
            "sql": "select count ( * ) from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . bedroom_count > value"
        },
        {
            "utterance": "Can you provide the booking start dates and end dates , for all the apartments with more than 2 bedrooms ?",
            "sql": "select t1 . booking_start_date , t1 . booking_start_date from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many different Apartment Type Codes are there ?",
            "sql": "select count ( apt_type_code ) from apartments"
        },
        {
            "utterance": "Can you provide me with the most common apartment type code among all of the apartments with at least 1 bathroom ?",
            "sql": "select apt_type_code from apartments where bathroom_count > = value group by apt_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you list all apartment IDs with `` Flat '' as the apartment type ?",
            "sql": "select apt_id from apartments where apt_type_code = value"
        },
        {
            "utterance": "Thank you ! Can you update that list to include the building ID for each of those apartment IDs ?",
            "sql": "select building_id , apt_id from apartments where apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list the apartment type code for each entry ?",
            "sql": "select apt_type_code from apartments"
        },
        {
            "utterance": "Can you add to the table the room count for each entry ?",
            "sql": "select apt_type_code , room_count from apartments"
        },
        {
            "utterance": "Can you find the entries with the highest room count and only keep those in the table ? | And still return the apartment type code and the room count ? | Yes , only for those entries with the highest room count .",
            "sql": "select apt_type_code , room_count from apartments order by room_count desc limit value"
        },
        {
            "utterance": "Sorry , I think I misunderstood the question . Can you display only the apartment type codes again for each entry ?",
            "sql": "select apt_type_code from apartments"
        },
        {
            "utterance": "Can you add up the room counts for each distinct apartment type code and display those values along with their respective department type codes ?",
            "sql": "select apt_type_code , sum ( room_count ) from apartments group by apt_type_code"
        },
        {
            "utterance": "Amazing ! Can you do add up the bathroom counts and bedroom counts for the department type Flat and add those to the table ?",
            "sql": "select apt_type_code , sum ( room_count ) , sum ( bathroom_count ) , sum ( bedroom_count ) from apartments where apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "How many apartments in this table ?",
            "sql": "select count ( * ) from apartments"
        },
        {
            "utterance": "How many flats in this table ? | Do you mean the number of apartments whose type code is Flat ? | Yes .",
            "sql": "select count ( * ) from apartments where apt_type_code = value"
        },
        {
            "utterance": "What is the number of apartments whose type code is studio ?",
            "sql": "select count ( * ) from apartments where apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 20,
    "final": {
        "utterance": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    "interaction": [
        {
            "utterance": "How many bathroom count those building 809 has ? | The total number of bathrooms building 809 has is NULL . | How about building 808 ?",
            "sql": "select sum ( bathroom_count ) from apartments where building_id = value"
        },
        {
            "utterance": "How about the total number of rooms it has ?",
            "sql": "select sum ( room_count ) from apartments where building_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""
    },
    "interaction": [
        {
            "utterance": "What building has a gym ? | Do you mean the building ids of buildings with apartments that have gyms ? | Yes please .",
            "sql": "select t2 . building_id from apartment_facilities as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . facility_code = value"
        },
        {
            "utterance": "How many bathrooms are there in those buildings ?",
            "sql": "select sum ( t2 . bathroom_count ) from apartment_facilities as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . facility_code = value"
        },
        {
            "utterance": "How many bedrooms are there in those buildings ?",
            "sql": "select sum ( t2 . bedroom_count ) from apartment_facilities as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . facility_code = value"
        },
        {
            "utterance": "What is the total number of rooms in those buildings ?",
            "sql": "select sum ( t2 . room_count ) from apartment_facilities as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . facility_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    "interaction": [
        {
            "utterance": "Please show me all the information about each apartment",
            "sql": "select * from apartments"
        },
        {
            "utterance": "Now just the info for Suite 634",
            "sql": "select * from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . apt_number = value"
        },
        {
            "utterance": "and now just show the booking status code for that suite",
            "sql": "select t1 . booking_status_code from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the building full names that contain the word \"court\"?",
        "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    "interaction": [
        {
            "utterance": "Which buildings are in a studio ?",
            "sql": "select building_full_name from apartment_buildings where building_description = value"
        },
        {
            "utterance": "What are their managers ?",
            "sql": "select building_manager from apartment_buildings where building_description = value"
        },
        {
            "utterance": "Which of the building full names have the word `` court '' in it ?",
            "sql": "select building_full_name from apartment_buildings where building_full_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 24,
    "final": {
        "utterance": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "What dates are these apartments booked for ?",
            "sql": "select t2 . apt_number , t1 . booking_start_date , t1 . booking_end_date from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_status_code = value"
        },
        {
            "utterance": "How many of these apartments have 3 bedrooms ?",
            "sql": "select count ( * ) from apartments where apt_number in ( select distinct t2 . apt_number from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_status_code = value ) and bedroom_count = value"
        },
        {
            "utterance": "How many bathrooms are in each of these apartments ?",
            "sql": "select bathroom_count from apartments where apt_number in ( select distinct t2 . apt_number from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_status_code = value ) and bedroom_count = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
    },
    "interaction": [
        {
            "utterance": "How many rooms are in the apartment number suite 645 ?",
            "sql": "select count ( * ) from apartments where apt_number = value"
        },
        {
            "utterance": "What is the building id of apartment Apt 585 ?",
            "sql": "select building_id from apartments where apt_number = value"
        },
        {
            "utterance": "What is the minimum and maximum number of bathrooms of all the departments ?",
            "sql": "select min ( bathroom_count ) , max ( bathroom_count ) from apartments"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 26,
    "final": {
        "utterance": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""
    },
    "interaction": [
        {
            "utterance": "Hello . What are the IDs of guests with gender code Female ?",
            "sql": "select guest_id from guests where gender_code = value"
        },
        {
            "utterance": "Show me the start dates of apartment bookings by these IDs please .",
            "sql": "select t1 . booking_start_date from apartment_bookings as t1 join guests as t2 on t1 . guest_id = t2 . guest_id where t2 . gender_code = value"
        },
        {
            "utterance": "Show me the start dates and end dates of apartment bookings by these IDs please .",
            "sql": "select t1 . booking_start_date , t1 . booking_end_date from apartment_bookings as t1 join guests as t2 on t1 . guest_id = t2 . guest_id where t2 . gender_code = value"
        },
        {
            "utterance": "Can you give me the apartment ids for the same list ?",
            "sql": "select t1 . apt_id from apartment_bookings as t1 join guests as t2 on t1 . guest_id = t2 . guest_id where t2 . gender_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 27,
    "final": {
        "utterance": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    "interaction": [
        {
            "utterance": "Hi - can you please tell me the average room count of all Provisional bookings ?",
            "sql": "select avg ( room_count ) from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_status_code = value"
        },
        {
            "utterance": "Great - can you list all apartments with more than one bathroom and more than three bedrooms ?",
            "sql": "select * from apartments where bathroom_count > value and bedroom_count > value"
        },
        {
            "utterance": "Which apartment has the most bedrooms ?",
            "sql": "select * from apartments order by bedroom_count desc limit value"
        },
        {
            "utterance": "OK - what was the total number of bookings in 2016 ?",
            "sql": "select count ( * ) from apartment_bookings where booking_start_date like value"
        },
        {
            "utterance": "How many of those bookings were studio apartments ?",
            "sql": "select count ( * ) from apartment_bookings as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t1 . booking_start_date like value and t2 . apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you show me the top 3 highest room counts ?",
            "sql": "select room_count from apartments order by room_count desc limit value"
        },
        {
            "utterance": "For each apartment , can you tell me the average of the bedroom count , bathroom count , and room count ? | Do you mean for each apartment type , find the average of the bedroom count , bathroom count , and room count ? | yes",
            "sql": "select apt_type_code , avg ( bathroom_count ) , avg ( bedroom_count ) , avg ( room_count ) from apartments group by apt_type_code"
        },
        {
            "utterance": "Can you tell me the average number of rooms for each apartment type code ?",
            "sql": "select apt_type_code , avg ( room_count ) from apartments group by apt_type_code"
        },
        {
            "utterance": "Can you sort them in descending order ?",
            "sql": "select apt_type_code , avg ( room_count ) from apartments group by apt_type_code order by avg ( room_count ) desc"
        },
        {
            "utterance": "Can you show me just the apartment type codes of the top 3 ?",
            "sql": "select apt_type_code from apartments group by apt_type_code order by avg ( room_count ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 29,
    "final": {
        "utterance": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the apartment type codes ?",
            "sql": "select apt_type_code from apartments"
        },
        {
            "utterance": "What are the Maximum rooms for each Apartment type code ?",
            "sql": "select apt_type_code , max ( room_count ) from apartments group by apt_type_code"
        },
        {
            "utterance": "What are the Minimum rooms for each Apartment type code ?",
            "sql": "select apt_type_code , min ( room_count ) from apartments group by apt_type_code"
        },
        {
            "utterance": "What is the Apartment type code of building id 808 ?",
            "sql": "select apt_type_code from apartments where building_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 30,
    "final": {
        "utterance": "Show the facility codes of apartments with more than 4 bedrooms.",
        "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    "interaction": [
        {
            "utterance": "What are the facility codes of all the apartments that have more than 4 bedrooms ?",
            "sql": "select t1 . facility_code from apartment_facilities as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . bedroom_count > value"
        },
        {
            "utterance": "What are the apartment numbers of those ?",
            "sql": "select t2 . apt_number from apartment_facilities as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . bedroom_count > value"
        },
        {
            "utterance": "How many bathrooms do each of those have ?",
            "sql": "select t2 . bathroom_count from apartment_facilities as t1 join apartments as t2 on t1 . apt_id = t2 . apt_id where t2 . bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the total grant amount of the organisations described as research?",
        "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'"
    },
    "interaction": [
        {
            "utterance": "What is the total grant amount of the organizations described as research ?",
            "sql": "select sum ( grant_amount ) from grants as t1 join organisations as t2 on t1 . organisation_id = t2 . organisation_id join organisation_types as t3 on t2 . organisation_type = t3 . organisation_type where t3 . organisation_type_description = value"
        },
        {
            "utterance": "What is the grant start date of the organizations described as research ?",
            "sql": "select grant_start_date from grants as t1 join organisations as t2 on t1 . organisation_id = t2 . organisation_id join organisation_types as t3 on t2 . organisation_type = t3 . organisation_type where t3 . organisation_type_description = value"
        },
        {
            "utterance": "Show me organization ids for organizations described as research",
            "sql": "select t1 . organisation_id from grants as t1 join organisations as t2 on t1 . organisation_id = t2 . organisation_id join organisation_types as t3 on t2 . organisation_type = t3 . organisation_type where t3 . organisation_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 1,
    "final": {
        "utterance": "Which document type is described with the prefix 'Initial'?",
        "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"
    },
    "interaction": [
        {
            "utterance": "Which of the document is described with the prefix initial ? | Document with type code APP is described with the prefix initial . | Whats is APP document description ?",
            "sql": "select document_description from document_types where document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 2,
    "final": {
        "utterance": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"
    },
    "interaction": [
        {
            "utterance": "list the organisation type",
            "sql": "select organisation_type from organisation_types"
        },
        {
            "utterance": "how much grant amount in organisation id 10",
            "sql": "select count ( grant_id ) from grants where organisation_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the result description of the project whose detail is 'sint'?",
        "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'"
    },
    "interaction": [
        {
            "utterance": "What are the result descriptions of the project whose detail is `` sint '' ?",
            "sql": "select t1 . outcome_description from research_outcomes as t1 join project_outcomes as t2 on t1 . outcome_code = t2 . outcome_code join projects as t3 on t2 . project_id = t3 . project_id where t3 . project_details = value"
        },
        {
            "utterance": "What are the project details of all of those project ids ?",
            "sql": "select t2 . project_id , t3 . project_details from research_outcomes as t1 join project_outcomes as t2 on t1 . outcome_code = t2 . outcome_code join projects as t3 on t2 . project_id = t3 . project_id where t2 . outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the role description of the project staff involved in the most number of project outcomes ?",
            "sql": "select t1 . role_description from staff_roles as t1 join project_staff as t2 on t1 . role_code = t2 . role_code join project_outcomes as t3 on t2 . project_id = t3 . project_id group by t2 . staff_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show the staff ids of the project staff involved in the most number of project outcomes ?",
            "sql": "select t2 . staff_id from staff_roles as t1 join project_staff as t2 on t1 . role_code = t2 . role_code join project_outcomes as t3 on t2 . project_id = t3 . project_id group by t2 . staff_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the project ids that staff member worked on ?",
            "sql": "select project_id from project_staff where staff_id = value"
        },
        {
            "utterance": "What are the date from and date to of that project ?",
            "sql": "select date_from , date_to from project_staff where project_id = value"
        },
        {
            "utterance": "What is the outcome code for that project ?",
            "sql": "select outcome_code from project_outcomes where project_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 5,
    "final": {
        "utterance": "Which organisation type hires most research staff?",
        "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "tell me the staff details of staff id 1 ?",
            "sql": "select staff_details from research_staff where staff_id = value"
        },
        {
            "utterance": "Tell me the organization type of organisation_id 1 ?",
            "sql": "select organisation_type from organisations where organisation_id = value"
        },
        {
            "utterance": "Which organisation type hires most research staff ?",
            "sql": "select t1 . organisation_type from organisations as t1 join research_staff as t2 on t1 . organisation_id = t2 . employer_organisation_id group by t1 . organisation_type order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 6,
    "final": {
        "utterance": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"
    },
    "interaction": [
        {
            "utterance": "What is the send date of document Id 2 ?",
            "sql": "select sent_date from documents where document_id = value"
        },
        {
            "utterance": "What is the organisation details of Id 3 ? | Do you mean the organisation id of grant id 3 ? | yes",
            "sql": "select organisation_id from grants where grant_id = value"
        },
        {
            "utterance": "What is the grant end date of grant id 3 ?",
            "sql": "select grant_end_date from grants where grant_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the organisation ids and details of the organisations which are involved in",
        "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000"
    },
    "interaction": [
        {
            "utterance": "What is the organisation ID of the organisation with grant amount of 4094.542 ? ?",
            "sql": "select organisation_id from grants where grant_amount = value"
        },
        {
            "utterance": "What is its grant start date ?",
            "sql": "select grant_start_date from grants where grant_amount = value"
        },
        {
            "utterance": "What about its end date ?",
            "sql": "select grant_end_date from grants where grant_amount = value"
        },
        {
            "utterance": "What is the grant amount of the organisation with the id 14 ?",
            "sql": "select grant_amount from grants where organisation_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 8,
    "final": {
        "utterance": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'"
    },
    "interaction": [
        {
            "utterance": "Which grants are described as 'regular ' ?",
            "sql": "select * from grants as t1 join documents as t2 on t1 . grant_id = t2 . grant_id join document_types as t3 on t2 . document_type_code = t3 . document_type_code where t3 . document_description = value"
        },
        {
            "utterance": "Which grants are described both 'regular ' and 'initial application ' ?",
            "sql": "select * from grants as t1 join documents as t2 on t1 . grant_id = t2 . grant_id join document_types as t3 on t2 . document_type_code = t3 . document_type_code where t3 . document_description = value intersect select * from grants as t1 join documents as t2 on t1 . grant_id = t2 . grant_id join document_types as t3 on t2 . document_type_code = t3 . document_type_code where t3 . document_description = value"
        },
        {
            "utterance": "Can you show me the start date for all these grants ?",
            "sql": "select t1 . grant_start_date from grants as t1 join documents as t2 on t1 . grant_id = t2 . grant_id join document_types as t3 on t2 . document_type_code = t3 . document_type_code where t3 . document_description = value intersect select t1 . grant_start_date from grants as t1 join documents as t2 on t1 . grant_id = t2 . grant_id join document_types as t3 on t2 . document_type_code = t3 . document_type_code where t3 . document_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 9,
    "final": {
        "utterance": "Which document type is described with the prefix 'Initial'?",
        "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"
    },
    "interaction": [
        {
            "utterance": "Can you list all document descriptions that contain the word `` Initial '' ?",
            "sql": "select document_description from document_types where document_description like value"
        },
        {
            "utterance": "Can you list the document type code associated with that document description ?",
            "sql": "select document_type_code from document_types where document_description like value"
        },
        {
            "utterance": "Are there any other document type codes associated with a description that contains the word `` initial '' ?",
            "sql": "select document_type_code from document_types where document_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 10,
    "final": {
        "utterance": "Which role is most common for the staff?",
        "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Which roll code on this list is the most common ?",
            "sql": "select role_code from project_staff group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Great ! Can you tell me how many instances of role code `` researcher '' there are ?",
            "sql": "select count ( * ) from project_staff where role_code = value"
        },
        {
            "utterance": "Excellent ! Can you now list for me all of the staff IDs that have researcher as their role code ?",
            "sql": "select staff_id from project_staff where role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 11,
    "final": {
        "utterance": "How many documents can one grant have at most? List the grant id and number.",
        "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What were the dates that APP sent their grants ?",
            "sql": "select sent_date from documents where document_type_code = value"
        },
        {
            "utterance": "Ah . And how many grants can APP have total ?",
            "sql": "select count ( grant_id ) from documents where document_type_code = value"
        },
        {
            "utterance": "No , I mean what is the maximum number of grants that APP can have ?",
            "sql": "select max ( grant_id ) from documents where document_type_code = value"
        },
        {
            "utterance": "I see . Can you list the id and number for every grand that APP has ?",
            "sql": "select grant_id from documents where document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the organisation type description of the organisation detailed as 'quo'.",
        "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'"
    },
    "interaction": [
        {
            "utterance": "What type of organizations are there ?",
            "sql": "select organisation_type from organisation_types"
        },
        {
            "utterance": "And what is the organization ids detailed as `` quo '' ?",
            "sql": "select organisation_id from organisations where organisation_details = value"
        },
        {
            "utterance": "And what is this organization 's type ?",
            "sql": "select t1 . organisation_type from organisation_types as t1 join organisations as t2 on t1 . organisation_type = t2 . organisation_type where t2 . organisation_details = value"
        },
        {
            "utterance": "And what is the total number of RES organizations ?",
            "sql": "select count ( * ) from organisations where organisation_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 13,
    "final": {
        "utterance": "List the project details of the projects which did not hire any staff for a researcher role.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )"
    },
    "interaction": [
        {
            "utterance": "How many projects are there ?",
            "sql": "select count ( * ) from projects"
        },
        {
            "utterance": "How many of those projects did not hire anyone for a researcher role ?",
            "sql": "select count ( project_id ) from projects where project_id not in ( select project_id from project_staff where role_code = value )"
        },
        {
            "utterance": "What are the details of those projects ?",
            "sql": "select project_details from projects where project_id not in ( select project_id from project_staff where role_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the number of research staff in each organisation ?",
            "sql": "select employer_organisation_id , count ( * ) from research_staff group by employer_organisation_id"
        },
        {
            "utterance": "What is the organisation type for each organisation ?",
            "sql": "select organisation_type from organisations"
        },
        {
            "utterance": "Who are the staff for the organisation with id 5 ? | Do you mean the id of the staffs for orginisation with id 5 ? | Yes , that would be fine .",
            "sql": "select staff_id from research_staff where employer_organisation_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 15,
    "final": {
        "utterance": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which organization hired the most research staff ?",
            "sql": "select * from organisations as t1 join research_staff as t2 on t1 . organisation_id = t2 . employer_organisation_id group by t1 . organisation_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you give me just the organization id ?",
            "sql": "select t1 . organisation_id from organisations as t1 join research_staff as t2 on t1 . organisation_id = t2 . employer_organisation_id group by t1 . organisation_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "great , can you give me the organization type and detail too ?",
            "sql": "select t1 . organisation_id , t1 . organisation_type , t1 . organisation_details from organisations as t1 join research_staff as t2 on t1 . organisation_id = t2 . employer_organisation_id group by t1 . organisation_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 16,
    "final": {
        "utterance": "Which projects have no outcome? List the project details.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )"
    },
    "interaction": [
        {
            "utterance": "Project details of project ID 1 ?",
            "sql": "select project_details from projects where project_id = value"
        },
        {
            "utterance": "Which project have no outcome ? | so what would you want to know about the project have no outcome | List the project details of above ?",
            "sql": "select project_details from projects where project_id not in ( select project_id from project_outcomes )"
        },
        {
            "utterance": "Organisation ID of project ID 2 ?",
            "sql": "select organisation_id from projects where project_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 17,
    "final": {
        "utterance": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'"
    },
    "interaction": [
        {
            "utterance": "show the outcome code in the Table Name : Project Outcomes",
            "sql": "select distinct outcome_code from project_outcomes"
        },
        {
            "utterance": "Show the outcome description of the Table Name : Research Outcomes",
            "sql": "select outcome_description from research_outcomes"
        },
        {
            "utterance": "Show the project details of the Table Name : Projects",
            "sql": "select project_details from projects"
        },
        {
            "utterance": "Show the outcome details of the Table Name : Project Outcomes",
            "sql": "select outcome_details from project_outcomes"
        },
        {
            "utterance": "List the project details of the projects with the research outcome described with substring 'published ' .",
            "sql": "select t1 . project_details from projects as t1 join project_outcomes as t2 on t1 . project_id = t2 . project_id join research_outcomes as t3 on t2 . outcome_code = t3 . outcome_code where t3 . outcome_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "For the documents with the description `` Regular '' , what are all of their response received dates ?",
            "sql": "select t1 . response_received_date from documents as t1 join document_types as t2 on t1 . document_type_code = t2 . document_type_code join grants as t3 on t1 . grant_id = t3 . grant_id where t2 . document_description = value"
        },
        {
            "utterance": "What are the grant amounts for those ?",
            "sql": "select t3 . grant_amount from documents as t1 join document_types as t2 on t1 . document_type_code = t2 . document_type_code join grants as t3 on t1 . grant_id = t3 . grant_id where t2 . document_description = value"
        },
        {
            "utterance": "Can you find the response received dates for all grants that were over 100 ?",
            "sql": "select t1 . response_received_date from documents as t1 join grants as t2 on t1 . grant_id = t2 . grant_id where t2 . grant_amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 19,
    "final": {
        "utterance": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details"
    },
    "interaction": [
        {
            "utterance": "Give me the details of the organizations described as `` Sponsor '' in alphabetical order",
            "sql": "select organisation_details from organisations as t1 join organisation_types as t2 on t1 . organisation_type = t2 . organisation_type where t2 . organisation_type_description = value order by organisation_details"
        },
        {
            "utterance": "What about their IDs ?",
            "sql": "select organisation_id from organisations as t1 join organisation_types as t2 on t1 . organisation_type = t2 . organisation_type where t2 . organisation_type_description = value order by organisation_details"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( organisation_id ) from organisations as t1 join organisation_types as t2 on t1 . organisation_type = t2 . organisation_type where t2 . organisation_type_description = value order by organisation_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 20,
    "final": {
        "utterance": "List the project details of the projects launched by the organisation",
        "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )"
    },
    "interaction": [
        {
            "utterance": "Could you list the project details of the projects launched by the most popular organization ?",
            "sql": "select project_details from projects where organisation_id in ( select organisation_id from projects group by organisation_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What are the ids of those ?",
            "sql": "select project_id from projects where organisation_id in ( select organisation_id from projects group by organisation_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What are their organization ids ?",
            "sql": "select organisation_id from projects group by organisation_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you tell me the project details of the lowest numbered project id ?",
            "sql": "select project_details from projects order by project_id limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 21,
    "final": {
        "utterance": "List the organisation id with the maximum outcome count, and the count.",
        "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "give me the organization id then",
            "sql": "select t1 . organisation_id from projects as t1 join project_outcomes as t2 on t1 . project_id = t2 . project_id group by t1 . organisation_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "give me its project details .",
            "sql": "select t1 . organisation_id , t1 . project_details from projects as t1 join project_outcomes as t2 on t1 . project_id = t2 . project_id group by t1 . organisation_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the outcome code ? | Whose outcome code do you want ? | for `deleniti",
            "sql": "select t2 . outcome_code from projects as t1 join project_outcomes as t2 on t1 . project_id = t2 . project_id where t1 . project_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 22,
    "final": {
        "utterance": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'"
    },
    "interaction": [
        {
            "utterance": "how many projects has stuff worked as leaders total ?",
            "sql": "select count ( distinct project_id ) from project_staff where role_code = value"
        },
        {
            "utterance": "How about the number of projects they worked before 1989-04-24 23:51:54 ' ? | The total number of distinct projects that have some project staffs worked as a leader and worked before 1989-04-24 23:51:54 ' is 2 | What are other detail about those projects ?",
            "sql": "select other_details from project_staff where role_code = value and date_from < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 23,
    "final": {
        "utterance": "List the project details of the projects which did not hire any staff for a researcher role.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )"
    },
    "interaction": [
        {
            "utterance": "List out projects which did not hire staff for researcher role ?",
            "sql": "select project_id from projects where project_id not in ( select project_id from project_staff where role_code = value )"
        },
        {
            "utterance": "what is the role of the project id 5 ?",
            "sql": "select role_code from project_staff where project_id = value"
        },
        {
            "utterance": "Can you tell me the role of project id 1 ?",
            "sql": "select role_code from project_staff where project_id = value"
        },
        {
            "utterance": "List out projects which has staff for researcher role ?",
            "sql": "select project_id from project_staff where role_code = value"
        },
        {
            "utterance": "Can you tell me the organization id for the project id 1 ?",
            "sql": "select organisation_id from projects where project_id = value"
        },
        {
            "utterance": "can you tell me the staff id of the project which did not have researcher role ?",
            "sql": "select t1 . staff_id from project_staff as t1 join projects as t2 where t1 . project_id not in ( select project_id from project_staff where role_code = value )"
        },
        {
            "utterance": "tell me project details about the project id 1 ?",
            "sql": "select project_details from projects where project_id = value"
        },
        {
            "utterance": "List out total number of projects which has no staff for researcher role ?",
            "sql": "select count ( * ) from projects where project_id not in ( select project_id from project_staff where role_code = value )"
        },
        {
            "utterance": "List the project details of the projects which did not hire any staff for a researcher role ?",
            "sql": "select project_details from projects where project_id not in ( select project_id from project_staff where role_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the last date of the staff leaving the projects?",
        "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many project staff there",
            "sql": "select count ( * ) from project_staff"
        },
        {
            "utterance": "what is the date from of staff id 779.0",
            "sql": "select date_from from project_staff where staff_id = value"
        },
        {
            "utterance": "what is the role code of staff id 674810.0",
            "sql": "select role_code from project_staff where staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "What are the response received dates for the documents described as 'Regular ' ?",
            "sql": "select t1 . response_received_date from documents as t1 join document_types as t2 on t1 . document_type_code = t2 . document_type_code join grants as t3 on t1 . grant_id = t3 . grant_id where t2 . document_description = value"
        },
        {
            "utterance": "What are the response received dates for the documents with a grant amount more than 100 ?",
            "sql": "select t1 . response_received_date from documents as t1 join document_types as t2 on t1 . document_type_code = t2 . document_type_code join grants as t3 on t1 . grant_id = t3 . grant_id where t3 . grant_amount > value"
        },
        {
            "utterance": "How many documents have the document description `` Initial Application '' ?",
            "sql": "select count ( * ) from documents as t1 join document_types as t2 on t1 . document_type_code = t2 . document_type_code join grants as t3 on t1 . grant_id = t3 . grant_id where t2 . document_description = value"
        },
        {
            "utterance": "Can you list all of the grant start dates of those documents please ?",
            "sql": "select t3 . grant_start_date from documents as t1 join document_types as t2 on t1 . document_type_code = t2 . document_type_code join grants as t3 on t1 . grant_id = t3 . grant_id where t2 . document_description = value"
        },
        {
            "utterance": "What are the grant amounts of those ?",
            "sql": "select t3 . grant_amount from documents as t1 join document_types as t2 on t1 . document_type_code = t2 . document_type_code join grants as t3 on t1 . grant_id = t3 . grant_id where t2 . document_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What projects are detailed as 'omnis ' ?",
            "sql": "select * from tasks as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value"
        },
        {
            "utterance": "How many of these have more than 2 outcomes ?",
            "sql": "select count ( * ) from ( select t2 . project_id from tasks as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value intersect select t2 . project_id from tasks as t1 join projects as t2 on t1 . project_id = t2 . project_id join project_outcomes as t3 on t2 . project_id = t3 . project_id group by t2 . project_id having count ( * ) > value )"
        },
        {
            "utterance": "How many projects ( not labeled omnis ) have two or more outcomes ?",
            "sql": "select count ( t2 . project_id ) from tasks as t1 join projects as t2 on t1 . project_id = t2 . project_id join project_outcomes as t3 on t2 . project_id = t3 . project_id group by t2 . project_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 27,
    "final": {
        "utterance": "When did the first staff for the projects started working?",
        "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many projects are there ?",
            "sql": "select count ( project_id ) from project_staff"
        },
        {
            "utterance": "How many staff are there ?",
            "sql": "select count ( staff_id ) from project_staff"
        },
        {
            "utterance": "What project has the most staff ?",
            "sql": "select project_id from project_staff group by project_id order by count ( staff_id ) desc limit value"
        },
        {
            "utterance": "Which staff started the earliest ?",
            "sql": "select staff_id from project_staff order by date_from limit value"
        },
        {
            "utterance": "When did they first start working on the projects ? | Do you mean the date when the staff with id 56.0 started the project ? | Yes .",
            "sql": "select date_from from project_staff where staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the role description of the project staff involved in the most number of project outcomes",
            "sql": "select t1 . role_description from staff_roles as t1 join project_staff as t2 on t1 . role_code = t2 . role_code join project_outcomes as t3 on t2 . project_id = t3 . project_id group by t2 . staff_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show the role code of the project staff involved in the most number of project outcomes",
            "sql": "select t1 . role_code from staff_roles as t1 join project_staff as t2 on t1 . role_code = t2 . role_code join project_outcomes as t3 on t2 . project_id = t3 . project_id group by t2 . staff_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show me other details of the project staff involved in the most number of project outcomes",
            "sql": "select t2 . other_details from staff_roles as t1 join project_staff as t2 on t1 . role_code = t2 . role_code join project_outcomes as t3 on t2 . project_id = t3 . project_id group by t2 . staff_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 29,
    "final": {
        "utterance": "Which project made the most number of outcomes? List the project details and the project id.",
        "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . can you tell me which product made the highest number of outcomes ? | What attributes of the product that made the highest number of outcomes would you like to know ? | I would like to know the most number of outcomes for all outcome codes",
            "sql": "select count ( outcome_code ) from project_outcomes group by outcome_code order by count ( outcome_code ) desc limit value"
        },
        {
            "utterance": "can you give me the project ID ? | Sorry , what would you like the project id for ? | the project that had the highest number of outcomes",
            "sql": "select t1 . project_id from projects as t1 join project_outcomes as t2 on t1 . project_id = t2 . project_id group by t1 . project_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "and can you please also give me the project details ?",
            "sql": "select t1 . project_details , t1 . project_id from projects as t1 join project_outcomes as t2 on t1 . project_id = t2 . project_id group by t1 . project_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 0,
    "final": {
        "utterance": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    "interaction": [
        {
            "utterance": "Can you show me all tracks which were opened after 2000 ? | Do you mean the names of all the tracks which were opened after 2000 ? | Yes .",
            "sql": "select name from track where year_opened > value"
        },
        {
            "utterance": "Hmm , I want to know the seatings for all the tracks opened after 2000 .",
            "sql": "select seating from track where year_opened > value"
        },
        {
            "utterance": "Please list the names and seatings for all the tracks opened after 2000 , ordered by seating .",
            "sql": "select name , seating from track where year_opened > value order by seating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 1,
    "final": {
        "utterance": "List the race class with at least two races.",
        "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "can you show me names of races ?",
            "sql": "select name from race"
        },
        {
            "utterance": "what is the Mexico City 250 's date ?",
            "sql": "select date from race where name = value"
        },
        {
            "utterance": "can you show me class of race ?",
            "sql": "select class from race"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name, location and seating for the most recently opened track?",
        "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which was the most recently opened track ?",
            "sql": "select name from track order by year_opened desc limit value"
        },
        {
            "utterance": "What is the seating capacity for Chicagoland Speedway ?",
            "sql": "select seating from track where name = value"
        },
        {
            "utterance": "What is the location of the Chicagoland Speedway tract ?",
            "sql": "select location from track where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the race class with most number of races.",
        "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "give me the race class with the most number of races",
            "sql": "select class from race group by class order by count ( * ) desc limit value"
        },
        {
            "utterance": "on what date is it ?",
            "sql": "select date from race where class = ( select class from race group by class order by count ( * ) desc limit value )"
        },
        {
            "utterance": "list the race id",
            "sql": "select race_id from race where class = ( select class from race group by class order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all track names that have had no races.",
        "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"
    },
    "interaction": [
        {
            "utterance": "What are the names of those tracks ?",
            "sql": "select name from track where track_id not in ( select track_id from race )"
        },
        {
            "utterance": "Can you show me the location and year opened for these tracks ?",
            "sql": "select location , year_opened from track where track_id not in ( select track_id from race )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name of track with most number of races.",
        "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which track has the highest number of race ?",
            "sql": "select t2 . name from race as t1 join track as t2 on t1 . track_id = t2 . track_id group by t1 . track_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "where is Auto Club Speedway located ?",
            "sql": "select t2 . location from race as t1 join track as t2 on t1 . track_id = t2 . track_id where t2 . name = value"
        },
        {
            "utterance": "where is Chicagoland Speedway located ?",
            "sql": "select t2 . location from race as t1 join track as t2 on t1 . track_id = t2 . track_id where t2 . name = value"
        },
        {
            "utterance": "how many seating does Chicagoland Speedway have ?",
            "sql": "select t2 . seating from race as t1 join track as t2 on t1 . track_id = t2 . track_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 6,
    "final": {
        "utterance": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    "interaction": [
        {
            "utterance": "Which tracks were opened after year 2000 ? | Here are the ids for tracks that were opened after year 2000 , including 2 and 6 . | What are their names ?",
            "sql": "select name from track where year_opened > value"
        },
        {
            "utterance": "And what are their seating capacity ?",
            "sql": "select name , seating from track where year_opened > value"
        },
        {
            "utterance": "Yes , what are their locations ?",
            "sql": "select name , location from track where year_opened > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name of track with most number of races.",
        "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "count the number of records for each track id | do you mean count the number of race ids for each track id ? | How about this -- list all track Ids",
            "sql": "select track_id from track"
        },
        {
            "utterance": "add a column for track name",
            "sql": "select track_id , name from track"
        },
        {
            "utterance": "add a column showing the total number of rows in the table race that contain each of the Track_IDs",
            "sql": "select t2 . track_id , t2 . name , count ( * ) from race as t1 join track as t2 on t1 . track_id = t2 . track_id group by t1 . track_id"
        },
        {
            "utterance": "Filter the list to show only those rows with a number in the count column that is greater than 1",
            "sql": "select t2 . track_id , t2 . name , count ( * ) from race as t1 join track as t2 on t1 . track_id = t2 . track_id group by t1 . track_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 0,
    "final": {
        "utterance": "List the name of film studio that have the most number of films.",
        "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hey there ! How 're you ! Can you provide me with a list of all of the different movie studios ?",
            "sql": "select distinct studio from film"
        },
        {
            "utterance": "Could you filter this list to show just the movie studio which has the largest number of movies ?",
            "sql": "select studio from film group by studio order by count ( * ) desc limit value"
        },
        {
            "utterance": "Great ! Can you please provide me with the total number of films by 20th Century Fox ?",
            "sql": "select count ( * ) from film where studio = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""
    },
    "interaction": [
        {
            "utterance": "What is the average gross amount of money made in dollars ?",
            "sql": "select avg ( gross_in_dollar ) from film"
        },
        {
            "utterance": "What films did Nicholas Meyer direct ?",
            "sql": "select title from film where director = value"
        },
        {
            "utterance": "What were those movies directed by Walter Hill ?",
            "sql": "select title from film where director = value"
        },
        {
            "utterance": "What studio produced that movie with name 48 Hrs ?",
            "sql": "select studio from film where title = value"
        },
        {
            "utterance": "What studio produced Star Trek II : The Wrath of Khan ?",
            "sql": "select studio from film where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the studios that have not produced films with director \"Walter Hill\".",
        "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""
    },
    "interaction": [
        {
            "utterance": "Who is the director of `` walter hill '' ? | do you mean which film is directed by the director of `` walter hill '' ? | yes .",
            "sql": "select title from film where director = value"
        },
        {
            "utterance": "Which studios have produced films with the director `` Walter Hill '' ?",
            "sql": "select studio from film where director = value"
        },
        {
            "utterance": "What about the ones that have n't ?",
            "sql": "select studio from film where director ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 3,
    "final": {
        "utterance": "List the title of films that do not have any market estimation.",
        "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
    },
    "interaction": [
        {
            "utterance": "Can you list the titles of the films without any market estimations ?",
            "sql": "select title from film where film_id not in ( select film_id from film_market_estimation )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the maximum and minimum number of cities in all markets.",
        "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"
    },
    "interaction": [
        {
            "utterance": "Find the number of cities in USA country ?",
            "sql": "select number_cities from market where country = value"
        },
        {
            "utterance": "How many country 's located in the world ?",
            "sql": "select count ( country ) from market"
        },
        {
            "utterance": "What are the market id of china ?",
            "sql": "select market_id from market where country = value"
        },
        {
            "utterance": "What are the maximum and minimum number of cities in all markets .",
            "sql": "select max ( number_cities ) , min ( number_cities ) from market"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 5,
    "final": {
        "utterance": "List the title of films that do not have any market estimation.",
        "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
    },
    "interaction": [
        {
            "utterance": "How many films are there in total ?",
            "sql": "select count ( distinct title ) from film"
        },
        {
            "utterance": "How many of those films do not have any market estimation ?",
            "sql": "select count ( title ) from film where film_id not in ( select film_id from film_market_estimation )"
        },
        {
            "utterance": "What about film IDs ? | Do you mean the film IDs of the 9 films that do not have market estimations ? | Yes , could you tell me those films ' IDs ?",
            "sql": "select film_id from film where film_id not in ( select film_id from film_market_estimation )"
        },
        {
            "utterance": "What are the titles of the films with those IDs ?",
            "sql": "select title from film where film_id in ( select film_id from film where film_id not in ( select film_id from film_market_estimation ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 6,
    "final": {
        "utterance": "List the studios which average gross is above 4500000.",
        "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000"
    },
    "interaction": [
        {
            "utterance": "Which studio has the highest gross ?",
            "sql": "select studio from film order by gross_in_dollar desc limit value"
        },
        {
            "utterance": "How many studios have average gross higher than 4500000",
            "sql": "select studio from film group by studio having avg ( gross_in_dollar ) > = value"
        },
        {
            "utterance": "List them please",
            "sql": "select studio from film group by studio having avg ( gross_in_dollar ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 7,
    "final": {
        "utterance": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC"
    },
    "interaction": [
        {
            "utterance": "please list the years of film market estimations in descending order .",
            "sql": "select year from film_market_estimation order by year desc"
        },
        {
            "utterance": "please list the years of film market estimations from Japan .",
            "sql": "select t1 . year from film_market_estimation as t1 join market as t2 on t1 . market_id = t2 . market_id where t2 . country = value"
        },
        {
            "utterance": "please list the years of film market estimations when the market is in country `` Japan '' in descending order .",
            "sql": "select t1 . year from film_market_estimation as t1 join market as t2 on t1 . market_id = t2 . market_id where t2 . country = value order by t1 . year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the distinct director of films with market estimation in the year of 1995.",
        "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995"
    },
    "interaction": [
        {
            "utterance": "Hello , which films where made in 1995 ?",
            "sql": "select * from film as t1 join film_market_estimation as t2 on t1 . film_id = t2 . film_id where t2 . year = value"
        },
        {
            "utterance": "Who was the distinct director of ET the Extra-Terrestrial ?",
            "sql": "select director from film where title = value"
        },
        {
            "utterance": "Can you show me Market estimation for the year 1995 ?",
            "sql": "select low_estimate , high_estimate from film_market_estimation where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the titles and directors of the films were never presented in China?",
        "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')"
    },
    "interaction": [
        {
            "utterance": "how many country participate in the market ?",
            "sql": "select count ( distinct country ) from market"
        },
        {
            "utterance": "how many directors of the films never presented in china ?",
            "sql": "select count ( director ) from film where film_id not in ( select film_id from film_market_estimation as t1 join market as t2 on t1 . market_id = t2 . market_id where country = value )"
        },
        {
            "utterance": "how many titles were never presented in china ?",
            "sql": "select count ( title ) from film where film_id not in ( select film_id from film_market_estimation as t1 join market as t2 on t1 . market_id = t2 . market_id where country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the id of the product that was ordered the most often?",
        "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many order items there",
            "sql": "select count ( * ) from order_items"
        },
        {
            "utterance": "how many order id from product id 7",
            "sql": "select count ( * ) from order_items where product_id = value"
        },
        {
            "utterance": "how many order id from order item id 2",
            "sql": "select count ( * ) from order_items where order_item_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 1,
    "final": {
        "utterance": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900"
    },
    "interaction": [
        {
            "utterance": "What are id and name of the products whose price is lower than 600 ?",
            "sql": "select product_id , product_name from products where product_price < value"
        },
        {
            "utterance": "What are id and name of the products whose price is higher than 900 ?",
            "sql": "select product_id , product_name from products where product_price > value"
        },
        {
            "utterance": "How many products have price lower than 600 or higher than 900 ?",
            "sql": "select count ( * ) from products where product_price < value or product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and address of the customers who have both New and Pending orders.",
        "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
    },
    "interaction": [
        {
            "utterance": "what is the name of the customer of customer code 401",
            "sql": "select customer_name from customers where customer_code = value"
        },
        {
            "utterance": "what is address of the customer Ahmed ?",
            "sql": "select customer_address from customers where customer_name = value"
        },
        {
            "utterance": "what is the address of the customer lukas ?",
            "sql": "select customer_address from customers where customer_name = value"
        },
        {
            "utterance": "what is customer code of lukas ?",
            "sql": "select customer_code from customers where customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 3,
    "final": {
        "utterance": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details"
    },
    "interaction": [
        {
            "utterance": "List the name of all suppliers in alphabetical order of their addresses .",
            "sql": "select t1 . supplier_name from suppliers as t1 join supplier_addresses as t2 on t1 . supplier_id = t2 . supplier_id join addresses as t3 on t2 . address_id = t3 . address_id order by t3 . address_details"
        },
        {
            "utterance": "And their phone numbers ?",
            "sql": "select t1 . supplier_phone from suppliers as t1 join supplier_addresses as t2 on t1 . supplier_id = t2 . supplier_id join addresses as t3 on t2 . address_id = t3 . address_id order by t3 . address_details"
        },
        {
            "utterance": "What states is Tesco located in ? | do you mean the address id or the address details ? | The address details .",
            "sql": "select t3 . address_details from suppliers as t1 join supplier_addresses as t2 on t1 . supplier_id = t2 . supplier_id join addresses as t3 on t2 . address_id = t3 . address_id where t1 . supplier_name = value"
        },
        {
            "utterance": "How about Lidl ?",
            "sql": "select t3 . address_details from suppliers as t1 join supplier_addresses as t2 on t1 . supplier_id = t2 . supplier_id join addresses as t3 on t2 . address_id = t3 . address_id where t1 . supplier_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the average amount purchased and value purchased for the supplier who supplies the most products.",
        "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are the average amount purchased and value purchased for the supplier who supplies the most products",
            "sql": "select avg ( total_amount_purchased ) , avg ( total_value_purchased ) from product_suppliers where supplier_id = ( select supplier_id from product_suppliers group by supplier_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "How about for the supplier who supplies the least products ? | Did you want to get the supplier id who supplies the least products ? | I want the average amount purchased and value purchased for the supplier who supplies the least products",
            "sql": "select avg ( total_amount_purchased ) , avg ( total_value_purchased ) from product_suppliers where supplier_id = ( select supplier_id from product_suppliers group by supplier_id order by count ( * ) limit value )"
        },
        {
            "utterance": "What is the supplier id who supplies the least products ?",
            "sql": "select distinct supplier_id from product_suppliers where supplier_id = ( select supplier_id from product_suppliers group by supplier_id order by count ( * ) limit value )"
        },
        {
            "utterance": "What is the total value purchased for supplier id 3",
            "sql": "select sum ( total_value_purchased ) from product_suppliers where supplier_id = value"
        },
        {
            "utterance": "What is the `` date supplied to '' of supplier id 3 ?",
            "sql": "select date_supplied_to from product_suppliers where supplier_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"
    },
    "interaction": [
        {
            "utterance": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000",
            "sql": "select supplier_id from product_suppliers group by supplier_id having avg ( total_amount_purchased ) > value or avg ( total_amount_purchased ) < value"
        },
        {
            "utterance": "Which of those suppliers purchased less than 30000 ?",
            "sql": "select supplier_id from product_suppliers group by supplier_id having avg ( total_amount_purchased ) < value"
        },
        {
            "utterance": "And how much was their average amount purchased for each product ?",
            "sql": "select product_id , avg ( total_amount_purchased ) from product_suppliers group by product_id"
        },
        {
            "utterance": "What was their most recent date_supplied_to ?",
            "sql": "select date_supplied_to from product_suppliers order by date_supplied_to desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the id of the department with the least number of staff?",
        "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "who is the department manager ? | Do you want the ids of staffs who are department managers ? | yes",
            "sql": "select staff_id from staff_department_assignments where job_title_code = value"
        },
        {
            "utterance": "which department id has the least amount of staff ?",
            "sql": "select department_id from staff_department_assignments group by department_id order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id of the department with the least number of staff?",
        "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me id of all departments .",
            "sql": "select distinct department_id from staff_department_assignments"
        },
        {
            "utterance": "show me the number of staff of all departments .",
            "sql": "select department_id , count ( staff_id ) from staff_department_assignments group by department_id order by count ( * )"
        },
        {
            "utterance": "show me the department with lowest staff",
            "sql": "select department_id from staff_department_assignments group by department_id order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
    },
    "interaction": [
        {
            "utterance": "What are the staff names with job title code Sales Person ?",
            "sql": "select t1 . staff_name from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        },
        {
            "utterance": "What are their genders ? | Would you like their names and their genders ? | Yes .",
            "sql": "select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value except select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        },
        {
            "utterance": "What are the staff names and genders for people with job title code Sales Person ?",
            "sql": "select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        },
        {
            "utterance": "How about with job title code Clerical Staff ?",
            "sql": "select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        },
        {
            "utterance": "Which of the people with job title code Sales Person are not Clerical Staff ?",
            "sql": "select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value except select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and address of the customers who have both New and Pending orders.",
        "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you provide me with a list of all customer names and addresses ?",
            "sql": "select customer_name , customer_address from customers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 10,
    "final": {
        "utterance": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000"
    },
    "interaction": [
        {
            "utterance": "Which items were ordered four or more times ? | There is no item that was ordered four or more times | What is the id of products supplied more than 80000 ?",
            "sql": "select product_id from product_suppliers group by product_id having sum ( total_amount_purchased ) > value"
        },
        {
            "utterance": "What is the latest date that orders were sent by supplier id 4 ? | Did you mean date of supplied from or to ? | Supplied to .",
            "sql": "select date_supplied_to from product_suppliers where supplier_id = value order by date_supplied_to desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the product type whose average price is higher than the average price of all products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( product_price ) from products"
        },
        {
            "utterance": "What is the product type of the product whose average price is greater than the average price of all products ?",
            "sql": "select product_type_code from products group by product_type_code having avg ( product_price ) > ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "What is the average price of that product with type code Hardware ?",
            "sql": "select avg ( product_price ) from products where product_type_code = value"
        },
        {
            "utterance": "What is the average price of all products with the type code `` clothes '' ?",
            "sql": "select avg ( product_price ) from products where product_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 12,
    "final": {
        "utterance": "List the name of staff who has been assigned multiple jobs.",
        "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what is the date assigned to of the department managers ?",
            "sql": "select date_assigned_to from staff_department_assignments where job_title_code = value"
        },
        {
            "utterance": "list the name of staff who has been assigned multiple jobs ?",
            "sql": "select t1 . staff_name from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id group by t2 . staff_id having count ( * ) > value"
        },
        {
            "utterance": "what is the date assigned from sales person ?",
            "sql": "select date_assigned_from from staff_department_assignments where job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names and ids of customers whose address contains TN?",
        "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\""
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all of the customer IDs and the corresponding customer names ?",
            "sql": "select customer_name , customer_id from customers"
        },
        {
            "utterance": "Thanks ! Can you filter this list to show only the rows for customers who have an address in the state of TN ?",
            "sql": "select customer_name , customer_id from customers where customer_address like value"
        },
        {
            "utterance": "Great ! Can you provide me with the customer addresses for those two customers ?",
            "sql": "select customer_address from customers where customer_address like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the id and name of the staff who has been assigned for the shortest period.",
        "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Details of staff id 1 ? | Do you mean the staff gender and staff name of staff id 1 ? | yes",
            "sql": "select staff_gender , staff_name from staff where staff_id = value"
        },
        {
            "utterance": "Give the id and name of the staff who has been assigned for the shortest period ?",
            "sql": "select t1 . staff_id , t1 . staff_name from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id order by date_assigned_to - date_assigned_from limit value"
        },
        {
            "utterance": "job title code for staff id ? | Do you mean all the job title codes for all the staff ids ? | yes",
            "sql": "select job_title_code from staff_department_assignments"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
    },
    "interaction": [
        {
            "utterance": "Find the id of customers whose address contains WY state and do not use credit card for payment .",
            "sql": "select customer_id from customers where customer_address like value and payment_method_code ! = value"
        },
        {
            "utterance": "Can I have the customer 's name please ?",
            "sql": "select customer_name from customers where customer_address like value and payment_method_code ! = value"
        },
        {
            "utterance": "Please find the id and name of customers whose address contains WY state and use credit card for payment .",
            "sql": "select customer_id , customer_name from customers where customer_address like value and payment_method_code ! = value"
        },
        {
            "utterance": "Hmm . Can you please give me his email address and phone ?",
            "sql": "select customer_email , customer_phone from customers where customer_address like value and payment_method_code ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 16,
    "final": {
        "utterance": "For each product type, return the maximum and minimum price.",
        "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all the different product types ?",
            "sql": "select distinct product_type_code from products group by product_type_code"
        },
        {
            "utterance": "Sweet ! Can you update this list to show what the maximum product price is for both Clothes and Hardware , and include the minimum product price for each ?",
            "sql": "select product_type_code , max ( product_price ) , min ( product_price ) from products group by product_type_code"
        },
        {
            "utterance": "Cool ! Can you show me a list of all of the different product names ?",
            "sql": "select distinct product_name from products"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 17,
    "final": {
        "utterance": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "Show me all products supplied by supplier id 2 . | Do you mean the product ID of all products supplied by supplier id 2 ? | Yes",
            "sql": "select product_id from product_suppliers where supplier_id = value"
        },
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( product_price ) from products"
        },
        {
            "utterance": "Which of the previous products are more expensive than the average price of all products ? | Do you mean to find the names of those products that are more expensive than the average price of all products ? | Only the names of those products supplied by supplier id 2 .",
            "sql": "select t1 . product_id from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value and t2 . product_price > ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "How much does product ID 8 cost ?",
            "sql": "select product_price from products where product_id = value"
        },
        {
            "utterance": "And product ID 15 ?",
            "sql": "select product_price from products where product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 18,
    "final": {
        "utterance": "For each product type, return the maximum and minimum price.",
        "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "how many products on the table",
            "sql": "select count ( * ) from products"
        },
        {
            "utterance": "what are all the products name on this table",
            "sql": "select product_name from products"
        },
        {
            "utterance": "what is the product price of red jeans",
            "sql": "select product_price from products where product_name = value"
        },
        {
            "utterance": "which product is highest price on the table | Which kinds of product information do you want ? | i want to the black jeans product price",
            "sql": "select product_price from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the largest and smallest customer codes?",
        "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "please list out the customers name",
            "sql": "select customer_name from customers"
        },
        {
            "utterance": "what is the highest customer code on the table",
            "sql": "select max ( customer_code ) from customers"
        },
        {
            "utterance": "what is the address of Ahmed",
            "sql": "select customer_address from customers where customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name of the most expensive hardware product.",
        "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you find the name of the most expensive hardware product please ?",
            "sql": "select product_name from products where product_type_code = value order by product_price desc limit value"
        },
        {
            "utterance": "What is its product price ?",
            "sql": "select product_price from products where product_type_code = value order by product_price desc limit value"
        },
        {
            "utterance": "What is the product name and price for the least expensive hardware product ?",
            "sql": "select product_name , product_price from products where product_type_code = value order by product_price asc limit value"
        },
        {
            "utterance": "What is the average price of all hardware products ?",
            "sql": "select avg ( product_price ) from products where product_type_code = value"
        },
        {
            "utterance": "What is the average price of all clothes products ?",
            "sql": "select avg ( product_price ) from products where product_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
    },
    "interaction": [
        {
            "utterance": "What is the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff ?",
            "sql": "select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value except select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        },
        {
            "utterance": "What 's the name and gender of the staff with the job of Sales Person ?",
            "sql": "select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        },
        {
            "utterance": "What 's the name and gender of the staff who was never assigned to Clerical Staff .",
            "sql": "select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id except select t1 . staff_name , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the id and name of the staff who has been assigned for the shortest period.",
        "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all staff names with their gender ...",
            "sql": "select staff_name , staff_gender from staff"
        },
        {
            "utterance": "List all department id 's with their corresponding job title code .",
            "sql": "select department_id , job_title_code from staff_department_assignments"
        },
        {
            "utterance": "How many staffs are working as Sales Person or Clerical Staff ?",
            "sql": "select count ( * ) from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value or t2 . job_title_code = value"
        },
        {
            "utterance": "Find the id and name of the staff who has been assigned for the shortest period .",
            "sql": "select t1 . staff_id , t1 . staff_name from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id order by date_assigned_to - date_assigned_from limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 23,
    "final": {
        "utterance": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the products supplied by supplier id 3 , please ?",
            "sql": "select t2 . product_name from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value"
        },
        {
            "utterance": "What are the product types of those ?",
            "sql": "select t2 . product_type_code from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value"
        },
        {
            "utterance": "What are the prices of those ?",
            "sql": "select t2 . product_price from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value"
        },
        {
            "utterance": "What are the prices of those ?",
            "sql": "select t2 . product_price from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value"
        },
        {
            "utterance": "What supplier id carries the product name red jeans ?",
            "sql": "select t1 . supplier_id from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t2 . product_name = value"
        },
        {
            "utterance": "What is the total amount purchased of those ?",
            "sql": "select t1 . supplier_id , t1 . total_amount_purchased from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t2 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the id of the product that was ordered the most often?",
        "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What product id was ordered most often ?",
            "sql": "select product_id from order_items group by product_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "and the product ID that was ordered least often ?",
            "sql": "select product_id from order_items group by product_id order by count ( * ) limit value"
        },
        {
            "utterance": "How many times was product id 2 ordered ?",
            "sql": "select count ( * ) from order_items group by product_id having product_id = value"
        },
        {
            "utterance": "How many times was product id 13 ordered ?",
            "sql": "select count ( * ) from order_items group by product_id having product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"
    },
    "interaction": [
        {
            "utterance": "Who placed order after having order cancelled ?",
            "sql": "select distinct customer_id from customer_orders where order_date > ( select min ( order_date ) from customer_orders where order_status_code = value )"
        },
        {
            "utterance": "What is the order status for order 3",
            "sql": "select order_status_code from customer_orders where order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the product id and product type of the cheapest product?",
        "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you please list the product which has the lowest value for product price ?",
            "sql": "select * from products order by product_price limit value"
        },
        {
            "utterance": "Can you list only the product id and the product type please ?",
            "sql": "select product_id , product_type_code from products order by product_price limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the id and name of the department store that has both marketing and managing department?",
        "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""
    },
    "interaction": [
        {
            "utterance": "What is the id of the department store that has both marketing and managing department ?",
            "sql": "select t2 . dept_store_id from departments as t1 join department_stores as t2 on t1 . dept_store_id = t2 . dept_store_id where t1 . department_name = value intersect select t2 . dept_store_id from departments as t1 join department_stores as t2 on t1 . dept_store_id = t2 . dept_store_id where t1 . department_name = value"
        },
        {
            "utterance": "What is the name of the department store that has both marketing and managing department ?",
            "sql": "select t2 . store_name from departments as t1 join department_stores as t2 on t1 . dept_store_id = t2 . dept_store_id where t1 . department_name = value intersect select t2 . store_name from departments as t1 join department_stores as t2 on t1 . dept_store_id = t2 . dept_store_id where t1 . department_name = value"
        },
        {
            "utterance": "Can you show me all the id of the department store that has both marketing and managing department ?",
            "sql": "select t2 . dept_store_id , t2 . store_name from departments as t1 join department_stores as t2 on t1 . dept_store_id = t2 . dept_store_id where t1 . department_name = value intersect select t2 . dept_store_id , t2 . store_name from departments as t1 join department_stores as t2 on t1 . dept_store_id = t2 . dept_store_id where t1 . department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the name of the most expensive hardware product.",
        "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the most expensive hardware product ?",
            "sql": "select product_name from products where product_type_code = value order by product_price desc limit value"
        },
        {
            "utterance": "what is the product price ?",
            "sql": "select product_price from products where product_type_code = value order by product_price desc limit value"
        },
        {
            "utterance": "what is the product id for red jeans ?",
            "sql": "select product_id from products where product_name = value"
        },
        {
            "utterance": "what is the product type code for red jeans",
            "sql": "select distinct ( product_type_code ) from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "what product Id has the highest price ? | Do you mean the id of the product which has the highest price ? | yes",
            "sql": "select product_id from products order by product_price desc limit value"
        },
        {
            "utterance": "what is the product name ? | Do you mean the product name of the product which has the highest price ? | yes",
            "sql": "select product_name from products order by product_price desc limit value"
        },
        {
            "utterance": "what is the name of the product with the lowest price ?",
            "sql": "select product_name from products order by product_price limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 30,
    "final": {
        "utterance": "How many department stores does the store chain South have?",
        "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
    },
    "interaction": [
        {
            "utterance": "How many department stores does the store chain South have ?",
            "sql": "select count ( * ) from department_stores as t1 join department_store_chain as t2 on t1 . dept_store_chain_id = t2 . dept_store_chain_id where t2 . dept_store_chain_name = value"
        },
        {
            "utterance": "How many department stores does the store chain West have ?",
            "sql": "select count ( * ) from department_stores as t1 join department_store_chain as t2 on t1 . dept_store_chain_id = t2 . dept_store_chain_id where t2 . dept_store_chain_name = value"
        },
        {
            "utterance": "What is the store address of the store chain East ?",
            "sql": "select t1 . store_address from department_stores as t1 join department_store_chain as t2 on t1 . dept_store_chain_id = t2 . dept_store_chain_id where t2 . dept_store_chain_name = value"
        },
        {
            "utterance": "What is the store phone of the store chain West ?",
            "sql": "select t1 . store_phone from department_stores as t1 join department_store_chain as t2 on t1 . dept_store_chain_id = t2 . dept_store_chain_id where t2 . dept_store_chain_name = value"
        },
        {
            "utterance": "What is the store email of the store chain South ?",
            "sql": "select t1 . store_email from department_stores as t1 join department_store_chain as t2 on t1 . dept_store_chain_id = t2 . dept_store_chain_id where t2 . dept_store_chain_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the highest and lowest prices of products , grouped by and alphabetically ordered by product type ?",
            "sql": "select max ( product_price ) , min ( product_price ) from products group by product_type_code order by product_type_code"
        },
        {
            "utterance": "What are the all product names",
            "sql": "select product_name from products"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the phone numbers of all customers and suppliers.",
        "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"
    },
    "interaction": [
        {
            "utterance": "Can you show me the phone numbers of all customers ?",
            "sql": "select customer_phone from customers"
        },
        {
            "utterance": "Hmm , I also want to know the phone numbers of all suppliers please .",
            "sql": "select supplier_phone from suppliers"
        },
        {
            "utterance": "Please list the phone numbers of all customers and suppliers .",
            "sql": "select customer_phone from customers union select supplier_phone from suppliers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 33,
    "final": {
        "utterance": "How many department stores does the store chain South have?",
        "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of the store name with dept store id 1 ? | Do you mean dept store chain name ? | yes",
            "sql": "select dept_store_chain_name from department_store_chain where dept_store_chain_id = value"
        },
        {
            "utterance": "Show me the name of all department stores ? | Do you mean the store name ? | yes",
            "sql": "select store_name from department_stores"
        },
        {
            "utterance": "Show how many department stores does the store chain South have ?",
            "sql": "select count ( * ) from department_stores as t1 join department_store_chain as t2 on t1 . dept_store_chain_id = t2 . dept_store_chain_id where t2 . dept_store_chain_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 34,
    "final": {
        "utterance": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')"
    },
    "interaction": [
        {
            "utterance": "What is the Job title code of department id 4 ?",
            "sql": "select job_title_code from staff_department_assignments where department_id = value"
        },
        {
            "utterance": "What is the date assigned from and of the staff id 1 ?",
            "sql": "select date_assigned_from from staff_department_assignments where staff_id = value"
        },
        {
            "utterance": "What is the department Id of sales person ?",
            "sql": "select distinct department_id from staff_department_assignments where job_title_code = value"
        },
        {
            "utterance": "What is the date assigned to clerical staff ?",
            "sql": "select date_assigned_to from staff_department_assignments where job_title_code = value"
        },
        {
            "utterance": "What is the date assigned from and date assigned to sales person ?",
            "sql": "select date_assigned_from , date_assigned_to from staff_department_assignments where job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 35,
    "final": {
        "utterance": "Return the name and gender of the staff who was assigned in 2016.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""
    },
    "interaction": [
        {
            "utterance": "how many departments are there",
            "sql": "select count ( distinct department_id ) from staff_department_assignments"
        },
        {
            "utterance": "what is the jobe title code of department id 5",
            "sql": "select job_title_code from staff_department_assignments where department_id = value"
        },
        {
            "utterance": "how many persons in department manger",
            "sql": "select count ( * ) from staff_department_assignments where job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 36,
    "final": {
        "utterance": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "can you show a list of customer address ?",
            "sql": "select customer_address from customers"
        },
        {
            "utterance": "can you show a list of order date ?",
            "sql": "select order_date from customer_orders"
        },
        {
            "utterance": "can you show a list of customer phone ?",
            "sql": "select customer_phone from customers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the ids of the top three products that were purchased in the largest amount?",
        "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Which products were purchased in the largest amount ? | 4 is the id of product that was purchased in the largest amount . | What about top 3 largest ?",
            "sql": "select product_id from product_suppliers order by total_amount_purchased desc limit value"
        },
        {
            "utterance": "And what about the lowest 3 ?",
            "sql": "select product_id from product_suppliers order by total_amount_purchased asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 38,
    "final": {
        "utterance": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all Job Title Codes present on this list ?",
            "sql": "select job_title_code from staff_department_assignments"
        },
        {
            "utterance": "Great ! Can you please show me a list of Staff IDs for those who have the job_title_code of Department Manager ?",
            "sql": "select t1 . staff_id from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        },
        {
            "utterance": "Great ! Now can you update this list to include the genders of all of these individuals ?",
            "sql": "select t1 . staff_id , t1 . staff_gender from staff as t1 join staff_department_assignments as t2 on t1 . staff_id = t2 . staff_id where t2 . job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 39,
    "final": {
        "utterance": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What are the IDs of all the products supplied by supplier 2 ?",
            "sql": "select t1 . product_id from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value"
        },
        {
            "utterance": "What is the average price of these products ?",
            "sql": "select avg ( t2 . product_price ) from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value"
        },
        {
            "utterance": "Show me the ID 's from the products from supplier number 2 that are more expensive than this average , please .",
            "sql": "select t1 . product_id from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value and t2 . product_price > ( select avg ( t2 . product_price ) from product_suppliers as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . supplier_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"
    },
    "interaction": [
        {
            "utterance": "how many customer orders there",
            "sql": "select count ( * ) from customer_orders"
        },
        {
            "utterance": "what is the customer id of order id 2",
            "sql": "select customer_id from customer_orders where order_id = value"
        },
        {
            "utterance": "what is the order date of order id 1",
            "sql": "select order_date from customer_orders where order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the ids of the two department store chains with the largest number of department stores?",
        "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "I want to know the store chains with the largest department stores",
            "sql": "select dept_store_chain_id from department_stores group by dept_store_chain_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the ID of the department store chain that has the second largest number of department stores ?",
            "sql": "select dept_store_chain_id from department_stores group by dept_store_chain_id order by count ( * ) desc limit value except select dept_store_chain_id from department_stores group by dept_store_chain_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "OK , do you have the names of the above stores ?",
            "sql": "select store_name from department_stores group by dept_store_chain_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about their store address ?",
            "sql": "select store_address from department_stores group by dept_store_chain_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Kindly let me know the store emails of the above stores",
            "sql": "select store_email from department_stores group by dept_store_chain_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the product type whose average price is higher than the average price of all products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( product_price ) from products"
        },
        {
            "utterance": "Find the product type whose average price is higher than the average price of all products .",
            "sql": "select product_type_code from products group by product_type_code having avg ( product_price ) > ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "What is the product name of that ?",
            "sql": "select product_name from products where product_type_code = ( select product_type_code from products group by product_type_code having avg ( product_price ) > ( select avg ( product_price ) from products ) )"
        },
        {
            "utterance": "Find the product type whose average price is lower than the average price of all products .",
            "sql": "select product_type_code from products group by product_type_code having avg ( product_price ) < ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "What are the product names ?",
            "sql": "select product_name from products where product_type_code = ( select product_type_code from products group by product_type_code having avg ( product_price ) < ( select avg ( product_price ) from products ) )"
        },
        {
            "utterance": "What are the prices of them ?",
            "sql": "select product_price from products where product_type_code = ( select product_type_code from products group by product_type_code having avg ( product_price ) < ( select avg ( product_price ) from products ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 43,
    "final": {
        "utterance": "What is the name and job title of the staff who was assigned the latest?",
        "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with a list of all Staff Department Assignments `` date assigned to '' values ?",
            "sql": "select date_assigned_to from staff_department_assignments"
        },
        {
            "utterance": "Thank you ! Now I realize that I should probably be asking for the date assigned from values ... Therefore , can you provide me with a list of all staff IDs and their corresponding `` date assigned from '' values ?",
            "sql": "select staff_id , date_assigned_from from staff_department_assignments"
        },
        {
            "utterance": "Thank you for that ! Can you please filter this list to show only the row of the staff member who has the most recent date_assigned_from value ?",
            "sql": "select staff_id , date_assigned_from from staff_department_assignments order by date_assigned_from desc limit value"
        },
        {
            "utterance": "Thank you ! Could you please display the name and job title of this staff person ?",
            "sql": "select staff_name , job_title_code from staff_department_assignments as t1 join staff as t2 on t1 . staff_id = t2 . staff_id where t1 . staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
    },
    "interaction": [
        {
            "utterance": "Hello , what is the name of the student with student id 1008 ? | The first and last name of the student with student id 1008 is Jandy Nelson . | What is her major ?",
            "sql": "select major from student where stuid = value"
        },
        {
            "utterance": "Apologies , I meant to ask his/her major ; what is the student 's sex ?",
            "sql": "select sex from student where stuid = value"
        },
        {
            "utterance": "How old is the student with student id 1008 ?",
            "sql": "select age from student where stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\""
    },
    "interaction": [
        {
            "utterance": "what is the location of Bootup Baltimore",
            "sql": "select clublocation from club where clubname = value"
        },
        {
            "utterance": "how many female students are presented on the table",
            "sql": "select count ( stuid ) from student where sex = value"
        },
        {
            "utterance": "what is the major of Tracy",
            "sql": "select major from student where fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the clubs having \"Davis Steven\" as a member.",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\""
    },
    "interaction": [
        {
            "utterance": "How many clubs do you have ?",
            "sql": "select count ( * ) from club"
        },
        {
            "utterance": "How many members does each club have ?",
            "sql": "select clubid , count ( stuid ) from member_of_club group by clubid"
        },
        {
            "utterance": "Finally , can you list the clubs that have `` Davis Steven '' as a member ?",
            "sql": "select t1 . clubid from member_of_club as t1 join student as t2 on t1 . stuid = t2 . stuid where t2 . lname = value and t2 . fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Retrieve the average age of members of the club \"Tennis Club\".",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""
    },
    "interaction": [
        {
            "utterance": "What are the average age of all the members of the tennis club",
            "sql": "select avg ( t3 . age ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "Give me the first names and last names of all the members of the tennis club",
            "sql": "select t3 . fname , t3 . lname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "Can i have the city code of all members of the tennis club",
            "sql": "select t3 . city_code from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "Give me the position of the member in the tennis club",
            "sql": "select t2 . position from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which club has the most members majoring in \"600\"?",
        "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are majoring in `` 600 '' ?",
            "sql": "select count ( stuid ) from student where major = value"
        },
        {
            "utterance": "Can you show me only those students ?",
            "sql": "select stuid from student where major = value"
        },
        {
            "utterance": "Can you also show me what clubs they are in ?",
            "sql": "select t1 . clubname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t3 . major = value group by t1 . clubname"
        },
        {
            "utterance": "How many students who are majoring in 600 are in each of those clubs ?",
            "sql": "select t1 . clubname , count ( * ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t3 . major = value group by t1 . clubname order by count ( * )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the number of members of club \"Pen and Paper Gaming\".",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""
    },
    "interaction": [
        {
            "utterance": "Hi . How many different clubs are there in total ?",
            "sql": "select count ( * ) from club"
        },
        {
            "utterance": "What are the names of the 4 clubs ?",
            "sql": "select clubname from club"
        },
        {
            "utterance": "Among the 4 clubs , how many members are there in total ?",
            "sql": "select count ( * ) from member_of_club"
        },
        {
            "utterance": "Of the 4 members , how many of them are members of the club `` Pen and Paper Gaming '' ?",
            "sql": "select count ( * ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many clubs does the student named \"Eric Tai\" belong to?",
        "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
    },
    "interaction": [
        {
            "utterance": "Tell me the club description for club id 1 ?",
            "sql": "select clubdesc from club where clubid = value"
        },
        {
            "utterance": "Tell me the position for the student id 1001 ? | Do you mean the city code for students ? | yes",
            "sql": "select city_code from student where stuid = value"
        },
        {
            "utterance": "How many clubs does the student named 'Eric TAI ' belong to ?",
            "sql": "select count ( distinct t1 . clubname ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t3 . fname = value and t3 . lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many different roles are there in the club \"Bootup Baltimore\"?",
        "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "Yes please",
            "sql": "select t1 . clubname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid group by t2 . clubid order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many members are in theat club ?",
            "sql": "select count ( * ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid group by t2 . clubid order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many roles are in that club ?",
            "sql": "select count ( position ) from member_of_club where clubid = ( select t2 . clubid from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid group by t2 . clubid order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\""
    },
    "interaction": [
        {
            "utterance": "Who are the members of Bootup Baltimore ? | Here are the first names and last names of members of Bootup Baltimore | What are there major 's ?",
            "sql": "select t3 . major from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "How many members are there total ?",
            "sql": "select count ( * ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid"
        },
        {
            "utterance": "Can you list all of the members ?",
            "sql": "select * from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid"
        },
        {
            "utterance": "How many members are female ?",
            "sql": "select count ( * ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t3 . sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "How many students are members of the club `` Bootup Baltimore '' ?",
            "sql": "select count ( * ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid where t1 . clubname = value"
        },
        {
            "utterance": "Please provide the ages of the two members .",
            "sql": "select t3 . age from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "What is the average age of the two members of the club Bootup Baltimore ?",
            "sql": "select avg ( t3 . age ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "Could you please tell me who is President of the club Bootup Baltimore . | Do you want the first and last name of him ? | Yes , please provide first and last name of the President of the club Bootup Baltimore .",
            "sql": "select t3 . fname , t3 . lname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value and t2 . position = value"
        },
        {
            "utterance": "Thanks . Could you please tell me the Club Location ?",
            "sql": "select clublocation from club where clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
    },
    "interaction": [
        {
            "utterance": "where is the location of club `` Hopkins Student Enterprises '' ?",
            "sql": "select clublocation from club where clubname = value"
        },
        {
            "utterance": "Show the first name of the `` CTO '' of club `` Hopkins Student Enterprises ''",
            "sql": "select t3 . fname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value and t2 . position = value"
        },
        {
            "utterance": "Who is the `` CTO '' of club `` Hopkins Student Enterprises '' ? show the first name and the last name .",
            "sql": "select t3 . fname , t3 . lname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value and t2 . position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\""
    },
    "interaction": [
        {
            "utterance": "What is the average age of students ?",
            "sql": "select avg ( age ) from student"
        },
        {
            "utterance": "And what is the average gender wise ? | sorry , i cant understand your question | What is the average age of students as per the `` Sex '' of the students ?",
            "sql": "select sex , avg ( age ) from student group by sex"
        },
        {
            "utterance": "How many Students are below the age of 17 ?",
            "sql": "select count ( stuid ) from student where age < value"
        },
        {
            "utterance": "How many students have the same Fname ?",
            "sql": "select count ( stuid ) from student where fname in ( select fname from student group by fname having count ( * ) > value )"
        },
        {
            "utterance": "How many clubs are located in city code `` AKW ''",
            "sql": "select count ( clubid ) from club where clublocation = value"
        },
        {
            "utterance": "and how many in city code `` HHH ''",
            "sql": "select count ( clubid ) from club where clublocation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the club that has the most female students.",
        "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the club id of stud 1001",
            "sql": "select clubid from member_of_club where stuid = value"
        },
        {
            "utterance": "what is the club name of AKW",
            "sql": "select clubname from club where clublocation = value"
        },
        {
            "utterance": "what is the position of club id 1 | What do you mean by the position of club id 1 | in the table member of club",
            "sql": "select position from member_of_club where clubid = value"
        },
        {
            "utterance": "what is the club name of HHH",
            "sql": "select clubname from club where clublocation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "what is last name of the members in club ?",
            "sql": "select t3 . lname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid"
        },
        {
            "utterance": "what is the first name of the student with last name smith ?",
            "sql": "select fname from student where lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "What is the average age of all of the members of the club called `` Bootup Baltimore '' ?",
            "sql": "select avg ( t3 . age ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "How many people with sex `` M '' and sex `` F '' are in that club ?",
            "sql": "select count ( * ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value"
        },
        {
            "utterance": "Who is the president of that club ?",
            "sql": "select t3 . fname , t3 . lname from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t1 . clubname = value and t2 . position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many clubs does the student named \"Eric Tai\" belong to?",
        "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
    },
    "interaction": [
        {
            "utterance": "How many clubs does the student Eric Tai belong to ?",
            "sql": "select count ( distinct t1 . clubname ) from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid where t3 . fname = value and t3 . lname = value"
        },
        {
            "utterance": "How many other students belong in 0 clubs ?",
            "sql": "select count ( * ) from student where stuid not in ( select t3 . stuid from club as t1 join member_of_club as t2 on t1 . clubid = t2 . clubid join student as t3 on t2 . stuid = t3 . stuid )"
        },
        {
            "utterance": "How many students belong to 1 club ?",
            "sql": "select count ( * ) from ( select stuid from member_of_club group by stuid having count ( * ) = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select lname , fname from student where stuid in ( select stuid from member_of_club group by stuid having count ( * ) = value )"
        },
        {
            "utterance": "What are the club names of the clubs they belong to , please ?",
            "sql": "select clubname from club where clubid in ( select distinct clubid from member_of_club group by stuid having count ( * ) = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which destination has least number of flights?",
        "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the origins , the destinations and the flight numbers ?",
            "sql": "select origin , destination , flno from flight group by destination"
        },
        {
            "utterance": "Hmm , I want to know just the destinations and the flight numbers please .",
            "sql": "select destination , flno from flight group by destination"
        },
        {
            "utterance": "Please show me the destinations and the number of flights they have .",
            "sql": "select destination , count ( * ) from flight group by destination"
        },
        {
            "utterance": "Which destination has the least number of flights ?",
            "sql": "select destination , count ( * ) from flight group by destination order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "What are the names and distances of aircraft that have more than 5000 distance ?",
            "sql": "select t2 . name from certificate as t1 join aircraft as t2 on t2 . aid = t1 . aid where t2 . distance > value"
        },
        {
            "utterance": "What are the names and distances of aircraft that have more than 5000 distance and there are at least 5 people who have its certificate ?",
            "sql": "select t2 . name from certificate as t1 join aircraft as t2 on t2 . aid = t1 . aid where t2 . distance > value group by t1 . aid order by count ( * ) > = value"
        },
        {
            "utterance": "What is the employee ID of the employee who flew the longest distance ?",
            "sql": "select t1 . eid from certificate as t1 join aircraft as t2 on t2 . aid = t1 . aid order by t2 . distance desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is average and maximum salary of all employees.",
        "sql": "SELECT avg(salary) ,  max(salary) FROM Employee"
    },
    "interaction": [
        {
            "utterance": "What is average and maximum salary of all employees .",
            "sql": "select avg ( salary ) , max ( salary ) from employee"
        },
        {
            "utterance": "What name has the highest salary ?",
            "sql": "select name from employee order by salary desc limit value"
        },
        {
            "utterance": "What is the employee id and salary of George Wright ?",
            "sql": "select eid , salary from employee where name = value"
        },
        {
            "utterance": "What is the name and employee id of the person with the lowest salary",
            "sql": "select name , eid from employee order by salary limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 3,
    "final": {
        "utterance": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you display the salary and name of the employees ?",
            "sql": "select salary , name from employee"
        },
        {
            "utterance": "What is the name of the employee who has the most number of aircraft certificates ?",
            "sql": "select t1 . name from employee as t1 join certificate as t2 on t1 . eid = t2 . eid group by t1 . eid order by count ( * ) desc limit value"
        },
        {
            "utterance": "Hmm , can you just list his salary ?",
            "sql": "select t1 . salary from employee as t1 join certificate as t2 on t1 . eid = t2 . eid group by t1 . eid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show names for all aircrafts of which John Williams has certificates.",
        "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
    },
    "interaction": [
        {
            "utterance": "show names of all aircrafts ?",
            "sql": "select name from aircraft"
        },
        {
            "utterance": "in which aircraft does John Williams have a certificate",
            "sql": "select t3 . name from employee as t1 join certificate as t2 on t1 . eid = t2 . eid join aircraft as t3 on t3 . aid = t2 . aid where t1 . name = value"
        },
        {
            "utterance": "give me the airline id to that",
            "sql": "select t3 . aid from employee as t1 join certificate as t2 on t1 . eid = t2 . eid join aircraft as t3 on t3 . aid = t2 . aid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show names for all employees with salary more than the average.",
        "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
    },
    "interaction": [
        {
            "utterance": "Show names for all employees with a salary greater than average",
            "sql": "select name from employee where salary > ( select avg ( salary ) from employee )"
        },
        {
            "utterance": "Great , could you tell me the average salary ?",
            "sql": "select avg ( salary ) from employee"
        },
        {
            "utterance": "Could you show me a list of employees with a salary less than the average ?",
            "sql": "select name from employee where salary < ( select avg ( salary ) from employee )"
        },
        {
            "utterance": "how many employees earn above the average salary ?",
            "sql": "select count ( * ) from employee where salary > ( select avg ( salary ) from employee )"
        },
        {
            "utterance": "how many earn below the average ?",
            "sql": "select count ( * ) from employee where salary < ( select avg ( salary ) from employee )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the flight number of flights with three lowest distances.",
        "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "can you show me average of the distances ?",
            "sql": "select avg ( distance ) from flight"
        },
        {
            "utterance": "which one is the longest distance ?",
            "sql": "select max ( distance ) from flight"
        },
        {
            "utterance": "what is the highest price ?",
            "sql": "select max ( price ) from flight"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "How many flights have an origin of Los Angeles ?",
            "sql": "select count ( * ) from flight where origin = value"
        },
        {
            "utterance": "How many of those are going to Honolulu ?",
            "sql": "select count ( * ) from flight where origin = value and destination = value"
        },
        {
            "utterance": "What is their departure date and arrival date ?",
            "sql": "select departure_date , arrival_date from flight where origin = value and destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of employees with three lowest salaries.",
        "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "list the salaries in ascending order",
            "sql": "select salary from employee order by salary asc"
        },
        {
            "utterance": "show the least three salaries in the table",
            "sql": "select salary from employee order by salary asc limit value"
        },
        {
            "utterance": "list the name of the employees with the lowest salaries",
            "sql": "select name from employee order by salary asc limit value"
        },
        {
            "utterance": "what is the id of him ?",
            "sql": "select eid from employee order by salary asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name of aircraft which fewest people have its certificate.",
        "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "LIST THE NAME OF THE AIRCRAFTS",
            "sql": "select name from aircraft"
        },
        {
            "utterance": "WHAT ARE THE NAMES OF AIRCRAFT WHICH FEWEST PEOPLE HAVE ITS CERTIFICATE",
            "sql": "select t2 . name from certificate as t1 join aircraft as t2 on t2 . aid = t1 . aid group by t1 . aid order by count ( * ) asc limit value"
        },
        {
            "utterance": "WHAT IS THE ID OF THE AIRCRAFT | Do you mean the aircraft id of the aircraft named Boeing 727 ? | YES",
            "sql": "select aid from aircraft where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which destination has least number of flights?",
        "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many flights are arriving in Washington DC today ? | Sorry , what is the date you meant by today ? | I am sorry I meant on April/12/2005",
            "sql": "select count ( * ) from flight where destination = value and arrival_date like value"
        },
        {
            "utterance": "How many flights are arriving in Dallas ?",
            "sql": "select count ( * ) from flight where destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the salary and name of the employee who has the least number of certificates on aircrafts with distance more than 5000 ?",
            "sql": "select t1 . salary , t1 . name from employee as t1 join certificate as t2 on t1 . eid = t2 . eid join aircraft as t3 on t3 . aid = t2 . aid where t3 . distance > value group by t1 . eid order by count ( * ) asc limit value"
        },
        {
            "utterance": "Okay . What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000 ?",
            "sql": "select t1 . salary , t1 . name from employee as t1 join certificate as t2 on t1 . eid = t2 . eid join aircraft as t3 on t3 . aid = t2 . aid where t3 . distance > value group by t1 . eid order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the salary and name of the employee who has the most number of certificates on aircraft with distance less than 5000 ?",
            "sql": "select t1 . salary , t1 . name from employee as t1 join certificate as t2 on t1 . eid = t2 . eid join aircraft as t3 on t3 . aid = t2 . aid where t3 . distance < value group by t1 . eid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "What are the departure dates for all flights from Los Angeles to Honolulu ?",
            "sql": "select departure_date from flight where origin = value and destination = value"
        },
        {
            "utterance": "What are the arrival dates for all flights from Los Angeles to Honolulu ?",
            "sql": "select arrival_date from flight where origin = value and destination = value"
        },
        {
            "utterance": "What are the prices of those flights ?",
            "sql": "select price from flight where origin = value and destination = value"
        },
        {
            "utterance": "What about the flight numbers ?",
            "sql": "select flno from flight where origin = value and destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the name of employees with three lowest salaries.",
        "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me what is the average salary ?",
            "sql": "select avg ( salary ) from employee"
        },
        {
            "utterance": "What is the name of employees with three lowest salaries ?",
            "sql": "select name from employee order by salary asc limit value"
        },
        {
            "utterance": "What is the highest salary in the company ?",
            "sql": "select max ( salary ) from employee"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show ids for all employees who don't have a certificate.",
        "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    "interaction": [
        {
            "utterance": "Which employees do n't have certificates ?",
            "sql": "select eid from employee except select eid from certificate"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from employee except select eid from certificate"
        },
        {
            "utterance": "How many employees do n't have certificates ?",
            "sql": "select count ( * ) from employee except select aid from certificate"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all flight numbers with aircraft Airbus A340-300.",
        "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
    },
    "interaction": [
        {
            "utterance": "What are the IDs of the aircrafts with name Airbus A340-300 ?",
            "sql": "select distinct aid from aircraft where name = value"
        },
        {
            "utterance": "What distance does aircraft ID fly ? | Do you mean aircraft id 3 ? And want me to return the sum of all the distances it flew ? | Yes please .",
            "sql": "select sum ( distance ) from flight where aid = ( select distinct aid from aircraft where name = value )"
        },
        {
            "utterance": "WHat flight numbers have that aid ?",
            "sql": "select t1 . flno from flight as t1 join aircraft as t2 on t1 . aid = t2 . aid where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the name of aircraft which fewest people have its certificate.",
        "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different aircrafts are there ? | Do you mean different names of aircrafts ? | Yes , how many different names .",
            "sql": "select count ( distinct name ) from aircraft"
        },
        {
            "utterance": "Show me the name of the aircraft with the fewest people who have its certificate",
            "sql": "select t2 . name from certificate as t1 join aircraft as t2 on t2 . aid = t1 . aid group by t1 . aid order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many people have the 747-400 certificate ? | Do you mean the name of Boeing 747-400 in the Boeing 747-400 table ? | yes",
            "sql": "select count ( * ) from certificate as t1 join aircraft as t2 on t2 . aid = t1 . aid where t2 . name = value"
        },
        {
            "utterance": "how far is its distance ? | Did you mean the distance of Boeing 747-400 ? | Yes",
            "sql": "select distance from aircraft where name = value"
        },
        {
            "utterance": "and the Boeing 737-800 ? | And what do you want to know about the Boeing 737-800 ? | What is the distance of the Boeing 737-800 ?",
            "sql": "select distance from aircraft where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the id and name of the aircraft with the maximum distance.",
        "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the distance of the name Boeing 747-400 ? | did you mean the distance of the aircraft with the name Boeing 747-400 ? | yes",
            "sql": "select distance from aircraft where name = value"
        },
        {
            "utterance": "What is the distance of the aircraft with the name Boeing 737-800 ?",
            "sql": "select distance from aircraft where name = value"
        },
        {
            "utterance": "What is the name of the aircraft with distance 7120 ?",
            "sql": "select name from aircraft where distance = value"
        },
        {
            "utterance": "What is the id of the aircraft with the maximum distance ?",
            "sql": "select aid from aircraft order by distance desc limit value"
        },
        {
            "utterance": "Which is the aircraft that have the maximum distance ? | Did you mean the name of the aircraft ? | yes",
            "sql": "select name from aircraft order by distance desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the average price for flights from Los Angeles to Honolulu.",
        "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "What is the average price for flights from Los Angeles to Honolulu",
            "sql": "select avg ( price ) from flight where origin = value and destination = value"
        },
        {
            "utterance": "What is the average price for flights from Los Angeles to Chicago",
            "sql": "select avg ( price ) from flight where origin = value and destination = value"
        },
        {
            "utterance": "What is the average price for flights from Los Angeles to Washington D.C .",
            "sql": "select avg ( price ) from flight where origin = value and destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the aircraft name for the flight with number 99",
        "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
    },
    "interaction": [
        {
            "utterance": "what was the destination of flight 99 ?",
            "sql": "select destination from flight where flno = value"
        },
        {
            "utterance": "How far did flight 99 fly ?",
            "sql": "select distance from flight where flno = value"
        },
        {
            "utterance": "What was the name of the airplane from flight 99 ?",
            "sql": "select t2 . name from flight as t1 join aircraft as t2 on t1 . aid = t2 . aid where t1 . flno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which origin has most number of flights?",
        "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many origin are there ?",
            "sql": "select count ( distinct origin ) from flight"
        },
        {
            "utterance": "How many flights are there ?",
            "sql": "select count ( * ) from flight"
        },
        {
            "utterance": "Which origin has least number of flights ?",
            "sql": "select origin from flight group by origin order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
    },
    "interaction": [
        {
            "utterance": "Can you provide me with the names of the dorms that have both TV Lounge and Study Room as amenities ?",
            "sql": "select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value intersect select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value"
        },
        {
            "utterance": "What is the Dorm ID of Dorm-plex 2000 ?",
            "sql": "select dormid from dorm where dorm_name = value"
        },
        {
            "utterance": "What is the student capacity of Dorm-plex 2000 ?",
            "sql": "select student_capacity from dorm where dorm_name = value"
        },
        {
            "utterance": "What genders can be residents of Dorm-plex 2000 ?",
            "sql": "select gender from dorm where dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the first name of students who are living in the Smith Hall.",
        "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'"
    },
    "interaction": [
        {
            "utterance": "What are the First names of students living in smith hall ?",
            "sql": "select t1 . fname from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid where t3 . dorm_name = value"
        },
        {
            "utterance": "Last name of Tracy | Did you want the last name of the student with first name Tracy ? | Yes",
            "sql": "select lname from student where fname = value"
        },
        {
            "utterance": "What is the city code of student Tracy kim ?",
            "sql": "select city_code from student where fname = value and lname = value"
        },
        {
            "utterance": "What is the Student capacity of Smith Hall ?",
            "sql": "select student_capacity from dorm where dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the average age of students who are living in the dorm with the largest capacity.",
        "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
    },
    "interaction": [
        {
            "utterance": "Which dorm has the largest capacity ? | Hi do you need the dorm name or dorm id ? | dorm id , please .",
            "sql": "select dormid from dorm order by student_capacity desc limit value"
        },
        {
            "utterance": "How many students live there ?",
            "sql": "select count ( t1 . stuid ) from lives_in as t1 join dorm as t2 on t1 . dormid = t2 . dormid where t2 . student_capacity = ( select max ( student_capacity ) from dorm )"
        },
        {
            "utterance": "What is their average age ?",
            "sql": "select avg ( t1 . age ) from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid where t3 . student_capacity = ( select max ( student_capacity ) from dorm )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many female students (sex is F) whose age is below 25?",
        "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
    },
    "interaction": [
        {
            "utterance": "Please show me how many female students have the major 600",
            "sql": "select count ( * ) from student where sex = value and major = value"
        },
        {
            "utterance": "How many female students are there total ?",
            "sql": "select count ( * ) from student where sex = value"
        },
        {
            "utterance": "How many of these women are under 25 years old ?",
            "sql": "select count ( * ) from student where sex = value and age < value"
        },
        {
            "utterance": "Show me the ages of the 9 female students with ages under 25 years .",
            "sql": "select age from student where sex = value and age < value"
        },
        {
            "utterance": "Of all the students under 25 , how many are female ?",
            "sql": "select count ( * ) from student where sex = value and age < value"
        },
        {
            "utterance": "What are the names of the female students that are under 25 ?",
            "sql": "select fname , lname from student where sex = value and age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'"
    },
    "interaction": [
        {
            "utterance": "Oh , sorry . I meant to ask what dorm does the student with the last name of Smith live in ?",
            "sql": "select t1 . dorm_name from dorm as t1 join lives_in as t4 on t4 . dormid = t1 . dormid join student as t5 on t5 . stuid = t4 . stuid where t5 . lname = value"
        },
        {
            "utterance": "What are the amenities of those dorms ?",
            "sql": "select t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid join lives_in as t4 on t4 . dormid = t1 . dormid join student as t5 on t5 . stuid = t4 . stuid where t5 . lname = value"
        },
        {
            "utterance": "What are the amenities of the dorm that the student with the last name of Jones lives in ?",
            "sql": "select t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid join lives_in as t4 on t4 . dormid = t1 . dormid join student as t5 on t5 . stuid = t4 . stuid where t5 . lname = value"
        },
        {
            "utterance": "What are the amenities of the dorm that the oldest student lives in ?",
            "sql": "select t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid join lives_in as t4 on t4 . dormid = t1 . dormid join student as t5 on t5 . stuid = t4 . stuid where t5 . age = ( select max ( age ) from student )"
        },
        {
            "utterance": "What are the amenities of the dorm that has the most female students living in it ?",
            "sql": "select t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid join lives_in as t4 on t4 . dormid = t1 . dormid join student as t5 on t5 . stuid = t4 . stuid where t1 . dormid = ( select t1 . dormid from dorm as t1 join lives_in as t4 on t1 . dormid = t4 . dormid join student as t5 on t4 . stuid = t5 . stuid where t5 . sex = value group by t1 . dormid order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What are the amenities of the dorm that has the smallest student capacity ?",
            "sql": "select t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t1 . student_capacity = ( select min ( student_capacity ) from dorm )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the number of students whose age is older than the average age for each gender.",
        "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "how many names or student in the table | Do you mean the LName or Fname ? | how many count in male or female in the student table",
            "sql": "select count ( * ) , sex from student group by sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the number of students for the cities where have more than one student.",
        "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show me the number of students of all cities | Do you mean the total count of students | Yes",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "Show me the count of students for each city",
            "sql": "select city_code , count ( * ) from student group by city_code"
        },
        {
            "utterance": "Show me the count of students for the cities where have more than one student",
            "sql": "select city_code , count ( * ) from student group by city_code having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name and capacity of the dorm with least number of amenities.",
        "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what 's Smith Hall student capacity ?",
            "sql": "select distinct ( t1 . student_capacity ) from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t1 . dorm_name = value"
        },
        {
            "utterance": "sorry meant least number of amenities",
            "sql": "select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid group by t2 . dormid order by count ( * ) limit value"
        },
        {
            "utterance": "what 's the name of the dorm with the highest amenities ?",
            "sql": "select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid group by t2 . dormid order by count ( * ) desc limit value"
        },
        {
            "utterance": "which of this dorm has student capacity of 355 ?",
            "sql": "select dorm_name from dorm where student_capacity = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
    },
    "interaction": [
        {
            "utterance": "How many students are living in the dorms ?",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "Do they all have all amenities ? | Did you mean whether all dorms have all amenities ? | Yes .",
            "sql": "select distinct dormid from has_amenity"
        },
        {
            "utterance": "How many dorms do not have a TV lounge ?",
            "sql": "select t3 . dormid from has_amenity as t3 join dorm_amenity as t4 on t3 . amenid = t4 . amenid where t4 . amenity_name = value"
        },
        {
            "utterance": "How many students are in those four dorms ?",
            "sql": "select count ( * ) from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid where t2 . dormid not in ( select t3 . dormid from has_amenity as t3 join dorm_amenity as t4 on t3 . amenid = t4 . amenid where t4 . amenity_name = value )"
        },
        {
            "utterance": "What are the first names of those nine students ?",
            "sql": "select t1 . fname from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid where t2 . dormid not in ( select t3 . dormid from has_amenity as t3 join dorm_amenity as t4 on t3 . amenid = t4 . amenid where t4 . amenity_name = value )"
        },
        {
            "utterance": "What are their ages ?",
            "sql": "select t1 . age from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid where t2 . dormid not in ( select t3 . dormid from has_amenity as t3 join dorm_amenity as t4 on t3 . amenid = t4 . amenid where t4 . amenity_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25"
    },
    "interaction": [
        {
            "utterance": "Who are the students that are between 20 and 25 years of age ? | Do you mean the last name or the first name of the students between 20 and 25 years of age ? | What are the first names of the students who are between 20 and 25 years of age ?",
            "sql": "select fname from student where age between value and value"
        },
        {
            "utterance": "what are the student names who are in PHL city and are between 20 and 25 years of age | First name or last name ? | first",
            "sql": "select fname from student where city_code = value and age between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of amenity that is most common in all dorms.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many amenities are offered in all dorms ?",
            "sql": "select count ( * ) from dorm_amenity"
        },
        {
            "utterance": "Could you tell me the names of these amenities ?",
            "sql": "select amenity_name from dorm_amenity"
        },
        {
            "utterance": "What is the name of the most common amenity in all dorms ?",
            "sql": "select t1 . amenity_name from dorm_amenity as t1 join has_amenity as t2 on t1 . amenid = t2 . amenid group by t2 . amenid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of dorms that do not have amenity TV Lounge.",
        "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"
    },
    "interaction": [
        {
            "utterance": "Can you show me the dorms with female only students ?",
            "sql": "select * from dorm where gender = value"
        },
        {
            "utterance": "okay , can you show me all the names of dorm with male only students ?",
            "sql": "select * from dorm where gender = value"
        },
        {
            "utterance": "what about the name of the dorms that are both male and female ?",
            "sql": "select * from dorm where gender = value or gender = value"
        },
        {
            "utterance": "show me the name of dorms that are no gender specific ?",
            "sql": "select dorm_name from dorm where gender = value"
        },
        {
            "utterance": "Show me all dorm names",
            "sql": "select dorm_name from dorm"
        },
        {
            "utterance": "Can you tell me which one of them do not have TV Lounge ?",
            "sql": "select dorm_name from dorm except select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value"
        },
        {
            "utterance": "and which one DO have TV Lounge ?",
            "sql": "select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the average and oldest age for students with different sex.",
        "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "What is the average oldest students with different sex ? | Do you mean what is the average age of students ? | What is the average and oldest age for students with different sex ?",
            "sql": "select avg ( age ) , max ( age ) , sex from student group by sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name"
    },
    "interaction": [
        {
            "utterance": "What is the student_capacity of Smith Hall ? | Are you asking about the student capacity of the dorm named Smith Hall ? | Yes",
            "sql": "select student_capacity from dorm where dorm_name = value"
        },
        {
            "utterance": "How May female Dorm are there ?",
            "sql": "select count ( * ) from dorm where gender = value"
        },
        {
            "utterance": "What is the amenity_name of Dorm_amenity ? | Did you want all amenity names for dorms ? | Yes",
            "sql": "select amenity_name from dorm_amenity"
        },
        {
            "utterance": "List name of all amenities which Anonymous Donor Hall has , and sort the result in alphabetic order .",
            "sql": "select t1 . amenity_name from dorm_amenity as t1 join has_amenity as t2 on t2 . amenid = t1 . amenid join dorm as t3 on t2 . dormid = t3 . dormid where t3 . dorm_name = value order by t1 . amenity_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the first and last name of students whose age is younger than the average age.",
        "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"
    },
    "interaction": [
        {
            "utterance": "Show me the names of students | Do you mean full names of all the students ? | Yes",
            "sql": "select fname , lname from student"
        },
        {
            "utterance": "Show me the Age list of all students",
            "sql": "select age from student"
        },
        {
            "utterance": "Show me the first and last name of students whose age is younger than the average age",
            "sql": "select fname , lname from student where age < ( select avg ( age ) from student )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the average age of students living in each dorm and the name of dorm.",
        "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"
    },
    "interaction": [
        {
            "utterance": "How many students live in each dorm ?",
            "sql": "select count ( * ) , t3 . dorm_name from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid group by t3 . dorm_name"
        },
        {
            "utterance": "What is the average age of the students living in each dorm ?",
            "sql": "select avg ( t1 . age ) , t3 . dorm_name from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid group by t3 . dorm_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of dorms that do not have any amenity",
        "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"
    },
    "interaction": [
        {
            "utterance": "Please find the names of the dorms that do not have any amenities ?",
            "sql": "select dorm_name from dorm where dormid not in ( select dormid from has_amenity )"
        },
        {
            "utterance": "Which dorm has the highest student capacity ?",
            "sql": "select dorm_name from dorm order by student_capacity desc limit value"
        },
        {
            "utterance": "What about the lowest student capacity ?",
            "sql": "select dorm_name from dorm order by student_capacity asc limit value"
        },
        {
            "utterance": "What is the average student capacity of all dorms ?",
            "sql": "select avg ( student_capacity ) from dorm"
        },
        {
            "utterance": "What is the dorm ID of the dorm with the lowest student capacity ?",
            "sql": "select dormid from dorm order by student_capacity asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"
    },
    "interaction": [
        {
            "utterance": "How many female students ( sex is F ) live in BAL",
            "sql": "select count ( * ) from student where sex = value and city_code = value"
        },
        {
            "utterance": "What are their last names ?",
            "sql": "select lname from student where sex = value and city_code = value"
        },
        {
            "utterance": "Can you also show me the last names of any male students ( sex is M ) who are below the age of 20 ?",
            "sql": "select lname from student where sex = value and age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the name of amenity that is most common in all dorms.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "The most common amenity in all dorms is what ?",
            "sql": "select t1 . amenity_name from dorm_amenity as t1 join has_amenity as t2 on t1 . amenid = t2 . amenid group by t2 . amenid order by count ( * ) desc limit value"
        },
        {
            "utterance": "what 's Roof dorm id ?",
            "sql": "select dormid from has_amenity where amenid = ( select t1 . amenid from dorm_amenity as t1 join has_amenity as t2 on t1 . amenid = t2 . amenid group by t2 . amenid order by count ( * ) desc limit value )"
        },
        {
            "utterance": "what is TV Lounge amenity id ?",
            "sql": "select t1 . amenid from dorm_amenity as t1 where t1 . amenity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the average age of students living in each dorm and the name of dorm.",
        "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you list the dorm names of the various different dorms ?",
            "sql": "select dorm_name from dorm"
        },
        {
            "utterance": "Thanks ! Can you show me the average age of the students living in each of these dorms ?",
            "sql": "select avg ( t1 . age ) , t3 . dorm_name from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid group by t3 . dorm_name"
        },
        {
            "utterance": "Thanks ! Now can you add to that list the student capacity of each of those dormitories ?",
            "sql": "select avg ( t1 . age ) , t3 . dorm_name , t3 . student_capacity from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid group by t3 . dorm_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 20,
    "final": {
        "utterance": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "What are the names of the students who live in the city with code HKG ? | Do you mean the full name | Yes please",
            "sql": "select fname , lname from student where city_code = value"
        },
        {
            "utterance": "Who are not living in that city with code HKG ?",
            "sql": "select fname , lname from student where city_code ! = value"
        },
        {
            "utterance": "What is the average age of those who do n't live in that city ?",
            "sql": "select avg ( age ) from student where city_code ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many female students (sex is F) whose age is below 25?",
        "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
    },
    "interaction": [
        {
            "utterance": "Please show me the information of all students who are under 25 years old",
            "sql": "select * from student where age < value"
        },
        {
            "utterance": "and of those , please now just show the female students",
            "sql": "select * from student where sex = value and age < value"
        },
        {
            "utterance": "Please return a count of how many there are left | I do n't understand . Do you mean the count of students not in the previous result ? | Only those in the previous results",
            "sql": "select count ( * ) from student where sex = value and age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Can you list the number of amenity ids associated with each distinct dorm id and display both of those results ( dorm id and number of amenity ids ) ?",
            "sql": "select t3 . dormid , count ( t4 . amenid ) from dorm as t3 join has_amenity as t4 on t3 . dormid = t4 . dormid join dorm_amenity as t5 on t4 . amenid = t5 . amenid group by t3 . dormid"
        },
        {
            "utterance": "Wonderful , can you remove that information and instead display every student id that has a dorm id of 160 ?",
            "sql": "select t1 . stuid from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid where t2 . dormid = value"
        },
        {
            "utterance": "Can you show only the first names ?",
            "sql": "select t1 . fname from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid where t2 . dormid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the number of dorms and total capacity for each gender.",
        "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender"
    },
    "interaction": [
        {
            "utterance": "Could you give me the number of dorms for each gender ?",
            "sql": "select count ( * ) , gender from dorm group by gender"
        },
        {
            "utterance": "What are the names of those dorms ?",
            "sql": "select dorm_name from dorm"
        },
        {
            "utterance": "What is the dorm name of the dorm with the smallest capacity ?",
            "sql": "select dorm_name from dorm order by student_capacity desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the average age and number of male students (with sex M) from each city.",
        "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all the male students ( sex with M ) from each city ?",
            "sql": "select avg ( age ) , city_code from student where sex = value group by city_code"
        },
        {
            "utterance": "What are the average number of all the male students ( sex with M ) from each city ?",
            "sql": "select count ( * ) , city_code from student where sex = value group by city_code"
        },
        {
            "utterance": "What are the names of the students from ATL ? | Here are the first and last names of the student from ATL | What is his age ?",
            "sql": "select age from student where city_code = value"
        },
        {
            "utterance": "What is the average age of all the female students ( sex with F ) from each city ?",
            "sql": "select avg ( age ) , city_code from student where sex = value group by city_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"
    },
    "interaction": [
        {
            "utterance": "what is the name of the dorms with capacity of greeter than 300",
            "sql": "select dorm_name from dorm where student_capacity > value"
        },
        {
            "utterance": "what are the dorm ids ?",
            "sql": "select dormid from dorm where student_capacity > value"
        },
        {
            "utterance": "whats the student capacity ?",
            "sql": "select student_capacity from dorm where student_capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name"
    },
    "interaction": [
        {
            "utterance": "Find the name of the amenities that Smith Hall dorm has .",
            "sql": "select t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t1 . dorm_name = value"
        },
        {
            "utterance": "Order that by amenity name please ?",
            "sql": "select t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t1 . dorm_name = value order by t3 . amenity_name"
        },
        {
            "utterance": "What are the amenity id of those ?",
            "sql": "select t2 . amenid from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t1 . dorm_name = value order by t3 . amenity_name"
        },
        {
            "utterance": "What dorm id have the amenity id 901 ?",
            "sql": "select t2 . dormid from has_amenity as t2 where t2 . amenid = value"
        },
        {
            "utterance": "What dorm id have the amenity id 904 ?",
            "sql": "select t2 . dormid from has_amenity as t2 where t2 . amenid = value"
        },
        {
            "utterance": "What dorm id have the amenity id 922 ?",
            "sql": "select t2 . dormid from has_amenity as t2 where t2 . amenid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid"
    },
    "interaction": [
        {
            "utterance": "I need the number of amenities for the dorms that can accommodate more than 100 students | Are you asking for the number of distinct amenities for dorms whose student capacity is greater than 100 ? | yes",
            "sql": "select count ( distinct t2 . amenid ) , t1 . dormid from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid where t1 . student_capacity > value group by t1 . dormid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of female students (with F sex) living in Smith Hall",
        "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "How about the total number of dorms ?",
            "sql": "select count ( * ) from dorm"
        },
        {
            "utterance": "Can you list their names ?",
            "sql": "select dorm_name from dorm"
        },
        {
            "utterance": "How many students live in Smith Hall ?",
            "sql": "select count ( * ) from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid where t3 . dorm_name = value"
        },
        {
            "utterance": "How many of them are females ?",
            "sql": "select count ( * ) from student as t1 join lives_in as t2 on t1 . stuid = t2 . stuid join dorm as t3 on t3 . dormid = t2 . dormid where t3 . dorm_name = value and t1 . sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the dorms ?",
            "sql": "select dorm_name from dorm"
        },
        {
            "utterance": "Which of those dorms have a TV Lounge ?",
            "sql": "select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value"
        },
        {
            "utterance": "What dorms have no Study Room as an amenity ? | Do you mean among those with a TV Lounge ? | Yes .",
            "sql": "select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value except select t1 . dorm_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value"
        },
        {
            "utterance": "And the gender that is housed ?",
            "sql": "select t1 . dorm_name , t1 . gender from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value except select t1 . dorm_name , t1 . gender from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t3 . amenity_name = value"
        },
        {
            "utterance": "Are there any other amenities that the dorm features ? | For this dorm ? Or for all dorms ? | For this dorm .",
            "sql": "select t1 . dorm_name , t3 . amenity_name from dorm as t1 join has_amenity as t2 on t1 . dormid = t2 . dormid join dorm_amenity as t3 on t2 . amenid = t3 . amenid where t1 . dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"
    },
    "interaction": [
        {
            "utterance": "list all job ids",
            "sql": "select distinct job_id from employees"
        },
        {
            "utterance": "what are the hire dates for all the jobs ?",
            "sql": "select hire_date from employees"
        },
        {
            "utterance": "list all the phone numbers",
            "sql": "select distinct phone_number from employees"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 1,
    "final": {
        "utterance": "display the average salary of employees for each department who gets a commission percentage.",
        "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
    },
    "interaction": [
        {
            "utterance": "Which departments get a commission percentage ?",
            "sql": "select * from employees where commission_pct ! = value"
        },
        {
            "utterance": "How many employees in these departments get a commission percentage ?",
            "sql": "select count ( * ) from employees where commission_pct ! = value"
        },
        {
            "utterance": "By department , display average salary of employees who get a commission percentage",
            "sql": "select department_id , avg ( salary ) from employees where commission_pct ! = value group by department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 2,
    "final": {
        "utterance": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.",
        "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all employee IDs and their corresponding salaries ?",
            "sql": "select employee_id , salary from employees"
        },
        {
            "utterance": "Awesome ! That 's great ! Can you filter this list to show only the employee IDs and correpsonding salaries that are above the average salary ?",
            "sql": "select employee_id , salary from employees where salary > ( select avg ( salary ) from employees )"
        },
        {
            "utterance": "Great ! Now can you display this list to include both the first and last name corresponding to each employee ID ?",
            "sql": "select employee_id , first_name , last_name , salary from employees where salary > ( select avg ( salary ) from employees )"
        },
        {
            "utterance": "Thank you so much for that ! Can you filter this list to show only the rows in which the employee works in a department which has an employee with the letter J in their name ?",
            "sql": "select employee_id , first_name , last_name , salary from employees where salary > ( select avg ( salary ) from employees ) and department_id in ( select department_id from employees where first_name like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 3,
    "final": {
        "utterance": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    "interaction": [
        {
            "utterance": "Display the first name of all employees .",
            "sql": "select first_name from employees"
        },
        {
            "utterance": "Show the first name of all employees and their salary .",
            "sql": "select first_name , salary from employees"
        },
        {
            "utterance": "Show the first name of all employees and their salary for employees whose first name does not contain the letter M .",
            "sql": "select first_name , salary from employees where first_name not like value"
        },
        {
            "utterance": "Show the first name of all employees and list their salary in descending order for employees whose first name does not contain the letter M .",
            "sql": "select first_name , salary from employees where first_name not like value order by salary desc"
        },
        {
            "utterance": "Out of these employees what is the phone number for the employee with the highest salary .",
            "sql": "select phone_number from employees where first_name not like value order by salary desc limit value"
        },
        {
            "utterance": "What is the email for the employee whose first name does not contain the letter M with the highest salary .",
            "sql": "select email from employees where first_name not like value order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )"
    },
    "interaction": [
        {
            "utterance": "How much is the salary for employee id 163 ?",
            "sql": "select salary from employees where employee_id = value"
        },
        {
            "utterance": "What is employee id 163 full name ?",
            "sql": "select first_name , last_name from employees where employee_id = value"
        },
        {
            "utterance": "Show me the full name for the employees that get more salary then employee 163 ?",
            "sql": "select first_name , last_name from employees where salary > ( select salary from employees where employee_id = value )"
        },
        {
            "utterance": "What department does employee 163 work under ?",
            "sql": "select department_id from employees where employee_id = value"
        },
        {
            "utterance": "How many employee 's work for employee 's 163 department ?",
            "sql": "select count ( * ) from employees where department_id = ( select department_id from employees where employee_id = value )"
        },
        {
            "utterance": "Who is the head of this department ?",
            "sql": "select distinct manager_id from employees where department_id = ( select department_id from employees where employee_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 5,
    "final": {
        "utterance": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")"
    },
    "interaction": [
        {
            "utterance": "Show me all the employees in the same department as Clara . | Here is all the information of all the employees in the same department as the employee with a first name Clara . | Can you show me their hire dates ?",
            "sql": "select hire_date from employees where department_id = ( select department_id from employees where first_name = value )"
        },
        {
            "utterance": "What is their average salary ?",
            "sql": "select avg ( salary ) from employees where department_id = ( select department_id from employees where first_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 6,
    "final": {
        "utterance": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'"
    },
    "interaction": [
        {
            "utterance": "Can you show me the first and last names of all employees who work in any department located in London please ?",
            "sql": "select first_name , last_name from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id join locations as t3 on t2 . location_id = t3 . location_id where t3 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the first name and job id for all employees in the Finance department?",
        "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'"
    },
    "interaction": [
        {
            "utterance": "What is the department id for the Finance department ?",
            "sql": "select department_id from departments where department_name = value"
        },
        {
            "utterance": "How many employees work in that department ?",
            "sql": "select count ( * ) from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id where t2 . department_name = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select t1 . first_name from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id where t2 . department_name = value"
        },
        {
            "utterance": "What is the job id for each employee in the Finance department ?",
            "sql": "select t1 . job_id from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id where t2 . department_name = value"
        },
        {
            "utterance": "What are their employee IDs ?",
            "sql": "select t1 . employee_id from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id where t2 . department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 8,
    "final": {
        "utterance": "display all the information of those employees who did not have any job in the past.",
        "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
    },
    "interaction": [
        {
            "utterance": "List all employees ?",
            "sql": "select first_name , last_name from employees"
        },
        {
            "utterance": "Of these employees , how many did not have a job in the past ?",
            "sql": "select count ( * ) from employees where employee_id not in ( select employee_id from job_history )"
        },
        {
            "utterance": "Okay . How many had jobs in the past ?",
            "sql": "select count ( * ) from employees where employee_id in ( select employee_id from job_history )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"
    },
    "interaction": [
        {
            "utterance": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments .",
            "sql": "select first_name , last_name , department_id from employees where salary in ( select min ( salary ) from employees group by department_id )"
        },
        {
            "utterance": "Which of those has the highest salary ?",
            "sql": "select first_name , last_name , department_id from employees where salary in ( select max ( salary ) from employees group by department_id )"
        },
        {
            "utterance": "Of the people who earn the smallest salary in each department , who has the highest salary ? | do you mean the first name and last name and department id for the people ? | yes",
            "sql": "select first_name , last_name from employees order by salary desc limit value"
        },
        {
            "utterance": "Give me their salary and their manager 's salary | do you mean the salary and manager 's salary of all people ? | Give me the name and salary of the highest paid employee and their manager",
            "sql": "select first_name , last_name , salary , manager_id from employees order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 10,
    "final": {
        "utterance": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
    },
    "interaction": [
        {
            "utterance": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50 .",
            "sql": "select email from employees where commission_pct = value and salary between value and value and department_id = value"
        },
        {
            "utterance": "display the emails of the employees who have no commission percentage",
            "sql": "select email from employees where commission_pct = value"
        },
        {
            "utterance": "display the emails of the employees who have a commission percentage | Did you mean the employees who have commission percentage more than 0 ? | yes",
            "sql": "select email from employees where commission_pct > value"
        },
        {
            "utterance": "How many employees with salary above 12000 are there ?",
            "sql": "select count ( * ) from employees where salary > value"
        },
        {
            "utterance": "List their names please | Did you mean their FIRST NAME and LAST NAME ? | yes",
            "sql": "select first_name , last_name from employees where salary > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 11,
    "final": {
        "utterance": "display the department name and number of employees in each of the department.",
        "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"
    },
    "interaction": [
        {
            "utterance": "create a table with a column for department id and a column for department name",
            "sql": "select department_id , department_name from departments"
        },
        {
            "utterance": "Show the total number of employee ids for each department id",
            "sql": "select t1 . department_id , count ( * ) from departments as t1 join employees as t2 where t1 . department_id = t2 . department_id group by t1 . department_id"
        },
        {
            "utterance": "Add a column with department name",
            "sql": "select t1 . department_id , t1 . department_name , count ( * ) from departments as t1 join employees as t2 where t1 . department_id = t2 . department_id group by t1 . department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 12,
    "final": {
        "utterance": "when is the hire date for those employees whose first name does not containing the letter M?",
        "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    "interaction": [
        {
            "utterance": "How many employees first names contain the letter M ?",
            "sql": "select count ( * ) from employees where first_name like value"
        },
        {
            "utterance": "What are the names of those employees ? | Do you mean the first name and last name of those employees ? | Yes .",
            "sql": "select first_name , last_name from employees where first_name like value"
        },
        {
            "utterance": "How many employees first names do not contain the letter M ?",
            "sql": "select count ( * ) from employees where first_name not like value"
        },
        {
            "utterance": "What are their full names ?",
            "sql": "select first_name , last_name from employees where first_name not like value"
        },
        {
            "utterance": "When were they hired ?",
            "sql": "select hire_date from employees where first_name not like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
    },
    "interaction": [
        {
            "utterance": "Which department IDs have manager ids that are from 0-100 ?",
            "sql": "select department_id from departments where manager_id > = value and manager_id < = value"
        },
        {
            "utterance": "What about from 100 - 200 ?",
            "sql": "select department_id from departments where manager_id > = value and manager_id < = value"
        },
        {
            "utterance": "What are the employee ids who work in those departments ?",
            "sql": "select employee_id from employees where department_id in ( select department_id from departments where manager_id between value and value )"
        },
        {
            "utterance": "What about employees who do n't work with employees in those departments ?",
            "sql": "select * from employees where department_id not in ( select department_id from departments where manager_id between value and value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 14,
    "final": {
        "utterance": "display job title and average salary of employees.",
        "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"
    },
    "interaction": [
        {
            "utterance": "Which employee is the highest paid ?",
            "sql": "select * from employees order by salary desc limit value"
        },
        {
            "utterance": "Which is the employee with the lowest pay ?",
            "sql": "select * from employees order by salary limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
    },
    "interaction": [
        {
            "utterance": "Could you please display the first and last names of all employees whose first names end in the letter `` m '' ?",
            "sql": "select first_name , last_name from employees where first_name like value"
        },
        {
            "utterance": "What are their hire dates ?",
            "sql": "select first_name , hire_date from employees where first_name like value"
        },
        {
            "utterance": "What commission pct do they get ?",
            "sql": "select commission_pct from employees where first_name like value"
        },
        {
            "utterance": "What is the name of the person who gets the highest pct commission ?",
            "sql": "select first_name , last_name from employees order by commission_pct desc limit value"
        },
        {
            "utterance": "What is the hire date of the person who gets the lowest pct commission ?",
            "sql": "select hire_date from employees order by commission_pct asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 16,
    "final": {
        "utterance": "display the department id and the total salary for those departments which contains at least two employees.",
        "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "display the department id and the total salary for those departments which contains at least two employees .",
            "sql": "select department_id , sum ( salary ) from employees group by department_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the first and last names of employees in department id 90 ?",
            "sql": "select first_name , last_name from employees where department_id = value"
        },
        {
            "utterance": "What department id is Steven King in ?",
            "sql": "select department_id from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "What is Steven King 's Salary and Job id ?",
            "sql": "select job_id , salary from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "What is the highest salary and what employee id has it ?",
            "sql": "select employee_id , salary from employees order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 17,
    "final": {
        "utterance": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"
    },
    "interaction": [
        {
            "utterance": "HoW MANY employees have the letter z in their first name ?",
            "sql": "select count ( * ) from employees where first_name like value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select first_name from employees where first_name like value"
        },
        {
            "utterance": "What about their last names ?",
            "sql": "select first_name , last_name from employees where first_name like value"
        },
        {
            "utterance": "Can you also show their cities ?",
            "sql": "select t1 . first_name , t1 . last_name , t3 . city from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id join locations as t3 on t2 . location_id = t3 . location_id where t1 . first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 18,
    "final": {
        "utterance": "display the first and last name, department, city, and state province for each employee.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id"
    },
    "interaction": [
        {
            "utterance": "Could you please display the first name and last name of each employee ?",
            "sql": "select first_name , last_name from employees"
        },
        {
            "utterance": "Could you add in their departments please ?",
            "sql": "select t1 . first_name , t1 . last_name , t2 . department_name from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id"
        },
        {
            "utterance": "Could you also list their cities and state provinces ?",
            "sql": "select t1 . first_name , t1 . last_name , t2 . department_name , t3 . city , t3 . state_province from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id join locations as t3 on t2 . location_id = t3 . location_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 19,
    "final": {
        "utterance": "display those departments where more than ten employees work who got a commission percentage.",
        "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10"
    },
    "interaction": [
        {
            "utterance": "hi ! how many employees are there that get a commission percentage ?",
            "sql": "select count ( distinct employee_id ) from employees where commission_pct > value"
        },
        {
            "utterance": "How many departments have more than ten employees who got a commission ?",
            "sql": "select count ( * ) from ( select department_id from employees group by department_id having count ( commission_pct ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 20,
    "final": {
        "utterance": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )"
    },
    "interaction": [
        {
            "utterance": "Could you tell me how many employees have the job title PU_MAN ?",
            "sql": "select count ( * ) from employees where job_id = value"
        },
        {
            "utterance": "What is the salary of that employee ?",
            "sql": "select salary from employees where job_id = value"
        },
        {
            "utterance": "How many employees have a higher salary than that ?",
            "sql": "select count ( * ) from employees where salary > ( select salary from employees where job_id = value )"
        },
        {
            "utterance": "Tell me their employee numbers , first and last names , and job titles , please .",
            "sql": "select employee_id , first_name , last_name , job_id from employees where salary > ( select max ( salary ) from employees where job_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 21,
    "final": {
        "utterance": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    "interaction": [
        {
            "utterance": "show me the first and last names of employees whose first name does not contain letter M",
            "sql": "select first_name , last_name from employees where first_name not like value"
        },
        {
            "utterance": "show me the full name , hire date , salary and department number of these employees",
            "sql": "select first_name , last_name , hire_date , salary , department_id from employees where first_name not like value"
        },
        {
            "utterance": "Set this result in ascending order of department number",
            "sql": "select first_name , last_name , hire_date , salary , department_id from employees where first_name not like value order by department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 22,
    "final": {
        "utterance": "display job title and average salary of employees.",
        "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"
    },
    "interaction": [
        {
            "utterance": "hi , what is the president min salary ?",
            "sql": "select min_salary from jobs where job_title = value"
        },
        {
            "utterance": "what is the president max salary ?",
            "sql": "select max_salary from jobs where job_title = value"
        },
        {
            "utterance": "what is name of employee id 100 ? | Did you mean the first name or last name of employee id 100 ? | first",
            "sql": "select first_name from employees where employee_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the first and last name for those employees who works either in department 70 or 90?",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    "interaction": [
        {
            "utterance": "Hi what are the first and last name for those employees who works either in department 70 or 90 ?",
            "sql": "select first_name , last_name from employees where department_id = value or department_id = value"
        },
        {
            "utterance": "What is steven king 's phone number",
            "sql": "select phone_number from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "What is Steven King Employee ID number",
            "sql": "select employee_id from employees where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 24,
    "final": {
        "utterance": "display the department id and the total salary for those departments which contains at least two employees.",
        "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( * ) from employees"
        },
        {
            "utterance": "what is the salary of the employee id 101",
            "sql": "select salary from employees where employee_id = value"
        },
        {
            "utterance": "what is the phone number of 102",
            "sql": "select phone_number from employees where employee_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 25,
    "final": {
        "utterance": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
    },
    "interaction": [
        {
            "utterance": "Everything , please . I can see it in the table there . It 's correct . Can you order it by salary in descending order ? | Do you mean the employees who have the letters D or S in their first names ? | In their first name , yes . Sorry . I misunderstood .",
            "sql": "select * from employees where first_name like value or first_name like value"
        },
        {
            "utterance": "Can you organize the list by salary in descending order ?",
            "sql": "select * from employees where first_name like value or first_name like value order by salary desc"
        },
        {
            "utterance": "Can you list the first and last names of employees who were hired after 1987 ?",
            "sql": "select first_name , last_name from employees where hire_date > value"
        },
        {
            "utterance": "What are their salaries ? Please order the table in ascending order by salary ,",
            "sql": "select salary from employees where hire_date > value order by salary"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the first and last name for those employees who works either in department 70 or 90?",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    "interaction": [
        {
            "utterance": "What are the first and last name for those employees who works either in department 70 or 90 ?",
            "sql": "select first_name , last_name from employees where department_id = value or department_id = value"
        },
        {
            "utterance": "Please show me the list of the department",
            "sql": "select distinct department_id from employees"
        },
        {
            "utterance": "Who make the highest salary on the department ?",
            "sql": "select first_name , last_name from employees order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 27,
    "final": {
        "utterance": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    "interaction": [
        {
            "utterance": "What are the employees whose first name does not containing the letter M ?",
            "sql": "select first_name from employees where first_name not like value"
        },
        {
            "utterance": "Display the full name , hire date , salaer , and department member of the above results .",
            "sql": "select first_name , last_name , hire_date , salary , department_id from employees where first_name not like value"
        },
        {
            "utterance": "Sort the results in ascending order by department . number .",
            "sql": "select first_name , last_name , hire_date , salary , department_id from employees where first_name not like value order by department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 28,
    "final": {
        "utterance": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many total employees are on this list ?",
            "sql": "select count ( distinct employee_id ) from employees"
        },
        {
            "utterance": "Very good ! Can display a list of all of the employees first names which contain a letter Z in their first name ? | which colums to return ? | Oh thanks ! You went ahead and added the last name and city ! Could you also add to this list which country each of these people live in ?",
            "sql": "select t1 . first_name , t1 . last_name , t3 . city , t3 . country_id from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id join locations as t3 on t2 . location_id = t3 . location_id where t1 . first_name like value"
        },
        {
            "utterance": "Thanks ! That City and Country ID for Elizabeth is unusual ... Can you please show her street address and state province ?",
            "sql": "select t1 . first_name , t1 . last_name , t3 . city , t3 . country_id , t3 . street_address , t3 . state_province from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id join locations as t3 on t2 . location_id = t3 . location_id where t1 . first_name like value and t1 . first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 29,
    "final": {
        "utterance": "display the employee id and salary of all employees who report to Payam (first name).",
        "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )"
    },
    "interaction": [
        {
            "utterance": "Display the employee ID and salary of all employees who report to payam ( First name )",
            "sql": "select employee_id , salary from employees where manager_id = ( select employee_id from employees where first_name = value )"
        },
        {
            "utterance": "What is the highest salary ? who did earn it",
            "sql": "select * from employees order by salary desc limit value"
        },
        {
            "utterance": "What is the lowest salary ? who did earn it",
            "sql": "select * from employees order by salary limit value"
        },
        {
            "utterance": "What is the name of the following phone number 515.123.4569 ? Tell me Employer ID",
            "sql": "select employee_id , first_name , last_name from employees where phone_number = value"
        },
        {
            "utterance": "Who is the senior employee and tell me first name ? Tell me the hire date | What do you mean by senior employee ? | What is the lowest hire date ? tell me the first name .",
            "sql": "select first_name , hire_date from employees order by hire_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 30,
    "final": {
        "utterance": "display the department name and number of employees in each of the department.",
        "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"
    },
    "interaction": [
        {
            "utterance": "hi . show me the names of all of the departments",
            "sql": "select department_name from departments"
        },
        {
            "utterance": "can you please display only the department names with the number of employees in each one ?",
            "sql": "select department_name , count ( * ) from employees as t1 join departments as t2 on t1 . department_id = t2 . department_id group by department_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 31,
    "final": {
        "utterance": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.",
        "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )"
    },
    "interaction": [
        {
            "utterance": "Display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN",
            "sql": "select employee_id , job_id from employees where salary < ( select min ( salary ) from employees where job_id = value )"
        },
        {
            "utterance": "Show me salaries for those employees",
            "sql": "select salary from employees where salary < ( select min ( salary ) from employees where job_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "Which customers have ordered `` food '' ? | ok , did you want to just return their names ? | Yes . I just want to know the names of which customers have placed orders under the category `` food ''",
            "sql": "select t1 . customer_name from customers as t1 join orders as t2 join order_items as t3 join products as t4 on t1 . customer_id = t2 . customer_id and t2 . order_id = t3 . order_id and t3 . product_id = t4 . product_id where t4 . product_name = value"
        },
        {
            "utterance": "Of the names listed in the table , which of them have an item status listed as `` cancel '' ?",
            "sql": "select t1 . customer_name from customers as t1 join orders as t2 join order_items as t3 join products as t4 on t1 . customer_id = t2 . customer_id and t2 . order_id = t3 . order_id and t3 . product_id = t4 . product_id where t3 . order_item_status = value and t4 . product_name = value group by t1 . customer_id having count ( * ) > = value"
        },
        {
            "utterance": "How many customers have cancelled orders ? | Do you mean the customers in the previous result ? | yes",
            "sql": "select count ( t1 . customer_name ) from customers as t1 join orders as t2 join order_items as t3 join products as t4 on t1 . customer_id = t2 . customer_id and t2 . order_id = t3 . order_id and t3 . product_id = t4 . product_id where t3 . order_item_status = value and t4 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the customer who has the largest number of orders?",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many orders are there ?",
            "sql": "select count ( * ) from orders"
        },
        {
            "utterance": "How many different customers are there ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "What is the name of the customer who has the largest number of orders ?",
            "sql": "select t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 2,
    "final": {
        "utterance": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
    },
    "interaction": [
        {
            "utterance": "Can you tell me which customers placed orders between 2009-01-01 and 2010-0101 ? | do you want the id or the name of the customer ? | The names",
            "sql": "select t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . date_order_placed > = value and t2 . date_order_placed < = value"
        },
        {
            "utterance": "How many customers placed orders before George ?",
            "sql": "select count ( t1 . customer_name ) from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . date_order_placed < ( select t2 . date_order_placed from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value order by t2 . date_order_placed limit value )"
        },
        {
            "utterance": "What is the status of George 's order ?",
            "sql": "select t2 . order_status from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name of the customer who has the most orders?",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which customers placed an order",
            "sql": "select * from customers where customer_id in ( select customer_id from orders )"
        },
        {
            "utterance": "who has the most orders ? | Do you want just the customer name ? | yes",
            "sql": "select t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""
    },
    "interaction": [
        {
            "utterance": "Yes , from that list can I have it sorted by order ID ? | Did you mean in the Order table order by order id ? desc or asc ? | My apologies , I meant can I have list of orders which includes the product ids from the orders placed ?",
            "sql": "select t1 . order_id , t2 . product_id from orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id"
        },
        {
            "utterance": "Yes , can I narrow the table based on the date order was placed ? | Did you mean you just want only date order placed ? | No . Is it possible to only receive results from orders placed from 1975-01-01 to 1976-01-01 ?",
            "sql": "select t1 . order_id , t2 . product_id , t1 . date_order_placed from orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id where t1 . date_order_placed > = value and t1 . date_order_placed < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the id of the order which is shipped most recently.",
        "sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)"
    },
    "interaction": [
        {
            "utterance": "Can I have the dates for all the shipments ?",
            "sql": "select shipment_date from shipments"
        },
        {
            "utterance": "Which of these dates occurred most recently ?",
            "sql": "select shipment_date from shipments order by shipment_date desc limit value"
        },
        {
            "utterance": "What is the shipment id for the shipment with this shipment date ?",
            "sql": "select shipment_id from shipments where shipment_date = ( select max ( shipment_date ) from shipments )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the customers who have at most two orders.",
        "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "How many customers have two orders or less",
            "sql": "select count ( * ) from ( select t2 . customer_name from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_id having count ( * ) < = value )"
        },
        {
            "utterance": "How many total customer are there ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "Of the customers with two orders or less , what are their names ?",
            "sql": "select t2 . customer_name from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
    },
    "interaction": [
        {
            "utterance": "Can you show me the invoice numbers which are created before 1989-09-03 ?",
            "sql": "select invoice_number from invoices where invoice_date < value"
        },
        {
            "utterance": "What about the invoice numbers which are created after 2007-12-25 ?",
            "sql": "select invoice_number from invoices where invoice_date > value"
        },
        {
            "utterance": "Hmm , can you list the invoice numbers which are created before 1989-09-03 or after 2007-12-25 ?",
            "sql": "select invoice_number from invoices where invoice_date < value or invoice_date > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the customer id of the customer who has the most orders?",
        "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many total orders do we have ?",
            "sql": "select count ( * ) from orders"
        },
        {
            "utterance": "What is the total number of customers ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "What are their customer id 's ?",
            "sql": "select customer_id from customers"
        },
        {
            "utterance": "What was the amount of orders for the customer that had that most orders ?",
            "sql": "select count ( * ) from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which customer had 3 orders ?",
            "sql": "select * from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) = value"
        },
        {
            "utterance": "What is the customer id for George ?",
            "sql": "select customer_id from customers where customer_name = value"
        },
        {
            "utterance": "And for Jeramie ?",
            "sql": "select customer_id from customers where customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the id of the most recent order?",
        "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the order status of the most recent order ?",
            "sql": "select order_status from orders order by date_order_placed desc limit value"
        },
        {
            "utterance": "Can you just list the id of the most recent order ?",
            "sql": "select order_id from orders order by date_order_placed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of the customers who have at most two orders.",
        "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "what is the customer name of customer id 1",
            "sql": "select customer_name from customers where customer_id = value"
        },
        {
            "utterance": "what is the customer name of customer id 2",
            "sql": "select customer_name from customers where customer_id = value"
        },
        {
            "utterance": "what is the customer name of customer id 3",
            "sql": "select customer_name from customers where customer_id = value"
        },
        {
            "utterance": "find the name of the customers who have at most two orders",
            "sql": "select t2 . customer_name from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    "interaction": [
        {
            "utterance": "Hello ! How many customers have an order status of `` On Road '' ?",
            "sql": "select count ( * ) from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value"
        },
        {
            "utterance": "Great ! Of those 8 customers , how many also have the status of `` Shipped '' ?",
            "sql": "select count ( * ) from ( select t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value intersect select t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value )"
        },
        {
            "utterance": "Can you please list the name of that 1 customer please ?",
            "sql": "select t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value intersect select t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""
    },
    "interaction": [
        {
            "utterance": "Find the customer id of Savannah ?",
            "sql": "select customer_id from customers where customer_name = value"
        },
        {
            "utterance": "Which date of order placed in Alberto ?",
            "sql": "select t2 . date_order_placed from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        },
        {
            "utterance": "What are the customer details of order id 2 ?",
            "sql": "select customer_details from customers where customer_id = value"
        },
        {
            "utterance": "Find the details of all distinct customers who have orders with status `` On Road '' .",
            "sql": "select distinct t1 . customer_details from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 13,
    "final": {
        "utterance": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "How many orders each customer have ?",
            "sql": "select customer_id , count ( * ) from orders group by customer_id"
        },
        {
            "utterance": "Can you provide me with the list of id and status of orders of the customer named `` Jeramie '' ?",
            "sql": "select t2 . order_id , t2 . order_status from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 14,
    "final": {
        "utterance": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
    },
    "interaction": [
        {
            "utterance": "When was the order with the tracking number 3452 placed ? | Did you want the order id of the order with shipment tracking number 3452 ? | Okay , tell me the order ID of that tracking number .",
            "sql": "select t1 . order_id from orders as t1 join shipments as t2 on t1 . order_id = t2 . order_id where t2 . shipment_tracking_number = value"
        },
        {
            "utterance": "Thank you , what is the shipment date of order id 5 ?",
            "sql": "select shipment_date from shipments where order_id = value"
        },
        {
            "utterance": "What was the date when order id 5 was placed ?",
            "sql": "select date_order_placed from orders where order_id = value"
        },
        {
            "utterance": "How about the order with invoice number 13 , when was that order placed ?",
            "sql": "select t1 . date_order_placed from orders as t1 join shipments as t2 on t1 . order_id = t2 . order_id where t2 . invoice_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 15,
    "final": {
        "utterance": "List the names of the customers who have once bought product \"food\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "What is the product ID for food ?",
            "sql": "select product_id from products where product_name = value"
        },
        {
            "utterance": "What are the order IDs that have those product IDs ?",
            "sql": "select t2 . order_id from products as t1 join order_items as t2 where t1 . product_id = t2 . product_id and t1 . product_name = value"
        },
        {
            "utterance": "What customer IDs have those order IDs ?",
            "sql": "select t3 . customer_id from products as t1 join order_items as t2 join orders as t3 where t1 . product_id = t2 . product_id and t1 . product_name = value and t3 . order_id = t2 . order_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the placement date of the order whose invoice number is 10?",
        "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
    },
    "interaction": [
        {
            "utterance": "show a list of the invoice numbers",
            "sql": "select invoice_number from shipments"
        },
        {
            "utterance": "add a column for order id",
            "sql": "select invoice_number , order_id from shipments"
        },
        {
            "utterance": "show the date order placed for order id 9",
            "sql": "select date_order_placed from orders where order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 17,
    "final": {
        "utterance": "List the names of the customers who have once bought product \"food\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "list out the customers name",
            "sql": "select customer_name from customers"
        },
        {
            "utterance": "show all the customer details",
            "sql": "select customer_details from customers"
        },
        {
            "utterance": "what is the order status of George",
            "sql": "select t2 . order_status from customers as t1 join orders as t2 join order_items as t3 join products as t4 on t1 . customer_id = t2 . customer_id and t2 . order_id = t3 . order_id and t3 . product_id = t4 . product_id where t1 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 18,
    "final": {
        "utterance": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
    },
    "interaction": [
        {
            "utterance": "List the name of all the distinct customers who have ordered with status `` packing ''",
            "sql": "select distinct t1 . customer_name from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value"
        },
        {
            "utterance": "may i have the dates of their orders please ?",
            "sql": "select distinct t2 . date_order_placed from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value"
        },
        {
            "utterance": "may i have the order ids please",
            "sql": "select order_id from orders where order_status = value"
        },
        {
            "utterance": "may i have the customer ids please",
            "sql": "select customer_id from orders where order_status = value"
        },
        {
            "utterance": "may i have the order ids please ? | Did you mean their order ids ? | yes",
            "sql": "select order_id from orders where order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 19,
    "final": {
        "utterance": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which customers made at least two orders ?",
            "sql": "select * , count ( * ) from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_id having count ( * ) > = value"
        },
        {
            "utterance": "How many orders did George make ?",
            "sql": "select count ( * ) from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_name = value"
        },
        {
            "utterance": "How many did Beulah make ?",
            "sql": "select count ( * ) from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 20,
    "final": {
        "utterance": "List the name and count of each product in all orders.",
        "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
    },
    "interaction": [
        {
            "utterance": "how many products there",
            "sql": "select count ( * ) from products"
        },
        {
            "utterance": "how many orders there",
            "sql": "select count ( * ) from orders"
        },
        {
            "utterance": "what is the name of product id 1",
            "sql": "select product_name from products where product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the id of the order which has the most items?",
        "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many orders there",
            "sql": "select count ( * ) from orders"
        },
        {
            "utterance": "what is the date order placed of order id 2",
            "sql": "select date_order_placed from orders where order_id = value"
        },
        {
            "utterance": "how many order Items there",
            "sql": "select count ( * ) from order_items"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 22,
    "final": {
        "utterance": "what are the order id and customer id of the oldest order?",
        "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the ID of the oldest customer ?",
            "sql": "select customer_id from orders order by date_order_placed limit value"
        },
        {
            "utterance": "what about the newest customer ?",
            "sql": "select customer_id from orders order by date_order_placed desc limit value"
        },
        {
            "utterance": "What is the order status of the order for customer with ID 11",
            "sql": "select order_status from orders where customer_id = value"
        },
        {
            "utterance": "What date did customer with ID 11 place an order ?",
            "sql": "select date_order_placed from orders where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the average prices of all products from each manufacture, and list each company's name.",
        "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( price ) from products"
        },
        {
            "utterance": "And what is the average price for each company ?",
            "sql": "select avg ( price ) , manufacturer from products group by manufacturer"
        },
        {
            "utterance": "What are all companies names ?",
            "sql": "select name from manufacturers"
        },
        {
            "utterance": "And what are their headquarters ?",
            "sql": "select name , headquarter from manufacturers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the founder of the company whose name begins with the letter 'S'.",
        "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "How many companies are there ?",
            "sql": "select count ( * ) from manufacturers"
        },
        {
            "utterance": "What are their founder names ?",
            "sql": "select name from manufacturers"
        },
        {
            "utterance": "Show founder names that begin with letter `` S '' | Did you mean founder \u2018 s name that begin with letter 'S ' ? | yes",
            "sql": "select founder from manufacturers where founder like value"
        },
        {
            "utterance": "Ok , than show all companies headquarters",
            "sql": "select headquarter from manufacturers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the founder of the company whose name begins with the letter 'S'.",
        "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please provide me with the name of the founder for Sony ?",
            "sql": "select founder from manufacturers where name = value"
        },
        {
            "utterance": "Thanks ! What city is the headquarters of Sony located in ?",
            "sql": "select headquarter from manufacturers where name = value"
        },
        {
            "utterance": "What was Sony 's revenue ?",
            "sql": "select revenue from manufacturers where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "What are the names of all companies whose revenue is smaller than the revenue of all companies based in Austin ?",
            "sql": "select name from manufacturers where revenue < ( select min ( revenue ) from manufacturers where headquarter = value )"
        },
        {
            "utterance": "What are the companies ' revenues whose revenue is smaller than the revenue of all companies based in Austin ?",
            "sql": "select revenue from manufacturers where revenue < ( select min ( revenue ) from manufacturers where headquarter = value )"
        },
        {
            "utterance": "What is the numerical value of those two companies ' revenues ?",
            "sql": "select name , revenue from manufacturers where revenue < ( select min ( revenue ) from manufacturers where headquarter = value )"
        },
        {
            "utterance": "What are the names of all companies whose revenue is larger than the revenue of all companies based in Austin ?",
            "sql": "select name from manufacturers where revenue > ( select min ( revenue ) from manufacturers where headquarter = value )"
        },
        {
            "utterance": "What are the numerical values of their revenues , please ?",
            "sql": "select name , revenue from manufacturers where revenue > ( select min ( revenue ) from manufacturers where headquarter = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
    },
    "interaction": [
        {
            "utterance": "how many names or products in the table | Do you mean the names of products in the products table | how many headquarter in the Manufacturers table",
            "sql": "select count ( headquarter ) from manufacturers"
        },
        {
            "utterance": "how many revenue in the Manufacturers table | Do you mean the sum of revenue in the Manufacturers table | what highest price in the Products table",
            "sql": "select max ( price ) from products"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "Can you list all companies based in Austin and their revenues ?",
            "sql": "select name , revenue from manufacturers where headquarter = value"
        },
        {
            "utterance": "Can you list all companies whose revenue is less than 100 ?",
            "sql": "select name from manufacturers where revenue < value"
        },
        {
            "utterance": "Thanks ! What is the respective revenues of Hewlett-Packard and Winchester ?",
            "sql": "select name , revenue from manufacturers where revenue < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'"
    },
    "interaction": [
        {
            "utterance": "Who the founder of Sony ? | Did you mean the founder of the manufacturer named Sony ? | Yes",
            "sql": "select founder from manufacturers where name = value"
        },
        {
            "utterance": "Which company is headed by Austin city ? | Did you mean the name of manufacturers whose headquarters are Austin ? | Yes",
            "sql": "select name from manufacturers where headquarter = value"
        },
        {
            "utterance": "What are the revenue of manufacture name Hewlett-Packard ?",
            "sql": "select revenue from manufacturers where name = value"
        },
        {
            "utterance": "Find the number of manufactures that are based in Tokyo or Beijing .",
            "sql": "select count ( * ) from manufacturers where headquarter = value or headquarter = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the average, maximum and total revenues of all companies?",
        "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"
    },
    "interaction": [
        {
            "utterance": "what are the average revenues of all compaies ?",
            "sql": "select avg ( revenue ) from manufacturers"
        },
        {
            "utterance": "what are the maximum revenues of all companies ?",
            "sql": "select max ( revenue ) from manufacturers"
        },
        {
            "utterance": "what are the total revenues of all companies ?",
            "sql": "select sum ( revenue ) from manufacturers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "List names of each manufacturer ?",
            "sql": "select name from manufacturers"
        },
        {
            "utterance": "Name of each manufacturer 's product ?",
            "sql": "select t1 . name , t2 . name from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code"
        },
        {
            "utterance": "Price of each manufacturer 's product ?",
            "sql": "select t1 . price from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code"
        },
        {
            "utterance": "Which product is the most expensive ?",
            "sql": "select name from products order by price desc limit value"
        },
        {
            "utterance": "Name of each manufacturer along with the name and price of its most expensive product ?",
            "sql": "select t1 . name , max ( t1 . price ) , t2 . name from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code group by t2 . name"
        },
        {
            "utterance": "What of their least expensive product ?",
            "sql": "select t1 . name , min ( t1 . price ) , t2 . name from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code group by t2 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
    },
    "interaction": [
        {
            "utterance": "what is the average price among all products ?",
            "sql": "select avg ( price ) from products"
        },
        {
            "utterance": "which products have a price higher than or equal to $ 150 ?",
            "sql": "select * from products where price > = value"
        },
        {
            "utterance": "what are the names of the manufacturers of those products ?",
            "sql": "select t2 . name from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code where t1 . price > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
        "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of headquarters ?",
            "sql": "select headquarter from manufacturers"
        },
        {
            "utterance": "can you show me list of founders ?",
            "sql": "select founder from manufacturers"
        },
        {
            "utterance": "can you show me an average of revenue ?",
            "sql": "select avg ( revenue ) from manufacturers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
        "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the manufacturer that has the highest revenue ?",
            "sql": "select name from manufacturers order by revenue desc limit value"
        },
        {
            "utterance": "What is the name of the manufacturer that has the third lowest revenue ?",
            "sql": "select name from manufacturers order by revenue asc limit value , value"
        },
        {
            "utterance": "Who is the founder of Creative Labs ?",
            "sql": "select founder from manufacturers where name = value"
        },
        {
            "utterance": "What is the average revenue of all manufacturers ?",
            "sql": "select avg ( revenue ) from manufacturers"
        },
        {
            "utterance": "What is the name of the founder of the manufacturer that has the highest revenue ?",
            "sql": "select founder from manufacturers order by revenue desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"
    },
    "interaction": [
        {
            "utterance": "Yes . Can you please provide the name in alphabetical order ?",
            "sql": "select name from products where price > = value order by name asc"
        },
        {
            "utterance": "Thank you . Can you please provide the price of each of these items as well sorted by lowest price first ?",
            "sql": "select name , price from products where price > = value order by price asc"
        },
        {
            "utterance": "Can you please also provide the manufacturer on these products ?",
            "sql": "select name , price , manufacturer from products where price > = value order by price asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "What manufacturer has the highest revenue ?",
            "sql": "select name from manufacturers order by revenue desc limit value"
        },
        {
            "utterance": "Where is Iomega located ?",
            "sql": "select headquarter from manufacturers where name = value"
        },
        {
            "utterance": "What manufacturers on the list are located in Austin ?",
            "sql": "select name from manufacturers where headquarter = value"
        },
        {
            "utterance": "What is Creative labs revenue ?",
            "sql": "select revenue from manufacturers where name = value"
        },
        {
            "utterance": "How many companies have a revenue greater than 100.0 ?",
            "sql": "select count ( * ) from manufacturers where revenue > value"
        },
        {
            "utterance": "What is the total revue of those 3 companies ?",
            "sql": "select sum ( revenue ) from manufacturers where revenue > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find number of products which Sony does not make.",
        "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"
    },
    "interaction": [
        {
            "utterance": "What is the number of projects that Sony does n't manufacture ?",
            "sql": "select count ( distinct name ) from products where name not in ( select t1 . name from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code where t2 . name = value )"
        },
        {
            "utterance": "What is the number of products that Creative Labs does manufacture ?",
            "sql": "select count ( distinct name ) from products where name in ( select t1 . name from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code where t2 . name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Select the name and price of the cheapest product.",
        "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . How many products are there ?",
            "sql": "select count ( * ) from products"
        },
        {
            "utterance": "excellent . and how much is the cheapest priced product ?",
            "sql": "select min ( price ) from products"
        },
        {
            "utterance": "and can you tell me the name of that product ?",
            "sql": "select name from products where price = ( select min ( price ) from products )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Select the name and price of the cheapest product.",
        "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How much does the cheapest Hard drive go for ? | 240 is the price of the cheapest product whose name is Hard drive | and what of the cheapest memory ?",
            "sql": "select price from products where name = value order by price limit value"
        },
        {
            "utterance": "Who is the manufacturer of the zip drive ?",
            "sql": "select manufacturer from products where name = value"
        },
        {
            "utterance": "And who manufactures the Hard drive ?",
            "sql": "select manufacturer from products where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"
    },
    "interaction": [
        {
            "utterance": "where is the Headquarter of Sony ?",
            "sql": "select headquarter from manufacturers where name = value"
        },
        {
            "utterance": "how much is Creative Labs revenue ?",
            "sql": "select revenue from manufacturers where name = value"
        },
        {
            "utterance": "what is the name of the manufacturer whose headquarter is in Los Angeles ?",
            "sql": "select name from manufacturers where headquarter = value"
        },
        {
            "utterance": "which manufacturer has the least revenue ? | Did you mean to get the name of manufacturer has the least revenue | name the manufacturer with the least revenue",
            "sql": "select name from manufacturers order by revenue limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the number of different products that are produced by companies at different headquarter cities.",
        "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"
    },
    "interaction": [
        {
            "utterance": "Can you show the Name of the Products of Code 1 ?",
            "sql": "select name from products where code = value"
        },
        {
            "utterance": "Can you show the Price of the Product Code 1 ?",
            "sql": "select price from products where code = value"
        },
        {
            "utterance": "Can you show the number of different products that are produced by companies at different headquarter cities ?",
            "sql": "select count ( distinct t1 . name ) , t2 . headquarter from products as t1 join manufacturers as t2 on t1 . manufacturer = t2 . code group by t2 . headquarter"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 0,
    "final": {
        "utterance": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    "interaction": [
        {
            "utterance": "what are all games are presented on the table | What kind of infromation for the games do you want ? | i want to how many teams on the game",
            "sql": "select count ( distinct home_team ) from game"
        },
        {
            "utterance": "which player are played in highest number of matches",
            "sql": "select player from injury_accident order by number_of_matches desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 1,
    "final": {
        "utterance": "How many games has each stadium held?",
        "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there ?",
            "sql": "select count ( * ) from stadium"
        },
        {
            "utterance": "How many games has each stadium held ?",
            "sql": "select t1 . id , count ( * ) from stadium as t1 join game as t2 on t1 . id = t2 . stadium_id group by t1 . id"
        },
        {
            "utterance": "What is the total attendance of each stadium ?",
            "sql": "select t1 . id , sum ( total_attendance ) from stadium as t1 join game as t2 on t1 . id = t2 . stadium_id group by t1 . id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 2,
    "final": {
        "utterance": "How many games has each stadium held?",
        "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id"
    },
    "interaction": [
        {
            "utterance": "How many games has each stadium held ?",
            "sql": "select t1 . id , count ( * ) from stadium as t1 join game as t2 on t1 . id = t2 . stadium_id group by t1 . id"
        },
        {
            "utterance": "So how many total games were there ?",
            "sql": "select count ( * ) from game"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum, minimum and average home games each stadium held?",
        "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium"
    },
    "interaction": [
        {
            "utterance": "what is the average attendance of Cowboys Stadium ?",
            "sql": "select average_attendance from stadium where name = value"
        },
        {
            "utterance": "give the total attendance Cowboys Stadium",
            "sql": "select total_attendance from stadium where name = value"
        },
        {
            "utterance": "what is the capacity percentage of New Meadowlands Stadium",
            "sql": "select capacity_percentage from stadium where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 4,
    "final": {
        "utterance": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'"
    },
    "interaction": [
        {
            "utterance": "how many game are there",
            "sql": "select count ( * ) from game"
        },
        {
            "utterance": "What injury had maicon | Maicon had the injury Knee problem . | how may total attendance have fedexfield",
            "sql": "select total_attendance from stadium where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 5,
    "final": {
        "utterance": "Which stadium name contains the substring \"Bank\"?",
        "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""
    },
    "interaction": [
        {
            "utterance": "how many stadium are presented on the table",
            "sql": "select count ( * ) from stadium"
        },
        {
            "utterance": "list out the stadium names",
            "sql": "select name from stadium"
        },
        {
            "utterance": "what is the average attendance of Cowboys Stadium",
            "sql": "select average_attendance from stadium where name = value"
        },
        {
            "utterance": "what is the capacity percentage of FedExField",
            "sql": "select capacity_percentage from stadium where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 6,
    "final": {
        "utterance": "How many games are free of injury accidents?",
        "sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"
    },
    "interaction": [
        {
            "utterance": "Hi ! May i ask how many total games were played ?",
            "sql": "select count ( * ) from game"
        },
        {
            "utterance": "Okay . How many games were without injuries ?",
            "sql": "select count ( * ) from game where id not in ( select game_id from injury_accident )"
        },
        {
            "utterance": "How many were with injuries ?",
            "sql": "select count ( * ) from game where id in ( select game_id from injury_accident )"
        },
        {
            "utterance": "Okay that 's fine . Do you know the stadium ID for games without injuries ?",
            "sql": "select stadium_id from game where id not in ( select game_id from injury_accident )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the ids , scores , and dates of the games which caused at most two injury accidents ?",
            "sql": "select t1 . id , t1 . score , t1 . date from game as t1 join injury_accident as t2 on t2 . game_id = t1 . id group by t1 . id having count ( * ) < = value"
        },
        {
            "utterance": "How many competitions in this table ? | Did you mean the number of different competitions ? | Yes .",
            "sql": "select count ( distinct competition ) from game"
        },
        {
            "utterance": "How many number of different home teams ?",
            "sql": "select count ( distinct home_team ) from game"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 8,
    "final": {
        "utterance": "How many distinct kinds of injuries happened after season 2010?",
        "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010"
    },
    "interaction": [
        {
            "utterance": "After season 2010 how many different kinds of injuries were there ?",
            "sql": "select count ( distinct t1 . injury ) from injury_accident as t1 join game as t2 on t1 . game_id = t2 . id where t2 . season > value"
        },
        {
            "utterance": "What player received the injury ? | You mean all the players having injuries ? | What player received the Hamstring muscle strain in his left thigh ?",
            "sql": "select player from injury_accident where injury = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 9,
    "final": {
        "utterance": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    "interaction": [
        {
            "utterance": "How many injury accidents are there in total ?",
            "sql": "select count ( * ) from injury_accident"
        },
        {
            "utterance": "Can you list them with the date of the game and the name of the player who got injured ?",
            "sql": "select t1 . date , t2 . player from game as t1 join injury_accident as t2 on t1 . id = t2 . game_id"
        },
        {
            "utterance": "Can you please also sort thw result by decending order of game seasons ?",
            "sql": "select t1 . date , t2 . player from game as t1 join injury_accident as t2 on t1 . id = t2 . game_id order by t1 . season desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"
    },
    "interaction": [
        {
            "utterance": "What game id did the player Walter Samuel get injured during , please ?",
            "sql": "select game_id from injury_accident where player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 0,
    "final": {
        "utterance": "Find names of the document without any images.",
        "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id"
    },
    "interaction": [
        {
            "utterance": "Can you give me a list of documents that do n't have any images ? | Do you want document code ? | I 'd like both the document code and document name , please .",
            "sql": "select document_name , document_code from documents except select t1 . document_name , t1 . document_code from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code join document_sections_images as t3 on t2 . section_id = t3 . section_id"
        },
        {
            "utterance": "That 's great . Can you tell me the total number of documents that do have images ?",
            "sql": "select count ( * ) from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code join document_sections_images as t3 on t2 . section_id = t3 . section_id"
        },
        {
            "utterance": "What types of documents are these ?",
            "sql": "select document_type_code from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code join document_sections_images as t3 on t2 . section_id = t3 . section_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the Document code for document type code Book ?",
            "sql": "select document_code from documents where document_type_code = value"
        },
        {
            "utterance": "Show the name of the document that has been accessed the greatest number of times ?",
            "sql": "select document_name from documents order by access_count desc limit value"
        },
        {
            "utterance": "Show the name of the documents and the count of how many times each has been accessed ?",
            "sql": "select document_name , access_count from documents order by access_count desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 2,
    "final": {
        "utterance": "Find names of the document without any images.",
        "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many documents are there total ?",
            "sql": "select count ( document_name ) from documents"
        },
        {
            "utterance": "Perfect , thanks for that . Now , how many documents do n't have images ?",
            "sql": "select count ( * ) from ( select document_name from documents except select t1 . document_name from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code join document_sections_images as t3 on t2 . section_id = t3 . section_id )"
        },
        {
            "utterance": "Can you give me the names of those documents ?",
            "sql": "select document_name from documents except select t1 . document_name from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code join document_sections_images as t3 on t2 . section_id = t3 . section_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the types of documents with more than 4 documents.",
        "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4"
    },
    "interaction": [
        {
            "utterance": "can you please list the document types with the count of document structure code ?",
            "sql": "select count ( document_structure_code ) , document_type_code from documents group by document_type_code"
        },
        {
            "utterance": "can you filter out the results where count less than 4 and only show more than 4",
            "sql": "select count ( document_structure_code ) , document_type_code from documents group by document_type_code having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 4,
    "final": {
        "utterance": "What document types have more than 2 corresponding documents?",
        "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What documents types have more than 2 corresponding documents ?",
            "sql": "select document_type_code from documents group by document_type_code having count ( * ) > value"
        },
        {
            "utterance": "What is the document type for document name Learning English ?",
            "sql": "select document_type_code from documents where document_name = value"
        },
        {
            "utterance": "What documents types have more than 2 corresponding documents ?",
            "sql": "select document_type_code from documents group by document_type_code having count ( * ) > value"
        },
        {
            "utterance": "List all the document name ?",
            "sql": "select document_name from documents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 5,
    "final": {
        "utterance": "List all the username and passwords of users with the most popular role.",
        "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi , can you list me the user name and the password of the most popular role user ?",
            "sql": "select user_name , password from users group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "great , how many popular role users are ?",
            "sql": "select count ( * ) from users group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you list me all the username of users with the most popular role ?",
            "sql": "select user_name from users group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Ok , show me the username of an unpopular user .",
            "sql": "select user_name from users where user_name not in ( select user_name from users group by role_code order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me how many documents there are in total ?",
            "sql": "select count ( * ) from documents"
        },
        {
            "utterance": "What 's the name of the document that was accessed the least amount of times ?",
            "sql": "select document_name from documents order by access_count asc limit value"
        },
        {
            "utterance": "How about the name of the document that was accessed the most amount of times ?",
            "sql": "select document_name from documents order by access_count desc limit value"
        },
        {
            "utterance": "How many times has that document been accessed ?",
            "sql": "select access_count from documents order by access_count desc limit value"
        },
        {
            "utterance": "What type of document is that ?",
            "sql": "select document_type_code from documents order by access_count desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the total access count of all documents in the most popular document type.",
        "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the total access count of all documents in the most popular document type .",
            "sql": "select sum ( access_count ) from documents group by document_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show me the access count for books ?",
            "sql": "select access_count from documents where document_type_code = value"
        },
        {
            "utterance": "How about in paper ?",
            "sql": "select access_count from documents where document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the document with the most number of sections?",
        "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many Document Sections on the table ?",
            "sql": "select count ( * ) from document_sections"
        },
        {
            "utterance": "what are highest access count on the table ?",
            "sql": "select access_count from documents order by access_count desc limit value"
        },
        {
            "utterance": "how many type of section title on the table ?",
            "sql": "select count ( distinct section_title ) from document_sections"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 9,
    "final": {
        "utterance": "What are all the section titles of the document named \"David CV\"?",
        "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\""
    },
    "interaction": [
        {
            "utterance": "How many section titles are there for the document `` David CV '' ?",
            "sql": "select count ( t2 . section_title ) from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code where t1 . document_name = value"
        },
        {
            "utterance": "Please list the section titles for the document `` David CV ''",
            "sql": "select t2 . section_title from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code where t1 . document_name = value"
        },
        {
            "utterance": "what is the section code for the section title `` after '' for the document `` David CV '' ?",
            "sql": "select t2 . section_code from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code where t1 . document_name = value and t2 . section_title = value"
        },
        {
            "utterance": "what is the document code for the section title `` after '' for the document `` David CV '' ?",
            "sql": "select t2 . document_code from documents as t1 join document_sections as t2 on t1 . document_code = t2 . document_code where t1 . document_name = value and t2 . section_title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 10,
    "final": {
        "utterance": "List all the username and passwords of users with the most popular role.",
        "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which users have the most popular role ? | Do you mean the user name of the users who have the most popular role ? | Yes , can you list all the usernames and passwords of the users who have the most popular role ?",
            "sql": "select user_name , password from users group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you also tell me the role code ?",
            "sql": "select role_code from users group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many times has this user logged in ?",
            "sql": "select user_login from users group by role_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the average access count of documents with the least popular structure.",
        "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all of the different document names and the associated access count for each of them ?",
            "sql": "select document_name , access_count from documents"
        },
        {
            "utterance": "Wonderful ! Can you show me the associated structure code for each of those document names ?",
            "sql": "select document_structure_code from documents"
        },
        {
            "utterance": "Can you filter that list to show the document name and document structure code with the fewest document structure code entries , or in other words , the least popular structure ?",
            "sql": "select document_name , document_structure_code from documents where document_structure_code = ( select min ( document_structure_code ) from documents )"
        },
        {
            "utterance": "Very nice ! Finally , could you update this list to show the average access count for these two documents ?",
            "sql": "select avg ( access_count ) from documents where document_structure_code = ( select min ( document_structure_code ) from documents ) group by document_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 12,
    "final": {
        "utterance": "List all the document names which contains \"CV\".",
        "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""
    },
    "interaction": [
        {
            "utterance": "Show me the documents | did you mean all the info of the documents ? | no , the name of the documents",
            "sql": "select document_name from documents"
        },
        {
            "utterance": "Show me the names containing cv",
            "sql": "select document_name from documents where document_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the lowest and highest rating star?",
        "sql": "SELECT max(stars) ,  min(stars) FROM Rating"
    },
    "interaction": [
        {
            "utterance": "What is the lowest and highest rating star ?",
            "sql": "select max ( stars ) , min ( stars ) from rating"
        },
        {
            "utterance": "What is the movie id and rating date of the movie with 5 stars ?",
            "sql": "select mid , ratingdate from rating where stars = value"
        },
        {
            "utterance": "Now show me the movie id and rating dates of the movie with 2 stars ?",
            "sql": "select mid , ratingdate from rating where stars = value"
        },
        {
            "utterance": "What is the earliest rating date ?",
            "sql": "select ratingdate from rating where ratingdate ! = value order by ratingdate limit value"
        },
        {
            "utterance": "What is the most recent rating date ?",
            "sql": "select ratingdate from rating order by ratingdate desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 1,
    "final": {
        "utterance": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    "interaction": [
        {
            "utterance": "Hello , how many ratings have the same reviewer and director name ?",
            "sql": "select count ( * ) from rating as t1 join movie as t2 on t1 . mid = t2 . mid join reviewer as t3 on t1 . rid = t3 . rid where t2 . director = t3 . name"
        },
        {
            "utterance": "What is the reviewer name associated with that rating ?",
            "sql": "select distinct t3 . name from rating as t1 join movie as t2 on t1 . mid = t2 . mid join reviewer as t3 on t1 . rid = t3 . rid where t2 . director = t3 . name"
        },
        {
            "utterance": "What about the number of stars it received ?",
            "sql": "select distinct t1 . stars from rating as t1 join movie as t2 on t1 . mid = t2 . mid join reviewer as t3 on t1 . rid = t3 . rid where t2 . director = t3 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name of the most recent movie?",
        "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "list the names of all movies",
            "sql": "select title from movie"
        },
        {
            "utterance": "list the year each movie was released",
            "sql": "select title , year from movie"
        },
        {
            "utterance": "list the titles of all movies",
            "sql": "select title from movie"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the movie titles and average rating of the movies with the lowest average rating ?",
            "sql": "select t2 . title , avg ( t1 . stars ) from rating as t1 join movie as t2 on t1 . mid = t2 . mid group by t1 . mid order by avg ( t1 . stars ) limit value"
        },
        {
            "utterance": "What year did the sound of music come out and who was the director ? | Do you mean the year of the movie whose title is The Sound of Music came out and the director of it ? | yes",
            "sql": "select year , director from movie where title = value"
        },
        {
            "utterance": "What movie title has the highest rating ? | Do you mean the title of the movie with the highest stars ? | Yes",
            "sql": "select t2 . title from rating as t1 join movie as t2 on t1 . mid = t2 . mid group by t1 . mid order by t1 . stars desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the movie that is rated by most of times?",
        "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the highest rating star ?",
            "sql": "select max ( stars ) from rating"
        },
        {
            "utterance": "what is the average of rating stars ?",
            "sql": "select avg ( stars ) from rating"
        },
        {
            "utterance": "what is the first movie 's year ? | What do you mean by `` first '' ? Do you mean the earliest movie ? | yes",
            "sql": "select min ( year ) from movie"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the most recent movie?",
        "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "how many movies are there in total ?",
            "sql": "select count ( * ) from movie"
        },
        {
            "utterance": "What year did the oldest movie come out ?",
            "sql": "select year from movie order by year limit value"
        },
        {
            "utterance": "How about the most recent one ?",
            "sql": "select year from movie order by year desc limit value"
        },
        {
            "utterance": "What 's the name of that movie ?",
            "sql": "select title from movie where year = ( select max ( year ) from movie )"
        },
        {
            "utterance": "How about the name of the director ? | Do you mean the name of the director of Avatar ? | yes",
            "sql": "select director from movie where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the ids of the movies that are not reviewed by Brittany Harris.",
        "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""
    },
    "interaction": [
        {
            "utterance": "How many movies altogether do you have ?",
            "sql": "select count ( distinct mid ) from rating"
        },
        {
            "utterance": "What is the number of reviewers ?",
            "sql": "select count ( * ) from reviewer"
        },
        {
            "utterance": "Can you tell me the ids of the movies not reviewed by Brittany Harris ?",
            "sql": "select mid from rating except select t1 . mid from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of reviewers who had given higher than 3 star ratings.",
        "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"
    },
    "interaction": [
        {
            "utterance": "what are the name of the reviewers ?",
            "sql": "select name from reviewer"
        },
        {
            "utterance": "how many of them have given ratings higher than 3 ?",
            "sql": "select count ( t2 . rid ) from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid where t1 . stars > value"
        },
        {
            "utterance": "can you tell me their names ?",
            "sql": "select t2 . name from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid where t1 . stars > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the titles of all movies that have no ratings.",
        "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
    },
    "interaction": [
        {
            "utterance": "what is the name of the movie without any ratings ?",
            "sql": "select title from movie where mid not in ( select mid from rating )"
        },
        {
            "utterance": "who is the director of star wars ?",
            "sql": "select director from movie where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    "interaction": [
        {
            "utterance": "What are the names of the movies that was reviewed by brittany harris ?",
            "sql": "select distinct t2 . title from rating as t1 join movie as t2 on t1 . mid = t2 . mid join reviewer as t3 on t1 . rid = t3 . rid where t3 . name = value"
        },
        {
            "utterance": "What are the names of movies made after 2000 ?",
            "sql": "select distinct t2 . title from rating as t1 join movie as t2 on t1 . mid = t2 . mid join reviewer as t3 on t1 . rid = t3 . rid where t2 . year > value"
        },
        {
            "utterance": "How many rating stars did Avatar had ?",
            "sql": "select t1 . stars from rating as t1 join movie as t2 on t1 . mid = t2 . mid where t2 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 10,
    "final": {
        "utterance": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
        "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all director names who have directed more than one movie ?",
            "sql": "select distinct t1 . director from movie as t1 join movie as t2 on t1 . director = t2 . director where t1 . title ! = t2 . title"
        },
        {
            "utterance": "This is great ! Can you please update the list to show each of the films directed by each director and keep the director names in the list ?",
            "sql": "select t1 . director , t1 . title from movie as t1 join movie as t2 on t1 . director = t2 . director where t1 . title ! = t2 . title"
        },
        {
            "utterance": "Wonderful ! Can you please sort this list by the director name , and then sort by movie title ?",
            "sql": "select t1 . title , t1 . director from movie as t1 join movie as t2 on t1 . director = t2 . director where t1 . title ! = t2 . title order by t1 . director , t1 . title"
        },
        {
            "utterance": "Excellent ! Would you be able to update that list to also include the year each film was released ?",
            "sql": "select t1 . title , t1 . director , t1 . year from movie as t1 join movie as t2 on t1 . director = t2 . director where t1 . title ! = t2 . title order by t1 . director , t1 . title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"
    },
    "interaction": [
        {
            "utterance": "What are the names of the movies ?",
            "sql": "select title from movie"
        },
        {
            "utterance": "Which are made before 1980 ?",
            "sql": "select title from movie where year < value"
        },
        {
            "utterance": "From the list of all movies , which were directed by James Cameron ?",
            "sql": "select title from movie where director = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which movie has the highest average rating ? | The title of the movie that has the highest average rating is Snow White | What is it 's rating ?",
            "sql": "select avg ( t1 . stars ) from rating as t1 join movie as t2 on t1 . mid = t2 . mid group by t1 . mid order by avg ( t1 . stars ) desc limit value"
        },
        {
            "utterance": "What is the average rating for all movies ?",
            "sql": "select t2 . title , avg ( t1 . stars ) from rating as t1 join movie as t2 on t1 . mid = t2 . mid group by t1 . mid"
        },
        {
            "utterance": "Which movie has the lowest rating ?",
            "sql": "select t2 . title from rating as t1 join movie as t2 on t1 . mid = t2 . mid where t1 . stars = ( select min ( stars ) from rating )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
        "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title"
    },
    "interaction": [
        {
            "utterance": "How many movies are in the list ?",
            "sql": "select count ( * ) from movie"
        },
        {
            "utterance": "How many directors are on the list ?",
            "sql": "select count ( director ) from movie"
        },
        {
            "utterance": "How many of the directors have more than 1 film ?",
            "sql": "select count ( distinct t1 . director ) from movie as t1 join movie as t2 on t1 . director = t2 . director where t1 . title ! = t2 . title"
        },
        {
            "utterance": "What are the titles from those 2 directors ?",
            "sql": "select t1 . title from movie as t1 join movie as t2 on t1 . director = t2 . director where t1 . title ! = t2 . title"
        },
        {
            "utterance": "What are the years each of these movies were produced ?",
            "sql": "select t1 . year from movie as t1 join movie as t2 on t1 . director = t2 . director where t1 . title ! = t2 . title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 14,
    "final": {
        "utterance": "find the ids of reviewers who did not give 4 star.",
        "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    "interaction": [
        {
            "utterance": "How many reviewers are there ?",
            "sql": "select count ( distinct rid ) from rating"
        },
        {
            "utterance": "What are their id numbers ?",
            "sql": "select distinct rid from rating"
        },
        {
            "utterance": "What is the average rating of the reviewers ?",
            "sql": "select avg ( stars ) from rating"
        },
        {
            "utterance": "How many raters gave reviews less than 4 stars ?",
            "sql": "select count ( distinct rid ) from rating where stars < value"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select distinct rid from rating where stars < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the average rating star for each movie that received at least 2 ratings.",
        "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many total movie ratings are there ?",
            "sql": "select count ( * ) from rating"
        },
        {
            "utterance": "How many of those movies received less than 2 ratings ?",
            "sql": "select count ( * ) from ( select * from rating group by mid having count ( * ) < value )"
        },
        {
            "utterance": "Of the 14 ratings , what was the highest rating ?",
            "sql": "select stars from rating order by stars desc limit value"
        },
        {
            "utterance": "And the lowest ?",
            "sql": "select stars from rating order by stars asc limit value"
        },
        {
            "utterance": "And the average ?",
            "sql": "select avg ( stars ) from rating order by stars asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
    },
    "interaction": [
        {
            "utterance": "Find the movie id of Gone with the Wind ?",
            "sql": "select mid from movie where title = value"
        },
        {
            "utterance": "Which year Star Wars movie is released ?",
            "sql": "select year from movie where title = value"
        },
        {
            "utterance": "Who is directed by The Sound of Music ?",
            "sql": "select director from movie where title = value"
        },
        {
            "utterance": "What is the name of the movie produced after 2000 and directed by James Cameron ?",
            "sql": "select title from movie where director = value and year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    "interaction": [
        {
            "utterance": "Find the names of all directors whose movies are rated by Sarah Martinez",
            "sql": "select distinct t2 . director from rating as t1 join movie as t2 on t1 . mid = t2 . mid join reviewer as t3 on t1 . rid = t3 . rid where t3 . name = value"
        },
        {
            "utterance": "list the other directors against the movies they directed .",
            "sql": "select director , title from movie where director ! = value"
        },
        {
            "utterance": "what is the general ratings for those movies ?",
            "sql": "select t1 . director , t1 . title , t2 . stars from movie as t1 join rating as t2 on t1 . mid = t2 . mid where t1 . mid in ( select mid from movie where director ! = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the names and years of the movies that has the top 3 highest rating star?",
        "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you give me the names of the movies that has the top 3 highest rating star ?",
            "sql": "select t2 . title from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars desc limit value"
        },
        {
            "utterance": "Can you show me the years of those movies as well ?",
            "sql": "select t2 . title , t2 . year from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars desc limit value"
        },
        {
            "utterance": "How about their directors ?",
            "sql": "select t2 . title , t2 . year , t2 . director from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars desc limit value"
        },
        {
            "utterance": "Can you add rating stars too ?",
            "sql": "select t2 . title , t2 . year , t2 . director , t1 . stars from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars desc limit value"
        },
        {
            "utterance": "Can you please tell me the average stars as well ?",
            "sql": "select avg ( stars ) from rating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of the directors who made exactly one movie?",
        "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "How many directors are there ?",
            "sql": "select count ( distinct director ) from movie"
        },
        {
            "utterance": "How many of them only made one movie ?",
            "sql": "select count ( * ) from ( select director from movie group by director having count ( * ) = value )"
        },
        {
            "utterance": "What are the names of those directors ?",
            "sql": "select director from movie group by director having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the average rating star for each reviewer?",
        "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "Show the names of all reviewers .",
            "sql": "select t2 . name from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid group by t2 . name"
        },
        {
            "utterance": "What is the average rating of each reviewer .",
            "sql": "select t2 . name , avg ( t1 . stars ) from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid group by t2 . name"
        },
        {
            "utterance": "List the names of all reviewers based on their average rating in ascending order .",
            "sql": "select t2 . name from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid group by t2 . name order by avg ( t1 . stars ) asc"
        },
        {
            "utterance": "List all movie id associated with Brittany Harris .",
            "sql": "select t1 . mid from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid where t2 . name = value"
        },
        {
            "utterance": "List all movie id associated with Brittany Harris and their rating date .",
            "sql": "select t1 . mid , t1 . ratingdate from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid where t2 . name = value"
        },
        {
            "utterance": "What is the average rating of all movies reviewed by Brittany Harris .",
            "sql": "select avg ( t1 . stars ) from rating as t1 join reviewer as t2 on t1 . rid = t2 . rid where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the average rating stars and title for the oldest movie?",
        "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "What are the ratingDate of mID 101 ?",
            "sql": "select ratingdate from rating where mid = value"
        },
        {
            "utterance": "Find The releasing year of The Sound of Music .",
            "sql": "select year from movie where title = value"
        },
        {
            "utterance": "Who is directed by Star Wars ? | Did you mean to ask for the name of the director who directed Star Wars ? | Yes",
            "sql": "select director from movie where title = value"
        },
        {
            "utterance": "What is the average rating stars and title for the oldest movie ?",
            "sql": "select avg ( t1 . stars ) , t2 . title from rating as t1 join movie as t2 on t1 . mid = t2 . mid where t2 . year = ( select min ( year ) from movie )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"
    },
    "interaction": [
        {
            "utterance": "list out the movies on the table",
            "sql": "select * from movie"
        },
        {
            "utterance": "what is the director name of Star Wars",
            "sql": "select director from movie where title = value"
        },
        {
            "utterance": "actually i mean which movie rating is high | Would you like the movie with the greatest number of rating stars ? | exactly",
            "sql": "select * from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars desc limit value"
        },
        {
            "utterance": "what is the year of Gone with the Wind",
            "sql": "select year from movie where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 23,
    "final": {
        "utterance": "find the ids of reviewers who did not give 4 star.",
        "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    "interaction": [
        {
            "utterance": "ids of reviewers who did not give 4 star ?",
            "sql": "select rid from rating except select rid from rating where stars = value"
        },
        {
            "utterance": "Stars for rID 201 ?",
            "sql": "select stars from rating where rid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names and years of the movies that has the top 3 highest rating star?",
        "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Please show me the names and years of the movies that has the top 3 highest rating stars",
            "sql": "select t2 . title , t2 . year from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars desc limit value"
        },
        {
            "utterance": "Can you show me the director names together with the name and years ? | Did you mean the directors of the movies that have the top 3 highest rating stars ? | Yes , director names , movie names and years please .",
            "sql": "select t2 . title , t2 . year , t2 . director from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars desc limit value"
        },
        {
            "utterance": "Please give me the same information for the movies that have the 3 lowest rating stars .",
            "sql": "select t2 . title , t2 . year , t2 . director from rating as t1 join movie as t2 on t1 . mid = t2 . mid order by t1 . stars limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 0,
    "final": {
        "utterance": "Show times of elimination of wrestlers with days held more than 50.",
        "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"
    },
    "interaction": [
        {
            "utterance": "what are the elimination time of wrestlers",
            "sql": "select time from elimination"
        },
        {
            "utterance": "What are the names of the wrestlers and their elimination times ?",
            "sql": "select t1 . time , t2 . name from elimination as t1 join wrestler as t2 on t1 . wrestler_id = t2 . wrestler_id"
        },
        {
            "utterance": "What are the names of wresters and their elimination times whose days held is greater than 50 ?",
            "sql": "select t2 . name , t1 . time from elimination as t1 join wrestler as t2 on t1 . wrestler_id = t2 . wrestler_id where t2 . days_held > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 1,
    "final": {
        "utterance": "List the time of elimination of the wrestlers with largest days held.",
        "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . can you tell me how many wrestlers were eliminated ?",
            "sql": "select count ( * ) from elimination"
        },
        {
            "utterance": "can you list the elimination times of those with the largest days held ? | Again , there can only be one with the largest days held , would you like that one ? There are not multiple that can be `` largest '' | yes , please",
            "sql": "select t1 . time from elimination as t1 join wrestler as t2 on t1 . wrestler_id = t2 . wrestler_id order by t2 . days_held desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 2,
    "final": {
        "utterance": "List the locations that are shared by more than two wrestlers.",
        "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "list the location that was share by more than two wrestler",
            "sql": "select location from wrestler group by location having count ( * ) > value"
        },
        {
            "utterance": "which of them has the highest days held",
            "sql": "select location from wrestler group by location having count ( * ) > value order by days_held desc limit value"
        },
        {
            "utterance": "what are the name of the wrestler | Would you like to know the names of all wrestlers with location Tokyo , Japan ? | yes",
            "sql": "select name from wrestler where location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 3,
    "final": {
        "utterance": "Please show the most common reigns of wrestlers.",
        "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many wrestlers are there ?",
            "sql": "select count ( * ) from wrestler"
        },
        {
            "utterance": "just locations",
            "sql": "select distinct location from wrestler"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select wrestler_id from wrestler"
        },
        {
            "utterance": "What are the most common reigns of wrestlers ?",
            "sql": "select reign from wrestler group by reign order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    "interaction": [
        {
            "utterance": "Show the teams that have wrestlers eliminated by `` Orton '' .",
            "sql": "select team from elimination where eliminated_by = value"
        },
        {
            "utterance": "Show me the teams that have wrestlers eliminated by `` Benjamin '' .",
            "sql": "select team from elimination where eliminated_by = value"
        },
        {
            "utterance": "What was the elimination move when the wrestlers in team Batista were eliminated by `` Benjamin '' .",
            "sql": "select elimination_move from elimination where eliminated_by = value and team = value"
        },
        {
            "utterance": "And what was the time duration in this case ?",
            "sql": "select time from elimination where eliminated_by = value and team = value"
        },
        {
            "utterance": "Show me the teams that have wrestlers eliminated by `` Punk '' .",
            "sql": "select team from elimination where eliminated_by = value"
        },
        {
            "utterance": "Hmmm . And what was the elimination move used ?",
            "sql": "select elimination_move from elimination where eliminated_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the wrestler with the fewest days held?",
        "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average number of days | did you mean the average days held by all wrestlers ? | yes",
            "sql": "select avg ( days_held ) from wrestler"
        },
        {
            "utterance": "what is the name of the wrestler with the fewest days held",
            "sql": "select name from wrestler order by days_held limit value"
        },
        {
            "utterance": "what is the name of the first wrestler id | did you mean the name of the wrestler with id 1 ? | first wrestler",
            "sql": "select name from wrestler where wrestler_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 6,
    "final": {
        "utterance": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC"
    },
    "interaction": [
        {
            "utterance": "What are names of all the wrestlers ?",
            "sql": "select name from wrestler"
        },
        {
            "utterance": "And what about teams in elimination ?",
            "sql": "select team from elimination"
        },
        {
            "utterance": "Can I see a list with wrestler names and teams in elimination in descending order based on days held ?",
            "sql": "select t2 . name , t1 . team from elimination as t1 join wrestler as t2 on t1 . wrestler_id = t2 . wrestler_id order by t2 . days_held desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\""
    },
    "interaction": [
        {
            "utterance": "Show the times of elimination by `` Punk '' or `` Orton '' .",
            "sql": "select time from elimination where eliminated_by = value or eliminated_by = value"
        },
        {
            "utterance": "And by `` Benjamin '' ?",
            "sql": "select time from elimination where eliminated_by = value"
        },
        {
            "utterance": "What was the average elimination time of all teams ?",
            "sql": "select avg ( time ) from elimination"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "List the state and enrollment of all the colleges where any students got accepted in the tryout decision .",
            "sql": "select distinct t1 . state , t1 . enr from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . decision = value"
        },
        {
            "utterance": "What are the states and names of the colleges that all the goalies tried out for ?",
            "sql": "select distinct t1 . state , t1 . enr from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        },
        {
            "utterance": "What are the states and names of all colleges that did n't accept students in the tryout decision ?",
            "sql": "select state , enr from college where cname not in ( select distinct t1 . cname from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . decision = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'"
    },
    "interaction": [
        {
            "utterance": "Which colleges students played in the try out in striker position ?",
            "sql": "select cname from tryout where ppos = value"
        },
        {
            "utterance": "And in which state is it located ?",
            "sql": "select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        },
        {
            "utterance": "How about it 's enrollment number ?",
            "sql": "select t1 . enr from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of states that have some college students playing in goalie and mid positions.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of player position ?",
            "sql": "select ppos from tryout"
        },
        {
            "utterance": "can you show me a list of college name ?",
            "sql": "select cname from college"
        },
        {
            "utterance": "what is the average of enrollments ?",
            "sql": "select avg ( enr ) from college"
        },
        {
            "utterance": "what is the colleges ' states ?",
            "sql": "select state from college"
        },
        {
            "utterance": "find the names of states that have some collage plating in goalie and mid positions .",
            "sql": "select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value intersect select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and hours of the students whose tryout decision is yes.",
        "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with a list of all of the player names ?",
            "sql": "select pname from player"
        },
        {
            "utterance": "Thank you for that ! Can you filter the list to show the names of only the players whose decision is `` yes '' ?",
            "sql": "select t1 . pname from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . decision = value"
        },
        {
            "utterance": "Perfect ! Can you update this list to show the college names associated with each of these 2 players ?",
            "sql": "select t1 . pname , t2 . cname from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "What is the name of the college whos size is bigger than 10000 ?",
            "sql": "select cname from college where enr > value"
        },
        {
            "utterance": "Which of those colleges are located in LA ?",
            "sql": "select * from college where enr > value and state = value"
        },
        {
            "utterance": "What is the enrollment of that college ?",
            "sql": "select enr from college where enr > value and state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"
    },
    "interaction": [
        {
            "utterance": "Can you list all the colleges and their enrollments ?",
            "sql": "select cname , enr from college"
        },
        {
            "utterance": "Which college has the largest enrollment ?",
            "sql": "select cname from college where enr = ( select max ( enr ) from college )"
        },
        {
            "utterance": "Hmm , I also want to know which colleges have enrollments that are less than the largest size .",
            "sql": "select cname from college where enr < ( select max ( enr ) from college )"
        },
        {
            "utterance": "Can you list the states of those colleges ?",
            "sql": "select cname , state from college where enr < ( select max ( enr ) from college )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'"
    },
    "interaction": [
        {
            "utterance": "What are the names of the states that have some college students playing in the mid position but not the goalie position ?",
            "sql": "select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value except select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        },
        {
            "utterance": "What about states that have some college students playing in the goalie position ?",
            "sql": "select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        },
        {
            "utterance": "What about in the striker position ?",
            "sql": "select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        },
        {
            "utterance": "What is the college name for that one ?",
            "sql": "select t1 . cname from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value"
        },
        {
            "utterance": "Was there a decision on that position ?",
            "sql": "select decision from tryout where ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Which colleges do the tryout players whose name starts with letter D go to?",
        "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"
    },
    "interaction": [
        {
            "utterance": "How many players have a yCard ?",
            "sql": "select count ( * ) from player where ycard = value"
        },
        {
            "utterance": "What is the average HS score of all players ?",
            "sql": "select avg ( hs ) from player"
        },
        {
            "utterance": "Which player has the lowest HS score ?",
            "sql": "select pname from player order by hs asc limit value"
        },
        {
            "utterance": "What is the pID for Andrew ?",
            "sql": "select pid from player where pname = value"
        },
        {
            "utterance": "And for Blake ?",
            "sql": "select pid from player where pname = value"
        },
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( * ) from player"
        },
        {
            "utterance": "What are there names ?",
            "sql": "select pname from player"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the names of schools with the top 3 largest size?",
        "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the top 3 enrollment numbers among the schools ?",
            "sql": "select enr from college order by enr desc limit value"
        },
        {
            "utterance": "Hmm , I want to know the states of the schools with the top 3 largest size .",
            "sql": "select state from college order by enr desc limit value"
        },
        {
            "utterance": "Can you tell me the names of the schools with the top 3 largest size ?",
            "sql": "select cname from college order by enr desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the total number of enrollment of schools that do not have any goalie player?",
        "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
    },
    "interaction": [
        {
            "utterance": "Which schools have goalie player ?",
            "sql": "select cname from tryout where ppos = value"
        },
        {
            "utterance": "And which schools do n't have a goalie player ?",
            "sql": "select cname from tryout where ppos ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the colleges located in the state of LA ?",
            "sql": "select cname from college where state = value"
        },
        {
            "utterance": "Awesome ! Can you show me a list that contains both the colleges in LA and those located in AZ ?",
            "sql": "select cname from college where state = value or state = value"
        },
        {
            "utterance": "Sure ! What is the average enrollment of ASU and LSU ?",
            "sql": "select avg ( enr ) from college where cname = value or cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Which position is most popular among players in the tryout?",
        "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which position is the most popular among players in the tryout ?",
            "sql": "select ppos from tryout group by ppos order by count ( * ) desc limit value"
        },
        {
            "utterance": "What were the names of the colleges for that position ?",
            "sql": "select cname from tryout where ppos = ( select ppos from tryout group by ppos order by count ( * ) desc limit value )"
        },
        {
            "utterance": "And what decisions resulted from those tryouts ?",
            "sql": "select decision from tryout where ppos = ( select ppos from tryout group by ppos order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Were there any other position in the try outs other than goalie position ?",
            "sql": "select ppos from tryout where ppos ! = value"
        },
        {
            "utterance": "Which colleges were those positions for ?",
            "sql": "select cname from tryout where ppos ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the state of the college which player Charles is attending.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"
    },
    "interaction": [
        {
            "utterance": "What is the player id for Charles ?",
            "sql": "select pid from player where pname = value"
        },
        {
            "utterance": "What the college Charles is attending ?",
            "sql": "select t1 . cname from college as t1 join tryout as t2 on t1 . cname = t2 . cname join player as t3 on t2 . pid = t3 . pid where t3 . pname = value"
        },
        {
            "utterance": "What is the state of the college OU ?",
            "sql": "select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname join player as t3 on t2 . pid = t3 . pid where t1 . cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the max, average and min training hours of all players.",
        "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player"
    },
    "interaction": [
        {
            "utterance": "What is the max training hours of all players , please ?",
            "sql": "select max ( hs ) from player"
        },
        {
            "utterance": "What about the min ?",
            "sql": "select min ( hs ) from player"
        },
        {
            "utterance": "How about the average ?",
            "sql": "select avg ( hs ) from player"
        },
        {
            "utterance": "Who is the player with the lowest training hours ?",
            "sql": "select pname from player order by hs limit value"
        },
        {
            "utterance": "What about the highest training hours , please ?",
            "sql": "select pname from player order by hs desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the average hours for the students whose tryout decision is no.",
        "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'"
    },
    "interaction": [
        {
            "utterance": "what is average of training hours ?",
            "sql": "select avg ( hs ) from player"
        },
        {
            "utterance": "can you show me player names that starting with 'A ' ?",
            "sql": "select pname from player where pname like value"
        },
        {
            "utterance": "can you show me a list of college name ?",
            "sql": "select distinct cname from tryout"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment .",
            "sql": "select cname from college where enr < value and state = value union select cname from college where enr > value and state = value"
        },
        {
            "utterance": "OK ! please give me the names of the colleges where enrollment is greater than 20000",
            "sql": "select cname from college where enr > value"
        },
        {
            "utterance": "Also give me the names of the colleges where enrollment is between 10000 and 20000 .",
            "sql": "select cname from college where enr < value and enr > value"
        },
        {
            "utterance": "Ok. Can you please tell me which college has the lowest enrollment .",
            "sql": "select cname from college order by enr limit value"
        },
        {
            "utterance": "And which college has the highest enrollment ?",
            "sql": "select cname from college order by enr desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
        "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos"
    },
    "interaction": [
        {
            "utterance": "How many different positions are there ?",
            "sql": "select count ( distinct ppos ) from tryout"
        },
        {
            "utterance": "How many students have more than 1000 hours of training ?",
            "sql": "select * from player where hs > value"
        },
        {
            "utterance": "How many hours of training has the student with the most hours completed ?",
            "sql": "select hs from player order by hs desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 17,
    "final": {
        "utterance": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
    },
    "interaction": [
        {
            "utterance": "How many colleges have enrollment greater than 18000 ?",
            "sql": "select count ( * ) from college where enr > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select cname from college where enr > value"
        },
        {
            "utterance": "What is the enrollment for OU ?",
            "sql": "select enr from college where cname = value"
        },
        {
            "utterance": "And for LSU ? | Would you like to know the enrollment for the college named LSU ? | Yes I would .",
            "sql": "select enr from college where cname = value"
        },
        {
            "utterance": "In which state is LSU located ?",
            "sql": "select state from college where cname = value"
        },
        {
            "utterance": "And the state for OU ?",
            "sql": "select state from college where cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 18,
    "final": {
        "utterance": "What is minimum hours of the students playing in different position?",
        "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos"
    },
    "interaction": [
        {
            "utterance": "how many hours does each player get to be active for ?",
            "sql": "select pid , hs from player"
        },
        {
            "utterance": "what position requires the least playing time ?",
            "sql": "select ppos from tryout as t1 join player as t2 on t1 . pid = t2 . pid group by t1 . ppos order by min ( t2 . hs ) limit value"
        },
        {
            "utterance": "what is the the playing time of the mid player ?",
            "sql": "select min ( t2 . hs ) , t1 . ppos from tryout as t1 join player as t2 on t1 . pid = t2 . pid where ppos = value group by t1 . ppos"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the max, average and min training hours of all players.",
        "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player"
    },
    "interaction": [
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( * ) from player"
        },
        {
            "utterance": "What is the max of those players ? | what did you mean the max ? | Sorry , the max training hours of those players .",
            "sql": "select max ( hs ) from player"
        },
        {
            "utterance": "And the min training hours of those players ?",
            "sql": "select min ( hs ) from player"
        },
        {
            "utterance": "How about the average ?",
            "sql": "select avg ( hs ) from player"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many student in total participate in the tryout ?",
            "sql": "select count ( * ) from tryout"
        },
        {
            "utterance": "For which colleges ?",
            "sql": "select count ( * ) , cname from tryout group by cname"
        },
        {
            "utterance": "Can I see that list in a descending order based on student count ?",
            "sql": "select count ( * ) , cname from tryout group by cname order by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the states where have some college students in tryout and their decisions are yes.",
        "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "I want to know the states and the college names which have some college students in tryout .",
            "sql": "select t1 . state , t1 . cname from college as t1 join tryout as t2 on t1 . cname = t2 . cname"
        },
        {
            "utterance": "Hmm , can you show me the college names with players whose decisions are yes ?",
            "sql": "select cname from tryout where decision = value"
        },
        {
            "utterance": "Can you list just the states which have college students in tryout and their decisions are yes ?",
            "sql": "select distinct t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the state of the college which player Charles is attending.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"
    },
    "interaction": [
        {
            "utterance": "find the state of the college which player Charles is attending",
            "sql": "select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname join player as t3 on t2 . pid = t3 . pid where t3 . pname = value"
        },
        {
            "utterance": "OK , List out the all player id and college name",
            "sql": "select t1 . cname , t3 . pid from college as t1 join tryout as t2 on t1 . cname = t2 . cname join player as t3 on t2 . pid = t3 . pid"
        },
        {
            "utterance": "find the training hours of the player Charles",
            "sql": "select hs from player where pname = value"
        },
        {
            "utterance": "ok , list out all college name",
            "sql": "select cname from college"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 23,
    "final": {
        "utterance": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
    },
    "interaction": [
        {
            "utterance": "list the name of college in az ?",
            "sql": "select cname from college where state = value"
        },
        {
            "utterance": "list the name of the colleges whose enrollment is lesser than 18000 sorted by the college 's name ?",
            "sql": "select cname from college where enr > value order by cname"
        },
        {
            "utterance": "which college enrollment is 22000 ?",
            "sql": "select cname from college where enr = value"
        },
        {
            "utterance": "list the name of the colleges whose enrollment is greater than 12000 sorted by the college 's name and state ?",
            "sql": "select cname from college where enr > value order by cname , state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"
    },
    "interaction": [
        {
            "utterance": "Can you list all the names of the students who have the position of striker ?",
            "sql": "select t1 . pname from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . ppos = value"
        },
        {
            "utterance": "Can you also list the tryout decision they got please ?",
            "sql": "select t1 . pname , t2 . decision from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . ppos = value"
        },
        {
            "utterance": "What are the names and positions of all players who got a no for their tryout decision ?",
            "sql": "select t1 . pname , t2 . ppos from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . decision = value"
        },
        {
            "utterance": "What are the names and college names of all players who have over 700 training hours ?",
            "sql": "select t1 . pname , t2 . cname from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t1 . hs > value"
        },
        {
            "utterance": "Can you add their positions into the table please ?",
            "sql": "select t1 . pname , t2 . cname , t2 . ppos from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t1 . hs > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name of the tryout players who are from the college with largest size.",
        "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "hi . can you tell me how many players are from OU College ?",
            "sql": "select count ( * ) from tryout as t1 join player as t2 on t1 . pid = t2 . pid where t1 . cname = value"
        },
        {
            "utterance": "and can you tell me if OU is the college with the largest size ?",
            "sql": "select cname from college order by enr desc limit value"
        },
        {
            "utterance": "and what is the name of that tryout player from OU ?",
            "sql": "select t2 . pname from tryout as t1 join player as t2 on t1 . pid = t2 . pid where t1 . cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name and college of students whose decisions are yes in the tryout.",
        "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "find the name and college of students whose player position are goalie in the tryout",
            "sql": "select t1 . pname , t2 . cname from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . ppos = value"
        },
        {
            "utterance": "find the training hours for the player id 10001",
            "sql": "select hs from player where pid = value"
        },
        {
            "utterance": "find the college name for the player id 10001",
            "sql": "select t2 . cname from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . pid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
        "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')"
    },
    "interaction": [
        {
            "utterance": "hello there ! Can you please provide me with a list of all college names ?",
            "sql": "select cname from college"
        },
        {
            "utterance": "Thank you for that ! Can you show me the names of all colleges with an enrollment value that is greater than the total enrollment of all of the colleges in the state of FL ?",
            "sql": "select cname from college"
        },
        {
            "utterance": "Excellent ! Can you update this list to show me the enrollment quantity associated with each college ?",
            "sql": "select cname , enr from college where enr > ( select max ( enr ) from college where state = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 28,
    "final": {
        "utterance": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')"
    },
    "interaction": [
        {
            "utterance": "How many states that have some college students playing in the mid position ?",
            "sql": "select count ( * ) from ( select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos = value )"
        },
        {
            "utterance": "How many states that have some college students not playing in the goalie position ?",
            "sql": "select count ( * ) from ( select t1 . state from college as t1 join tryout as t2 on t1 . cname = t2 . cname where t2 . ppos ! = value )"
        },
        {
            "utterance": "Find college names with students playing in the goalie position",
            "sql": "select cname from tryout where ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 29,
    "final": {
        "utterance": "What is minimum hours of the students playing in different position?",
        "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos"
    },
    "interaction": [
        {
            "utterance": "How many hours does a goalie need to play to meet the minimum ?",
            "sql": "select min ( t2 . hs ) from tryout as t1 join player as t2 on t1 . pid = t2 . pid and t1 . ppos = value group by t1 . ppos"
        },
        {
            "utterance": "How many hours does a striker need to play to meet the minimum ?",
            "sql": "select min ( t2 . hs ) from tryout as t1 join player as t2 on t1 . pid = t2 . pid and t1 . ppos = value group by t1 . ppos"
        },
        {
            "utterance": "How many hours does a mid need to play to meet the minimum ?",
            "sql": "select min ( t2 . hs ) from tryout as t1 join player as t2 on t1 . pid = t2 . pid where t1 . ppos = value group by t1 . ppos"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the players whose names contain letter 'a'.",
        "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the player id of each player with the letter 'a ' in their name ?",
            "sql": "select pid from player where pname like value"
        },
        {
            "utterance": "How many of those players have a yes card ?",
            "sql": "select count ( * ) from player where pname like value and ycard = value"
        },
        {
            "utterance": "What are those players ' names ?",
            "sql": "select distinct pname from player where pname like value and ycard = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 31,
    "final": {
        "utterance": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
        "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"
    },
    "interaction": [
        {
            "utterance": "What are the enrollments of all colleges in the state of FL ?",
            "sql": "select sum ( enr ) from college where state = value"
        },
        {
            "utterance": "What are the names of all colleges that have an enrollment greater than at least one of the colleges in FL ?",
            "sql": "select distinct cname from college where enr > ( select min ( enr ) from college where state = value )"
        },
        {
            "utterance": "What are the names of all colleges that have an enrollment greater than at least one of the colleges in OK ?",
            "sql": "select distinct cname from college where enr > ( select min ( enr ) from college where state = value )"
        },
        {
            "utterance": "How about the names of all colleges that have an enrollment less than at least one of the colleges in OK ?",
            "sql": "select distinct cname from college where enr < ( select max ( enr ) from college where state = value )"
        },
        {
            "utterance": "What are the names of all colleges that have an enrollment less than at least one of the colleges in FL ?",
            "sql": "select distinct cname from college where enr < ( select max ( enr ) from college where state = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "what are the college names of the students whose tryout decision is yes",
            "sql": "select cname from tryout where decision = value"
        },
        {
            "utterance": "what is the average and maximum hours for these students",
            "sql": "select avg ( t1 . hs ) , max ( t1 . hs ) from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . decision = value"
        },
        {
            "utterance": "add the player id and college names in the same list",
            "sql": "select avg ( t1 . hs ) , max ( t1 . hs ) , t1 . pid , t2 . cname from player as t1 join tryout as t2 on t1 . pid = t2 . pid where t2 . decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
        "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)"
    },
    "interaction": [
        {
            "utterance": "What is the average enrollment ?",
            "sql": "select avg ( enr ) from college"
        },
        {
            "utterance": "Now please list all colleges that have enrollment higher than the average . | LSU , OU , and FSU have enrollment higher than the average . | Please list the states where LSU , OU , and FSU are located .",
            "sql": "select distinct state from college where enr > ( select avg ( enr ) from college )"
        },
        {
            "utterance": "How many total states are in the table ?",
            "sql": "select count ( distinct state ) from college where enr > ( select avg ( enr ) from college )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 0,
    "final": {
        "utterance": "How many distinct characteristic names does the product \"cumin\" have?",
        "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "How many distinct characteristic names does the product `` cumin '' have ?",
            "sql": "select count ( distinct t3 . characteristic_name ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        },
        {
            "utterance": "How many distinct characteristic names does the product `` basil '' have ?",
            "sql": "select count ( distinct t3 . characteristic_name ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        },
        {
            "utterance": "Sure thing ! Whats the typical selling price of cumin ?",
            "sql": "select typical_selling_price from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 1,
    "final": {
        "utterance": "How many characteristics does the product named \"sesame\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "How many characteristics does the product named `` sesame '' have ?",
            "sql": "select count ( * ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id where t1 . product_name = value"
        },
        {
            "utterance": "What are the characteristic ids of those ? Sorry !",
            "sql": "select characteristic_id from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id where t1 . product_name = value"
        },
        {
            "utterance": "What is sesame 's typical selling price ?",
            "sql": "select typical_selling_price from products where product_name = value"
        },
        {
            "utterance": "What the most common characteristic id ?",
            "sql": "select characteristic_id from product_characteristics group by characteristic_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the least common product category code ?",
            "sql": "select product_category_code from products group by product_category_code order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""
    },
    "interaction": [
        {
            "utterance": "hi , List out the all color description",
            "sql": "select color_description from ref_colors"
        },
        {
            "utterance": "list out the color code for all the product name",
            "sql": "select color_code , product_name from products"
        },
        {
            "utterance": "list out the typical selling price for all product name",
            "sql": "select typical_selling_price , product_name from products"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 3,
    "final": {
        "utterance": "List all the characteristic names and data types of product \"cumin\".",
        "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\""
    },
    "interaction": [
        {
            "utterance": "what are the characteristic names of `` Cumin '' ?",
            "sql": "select t3 . characteristic_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        },
        {
            "utterance": "`` Cumin '' data types",
            "sql": "select t3 . characteristic_data_type from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        },
        {
            "utterance": "what is the product id of `` cumin '' ?",
            "sql": "select product_id from products where product_name = value"
        },
        {
            "utterance": "what is the product_category_code for product id 1 ?",
            "sql": "select product_category_code from products where product_id = value"
        },
        {
            "utterance": "what is the typical_selling_price of product id 1 ?",
            "sql": "select typical_selling_price from products where product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 4,
    "final": {
        "utterance": "How many colors are never used by any product?",
        "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"
    },
    "interaction": [
        {
            "utterance": "how many colors are in list in the description ?",
            "sql": "select count ( * ) from ref_colors"
        },
        {
            "utterance": "Find the product list of the product name ?",
            "sql": "select product_name from products"
        },
        {
            "utterance": "Find the color of the product id 2 ?",
            "sql": "select t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_id = value"
        },
        {
            "utterance": "how many herbs in the product category code ?",
            "sql": "select count ( * ) from products where product_category_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""
    },
    "interaction": [
        {
            "utterance": "Can you list the color code that has a color description of 'white ' ?",
            "sql": "select color_code from ref_colors where color_description = value"
        },
        {
            "utterance": "Can you list all product ids and their associated product category codes that have a color code value of 2 ?",
            "sql": "select product_id , product_category_code from products where color_code = value"
        },
        {
            "utterance": "Sure , can you add to the table the unit of measure values for the product category codes of Spices and Herbs ?",
            "sql": "select unit_of_measure from ref_product_categories where product_category_code = value or product_category_code = value"
        },
        {
            "utterance": "Please delete that information and only show the product name for the product with a product id of 2 .",
            "sql": "select product_name from products where product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the color description of the product with name \"catnip\"?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""
    },
    "interaction": [
        {
            "utterance": "Can you show me all the product names , codes and ids ? | Do you mean the product names , color codes and ids ? | Yes please .",
            "sql": "select product_name , color_code , product_id from products"
        },
        {
            "utterance": "I want to know the the product names and their color descriptions .",
            "sql": "select t1 . product_name , t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code"
        },
        {
            "utterance": "Hmm , can you tell me the color description of the product with the name \u201c catnip \u201d ?",
            "sql": "select t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t1 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the characteristic name used by most number of the products?",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you please show me name of the products ?",
            "sql": "select distinct product_name from products"
        },
        {
            "utterance": "Can you please show me the characteristic name used by least number of products ?",
            "sql": "select t3 . characteristic_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id group by t3 . characteristic_name order by count ( * ) limit value"
        },
        {
            "utterance": "Can you please show me the characteristic name used by most number of products ?",
            "sql": "select t3 . characteristic_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id group by t3 . characteristic_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""
    },
    "interaction": [
        {
            "utterance": "what are the names of the products with category `` Herbs ''",
            "sql": "select t1 . product_name from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_category_code = value"
        },
        {
            "utterance": "what are the color descriptions for the products ? | Do you want both the names and the color descriptions ? | yes",
            "sql": "select t1 . product_name , t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_category_code = value"
        },
        {
            "utterance": "list down all the product ids",
            "sql": "select product_id from products"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 9,
    "final": {
        "utterance": "How many products have the characteristic named \"hot\"?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""
    },
    "interaction": [
        {
            "utterance": "how many products are there",
            "sql": "select count ( * ) from products"
        },
        {
            "utterance": "what is the product name of color code 2",
            "sql": "select product_name from products where color_code = value"
        },
        {
            "utterance": "what is the characteristic data type of characteristic id 1",
            "sql": "select characteristic_data_type from characteristics where characteristic_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the description of the color for most products?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the color code of basil ?",
            "sql": "select color_code from products where product_name = value"
        },
        {
            "utterance": "what is the color with least products ?",
            "sql": "select t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code group by t2 . color_description order by count ( * ) asc limit value"
        },
        {
            "utterance": "what is the name of the product with color code 4 ?",
            "sql": "select product_name from products where color_code = value"
        },
        {
            "utterance": "What is the typical selling price of product paper ?",
            "sql": "select typical_selling_price from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 11,
    "final": {
        "utterance": "How many characteristics does the product named \"laurel\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
    },
    "interaction": [
        {
            "utterance": "What is the product category of `` laurel '' ? | Did you mean the product category of the product named `` laurel '' ? | yes",
            "sql": "select product_category_code from products where product_name = value"
        },
        {
            "utterance": "And how many characteristics does this product have ?",
            "sql": "select count ( * ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        },
        {
            "utterance": "Than what is it 's typical selling price ?",
            "sql": "select typical_selling_price from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 12,
    "final": {
        "utterance": "How many products have the characteristic named \"hot\"?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""
    },
    "interaction": [
        {
            "utterance": "How many products have the characteristic named `` hot ''",
            "sql": "select count ( * ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t3 . characteristic_name = value"
        },
        {
            "utterance": "what is the name of the product with the characteristic `` hot '' ?",
            "sql": "select t1 . product_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t3 . characteristic_name = value"
        },
        {
            "utterance": "what is the selling price of lotus ?",
            "sql": "select t1 . typical_selling_price from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 13,
    "final": {
        "utterance": "List the all the distinct names of the products with the characteristic name 'warm'.",
        "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
    },
    "interaction": [
        {
            "utterance": "how many distinct names of the products have characteristc name warm ?",
            "sql": "select count ( distinct t1 . product_name ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t3 . characteristic_name = value"
        },
        {
            "utterance": "Which distinct name is that ?",
            "sql": "select distinct t1 . product_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t3 . characteristic_name = value"
        },
        {
            "utterance": "What is the name of a spice with buying price of 352447.2874677 ?",
            "sql": "select product_name from products where typical_buying_price = value"
        },
        {
            "utterance": "What is its color code ?",
            "sql": "select color_code from products where typical_buying_price = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the color code and description of the product named \"chervil\"?",
        "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "What is the product description for this product ?",
            "sql": "select product_description from products where product_name = value"
        },
        {
            "utterance": "Also , what is the color code ?",
            "sql": "select t1 . color_code , t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t1 . product_name = value"
        },
        {
            "utterance": "Great , what is the typical product price for this product ?",
            "sql": "select typical_buying_price from products where product_name = value"
        },
        {
            "utterance": "No worries , are there any other product details that I should know about ?",
            "sql": "select other_product_details from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 15,
    "final": {
        "utterance": "How many characteristics does the product named \"sesame\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "what are the characteristics of the product name 'sesame ' ?",
            "sql": "select t2 . characteristic_id from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id where t1 . product_name = value"
        },
        {
            "utterance": "how many characteristics does the product name 'sesame ' have ?",
            "sql": "select count ( * ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id where t1 . product_name = value"
        },
        {
            "utterance": "what is the product category code for product name 'sesame '",
            "sql": "select product_category_code from products where product_name = value"
        },
        {
            "utterance": "what is the product characteristic value for product name 'sesame '",
            "sql": "select t2 . product_characteristic_value from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id where t1 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the unit of measurement and product category code of product named \"chervil\".",
        "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "How many different product categories are there ?",
            "sql": "select distinct product_category_code from products"
        },
        {
            "utterance": "What units of measurement are used ? | can you give more information about you question ? | What unit of measurement is used for seeds category ?",
            "sql": "select unit_of_measure from ref_product_categories where product_category_code = value"
        },
        {
            "utterance": "What is the measurement used for chervil ?",
            "sql": "select t2 . unit_of_measure from products as t1 join ref_product_categories as t2 on t1 . product_category_code = t2 . product_category_code where t1 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the number of characteristics that the product \"flax\" has.",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""
    },
    "interaction": [
        {
            "utterance": "How many products do you have ?",
            "sql": "select count ( * ) from products"
        },
        {
            "utterance": "Find the number of characteristics that the product `` caraway '' has .",
            "sql": "select count ( * ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        },
        {
            "utterance": "Finally , can you provide the number of characteristics of the product with the name `` flax '' ?",
            "sql": "select count ( * ) from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000"
    },
    "interaction": [
        {
            "utterance": "Show the name of the product with product id 1 ?",
            "sql": "select product_name from products where product_id = value"
        },
        {
            "utterance": "show the number of products with category Spices ?",
            "sql": "select count ( * ) from products where product_category_code = value"
        },
        {
            "utterance": "Show the number of products with category Spices and typically sold above 1000 ?",
            "sql": "select count ( * ) from products where product_category_code = value and typical_buying_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 19,
    "final": {
        "utterance": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""
    },
    "interaction": [
        {
            "utterance": "Can you please list all the characteristics of the product named sesame ?",
            "sql": "select t3 . characteristic_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value"
        },
        {
            "utterance": "Can you please list all the characteristics of the product named sesame with the type code `` Grade '' ?",
            "sql": "select t3 . characteristic_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id where t1 . product_name = value and t3 . characteristic_type_code = value"
        },
        {
            "utterance": "What is the characteristic name of the product with the highest typical selling price ?",
            "sql": "select t3 . characteristic_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id order by t1 . typical_selling_price desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the category descriptions of the products whose descriptions include letter 't'.",
        "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'"
    },
    "interaction": [
        {
            "utterance": "Which product descriptions contain the letter t ?",
            "sql": "select t2 . product_name from ref_product_categories as t1 join products as t2 on t1 . product_category_code = t2 . product_category_code where t2 . product_description like value"
        },
        {
            "utterance": "What are their prices ? | Do you mean typical buying price or typical selling price ? | Buying price .",
            "sql": "select t2 . typical_buying_price from ref_product_categories as t1 join products as t2 on t1 . product_category_code = t2 . product_category_code where t2 . product_description like value"
        },
        {
            "utterance": "What is the average buying price ?",
            "sql": "select avg ( t2 . typical_buying_price ) from ref_product_categories as t1 join products as t2 on t1 . product_category_code = t2 . product_category_code where t2 . product_description like value"
        },
        {
            "utterance": "Which of those products does not have a buying price ?",
            "sql": "select t2 . product_name from ref_product_categories as t1 join products as t2 on t1 . product_category_code = t2 . product_category_code where t2 . product_description like value and t2 . typical_buying_price = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 21,
    "final": {
        "utterance": "List all the product names with the color description \"white\".",
        "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list all of the product names that have the color description of `` white '' ?",
            "sql": "select t1 . product_name from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t2 . color_description = value"
        },
        {
            "utterance": "Thank you for that ! Can you update this list to show the typical selling price for each ?",
            "sql": "select t1 . product_name , t1 . typical_selling_price from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t2 . color_description = value"
        },
        {
            "utterance": "Thank you ! Can you tell me what the average typical selling price is of all of the product types ? | do you mean the average typical selling price of all product category code ? | Yes ! Can you provide me with the average typical selling price of all product category code ?",
            "sql": "select product_category_code , avg ( typical_buying_price ) from products group by product_category_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the products with the color description `` red '' ?",
            "sql": "select product_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id join ref_colors as t4 on t1 . color_code = t4 . color_code where t4 . color_description = value"
        },
        {
            "utterance": "What are the names of the products that have the characteristic name `` fast '' ?",
            "sql": "select product_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id join ref_colors as t4 on t1 . color_code = t4 . color_code where t3 . characteristic_name = value"
        },
        {
            "utterance": "What are the names of the products that have the characteristic name `` fast '' and the color description `` red '' ?",
            "sql": "select product_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id join ref_colors as t4 on t1 . color_code = t4 . color_code where t4 . color_description = value and t3 . characteristic_name = value"
        },
        {
            "utterance": "What about products with the characteristic name `` slow '' ?",
            "sql": "select product_name from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id join ref_colors as t4 on t1 . color_code = t4 . color_code where t3 . characteristic_name = value"
        },
        {
            "utterance": "What are the color descriptions of those ?",
            "sql": "select t4 . color_description from products as t1 join product_characteristics as t2 on t1 . product_id = t2 . product_id join characteristics as t3 on t2 . characteristic_id = t3 . characteristic_id join ref_colors as t4 on t1 . color_code = t4 . color_code where t3 . characteristic_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the color code and description of the product named \"chervil\"?",
        "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "what is the color code of product name `` chervil '' ?",
            "sql": "select t1 . color_code from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t1 . product_name = value"
        },
        {
            "utterance": "what is the color description of it ?",
            "sql": "select t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t1 . product_name = value"
        },
        {
            "utterance": "What is the product id of it ?",
            "sql": "select t1 . product_id from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t1 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 24,
    "final": {
        "utterance": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the products with the category `` Herbs '' please ?",
            "sql": "select t1 . product_name from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_category_code = value"
        },
        {
            "utterance": "What are their color descriptions ?",
            "sql": "select t1 . product_name , t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_category_code = value"
        },
        {
            "utterance": "What are their product descriptions ?",
            "sql": "select t1 . product_name , t2 . color_description , t1 . product_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_category_code = value"
        },
        {
            "utterance": "What are their typical selling prices ?",
            "sql": "select t1 . typical_selling_price from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_category_code = value"
        },
        {
            "utterance": "What is the average typical buying price ?",
            "sql": "select avg ( typical_buying_price ) from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where product_category_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the color description of the product with name \"catnip\"?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""
    },
    "interaction": [
        {
            "utterance": "What is the color description of the product with the name `` catnip '' ?",
            "sql": "select t2 . color_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t1 . product_name = value"
        },
        {
            "utterance": "What are the product names of all products with the color description red ?",
            "sql": "select t1 . product_name from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t2 . color_description = value"
        },
        {
            "utterance": "Could you add in the typical buying price of each of those please ? | The price of basil is 503.8431967 . The price of sesame is 1284268.0659 and price of caraway is 24493 | What are the product descriptions of all products with the color description green ?",
            "sql": "select t1 . product_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t2 . color_description = value"
        },
        {
            "utterance": "Can you add into the table their product names , please ?",
            "sql": "select t1 . product_name , t1 . product_description from products as t1 join ref_colors as t2 on t1 . color_code = t2 . color_code where t2 . color_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the unit of measurement and product category code of product named \"chervil\".",
        "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please show me a list of all of the product names and their associated product IDs ?",
            "sql": "select t1 . product_id , t1 . product_name from products as t1 join ref_product_categories as t2 on t1 . product_category_code = t2 . product_category_code"
        },
        {
            "utterance": "Thank you very much ! Can you filter this list to show only the item with the product id of 11 , and show me the associated product category code ?",
            "sql": "select t1 . product_id , t1 . product_name , t1 . product_category_code from products as t1 join ref_product_categories as t2 on t1 . product_category_code = t2 . product_category_code where t1 . product_id = value"
        },
        {
            "utterance": "Thank you very much ! Can you update this to display the product category code , product category description , and unit of measure ?",
            "sql": "select t2 . product_category_code , t2 . product_category_description , t2 . unit_of_measure from products as t1 join ref_product_categories as t2 on t1 . product_category_code = t2 . product_category_code where t1 . product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the name of the product with the color description 'yellow'?",
        "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'"
    },
    "interaction": [
        {
            "utterance": "how many ref colors are on the table",
            "sql": "select count ( distinct color_description ) from ref_colors"
        },
        {
            "utterance": "list out the product names",
            "sql": "select product_name from products"
        },
        {
            "utterance": "what is typical selling price of cumin",
            "sql": "select typical_selling_price from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Who is the friend of Zach with longest year relationship?",
        "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "How long is the longest relationship ?",
            "sql": "select max ( year ) from personfriend"
        },
        {
            "utterance": "What is the name of that person ?",
            "sql": "select name from personfriend where year = ( select max ( year ) from personfriend )"
        },
        {
            "utterance": "Who is his friend ?",
            "sql": "select friend from personfriend where name = value and year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the person who has friends with age above 40 and under age 30?",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
    },
    "interaction": [
        {
            "utterance": "Can you list the person names and their friends ?",
            "sql": "select name , friend from personfriend"
        },
        {
            "utterance": "Hmm , I want to know which friends are above 40 years old or below 30 years old . | do you mean the name of the person who has friends with age above 40 and under age 30 ? | I want to know the ages of the friends first , please .",
            "sql": "select t2 . friend , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . friend"
        },
        {
            "utterance": "Please tell me the names of the person who has friends with age above 40 and under age 30 .",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend in ( select name from person where age > value ) intersect select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend in ( select name from person where age < value )"
        },
        {
            "utterance": "How about the names of different persons who have friends with age above 40 and under age 30 ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend in ( select name from person where age > value ) union select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend in ( select name from person where age < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Who are the friends of Bob?",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "how many female persons are in the table",
            "sql": "select count ( * ) from person where gender = value"
        },
        {
            "utterance": "please tell me alice friend name",
            "sql": "select t2 . friend from person as t1 join personfriend as t2 on t1 . name = t2 . name where t1 . name = value"
        },
        {
            "utterance": "what is the age of bob",
            "sql": "select age from person where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the age of the friend of Zach with longest year relationship?",
        "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "How many friends does Zach have ?",
            "sql": "select count ( friend ) from personfriend where name = value"
        },
        {
            "utterance": "How long has zach been friends with each of them ?",
            "sql": "select name , friend , year from personfriend where name = value"
        },
        {
            "utterance": "What are the ages of Zach 's friends ?",
            "sql": "select t1 . name , friend , year , age from personfriend as t1 join person as t2 on t1 . friend = t2 . name where t1 . name = value"
        },
        {
            "utterance": "Which person has zach been friends with the longest ?",
            "sql": "select t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t2 . name = value and t2 . year = ( select max ( year ) from personfriend where name = value )"
        },
        {
            "utterance": "What does dan do for work ?",
            "sql": "select job from person where name = value"
        },
        {
            "utterance": "How old is dan ?",
            "sql": "select age from person where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the age of the friend of Zach with longest year relationship?",
        "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "which friend of zachs has the longest year relationship ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t2 . name = value and t2 . year = ( select max ( year ) from personfriend where name = value )"
        },
        {
            "utterance": "how old is dan ?",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "what city does Zach live ?",
            "sql": "select city from person where name = value"
        },
        {
            "utterance": "what age is zach ?",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "what is zach 's job ?",
            "sql": "select job from person where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the persons who are friends with Alice ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "Okay , could you show me Zach 's job ?",
            "sql": "select job from person where name = value"
        },
        {
            "utterance": "How old is Zach ?",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "How many years has Zach been friends with Alice ?",
            "sql": "select year from personfriend where friend = value and name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name and age of all males in order of their age.",
        "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "how many person there",
            "sql": "select count ( * ) from person"
        },
        {
            "utterance": "what is the age of Bob",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "what is the city of Alice",
            "sql": "select city from person where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name and age of all males in order of their age.",
        "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "what is the name of all males ?",
            "sql": "select name from person where gender = value"
        },
        {
            "utterance": "what is the age of Bob ?",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "who is a doctor ?",
            "sql": "select name from person where job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 8,
    "final": {
        "utterance": "How many people whose age is greater 30 and job is engineer?",
        "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"
    },
    "interaction": [
        {
            "utterance": "How many persons are on the list ?",
            "sql": "select count ( * ) from person"
        },
        {
            "utterance": "Who is the least aged person on the list ?",
            "sql": "select name from person order by age limit value"
        },
        {
            "utterance": "How many people whose age is greater 30 and job is engineer ?",
            "sql": "select count ( * ) from person where age > value and job = value"
        },
        {
            "utterance": "How many female people are on the list ?",
            "sql": "select count ( * ) from person where gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Who has a friend that is from new york city?",
        "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'"
    },
    "interaction": [
        {
            "utterance": "Show me the names | Do you mean the name of all the person ? | name of all the persons",
            "sql": "select name from person"
        },
        {
            "utterance": "show me the name of persons | The names of persons are Alice , Bob , Dan and Zach | Who has a friend from New York ?",
            "sql": "select t2 . name from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t1 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the female friends of Alice.",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"
    },
    "interaction": [
        {
            "utterance": "Hello , could you find how many friends Alice has ?",
            "sql": "select count ( * ) from personfriend where name = value"
        },
        {
            "utterance": "What is the name of Alice 's friend ?",
            "sql": "select friend from personfriend where name = value"
        },
        {
            "utterance": "What are the names of Bob 's friends ?",
            "sql": "select friend from personfriend where name = value"
        },
        {
            "utterance": "Is Zach also a male ?",
            "sql": "select gender from person where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of persons who are friends with Bob.",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "can you please tell me if Alice is friends with Bob ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "great . and who are Zach 's friends ?",
            "sql": "select * from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "and can you tell me , besides Alice and Zach , is there anyone else who is friends with Bob ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value and t1 . name ! = value and t1 . name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the male friend of Alice whose job is a doctor?",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me in witch city does Alice live ?",
            "sql": "select city from person where name = value"
        },
        {
            "utterance": "Great , how many males friends does she have ?",
            "sql": "select count ( * ) from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t2 . name = value and t1 . gender = value"
        },
        {
            "utterance": "What job does he have ?",
            "sql": "select job from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t2 . name = value and t1 . gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the female friends of Alice.",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest person ? | What attributes do you want for this person , name or something else ? | name",
            "sql": "select name from person order by age desc limit value"
        },
        {
            "utterance": "How many friends does Alice have ?",
            "sql": "select count ( t2 . friend ) from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t2 . name = value"
        },
        {
            "utterance": "How many of those are women ?",
            "sql": "select count ( t2 . friend ) from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t2 . name = value and t1 . gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Who is the person that has no friend?",
        "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend"
    },
    "interaction": [
        {
            "utterance": "Who is the person that has no friend ?",
            "sql": "select name from person except select name from personfriend"
        },
        {
            "utterance": "What is the job occupation of Zach ?",
            "sql": "select job from person where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 15,
    "final": {
        "utterance": "What is average age of male for different job title?",
        "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all males ?",
            "sql": "select avg ( age ) from person where gender = value"
        },
        {
            "utterance": "What are all the jobs of males ?",
            "sql": "select job from person where gender = value"
        },
        {
            "utterance": "What are the average ages of male engineers and male doctors ?",
            "sql": "select avg ( age ) , job from person where gender = value group by job"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of the person who has friends with age above 40 but not under age 30?",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
    },
    "interaction": [
        {
            "utterance": "Hi , how many people have friends with ages above 40 ?",
            "sql": "select count ( * ) from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend in ( select name from person where age > value )"
        },
        {
            "utterance": "Great . What is that person 's name ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend in ( select name from person where age > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 17,
    "final": {
        "utterance": "How many people whose age is greater 30 and job is engineer?",
        "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"
    },
    "interaction": [
        {
            "utterance": "How old is the student ? | Which student are you referring to ? | A better question is , how many students are there ?",
            "sql": "select count ( * ) from person where job = value"
        },
        {
            "utterance": "What about the number of people with occupations ? | By occupations , do you mean people who are not students ? | Yes",
            "sql": "select count ( * ) from person where job ! = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from person where job ! = value"
        },
        {
            "utterance": "And the names of the people who are not students ?",
            "sql": "select name from person where job ! = value"
        },
        {
            "utterance": "I need to know how many people there are whose age is greater than 30 and job is an engineer .",
            "sql": "select count ( * ) from person where age > value and job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 18,
    "final": {
        "utterance": "Who is the youngest male?",
        "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )"
    },
    "interaction": [
        {
            "utterance": "Who is the youngest male ?",
            "sql": "select name from person where gender = value and age = ( select min ( age ) from person where gender = value )"
        },
        {
            "utterance": "What is his age ?",
            "sql": "select age from person where gender = value and age = ( select min ( age ) from person where gender = value )"
        },
        {
            "utterance": "What is his job ?",
            "sql": "select job from person where gender = value and age = ( select min ( age ) from person where gender = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the person who has exactly one friend.",
        "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "What is the name that only has one friend pairing ?",
            "sql": "select name from personfriend group by name having count ( * ) = value"
        },
        {
            "utterance": "How many times does Alice show up in the friend column ?",
            "sql": "select count ( * ) from personfriend where friend = value"
        },
        {
            "utterance": "How many times does Bob show up in the friend column ?",
            "sql": "select count ( * ) from personfriend where friend = value"
        },
        {
            "utterance": "who is Bob 's friend ?",
            "sql": "select friend from personfriend where name = value"
        },
        {
            "utterance": "who is Zach 's friend ?",
            "sql": "select friend from personfriend where name = value"
        },
        {
            "utterance": "How many names are in the name column ?",
            "sql": "select count ( distinct name ) from personfriend"
        },
        {
            "utterance": "how many names are in the friends column ?",
            "sql": "select count ( distinct friend ) from personfriend"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the number of people whose age is greater than all engineers.",
        "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
    },
    "interaction": [
        {
            "utterance": "find the average age",
            "sql": "select avg ( age ) from person"
        },
        {
            "utterance": "how many are female",
            "sql": "select count ( * ) from person where gender = value"
        },
        {
            "utterance": "find the number of people whose age is greater than all engineers",
            "sql": "select count ( * ) from person where age > ( select max ( age ) from person where job = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of Dan or Alice.",
        "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "who are Dan 's friends ?",
            "sql": "select distinct t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "what is Dan 's friend 's name and age ?",
            "sql": "select distinct t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Who has friends that are younger than the average age?",
        "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)"
    },
    "interaction": [
        {
            "utterance": "What is Zach age ?",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "Who is the doctor works ? | Do you mean whose job is `` doctor '' ? | Yes",
            "sql": "select name from person where job = value"
        },
        {
            "utterance": "Who is in the town of new york ?",
            "sql": "select name from person where city = value"
        },
        {
            "utterance": "Who has friends that are younger than the average age ?",
            "sql": "select distinct t2 . name from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t1 . age < ( select avg ( age ) from person )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 23,
    "final": {
        "utterance": "Find Alice's friends of friends.",
        "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me who the friends of Alice 's friends are ?",
            "sql": "select distinct t4 . name from personfriend as t1 join person as t2 on t1 . name = t2 . name join personfriend as t3 on t1 . friend = t3 . name join personfriend as t4 on t3 . friend = t4 . name where t2 . name = value and t4 . name ! = value"
        },
        {
            "utterance": "What city does Zach live in ?",
            "sql": "select city from person where name = value"
        },
        {
            "utterance": "What are the names of everyone else who lives in Austin ?",
            "sql": "select name from person where city = value"
        },
        {
            "utterance": "Who are Zach 's friends ?",
            "sql": "select friend from personfriend where name = value"
        },
        {
            "utterance": "What are their jobs ?",
            "sql": "select name , job from person where name in ( select friend from personfriend where name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the total number of people who has no friend living in the city of Austin.",
        "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "How many people are from Austin ?",
            "sql": "select count ( * ) from person where city = value"
        },
        {
            "utterance": "How many friends do Alice and Bob have combined ?",
            "sql": "select count ( * ) from personfriend where name = value or name = value"
        },
        {
            "utterance": "Okay , so who has a friend in Austin ?",
            "sql": "select name from personfriend where friend in ( select name from person where city = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Who are the friends of Bob?",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "How many people are in New York City ?",
            "sql": "select count ( * ) from person where city = value"
        },
        {
            "utterance": "How many friends does Bob have ?",
            "sql": "select count ( * ) from ( select t2 . friend from person as t1 join personfriend as t2 on t1 . name = t2 . name where t1 . name = value )"
        },
        {
            "utterance": "What is Bob 's friend 's name ?",
            "sql": "select t2 . friend from person as t1 join personfriend as t2 on t1 . name = t2 . name where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of persons who are friends with Bob.",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( * ) from person where job = value"
        },
        {
            "utterance": "How many persons are there ?",
            "sql": "select count ( * ) from person"
        },
        {
            "utterance": "How many friends are there ?",
            "sql": "select count ( distinct friend ) from personfriend"
        },
        {
            "utterance": "How many of them are friends with Bob ?",
            "sql": "select count ( * ) from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "Who is Bob 's friend ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "What person has Zach as a friend ?",
            "sql": "select t1 . name from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the total number of people who has no friend living in the city of Austin.",
        "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "What is the total number of people who has no friend living in the city of Austin ?",
            "sql": "select count ( distinct name ) from personfriend where friend not in ( select name from person where city = value )"
        },
        {
            "utterance": "What about in New York City ?",
            "sql": "select count ( distinct name ) from personfriend where friend not in ( select name from person where city = value )"
        },
        {
            "utterance": "What about Salt Lake City ?",
            "sql": "select count ( distinct name ) from personfriend where friend not in ( select name from person where city = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct name from personfriend where friend not in ( select name from person where city = value )"
        },
        {
            "utterance": "What are the names of the people with no friends in New York City ?",
            "sql": "select distinct name from personfriend where friend not in ( select name from person where city = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the name of the person who has no student friends.",
        "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'"
    },
    "interaction": [
        {
            "utterance": "is there any person who has no student friends",
            "sql": "select * from person except select * from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t1 . job = value"
        },
        {
            "utterance": "is there any person friend for this persons",
            "sql": "select name from person except select t2 . name from person as t1 join personfriend as t2 on t1 . name = t2 . friend where t1 . job = value intersect select t3 . name from person as t4 join personfriend as t3 on t4 . name = t3 . friend"
        },
        {
            "utterance": "ok , list the name of the person who has no student friend in ascending order",
            "sql": "select name from person except select t2 . name from person as t1 join personfriend as t2 on t1 . name = t2 . friend order by name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Who is the oldest person whose job is student?",
        "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with a list of all of the names of people on this list ?",
            "sql": "select name from person"
        },
        {
            "utterance": "Thank you for that ! Can you update the list with the job of each person as well ? | Would you like me to show you the names of all persons and also their corresponding job ? | Yes please !",
            "sql": "select name , job from person"
        },
        {
            "utterance": "Can you filter this list to show only the students ? | Would you like me to show you a list of names and corresponding jobs for people whose job is student ? | Yes please !",
            "sql": "select name , job from person where job = value"
        },
        {
            "utterance": "Alright ! Can you filter that list to show only the individual who is the oldest ?",
            "sql": "select name , job from person where job = value order by age desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "What is Alice friend name ?",
            "sql": "select friend from personfriend where name = value"
        },
        {
            "utterance": "How old is Alice friend ?",
            "sql": "select age from person as t1 where name = ( select friend from personfriend where name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 31,
    "final": {
        "utterance": "How old is the doctor named Zach?",
        "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'"
    },
    "interaction": [
        {
            "utterance": "What city does Alice live in ?",
            "sql": "select city from person where name = value"
        },
        {
            "utterance": "What gender is Alice ?",
            "sql": "select gender from person where name = value"
        },
        {
            "utterance": "What job does Bob do ?",
            "sql": "select job from person where name = value"
        },
        {
            "utterance": "How old is Bob ?",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "Where does he live ?",
            "sql": "select city from person where name = value"
        },
        {
            "utterance": "How many males are there ?",
            "sql": "select count ( * ) from person where gender = value"
        },
        {
            "utterance": "How about Salt Lake City ? | Would you like a list of the names of all the people who live in Salt Lake City ? | Who is the oldest person ?",
            "sql": "select name from person order by age desc limit value"
        },
        {
            "utterance": "How old is the doctor named Zach ?",
            "sql": "select age from person where name = value"
        },
        {
            "utterance": "How many male engineers are there ?",
            "sql": "select count ( * ) from person where gender = value and job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 32,
    "final": {
        "utterance": "How many friends does Dan have?",
        "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
    },
    "interaction": [
        {
            "utterance": "In which city do Dan friends reside",
            "sql": "select t1 . city from person as t1 join personfriend as t2 on t1 . name = t2 . name where t1 . name = value"
        },
        {
            "utterance": "Give me the full details of Zach",
            "sql": "select * from person where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the number of people who is under 40 for each gender.",
        "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"
    },
    "interaction": [
        {
            "utterance": "How many females are under age 40 ?",
            "sql": "select count ( * ) from person where gender = value and age < value"
        },
        {
            "utterance": "How many males do we have data for ?",
            "sql": "select count ( * ) from person where gender = value"
        },
        {
            "utterance": "And how many of them are under age 40 ?",
            "sql": "select count ( * ) from person where age < value and gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "Find the name and age of the person who is a friend of both Dan and Alice .",
            "sql": "select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value intersect select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "Find the name and age of the person who is a friend of both Dan and Zach",
            "sql": "select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value intersect select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "Find the name and age of the person who is a friend of both Dan and Bob .",
            "sql": "select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value intersect select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        },
        {
            "utterance": "Find the name and age of the person who is a friend of both Bob and Zach .",
            "sql": "select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value intersect select t1 . name , t1 . age from person as t1 join personfriend as t2 on t1 . name = t2 . name where t2 . friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 0,
    "final": {
        "utterance": "Which head's name has the substring 'Ha'? List the id and name.",
        "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
    },
    "interaction": [
        {
            "utterance": "Which head 's name has the substring 'Ha ' ? List the id and name",
            "sql": "select head_id , name from head where name like value"
        },
        {
            "utterance": "Who is head id 1 ?",
            "sql": "select name from head where head_id = value"
        },
        {
            "utterance": "What is Tiger woods 's born state",
            "sql": "select born_state from head where name = value"
        },
        {
            "utterance": "what is Tiger woods 's age",
            "sql": "select age from head where name = value"
        },
        {
            "utterance": "who is the oldest head",
            "sql": "select * from head order by age desc limit value"
        },
        {
            "utterance": "how many heads from Alabama ?",
            "sql": "select count ( * ) from head where born_state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the distinct ages of the heads who are acting?",
        "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "How many heads are temporary acting ?",
            "sql": "select count ( * ) from management where temporary_acting = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t1 . name from management as t2 join head as t1 on t1 . head_id = t2 . head_id where t2 . temporary_acting = value"
        },
        {
            "utterance": "What are their distinct ages ?",
            "sql": "select distinct t1 . age from management as t2 join head as t1 on t1 . head_id = t2 . head_id where t2 . temporary_acting = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 2,
    "final": {
        "utterance": "In which year were most departments established?",
        "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! How are you ? Can you please provide me with a list of all department IDs , department names , and their respective years of creation ?",
            "sql": "select department_id , name , creation from department"
        },
        {
            "utterance": "Excellent ! Can you filter this list to include only the rows that contain the most common ( most frequently occurring ) year of creation ?",
            "sql": "select department_id , name , creation from department where creation = ( select creation from department group by creation order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Perfect ! Can you tell me what is the total combined budget of these two departments ?",
            "sql": "select sum ( budget_in_billions ) from department where creation = ( select creation from department group by creation order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 3,
    "final": {
        "utterance": "Which head's name has the substring 'Ha'? List the id and name.",
        "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
    },
    "interaction": [
        {
            "utterance": "tell me the name of head id 1",
            "sql": "select name from head where head_id = value"
        },
        {
            "utterance": "Tell me the born state and age for head id 3",
            "sql": "select born_state , age from head where head_id = value"
        },
        {
            "utterance": "Which head 's name has the substring 'Ha ' ? List the id and name .",
            "sql": "select head_id , name from head where name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the maximum and minimum budget of the departments?",
        "sql": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department"
    },
    "interaction": [
        {
            "utterance": "how many departments are there ?",
            "sql": "select count ( * ) from department"
        },
        {
            "utterance": "how many employees are there in Department ID 2",
            "sql": "select num_employees from department where department_id = value"
        },
        {
            "utterance": "what is the name of Department ID 3",
            "sql": "select name from department where department_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'"
    },
    "interaction": [
        {
            "utterance": "where is Sergio Garc\u00eda born",
            "sql": "select born_state from head where name = value"
        },
        {
            "utterance": "what is the highest head id in the management",
            "sql": "select max ( head_id ) from head"
        },
        {
            "utterance": "give me the age of all the people in the mangement",
            "sql": "select t1 . age from head as t1 join management as t2 on t1 . head_id = t2 . head_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "Show me the departments managed by heads whose temporary acting value is 'Yes ' , please | The table shows the ids of departments managed by heads whose temporary acting value is 'Yes ' . | Great , could you tell me the name and number of employees within those departments ?",
            "sql": "select t1 . name , t1 . num_employees from department as t1 join management as t2 on t1 . department_id = t2 . department_id where t2 . temporary_acting = value"
        },
        {
            "utterance": "Awesome , could you show me the budget of those departments ?",
            "sql": "select budget_in_billions from department as t1 join management as t2 on t1 . department_id = t2 . department_id where t2 . temporary_acting = value"
        },
        {
            "utterance": "Could you tell me when those departments were founded , and display the name next to each founding year ?",
            "sql": "select creation , name from department as t1 join management as t2 on t1 . department_id = t2 . department_id where t2 . temporary_acting = value"
        },
        {
            "utterance": "Could you tell me how many departments have a head whose temporary acting value is 'no ' ?",
            "sql": "select count ( * ) from management where temporary_acting = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "What are the departments managed by heads whose temporary acting value is `` yes '' ? | The following table shows the names of departments managed by heads whose temporary acting value is `` yes '' . | Show me the name and number of employees for the Treasury department .",
            "sql": "select name , num_employees from department where name = value"
        },
        {
            "utterance": "Show me the number of employees for the Homeland Security department .",
            "sql": "select name , num_employees from department where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 8,
    "final": {
        "utterance": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which department has more than 1 head at a time ? List the ID , Name and the number of heads .",
            "sql": "select t1 . department_id , t1 . name , count ( * ) from management as t2 join department as t1 on t1 . department_id = t2 . department_id group by t1 . department_id having count ( * ) > value"
        },
        {
            "utterance": "Which Department has the most number of employee ? tell me the rank and creation year .",
            "sql": "select ranking , creation from department where num_employees = ( select max ( num_employees ) from department )"
        },
        {
            "utterance": "Which Department has the least number of employee ? tell me the rank and creation year .",
            "sql": "select ranking , creation from department where num_employees = ( select min ( num_employees ) from department )"
        },
        {
            "utterance": "Which Department has the highest Budget value ? tell me the rank and creation year .",
            "sql": "select ranking , creation from department where budget_in_billions = ( select max ( budget_in_billions ) from department )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 9,
    "final": {
        "utterance": "In which year were most departments established?",
        "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "In which year were most departments established ?",
            "sql": "select creation from department group by creation order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many different departments were created in 1789 ?",
            "sql": "select count ( * ) from department group by creation order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the names of those two departments ?",
            "sql": "select name from department group by creation order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many employees does the Treasury Department have ?",
            "sql": "select num_employees from department where name = value"
        },
        {
            "utterance": "What is the budget in billions of the Treasury Department ?",
            "sql": "select budget_in_billions from department where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 10,
    "final": {
        "utterance": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'"
    },
    "interaction": [
        {
            "utterance": "Can you list the states where the secretaries of the Treasury department were born ?",
            "sql": "select t3 . born_state from department as t1 join management as t2 on t1 . department_id = t2 . department_id join head as t3 on t2 . head_id = t3 . head_id where t1 . name = value"
        },
        {
            "utterance": "Can you list the states where the secretaries of the Homeland Security department were born ?",
            "sql": "select t3 . born_state from department as t1 join management as t2 on t1 . department_id = t2 . department_id join head as t3 on t2 . head_id = t3 . head_id where t1 . name = value"
        },
        {
            "utterance": "What departments employ more than 100,000 employees ?",
            "sql": "select * from department where num_employees > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the role code with the largest number of employees?",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me which role code has the largest number of employees associated with it ?",
            "sql": "select role_code from employees group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Great ! Can you tell me how many employees have ED as their Role_code ?",
            "sql": "select count ( * ) from employees where role_code = value"
        },
        {
            "utterance": "Excellent ! Would you be able to provide me with a list of the names and genders of those 7 employees ?",
            "sql": "select employee_name , gender_mfu from employees where role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the role code with the largest number of employees?",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( * ) from employees"
        },
        {
            "utterance": "Which of the role codes has the most employees ?",
            "sql": "select role_code from employees group by role_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many employees does role code ED have ?",
            "sql": "select count ( * ) from employees where role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the role code with the least employees.",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me the name of an HR employee ?",
            "sql": "select employee_name from employees where role_code = value"
        },
        {
            "utterance": "Great , can you show the role code with the last employees ? | Did you mean the employee with the largest id ? | yes",
            "sql": "select role_code from employees order by employee_id desc limit value"
        },
        {
            "utterance": "and the role code with the least employees ?",
            "sql": "select role_code from employees group by role_code order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the ids of all employees who don't destroy any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Would you please show me the ids of all employees who do n't destroy any documents ?",
            "sql": "select employee_id from employees except select destroyed_by_employee_id from documents_to_be_destroyed"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select employee_name from employees except select destroyed_by_employee_id from documents_to_be_destroyed"
        },
        {
            "utterance": "Would you please show me the ids of all employees who do destroy any documents ?",
            "sql": "select employee_id from employees as t1 join documents_to_be_destroyed as t2 on t1 . employee_id = t2 . destroyed_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 4,
    "final": {
        "utterance": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\""
    },
    "interaction": [
        {
            "utterance": "How many documents are named `` Robin CV '' ?",
            "sql": "select count ( * ) from all_documents where document_name = value"
        },
        {
            "utterance": "What is the document id of that document ?",
            "sql": "select document_id from all_documents where document_name = value"
        },
        {
            "utterance": "What is the date in location from for this document ?",
            "sql": "select t2 . date_in_location_from from all_documents as t1 join document_locations as t2 on t1 . document_id = t2 . document_id where t1 . document_name = value"
        },
        {
            "utterance": "What is the date in location to date ?",
            "sql": "select t2 . date_in_locaton_to from all_documents as t1 join document_locations as t2 on t1 . document_id = t2 . document_id where t1 . document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the ids of all employees who don't destroy any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Which employees did not destroy any documents ? | Do you want the ids of all the employees who did not destroy any documents ? | Yes . Show the IDs of all employees who did n't destroy any documents please .",
            "sql": "select employee_id from employees except select destroyed_by_employee_id from documents_to_be_destroyed"
        },
        {
            "utterance": "Thank you . What are their names ?",
            "sql": "select employee_name from employees where employee_id in ( select employee_id from employees except select destroyed_by_employee_id from documents_to_be_destroyed )"
        },
        {
            "utterance": "Thank you . What are their roles ?",
            "sql": "select role_code from employees where employee_id in ( select employee_id from employees except select destroyed_by_employee_id from documents_to_be_destroyed )"
        },
        {
            "utterance": "Yes . What is their date of birth ?",
            "sql": "select date_of_birth from employees where employee_id in ( select employee_id from employees except select destroyed_by_employee_id from documents_to_be_destroyed )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the ids of the employees who don't authorize destruction for any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( employee_id ) from employees"
        },
        {
            "utterance": "How many employee have the ability to authorize the destruction of documents ?",
            "sql": "select count ( destruction_authorised_by_employee_id ) from documents_to_be_destroyed"
        },
        {
            "utterance": "What are the ids of those particular employees ?",
            "sql": "select destruction_authorised_by_employee_id from documents_to_be_destroyed"
        },
        {
            "utterance": "Now how many employees ca n't authorize the destruction of documents .",
            "sql": "select sum ( employee_id ) from employees except select destruction_authorised_by_employee_id from documents_to_be_destroyed"
        },
        {
            "utterance": "May I have the ids of those employees who cant authorize the destruction of documents ?",
            "sql": "select employee_id from employees except select destruction_authorised_by_employee_id from documents_to_be_destroyed"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the location code with the most documents?",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the location code with the most documents ?",
            "sql": "select location_code from document_locations group by location_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you also tell me how many documents are there for that location ? | Do you mean the number of documents in the location with code x ? | Yes , please .",
            "sql": "select count ( * ) from document_locations where location_code = value"
        },
        {
            "utterance": "How about the location code with the least documents ?",
            "sql": "select location_code from document_locations group by location_code order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of employees with role name Editor.",
        "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""
    },
    "interaction": [
        {
            "utterance": "How many employees have the role name Editor ?",
            "sql": "select t1 . employee_name from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value"
        },
        {
            "utterance": "Can you list their names in this chat box ?",
            "sql": "select t1 . employee_name from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value"
        },
        {
            "utterance": "How many have a DOB after 1978 ?",
            "sql": "select count ( * ) from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value and t1 . date_of_birth > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( * ) from employees"
        },
        {
            "utterance": "what is the planned destruction date of document ID 11",
            "sql": "select planned_destruction_date from documents_to_be_destroyed where document_id = value"
        },
        {
            "utterance": "what is the employee name of employee ID 30",
            "sql": "select employee_name from employees where employee_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\""
    },
    "interaction": [
        {
            "utterance": "How about for all employees with the role name `` Human Resource '' ?",
            "sql": "select t1 . employee_id from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value"
        },
        {
            "utterance": "What is that employee 's name ?",
            "sql": "select t1 . employee_name from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value"
        },
        {
            "utterance": "What is the name of the employee whose role name is Manager ?",
            "sql": "select t1 . employee_name from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value"
        },
        {
            "utterance": "What is the name of the employee whose role name is Human Resources ?",
            "sql": "select t1 . employee_name from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the location code with the most documents?",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the location code that has the largest number of documents ?",
            "sql": "select location_code from document_locations group by location_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the least number of documents ?",
            "sql": "select location_code from document_locations group by location_code order by count ( * ) asc limit value"
        },
        {
            "utterance": "How about date in location from , then ?",
            "sql": "select location_code from document_locations order by date_in_location_from desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of employees with role name Editor.",
        "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""
    },
    "interaction": [
        {
            "utterance": "Show the names of employees with role name Editor .",
            "sql": "select t1 . employee_name from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t2 . role_name = value"
        },
        {
            "utterance": "Show the names of roles with role code..",
            "sql": "select role_code , role_name from roles"
        },
        {
            "utterance": "Show the id of employees with role Role_Code",
            "sql": "select employee_id , role_code from employees"
        },
        {
            "utterance": "Show the Role_Code of roles with Role_Description .",
            "sql": "select role_code , role_description from roles"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the location codes with at least 3 documents.",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "What are the location codes of all the documents ?",
            "sql": "select distinct location_code from document_locations"
        },
        {
            "utterance": "What are the document id of all the location code ? | Do you mean you wan na see the whole document ids or see the document id and its location codes at the same time . | Whole document ids",
            "sql": "select distinct document_id from document_locations"
        },
        {
            "utterance": "What is the date in location from of document id 81 ?",
            "sql": "select date_in_location_from from document_locations where document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the role name and role description for employee called Ebba?",
        "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\""
    },
    "interaction": [
        {
            "utterance": "how many employees are there ?",
            "sql": "select count ( * ) from employees"
        },
        {
            "utterance": "show their names please .",
            "sql": "select employee_name from employees"
        },
        {
            "utterance": "what is the date of birth of the employee named Ebba ?",
            "sql": "select date_of_birth from employees where employee_name = value"
        },
        {
            "utterance": "ok , what are her role name and description ?",
            "sql": "select t2 . role_name , t2 . role_description from employees as t1 join roles as t2 on t1 . role_code = t2 . role_code where t1 . employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the location name and code with the least documents.",
        "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of location name ?",
            "sql": "select location_name from ref_locations"
        },
        {
            "utterance": "can you show me a list of date in location to ? | Do you mean list of `` date in location to '' from the document locations table ? | yes",
            "sql": "select date_in_locaton_to from document_locations"
        },
        {
            "utterance": "show the location name and code with the least documents .",
            "sql": "select t2 . location_name , t1 . location_code from document_locations as t1 join ref_locations as t2 on t1 . location_code = t2 . location_code group by t1 . location_code order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the total saving balance for each account name.",
        "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "What is the savings balance for Wang ?",
            "sql": "select sum ( t2 . balance ) from accounts as t1 join savings as t2 on t1 . custid = t2 . custid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    "interaction": [
        {
            "utterance": "what is the savings balance of id 1 ? | Did you mean the saving balance of the customer with id 1 ? | yes",
            "sql": "select balance from savings where custid = value"
        },
        {
            "utterance": "what is the total checking and saving balance of all accounts ?",
            "sql": "select t1 . balance + t2 . balance from checking as t1 join savings as t2 on t1 . custid = t2 . custid"
        },
        {
            "utterance": "what is the sorted list of total checking and savings balance by ascending order ?",
            "sql": "select t1 . balance + t2 . balance from checking as t1 join savings as t2 on t1 . custid = t2 . custid order by t1 . balance + t2 . balance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
    },
    "interaction": [
        {
            "utterance": "What is the average savings account balance ?",
            "sql": "select avg ( balance ) from savings"
        },
        {
            "utterance": "Which accounts with checking accounts have savings account balances higher than the average savings balance ?",
            "sql": "select t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid where t1 . name in ( select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid where t2 . balance > ( select avg ( balance ) from savings ) )"
        },
        {
            "utterance": "What is its checking account balance ?",
            "sql": "select t2 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid where t1 . name in ( select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid where t2 . balance > ( select avg ( balance ) from savings ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
    },
    "interaction": [
        {
            "utterance": "How many balance of customer id 1 ? | Do you want the saving balance of the customer with id 1 ? | Yes",
            "sql": "select balance from savings where custid = value"
        },
        {
            "utterance": "Find the savings balance of Wang ?",
            "sql": "select t2 . balance from accounts as t1 join savings as t2 on t1 . custid = t2 . custid where t1 . name = value"
        },
        {
            "utterance": "What are the accountant name of customer id 3 ?",
            "sql": "select name from accounts where custid = value"
        },
        {
            "utterance": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance .",
            "sql": "select t2 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid where t1 . name in ( select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid where t2 . balance > ( select avg ( balance ) from savings ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know what is the average savings balance of all customers ?",
            "sql": "select avg ( balance ) from savings"
        },
        {
            "utterance": "Awesome , thank you . Then could you please show me the ID of the customers who have higher balance than this average ?",
            "sql": "select custid from savings where balance > ( select avg ( balance ) from savings )"
        },
        {
            "utterance": "oh that 's a bit surprising , maybe this person is elevating the average a lot . Thank you , then could you please show me this customer 's balance on both CHECKING and SAVINGS table ?",
            "sql": "select t2 . balance , t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t3 . balance > ( select avg ( balance ) from savings )"
        },
        {
            "utterance": "That 's great , thank you . Then could you please let me know what is the sum of those two accounts ?",
            "sql": "select t2 . balance + t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t3 . balance > ( select avg ( balance ) from savings )"
        },
        {
            "utterance": "Thank you . Then could you please let me know what would be the difference between the balances of the two accounts ?",
            "sql": "select t3 . balance - t2 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t3 . balance > ( select avg ( balance ) from savings )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
    },
    "interaction": [
        {
            "utterance": "Whose savings balance is lower than their checking balance ?",
            "sql": "select t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t3 . balance < t2 . balance"
        },
        {
            "utterance": "What is the total balance of `` Weeks '' Checking and savings .",
            "sql": "select t3 . balance + t2 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t1 . name = value"
        },
        {
            "utterance": "Also , what is their customer ID ? | Weeks 's id ? | yes , Weeks ' ID , please .",
            "sql": "select custid from accounts where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the saving balance of the account with the highest checking balance.",
        "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the saving balance of the account with the highest checking balance .",
            "sql": "select t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid order by t2 . balance desc limit value"
        },
        {
            "utterance": "And how about the lowest ?",
            "sql": "select t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid order by t2 . balance limit value"
        },
        {
            "utterance": "Checking balance of Customer id 3",
            "sql": "select balance from checking where custid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
        "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'"
    },
    "interaction": [
        {
            "utterance": "what is the highest saving balance ?",
            "sql": "select max ( balance ) from savings"
        },
        {
            "utterance": "what is the lowest saving balance ?",
            "sql": "select min ( balance ) from savings"
        },
        {
            "utterance": "can you show me a list of accounts name ?",
            "sql": "select name from accounts"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest saving balance.",
        "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the number of customers ?",
            "sql": "select count ( distinct custid ) from accounts"
        },
        {
            "utterance": "how about the number of checking accounts ?",
            "sql": "select count ( * ) from checking"
        },
        {
            "utterance": "what 's the lowest balance of a savings account ?",
            "sql": "select min ( balance ) from savings"
        },
        {
            "utterance": "who owns that account ?",
            "sql": "select t2 . custid from accounts as t1 join savings as t2 on t1 . custid = t2 . custid order by t2 . balance limit value"
        },
        {
            "utterance": "what 's the checking balance of that person ?",
            "sql": "select t2 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid order by t3 . balance limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the average checking balance of all checking accounts ?",
            "sql": "select avg ( balance ) from checking"
        },
        {
            "utterance": "Hmm , I also want to know the average savings balance of all savings accounts .",
            "sql": "select avg ( balance ) from savings"
        },
        {
            "utterance": "Can you list the names of accounts whose checking balance is above the average checking balance , but savings balance is below the average savings balance ?",
            "sql": "select t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid where t2 . balance > ( select avg ( balance ) from checking ) intersect select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid where t2 . balance < ( select avg ( balance ) from savings )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest saving balance.",
        "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you display a list of all of the Savings Account customer IDs and the associated balances ?",
            "sql": "select custid , balance from savings"
        },
        {
            "utterance": "Thanks ! Can you also update that list to show the checking balance for each customer ?",
            "sql": "select balance from checking"
        },
        {
            "utterance": "Okay ! Can you show me the customer name that is associate with the lowest savings account balance ?",
            "sql": "select t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid order by t3 . balance limit value"
        },
        {
            "utterance": "Alright ! Can you now show me his checking account balance ?",
            "sql": "select t2 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    "interaction": [
        {
            "utterance": "yes | Please clarify which one do you need | I need the Checking balance",
            "sql": "select balance from checking where custid = value"
        },
        {
            "utterance": "what is the name of the custid 2 in Table name : ACCOUNTS",
            "sql": "select name from accounts where custid = value"
        },
        {
            "utterance": "what is the saving Balance Amount of the custid 2",
            "sql": "select balance from savings where custid = value"
        },
        {
            "utterance": "Finding the checking balance and saving balance in the Brown 's account",
            "sql": "select t2 . balance , t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    "interaction": [
        {
            "utterance": "FIND THE all CHECKING BALANCE OF ALL ACCOUNTS",
            "sql": "select balance from checking"
        },
        {
            "utterance": "FIND THE SAVING BALANCE OF ALL ACCOUNTS",
            "sql": "select balance from savings"
        },
        {
            "utterance": "SORT ALL THE TOTAL BALANCE OF CHECKING AND SAVING ACCOUNT IN ASCENDING ORDER",
            "sql": "select t1 . balance + t2 . balance from checking as t1 join savings as t2 on t1 . custid = t2 . custid order by t1 . balance + t2 . balance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest savings balance.",
        "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the customer name with the highest bank balance ? | Do you mean his savings balance ? | yes savings balance ?",
            "sql": "select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid order by t2 . balance desc limit value"
        },
        {
            "utterance": "What is his customer id ?",
            "sql": "select t1 . custid from accounts as t1 join savings as t2 on t1 . custid = t2 . custid order by t2 . balance desc limit value"
        },
        {
            "utterance": "What is the customer ID with lowest saving balance ?",
            "sql": "select custid from savings order by balance asc limit value"
        },
        {
            "utterance": "How many customers have a minimum balance of atleast 30 , 000 ? | Do you mean the saving balance or the checking balance or the sum of the two ? | I want saving balance .",
            "sql": "select count ( * ) from savings where balance > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of account that has the lowest total checking and saving balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of account that has the lowest total checking and saving balance .",
            "sql": "select t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid order by t2 . balance + t3 . balance limit value"
        },
        {
            "utterance": "Ok ! . Can you please give me the names of the accounts where the checking balance is more than 3000",
            "sql": "select t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t2 . balance > value"
        },
        {
            "utterance": "Give me the names of the accounts where the savings balance is more than 20000",
            "sql": "select t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid where t3 . balance > value"
        },
        {
            "utterance": "What is the highest balance in the savings account ?",
            "sql": "select balance from savings order by balance desc limit value"
        },
        {
            "utterance": "Hmmm . Please tell me what is the lowest balance in the savings account .",
            "sql": "select min ( balance ) from savings"
        },
        {
            "utterance": "Can you also give me the lowest and the highest balance for checking account .",
            "sql": "select max ( balance ) , min ( balance ) from checking"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the number of checking accounts for each account name.",
        "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "I need to know the number of checking accounts for each account name .",
            "sql": "select count ( * ) , t1 . name from accounts as t1 join checking as t2 on t1 . custid = t2 . custid group by t1 . name"
        },
        {
            "utterance": "What is the highest account balance of customers with checking accounts ?",
            "sql": "select max ( balance ) from checking"
        },
        {
            "utterance": "What about the lowest account balance with customers with checking accounts ?",
            "sql": "select min ( balance ) from checking"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the saving balance of the account with the highest checking balance.",
        "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of checking balance ?",
            "sql": "select * from checking"
        },
        {
            "utterance": "can you show me a list of saving balance ?",
            "sql": "select * from savings"
        },
        {
            "utterance": "can you show me a list of ACCOUNTS name ?",
            "sql": "select * from accounts"
        },
        {
            "utterance": "find the saving balance of the account with the highest checking balance ?",
            "sql": "select t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid order by t2 . balance desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many accounts have a savings balance above the average savings balance?",
        "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "how many accounts have a savings balance above the average savings balance ?",
            "sql": "select count ( * ) from savings where balance > ( select avg ( balance ) from savings )"
        },
        {
            "utterance": "what was my savings amount balance ? | Sorry , what is your customer id ? | 1339",
            "sql": "select * from savings where custid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the total saving balance for each account name.",
        "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "What is the highest balance ?",
            "sql": "select max ( balance ) from savings"
        },
        {
            "utterance": "How about the lowest ?",
            "sql": "select min ( balance ) from savings"
        },
        {
            "utterance": "List all the people with accounts",
            "sql": "select name from accounts"
        },
        {
            "utterance": "And how much money does each one have saved ?",
            "sql": "select sum ( t2 . balance ) , t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid group by t1 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the names and total checking and savings account balances ?",
            "sql": "select t1 . name , t2 . balance + t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid"
        },
        {
            "utterance": "I want to know the average savings balance of all accounts .",
            "sql": "select avg ( balance ) from savings"
        },
        {
            "utterance": "Hmm , can you list the names of customers whose savings account balances are higher than the average savings balance ?",
            "sql": "select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid where t2 . balance > ( select avg ( balance ) from savings )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me the names on all accounts in the bank ?",
            "sql": "select name from accounts"
        },
        {
            "utterance": "What are the checking and savings balances on those accounts ? Could you please sort them by their total balances in descending order ?",
            "sql": "select t2 . balance , t3 . balance from accounts as t1 join checking as t2 on t1 . custid = t2 . custid join savings as t3 on t1 . custid = t3 . custid order by t2 . balance + t3 . balance desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Find the name of the top 3 accounts with the highest saving balance sorted by savings balance in descending order .",
            "sql": "select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid order by t2 . balance desc limit value"
        },
        {
            "utterance": "Can you add in their customer IDs to the table please ?",
            "sql": "select t1 . name , t2 . custid from accounts as t1 join savings as t2 on t1 . custid = t2 . custid order by t2 . balance desc limit value"
        },
        {
            "utterance": "What is the average balance of all accounts ?",
            "sql": "select avg ( t2 . balance ) from accounts as t1 join savings as t2 on t1 . custid = t2 . custid"
        },
        {
            "utterance": "What is the name on the account with the lowest balance ? | The name of the account with the lowest saving balance is Weeks | What is the name on the account with the third highest saving balance ?",
            "sql": "select t1 . name from accounts as t1 join savings as t2 on t1 . custid = t2 . custid order by t2 . balance desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
    },
    "interaction": [
        {
            "utterance": "Which nations have hosts older than 45 ?",
            "sql": "select distinct nationality from host where age > value"
        },
        {
            "utterance": "Which nations have hosts younger than 35 ?",
            "sql": "select distinct nationality from host where age < value"
        },
        {
            "utterance": "Which nation has hosts both older than 45 and younger than 35 ?",
            "sql": "select nationality from host where age > value intersect select nationality from host where age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the host names for parties with number of hosts greater than 20.",
        "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"
    },
    "interaction": [
        {
            "utterance": "What are the names of the hosts that held parties with more than 20 hosts ?",
            "sql": "select t2 . name from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id where t3 . number_of_hosts > value"
        },
        {
            "utterance": "What are the names of the hosts that held parties with the least number of hosts ?",
            "sql": "select t2 . name from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id order by t3 . number_of_hosts asc limit value"
        },
        {
            "utterance": "What is the location of the party with the oldest host ?",
            "sql": "select t3 . location from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id order by t2 . age desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the themes of parties and the names of the party hosts.",
        "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    "interaction": [
        {
            "utterance": "Can you list the themes of the parties with the names of the party hosts ?",
            "sql": "select t3 . party_theme , t2 . name from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id"
        },
        {
            "utterance": "What are the nationalities of the party hosts ?",
            "sql": "select t2 . nationality from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id"
        },
        {
            "utterance": "Who was the host of the earliest party listed ? | The host of the earliest party listed is the host with id 7 . | What was their name ?",
            "sql": "select t2 . name from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id order by t3 . first_year limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the themes of parties and the names of the party hosts.",
        "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    "interaction": [
        {
            "utterance": "Show me a list of party themes",
            "sql": "select party_theme from party"
        },
        {
            "utterance": "Can you show me the corresponding party id and host id to each theme ?",
            "sql": "select t1 . party_id , t1 . host_id , t3 . party_theme from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id"
        },
        {
            "utterance": "Can you add host names to that table ?",
            "sql": "select t2 . name , t1 . party_id , t1 . host_id , t3 . party_theme from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name and the nationality of the oldest host.",
        "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "whats the average age of the hosts ?",
            "sql": "select avg ( age ) from host"
        },
        {
            "utterance": "and how many of those 8 hosts are younger than 40 ?",
            "sql": "select count ( * ) from host where nationality = value and age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\""
    },
    "interaction": [
        {
            "utterance": "What are some parties with theme `` Spring '' ?",
            "sql": "select * from party where party_theme = value"
        },
        {
            "utterance": "What are the first year and last year of the parties with theme `` Teqnology ''",
            "sql": "select first_year , last_year from party where party_theme = value"
        },
        {
            "utterance": "OK , can you show me the first year and last year of parties with theme of both `` Spring '' and `` Teqnology '' ?",
            "sql": "select first_year , last_year from party where party_theme = value or party_theme = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the locations of parties with hosts older than 50.",
        "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
    },
    "interaction": [
        {
            "utterance": "which locations of parties have hosts older than 50 ?",
            "sql": "select t3 . location from party_host as t1 join host as t2 on t1 . host_id = t2 . host_id join party as t3 on t1 . party_id = t3 . party_id where t2 . age > value"
        },
        {
            "utterance": "How many hosts does party theme spring have ?",
            "sql": "select number_of_hosts from party where party_theme = value"
        },
        {
            "utterance": "How many parties are hosted in Hemkade 48 Zaandam ?",
            "sql": "select count ( * ) from party where location = value"
        },
        {
            "utterance": "How many hosts have the nationality united states ?",
            "sql": "select count ( * ) from host where nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the most common nationality of hosts.",
        "sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average age",
            "sql": "select avg ( age ) from host"
        },
        {
            "utterance": "who is the youngest",
            "sql": "select name from host order by age limit value"
        },
        {
            "utterance": "show the most common nationality of hosts",
            "sql": "select nationality from host group by nationality order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the location of the party with the most hosts?",
        "sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the locations available ?",
            "sql": "select location from party"
        },
        {
            "utterance": "what locations of the party have the most hosts ?",
            "sql": "select location from party order by number_of_hosts desc limit value"
        },
        {
            "utterance": "list the party themes available",
            "sql": "select party_theme from party"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
    },
    "interaction": [
        {
            "utterance": "What is the location of the Id no-1 ?",
            "sql": "select location from party where party_id = value"
        },
        {
            "utterance": "how many host in the id no_3 ?",
            "sql": "select number_of_hosts from party where party_id = value"
        },
        {
            "utterance": "what is the age of the host id 3 ?",
            "sql": "select age from host where host_id = value"
        },
        {
            "utterance": "which nationality of host id no-3 ?",
            "sql": "select nationality from host where host_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "What is the total number of staff members ?",
            "sql": "select count ( * ) from staff"
        },
        {
            "utterance": "What is the last name of the staff member with the first name `` Janessa '' ?",
            "sql": "select last_name from staff where first_name = value"
        },
        {
            "utterance": "What is the birthday of the staff member with the first and last name as Janessa and Sawayn ?",
            "sql": "select date_of_birth from staff where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 1,
    "final": {
        "utterance": "Which city does has most number of customers?",
        "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which city has most number of customers ?",
            "sql": "select t2 . city from customers as t1 join addresses as t2 on t1 . customer_address_id = t2 . address_id group by t2 . city order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many customers does it have ?",
            "sql": "select count ( * ) from customers as t1 join addresses as t2 on t1 . customer_address_id = t2 . address_id group by t2 . city order by count ( * ) desc limit value"
        },
        {
            "utterance": "Give me the names of those customers",
            "sql": "select t1 . first_name , t1 . last_name from customers as t1 join addresses as t2 on t2 . address_id = t1 . customer_address_id where t2 . city = ( select t2 . city from customers as t1 join addresses as t2 on t1 . customer_address_id = t2 . address_id group by t2 . city order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the first name of the staff who did not give any lesson?",
        "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id"
    },
    "interaction": [
        {
            "utterance": "How many people are in the staff ?",
            "sql": "select count ( * ) from staff"
        },
        {
            "utterance": "How many of these people cancelled their lesson ?",
            "sql": "select count ( distinct t2 . staff_id ) from lessons as t1 join staff as t2 on t1 . staff_id = t2 . staff_id where t1 . lesson_status_code = value"
        },
        {
            "utterance": "What is the first name of these people ?",
            "sql": "select t2 . first_name from lessons as t1 join staff as t2 on t1 . staff_id = t2 . staff_id where t1 . lesson_status_code = value group by t2 . first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "How many people are named Janessa ? | Do you mean the number of people whose first name is Janessa ? | Yes",
            "sql": "select count ( * ) from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value"
        },
        {
            "utterance": "What is the Zip Code where Janessa Lived ? | Do you mean the zip postcode in the address where Janessa lived ? | Yes",
            "sql": "select t1 . zip_postcode from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value"
        },
        {
            "utterance": "and Camylle ? | Do you mean the zip postcode in the area where the person with first name Camylle lived ? | Yes",
            "sql": "select t1 . zip_postcode from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value"
        },
        {
            "utterance": "What is the zip postcode where Kaitlin lived ? | Do you mean the zip postcode in the ares where the staff with first name Kaitlin lived ? | Yes",
            "sql": "select t1 . zip_postcode from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value"
        },
        {
            "utterance": "What is Kaitlin 's last name ? | Do you mean the last name of the staff whose first name is Kaitlin ? | Yes",
            "sql": "select last_name from staff where first_name = value"
        },
        {
            "utterance": "and Janessa ? | Do you mean the last name of the staff whose first name is Janessa ? | Yes",
            "sql": "select last_name from staff where first_name = value"
        },
        {
            "utterance": "What is the zip postcode where staff named Janessa Sawayn lived ? | Do you mean the zip code of staff with first name Janessa and last name Sawayn lived ? | Yes",
            "sql": "select t1 . zip_postcode from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value and t2 . last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 4,
    "final": {
        "utterance": "Which city lives most of staffs? List the city name and number of staffs.",
        "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What state or province has the most staff living in it ?",
            "sql": "select t1 . state_province_county from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id group by t1 . state_province_county order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the number of staff living in Georgia ?",
            "sql": "select count ( * ) from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id group by t1 . state_province_county order by count ( * ) desc limit value"
        },
        {
            "utterance": "What city in Georgia has the most staff living in it ?",
            "sql": "select t1 . city from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t1 . state_province_county = value group by t1 . city order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the number of staff living in Port Melyssa and what are their names ? | first name or last name ? | both please",
            "sql": "select t2 . first_name , t2 . last_name from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t1 . city = value"
        },
        {
            "utterance": "What are all their birthdays ?",
            "sql": "select t2 . date_of_birth from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t1 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 5,
    "final": {
        "utterance": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"
    },
    "interaction": [
        {
            "utterance": "How long is the total lesson time took by customer with first name Rylan and last name Goodwin ?",
            "sql": "select sum ( t1 . lesson_time ) from lessons as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . first_name = value and t2 . last_name = value"
        },
        {
            "utterance": "What 's the status of the lesson by the customer with first name Rylan and last name Goodwin",
            "sql": "select t1 . lesson_status_code from lessons as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . first_name = value and t2 . last_name = value"
        },
        {
            "utterance": "What 's the customer id of the customer with first name Rylan and last name Goodwin ?",
            "sql": "select customer_id from customers where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 6,
    "final": {
        "utterance": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customer_id ) from customers"
        },
        {
            "utterance": "please tell me Clara phone number",
            "sql": "select phone_number from customers where first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""
    },
    "interaction": [
        {
            "utterance": "What is the status code of the customer with the last name Kohler or first name Marina ?",
            "sql": "select customer_status_code from customers where first_name = value or last_name = value"
        },
        {
            "utterance": "What is the mobile phone number of the customer with the last name Kohler or first name Marina ?",
            "sql": "select phone_number from customers where first_name = value or last_name = value"
        },
        {
            "utterance": "How about their email addresses ?",
            "sql": "select email_address from customers where first_name = value or last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 8,
    "final": {
        "utterance": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
        "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with the country and state province county information for the staff member named Janessa Sawayn ? | Are you referring to the staff member having first name Janessa and last name Sawayn ? | Yes , that is correct !",
            "sql": "select t1 . country , t1 . state_province_county from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value and t2 . last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 9,
    "final": {
        "utterance": "How many lesson does customer with first name Ray took?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of lesson date ?",
            "sql": "select lesson_date from lessons"
        },
        {
            "utterance": "what is the average of lesson time ?",
            "sql": "select avg ( lesson_time ) from lessons"
        },
        {
            "utterance": "what is the highest price ?",
            "sql": "select price from lessons order by price desc limit value"
        },
        {
            "utterance": "how many lessons does customer with first name ray took ?",
            "sql": "select count ( * ) from lessons as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 10,
    "final": {
        "utterance": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "how many address are presented on the table",
            "sql": "select count ( * ) from addresses"
        },
        {
            "utterance": "list out the staff first name on the table",
            "sql": "select first_name from staff"
        },
        {
            "utterance": "what is the city of Janessa",
            "sql": "select t1 . city from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value"
        },
        {
            "utterance": "exactly",
            "sql": "select * from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t2 . first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 11,
    "final": {
        "utterance": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"
    },
    "interaction": [
        {
            "utterance": "What are the lessons thought by jenessa",
            "sql": "select t1 . lesson_id from lessons as t1 join staff as t2 on t1 . staff_id = t2 . staff_id where t2 . first_name = value"
        },
        {
            "utterance": "yes i need details",
            "sql": "select * from lessons where lesson_id = value"
        },
        {
            "utterance": "What was the lesson date",
            "sql": "select lesson_date from lessons where lesson_id = value"
        },
        {
            "utterance": "What was the lesson timing",
            "sql": "select lesson_time from lessons where lesson_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 12,
    "final": {
        "utterance": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "how many Lessons there",
            "sql": "select count ( * ) from lessons"
        },
        {
            "utterance": "what is the nickname of staff id 3",
            "sql": "select nickname from staff where staff_id = value"
        },
        {
            "utterance": "what is the middle name if staff with id 2",
            "sql": "select middle_name from staff where staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 13,
    "final": {
        "utterance": "List the states which have between 2 to 4 staffs living there.",
        "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"
    },
    "interaction": [
        {
            "utterance": "Which state have more than 2 staff members living there ?",
            "sql": "select t1 . state_province_county from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id group by t1 . state_province_county having count ( * ) > value"
        },
        {
            "utterance": "Of those 2 states , which ones have less than 4 staff members living there ?",
            "sql": "select t1 . state_province_county from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id group by t1 . state_province_county having count ( * ) > value and count ( * ) < value"
        },
        {
            "utterance": "Precisely how many staff members live in Connecticut ?",
            "sql": "select count ( * ) from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t1 . state_province_county = value"
        },
        {
            "utterance": "Can you list the first names of these 3 staff members ?",
            "sql": "select t2 . first_name from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t1 . state_province_county = value"
        },
        {
            "utterance": "Can you provide me with the nickname of Janessa ?",
            "sql": "select nickname from staff where first_name = value"
        },
        {
            "utterance": "Of the 3 staff members living in Connecticut , can you tell me which one joined the staff first ?",
            "sql": "select t2 . first_name from addresses as t1 join staff as t2 on t1 . address_id = t2 . staff_address_id where t1 . state_province_county = value order by date_joined_staff asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the vehicle id and staff id for all lesson id 's ...",
            "sql": "select t1 . vehicle_id , t2 . staff_id from vehicles as t1 join lessons as t2 on t1 . vehicle_id = t2 . vehicle_id"
        },
        {
            "utterance": "What is the vehicle details of vehicle id 1 and 2 ?",
            "sql": "select vehicle_details from vehicles where vehicle_id = value or vehicle_id = value"
        },
        {
            "utterance": "What is the price of vehicle id 2 ?",
            "sql": "select price from lessons where vehicle_id = value"
        },
        {
            "utterance": "What is the id and detail of the vehicle used in lessons for most of the times ?",
            "sql": "select t1 . vehicle_id , t1 . vehicle_details from vehicles as t1 join lessons as t2 on t1 . vehicle_id = t2 . vehicle_id group by t1 . vehicle_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 15,
    "final": {
        "utterance": "Which city does has most number of customers?",
        "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which city has the most number of customers ?",
            "sql": "select t2 . city from customers as t1 join addresses as t2 on t1 . customer_address_id = t2 . address_id group by t2 . city order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which city has the least number of customers ?",
            "sql": "select t2 . city from customers as t1 join addresses as t2 on t1 . customer_address_id = t2 . address_id group by t2 . city order by count ( * ) limit value"
        },
        {
            "utterance": "What is the most common city of all customers with the customer status code `` Bad Customer '' ? | What do you mean by saying the most common city ? | The city name that appears the most",
            "sql": "select t2 . city from customers as t1 join addresses as t2 on t1 . customer_address_id = t2 . address_id where t1 . customer_status_code = value group by t2 . city order by count ( * ) limit value"
        },
        {
            "utterance": "What is the country of Ericamouth ?",
            "sql": "select country from addresses where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 16,
    "final": {
        "utterance": "Find out the first name and last name of staff lived in city Damianfort.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"
    },
    "interaction": [
        {
            "utterance": "Can you display the address id associated with the city of Damianfort ?",
            "sql": "select address_id from addresses where city = value"
        },
        {
            "utterance": "Can you display all staff ids that contain a staff address id of 14 ?",
            "sql": "select staff_id from staff where staff_address_id = value"
        },
        {
            "utterance": "Can you display the first and last names associated with those staff ids ?",
            "sql": "select staff_id , first_name , last_name from staff where staff_address_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 17,
    "final": {
        "utterance": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
    },
    "interaction": [
        {
            "utterance": "Can you list all of the staff first names please ?",
            "sql": "select first_name from staff"
        },
        {
            "utterance": "Can you filter that list to show only the staff with the letter 'a ' in their names ?",
            "sql": "select first_name from staff where first_name like value"
        },
        {
            "utterance": "Thank you ! Can you list how many lessons each of those individuals taught ?",
            "sql": "select count ( * ) , t2 . first_name from lessons as t1 join staff as t2 on t1 . staff_id = t2 . staff_id where t2 . first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 18,
    "final": {
        "utterance": "How many lesson does customer with first name Ray took?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
    },
    "interaction": [
        {
            "utterance": "Hello , how many customers are there ?",
            "sql": "select count ( * ) from customers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 19,
    "final": {
        "utterance": "Which last names are both used by customers and by staff?",
        "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of nicknames ?",
            "sql": "select nickname from staff"
        },
        {
            "utterance": "who is the first joined staff ? | Which information do you want to know about the first joined staff ? | can you show me a list of date joined staff ?",
            "sql": "select date_joined_staff from staff"
        },
        {
            "utterance": "can you shoe me customers ' phone numbers ? | Do you mean cell mobile phone number or phone number ? | phone number",
            "sql": "select phone_number from customers"
        },
        {
            "utterance": "which last names are both used by customers and by staff ?",
            "sql": "select last_name from customers intersect select last_name from staff"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 20,
    "final": {
        "utterance": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"
    },
    "interaction": [
        {
            "utterance": "What is the date the customer with first name Carole and last Name Bernhard become a customer ?",
            "sql": "select date_became_customer from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What is the amount outstanding for this customer ?",
            "sql": "select amount_outstanding from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What is the customer status code for this customer ?",
            "sql": "select customer_status_code from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What is the date the customer with last name Bernhard become a customer ?",
            "sql": "select date_became_customer from customers where last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 21,
    "final": {
        "utterance": "Which last names are both used by customers and by staff?",
        "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
    },
    "interaction": [
        {
            "utterance": "Which last names are both used by customers and staff ?",
            "sql": "select last_name from customers intersect select last_name from staff"
        },
        {
            "utterance": "What is the most common first name of staff ?",
            "sql": "select first_name from staff group by first_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What 's the most common last name of staff ?",
            "sql": "select last_name from staff group by first_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the first names of the customers with the last name Mertz ?",
            "sql": "select first_name from staff where last_name = value"
        },
        {
            "utterance": "What about the staff ?",
            "sql": "select first_name from staff where last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 22,
    "final": {
        "utterance": "List first name and last name of customers lived in city Lockmanfurt.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"
    },
    "interaction": [
        {
            "utterance": "Can you list the address id of all customers who lived in Lockmanfurt ?",
            "sql": "select t2 . address_id from customers as t1 join addresses as t2 on t1 . customer_address_id = t2 . address_id where t2 . city = value"
        },
        {
            "utterance": "Can you list all other related information for Sigrid Schmeler ?",
            "sql": "select * from customers where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 23,
    "final": {
        "utterance": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"
    },
    "interaction": [
        {
            "utterance": "How many lessons taken by customer with first name as Ryan and last name as Goodwin were completed ?",
            "sql": "select count ( * ) from lessons as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . first_name = value and t2 . last_name = value and t1 . lesson_status_code = value"
        },
        {
            "utterance": "What customer status code does Ryan Goodwin have ?",
            "sql": "select customer_status_code from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What is Ryan Goodwin 's date of birth ?",
            "sql": "select date_of_birth from customers where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the authors who have submissions to more than one workshop.",
        "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1"
    },
    "interaction": [
        {
            "utterance": "list the authors have submissions",
            "sql": "select author from submission"
        },
        {
            "utterance": "show me the list of authors who have submissions to workshop .",
            "sql": "select distinct t2 . author from acceptance as t1 join submission as t2 on t1 . submission_id = t2 . submission_id"
        },
        {
            "utterance": "list the authors who have submissions to more than one workshop .",
            "sql": "select t2 . author from acceptance as t1 join submission as t2 on t1 . submission_id = t2 . submission_id group by t2 . author having count ( distinct t1 . workshop_id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\""
    },
    "interaction": [
        {
            "utterance": "May I have a list of authors ?",
            "sql": "select author from submission"
        },
        {
            "utterance": "Can you give me a list of all authors from Florida , or Temple ? | Do you mean the authors whose college is Florida or Temple ? | Yes I did .",
            "sql": "select author from submission where college = value or college = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 2,
    "final": {
        "utterance": "List the authors who do not have submission to any workshop.",
        "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)"
    },
    "interaction": [
        {
            "utterance": "how many acceptance are presented on the table",
            "sql": "select count ( * ) from acceptance"
        },
        {
            "utterance": "what is highest score of submission",
            "sql": "select scores from submission order by scores desc limit value"
        },
        {
            "utterance": "list out the authors",
            "sql": "select author from submission"
        },
        {
            "utterance": "what is the college of Steve Niehaus",
            "sql": "select college from submission where author = value"
        },
        {
            "utterance": "list the authors who do not have submission to any workshop",
            "sql": "select author from submission where submission_id not in ( select submission_id from acceptance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 3,
    "final": {
        "utterance": "Show each author and the number of workshops they submitted to.",
        "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author"
    },
    "interaction": [
        {
            "utterance": "How many author are in the workshop altogether",
            "sql": "select count ( distinct author ) from submission"
        },
        {
            "utterance": "Give me the names of all the authors .",
            "sql": "select distinct author from submission"
        },
        {
            "utterance": "How many workshops did each author submitted to",
            "sql": "select t2 . author , count ( distinct t1 . workshop_id ) from acceptance as t1 join submission as t2 on t1 . submission_id = t2 . submission_id group by t2 . author"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
        "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005"
    },
    "interaction": [
        {
            "utterance": "Show the country of appelations Alexander Valley ?",
            "sql": "select county from appellations where appelation = value"
        },
        {
            "utterance": "Show the maximum price of wins from the appelations in central Coast area and produced before thebyear of 2005 ?",
            "sql": "select max ( t2 . price ) from appellations as t1 join wine as t2 on t1 . appelation = t2 . appelation where t1 . area = value and t2 . year < value"
        },
        {
            "utterance": "Show the country of appelations Amador County ?",
            "sql": "select county from appellations where appelation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"
    },
    "interaction": [
        {
            "utterance": "out of those show me prices higher than 30 | The names of all wines that have prices both higher than some wines from John Anthony winery and higher than 30 are shown in the table | One last question . out of those show me cases higher than 300",
            "sql": "select distinct name from wine where price > ( select min ( price ) from wine where winery = value ) and price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"
    },
    "interaction": [
        {
            "utterance": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery .",
            "sql": "select distinct name from wine where price > ( select min ( price ) from wine where winery = value )"
        },
        {
            "utterance": "Find the price of all wines that have prices higher than some wines from John Anthony winery .",
            "sql": "select price from wine where price > ( select min ( price ) from wine where winery = value )"
        },
        {
            "utterance": "Find the score of all wines that have prices higher than some wines from John Anthony winery .",
            "sql": "select score from wine where price > ( select min ( price ) from wine where winery = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you please show me the list of all appellations those produce wine after 2008 ?",
            "sql": "select appelation from wine where year > value"
        },
        {
            "utterance": "That 's a big list , thank you . Then could you please exclude Central Coast area from them ?",
            "sql": "select appelation from wine where year > value except select appelation from appellations where area = value"
        },
        {
            "utterance": "That 's great , thank you . Could you please show me the list of states where these appellations are located at ?",
            "sql": "select state from appellations where appelation in ( select appelation from wine where year > value except select appelation from appellations where area = value )"
        },
        {
            "utterance": "Oh.. actually somewhat expected that . Thank you , then could you please let me know the average price of all wines ?",
            "sql": "select avg ( price ) from wine"
        },
        {
            "utterance": "Then could you please show me the list of wines those are more expensive than the average ?",
            "sql": "select * from wine where price > ( select avg ( price ) from wine )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the most expensive wine made in the year 2006 ?",
            "sql": "select * from wine where year = value order by price desc limit value"
        },
        {
            "utterance": "Great , can you show me all wines that have a higher price than the one currently in the table ?",
            "sql": "select * from wine where price > ( select max ( price ) from wine where year = value )"
        },
        {
            "utterance": "Can you show only the name ?",
            "sql": "select name from wine where price > ( select max ( price ) from wine where year = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the average price and score of wines grouped by appelation?",
        "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation"
    },
    "interaction": [
        {
            "utterance": "Which is the most expensive wine ?",
            "sql": "select * from wine order by price desc limit value"
        },
        {
            "utterance": "From which year is it ?",
            "sql": "select year from wine order by price desc limit value"
        },
        {
            "utterance": "What is the appelation of Giana | What is Giana ? | Sorry Giana is the name of wine",
            "sql": "select appelation from wine where name = value"
        },
        {
            "utterance": "Which wine has a score of 91 ?",
            "sql": "select * from wine where score = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Please show me the type of grape available at Old Kraft Vineyard | The type of grape in the wine with a name of Old Kraft Vineyard is Zinfandel . | What are other wineries that also have Zinfandel ?",
            "sql": "select winery from wine where grape = value"
        },
        {
            "utterance": "Can you give me the top three wineries with the most white wines ?",
            "sql": "select t2 . winery from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value group by t2 . winery order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which of these have the most white wines ?",
            "sql": "select t2 . winery from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value group by t2 . winery order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""
    },
    "interaction": [
        {
            "utterance": "Which appelation produces the most expensive wine ?",
            "sql": "select t1 . appelation from appellations as t1 join wine as t2 on t1 . appelation = t2 . appelation where t2 . price = ( select max ( price ) from wine )"
        },
        {
            "utterance": "How much is the most expensive wine produced in Sonoma County ?",
            "sql": "select max ( t2 . price ) from appellations as t1 join wine as t2 on t1 . appelation = t2 . appelation where t1 . county = value"
        },
        {
            "utterance": "How many wines are produced in Sonoma County ?",
            "sql": "select count ( * ) from appellations as t1 join wine as t2 on t1 . appelation = t2 . appelation where t1 . county = value"
        },
        {
            "utterance": "What is the price of the least expensive wine produced in Sonoma County ?",
            "sql": "select min ( t2 . price ) from appellations as t1 join wine as t2 on t1 . appelation = t2 . appelation where t1 . county = value"
        },
        {
            "utterance": "What is the median price of wines produced in Sonoma County ? | Did you mean the average price of wines produced in Sonoma County ? | Yes , what is the average price of wines produced in Sonoma County ?",
            "sql": "select avg ( t2 . price ) from appellations as t1 join wine as t2 on t1 . appelation = t2 . appelation where t1 . county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"
    },
    "interaction": [
        {
            "utterance": "Which wine has the highest price ?",
            "sql": "select * from wine order by price desc limit value"
        },
        {
            "utterance": "Which wine has the highest score ?",
            "sql": "select * from wine order by score desc limit value"
        },
        {
            "utterance": "Which wine has the most cases available ?",
            "sql": "select * from wine order by cases desc limit value"
        },
        {
            "utterance": "How about winery with the least cases ?",
            "sql": "select winery from wine order by cases asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names and scores of wines that are made of white color grapes?",
        "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""
    },
    "interaction": [
        {
            "utterance": "Which kinds of grapes are white ?",
            "sql": "select grape from grapes where color = value"
        },
        {
            "utterance": "List all the wines that use color white grapes . | What kinds of attributes of wines do you want ? | List wines made with white grapes .",
            "sql": "select * from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value"
        },
        {
            "utterance": "Excellent . What is their average score ?",
            "sql": "select avg ( score ) from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value"
        },
        {
            "utterance": "What is the average score of wines not made with white grapes ?",
            "sql": "select avg ( score ) from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color ! = value"
        },
        {
            "utterance": "List only the names and scores of wines made with white grapes .",
            "sql": "select t2 . name , t2 . score from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value"
        },
        {
            "utterance": "What is the maximum , minimum , and average price of these wines ?",
            "sql": "select max ( price ) , min ( price ) , avg ( price ) from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 10,
    "final": {
        "utterance": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
    },
    "interaction": [
        {
            "utterance": "What grapes have a score higher than 93 ?",
            "sql": "select distinct grape from wine where score > value"
        },
        {
            "utterance": "What are the appellations whose score is higher than 93 ?",
            "sql": "select distinct appelation from wine where score > value"
        },
        {
            "utterance": "What are the names of wines whose score is higher than 93 ?",
            "sql": "select name from wine where score > value"
        },
        {
            "utterance": "Can you please list the grapes , appellations , and names of wines whose score is higher than 93 ?",
            "sql": "select grape , appelation , name from wine where score > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"
    },
    "interaction": [
        {
            "utterance": "Please show me the names of wines by Brander winery .",
            "sql": "select name from wine where winery = value"
        },
        {
            "utterance": "Hmm , can you add the production years ?",
            "sql": "select name , year from wine where winery = value"
        },
        {
            "utterance": "What are the names of wines whose production year are before the year of all wines by Brander winery ?",
            "sql": "select name from wine where year < ( select min ( year ) from wine where winery = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you find the appellations that produce wines after the year of 2008 but not in Central Coast area .",
            "sql": "select appelation from wine where year > value except select appelation from appellations where area = value"
        },
        {
            "utterance": "How many produce in the sierra foothills ? | Did you want the number of appelations that produce wine in the Sierra Foothills ? | yes",
            "sql": "select count ( * ) from appellations where area = value"
        },
        {
            "utterance": "How many appellations produce wine in Napa Valley ?",
            "sql": "select count ( * ) from appellations where county = value"
        },
        {
            "utterance": "How many appellations produce wine in St. Helena ?",
            "sql": "select count ( * ) from wine where appelation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the color of the grape whose wine products has the highest average price?",
        "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all wine products ?",
            "sql": "select avg ( price ) from wine"
        },
        {
            "utterance": "Which wine product has the highest price ?",
            "sql": "select * from wine where price = ( select max ( price ) from wine )"
        },
        {
            "utterance": "Which wine products have the highest average price ? | Do you mean which grape whose wine products has the highest average price ? | Yes , Which grapes are in the wine products that have the highest average price ?",
            "sql": "select t1 . grape from grapes as t1 join wine as t2 on t1 . grape = t2 . grape group by t2 . grape order by avg ( price ) desc limit value"
        },
        {
            "utterance": "What is the average price of the products that Roussanne is in ?",
            "sql": "select avg ( price ) from grapes as t1 join wine as t2 on t1 . grape = t2 . grape group by t2 . grape order by avg ( price ) desc limit value"
        },
        {
            "utterance": "What color of grape is Roussanne ?",
            "sql": "select color from grapes where grape = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the maximum price and score of wines in each year?",
        "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR"
    },
    "interaction": [
        {
            "utterance": "hello , what are the maximum price and score of wines in each year ?",
            "sql": "select max ( price ) , max ( score ) , year from wine group by year"
        },
        {
            "utterance": "yes | Did you mean the No in the wine table which is best liked ? | yes that is what i meant",
            "sql": "select no from wine order by score desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"
    },
    "interaction": [
        {
            "utterance": "Which wines were produced before 2000 ?",
            "sql": "select distinct name from wine where year < value"
        },
        {
            "utterance": "What is the most common year of production ?",
            "sql": "select year from wine group by year order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which wines were produced in 2007 ?",
            "sql": "select winery from wine where year = value"
        },
        {
            "utterance": "What about the ones after the year 2010 ?",
            "sql": "select distinct name from wine where year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the average price of wines that are not produced from Sonoma county.",
        "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"
    },
    "interaction": [
        {
            "utterance": "what is the average price of wine not produced in Sanoma county",
            "sql": "select avg ( t2 . price ) from appellations as t1 join wine as t2 on t1 . appelation = t2 . appelation where t1 . county ! = value"
        },
        {
            "utterance": "list all wineries available .",
            "sql": "select distinct winery from wine"
        },
        {
            "utterance": "list the all their prices",
            "sql": "select distinct winery , price from wine"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)"
    },
    "interaction": [
        {
            "utterance": "Show me all the wine names made in the year 2006 .",
            "sql": "select name from wine where year = value"
        },
        {
            "utterance": "Show me their prices .",
            "sql": "select price from wine where year = value"
        },
        {
            "utterance": "What is the maximum of these prices ?",
            "sql": "select max ( price ) from wine where year = value"
        },
        {
            "utterance": "Show me all the wine names that have a price higher than 200 .",
            "sql": "select name from wine where price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"
    },
    "interaction": [
        {
            "utterance": "Show the color of Barbera Grape ?",
            "sql": "select color from grapes where grape = value"
        },
        {
            "utterance": "Show the grape which scores higher than 90 ?",
            "sql": "select distinct grape from wine where score > value"
        },
        {
            "utterance": "Show the grape whose white color grapes are used to produce wines ?",
            "sql": "select distinct t1 . grape from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"
    },
    "interaction": [
        {
            "utterance": "Which wines are made of Red color grapes ? | Here are the wine names for wine made of Red color grapes . | Out of them which have prices higher than 50 ?",
            "sql": "select t2 . name from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value and t2 . price > value"
        },
        {
            "utterance": "And where are they located ?",
            "sql": "select t2 . state from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value and t2 . price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"
    },
    "interaction": [
        {
            "utterance": "Which wine uses Cabernet Franc grapes",
            "sql": "select t2 . name from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . grape = value"
        },
        {
            "utterance": "What are the wines that have prices higher than 50 ?",
            "sql": "select * from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t2 . price > value"
        },
        {
            "utterance": "What grapes are red color ?",
            "sql": "select grape from grapes where color = value"
        },
        {
            "utterance": "Among the wines that have prices higher than 50 , which ones use red color grapes ?",
            "sql": "select t2 . name from grapes as t1 join wine as t2 on t1 . grape = t2 . grape where t1 . color = value and t2 . price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the wineries that have at least four wines.",
        "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4"
    },
    "interaction": [
        {
            "utterance": "give me the name of the wineries",
            "sql": "select winery from wine"
        },
        {
            "utterance": "how many wineries have at least 4 wines ?",
            "sql": "select count ( * ) from ( select winery from wine group by winery having count ( * ) > = value )"
        },
        {
            "utterance": "can you tell me the names of those wineries ?",
            "sql": "select winery from wine group by winery having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the color of the grape whose wine products has the highest average price?",
        "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the grape whose wine products had the highest average price ?",
            "sql": "select t1 . grape from grapes as t1 join wine as t2 on t1 . grape = t2 . grape group by t2 . grape order by avg ( price ) desc limit value"
        },
        {
            "utterance": "What is the color of that grape ?",
            "sql": "select t1 . color from grapes as t1 join wine as t2 on t1 . grape = t2 . grape group by t2 . grape order by avg ( price ) desc limit value"
        },
        {
            "utterance": "What is the color of the grape whose wine products had the lowest average price ?",
            "sql": "select t1 . color from grapes as t1 join wine as t2 on t1 . grape = t2 . grape group by t2 . grape order by avg ( price ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
    },
    "interaction": [
        {
            "utterance": "List the grape of the wines whose score is higher than 93 ordered by Name .",
            "sql": "select grape , appelation , name from wine where score > value order by name"
        },
        {
            "utterance": "Show me the winery they are from",
            "sql": "select distinct appelation from wine where score > value"
        },
        {
            "utterance": "Which states are they from ?",
            "sql": "select distinct state from wine where score > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the speeds of the longest roller coaster?",
        "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many length of park Kemah Boardwalk ? | Did you mean to ask for the length of the park with name Kemah Boardwalk ? | Yes",
            "sql": "select length from roller_coaster where park = value"
        },
        {
            "utterance": "Find the status of Happy Valley .",
            "sql": "select status from roller_coaster where park = value"
        },
        {
            "utterance": "What are the country id of Hades 360 ?",
            "sql": "select country_id from roller_coaster where name = value"
        },
        {
            "utterance": "What are the speeds of the longest roller coaster ?",
            "sql": "select speed from roller_coaster order by length desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of countries that have more than one roller coaster.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many countries have roller coaster ?",
            "sql": "select count ( distinct t1 . name ) from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id"
        },
        {
            "utterance": "How many countries have more than one roller coaster ?",
            "sql": "select count ( * ) from ( select t1 . name from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id group by t1 . name having count ( * ) > value )"
        },
        {
            "utterance": "Show the names of the countries that have more than one roller coaster .",
            "sql": "select t1 . name from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id group by t1 . name having count ( * ) > value"
        },
        {
            "utterance": "Show the number of roller coasters of Australia and Finland .",
            "sql": "select t1 . name , count ( * ) from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id group by t1 . name having count ( * ) > value"
        },
        {
            "utterance": "Show the names of roller coasters of Australia and Finland in separate table",
            "sql": "select t2 . name from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value or t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of countries that have more than one roller coaster.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many country there",
            "sql": "select count ( * ) from country"
        },
        {
            "utterance": "what is the languages of Finland",
            "sql": "select languages from country where name = value"
        },
        {
            "utterance": "what is the speed of Dauling Dragon",
            "sql": "select speed from roller_coaster where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name and population of the country that has the highest roller coaster.",
        "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the height of the highest roller coaster ?",
            "sql": "select max ( height ) from roller_coaster"
        },
        {
            "utterance": "Which park is this roller coaster located at ?",
            "sql": "select park from roller_coaster where height = ( select max ( height ) from roller_coaster )"
        },
        {
            "utterance": "What is the name of the country that has the highest roller coaster ?",
            "sql": "select t2 . name from roller_coaster as t1 join country as t2 on t1 . country_id = t2 . country_id where t1 . height = ( select max ( height ) from roller_coaster )"
        },
        {
            "utterance": "Hmm , I also want to know the population of this country .",
            "sql": "select t2 . name , t2 . population from roller_coaster as t1 join country as t2 on t1 . country_id = t2 . country_id where t1 . height = ( select max ( height ) from roller_coaster )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100"
    },
    "interaction": [
        {
            "utterance": "Which roller coasters are longer than 3300 ?",
            "sql": "select roller_coaster_id from roller_coaster where length > value"
        },
        {
            "utterance": "Which of them are higher than 100 ? | Do you mean among all roller costers or among the those longer than 3300 ? | Among those longer than 3300",
            "sql": "select roller_coaster_id from roller_coaster where length > value and height > value"
        },
        {
            "utterance": "And what are their status ?",
            "sql": "select roller_coaster_id , status from roller_coaster where length > value and height > value"
        },
        {
            "utterance": "Yes , what is their speed ?",
            "sql": "select roller_coaster_id , status , speed from roller_coaster where length > value and height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 5,
    "final": {
        "utterance": "How many countries do not have an roller coaster longer than 3000?",
        "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"
    },
    "interaction": [
        {
            "utterance": "HOW MANY COUNTRIES DO NOT HAVE AN ROLLER COASTER LONGER THAN 3000 ?",
            "sql": "select count ( * ) from country where country_id not in ( select country_id from roller_coaster where length > value )"
        },
        {
            "utterance": "WHICH COUNTRY HAVE A ROLLER COASTER LONGER THAN 5000",
            "sql": "select t2 . name from roller_coaster as t1 join country as t2 on t1 . country_id = t2 . country_id where t1 . length > value"
        },
        {
            "utterance": "WHAT IS THE HIGHEST LENGTH OF ROLL COASTER",
            "sql": "select max ( length ) from roller_coaster"
        },
        {
            "utterance": "WHICH PARK HAS HIGHEST SPEED OF ROLL COASTER",
            "sql": "select park from roller_coaster order by speed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 6,
    "final": {
        "utterance": "List the status shared by more than two roller coaster.",
        "sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Hi I was wondering if you could tell me what the fastest roller coaster is ?",
            "sql": "select name from roller_coaster order by speed desc limit value"
        },
        {
            "utterance": "cool can you tell me what that roller coaster 's height is too ?",
            "sql": "select height from roller_coaster order by speed desc limit value"
        },
        {
            "utterance": "great - do you know what its status is ?",
            "sql": "select status from roller_coaster order by speed desc limit value"
        },
        {
            "utterance": "can you tell me the status that is shared by more than two roller coasters ?",
            "sql": "select status from roller_coaster group by status having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of countries and the average speed of roller coasters from each country.",
        "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"
    },
    "interaction": [
        {
            "utterance": "Hi ! How are you ? Can you show me a list of all of the country names ?",
            "sql": "select name from country"
        },
        {
            "utterance": "Great ! Can you update this list to include the average roller coaster speed for each of these three countries ?",
            "sql": "select t1 . name , avg ( t2 . speed ) from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id group by t1 . name"
        },
        {
            "utterance": "Thank you for that ! Would you be able to show me the roller coaster names associated with just Sweden ?",
            "sql": "select t2 . name from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of countries and the average speed of roller coasters from each country.",
        "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"
    },
    "interaction": [
        {
            "utterance": "How fast are roller coasters in Austria ?",
            "sql": "select t2 . speed from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value"
        },
        {
            "utterance": "When did the fastest roller coaster in Austria open ?",
            "sql": "select t2 . opened from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value order by t2 . speed desc limit value"
        },
        {
            "utterance": "What is the name of the fastest roller coaster in Austria ?",
            "sql": "select t2 . name from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value order by t2 . speed desc limit value"
        },
        {
            "utterance": "What park in Austria has the fastest roller coaster ?",
            "sql": "select t2 . park from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value order by t2 . speed desc limit value"
        },
        {
            "utterance": "What is the height of the fastest roller coaster in Austria ?",
            "sql": "select t2 . height from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value order by t2 . speed desc limit value"
        },
        {
            "utterance": "What is the length of the fastest roller coaster in Austria ?",
            "sql": "select t2 . length from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t1 . name = value order by t2 . speed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 9,
    "final": {
        "utterance": "How many countries do not have an roller coaster longer than 3000?",
        "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"
    },
    "interaction": [
        {
            "utterance": "what is the highest length of coaster",
            "sql": "select max ( length ) from roller_coaster"
        },
        {
            "utterance": "which roller coaster are top speed",
            "sql": "select * from roller_coaster order by speed desc limit value"
        },
        {
            "utterance": "what is the height of Boardwalk Bullet",
            "sql": "select height from roller_coaster where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the country names, area and population which has both roller coasters with speed higher",
        "sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55"
    },
    "interaction": [
        {
            "utterance": "what is the country name ? | what did you want to konw the country name ? give more info about this question | what are the country names which has both roller coasters with speed higher than 60 and roller coasters with speed lower than 55 ?",
            "sql": "select t1 . name from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t2 . speed > value intersect select t1 . name from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t2 . speed < value"
        },
        {
            "utterance": "what are the country id ? | Did you mean country id which has both roller coasters with speed higher than 60 and roller coasters with speed lower than 55 ? | Yes !",
            "sql": "select t1 . country_id from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t2 . speed > value intersect select t1 . country_id from country as t1 join roller_coaster as t2 on t1 . country_id = t2 . country_id where t2 . speed < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 0,
    "final": {
        "utterance": "Show headquarters with at least two companies in the banking industry.",
        "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Please show me the headquarters with at least two companies in the banking industry ?",
            "sql": "select headquarters from company where main_industry = value group by headquarters having count ( * ) > = value"
        },
        {
            "utterance": "What companies are in the banking industry ?",
            "sql": "select company from company where main_industry = value"
        },
        {
            "utterance": "Where are those companies ' headquarters located ?",
            "sql": "select company , headquarters from company where main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
    },
    "interaction": [
        {
            "utterance": "Hi can you show me all the headquarters of a company in backing industry ? | Do you mean banking , not backing ? | Sorry , yes banking !",
            "sql": "select headquarters from company where main_industry = value"
        },
        {
            "utterance": "Thank you ! Can you now tell me the all the headquarters of a company in Oil and gas ?",
            "sql": "select headquarters from company where main_industry = value"
        },
        {
            "utterance": "Great , what about all the headquarters with both a company in oil and gas and a company in banking ?",
            "sql": "select headquarters from company where main_industry = value intersect select headquarters from company where main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all locations and the number of gas stations in each location ordered by the count.",
        "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "Show all locations and the number of gas stations in each location ordered by the count , please ?",
            "sql": "select location , count ( * ) from gas_station group by location order by count ( * )"
        },
        {
            "utterance": "What is the name of the location that has more than one gas station ?",
            "sql": "select location from gas_station group by location having count ( * ) > value"
        },
        {
            "utterance": "What year was more than one gas station opened in ?",
            "sql": "select open_year from gas_station group by open_year having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all headquarters without a company in banking industry.",
        "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"
    },
    "interaction": [
        {
            "utterance": "what is the average of market value ?",
            "sql": "select avg ( market_value ) from company"
        },
        {
            "utterance": "what is the average of assets billion ?",
            "sql": "select avg ( assets_billion ) from company"
        },
        {
            "utterance": "what is companies headquarters ?",
            "sql": "select headquarters from company"
        },
        {
            "utterance": "show all headquarters without a company in banking industry .",
            "sql": "select headquarters from company except select headquarters from company where main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"
    },
    "interaction": [
        {
            "utterance": "What is the average market value",
            "sql": "select avg ( market_value ) from company"
        },
        {
            "utterance": "Which location is most profitable ? | What do you mean by location ? We have different companies in different countries . | Which company is the most profitable ?",
            "sql": "select company from company order by assets_billion desc limit value"
        },
        {
            "utterance": "What is the average sales of the companies ranked 1 , 2 and 3 ?",
            "sql": "select avg ( sales_billion ) from company where rank = value or rank = value or rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 5,
    "final": {
        "utterance": "List the main industry with highest total market value and its number of companies.",
        "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the profits billion of Company ExonMobil ?",
            "sql": "select profits_billion from company where company = value"
        },
        {
            "utterance": "What is the name of the company which has market value 213.7 ?",
            "sql": "select company from company where market_value = value"
        },
        {
            "utterance": "Where is the headquarters of the company general electric ?",
            "sql": "select headquarters from company where company = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 6,
    "final": {
        "utterance": "Show company name and main industry without a gas station.",
        "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    "interaction": [
        {
            "utterance": "Show the name of the company with company id 1 ?",
            "sql": "select company from company where company_id = value"
        },
        {
            "utterance": "Show all company name and main industry with gas station ?",
            "sql": "select company , main_industry from company where company_id in ( select company_id from station_company )"
        },
        {
            "utterance": "Show all company name and main industry without a gas station ?",
            "sql": "select company , main_industry from company where company_id not in ( select company_id from station_company )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 7,
    "final": {
        "utterance": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"
    },
    "interaction": [
        {
            "utterance": "find the rank , company names , market values of the companies in the banking industry order by their sales and profits in billion .",
            "sql": "select rank , company , market_value from company where main_industry = value order by sales_billion , profits_billion"
        },
        {
            "utterance": "Which company has the biggest market value in billion ?",
            "sql": "select company from company order by market_value limit value"
        },
        {
            "utterance": "what is BP 's market value ?",
            "sql": "select market_value from company where company = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 8,
    "final": {
        "utterance": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts .",
            "sql": "select t3 . location , t3 . representative_name from station_company as t1 join company as t2 on t1 . company_id = t2 . company_id join gas_station as t3 on t1 . station_id = t3 . station_id order by t2 . assets_billion desc limit value"
        },
        {
            "utterance": "What is the representative name of Newport Rd ?",
            "sql": "select representative_name from gas_station where location = value"
        },
        {
            "utterance": "Find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts .",
            "sql": "select t3 . location , t3 . representative_name from station_company as t1 join company as t2 on t1 . company_id = t2 . company_id join gas_station as t3 on t1 . station_id = t3 . station_id order by t2 . assets_billion desc limit value"
        },
        {
            "utterance": "What gas station is the oldest one based on open year | Which kind of information about this gas station do you want ? | Which gas station location is the oldest based on its open year .",
            "sql": "select location from gas_station order by open_year limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the manager name with most number of gas stations opened after 2000.",
        "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many gas stations opened after 2000 ?",
            "sql": "select count ( * ) from gas_station where open_year > value"
        },
        {
            "utterance": "What 's the name of the manager that opened the most gas stations after 2000 ?",
            "sql": "select manager_name from gas_station where open_year > value group by manager_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the locations of those ?",
            "sql": "select location from gas_station where manager_name = ( select manager_name from gas_station where open_year > value group by manager_name order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What are the vice manager names of those locations ?",
            "sql": "select location , vice_manager_name from gas_station where manager_name = ( select manager_name from gas_station where open_year > value group by manager_name order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What years did those open ?",
            "sql": "select location , open_year from gas_station where manager_name = ( select manager_name from gas_station where open_year > value group by manager_name order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who has made the minimum amount of payment in one claim ?",
            "sql": "select t3 . customer_details from claim_headers as t1 join policies as t2 on t1 . policy_id = t2 . policy_id join customers as t3 on t2 . customer_id = t3 . customer_id where t1 . amount_piad = ( select min ( amount_piad ) from claim_headers )"
        },
        {
            "utterance": "What is the amount claimed for this customer ?",
            "sql": "select t1 . amount_claimed from claim_headers as t1 join policies as t2 on t1 . policy_id = t2 . policy_id join customers as t3 on t2 . customer_id = t3 . customer_id where t1 . amount_piad = ( select min ( amount_piad ) from claim_headers )"
        },
        {
            "utterance": "Can you also give me the name of the customer who has made the maximum amount of payment in one claim ?",
            "sql": "select t3 . customer_details from claim_headers as t1 join policies as t2 on t1 . policy_id = t2 . policy_id join customers as t3 on t2 . customer_id = t3 . customer_id where t1 . amount_piad = ( select max ( amount_piad ) from claim_headers )"
        },
        {
            "utterance": "Hmmm . Can you please give me the claimed amount for this customer",
            "sql": "select t1 . amount_claimed from claim_headers as t1 join policies as t2 on t1 . policy_id = t2 . policy_id join customers as t3 on t2 . customer_id = t3 . customer_id where t1 . amount_piad = ( select max ( amount_piad ) from claim_headers )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the total amount claimed in the most recently created document.",
        "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Show me all the claims that are documents .",
            "sql": "select t1 . claim_header_id from claim_headers as t1 join claims_documents as t2 on t1 . claim_header_id = t2 . claim_id where t2 . document_type_code = value"
        },
        {
            "utterance": "Which of these claims is most recently created ?",
            "sql": "select t1 . claim_header_id from claim_headers as t1 join claims_documents as t2 on t1 . claim_header_id = t2 . claim_id where t2 . document_type_code = value order by created_date limit value"
        },
        {
            "utterance": "What is the amount claimed for this claim ?",
            "sql": "select t1 . amount_claimed from claim_headers as t1 join claims_documents as t2 on t1 . claim_header_id = t2 . claim_id where t2 . created_date = ( select created_date from claims_documents order by created_date limit value )"
        },
        {
            "utterance": "Please give me the sum of these amounts .",
            "sql": "select sum ( t1 . amount_claimed ) from claim_headers as t1 join claims_documents as t2 on t1 . claim_header_id = t2 . claim_id where t2 . created_date = ( select created_date from claims_documents order by created_date limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of customers who have no policies associated.",
        "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Hi , can I see the list of customers ?",
            "sql": "select * from customers"
        },
        {
            "utterance": "What customers have a policy ?",
            "sql": "select * from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "What customers do n't have a policy ?",
            "sql": "select * from customers except select * from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "When did they get a policy ? | Who are they ? | When did the policy holders get their policy ?",
            "sql": "select start_date from policies"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name of the claim processing stage that most of the claims are on?",
        "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many claim stage ids in this table ?",
            "sql": "select count ( claim_stage_id ) from claims_processing_stages"
        },
        {
            "utterance": "How many different staff ids in this table ?",
            "sql": "select count ( distinct staff_id ) from claims_processing"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total amount claimed in the most recently created document.",
        "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "how many claim headers on the table",
            "sql": "select count ( * ) from claim_headers"
        },
        {
            "utterance": "what is the highest amount claimed on the claim headers",
            "sql": "select max ( amount_claimed ) from claim_headers"
        },
        {
            "utterance": "what is the least paid amount on the table",
            "sql": "select min ( amount_piad ) from claim_headers"
        },
        {
            "utterance": "what is the date of settlement on Overtime Meal Subsidy | Did you want the date of settlement of claim headers with a type code Overtime Meal Subsidy ? | exactly",
            "sql": "select date_of_settlement from claim_headers where claim_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 5,
    "final": {
        "utterance": "Which type of policy is most frequently used? Give me the policy type code.",
        "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the policy ids , customer ids and policy type codes of all policies ?",
            "sql": "select policy_id , customer_id , policy_type_code from policies"
        },
        {
            "utterance": "Can you list the policy type codes of all the policies used ?",
            "sql": "select policy_type_code from policies"
        },
        {
            "utterance": "Which type of policy is most frequently used ? Can you give me the policy type code ?",
            "sql": "select policy_type_code from policies group by policy_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 6,
    "final": {
        "utterance": "Which customer is associated with the latest policy?",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"
    },
    "interaction": [
        {
            "utterance": "What is the customer ID who is associated with the latest policy ?",
            "sql": "select t2 . customer_id from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . start_date = ( select max ( start_date ) from policies )"
        },
        {
            "utterance": "what is the name of the customer associated with customer ID 263 ?",
            "sql": "select customer_details from customers where customer_id = value"
        },
        {
            "utterance": "What is the policy type code of customer with ID 334 ?",
            "sql": "select policy_type_code from policies where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of customers whose name contains \"Diana\".",
        "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "How many of them have `` Diana '' anywhere in their name ?",
            "sql": "select count ( customer_details ) from customers where customer_details like value"
        },
        {
            "utterance": "What is her full name ?",
            "sql": "select customer_details from customers where customer_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the total and average amount paid in claim headers.",
        "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me the total amount paid in claim headers ?",
            "sql": "select sum ( amount_piad ) from claim_headers"
        },
        {
            "utterance": "Could you please tell me the average amount paid in claim headers ?",
            "sql": "select avg ( amount_piad ) from claim_headers"
        },
        {
            "utterance": "Could you please tell me the total amount claimed ?",
            "sql": "select sum ( amount_claimed ) from claim_headers"
        },
        {
            "utterance": "What is the date of the largest amount claimed ?",
            "sql": "select date_of_claim from claim_headers order by amount_claimed desc limit value"
        },
        {
            "utterance": "What is the date of the smallest amount paid ?",
            "sql": "select date_of_claim from claim_headers order by amount_claimed limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 9,
    "final": {
        "utterance": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What is Dayana Robel policy id ?",
            "sql": "select policy_id from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_details = value"
        },
        {
            "utterance": "And what are policy type code associated with this id ?",
            "sql": "select policy_type_code from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_details = value"
        },
        {
            "utterance": "On which date did this policy start ?",
            "sql": "select start_date from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_details = value"
        },
        {
            "utterance": "And on which date did it end ?",
            "sql": "select end_date from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of the customers who have an deputy policy.",
        "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""
    },
    "interaction": [
        {
            "utterance": "Who does have a deputy policy ?",
            "sql": "select distinct t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of the claim processing stage that most of the claims are on?",
        "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the name of the claim processing stage that most of the claims are on",
            "sql": "select t2 . claim_status_name from claims_processing as t1 join claims_processing_stages as t2 on t1 . claim_stage_id = t2 . claim_stage_id group by t1 . claim_stage_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the claim id of open",
            "sql": "select claim_id from claims_processing_stages as t1 join claims_processing as t2 on t1 . claim_stage_id = t2 . claim_stage_id whereclaim_status_name = value"
        },
        {
            "utterance": "include claim stage id in the table | Do you wan na see all the claim stage ids ? | yes please",
            "sql": "select distinct claim_stage_id from claims_processing"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the customer that has been involved in the most policies.",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who was involved in the most policies , please ?",
            "sql": "select t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_details order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is her customer id ?",
            "sql": "select t2 . customer_id , t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_details order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are her customer details , please ?",
            "sql": "select t2 . customer_id , t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_details order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is her policy type code ?",
            "sql": "select policy_type_code from policies where customer_id = value"
        },
        {
            "utterance": "What is her start date for each of those ?",
            "sql": "select policy_type_code , start_date from policies where customer_id = value"
        },
        {
            "utterance": "How about the end date , please ?",
            "sql": "select policy_type_code , start_date , end_date from policies where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the names of all the customers and staff members.",
        "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    "interaction": [
        {
            "utterance": "how many staffs are on the table",
            "sql": "select count ( staff_id ) from staff"
        },
        {
            "utterance": "how many members are on the table ? | do you mean the customers ? | how many customers are on the table ?",
            "sql": "select count ( customer_id ) from customers"
        },
        {
            "utterance": "Find the names for all the customers and staff members",
            "sql": "select customer_details from customers union select staff_details from staff"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the customer that has been involved in the most policies.",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who has been involved in most policies ?",
            "sql": "select t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_details order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is her ID ?",
            "sql": "select t2 . customer_id from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_details order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many policies has she been involved in ?",
            "sql": "select count ( * ) from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_details order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of customers whose name contains \"Diana\".",
        "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    "interaction": [
        {
            "utterance": "How many customer ids are on the list ?",
            "sql": "select count ( distinct customer_id ) from customers"
        },
        {
            "utterance": "Find the details of customers which contain `` Diana '' ?",
            "sql": "select * from customers where customer_details like value"
        },
        {
            "utterance": "State the customer details of customer id 263 ?",
            "sql": "select customer_details from customers where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the names of all the customers and staff members.",
        "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    "interaction": [
        {
            "utterance": "Can you list the details of all the customers please ?",
            "sql": "select customer_details from customers"
        },
        {
            "utterance": "Can you list the names of all the customers who have the letter `` B '' in their name , please ? | The details of the customers with a letter `` B '' in their customer details are listed . | Can you list the details and IDs of all the staff in a table , please ?",
            "sql": "select staff_id , staff_details from staff"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of customers who have no policies associated.",
        "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the customers ? | Did you mean customer details in the table ? | Yes",
            "sql": "select customer_details from customers"
        },
        {
            "utterance": "Show the ID of the customers without policies",
            "sql": "select customer_id from customers except select t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "What are the customer details with those customers",
            "sql": "select customer_details from customers except select t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 18,
    "final": {
        "utterance": "Find all the policy types that are used by more than 2 customers.",
        "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "what is the name of the policy types used by more than 2 customers ?",
            "sql": "select policy_type_code from policies group by policy_type_code having count ( * ) > value"
        },
        {
            "utterance": "what is the start date of Jurisdiction ?",
            "sql": "select start_date from policies where policy_type_code = value"
        },
        {
            "utterance": "what is the end date of Deputy ?",
            "sql": "select end_date from policies where policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all customer ids and their associated policy type codes ?",
            "sql": "select t2 . customer_id , t1 . policy_type_code from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "Great ! Can you update this list to include the customer details values for each customer_ID ?",
            "sql": "select t2 . customer_id , t1 . policy_type_code , t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "Awesome ! Can you filter this list to show only the customer IDs and customer names associated with either a deputy policy or an uninformed policy ?",
            "sql": "select t2 . customer_id , t2 . customer_details from policies as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . policy_type_code = value or t1 . policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"
    },
    "interaction": [
        {
            "utterance": "How many master customer ID numbers are there ?",
            "sql": "select count ( master_customer_id ) from customer_master_index"
        },
        {
            "utterance": "What are the master index IDs for all except whose detail includes Schmidt , Kertzmann and Lubowitz ?",
            "sql": "select master_customer_id from customer_master_index where cmi_details ! = ( value )"
        },
        {
            "utterance": "What are their cmi cross reference IDs ?",
            "sql": "select t1 . master_customer_id , cmi_cross_ref_id from customer_master_index as t1 join cmi_cross_references as t2 on t1 . master_customer_id = t2 . master_customer_id where t1 . cmi_details not in ( value )"
        },
        {
            "utterance": "What are their respective source system codes ?",
            "sql": "select t1 . master_customer_id , cmi_cross_ref_id , source_system_code from customer_master_index as t1 join cmi_cross_references as t2 on t1 . master_customer_id = t2 . master_customer_id where t1 . cmi_details ! = ( value )"
        },
        {
            "utterance": "What are the renters arrears tax IDs associated with them ?",
            "sql": "select t1 . council_tax_id from rent_arrears as t1 join cmi_cross_references as t2 on t1 . cmi_cross_ref_id = t2 . cmi_cross_ref_id join customer_master_index as t3 on t3 . master_customer_id = t2 . master_customer_id where t3 . cmi_details ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "sql": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "Can you list all the cmi cross reference id on here",
            "sql": "select cmi_cross_ref_id from cmi_cross_references"
        },
        {
            "utterance": "can i have the master customer id",
            "sql": "select master_customer_id from cmi_cross_references"
        },
        {
            "utterance": "What Are the source system code of CMI_Cross_References",
            "sql": "select source_system_code from cmi_cross_references"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 2,
    "final": {
        "utterance": "Which cmi cross reference id is not related to any parking taxes?",
        "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines"
    },
    "interaction": [
        {
            "utterance": "Show me the list of cmi cross reference ids please !",
            "sql": "select cmi_cross_ref_id from cmi_cross_references"
        },
        {
            "utterance": "Which of those cmi cross reference ids are related to parking taxes ?",
            "sql": "select t1 . cmi_cross_ref_id from cmi_cross_references as t1 join parking_fines as t2 on t1 . cmi_cross_ref_id = t2 . cmi_cross_ref_id"
        },
        {
            "utterance": "What about cmi cross reference ids that not related ?",
            "sql": "select cmi_cross_ref_id from cmi_cross_references where cmi_cross_ref_id not in ( select t1 . cmi_cross_ref_id from cmi_cross_references as t1 join parking_fines as t2 on t1 . cmi_cross_ref_id = t2 . cmi_cross_ref_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "sql": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"
    },
    "interaction": [
        {
            "utterance": "What is the tax source system code for benefits and overpayments ?",
            "sql": "select t1 . source_system_code from cmi_cross_references as t1 join benefits_overpayments as t2 on t1 . cmi_cross_ref_id = t2 . cmi_cross_ref_id"
        },
        {
            "utterance": "List benefit ID , please .",
            "sql": "select t1 . source_system_code , t2 . council_tax_id from cmi_cross_references as t1 join benefits_overpayments as t2 on t1 . cmi_cross_ref_id = t2 . cmi_cross_ref_id"
        },
        {
            "utterance": "Order them by benefit ID , Please .",
            "sql": "select t1 . source_system_code , t2 . council_tax_id from cmi_cross_references as t1 join benefits_overpayments as t2 on t1 . cmi_cross_ref_id = t2 . cmi_cross_ref_id order by t2 . council_tax_id"
        },
        {
            "utterance": "Ok , can you show me the list of the source system codes ?",
            "sql": "select source_system_code from cmi_cross_references"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'"
    },
    "interaction": [
        {
            "utterance": "How are you ! Can you provide me with a list of all of the master customer ids and corresponding cmi details ?",
            "sql": "select master_customer_id , cmi_details from customer_master_index"
        },
        {
            "utterance": "This is great ! Can you update this list to also show the corresponding cmi cross reference ids for each line of this list ?",
            "sql": "select t1 . master_customer_id , t1 . cmi_details , t2 . cmi_cross_ref_id from customer_master_index as t1 join cmi_cross_references as t2 on t1 . master_customer_id = t2 . master_customer_id"
        },
        {
            "utterance": "Can you filter this list so that the only rows that are displayed are those containing `` Gottlieb , Becker and Wyman '' ?",
            "sql": "select t1 . master_customer_id , t1 . cmi_details , t2 . cmi_cross_ref_id from customer_master_index as t1 join cmi_cross_references as t2 on t1 . master_customer_id = t2 . master_customer_id where t1 . cmi_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 5,
    "final": {
        "utterance": "Which distinct source system code includes the substring 'en'?",
        "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'"
    },
    "interaction": [
        {
            "utterance": "What source system code includes the sub string 'en ' ?",
            "sql": "select distinct source_system_code from cmi_cross_references where source_system_code like value"
        },
        {
            "utterance": "What are the other sub strings , that do not contain 'en ' ?",
            "sql": "select distinct source_system_code from cmi_cross_references where source_system_code not like value"
        },
        {
            "utterance": "what is the ID for electoral code ? | which columns return ? | What is the master id please .",
            "sql": "select master_customer_id from cmi_cross_references where source_system_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 0,
    "final": {
        "utterance": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5"
    },
    "interaction": [
        {
            "utterance": "Could you please find the products with the max page size as `` A4 '' ?",
            "sql": "select product from product where max_page_size = value"
        },
        {
            "utterance": "Could you please find the products with the pages per minute color smaller than 5 ?",
            "sql": "select product from product where pages_per_minute_color < value"
        },
        {
            "utterance": "Could you please find the products with the max page size as `` A4 '' and with the pages per minute color smaller than 5 ?",
            "sql": "select product from product where max_page_size = value and pages_per_minute_color < value"
        },
        {
            "utterance": "What are the interfaces of those products ?",
            "sql": "select product , interface from product where max_page_size = value and pages_per_minute_color < value"
        },
        {
            "utterance": "What are the dimensions of those products ?",
            "sql": "select product , dimensions from product where max_page_size = value and pages_per_minute_color < value"
        },
        {
            "utterance": "Could you please find the products with the pages per minute color larger than 5 ?",
            "sql": "select product from product where pages_per_minute_color > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the products that are not using the most frequently-used max page size.",
        "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "what is the dimenson of Plustek MobileOffice D28 Corporate ?",
            "sql": "select dimensions from product where product = value"
        },
        {
            "utterance": "how many pages per minute colored in Xerox Travel Scanner 100 ?",
            "sql": "select pages_per_minute_color from product where product = value"
        },
        {
            "utterance": "what is the max page size can be used in Plustek MobileOffice D28 Corporate ?",
            "sql": "select max_page_size from product where product = value"
        },
        {
            "utterance": "what is the dpi of Fujitsu fi-6130 A4 Series Scanner ?",
            "sql": "select dpi from product where product = value"
        },
        {
            "utterance": "which product coloured the highest pages in a minute ?",
            "sql": "select product , pages_per_minute_color from product order by pages_per_minute_color desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 2,
    "final": {
        "utterance": "Find all the stores in the district with the most population.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Find all stores in the Attock district | Do you want the id or the name of these stores ? | The name",
            "sql": "select t1 . store_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t3 . district_id = t2 . district_id where t3 . district_name = value"
        },
        {
            "utterance": "Find all the store names in the district with the lowest population .",
            "sql": "select t1 . store_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id where district_id = ( select district_id from district order by city_population asc limit value )"
        },
        {
            "utterance": "Find all the store names in the district with the highest population .",
            "sql": "select t1 . store_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id where district_id = ( select district_id from district order by city_population desc limit value )"
        },
        {
            "utterance": "What is the city area of the district with the highest population .",
            "sql": "select city_area from district order by city_population desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the total population of the districts where the area is bigger than the average city area.",
        "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)"
    },
    "interaction": [
        {
            "utterance": "What are the names of each district ?",
            "sql": "select district_name from district"
        },
        {
            "utterance": "What are the total population of the districts whose area is larger than the average city area ?",
            "sql": "select sum ( city_population ) from district where city_area > ( select avg ( city_area ) from district )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total population of the top 3 districts with the largest area.",
        "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you tell me what is the sum total of the populations of the three districts with the largest area ?",
            "sql": "select sum ( city_population ) from district order by city_area desc limit value"
        },
        {
            "utterance": "Excellent ! Can you tell me the district name associated with the largest population ?",
            "sql": "select district_name from district where city_population = ( select max ( city_population ) from district )"
        },
        {
            "utterance": "Wonderful ! Can you show me the city 's population total and the city 's area ?",
            "sql": "select city_population , city_area from district where city_population = ( select max ( city_population ) from district )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of all stores in Khanewal District.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""
    },
    "interaction": [
        {
            "utterance": "What is the district name for district id 15 ?",
            "sql": "select district_name from district where district_id = value"
        },
        {
            "utterance": "What is the district name for District id 11 ?",
            "sql": "select district_name from district where district_id = value"
        },
        {
            "utterance": "How many store are located in district 15 ?",
            "sql": "select count ( * ) from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t3 . district_id = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t1 . store_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t3 . district_id = value"
        },
        {
            "utterance": "What is the name of the store in district 11 ?",
            "sql": "select t1 . store_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t3 . district_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of districts where have both city mall and village store type stores.",
        "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\""
    },
    "interaction": [
        {
            "utterance": "what are the districts that have city mall .",
            "sql": "select t3 . district_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t1 . type = value"
        },
        {
            "utterance": "what are the names of the districts where both city mall and village store type stores .",
            "sql": "select t3 . district_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t1 . type = value intersect select t3 . district_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t1 . type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 7,
    "final": {
        "utterance": "Which district has the least area?",
        "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average of city populations ?",
            "sql": "select avg ( city_population ) from district"
        },
        {
            "utterance": "what is the highest city population ?",
            "sql": "select max ( city_population ) from district"
        },
        {
            "utterance": "which district has the least area ?",
            "sql": "select district_name from district order by city_area asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the products that are not using the most frequently-used max page size.",
        "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What page size do those products use ?",
            "sql": "select max_page_size from product where max_page_size ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of all stores in Khanewal District.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all store IDs along with the associated store names ?",
            "sql": "select store_id , store_name from store"
        },
        {
            "utterance": "Thanks for that ! Can you filter this list to show only the Store ID and Store Name for stores with a district name of Khanewal District ?",
            "sql": "select t1 . store_id , t1 . store_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t3 . district_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 10,
    "final": {
        "utterance": "Which district has the largest population?",
        "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which district has the largest population ?",
            "sql": "select district_name from district order by city_population desc limit value"
        },
        {
            "utterance": "What is its headquartered city ?",
            "sql": "select headquartered_city from district order by city_population desc limit value"
        },
        {
            "utterance": "What is that city 's area ?",
            "sql": "select city_area from district order by city_population desc limit value"
        },
        {
            "utterance": "How many cities have a population over 500,000 ?",
            "sql": "select count ( * ) from district where city_population > value"
        },
        {
            "utterance": "What are the names of those cities ?",
            "sql": "select headquartered_city from district where city_population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the number of stores in each city.",
        "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"
    },
    "interaction": [
        {
            "utterance": "how many store are presented on the table",
            "sql": "select count ( * ) from store"
        },
        {
            "utterance": "list out the store name",
            "sql": "select store_name from store"
        },
        {
            "utterance": "what is the city population of Attock District",
            "sql": "select city_population from district where headquartered_city = value"
        },
        {
            "utterance": "what is the area size of Neguac",
            "sql": "select area_size from store where store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 12,
    "final": {
        "utterance": "Which city is the headquarter of the store named \"Blackville\" in?",
        "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""
    },
    "interaction": [
        {
            "utterance": "Please list the headquarters of the store that is called Blackville ?",
            "sql": "select t3 . headquartered_city from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t1 . store_name = value"
        },
        {
            "utterance": "What is the population of that city ?",
            "sql": "select t3 . city_population from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id where t1 . store_name = value"
        },
        {
            "utterance": "What is the name of the store in the city with the greatest population ?",
            "sql": "select t1 . store_name from store as t1 join store_district as t2 on t1 . store_id = t2 . store_id join district as t3 on t2 . district_id = t3 . district_id order by t3 . city_population desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 13,
    "final": {
        "utterance": "Which district has the largest population?",
        "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many district there",
            "sql": "select count ( * ) from district"
        },
        {
            "utterance": "what is the city area of Bahawalnagar District",
            "sql": "select city_area from district where district_name = value"
        },
        {
            "utterance": "what is the City Population of Attock District",
            "sql": "select city_population from district where district_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the details of the lots which are not used in any transactions?",
        "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id"
    },
    "interaction": [
        {
            "utterance": "What are all of the lots ?",
            "sql": "select * from lots"
        },
        {
            "utterance": "Which lots are not used in any transactions ? | do you mean the id of lots or the details of lot | The id of the lots please .",
            "sql": "select lot_id from lots except select t1 . lot_id from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . lot_id"
        },
        {
            "utterance": "What are the details of the lots which are n't used in any transactions ?",
            "sql": "select lot_details from lots except select t1 . lot_details from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . lot_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000"
    },
    "interaction": [
        {
            "utterance": "when did the transactions that were less that 3000 occur ?",
            "sql": "select t2 . date_of_transaction from sales as t1 join transactions as t2 on t1 . sales_transaction_id = t2 . transaction_id where t2 . amount_of_transaction < value"
        },
        {
            "utterance": "which transactions were sales ?",
            "sql": "select transaction_id from transactions where transaction_type_code = value"
        },
        {
            "utterance": "ok i see the transactions of the sales . and then what are the ones that were purchases ?",
            "sql": "select transaction_id from transactions where transaction_type_code = value"
        },
        {
            "utterance": "what investors were involved with those transactions that were under 3000 ?",
            "sql": "select t2 . investor_id from sales as t1 join transactions as t2 on t1 . sales_transaction_id = t2 . transaction_id where t2 . amount_of_transaction < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the average share count of transactions each each investor, ordered by average share count.",
        "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)"
    },
    "interaction": [
        {
            "utterance": "Could you please show me the average share count of transactions of each investor ?",
            "sql": "select investor_id , avg ( share_count ) from transactions group by investor_id"
        },
        {
            "utterance": "Could you order those by average share count , please ?",
            "sql": "select investor_id , avg ( share_count ) from transactions group by investor_id order by avg ( share_count )"
        },
        {
            "utterance": "What are the dates of those transactions ?",
            "sql": "select date_of_transaction from transactions"
        },
        {
            "utterance": "What about just the ones with the transaction type code SALE ?",
            "sql": "select date_of_transaction from transactions where transaction_type_code = value"
        },
        {
            "utterance": "What about transactions with type code PUR ?",
            "sql": "select date_of_transaction from transactions where transaction_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100"
    },
    "interaction": [
        {
            "utterance": "Can you show the dates of transactions with at least 100 share count ?",
            "sql": "select date_of_transaction from transactions where share_count > = value"
        },
        {
            "utterance": "Hmm , I want to know the dates of transactions with amount bigger than 100 please .",
            "sql": "select date_of_transaction from transactions where amount_of_transaction > value"
        },
        {
            "utterance": "Can you list the dates of transactions for all of them ?",
            "sql": "select date_of_transaction from transactions where share_count > = value or amount_of_transaction > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the maximum and minimum share count of different transaction types.",
        "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
    },
    "interaction": [
        {
            "utterance": "What is the maximum share count of all of the different transaction type codes ?",
            "sql": "select transaction_type_code , max ( share_count ) from transactions group by transaction_type_code"
        },
        {
            "utterance": "What is the minimum share count of the transaction type code PUR ?",
            "sql": "select share_count from transactions where transaction_type_code = value and share_count ! = value order by share_count limit value"
        },
        {
            "utterance": "What is the share count of transaction id 2 ?",
            "sql": "select share_count from transactions where transaction_id = value"
        },
        {
            "utterance": "What is the lowest share count ?",
            "sql": "select share_count from transactions where share_count ! = value order by share_count limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 5,
    "final": {
        "utterance": "Show details of all investors if they make any transaction with share count greater than 100.",
        "sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100"
    },
    "interaction": [
        {
            "utterance": "Show details of all investors that made transactions with sgare greater than 100 ?",
            "sql": "select t1 . investor_details from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id where t2 . share_count > value"
        },
        {
            "utterance": "What is the transaction id of all investors that made transactions with sgare greater than 100 ?",
            "sql": "select t2 . transaction_id from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id where t2 . share_count > value"
        },
        {
            "utterance": "What is the transaction type code of transaction id 2 ?",
            "sql": "select t2 . transaction_type_code from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id where t2 . transaction_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50"
    },
    "interaction": [
        {
            "utterance": "How many transactions share a count smaller than 50 ?",
            "sql": "select count ( * ) from transactions where share_count < value"
        },
        {
            "utterance": "What lots are associate with those transactions with a count smaller than 50 ? | Do you mean all the information about lots or some specific attributes ? | What are all of the details about the lots ?",
            "sql": "select t1 . lot_details from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . transaction_id join transactions as t3 on t2 . transaction_id = t3 . transaction_id where t3 . share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50"
    },
    "interaction": [
        {
            "utterance": "How many transactions have the type code PUR ?",
            "sql": "select count ( * ) from transactions where transaction_type_code = value"
        },
        {
            "utterance": "How many transactions have a share count larger than 50 ?",
            "sql": "select count ( * ) from transactions where share_count > value"
        },
        {
            "utterance": "What is the least amount of transactions that have both a type code of PUR and a share count larger than 50 ?",
            "sql": "select min ( amount_of_transaction ) from transactions where transaction_type_code = value and share_count > value"
        },
        {
            "utterance": "How many transactions have the type code PUR and a share count larger than 50 ?",
            "sql": "select count ( * ) from transactions where transaction_type_code = value and share_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10"
    },
    "interaction": [
        {
            "utterance": "Would you show the transaction type descriptions if the share count is smaller than 10 ?",
            "sql": "select t1 . transaction_type_description from ref_transaction_types as t1 join transactions as t2 on t1 . transaction_type_code = t2 . transaction_type_code where t2 . share_count < value"
        },
        {
            "utterance": "What are the dates of those ?",
            "sql": "select t2 . date_of_transaction from ref_transaction_types as t1 join transactions as t2 on t1 . transaction_type_code = t2 . transaction_type_code where t2 . share_count < value"
        },
        {
            "utterance": "What were the amounts of those transactions ?",
            "sql": "select t2 . amount_of_transaction from ref_transaction_types as t1 join transactions as t2 on t1 . transaction_type_code = t2 . transaction_type_code where t2 . share_count < value"
        },
        {
            "utterance": "Would you show the transaction type descriptions if the share count is equal to or larger than 10 ?",
            "sql": "select t1 . transaction_type_description from ref_transaction_types as t1 join transactions as t2 on t1 . transaction_type_code = t2 . transaction_type_code where t2 . share_count > = value"
        },
        {
            "utterance": "What were the dates of those transactions ? | Do you mean the transactions with share count equal to or larger than 10 ? | Yes please , if you do n't mind ?",
            "sql": "select t2 . date_of_transaction from ref_transaction_types as t1 join transactions as t2 on t1 . transaction_type_code = t2 . transaction_type_code where t2 . share_count > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the maximum and minimum share count of different transaction types.",
        "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
    },
    "interaction": [
        {
            "utterance": "what are the sale ?",
            "sql": "select * from transactions"
        },
        {
            "utterance": "How many purchase in this above the table",
            "sql": "select count ( * ) from transactions"
        },
        {
            "utterance": "what is the purchase investor Id ?",
            "sql": "select investor_id from transactions"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the transaction type code that occurs the most frequently.",
        "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the transaction type code that occurs most often ?",
            "sql": "select transaction_type_code from transactions group by transaction_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the transaction type code that occurs least often ?",
            "sql": "select transaction_type_code from transactions group by transaction_type_code order by count ( * ) limit value"
        },
        {
            "utterance": "What is the average of all transactions ? | The average of all transactions is 11198167.237771427 | What is the average of all transactions with the transaction type code `` PUR '' ?",
            "sql": "select avg ( amount_of_transaction ) from transactions where transaction_type_code = value"
        },
        {
            "utterance": "What is the average of all transactions with the transaction type code `` SALE '' ?",
            "sql": "select avg ( amount_of_transaction ) from transactions where transaction_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id"
    },
    "interaction": [
        {
            "utterance": "what is the transaction type code for the investor with id 18",
            "sql": "select transaction_type_code from transactions where investor_id = value"
        },
        {
            "utterance": "How much is the amount of transaction for transaction with id 3",
            "sql": "select amount_of_transaction from transactions where transaction_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000"
    },
    "interaction": [
        {
            "utterance": "Show the date of transaction where share count is larger than 100",
            "sql": "select date_of_transaction from transactions where share_count > value"
        },
        {
            "utterance": "What are the transaction IDs of those results ?",
            "sql": "select transaction_id from transactions where share_count > value"
        },
        {
            "utterance": "Show date of transaction where amount of transaction larger than 1000",
            "sql": "select date_of_transaction from transactions where amount_of_transaction > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the id and details for the investors who have the top 3 number of transactions.",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Could you show me the IDs for the investors who have the top 3 number of transactions ?",
            "sql": "select t2 . investor_id from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id group by t2 . investor_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Could you add in the investor details to the table please ?",
            "sql": "select t2 . investor_id , t1 . investor_details from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id group by t2 . investor_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Could you show me the IDs for the investors who have the bottom 3 number of transactions ?",
            "sql": "select t2 . investor_id from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id group by t2 . investor_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "What are the investor ID and details for the investor who had the earliest transaction date ?",
            "sql": "select t2 . investor_id , t1 . investor_details from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id group by t2 . investor_id order by t2 . date_of_transaction asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the ids of the investors who have at least two transactions.",
        "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many investors are there ?",
            "sql": "select count ( * ) from investors"
        },
        {
            "utterance": "How many investors have at least two transactions ?",
            "sql": "select count ( * ) from ( select t2 . investor_id from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id group by t2 . investor_id having count ( * ) > = value )"
        },
        {
            "utterance": "Show me their Ids .",
            "sql": "select t2 . investor_id from investors as t1 join transactions as t2 on t1 . investor_id = t2 . investor_id group by t2 . investor_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10"
    },
    "interaction": [
        {
            "utterance": "hi ! How many transactions have greater than 10 share count ?",
            "sql": "select count ( * ) from transactions where share_count > value"
        },
        {
            "utterance": "What are their transaction type descriptions ?",
            "sql": "select t1 . transaction_type_description from ref_transaction_types as t1 join transactions as t2 on t1 . transaction_type_code = t2 . transaction_type_code where t2 . share_count < value"
        },
        {
            "utterance": "What about their date ?",
            "sql": "select t2 . date_of_transaction from ref_transaction_types as t1 join transactions as t2 on t1 . transaction_type_code = t2 . transaction_type_code where t2 . share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\""
    },
    "interaction": [
        {
            "utterance": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is `` PUR '' ?",
            "sql": "select t1 . lot_details from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . transaction_id join transactions as t3 on t2 . transaction_id = t3 . transaction_id where t3 . share_count > value and t3 . transaction_type_code = value"
        },
        {
            "utterance": "Which has the highest amount of transaction ?",
            "sql": "select t1 . lot_details from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . transaction_id join transactions as t3 on t2 . transaction_id = t3 . transaction_id where t3 . share_count > value and t3 . transaction_type_code = value order by t3 . amount_of_transaction desc limit value"
        },
        {
            "utterance": "what was the date of that transaction ?",
            "sql": "select t3 . date_of_transaction from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . transaction_id join transactions as t3 on t2 . transaction_id = t3 . transaction_id where t3 . share_count > value and t3 . transaction_type_code = value order by t3 . amount_of_transaction desc limit value"
        },
        {
            "utterance": "What transaction type code did that have ?",
            "sql": "select t3 . transaction_type_code from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . transaction_id join transactions as t3 on t2 . transaction_id = t3 . transaction_id where t3 . share_count > value and t3 . transaction_type_code = value order by t3 . amount_of_transaction desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 17,
    "final": {
        "utterance": "Return the lot details of lots that belong to investors with details \"l\"?",
        "sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\""
    },
    "interaction": [
        {
            "utterance": "Can you show me a list of all of the lots that belong to category 'i ' within the 'lot details ' column ?",
            "sql": "select * from lots where lot_details = value"
        },
        {
            "utterance": "My apologies ! I mean ask for `` l '' or lower-case L ... Therefore , can you list the lots that belong to category `` l '' in the 'lot details ' column ?",
            "sql": "select * from lots where lot_details = value"
        },
        {
            "utterance": "Oh sorry ! I am all mixed up ! Third time 's a charm ! Can you provide me with the lot details for all lots that belong to investors which belong to the 'investor id ' category of `` l '' ?",
            "sql": "select t2 . lot_details from investors as t1 join lots as t2 on t1 . investor_id = t2 . investor_id where t1 . investor_details = value"
        },
        {
            "utterance": "Excellent ! Can you list the investor IDs that correspond to each of these lot_details ?",
            "sql": "select t1 . investor_id , t2 . lot_details from investors as t1 join lots as t2 on t1 . investor_id = t2 . investor_id where t1 . investor_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what is transactions type code ? | Did you want all of the transactions type code ? | yes",
            "sql": "select distinct transaction_type_code from transactions"
        },
        {
            "utterance": "what is the share count ?",
            "sql": "select distinct share_count from transactions"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)"
    },
    "interaction": [
        {
            "utterance": "What is the overall average amount of transactions ?",
            "sql": "select avg ( amount_of_transaction ) from transactions"
        },
        {
            "utterance": "How about average amount of transaction for different lots ?",
            "sql": "select t2 . lot_id , avg ( amount_of_transaction ) from transactions as t1 join transactions_lots as t2 on t1 . transaction_id = t2 . transaction_id group by t2 . lot_id"
        },
        {
            "utterance": "Which lot has the highest average transaction amount ?",
            "sql": "select t2 . lot_id , avg ( amount_of_transaction ) from transactions as t1 join transactions_lots as t2 on t1 . transaction_id = t2 . transaction_id group by t2 . lot_id order by avg ( amount_of_transaction ) desc limit value"
        },
        {
            "utterance": "What about the lowest average ?",
            "sql": "select t2 . lot_id , avg ( amount_of_transaction ) from transactions as t1 join transactions_lots as t2 on t1 . transaction_id = t2 . transaction_id group by t2 . lot_id order by avg ( amount_of_transaction ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the details of all sales and purchases?",
        "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases"
    },
    "interaction": [
        {
            "utterance": "list all the sales details",
            "sql": "select sales_details from sales"
        },
        {
            "utterance": "list the details of the purchases",
            "sql": "select purchase_details from purchases"
        },
        {
            "utterance": "prepare a table with both the sales and purchase details",
            "sql": "select sales_details from sales union select purchase_details from purchases"
        },
        {
            "utterance": "include sales and purchase id in the list",
            "sql": "select sales_transaction_id , sales_details from sales union select purchase_transaction_id , purchase_details from purchases"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the details of the lots which are not used in any transactions?",
        "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id"
    },
    "interaction": [
        {
            "utterance": "what are the details of the lots which are not used in any transactions ?",
            "sql": "select lot_details from lots except select t1 . lot_details from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . lot_id"
        },
        {
            "utterance": "what is the transaction id of lot id 11",
            "sql": "select transaction_id from transactions_lots where lot_id = value"
        },
        {
            "utterance": "what is the investor id of transaction id 3 ?",
            "sql": "select t1 . investor_id from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . lot_id where t2 . transaction_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the transaction type code that occurs the fewest times.",
        "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of transaction type code ?",
            "sql": "select transaction_type_code from transactions"
        },
        {
            "utterance": "what is the average of amount of transaction ?",
            "sql": "select avg ( amount_of_transaction ) from transactions"
        },
        {
            "utterance": "can you show me a list of share count ?",
            "sql": "select share_count from transactions"
        },
        {
            "utterance": "show the transaction type code that occurs the fewest times .",
            "sql": "select transaction_type_code from transactions group by transaction_type_code order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100"
    },
    "interaction": [
        {
            "utterance": "Can you list the share counts for all transactions ?",
            "sql": "select share_count from transactions"
        },
        {
            "utterance": "Can you add to the table the amount of transaction associated with each share count ?",
            "sql": "select share_count , amount_of_transaction from transactions"
        },
        {
            "utterance": "Can you filter the table to only include transactions with share counts that are at least 100 , or with amounts bigger than 100 ?",
            "sql": "select share_count , amount_of_transaction from transactions where share_count > = value or amount_of_transaction > = value"
        },
        {
            "utterance": "Can you add to the table the dates of those transactions ?",
            "sql": "select date_of_transaction , share_count , amount_of_transaction from transactions where share_count > = value or amount_of_transaction > = value"
        },
        {
            "utterance": "Can you filter the table to only include the dates ?",
            "sql": "select date_of_transaction from transactions where share_count > = value or amount_of_transaction > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50"
    },
    "interaction": [
        {
            "utterance": "What are the lot details associated with these lot ids ?",
            "sql": "select t1 . lot_id , t1 . lot_details from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . transaction_id join transactions as t3 on t2 . transaction_id = t3 . transaction_id where t3 . share_count < value"
        },
        {
            "utterance": "How many lots have share count smaller than 50 ?",
            "sql": "select count ( t1 . lot_id ) from lots as t1 join transactions_lots as t2 on t1 . lot_id = t2 . transaction_id join transactions as t3 on t2 . transaction_id = t3 . transaction_id where t3 . share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000"
    },
    "interaction": [
        {
            "utterance": "What are the dates of transactions with amount smaller than 3000 ?",
            "sql": "select t2 . date_of_transaction from sales as t1 join transactions as t2 on t1 . sales_transaction_id = t2 . transaction_id where t2 . amount_of_transaction < value"
        },
        {
            "utterance": "What are the transaction ids of those ? | Here is the table of the transaction ids of transcation with an amount smaller than 3000 . For example , they are 2 , 4 , 5 | What are the transaction type codes of those ?",
            "sql": "select t2 . transaction_type_code from sales as t1 join transactions as t2 on t1 . sales_transaction_id = t2 . transaction_id where t2 . amount_of_transaction < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\""
    },
    "interaction": [
        {
            "utterance": "Who are the delegates on the Appropriations committee ?",
            "sql": "select delegate from election where committee = value"
        },
        {
            "utterance": "What counties are they from ?",
            "sql": "select t1 . county_name from county as t1 join election as t2 where t1 . county_id = district and t2 . committee = value"
        },
        {
            "utterance": "What districts are they from ?",
            "sql": "select district from election where committee = value"
        },
        {
            "utterance": "What are the populations of the counties they come from , please ?",
            "sql": "select t1 . population from county as t1 join election as t2 where t1 . county_id = district and t2 . committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""
    },
    "interaction": [
        {
            "utterance": "How many parties in this table ?",
            "sql": "select count ( distinct party ) from party"
        },
        {
            "utterance": "Peter Vallone in which party ?",
            "sql": "select party from party where governor = value"
        },
        {
            "utterance": "How many elections in this table ?",
            "sql": "select count ( * ) from election"
        },
        {
            "utterance": "Carl McCall in which party ?",
            "sql": "select party from party where governor = value"
        },
        {
            "utterance": "What are the names of parties that have both delegates on `` Appropriations '' ?",
            "sql": "select t2 . party from election as t1 join party as t2 on t1 . party = t2 . party_id where t1 . committee = value intersect select t2 . party from election as t1 join party as t2 on t1 . party = t2 . party_id where t1 . committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 2,
    "final": {
        "utterance": "Which delegates are from counties with population smaller than 100000?",
        "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"
    },
    "interaction": [
        {
            "utterance": "Which delegates are from countries with population smaller than 100000 ?",
            "sql": "select t2 . delegate from county as t1 join election as t2 on t1 . county_id = t2 . district where t1 . population < value"
        },
        {
            "utterance": "Can you give the name of the countries with population smaller than 100000 ?",
            "sql": "select county_name from county where population < value"
        },
        {
            "utterance": "What is the number of counties with population greater than 100000 ?",
            "sql": "select count ( county_name ) from county where population > value"
        },
        {
            "utterance": "Can you give me the name of the counties with population between 50000 and 100000 ?",
            "sql": "select county_name from county where population < value and population > value"
        },
        {
            "utterance": "What are the committee names for the counties with population smaller than 100000 ?",
            "sql": "select t2 . committee from county as t1 join election as t2 on t1 . county_id = t2 . district where t1 . population < value"
        },
        {
            "utterance": "What are the committee names for the counties with population between 50000-100000 ?",
            "sql": "select t2 . committee from county as t1 join election as t2 on t1 . county_id = t2 . district where t1 . population < value and t1 . population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name of the party that has at least two records.",
        "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many parties are there ?",
            "sql": "select count ( * ) from party"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select party from party"
        },
        {
            "utterance": "Is there any party that has at least two records ?",
            "sql": "select party from party group by party having count ( * ) > value"
        },
        {
            "utterance": "Yes , can you show me all the attorney generals from democratic party ?",
            "sql": "select attorney_general from party where party = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name of the party that has at least two records.",
        "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many parties have at least two records ?",
            "sql": "select count ( * ) from ( select party from party group by party having count ( * ) > = value )"
        },
        {
            "utterance": "What are those parties ?",
            "sql": "select party from party group by party having count ( * ) > = value"
        },
        {
            "utterance": "Who are the comptroller of those individuals ?",
            "sql": "select comptroller from party where us_senate in ( select us_senate from party where party in ( select party from party group by party having count ( * ) > = value ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 5,
    "final": {
        "utterance": "Which committees have delegates from both democratic party and liberal party?",
        "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    "interaction": [
        {
            "utterance": "Which committees have delegates from the democratic party ?",
            "sql": "select t1 . committee from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value"
        },
        {
            "utterance": "Which committees have delegates from the liberal party ?",
            "sql": "select t1 . committee from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value"
        },
        {
            "utterance": "Which committees have delegates from both parties , please ?",
            "sql": "select t1 . committee from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value intersect select t1 . committee from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 6,
    "final": {
        "utterance": "Return the maximum and minimum population among all counties.",
        "sql": "SELECT max(Population) ,  min(Population) FROM county"
    },
    "interaction": [
        {
            "utterance": "What is the average population across the counties ?",
            "sql": "select avg ( population ) from county"
        },
        {
            "utterance": "Which county 's population is lowest ?",
            "sql": "select county_name from county order by population asc limit value"
        },
        {
            "utterance": "What county has the highest population ?",
            "sql": "select county_name from county order by population desc limit value"
        },
        {
            "utterance": "And what is its zip code ?",
            "sql": "select zip_code from county order by population desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of counties that have at least two delegates.",
        "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Could you list the names of all counties in ascending alphabetical order ?",
            "sql": "select county_name from county order by county_name"
        },
        {
            "utterance": "How many delegates do each of these counties have ?",
            "sql": "select t1 . county_name , count ( * ) from county as t1 join election as t2 on t1 . county_id = t2 . district group by t1 . county_id"
        },
        {
            "utterance": "Could you only show the counties that have at least two delegates ?",
            "sql": "select t1 . county_name from county as t1 join election as t2 on t1 . county_id = t2 . district group by t1 . county_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 8,
    "final": {
        "utterance": "How many distinct delegates are from counties with population larger than 50000?",
        "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"
    },
    "interaction": [
        {
            "utterance": "What is the zip code of county id of 2",
            "sql": "select zip_code from county where county_id = value"
        },
        {
            "utterance": "how much population of zip code D21 ?",
            "sql": "select population from county where zip_code = value"
        },
        {
            "utterance": "what is the county name zip code D02 ?",
            "sql": "select county_name from county where zip_code = value"
        },
        {
            "utterance": "what is election id of district 2 ?",
            "sql": "select election_id from election where district = value"
        },
        {
            "utterance": "how many distinct delegates are from counties with population larger than 50000",
            "sql": "select count ( distinct t2 . delegate ) from county as t1 join election as t2 on t1 . county_id = t2 . district where t1 . population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 9,
    "final": {
        "utterance": "Return the maximum and minimum population among all counties.",
        "sql": "SELECT max(Population) ,  min(Population) FROM county"
    },
    "interaction": [
        {
            "utterance": "how many zip codes in the county table",
            "sql": "select count ( zip_code ) from county"
        },
        {
            "utterance": "how many county id in the county table",
            "sql": "select count ( county_id ) from county"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 10,
    "final": {
        "utterance": "Return all the committees that have delegates from Democratic party.",
        "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\""
    },
    "interaction": [
        {
            "utterance": "Return all the committees that have delegates from Democratic Party .",
            "sql": "select t1 . committee from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value"
        },
        {
            "utterance": "Hmm . Please return all the committees that have delegates from Liberal party .",
            "sql": "select t1 . committee from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value"
        },
        {
            "utterance": "Please give me all the delegates 's names from Liberal party in Appropriations committee",
            "sql": "select t1 . delegate from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value and t1 . committee = value"
        },
        {
            "utterance": "Can you also give me all the delegate 's name from Liberal party in Economic Matters committee .",
            "sql": "select t1 . delegate from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value and t1 . committee = value"
        },
        {
            "utterance": "Can you please give the delegates name from Democratic Party in economic matters committee ?",
            "sql": "select t1 . delegate from election as t1 join party as t2 on t1 . party = t2 . party_id where t2 . party = value and t1 . committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the name of the party that has the most delegates.",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the Lieutenant Governor name for the year 1998 ?",
            "sql": "select lieutenant_governor from party where year = value"
        },
        {
            "utterance": "Who is the Delegate for the election id 1 ?",
            "sql": "select delegate from election where election_id = value"
        },
        {
            "utterance": "Show the name of the party that has the most delegates ?",
            "sql": "select t2 . party from election as t1 join party as t2 on t1 . party = t2 . party_id group by t1 . party order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the name of the county with the biggest population.",
        "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Yes , what 's the name of the county with the biggest population ?",
            "sql": "select county_name from county order by population desc limit value"
        },
        {
            "utterance": "And the name with the smallest population ?",
            "sql": "select county_name from county order by population asc limit value"
        },
        {
            "utterance": "What is the population of Baltimore County ?",
            "sql": "select population from county where county_name = value"
        },
        {
            "utterance": "What is its zip code ?",
            "sql": "select zip_code from county where county_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of phones that are not on any market.",
        "sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)"
    },
    "interaction": [
        {
            "utterance": "How many different markets are there ?",
            "sql": "select count ( distinct market_id ) from phone_market"
        },
        {
            "utterance": "How many different phones are there ?",
            "sql": "select count ( distinct name ) from phone"
        },
        {
            "utterance": "Which phone is sold in the most different markets ?",
            "sql": "select t1 . name from phone as t1 join phone_market as t2 on t1 . phone_id = t2 . phone_id group by t1 . phone_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many phones are not available in any markets ?",
            "sql": "select count ( name ) from phone where phone_id not in ( select phone_id from phone_market )"
        },
        {
            "utterance": "What is the name of that phone ?",
            "sql": "select name from phone where phone_id not in ( select phone_id from phone_market )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking"
    },
    "interaction": [
        {
            "utterance": "Show the names of phones and the districts of markets they are on , in ascending order of the ranking of the market .",
            "sql": "select t3 . name , t2 . district from phone_market as t1 join market as t2 on t1 . market_id = t2 . market_id join phone as t3 on t1 . phone_id = t3 . phone_id order by t2 . ranking"
        },
        {
            "utterance": "Which carriers are active in Alberta ?",
            "sql": "select t3 . carrier from phone_market as t1 join market as t2 on t1 . market_id = t2 . market_id join phone as t3 on t1 . phone_id = t3 . phone_id where t2 . district = value"
        },
        {
            "utterance": "Where else is TMobile active ?",
            "sql": "select t2 . district from phone_market as t1 join market as t2 on t1 . market_id = t2 . market_id join phone as t3 on t1 . phone_id = t3 . phone_id where t3 . carrier = value and t2 . district ! = value"
        },
        {
            "utterance": "Which phones does TMobile support ?",
            "sql": "select name from phone where carrier = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 2,
    "final": {
        "utterance": "For each phone, show its names and total number of stocks.",
        "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "State the phone name which has the least price on the list ?",
            "sql": "select name from phone as t2 order by price asc limit value"
        },
        {
            "utterance": "Which phone id has the highest stock on the list ?",
            "sql": "select phone_id from phone_market order by num_of_stock desc limit value"
        },
        {
            "utterance": "For each phone , show its names and total number of stocks ?",
            "sql": "select t2 . name , sum ( t1 . num_of_stock ) from phone_market as t1 join phone as t2 on t1 . phone_id = t2 . phone_id group by t2 . name"
        },
        {
            "utterance": "State the name of the Carrier of Iphone 6s ?",
            "sql": "select carrier from phone where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of phones and the districts of markets they are on.",
        "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    "interaction": [
        {
            "utterance": "Can you list all market ids and the names of the districts associated with them ?",
            "sql": "select market_id , district from market"
        },
        {
            "utterance": "Can you add to the table the phone ids from the table phone market that are associated with each market id ?",
            "sql": "select t1 . market_id , t1 . district , t2 . phone_id from market as t1 join phone_market as t2 on t1 . market_id = t2 . market_id"
        },
        {
            "utterance": "Can you add to the table the name of the phones associated with each of the phone ids ?",
            "sql": "select t2 . market_id , t2 . district , t1 . phone_id , t3 . name from phone_market as t1 join market as t2 on t1 . market_id = t2 . market_id join phone as t3 on t1 . phone_id = t3 . phone_id"
        },
        {
            "utterance": "Can you sort the table by phone id , but still retain all information within the table ?",
            "sql": "select t2 . market_id , t2 . district , t1 . phone_id , t3 . name from phone_market as t1 join market as t2 on t1 . market_id = t2 . market_id join phone as t3 on t1 . phone_id = t3 . phone_id order by t1 . phone_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC"
    },
    "interaction": [
        {
            "utterance": "Could you give me the names of all phones ?",
            "sql": "select distinct ( name ) from phone"
        },
        {
            "utterance": "How about only the phones with more than 2000 units in stock ?",
            "sql": "select t2 . name from phone_market as t1 join phone as t2 on t1 . phone_id = t2 . phone_id group by t2 . name having sum ( t1 . num_of_stock ) > value"
        },
        {
            "utterance": "Great ! Can you put them in descending order of total number of stock ?",
            "sql": "select t2 . name from phone_market as t1 join phone as t2 on t1 . phone_id = t2 . phone_id group by t2 . name having sum ( t1 . num_of_stock ) > value order by sum ( t1 . num_of_stock ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "sql": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64"
    },
    "interaction": [
        {
            "utterance": "Can you show me the carriers that have phones with memories smaller than 32 ?",
            "sql": "select carrier from phone where memory_in_g < value"
        },
        {
            "utterance": "Can you show me the carriers that have phones with memories bigger than 64 ?",
            "sql": "select carrier from phone where memory_in_g > value"
        },
        {
            "utterance": "Can you show me the carriers that have phones with memories smaller than 32 and bigger than 64 ?",
            "sql": "select carrier from phone where memory_in_g < value intersect select carrier from phone where memory_in_g > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "sql": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\""
    },
    "interaction": [
        {
            "utterance": "Can you show me the total number of phones ?",
            "sql": "select count ( * ) from phone"
        },
        {
            "utterance": "how about the total number of different carriers ?",
            "sql": "select count ( distinct carrier ) from phone"
        },
        {
            "utterance": "Can you list the phones with carrier either Sprint or TMobile ?",
            "sql": "select phone_id from phone where carrier = value or carrier = value"
        },
        {
            "utterance": "Can you please include their names ?",
            "sql": "select phone_id , name from phone where carrier = value or carrier = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of all the donors except those whose donation amount less than 9.",
        "sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9"
    },
    "interaction": [
        {
            "utterance": "Hello , can you provide me with the names of the donors ?",
            "sql": "select donator_name from endowment"
        },
        {
            "utterance": "How many donors were there total ?",
            "sql": "select count ( distinct donator_name ) from endowment"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of the school with the smallest enrollment.",
        "sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the name of the school with the highest enrollment ?",
            "sql": "select school_name from school order by enrollment desc limit value"
        },
        {
            "utterance": "Which school is the top enrollment ?",
            "sql": "select school_name from school order by enrollment desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 2,
    "final": {
        "utterance": "How many donors have endowment for school named \"Glenn\"?",
        "sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\""
    },
    "interaction": [
        {
            "utterance": "How many schools are in Walkerton ?",
            "sql": "select count ( * ) from school where location = value"
        },
        {
            "utterance": "How many donors have endowment for the school named Glenn ?",
            "sql": "select count ( distinct t1 . donator_name ) from endowment as t1 join school as t2 on t1 . school_id = t2 . school_id where t2 . school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which donators have a donation amount above 8.5 ?",
            "sql": "select donator_name from endowment where amount > value"
        },
        {
            "utterance": "Which school ids have at least two of those donators ?",
            "sql": "select t2 . school_id from endowment as t1 join school as t2 on t1 . school_id = t2 . school_id where t1 . amount > value group by t1 . school_id having count ( * ) > value"
        },
        {
            "utterance": "What are the schools names ?",
            "sql": "select t2 . school_name from endowment as t1 join school as t2 on t1 . school_id = t2 . school_id where t1 . amount > value group by t1 . school_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 4,
    "final": {
        "utterance": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
        "sql": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted"
    },
    "interaction": [
        {
            "utterance": "What location of school name Bremen ?",
            "sql": "select location from school where school_name = value"
        },
        {
            "utterance": "How many enrollment of school id 2 ?",
            "sql": "select enrollment from school where school_id = value"
        },
        {
            "utterance": "How many invested in the school with mascot Falcons ?",
            "sql": "select invested from school as t1 join budget as t2 on t1 . school_id = t2 . school_id where t1 . mascot = value"
        },
        {
            "utterance": "List the name , IHSAA Football Class , and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003 , in the order of percent of total invested budget and total budgeted budget .",
            "sql": "select t1 . school_name , t1 . mascot , t1 . ihsaa_football_class from school as t1 join budget as t2 on t1 . school_id = t2 . school_id where budgeted > value or year < value order by t2 . total_budget_percent_invested , t2 . total_budget_percent_budgeted"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10"
    },
    "interaction": [
        {
            "utterance": "Show the names of schools",
            "sql": "select school_name from school"
        },
        {
            "utterance": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10",
            "sql": "select t2 . school_name from budget as t1 join school as t2 on t1 . school_id = t2 . school_id join endowment as t3 on t2 . school_id = t3 . school_id group by t2 . school_name having sum ( t1 . budgeted ) > value or sum ( t3 . amount ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 6,
    "final": {
        "utterance": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "sql": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"
    },
    "interaction": [
        {
            "utterance": "List each donator name and the amount of endowment in descending order of the amount of endorsement .",
            "sql": "select donator_name , sum ( amount ) from endowment group by donator_name order by sum ( amount ) desc"
        },
        {
            "utterance": "which donator has the highest endowment ? | Did you mean endowment id ? | which donator has the highest amount of endowment ?",
            "sql": "select donator_name , sum ( amount ) from endowment group by donator_name order by sum ( amount ) desc limit value"
        },
        {
            "utterance": "which donator has the lowest endowment amount ?",
            "sql": "select donator_name , sum ( amount ) from endowment group by donator_name order by sum ( amount ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of the schools without any endowment.",
        "sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)"
    },
    "interaction": [
        {
            "utterance": "what is the location of School id 1",
            "sql": "select location from school where school_id = value"
        },
        {
            "utterance": "What is the amount for donator name Distrito Nacional ?",
            "sql": "select amount from endowment where donator_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the average, maximum, minimum enrollment of all schools.",
        "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"
    },
    "interaction": [
        {
            "utterance": "how many school are presented on the table",
            "sql": "select count ( * ) from school"
        },
        {
            "utterance": "list out the school name",
            "sql": "select school_name from school"
        },
        {
            "utterance": "what is the location of bremen",
            "sql": "select location from school where school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the mascots for schools with enrollments above the average?",
        "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
    },
    "interaction": [
        {
            "utterance": "yes , i want to know about the mascots for schools . | What about the mascot for schools do you want to know ? | I want to know that what are the mascots for schools with enrollments above the average ?",
            "sql": "select mascot from school where enrollment > ( select avg ( enrollment ) from school )"
        },
        {
            "utterance": "but i want above average list only .",
            "sql": "select mascot from school where enrollment > ( select avg ( enrollment ) from school )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the average, maximum, minimum enrollment of all schools.",
        "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"
    },
    "interaction": [
        {
            "utterance": "Can you show me the average enrollment of all schools ?",
            "sql": "select avg ( enrollment ) from school"
        },
        {
            "utterance": "Can you show me the maximum enrollment of all schools ?",
            "sql": "select max ( enrollment ) from school"
        },
        {
            "utterance": "Can you show me the minimum enrollment of all schools ?",
            "sql": "select min ( enrollment ) from school"
        },
        {
            "utterance": "What is the name of the school with the maximum enrollment ?",
            "sql": "select school_name from school order by enrollment desc limit value"
        },
        {
            "utterance": "What is the name of the school with the minimum enrollment ?",
            "sql": "select school_name from school order by enrollment limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 11,
    "final": {
        "utterance": "List the amount and donor name for the largest amount of donation.",
        "sql": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the amount for the largest donation",
            "sql": "select amount from endowment order by amount desc limit value"
        },
        {
            "utterance": "list the name for the largest amount of donation",
            "sql": "select donator_name from endowment order by amount desc limit value"
        },
        {
            "utterance": "what is the name for the smallest amount of donation",
            "sql": "select donator_name from endowment order by amount asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the mascots for schools with enrollments above the average?",
        "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
    },
    "interaction": [
        {
            "utterance": "WHAT ARE THE MASCOTS FOR THE SCHOOLS ENROLLMENTS ABOVE THE AVERAGE",
            "sql": "select mascot from school where enrollment > ( select avg ( enrollment ) from school )"
        },
        {
            "utterance": "TELL ME THE LOCATION OF GLENN | Do you mean the location of the school named `` Glenn '' ? | YES",
            "sql": "select location from school where school_name = value"
        },
        {
            "utterance": "TELL ME THE ENROLLMENT OF CULVER COMMUNITY",
            "sql": "select enrollment from school where school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""
    },
    "interaction": [
        {
            "utterance": "What is the venue of the competition `` 1994 FIFA World cup qualification '' hosted by `` Hangzou '' ?",
            "sql": "select t3 . venue from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city join match as t3 on t2 . match_id = t3 . match_id where t1 . city = value and t3 . competition = value"
        },
        {
            "utterance": "ok. What is the venue of the competition `` 1994 FIFA World Cup qualification '' hosted by `` Nanjing '' ( Jiangsu ) '' ?",
            "sql": "select t3 . venue from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city join match as t3 on t2 . match_id = t3 . match_id where t1 . city = value and t3 . competition = value"
        },
        {
            "utterance": "What is the GDP of the city Shanghai in the table ?",
            "sql": "select gdp from city where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 1,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Could you list all the cities in ascending alphabetical order ?",
            "sql": "select city from city order by city asc"
        },
        {
            "utterance": "Which cities were once host cities ?",
            "sql": "select t3 . city from city as t3 join hosting_city as t4 on t3 . city_id = t4 . host_city"
        },
        {
            "utterance": "Which cities had a higher temperature in Feb than in Jun or were a host city ?",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t2 . feb > t2 . jun union select t3 . city from city as t3 join hosting_city as t4 on t3 . city_id = t4 . host_city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 2,
    "final": {
        "utterance": "what is the GDP of the city with the largest population.",
        "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the largest population among the cities ?",
            "sql": "select regional_population from city order by regional_population desc limit value"
        },
        {
            "utterance": "Hmm , I want to know the name of the city with this population .",
            "sql": "select city from city order by regional_population desc limit value"
        },
        {
            "utterance": "What is the GDP of Shanghai ?",
            "sql": "select gdp from city where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 3,
    "final": {
        "utterance": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000"
    },
    "interaction": [
        {
            "utterance": "How many cities have a regional population over 8000000 ?",
            "sql": "select count ( city ) from city where regional_population > value"
        },
        {
            "utterance": "How many cities have a population under 5000000 ?",
            "sql": "select count ( city ) from city where regional_population < value"
        },
        {
            "utterance": "What are the names of those cities ?",
            "sql": "select city from city where regional_population < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Which cities have served as host cities ? | Do you want the names of the cities who served as host cities ? | Yes .",
            "sql": "select distinct t1 . city from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city"
        },
        {
            "utterance": "Which of these host cities has a lower temperature in March than July .",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t2 . mar < t2 . jul intersect select t3 . city from city as t3 join hosting_city as t4 on t3 . city_id = t4 . host_city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 5,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Tell me Regional Population and GDP for City ID 2 ?",
            "sql": "select regional_population , gdp from city where city_id = value"
        },
        {
            "utterance": "Tell me temperature for City ID 2 for Jan , Apr and Oct",
            "sql": "select jan , apr , oct from temperature where city_id = value"
        },
        {
            "utterance": "high value of temperature ... | I mean how high is high ? You can say temperature higher than a certain number . | Higher than 21",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t2 . mar > value"
        },
        {
            "utterance": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities ?",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t2 . mar < t2 . jul intersect select t3 . city from city as t3 join hosting_city as t4 on t3 . city_id = t4 . host_city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 6,
    "final": {
        "utterance": "Which three cities have the largest regional population?",
        "sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you tell me which three cities have the highest regional populations , and list the population totals too ?",
            "sql": "select city , regional_population from city order by regional_population desc limit value"
        },
        {
            "utterance": "Great ! And what is the average GDP among all of the cities ?",
            "sql": "select avg ( gdp ) from city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the GDP and population of the city that already served as a host more than once?",
        "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the city that already served as host more than once ? | The names in English or Hanzi ? | English , please .",
            "sql": "select t1 . city from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city group by t2 . host_city having count ( * ) > value"
        },
        {
            "utterance": "What is the GDP and population of Nanjing \uff08Jiangsu\uff09 ?",
            "sql": "select distinct t1 . gdp , t1 . regional_population from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city where t1 . city = value"
        },
        {
            "utterance": "What is the name of the city in English and Hanzi that hosted in 2011 ?",
            "sql": "select t1 . city , t1 . hanzi from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city where t2 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 8,
    "final": {
        "utterance": "What is id of the city that hosted events in the most recent year?",
        "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello , can you tell me which city hosted events in the most recent year ? | Which attribute of the city do you want ? | How about , what is the most recent year ?",
            "sql": "select year from hosting_city order by year desc limit value"
        },
        {
            "utterance": "What was the match id in 2013 ?",
            "sql": "select match_id from hosting_city where year = value"
        },
        {
            "utterance": "What is the city id that is associated with match id 6 in 2013 ?",
            "sql": "select host_city from hosting_city where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the host year of city \"Taizhou ( Zhejiang )\"?",
        "sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\""
    },
    "interaction": [
        {
            "utterance": "How many regional population of match id 1 ?",
            "sql": "select t1 . regional_population from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city where t2 . match_id = value"
        },
        {
            "utterance": "Find the gdp of host city 2 .",
            "sql": "select gdp from city where city_id = value"
        },
        {
            "utterance": "Ok , What are the hanyu pinyin of Nanjing ( Jiangsu ) ?",
            "sql": "select hanyu_pinyin from city where city = value"
        },
        {
            "utterance": "What is the host year of city `` Taizhou ( Zhejiang ) '' ?",
            "sql": "select t2 . year from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city where t1 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 10,
    "final": {
        "utterance": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct"
    },
    "interaction": [
        {
            "utterance": "What cities had the lowest temperature in March ? | what did you want to get ? city ID or city name\uff1f | City name please .",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id order by mar limit value"
        },
        {
            "utterance": "What was the name of the city whose temperature in March was lower than that in July ?",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t2 . mar < t2 . jul"
        },
        {
            "utterance": "What was the name of the city whose temperature in March was higher than that in October ?",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t2 . mar > t2 . oct"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the cities which were once a host city after 2010?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"
    },
    "interaction": [
        {
            "utterance": "Find the cities which were once a host city after 2009 ?",
            "sql": "select t1 . city from city as t1 join hosting_city as t2 on t1 . city_id = t2 . host_city where t2 . year > value"
        },
        {
            "utterance": "How many cities in this table ?",
            "sql": "select count ( distinct city ) from city"
        },
        {
            "utterance": "Find average GDP of this table ?",
            "sql": "select avg ( gdp ) from city"
        },
        {
            "utterance": "Most GDP in this table ? | Do you mean the max GDP | Yes .",
            "sql": "select max ( gdp ) from city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 12,
    "final": {
        "utterance": "Which city has the highest temperature in February?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many city there",
            "sql": "select count ( distinct city ) from city"
        },
        {
            "utterance": "how many regional population in Hangzhou city",
            "sql": "select regional_population from city where city = value"
        },
        {
            "utterance": "what is the city id of Nanjing",
            "sql": "select city_id from city where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 13,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Which cities are host cities ?",
            "sql": "select t1 . city from city as t1 join hosting_city as t4 on t1 . city_id = t4 . host_city"
        },
        {
            "utterance": "Okay , which cities have not hosted ?",
            "sql": "select city from city where city_id not in ( select host_city from hosting_city )"
        },
        {
            "utterance": "Great ! Out of those cities , which ones have temperatures lower in March compared to their December temperature ?",
            "sql": "select t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t2 . mar < t2 . dec except select t3 . city from city as t3 join hosting_city as t4 on t3 . city_id = t4 . host_city"
        },
        {
            "utterance": "Fantastic ! Between Hangzhou and Nantong , which city has the cooler weather ? | Did you mean what time to compare the weather ? | Oh , sorry ! Yes , which city has the lowest temperature in March ?",
            "sql": "select t2 . mar , t1 . city from city as t1 join temperature as t2 on t1 . city_id = t2 . city_id where t1 . city = value or t1 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 0,
    "final": {
        "utterance": "For each building, show the name of the building and the number of institutions in it.",
        "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all building names ?",
            "sql": "select name from building"
        },
        {
            "utterance": "Great ! Can you update the list to show the number of different institutions in each building ?",
            "sql": "select t1 . name , count ( * ) from building as t1 join institution as t2 on t1 . building_id = t2 . building_id group by t1 . building_id"
        },
        {
            "utterance": "Thanks ! I would be fine just know which is the tallest building . | Do you mean you want to know the name of the tallest building ? Or anything else ? | Yes ! I want to know the name of the tallest building please .",
            "sql": "select name from building order by height_feet desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 1,
    "final": {
        "utterance": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "sql": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE"
    },
    "interaction": [
        {
            "utterance": "Can you list all the institution types with the number of institutions of each type ?",
            "sql": "select type , count ( * ) from institution group by type"
        },
        {
            "utterance": "Could you also show me the total enrollment for each type of institution ?",
            "sql": "select type , count ( * ) , sum ( enrollment ) from institution group by type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 2,
    "final": {
        "utterance": "For each building, show the name of the building and the number of institutions in it.",
        "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
    },
    "interaction": [
        {
            "utterance": "what are the names of the institution and building here",
            "sql": "select t1 . name , t2 . institution from building as t1 join institution as t2 on t1 . building_id = t2 . building_id group by t1 . building_id"
        },
        {
            "utterance": "In what year was Ave Maria University created and where is the current location",
            "sql": "select founded , location from institution where institution = value"
        },
        {
            "utterance": "How many enrollement does Dakota State University have",
            "sql": "select enrollment from institution where institution = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the average, maximum, and minimum number of floors for all buildings?",
        "sql": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building"
    },
    "interaction": [
        {
            "utterance": "show the maximum number of floors for all buildings ?",
            "sql": "select max ( floors ) from building"
        },
        {
            "utterance": "Show me the name of the building with building id 1 ?",
            "sql": "select name from building where building_id = value"
        },
        {
            "utterance": "Show me the name of the building with 12 floors ?",
            "sql": "select name from building where floors = value"
        },
        {
            "utterance": "Show me the average and minimum number of floors for all buildings ?",
            "sql": "select avg ( floors ) , min ( floors ) from building"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 4,
    "final": {
        "utterance": "Show institution names along with the number of proteins for each institution.",
        "sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
    },
    "interaction": [
        {
            "utterance": "Show institution names along with the number of proteins for each institution",
            "sql": "select t1 . institution , count ( * ) from institution as t1 join protein as t2 on t1 . institution_id = t2 . institution_id group by t1 . institution_id"
        },
        {
            "utterance": "What proteins are associated with Lindenwood University-Belleville ?",
            "sql": "select t2 . protein_name from institution as t1 join protein as t2 on t1 . institution_id = t2 . institution_id where t1 . institution = value"
        },
        {
            "utterance": "Between Centromeric protein E , putative and conserved hypothetical protein , which has the highest divergence from human lineage ?",
            "sql": "select divergence_from_human_lineage from protein where protein_name = value or protein_name = value"
        },
        {
            "utterance": "What is the accession number for Centromeric protein E ?",
            "sql": "select accession_number from protein where protein_name = value"
        },
        {
            "utterance": "What is the sequence identity to human protein value associated with accession number XP_002429877.1",
            "sql": "select sequence_identity_to_human_protein from protein where accession_number = value"
        },
        {
            "utterance": "Which protein has the highest sequence identity to human protein value ?",
            "sql": "select protein_name from protein order by sequence_identity_to_human_protein desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of buildings except for those having an institution founded in 2003.",
        "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003"
    },
    "interaction": [
        {
            "utterance": "What buildings were founded in 2003 ?",
            "sql": "select institution from institution where founded = value"
        },
        {
            "utterance": "what are the names of the buildings with institutions founded after 2003 ?",
            "sql": "select t1 . name from building as t1 join institution as t2 on t1 . building_id = t2 . building_id where t2 . founded > value"
        },
        {
            "utterance": "what are the names of the buildings with institutions founded before 2003 ?",
            "sql": "select t1 . name from building as t1 join institution as t2 on t1 . building_id = t2 . building_id where t2 . founded < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the institution type with the largest number of institutions.",
        "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the institute type with lowest number of institutions",
            "sql": "select type from institution group by type order by count ( * ) limit value"
        },
        {
            "utterance": "show the institute type with highest number of institutions",
            "sql": "select type from institution group by type order by count ( * ) desc limit value"
        },
        {
            "utterance": "which university is founded first",
            "sql": "select institution from institution order by founded limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of buildings except for those having an institution founded in 2003.",
        "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003"
    },
    "interaction": [
        {
            "utterance": "which team performed in Ave Maria university ?",
            "sql": "select team from institution where institution = value"
        },
        {
            "utterance": "How many number of floors are in Tampa City Hall ?",
            "sql": "select floors from building where name = value"
        },
        {
            "utterance": "How can i reach at Tampa city Hall can you send me the address ?",
            "sql": "select street_address from building where name = value"
        },
        {
            "utterance": "which type of university is Ave Maria University ?",
            "sql": "select type from institution where institution = value"
        },
        {
            "utterance": "where is Dakota State University situated ? | Did you mean the location or the street address of its building ? | yes , location of Dakota state University ?",
            "sql": "select location from institution where institution = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of buildings that do not have any institution.",
        "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
    },
    "interaction": [
        {
            "utterance": "How many institutions in this table ?",
            "sql": "select count ( * ) from institution"
        },
        {
            "utterance": "How many buildings in this table ?",
            "sql": "select count ( * ) from building"
        },
        {
            "utterance": "How many type of institutions in this table ? | There are 3 different types of institutions in the table . | How many different teams in this institution table ?",
            "sql": "select count ( distinct team ) from institution"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name of buildings that do not have any institution.",
        "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
    },
    "interaction": [
        {
            "utterance": "Show the names of all the buildings .",
            "sql": "select name from building"
        },
        {
            "utterance": "Show the names of all buildings that have an institution .",
            "sql": "select name from building where building_id in ( select building_id from institution )"
        },
        {
            "utterance": "Show the number of floors for each of the buildings that have an institution .",
            "sql": "select floors from building where building_id in ( select building_id from institution )"
        },
        {
            "utterance": "Show the name of buildings that do not have an institution .",
            "sql": "select name from building where building_id not in ( select building_id from institution )"
        },
        {
            "utterance": "What is the street address of the Bank of America Tower .",
            "sql": "select street_address from building where name = value"
        },
        {
            "utterance": "List the buildings that have an institution and their street address .",
            "sql": "select name , street_address from building where building_id in ( select building_id from institution )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the institution type with the largest number of institutions.",
        "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which institution type has the largest number of institutions ?",
            "sql": "select type from institution group by type order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which institution type has the smallest number of institutions ?",
            "sql": "select type from institution group by type order by count ( * ) asc limit value"
        },
        {
            "utterance": "What is the average number of institutions ? | Average number of institutions over what ? | What is the institution type with the largest number of institutions ?",
            "sql": "select type from institution group by type order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 11,
    "final": {
        "utterance": "Show institution names along with the number of proteins for each institution.",
        "sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
    },
    "interaction": [
        {
            "utterance": "what are the names of the institutions ?",
            "sql": "select institution from institution"
        },
        {
            "utterance": "what is the number of proteins for each institution ?",
            "sql": "select t1 . institution , count ( * ) from institution as t1 join protein as t2 on t1 . institution_id = t2 . institution_id group by t1 . institution_id"
        },
        {
            "utterance": "what location is each institution in ?",
            "sql": "select institution , location from institution"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the first names of all instructors who have taught some course and the course description.",
        "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code"
    },
    "interaction": [
        {
            "utterance": "Hello , what courses are currently being taught ?",
            "sql": "select * from course"
        },
        {
            "utterance": "Can you please show which instructors are teaching those courses ?",
            "sql": "select t2 . emp_fname from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join course as t3 on t1 . crs_code = t3 . crs_code"
        },
        {
            "utterance": "Can you please show me the current courses being taught with the last name of the instructor teaching them ?",
            "sql": "select t2 . emp_lname , t3 . crs_description from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join course as t3 on t1 . crs_code = t3 . crs_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "What is the average GPA of all students ?",
            "sql": "select avg ( t2 . stu_gpa ) from enroll as t1 join student as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t1 . class_code = t3 . class_code"
        },
        {
            "utterance": "What is the average GPA of all students enrolled in the course that has the code ACCT-211 ?",
            "sql": "select avg ( t2 . stu_gpa ) from enroll as t1 join student as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t1 . class_code = t3 . class_code where t3 . crs_code = value"
        },
        {
            "utterance": "What are the grades of all the students in that course ?",
            "sql": "select t1 . enroll_grade from enroll as t1 join student as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t1 . class_code = t3 . class_code where t3 . crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the first names of the professors who do not teach a class.",
        "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( * ) from employee"
        },
        {
            "utterance": "what is the employee DOB of employee no 101",
            "sql": "select emp_dob from employee where emp_num = value"
        },
        {
            "utterance": "how many class is there",
            "sql": "select count ( * ) from class"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which school has the smallest amount of professors?",
        "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the school code of emp num 114",
            "sql": "select school_code from department where emp_num = value"
        },
        {
            "utterance": "what is the school code of fine arts",
            "sql": "select school_code from department where dept_name = value"
        },
        {
            "utterance": "what is the dept address of accounting",
            "sql": "select dept_address from department where dept_name = value"
        },
        {
            "utterance": "what is the prof extension of hist",
            "sql": "select prof_extension from professor where dept_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the info of students whose GPA is below 3 ?",
            "sql": "select * from student where stu_gpa < value"
        },
        {
            "utterance": "how about those whose GPA is greater than 3 ?",
            "sql": "select * from student where stu_gpa > value"
        },
        {
            "utterance": "Who is the youngest ? | Did you mean the youngest students whose GPA is higher than 3 ? | Yes , please .",
            "sql": "select * from student where stu_gpa > value order by stu_dob desc limit value"
        },
        {
            "utterance": "please just show the first , last name , and gpa .",
            "sql": "select stu_fname , stu_lname , stu_gpa from student where stu_gpa > value order by stu_dob desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the first name of each student enrolled in class ACCT-211?",
        "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "What is the first name of each student entrolled in class ACCT-211 ?",
            "sql": "select t3 . stu_fname from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join student as t3 on t2 . stu_num = t3 . stu_num where t1 . crs_code = value"
        },
        {
            "utterance": "How many class sections ?",
            "sql": "select count ( distinct class_section ) from class"
        },
        {
            "utterance": "What is the class time of ACCT-211 ? | There are multiple class times for ACCT-211 , would you like all of them ? | Yes",
            "sql": "select class_time from class where crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many courses are offered by the Computer Info. Systems department?",
        "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""
    },
    "interaction": [
        {
            "utterance": "list all department code and department name",
            "sql": "select dept_code , dept_name from department"
        },
        {
            "utterance": "Sorry , I meant to show me all the course codes where department code is `` CIS ''",
            "sql": "select t2 . crs_code from department as t1 join course as t2 on t1 . dept_code = t2 . dept_code where t1 . dept_code = value"
        },
        {
            "utterance": "can I get a count of these courses where department code is `` CIS '' ?",
            "sql": "select count ( * ) from department as t1 join course as t2 on t1 . dept_code = t2 . dept_code where t1 . dept_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "how many students enrolled for the accounting department",
            "sql": "select count ( * ) from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join course as t3 on t1 . crs_code = t3 . crs_code join department as t4 on t3 . dept_code = t4 . dept_code where t4 . dept_name = value"
        },
        {
            "utterance": "what is the school code for accounting ?",
            "sql": "select school_code from department where dept_name = value"
        },
        {
            "utterance": "what is the emplotyee number for accounting ?",
            "sql": "select emp_num from department where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.",
        "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'"
    },
    "interaction": [
        {
            "utterance": "How many departments do you have ?",
            "sql": "select count ( * ) from department"
        },
        {
            "utterance": "What are the first names of professors in the history department ?",
            "sql": "select t1 . emp_fname from employee as t1 join professor as t2 on t1 . emp_num = t2 . emp_num where t2 . dept_code = value"
        },
        {
            "utterance": "What are the offices of these professors ?",
            "sql": "select t2 . prof_office from employee as t1 join professor as t2 on t1 . emp_num = t2 . emp_num where t2 . dept_code = value"
        },
        {
            "utterance": "Can you tell me the first name and office of the professor in the history department who has a Ph.D. degree ?",
            "sql": "select t1 . emp_fname , t2 . prof_office from employee as t1 join professor as t2 on t1 . emp_num = t2 . emp_num where t2 . dept_code = value and t2 . prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
        "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'"
    },
    "interaction": [
        {
            "utterance": "what is employee number of james ? | Is James a first name or last name ? | first name",
            "sql": "select emp_num from employee where emp_fname = value"
        },
        {
            "utterance": "please show me the DOB OF EMPLOYEE WHO HAS THIS AS HIS FIRST NAME | Do you mean the first name `` James '' ? | yeah",
            "sql": "select emp_dob from employee where emp_fname = value"
        },
        {
            "utterance": "SHOW ME THE hire date OF THE EMPLOYEE WHO HAS THE FIRST NAME AS JAMES",
            "sql": "select emp_hiredate from employee where emp_fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the first and last name of the professor in biology department?",
        "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\""
    },
    "interaction": [
        {
            "utterance": "what is the first and last name of the profesor in biology department ?",
            "sql": "select t3 . emp_fname , t3 . emp_lname from professor as t1 join department as t2 on t1 . dept_code = t2 . dept_code join employee as t3 on t1 . emp_num = t3 . emp_num where dept_name = value"
        },
        {
            "utterance": "how many employee in table ?",
            "sql": "select count ( * ) from employee"
        },
        {
            "utterance": "what is the highest professor extension in the table ?",
            "sql": "select max ( prof_extension ) from professor"
        },
        {
            "utterance": "what is least employee number in the table ?",
            "sql": "select min ( emp_num ) from employee"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"
    },
    "interaction": [
        {
            "utterance": "Can you Please list all departments ?",
            "sql": "select dept_name from department"
        },
        {
            "utterance": "Thank You . Can you provide the department code for each of these ?",
            "sql": "select distinct ( dept_code ) from department"
        },
        {
            "utterance": "Thank you . Can you provide the names of students taking classes in CIS ?",
            "sql": "select t1 . stu_fname , t1 . stu_lname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value"
        },
        {
            "utterance": "Just the First name ?",
            "sql": "select t1 . stu_fname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value"
        },
        {
            "utterance": "Which one of these students also has a class in ACCT ?",
            "sql": "select t1 . stu_fname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value intersect select t1 . stu_fname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many students enrolled in class ACCT-211?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "may i know the class room for the class section 1 | ok , so which column info do you want to return for these classes ? | i want to know the class room column",
            "sql": "select class_room from class where class_section = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many professors who are from either Accounting or Biology department?",
        "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'"
    },
    "interaction": [
        {
            "utterance": "How many professors in this table ?",
            "sql": "select count ( * ) from professor"
        },
        {
            "utterance": "How many department names in this table ?",
            "sql": "select count ( distinct dept_name ) from department"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the count and code of the job has most employees.",
        "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the amount and code of the job with the most employees ?",
            "sql": "select emp_jobcode , count ( * ) from employee group by emp_jobcode order by count ( * ) desc limit value"
        },
        {
            "utterance": "And the hire dates of those 22 employees ?",
            "sql": "select emp_hiredate from employee where emp_jobcode in ( select emp_jobcode from employee group by emp_jobcode order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many students enrolled in class ACCT-211?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many students are enrolled in the class with the course code of ACCT-211 ?",
            "sql": "select count ( * ) from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code where t1 . crs_code = value"
        },
        {
            "utterance": "Excellent ! Can you show the class time and class room for ACCt-211 ?",
            "sql": "select class_time , class_room from class where crs_code = value"
        },
        {
            "utterance": "Thank you ! I thought there might be more to that table ... Can you provide me with a list of all of the different course codes ?",
            "sql": "select distinct crs_code from class"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find names of all students who took some course and got A or C.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"
    },
    "interaction": [
        {
            "utterance": "How many students took any course ? | Did you mean how many students there are ? | Yes , sorry !",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "How many students got an A ?",
            "sql": "select count ( t1 . stu_fname ) from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num where t2 . enroll_grade = value"
        },
        {
            "utterance": "or a C ? | You want the students just with grade `` C '' or including `` A '' | Who got either an A or a C ?",
            "sql": "select count ( t1 . stu_fname ) from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num where t2 . enroll_grade = value or t2 . enroll_grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the number of classes in each school.",
        "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code"
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( distinct school_code ) from department"
        },
        {
            "utterance": "What classes did each school offer ?",
            "sql": "select * , t3 . school_code from class as t1 join course as t2 on t1 . crs_code = t2 . crs_code join department as t3 on t2 . dept_code = t3 . dept_code group by t3 . school_code"
        },
        {
            "utterance": "What is the number of classes offered by each school ?",
            "sql": "select count ( * ) , t3 . school_code from class as t1 join course as t2 on t1 . crs_code = t2 . crs_code join department as t3 on t2 . dept_code = t3 . dept_code group by t3 . school_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many professors who has a either Ph.D. or MA degree?",
        "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'"
    },
    "interaction": [
        {
            "utterance": "How many professors have either a Ph.D. or a MA degree ?",
            "sql": "select count ( * ) from professor where prof_high_degree = value or prof_high_degree = value"
        },
        {
            "utterance": "Show me employee number for professors with a Ph.D. degree",
            "sql": "select emp_num from professor where prof_high_degree = value"
        },
        {
            "utterance": "Show me professor office for professors with a MA degree",
            "sql": "select prof_office from professor where prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name of the department that has the largest number of students enrolled?",
        "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the department that has the largest number of students enrolled ?",
            "sql": "select t4 . dept_name from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join course as t3 on t1 . crs_code = t3 . crs_code join department as t4 on t3 . dept_code = t4 . dept_code group by t3 . dept_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What 's that department 's address ?",
            "sql": "select t4 . dept_address from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join course as t3 on t1 . crs_code = t3 . crs_code join department as t4 on t3 . dept_code = t4 . dept_code group by t3 . dept_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "How about employee number ?",
            "sql": "select t4 . emp_num from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join course as t3 on t1 . crs_code = t3 . crs_code join department as t4 on t3 . dept_code = t4 . dept_code group by t3 . dept_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all students who are taking classes from the accounting department ?",
            "sql": "select t1 . stu_fname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value"
        },
        {
            "utterance": "What are the first names of all students who are taking classes from the Computer Info . Systems department ?",
            "sql": "select t1 . stu_fname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value"
        },
        {
            "utterance": "What are the first names of all students who are taking classes from both the accounting department and the Computer Info . Systems department ?",
            "sql": "select t1 . stu_fname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value intersect select t1 . stu_fname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code join department as t5 on t5 . dept_code = t4 . dept_code where t5 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find names of all students who took some course and got A or C.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"
    },
    "interaction": [
        {
            "utterance": "Could you please find all the names of the students who took some course and got an A ?",
            "sql": "select t1 . stu_fname , t1 . stu_lname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num where t2 . enroll_grade = value"
        },
        {
            "utterance": "Could you please find all the names of the students who took some course and got a C ?",
            "sql": "select t1 . stu_fname , t1 . stu_lname from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num where t2 . enroll_grade = value"
        },
        {
            "utterance": "What are their student numbers ?",
            "sql": "select t1 . stu_num from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num where t2 . enroll_grade = value"
        },
        {
            "utterance": "What are the class codes for the students who took some course and got a C ?",
            "sql": "select t2 . class_code from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num where t2 . enroll_grade = value"
        },
        {
            "utterance": "What are the student class and gpa of each of those students ?",
            "sql": "select stu_class , stu_gpa from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num where t2 . enroll_grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hello Can you provide me with a list of all of the different department names ?",
            "sql": "select dept_name from department"
        },
        {
            "utterance": "That 's great ! Now can you update this list to include the total number of students for each department ?",
            "sql": "select t2 . dept_name , count ( * ) from student as t1 join department as t2 on t1 . dept_code = t2 . dept_code group by t1 . dept_code"
        },
        {
            "utterance": "Can you update this list to show the Department Name , Department Address , and number of students for the 3 departments with the highest number of students ?",
            "sql": "select t2 . dept_name , t2 . dept_address , count ( * ) from student as t1 join department as t2 on t1 . dept_code = t2 . dept_code group by t1 . dept_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 23,
    "final": {
        "utterance": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "How many students are enrolled in any type of accounting course ? | Do you mean the course taught by some professor from the accounting department ? | Yes",
            "sql": "select count ( * ) from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join course as t3 on t1 . crs_code = t3 . crs_code join department as t4 on t3 . dept_code = t4 . dept_code where t4 . dept_name = value"
        },
        {
            "utterance": "And what are their student numbers ?",
            "sql": "select t2 . stu_num from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join course as t3 on t1 . crs_code = t3 . crs_code join department as t4 on t3 . dept_code = t4 . dept_code where t4 . dept_name = value"
        },
        {
            "utterance": "And what about the course code that they are enrolled in ?",
            "sql": "select t3 . crs_code from class as t1 join enroll as t2 on t1 . class_code = t2 . class_code join course as t3 on t1 . crs_code = t3 . crs_code join department as t4 on t3 . dept_code = t4 . dept_code where t4 . dept_name = value"
        },
        {
            "utterance": "Yes , what is the class time ? | Do you want to know all class time ? | NO , only for ACCT-211",
            "sql": "select class_time from class where crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
    },
    "interaction": [
        {
            "utterance": "Could you find the names of all the departments , please ?",
            "sql": "select dept_name from department"
        },
        {
            "utterance": "What about classes with the course description `` Statistics '' ?",
            "sql": "select * from course where crs_description like value"
        },
        {
            "utterance": "What department name offers that course description ?",
            "sql": "select t2 . dept_name from course as t1 join department as t2 on t1 . dept_code = t2 . dept_code where t1 . crs_description like value"
        },
        {
            "utterance": "How many course credits are each of those worth ?",
            "sql": "select crs_credit from course where crs_code in ( select t1 . crs_code from course as t1 join department as t2 on t1 . dept_code = t2 . dept_code where t2 . dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find names of all students who took some course and the course description.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code"
    },
    "interaction": [
        {
            "utterance": "How many students in this table ?",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "Find name of all students ? | Do you mean First or Last name of the students ? | Find the average student GPA ?",
            "sql": "select avg ( stu_gpa ) from student"
        },
        {
            "utterance": "Find top enroll grade ?",
            "sql": "select enroll_grade from enroll order by enroll_grade asc limit value"
        },
        {
            "utterance": "Find the names of all students who took some course and the course description ?",
            "sql": "select t1 . stu_fname , t1 . stu_lname , t4 . crs_description from student as t1 join enroll as t2 on t1 . stu_num = t2 . stu_num join class as t3 on t2 . class_code = t3 . class_code join course as t4 on t3 . crs_code = t4 . crs_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many classes are professor whose last name is Graztevski has?",
        "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'"
    },
    "interaction": [
        {
            "utterance": "Hello . How many classes are there ?",
            "sql": "select count ( * ) from class"
        },
        {
            "utterance": "How many different professors are there ?",
            "sql": "select count ( distinct emp_num ) from employee where emp_jobcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"
    },
    "interaction": [
        {
            "utterance": "Can you list all the schools that have less than 5 different departments ? | BUS is the school code for schools with less than 5 different departments . | Can you list the number of departments with school code BUS ?",
            "sql": "select count ( distinct dept_name ) from department where school_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me class code for class room BUS311 ?",
            "sql": "select class_code from class where class_room = value"
        },
        {
            "utterance": "Tell me professor employee number for course code ACCT-211 ?",
            "sql": "select prof_num from class where crs_code = value"
        },
        {
            "utterance": "Tell me the class time for class section 3 ?",
            "sql": "select class_time from class where class_section = value"
        },
        {
            "utterance": "Find the number of classes offered for all class rooms that held at least 2 classes ?",
            "sql": "select count ( * ) , class_room from class group by class_room having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the number of professors in accounting department.",
        "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""
    },
    "interaction": [
        {
            "utterance": "How many professors in the school ?",
            "sql": "select count ( * ) from professor"
        },
        {
            "utterance": "And what about the accounting department ?",
            "sql": "select count ( * ) from professor as t1 join department as t2 on t1 . dept_code = t2 . dept_code where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many courses are offered by the Computer Info. Systems department?",
        "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""
    },
    "interaction": [
        {
            "utterance": "How many courses does the Computer Info . Systems department offer ?",
            "sql": "select count ( * ) from department as t1 join course as t2 on t1 . dept_code = t2 . dept_code where dept_name = value"
        },
        {
            "utterance": "What are the descriptions of those courses ?",
            "sql": "select crs_description from department as t1 join course as t2 on t1 . dept_code = t2 . dept_code where dept_name = value"
        },
        {
            "utterance": "How many courses does the Biology department offer ?",
            "sql": "select count ( * ) from department as t1 join course as t2 on t1 . dept_code = t2 . dept_code where dept_name = value"
        },
        {
            "utterance": "What about the Accounting department ?",
            "sql": "select count ( * ) from department as t1 join course as t2 on t1 . dept_code = t2 . dept_code where dept_name = value"
        },
        {
            "utterance": "What are the course credits of those courses ?",
            "sql": "select t2 . crs_credit from department as t1 join course as t2 on t1 . dept_code = t2 . dept_code where dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the name and address of the department that has the highest number of students.",
        "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi - Can you tell me which department has the most students ?",
            "sql": "select t2 . dept_name from student as t1 join department as t2 on t1 . dept_code = t2 . dept_code group by t1 . dept_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many students are in the Accounting department ?",
            "sql": "select count ( * ) from student as t1 join department as t2 on t1 . dept_code = t2 . dept_code group by t1 . dept_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Please tell me the address of the Accounting department .",
            "sql": "select dept_address from department where dept_name = value"
        },
        {
            "utterance": "Great - can you tell me the names of students in the Accounting department with a GPA above 3.0 ?",
            "sql": "select t2 . stu_fname , t2 . stu_lname from department as t1 join student as t2 on t1 . dept_code = t2 . dept_code where t1 . dept_name = value and t2 . stu_gpa > value"
        },
        {
            "utterance": "What is the total number of transfer students in all departments ?",
            "sql": "select sum ( stu_transfer ) from student"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"
    },
    "interaction": [
        {
            "utterance": "Can you list all schools with less than 5 different departments ?",
            "sql": "select school_code from department group by school_code having count ( distinct dept_name ) < value"
        },
        {
            "utterance": "Can you list all the departments with the school code BUS ?",
            "sql": "select * from department where school_code = value"
        },
        {
            "utterance": "Thanks , can you just show the number of different departments in the table ?",
            "sql": "select count ( distinct dept_name ) , school_code from department group by school_code having count ( distinct dept_name ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"
    },
    "interaction": [
        {
            "utterance": "how many instructors have taught ACCT-211 ?",
            "sql": "select count ( distinct prof_num ) from class where crs_code = value"
        },
        {
            "utterance": "can you tell me their first names and offices , please ?",
            "sql": "select emp_fname , prof_office from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join course as t3 on t1 . crs_code = t3 . crs_code join professor as t4 on t2 . emp_num = t4 . emp_num where t1 . crs_code = value"
        },
        {
            "utterance": "excellent . can you also give me the course description for ACCT-211 ?",
            "sql": "select crs_description from course where crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the number of professors with a Ph.D. degree in each department.",
        "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "Yes , hi , I 'd like to know how many professors are in the history department ?",
            "sql": "select count ( * ) from professor where dept_code = value"
        },
        {
            "utterance": "Do both of them have doctorates ?",
            "sql": "select count ( * ) from professor where dept_code = value and prof_high_degree = value"
        },
        {
            "utterance": "How many departments are there total ?",
            "sql": "select count ( distinct dept_code ) from professor"
        },
        {
            "utterance": "Is English one of them ?",
            "sql": "select distinct dept_code from professor where dept_code = value"
        },
        {
            "utterance": "Do any of the English professors have a PhD ?",
            "sql": "select count ( * ) from professor where dept_code = value and prof_high_degree = value"
        },
        {
            "utterance": "Can you tell me where the history Doctorate 's office is ?",
            "sql": "select prof_office from professor where dept_code = value and prof_high_degree = value"
        },
        {
            "utterance": "What is the total number professors with doctorates employed by the 11 departments ?",
            "sql": "select count ( * ) from professor where prof_high_degree = value"
        },
        {
            "utterance": "Of those 18 , how many doctorates are employed by the accounting department ?",
            "sql": "select count ( * ) from professor where prof_high_degree = value and dept_code = value"
        },
        {
            "utterance": "Can you tell me where their offices are ?",
            "sql": "select prof_office from professor where prof_high_degree = value and dept_code = value"
        },
        {
            "utterance": "Can you tell me the extension for the professor in office KLR229D , please ?",
            "sql": "select prof_extension from professor where prof_high_degree = value and dept_code = value and prof_office = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"
    },
    "interaction": [
        {
            "utterance": "Can you please give me the names of all of the professors sorted in alphabetical order of their first name ? | Do you want to first name of all the professors , or last name or both ? | Both , please",
            "sql": "select t2 . emp_fname , t2 . emp_lname from professor as t1 join employee as t2 on t1 . emp_num = t2 . emp_num order by t2 . emp_fname"
        },
        {
            "utterance": "Where are their offices , if you do n't mind ?",
            "sql": "select t1 . prof_office from professor as t1 join employee as t2 on t1 . emp_num = t2 . emp_num order by t2 . emp_fname"
        },
        {
            "utterance": "What are all of their professor high degree ?",
            "sql": "select prof_high_degree from professor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
    },
    "interaction": [
        {
            "utterance": "How many different courses are there ?",
            "sql": "select count ( distinct crs_code ) from course"
        },
        {
            "utterance": "How many departments are there ?",
            "sql": "select count ( dept_code ) from department"
        },
        {
            "utterance": "What is the course code for the class named Statistics ? | Do you mean the course code for the course whose description is Statistics ? | yes .",
            "sql": "select crs_code from course where crs_description = value"
        },
        {
            "utterance": "Can you show me a list of all the course descriptions ?",
            "sql": "select crs_description from course"
        },
        {
            "utterance": "Can you tell me the course code for the class with the Intro . to Statistics description ?",
            "sql": "select crs_code from course where crs_description = value"
        },
        {
            "utterance": "What is the name of the department that course is in ? | Do you mean the name of the department which the course named 'Intro . to Statistics ' is in ? | yes .",
            "sql": "select t2 . dept_name from course as t1 join department as t2 on t1 . dept_code = t2 . dept_code where t1 . crs_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "what is the enroll grade of 324257",
            "sql": "select enroll_grade from enroll where stu_num = value"
        },
        {
            "utterance": "how many class there",
            "sql": "select count ( * ) from class"
        },
        {
            "utterance": "how many students there",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "what is the dept-code of student number 324257",
            "sql": "select dept_code from student where stu_num = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the name of department where has the smallest number of professors?",
        "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( * ) from professor"
        },
        {
            "utterance": "which department has the most professors ?",
            "sql": "select * from professor as t1 join department as t2 on t1 . dept_code = t2 . dept_code group by t1 . dept_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the smallest ?",
            "sql": "select * from professor as t1 join department as t2 on t1 . dept_code = t2 . dept_code group by t1 . dept_code order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 39,
    "final": {
        "utterance": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "What is the school code for the accounting department ?",
            "sql": "select school_code from department where dept_name = value"
        },
        {
            "utterance": "What is the accounting department 's address ?",
            "sql": "select dept_address from department where dept_name = value"
        },
        {
            "utterance": "Where is the professor of accounting 's office ?",
            "sql": "select t3 . prof_office from professor as t3 join department as t4 on t4 . dept_code = t3 . dept_code where t4 . dept_name = value"
        },
        {
            "utterance": "What degree does the professor of account hold ?",
            "sql": "select t3 . prof_high_degree from professor as t3 join department as t4 on t4 . dept_code = t3 . dept_code where t4 . dept_name = value"
        },
        {
            "utterance": "Where is the classroom located ?",
            "sql": "select class_room from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join professor as t3 on t2 . emp_num = t3 . emp_num join department as t4 on t4 . dept_code = t3 . dept_code where t1 . crs_code = value and t1 . class_time like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( * ) from employee"
        },
        {
            "utterance": "how many English professors there",
            "sql": "select count ( * ) from professor where dept_code = value"
        },
        {
            "utterance": "what is the prof high degree of department HIST",
            "sql": "select prof_high_degree from professor where dept_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 41,
    "final": {
        "utterance": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "How many professors are there in total ?",
            "sql": "select count ( * ) from professor"
        },
        {
            "utterance": "What are the names of the departments they teach classes for ?",
            "sql": "select distinct t4 . dept_name from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join professor as t3 on t2 . emp_num = t3 . emp_num join department as t4 on t4 . dept_code = t3 . dept_code"
        },
        {
            "utterance": "How many of the 22 professors are part of the Accounting department ?",
            "sql": "select count ( * ) from professor where dept_code = value"
        },
        {
            "utterance": "How many of those 3 are currently teaching courses ?",
            "sql": "select count ( distinct t3 . emp_num ) from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join professor as t3 on t2 . emp_num = t3 . emp_num join department as t4 on t4 . dept_code = t3 . dept_code where t3 . dept_code = value"
        },
        {
            "utterance": "Could you tell me the number of them that are teaching in a physical class room instead of through online classes ?",
            "sql": "select count ( distinct t3 . emp_num ) from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join professor as t3 on t2 . emp_num = t3 . emp_num join department as t4 on t4 . dept_code = t3 . dept_code where t3 . dept_code = value"
        },
        {
            "utterance": "What are their first names and the class rooms where they teach ?",
            "sql": "select t2 . emp_fname , t1 . class_room from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join professor as t3 on t2 . emp_num = t3 . emp_num join department as t4 on t4 . dept_code = t3 . dept_code where t4 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the last name and hire date of the professor who is in office DRE 102.",
        "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'"
    },
    "interaction": [
        {
            "utterance": "Who is the professor in the office DRE 102 ? | Do you want their first name , last name , or initial ? | last name and hire date please .",
            "sql": "select t1 . emp_lname , t1 . emp_hiredate from employee as t1 join professor as t2 on t1 . emp_num = t2 . emp_num where t2 . prof_office = value"
        },
        {
            "utterance": "Thanks . What are those professors ' degree ?",
            "sql": "select t1 . emp_lname , t2 . prof_high_degree from employee as t1 join professor as t2 on t1 . emp_num = t2 . emp_num where t2 . prof_office = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 43,
    "final": {
        "utterance": "Find the number of professors with a Ph.D. degree in each department.",
        "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "how many professors there",
            "sql": "select count ( * ) from professor"
        },
        {
            "utterance": "how many English professors there",
            "sql": "select count ( * ) from professor where dept_code = value"
        },
        {
            "utterance": "what is the department code of 103 | Do you mean the department code of professor with emp number 103 ? | yes sir",
            "sql": "select dept_code from professor where emp_num = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What are the first names and date of birth of professors teaching course ACCT-211?",
        "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\""
    },
    "interaction": [
        {
            "utterance": "First names of the proffesors teaching course ACCT-211 ?",
            "sql": "select distinct t1 . emp_fname from employee as t1 join class as t2 on t1 . emp_num = t2 . prof_num where crs_code = value"
        },
        {
            "utterance": "what are their birth dates ?",
            "sql": "select distinct t1 . emp_dob from employee as t1 join class as t2 on t1 . emp_num = t2 . prof_num where crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 45,
    "final": {
        "utterance": "How many professors who has a either Ph.D. or MA degree?",
        "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'"
    },
    "interaction": [
        {
            "utterance": "I 'd like to know how many professors have a Ph.D. or MA ?",
            "sql": "select count ( * ) from professor where prof_high_degree = value or prof_high_degree = value"
        },
        {
            "utterance": "How many of them are Ph.D. degrees ?",
            "sql": "select count ( * ) from professor where prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 46,
    "final": {
        "utterance": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "How many students number in this table ?",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "How many class rooms in this table ?",
            "sql": "select count ( class_room ) from class"
        },
        {
            "utterance": "Find the average gpa of the students ?",
            "sql": "select avg ( stu_gpa ) from student"
        },
        {
            "utterance": "What is last name of William ?",
            "sql": "select stu_lname from student where stu_fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 47,
    "final": {
        "utterance": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"
    },
    "interaction": [
        {
            "utterance": "what instructors teach courses ? | Do you mean the first names of instructors who teach courses ? | Yes , the first names of all instructors who teach courses ,",
            "sql": "select t2 . emp_fname from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join course as t3 on t1 . crs_code = t3 . crs_code join professor as t4 on t2 . emp_num = t4 . emp_num"
        },
        {
            "utterance": "Great . I need to know which first name of the instructor goes with each class and class description .",
            "sql": "select t2 . emp_fname , t3 . crs_description from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join course as t3 on t1 . crs_code = t3 . crs_code join professor as t4 on t2 . emp_num = t4 . emp_num"
        },
        {
            "utterance": "great , I also need to know the first name of each instructor with the course name , and where their office is located .",
            "sql": "select t2 . emp_fname , t4 . prof_office , t3 . crs_description from class as t1 join employee as t2 on t1 . prof_num = t2 . emp_num join course as t3 on t1 . crs_code = t3 . crs_code join professor as t4 on t2 . emp_num = t4 . emp_num"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 48,
    "final": {
        "utterance": "Which school has the smallest amount of professors?",
        "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( school_code ) from department"
        },
        {
            "utterance": "How many professors are there in total ?",
            "sql": "select count ( * ) from professor"
        },
        {
            "utterance": "Which school has the most professors ?",
            "sql": "select t1 . school_code from department as t1 join professor as t2 on t1 . dept_code = t2 . dept_code group by t1 . school_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "How about the school with the least amount of professors ?",
            "sql": "select t1 . school_code from department as t1 join professor as t2 on t1 . dept_code = t2 . dept_code group by t1 . school_code order by count ( * ) limit value"
        },
        {
            "utterance": "What departments does this school have ?",
            "sql": "select dept_name from department where school_code in ( select t1 . school_code from department as t1 join professor as t2 on t1 . dept_code = t2 . dept_code group by t1 . school_code order by count ( * ) limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 49,
    "final": {
        "utterance": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
        "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( * ) from professor"
        },
        {
            "utterance": "How many have a Ph.D. degree ?",
            "sql": "select count ( * ) from professor where prof_high_degree = value"
        },
        {
            "utterance": "Yes",
            "sql": "select t2 . dept_name from professor as t1 join department as t2 on t1 . dept_code = t2 . dept_code where t1 . prof_high_degree = value group by t1 . dept_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 50,
    "final": {
        "utterance": "What is the first and last name of the oldest employee?",
        "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the first name of the oldest employee ?",
            "sql": "select emp_fname from employee order by emp_dob limit value"
        },
        {
            "utterance": "What is his last name ?",
            "sql": "select emp_lname from employee order by emp_dob limit value"
        },
        {
            "utterance": "What was his employee hire date ?",
            "sql": "select emp_hiredate from employee order by emp_dob limit value"
        },
        {
            "utterance": "What was his date of birth ?",
            "sql": "select emp_dob from employee order by emp_dob limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 51,
    "final": {
        "utterance": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the first name and last name of the youngest student whose GPA is above 3 ?",
            "sql": "select stu_fname , stu_lname from student where stu_gpa > value order by stu_dob desc limit value"
        },
        {
            "utterance": "What is her GPA ?",
            "sql": "select stu_gpa from student where stu_gpa > value order by stu_dob desc limit value"
        },
        {
            "utterance": "What are the full name and GPA of the oldest student whose GPA is below 3 ?",
            "sql": "select stu_fname , stu_lname , stu_gpa from student where stu_gpa < value order by stu_dob asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 52,
    "final": {
        "utterance": "What is the last name and office of the professor from the history department?",
        "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "Thank you . What are the office extensions numbers of professor Donelly and Blalock please ?",
            "sql": "select t3 . dept_extension from employee as t1 join professor as t2 on t1 . emp_num = t2 . emp_num join department as t3 on t2 . dept_code = t3 . dept_code where emp_lname = value or emp_lname = value"
        },
        {
            "utterance": "Thank you ! Can you please confirm the school code of the History Department ?",
            "sql": "select t3 . school_code from employee as t1 join professor as t2 on t1 . emp_num = t2 . emp_num join department as t3 on t2 . dept_code = t3 . dept_code where t3 . dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of active from date ?",
            "sql": "select active_from_date from customer_contact_channels"
        },
        {
            "utterance": "can you show me a list of active to date ?",
            "sql": "select active_to_date from customer_contact_channels"
        },
        {
            "utterance": "which one the first active to date ?",
            "sql": "select * from customer_contact_channels order by active_to_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
    },
    "interaction": [
        {
            "utterance": "show me the customer name of the order that have the status `` cancelled ''",
            "sql": "select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where order_status = value"
        },
        {
            "utterance": "name the customer which have 15 as customer id ?",
            "sql": "select customer_name from customers where customer_id = value"
        },
        {
            "utterance": "find the customer name of the order that have status `` delivered ''",
            "sql": "select t1 . customer_name , t2 . order_date from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where order_status = value"
        },
        {
            "utterance": "find the customer date of the orders that have the status '' delivered '' | did you mean the order date ? | yes",
            "sql": "select t2 . order_date from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 2,
    "final": {
        "utterance": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "Please show me all customers and their contact channels | Do you want the names of customers or id ? | names please",
            "sql": "select distinct customer_name , channel_code from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "please show just those customers who 's channel code was email",
            "sql": "select distinct customer_name from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where channel_code = value"
        },
        {
            "utterance": "Please list just Tillman Ernsers contact channel",
            "sql": "select distinct channel_code from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "What is the customer name of customer id 9 ?",
            "sql": "select customer_name from customers where customer_id = value"
        },
        {
            "utterance": "Find the payment method of Tillman Ernser .",
            "sql": "select payment_method from customers where customer_name = value"
        },
        {
            "utterance": "What are the contact number of customer id 3 ?",
            "sql": "select contact_number from customer_contact_channels where customer_id = value"
        },
        {
            "utterance": "What is the `` active to date '' of the latest contact channel used by `` Tillman Ernser '' ?",
            "sql": "select max ( t2 . active_to_date ) from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the payment method of the customer that has purchased the least quantity of items?",
        "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What was the least quantity of items purchased ? | do you mean the id of product or the id of order ? | ID of the order please .",
            "sql": "select order_id from order_items order by order_quantity limit value"
        },
        {
            "utterance": "What is the payment method of the order with an id of 11 ?",
            "sql": "select t1 . payment_method from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name and active date of the customer that use email as the contact channel.",
        "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"
    },
    "interaction": [
        {
            "utterance": "List the names of all the customers that use email as a contact channel .",
            "sql": "select t1 . customer_name from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t2 . channel_code = value"
        },
        {
            "utterance": "List the names of all the customers that use email as a contact channel and the date they became a member .",
            "sql": "select t1 . customer_name , t1 . date_became_customer from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t2 . channel_code = value"
        },
        {
            "utterance": "Find the name and active to date of the customers that use email as the contact channel .",
            "sql": "select t1 . customer_name , t2 . active_to_date from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t2 . channel_code = value"
        },
        {
            "utterance": "What is the payment method of Devin Mills .",
            "sql": "select distinct t1 . payment_method from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        },
        {
            "utterance": "What is the customer id of Devin Mills .",
            "sql": "select distinct t1 . customer_id from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        },
        {
            "utterance": "List the names of all the customers with the same payment method as Devin Mills .",
            "sql": "select distinct t1 . customer_name from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t1 . payment_method = ( select distinct t1 . payment_method from customers as t1 join customer_contact_channels as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 6,
    "final": {
        "utterance": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""
    },
    "interaction": [
        {
            "utterance": "what is the country of zip postcode 416 ?",
            "sql": "select country from addresses where zip_postcode = value"
        },
        {
            "utterance": "what is the city of south california",
            "sql": "select city from addresses where state_province_county = value"
        },
        {
            "utterance": "what is the address content of colorando ?",
            "sql": "select address_content from addresses where state_province_county = value"
        },
        {
            "utterance": "what is the city of new jersey",
            "sql": "select city from addresses where state_province_county = value"
        },
        {
            "utterance": "list the city of country USA ?",
            "sql": "select city from addresses where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the payment method of the customer that has purchased the least quantity of items?",
        "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What kind of payment methods are there ? | Do you mean the number of payment kinds ? | yes",
            "sql": "select count ( distinct payment_method ) from customers"
        },
        {
            "utterance": "And can you show me how many customers there are ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "Can you show me the name of the customer who purchased the least quantity of items ?",
            "sql": "select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) limit value"
        },
        {
            "utterance": "What payment method did that customer use ?",
            "sql": "select t1 . payment_method from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) limit value"
        },
        {
            "utterance": "How many items did that customer buy ?",
            "sql": "select sum ( t3 . order_quantity ) from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the customer that has purchased the most items?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which customer bought the most items ? | Do you want the name of the customer ? | That would be lovely .",
            "sql": "select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) desc limit value"
        },
        {
            "utterance": "How many did he purchase ?",
            "sql": "select sum ( t3 . order_quantity ) from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) desc limit value"
        },
        {
            "utterance": "How did he pay ?",
            "sql": "select t1 . payment_method from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) desc limit value"
        },
        {
            "utterance": "When did he become a customer ?",
            "sql": "select t1 . date_became_customer from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) desc limit value"
        },
        {
            "utterance": "How many became customers before that ?",
            "sql": "select count ( * ) from customers where date_became_customer < ( select t1 . date_became_customer from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t1 . customer_name order by sum ( t3 . order_quantity ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the name of the customer that made the order with the largest quantity?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
    },
    "interaction": [
        {
            "utterance": "how many Customers are there",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "how may customer payment cash method",
            "sql": "select count ( * ) from customers where payment_method = value"
        },
        {
            "utterance": "what is the name of customer id 2",
            "sql": "select customer_name from customers where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
    },
    "interaction": [
        {
            "utterance": "What is the total number of products ?",
            "sql": "select sum ( t2 . order_quantity ) from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id"
        },
        {
            "utterance": "What is the total number of products that are in orders with status `` Delivered '' ?",
            "sql": "select sum ( t2 . order_quantity ) from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id where t1 . order_status = value"
        },
        {
            "utterance": "What is the total number of products that are in orders with status `` Cancelled '' ?",
            "sql": "select sum ( t2 . order_quantity ) from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id where t1 . order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
    },
    "interaction": [
        {
            "utterance": "List the order cancelled customer id from the table ?",
            "sql": "select order_id , customer_id from customer_orders where order_status = value"
        },
        {
            "utterance": "Which order id has the least quantity on the list ?",
            "sql": "select order_id from order_items order by order_quantity limit value"
        },
        {
            "utterance": "How many customer ids has the `` delivered '' status on the list ?",
            "sql": "select count ( customer_id ) from customer_orders where order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of customers who are living in Colorado?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\""
    },
    "interaction": [
        {
            "utterance": "Hello There ! Can you provide me with a list of all customer names ?",
            "sql": "select customer_name from customers"
        },
        {
            "utterance": "Thank you for that ! Can you filter that list to show only the customers living in Colorado ?",
            "sql": "select t1 . customer_name from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id where t3 . state_province_county = value"
        },
        {
            "utterance": "Great ! Can you update this list to show their address content , city , and zip code ?",
            "sql": "select t1 . customer_name , t3 . address_content , t3 . city , t3 . zip_postcode from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id where t3 . state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names of customers using the most popular payment method?",
        "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you provide me with a list of all of the customer names and their corresponding payment methods ?",
            "sql": "select customer_name , payment_method from customers"
        },
        {
            "utterance": "Thank you for that ! Can you tell me what the most popular payment method is ?",
            "sql": "select payment_method from customers group by payment_method order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
    },
    "interaction": [
        {
            "utterance": "FIND THE CUSTOMER NAME AND DATE OF THE ORDERS THAT HAVE THE STATUS `` DELIVERED ''",
            "sql": "select t1 . customer_name , t2 . order_date from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where order_status = value"
        },
        {
            "utterance": "WHAT ARE THE CUSTOMER ID FOR ALL THE CUSTOMERS WHOSE ORDERS WERE CANCELLED ?",
            "sql": "select distinct customer_id from customer_orders where order_status = value"
        },
        {
            "utterance": "what are the names of the customers whose customer details are null ?",
            "sql": "select distinct t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where order_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the state and country of all cities with post code starting with 4.",
        "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""
    },
    "interaction": [
        {
            "utterance": "Find the state and country of all cities with post code starting with 4 .",
            "sql": "select state_province_county , country from addresses where zip_postcode like value"
        },
        {
            "utterance": "What are the cities in Colorado that have post codes starting with 4 .",
            "sql": "select city from addresses where zip_postcode like value and state_province_county = value"
        },
        {
            "utterance": "How about cities in Texas that have post codes starting with 4 ?",
            "sql": "select city from addresses where zip_postcode like value and state_province_county = value"
        },
        {
            "utterance": "How many cities in total with post code starting with 4 ?",
            "sql": "select count ( distinct city ) from addresses where zip_postcode like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""
    },
    "interaction": [
        {
            "utterance": "list the canceled product customer id ?",
            "sql": "select product_id from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id where order_status = value"
        },
        {
            "utterance": "which is the order date of customer id 5 ?",
            "sql": "select order_date from customer_orders where customer_id = value"
        },
        {
            "utterance": "what the average order quantity for all the order items ?",
            "sql": "select avg ( order_quantity ) from order_items"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 17,
    "final": {
        "utterance": "List the countries having more than 4 addresses listed.",
        "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4"
    },
    "interaction": [
        {
            "utterance": "List the countries having more than 4 addresses listed .",
            "sql": "select country from addresses group by country having count ( address_id ) > value"
        },
        {
            "utterance": "What is zip postcode of the lucasville city ?",
            "sql": "select zip_postcode from addresses where city = value"
        },
        {
            "utterance": "Final question is How many Address ids in the table ?",
            "sql": "select count ( address_id ) from addresses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 18,
    "final": {
        "utterance": "Who made the latest order?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi who made the latest order ?",
            "sql": "select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id order by t2 . order_date desc limit value"
        },
        {
            "utterance": "How many people canceled their orders",
            "sql": "select count ( distinct customer_id ) from customer_orders where order_status = value"
        },
        {
            "utterance": "How many times has Eunice Morar placed an order",
            "sql": "select count ( * ) from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        },
        {
            "utterance": "How did Eunic Morar pay ?",
            "sql": "select payment_method from customers where customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 19,
    "final": {
        "utterance": "Which city has the most customers living in?",
        "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "In which city are the most customers living in ?",
            "sql": "select t3 . city from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id group by t3 . city order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the city with least customers ?",
            "sql": "select t3 . city from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id group by t3 . city order by count ( * ) limit value"
        },
        {
            "utterance": "And in which state is it located ?",
            "sql": "select t3 . state_province_county from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id group by t3 . city order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the name of the customer that made the order with the largest quantity?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
    },
    "interaction": [
        {
            "utterance": "Could you tell me the name of the customer that made the order that had the largest quantity of items in it ?",
            "sql": "select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id where t3 . order_quantity = ( select max ( order_quantity ) from order_items )"
        },
        {
            "utterance": "What dates did they become customers ?",
            "sql": "select t1 . customer_name , t1 . date_became_customer from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id where t3 . order_quantity = ( select max ( order_quantity ) from order_items )"
        },
        {
            "utterance": "Can you list the names of all customers who cancelled at least one order as well as the order dates of those cancelled orders ?",
            "sql": "select t1 . customer_name , t2 . order_date from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value"
        },
        {
            "utterance": "What are the order quantities and dates for all orders that were paid for with cash ?",
            "sql": "select t3 . order_quantity , t2 . order_date from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id where t1 . payment_method = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 21,
    "final": {
        "utterance": "How many types of products have Rodrick Heaney bought in total?",
        "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
    },
    "interaction": [
        {
            "utterance": "which order has high quantity",
            "sql": "select order_id , from order_items group by order_id order by sum ( order_quantity ) desc limit value"
        },
        {
            "utterance": "how many types of products have rodrick heaney bought in total ?",
            "sql": "select count ( distinct t3 . product_id ) from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id where t1 . customer_name = value"
        },
        {
            "utterance": "which person had order high amount of products | What attributes do you want to know about the customer who ordered the highest amount of products ? | I want everything about it .",
            "sql": "select * from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t2 . order_id = t3 . order_id group by t2 . customer_id order by sum ( t3 . order_quantity ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the name of all customers whose name contains \"Alex\".",
        "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""
    },
    "interaction": [
        {
            "utterance": "how many customers are there ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "show all their names .",
            "sql": "select customer_name from customers"
        },
        {
            "utterance": "please order them in alphabetical order .",
            "sql": "select customer_name from customers order by customer_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 23,
    "final": {
        "utterance": "Which payment method is used by most customers?",
        "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know the payment methods available",
            "sql": "select distinct payment_method from customers"
        },
        {
            "utterance": "How many customers use credit credit card as a means of payment ?",
            "sql": "select count ( * ) from customers where payment_method = value"
        },
        {
            "utterance": "What about Cash ?",
            "sql": "select count ( * ) from customers where payment_method = value"
        },
        {
            "utterance": "And Cheque ?",
            "sql": "select count ( * ) from customers where payment_method = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 24,
    "final": {
        "utterance": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "What payment method did Dr. Julia Wuckert MD use ?",
            "sql": "select payment_method from customers where customer_name = value"
        },
        {
            "utterance": "How many customers used credit cards ? ?",
            "sql": "select count ( customer_id ) from customers where payment_method = value"
        },
        {
            "utterance": "From when did Rodrick Heaney became a customer ?",
            "sql": "select t1 . active_from_date from customer_contact_channels as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 25,
    "final": {
        "utterance": "Which product has been ordered most number of times?",
        "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you give me a list of all products ?",
            "sql": "select * from products"
        },
        {
            "utterance": "Could you order them by order quantity ? | From small to large ? | large to small",
            "sql": "select * from order_items as t1 join products as t2 on t1 . product_id = t2 . product_id group by t1 . product_id order by sum ( order_quantity ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the names of customers who never placed an order.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all the customers who never placed a single order ?",
            "sql": "select customer_name from customers except select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "What date did they each become customers ?",
            "sql": "select date_became_customer from customers where customer_name in ( select customer_name from customers except select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id )"
        },
        {
            "utterance": "What are the names of the customers who cancelled their orders ?",
            "sql": "select distinct t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where t2 . order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the list of cities that no customer is living in.",
        "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the addresses with cities ? | Did you mean the address content ? | Yes , and also the cities .",
            "sql": "select address_content , city from addresses"
        },
        {
            "utterance": "Hmm , I want to know the cities with customers living in .",
            "sql": "select city from addresses where city in ( select distinct t3 . city from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id )"
        },
        {
            "utterance": "Hmm , please list the cities that no customer is living in .",
            "sql": "select city from addresses where city not in ( select distinct t3 . city from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 28,
    "final": {
        "utterance": "Which product has been ordered most number of times?",
        "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Please tell me the product names and ids . | Did you mean all the product details and ids ? | Yes please .",
            "sql": "select product_details , product_id from products"
        },
        {
            "utterance": "Hmm , I want to know the product names and the order quantities . | Did you mean the product details as product names ? | Yes .",
            "sql": "select t1 . product_details , t2 . order_quantity from products as t1 join order_items as t2 on t1 . product_id = t2 . product_id"
        },
        {
            "utterance": "Can you tell which product has been ordered the most number of times ?",
            "sql": "select t2 . product_details from order_items as t1 join products as t2 on t1 . product_id = t2 . product_id group by t1 . product_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the address content of the customer named \"Maudie Kertzmann\"?",
        "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\""
    },
    "interaction": [
        {
            "utterance": "what are the different type of payement method ?",
            "sql": "select distinct payment_method from customers"
        },
        {
            "utterance": "what are the different address type ?",
            "sql": "select distinct address_type from customer_addresses"
        },
        {
            "utterance": "which city in Dr. Julia Wuckert MD ? | What you mean ? | how many customer id ?",
            "sql": "select count ( customer_id ) from customers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 30,
    "final": {
        "utterance": "List all the contact channel codes that were used less than 5 times.",
        "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5"
    },
    "interaction": [
        {
            "utterance": "Which contact codes were used for less than 5 minutes ?",
            "sql": "select channel_code from customer_contact_channels group by channel_code having count ( customer_id ) < value"
        },
        {
            "utterance": "What are their contact numbers ?",
            "sql": "select channel_code , contact_number from customer_contact_channels group by channel_code having count ( customer_id ) < value"
        },
        {
            "utterance": "What was their activation dates ? | do you want the active_from_date or active_to_date or both of them ? | Both of them",
            "sql": "select channel_code , active_from_date , active_to_date from customer_contact_channels group by channel_code having count ( customer_id ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the state and country of all cities with post code starting with 4.",
        "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""
    },
    "interaction": [
        {
            "utterance": "Find the state of all cities with post code starting with 4 .",
            "sql": "select state_province_county from addresses where zip_postcode like value"
        },
        {
            "utterance": "Find the country of all cities with post code starting with 4 .",
            "sql": "select country from addresses where zip_postcode like value"
        },
        {
            "utterance": "List all the post codes starting with 4 .",
            "sql": "select zip_postcode from addresses where zip_postcode like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 0,
    "final": {
        "utterance": "For each station, return its longitude and the average duration of trips that started from the station.",
        "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
    },
    "interaction": [
        {
            "utterance": "What are the dock count of San Jose Diridon Caltrain Station ?",
            "sql": "select dock_count from station where name = value"
        },
        {
            "utterance": "What are the bike id of zip code 94041 ?",
            "sql": "select bike_id from trip where zip_code = value"
        },
        {
            "utterance": "How many dock stations are there in San Jose ? | Do you mean the total dock counts of all stations in city San Jose ? | Yes",
            "sql": "select sum ( dock_count ) from station where city = value"
        },
        {
            "utterance": "For each station , return its longitude and the average duration of trips that started from the station .",
            "sql": "select t1 . name , t1 . long , avg ( t2 . duration ) from station as t1 join trip as t2 on t1 . id = t2 . start_station_id group by t1 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
        "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    "interaction": [
        {
            "utterance": "what is the zip code of the highest number of trips taken | What do you mean by `` highest number of trips taken '' ? | i would like to know the zip code of trips taken above 200 with humidity below 70",
            "sql": "select zip_code from weather group by zip_code having avg ( mean_humidity ) < value intersect select zip_code from trip group by zip_code having count ( * ) > = value"
        },
        {
            "utterance": "what end station name has the least amount of trips taken but still above 100 trips",
            "sql": "select end_station_name from trip group by zip_code having count ( * ) > = value order by count ( * ) asc limit value"
        },
        {
            "utterance": "the zip code 94107 what is the humidity ?",
            "sql": "select ( mean_humidity ) from weather where zip_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the name, latitude, and city of the station with the lowest latitude?",
        "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of station with lowest lattitude ?",
            "sql": "select name from station order by lat limit value"
        },
        {
            "utterance": "What is the latitude of the station with the lowest latitude ?",
            "sql": "select lat from station order by lat limit value"
        },
        {
            "utterance": "Which city is san jose diridon caltrain station located ?",
            "sql": "select city from station where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Return the unique name for stations that have ever had 7 bikes available.",
        "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
    },
    "interaction": [
        {
            "utterance": "how many stations are presented on the table",
            "sql": "select distinct count ( * ) from station"
        },
        {
            "utterance": "list out the station names",
            "sql": "select distinct name from station"
        },
        {
            "utterance": "what is the city of San Jose Civic Center",
            "sql": "select city from station where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me the start station and end station for the trips with the three oldest id.",
        "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "how many trip are presented on the table",
            "sql": "select count ( * ) from trip"
        },
        {
            "utterance": "show all the start station name",
            "sql": "select start_station_name from trip"
        },
        {
            "utterance": "what is the start date of Howard at 2nd | Do you mean its start station is Howard at 2nd ? | exactly",
            "sql": "select start_date from trip where start_station_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the total and maximum duration of trips with bike id 636?",
        "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
    },
    "interaction": [
        {
            "utterance": "what is the total duration of trips with bike id 636 ?",
            "sql": "select sum ( duration ) from trip where bike_id = value"
        },
        {
            "utterance": "ok , what is the maximum duration of trip with bike id 636 ?",
            "sql": "select max ( duration ) from trip where bike_id = value"
        },
        {
            "utterance": "ok , what is the maximum duration of trip with bike id 454 ?",
            "sql": "select max ( duration ) from trip where bike_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    "interaction": [
        {
            "utterance": "Good morning , could you please let me know the IDs of the stations those are located in San Francisco ?",
            "sql": "select id from station where city = value"
        },
        {
            "utterance": "That 's a big list , thank you . Then could you please let me know which of these stations has more than 10 bikes available ?",
            "sql": "select id from station where city = value intersect select station_id from status group by station_id having bikes_available > value"
        },
        {
            "utterance": "That was fast , thank you again : ) Could you please let me know which station is located in the highest latitude ?",
            "sql": "select name from station order by lat desc limit value"
        },
        {
            "utterance": "Awesome , then could you please let me know the installation date of the station ?",
            "sql": "select installation_date from station order by lat desc limit value"
        },
        {
            "utterance": "Wow that 's a lot . Thank you again , this will be my last question : ) Could you please let me know the ID of the station which has the biggest number of docks available among these 61 stations ?",
            "sql": "select id from station where installation_date < value order by dock_count desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me how many trips there have been , starting from August ?",
            "sql": "select count ( * ) from trip where start_date like value"
        },
        {
            "utterance": "oh wow that 's a lot ! and how many stations have those started from ?",
            "sql": "select count ( distinct start_station_name ) from trip where start_date like value"
        },
        {
            "utterance": "how many trips started from there ?",
            "sql": "select count ( * ) from trip where start_station_name = ( select start_station_name from trip where start_date like value group by start_station_name order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Could you tell me the ID and name of the San Francisco station ?",
            "sql": "select distinct start_station_name , start_station_id from trip where start_station_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 8,
    "final": {
        "utterance": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
    },
    "interaction": [
        {
            "utterance": "What is the latitude of each station , please ?",
            "sql": "select name , lat from station"
        },
        {
            "utterance": "What are the minimum durations of all trips that end in those stations ?",
            "sql": "select t1 . name , t1 . lat , min ( t2 . duration ) from station as t1 join trip as t2 on t1 . id = t2 . end_station_id group by t2 . end_station_id"
        },
        {
            "utterance": "What dates were all the stations installed ?",
            "sql": "select name , installation_date from station"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the ids and names of stations from which at least 200 trips started.",
        "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
    },
    "interaction": [
        {
            "utterance": "Show me the start station id for all trips .",
            "sql": "select start_station_id from trip"
        },
        {
            "utterance": "How many of these occur at least 200 times ?",
            "sql": "select count ( distinct start_station_id ) from trip where start_station_id in ( select start_station_id from trip group by start_station_name having count ( * ) > = value )"
        },
        {
            "utterance": "Show me the ids and names of these stations .",
            "sql": "select start_station_id , start_station_name from trip group by start_station_name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the average latitude and longitude of stations located in San Jose city?",
        "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
    },
    "interaction": [
        {
            "utterance": "What is the average latitude of stations located in San Jose city ?",
            "sql": "select avg ( lat ) from station where city = value"
        },
        {
            "utterance": "What is the average longitude of stations located in San Jose city ?",
            "sql": "select avg ( long ) from station where city = value"
        },
        {
            "utterance": "What are the installation dates for all stations in San Jose city ?",
            "sql": "select installation_date from station where city = value"
        },
        {
            "utterance": "What are the names of each of those ?",
            "sql": "select name , installation_date from station where city = value"
        },
        {
            "utterance": "What are the dock counts of each of those ?",
            "sql": "select name , dock_count from station where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
    },
    "interaction": [
        {
            "utterance": "What is the station name for the id 's 1 and 2 ?",
            "sql": "select name , id from station where id = value or id = value"
        },
        {
            "utterance": "Which station has dock count higher than 15 ... | Would you like to know the station name or all the information ? | What are the ids of station that have latitude above 37.4 and never had bike availability below 7 ?",
            "sql": "select id from station where lat > value except select station_id from status group by station_id having min ( bikes_available ) < value"
        },
        {
            "utterance": "Tell me the installation date for the station id 4 ?",
            "sql": "select installation_date from station where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
    },
    "interaction": [
        {
            "utterance": "how many statuses are there",
            "sql": "select count ( * ) from status"
        },
        {
            "utterance": "what is the city of San Jose Civic Center",
            "sql": "select city from station where name = value"
        },
        {
            "utterance": "how many stations there",
            "sql": "select count ( * ) from station"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    "interaction": [
        {
            "utterance": "How many trips lasted at least that long ? | Do you mean the number of trips whose duration is longer than the average duration of trips in zip code 94103 ? | yes",
            "sql": "select count ( * ) from trip where duration > = ( select avg ( duration ) from trip where zip_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the city of the station from which the shortest trip started ? | trip can not be described by distance | what is the latitude of San Jose Diridon Caltrain Station ?",
            "sql": "select distinct t1 . lat from station as t1 join trip as t2 where t1 . name = value"
        },
        {
            "utterance": "what is the longitude of Santa Clara at Almaden ?",
            "sql": "select distinct t1 . long from station as t1 join trip as t2 where t1 . name = value"
        },
        {
            "utterance": "what is the latitude of San Jose Civic Center ?",
            "sql": "select distinct t1 . lat from station as t1 join trip as t2 where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
    },
    "interaction": [
        {
            "utterance": "how many trips started from howard and ended at san fransisco",
            "sql": "select count ( * ) from station as t1 join trip as t2 join station as t3 join trip as t4 on t1 . id = t2 . start_station_id and t2 . id = t4 . id and t3 . id = t4 . end_station_id where t1 . city = value and t3 . city = value"
        },
        {
            "utterance": "how many trips started from south van ness and ended at san fransisco",
            "sql": "select count ( * ) from station as t1 join trip as t2 join station as t3 join trip as t4 on t1 . id = t2 . start_station_id and t2 . id = t4 . id and t3 . id = t4 . end_station_id where t1 . city = value and t3 . city = value"
        },
        {
            "utterance": "how many trips started from mountain view city and ended in palo alto city",
            "sql": "select count ( * ) from station as t1 join trip as t2 join station as t3 join trip as t4 on t1 . id = t2 . start_station_id and t2 . id = t4 . id and t3 . id = t4 . end_station_id where t1 . city = value and t3 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
    },
    "interaction": [
        {
            "utterance": "show me the names and ids of all stations",
            "sql": "select name , id from station"
        },
        {
            "utterance": "How many stations had more than 14 bikes available on average or were installed in december ?",
            "sql": "select count ( * ) from ( select t1 . name from station as t1 join status as t2 on t1 . id = t2 . station_id group by t2 . station_id having avg ( t2 . bikes_available ) > value union select name from station where installation_date like value )"
        },
        {
            "utterance": "show me the name and ids of these stations",
            "sql": "select t1 . name , t1 . id from station as t1 join status as t2 on t1 . id = t2 . station_id group by t2 . station_id having avg ( t2 . bikes_available ) > value union select name , id from station where installation_date like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    "interaction": [
        {
            "utterance": "How many stations have an average bike availability above 10 ?",
            "sql": "select count ( * ) from ( select * from station as t1 join status as t2 on t1 . id = t2 . station_id group by t2 . station_id having avg ( bikes_available ) > value )"
        },
        {
            "utterance": "How many of those are not in San Jose City ?",
            "sql": "select count ( * ) from ( select t1 . name from station as t1 join status as t2 on t1 . id = t2 . station_id group by t2 . station_id having avg ( bikes_available ) > value except select name from station where city = value )"
        },
        {
            "utterance": "What are the names of those stations ?",
            "sql": "select t1 . name from station as t1 join status as t2 on t1 . id = t2 . station_id group by t2 . station_id having avg ( bikes_available ) > value except select name from station where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Which bike traveled the most often in zip code 94002?",
        "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! How are you ? Could you please provide me with a list of all trip IDs for the zip code 94002 ?",
            "sql": "select id from trip where zip_code = value"
        },
        {
            "utterance": "Great ! Can you tell me which bike id has the most trips within the area with the zipcode 94002 ?",
            "sql": "select bike_id from trip where zip_code = value group by bike_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Excellent ! Can you tell me what the total number of trips is , within zip code 94002 , for bike 252 ?",
            "sql": "select count ( * ) from trip where zip_code = value and bike_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Count the number of trips that did not end in San Francisco city.",
        "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\""
    },
    "interaction": [
        {
            "utterance": "Where do the trips end ?",
            "sql": "select distinct t2 . city from trip as t1 join station as t2 on t1 . end_station_id = t2 . id"
        },
        {
            "utterance": "How many trips are there ?",
            "sql": "select count ( * ) from trip as t1 join station as t2 on t1 . end_station_id = t2 . id"
        },
        {
            "utterance": "How many of these end in San Francisco ?",
            "sql": "select count ( * ) from trip as t1 join station as t2 on t1 . end_station_id = t2 . id where t2 . city = value"
        },
        {
            "utterance": "How many end somewhere else ?",
            "sql": "select count ( * ) from trip as t1 join station as t2 on t1 . end_station_id = t2 . id where t2 . city ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the id of the trip that has the shortest duration?",
        "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the start date and start station id for id 900504 ?",
            "sql": "select start_date , start_station_name from trip where id = value"
        },
        {
            "utterance": "Tell me the zip code for bike id 454 and 574 ?",
            "sql": "select distinct zip_code , bike_id from trip where bike_id = value or bike_id = value"
        },
        {
            "utterance": "What is the id of the trip that has the shortest duration ?",
            "sql": "select id from trip order by duration limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    "interaction": [
        {
            "utterance": "What are the station ids for San Francisco ? | Do you mean the city San Francisco ? | Yes .",
            "sql": "select id from station where city = value"
        },
        {
            "utterance": "Which of these have bikes ?",
            "sql": "select id from station where city = value intersect select station_id from status where bikes_available > value"
        },
        {
            "utterance": "Which of these have an average bike availability above 10 ?",
            "sql": "select id from station where city = value intersect select station_id from status group by station_id having avg ( bikes_available ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all publishers which do not have a book in 1989.",
        "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show a list of all publishers who did not publish any books in 1989 ?",
            "sql": "select publisher from book_club except select publisher from book_club where year = value"
        },
        {
            "utterance": "Thank you ! Can you show me a list of all of the book titles published by Alyson ?",
            "sql": "select book_title from book_club where publisher = value"
        },
        {
            "utterance": "Thanks ! Can you update that list to show the years that those 3 books were published and what category they fall under ?",
            "sql": "select book_title , year , category from book_club where publisher = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 1,
    "final": {
        "utterance": "List categories that have at least two books after year 1989.",
        "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Are there any other categories ? | Do you mean the other category has books after year 1989 ? Gay SF/F is the only one category has books after year 1989 | Yes , that 's what I meant . How many books does Gay SF/F have after 1989 ?",
            "sql": "select count ( * ) from book_club where category = value and year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 2,
    "final": {
        "utterance": "List all company names with a book published by Alyson.",
        "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"
    },
    "interaction": [
        {
            "utterance": "how manty editors are there ?",
            "sql": "select count ( author_or_editor ) from book_club"
        },
        {
            "utterance": "how about the total number of companies ?",
            "sql": "select count ( * ) from culture_company"
        },
        {
            "utterance": "which company did Alyson published a book for ?",
            "sql": "select t1 . company_name from culture_company as t1 join book_club as t2 on t1 . book_club_id = t2 . book_club_id where t2 . publisher = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 3,
    "final": {
        "utterance": "Show publishers with a book published in 1989 and a book in 1990.",
        "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990"
    },
    "interaction": [
        {
            "utterance": "Could you please show me the publishers with a book published in 1989 ?",
            "sql": "select publisher from book_club where year = value"
        },
        {
            "utterance": "Could you please show me the publishers with a book published in 1990 ?",
            "sql": "select publisher from book_club where year = value"
        },
        {
            "utterance": "Which publishers published books in 1989 and 1990 ?",
            "sql": "select publisher from book_club where year = value intersect select publisher from book_club where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the publisher with most number of books?",
        "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the publisher with most number of books ?",
            "sql": "select publisher from book_club group by publisher order by count ( * ) desc limit value"
        },
        {
            "utterance": "Who is the author of Unicorn Mountain ?",
            "sql": "select author_or_editor from book_club where book_title = value"
        },
        {
            "utterance": "Who is the author of Death Takes the Stage ?",
            "sql": "select author_or_editor from book_club where book_title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you now just show the director and movie title for the highest grossing movie for the year 2000 or earlier . One result please",
            "sql": "select title , director from movie where year < = value order by gross_worldwide desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"
    },
    "interaction": [
        {
            "utterance": "What is the average for all movies ? | average what ? | Sorry , the average budget for all movies ?",
            "sql": "select avg ( budget_million ) from movie"
        },
        {
            "utterance": "Okay . What is the average budget for all movies before 2000 ?",
            "sql": "select avg ( budget_million ) from movie where year < value"
        },
        {
            "utterance": "Finally , what is the average budget , the maximum budget , and the minimum budget for all movies before 2000 ?",
            "sql": "select avg ( budget_million ) , max ( budget_million ) , min ( budget_million ) from movie where year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"
    },
    "interaction": [
        {
            "utterance": "HOW MANY DIRECTORE IN MOVIE TABLE ? List them .",
            "sql": "select distinct director from movie group by director"
        },
        {
            "utterance": "WHAT IS THE BUDGET OF THE BOONDOCK SAINTS ?",
            "sql": "select budget_million from movie where title = value"
        },
        {
            "utterance": "WHAT IS THE BIGGEST BUDGET OF MOVIE TABLE ?",
            "sql": "select budget_million from movie order by budget_million desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of the medicine that can interact with two or more enzymes ?",
            "sql": "select t1 . id , t1 . name from medicine as t1 join medicine_enzyme_interaction as t2 on t2 . medicine_id = t1 . id group by t1 . id having count ( * ) > = value"
        },
        {
            "utterance": "How many enzymes can Aripiprazole interact with ?",
            "sql": "select count ( distinct t2 . enzyme_id ) from medicine as t1 join medicine_enzyme_interaction as t2 on t2 . medicine_id = t1 . id where name = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select count ( distinct t2 . enzyme_id ) from medicine as t1 join medicine_enzyme_interaction as t2 on t2 . medicine_id = t1 . id where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
    },
    "interaction": [
        {
            "utterance": "can you tell me all the enzymes that work in the cytosol ?",
            "sql": "select name from enzyme where location = value"
        },
        {
            "utterance": "which of those enzymes is in the medicine with the name Aripiprazole ?",
            "sql": "select t3 . name from medicine_enzyme_interaction as t1 join medicine as t2 on t1 . medicine_id = t2 . id join enzyme as t3 on t1 . enzyme_id = t3 . id where t2 . name = value and t3 . location = value"
        },
        {
            "utterance": "are there any other enzymes that are not in the cytosol that have the name Aripiprazole ?",
            "sql": "select t3 . name from medicine_enzyme_interaction as t1 join medicine as t2 on t1 . medicine_id = t2 . id join enzyme as t3 on t1 . enzyme_id = t3 . id where t2 . name = value and t3 . location ! = value"
        },
        {
            "utterance": "and can you tell me what the interaction type is for ALA synthase ?",
            "sql": "select distinct ( t1 . interaction_type ) from medicine_enzyme_interaction as t1 join enzyme as t2 on t1 . enzyme_id = t2 . id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "What 're the names of the enzymes in the medicine `` Amisulpride '' ?",
            "sql": "select t1 . name from enzyme as t1 join medicine_enzyme_interaction as t2 on t1 . id = t2 . enzyme_id join medicine as t3 on t2 . medicine_id = t3 . id where t3 . name = value"
        },
        {
            "utterance": "What 're the names of the enzymes in the medicine `` Amisulpride '' that can serve as an inhibitor ?",
            "sql": "select t1 . name from enzyme as t1 join medicine_enzyme_interaction as t2 on t1 . id = t2 . enzyme_id join medicine as t3 on t2 . medicine_id = t3 . id where t3 . name = value and t2 . interaction_type = value"
        },
        {
            "utterance": "What are the names of all enzymes that can serve as inhibitors ?",
            "sql": "select distinct ( t1 . name ) from enzyme as t1 join medicine_enzyme_interaction as t2 on t1 . id = t2 . enzyme_id join medicine as t3 on t2 . medicine_id = t3 . id where t2 . interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list the different interaction types for me ?",
            "sql": "select distinct interaction_type from medicine_enzyme_interaction"
        },
        {
            "utterance": "Great ! Can you provide me with the name , location , and product for each enzyme that is associated with the `` inhibitor '' interaction type ?",
            "sql": "select distinct t1 . name , t1 . location , t1 . product from enzyme as t1 join medicine_enzyme_interaction as t2 on t2 . enzyme_id = t1 . id where t2 . interaction_type = value"
        },
        {
            "utterance": "Great ! Can you update this list to show the chromosome associated with each enzyme on this list ?",
            "sql": "select distinct t1 . name , t1 . location , t1 . product , t1 . chromosome from enzyme as t1 join medicine_enzyme_interaction as t2 on t2 . enzyme_id = t1 . id where t2 . interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "what are the location of the enzymes ?",
            "sql": "select distinct location from enzyme"
        },
        {
            "utterance": "i mean chromosome value ? | You mean PBG deaminase ? | yes",
            "sql": "select chromosome from enzyme where name = value"
        },
        {
            "utterance": "Find the product name of the ALA synthase ?",
            "sql": "select product from enzyme where name = value"
        },
        {
            "utterance": "Find the enzyme name of medicine id 3 ?",
            "sql": "select distinct t1 . name from enzyme as t1 join medicine_enzyme_interaction as t2 on t2 . enzyme_id = t1 . id where t2 . medicine_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.",
        "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'"
    },
    "interaction": [
        {
            "utterance": "What are medicine names and trade names ?",
            "sql": "select name , trade_name from medicine"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the interaction types between enzymes and medicine ?",
            "sql": "select distinct interaction_type from medicine_enzyme_interaction"
        },
        {
            "utterance": "What is the most common interaction type between enzymes and medicine ?",
            "sql": "select interaction_type from medicine_enzyme_interaction group by interaction_type order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many types are available ?",
            "sql": "select count ( distinct interaction_type ) from medicine_enzyme_interaction"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 7,
    "final": {
        "utterance": "How many enzymes do not have any interactions?",
        "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    "interaction": [
        {
            "utterance": "How many enzymes are there ?",
            "sql": "select count ( * ) from enzyme"
        },
        {
            "utterance": "How many have interactions with medicines ?",
            "sql": "select count ( distinct enzyme_id ) from medicine_enzyme_interaction"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 8,
    "final": {
        "utterance": "Which enzyme names have the substring \"ALA\"?",
        "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
    },
    "interaction": [
        {
            "utterance": "Which enzyme names have the substring `` PBG '' ?",
            "sql": "select name from enzyme where name like value"
        },
        {
            "utterance": "What is the product name of ALA synthase ?",
            "sql": "select product from enzyme where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 9,
    "final": {
        "utterance": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
    },
    "interaction": [
        {
            "utterance": "Show me the medicine name which can interact as 'inhibitor ' ?",
            "sql": "select t1 . name from medicine as t1 join medicine_enzyme_interaction as t2 on t2 . medicine_id = t1 . id where interaction_type = value"
        },
        {
            "utterance": "Show me the medicine name which can interact as 'activitor ' with enzymes ?",
            "sql": "select t1 . name from medicine as t1 join medicine_enzyme_interaction as t2 on t2 . medicine_id = t1 . id where interaction_type = value"
        },
        {
            "utterance": "Show me the name of the medicines that are present in both the tables ?",
            "sql": "select t1 . name from medicine as t1 join medicine_enzyme_interaction as t2 on t2 . medicine_id = t1 . id where interaction_type = value intersect select t1 . name from medicine as t1 join medicine_enzyme_interaction as t2 on t2 . medicine_id = t1 . id where interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the interaction type of ALA synthase ?",
            "sql": "select t2 . interaction_type from enzyme as t1 join medicine_enzyme_interaction as t2 on t1 . id = t2 . enzyme_id where name = value"
        },
        {
            "utterance": "Find the product of enzyme id 1 ?",
            "sql": "select product from enzyme where id = value"
        },
        {
            "utterance": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator ' ?",
            "sql": "select t1 . id , t1 . name from enzyme as t1 join medicine_enzyme_interaction as t2 on t1 . id = t2 . enzyme_id where t2 . interaction_type = value group by t1 . id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 11,
    "final": {
        "utterance": "How many enzymes do not have any interactions?",
        "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    "interaction": [
        {
            "utterance": "How many enzymes do not have any interactions ?",
            "sql": "select count ( * ) from enzyme where id not in ( select enzyme_id from medicine_enzyme_interaction )"
        },
        {
            "utterance": "List enzyme names in alphabetical order",
            "sql": "select name from enzyme order by name"
        },
        {
            "utterance": "Give me enzymes with interaction type `` inhibitor ''",
            "sql": "select distinct name from enzyme as t1 join medicine_enzyme_interaction as t2 on t2 . enzyme_id = t1 . id where interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id of users who are followed by Mary or Susan.",
        "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""
    },
    "interaction": [
        {
            "utterance": "hi . I would like to know how many users are followed by Mary ?",
            "sql": "select count ( t2 . f1 ) from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value"
        },
        {
            "utterance": "and how many are followed by Susan ?",
            "sql": "select count ( t2 . f1 ) from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value"
        },
        {
            "utterance": "can you tell me the Id of these users ?",
            "sql": "select t2 . f1 from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value"
        },
        {
            "utterance": "and the user id followed by Mary ?",
            "sql": "select t2 . f1 from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value or t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the average number of followers for the users who had some tweets.",
        "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
    },
    "interaction": [
        {
            "utterance": "Which users had some tweets ?",
            "sql": "select name from user_profiles where uid in ( select uid from tweets )"
        },
        {
            "utterance": "Can you find me the average number of followers for these users ?",
            "sql": "select avg ( followers ) from user_profiles where uid in ( select uid from tweets )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of 5 users followed by the largest number of other users.",
        "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "List the names of 5 users followed by the largest number of other users .",
            "sql": "select name from user_profiles order by followers desc limit value"
        },
        {
            "utterance": "What is the email and followers of Iron Man ?",
            "sql": "select email , followers from user_profiles where name = value"
        },
        {
            "utterance": "What name has the highest followers ?",
            "sql": "select name from user_profiles order by followers desc limit value"
        },
        {
            "utterance": "How many followers does Tyler Swift have ?",
            "sql": "select followers from user_profiles where name = value"
        },
        {
            "utterance": "What is the email and partition id of Tyler Swift ?",
            "sql": "select email , partitionid from user_profiles where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the maximum and total number of followers of all users.",
        "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
    },
    "interaction": [
        {
            "utterance": "Can you list the uids and names of all users ?",
            "sql": "select uid , name from user_profiles"
        },
        {
            "utterance": "Hmm , I want to know the number of followers of each user .",
            "sql": "select name , followers from user_profiles"
        },
        {
            "utterance": "What is the maximum number of followers of all users ?",
            "sql": "select max ( followers ) from user_profiles"
        },
        {
            "utterance": "What is the total number of followers of all users ?",
            "sql": "select sum ( followers ) from user_profiles"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the average number of followers for the users who had some tweets.",
        "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
    },
    "interaction": [
        {
            "utterance": "how many tweets there",
            "sql": "select count ( * ) from tweets"
        },
        {
            "utterance": "what is email id of Mary | Did you mean what is the email of Mary or uid or her ? | yes user profiles email id of mary",
            "sql": "select email from user_profiles where name = value"
        },
        {
            "utterance": "how many followers in Iron Man",
            "sql": "select followers from user_profiles where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of each user and number of tweets tweeted by each of them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"
    },
    "interaction": [
        {
            "utterance": "How many tweets in this table ?",
            "sql": "select count ( * ) from tweets"
        },
        {
            "utterance": "How many user profiles in this table ?",
            "sql": "select count ( * ) from user_profiles"
        },
        {
            "utterance": "What is the email id of Iron Man ?",
            "sql": "select email from user_profiles where name = value"
        },
        {
            "utterance": "What is the text tweet of Iron Man ?",
            "sql": "select t2 . text from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the id of users who are followed by Mary or Susan.",
        "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""
    },
    "interaction": [
        {
            "utterance": "How many users are followed by Mary ?",
            "sql": "select count ( * ) from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value"
        },
        {
            "utterance": "What about by Susan ?",
            "sql": "select count ( * ) from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value"
        },
        {
            "utterance": "What is the id for those users ? | Do you mean users followed by only Mary , or only Susan , or by either ? | I mean the users followed by either .",
            "sql": "select t2 . f1 from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value or t1 . name = value"
        },
        {
            "utterance": "What are the names of those users ?",
            "sql": "select uid , name from user_profiles where uid in ( select t2 . f1 from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value or t1 . name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the user who has the largest number of followers.",
        "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the total number of followers for all users ?",
            "sql": "select sum ( followers ) from user_profiles"
        },
        {
            "utterance": "What are the lowest number of followers ?",
            "sql": "select min ( followers ) from user_profiles"
        },
        {
            "utterance": "Yes , please .",
            "sql": "select name from user_profiles where followers = ( select max ( followers ) from user_profiles )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the average number of followers for the users who do not have any tweet.",
        "sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
    },
    "interaction": [
        {
            "utterance": "Hi , I was wondering how many users do not have tweets ?",
            "sql": "select count ( * ) from user_profiles where uid not in ( select uid from tweets )"
        },
        {
            "utterance": "Great , what is the average number of followers for everyone in the data set ?",
            "sql": "select avg ( followers ) from user_profiles"
        },
        {
            "utterance": "Okay , and what about the average followers for those who do have tweets ?",
            "sql": "select avg ( followers ) from user_profiles where uid in ( select uid from tweets )"
        },
        {
            "utterance": "And what was the average followers for those who do not have any tweets ?",
            "sql": "select avg ( followers ) from user_profiles where uid not in ( select uid from tweets )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id of users who are followed by Mary and Susan.",
        "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\""
    },
    "interaction": [
        {
            "utterance": "what is the users ' name ?",
            "sql": "select name from user_profiles"
        },
        {
            "utterance": "which one has the most followers ?",
            "sql": "select name from user_profiles order by followers desc limit value"
        },
        {
            "utterance": "what is her email ?",
            "sql": "select email from user_profiles order by followers desc limit value"
        },
        {
            "utterance": "find the id of users who are followed by mary and susan .",
            "sql": "select t2 . f1 from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value intersect select t2 . f1 from user_profiles as t1 join follows as t2 on t1 . uid = t2 . f2 where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and partition id for users who tweeted less than twice.",
        "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "What is the name of uid 1 ?",
            "sql": "select name from user_profiles where uid = value"
        },
        {
            "utterance": "How many followers does Mary have ?",
            "sql": "select followers from user_profiles where name = value"
        },
        {
            "utterance": "Find the name and partition id for users who tweeted less than twice ?",
            "sql": "select t1 . partitionid , t1 . name from user_profiles as t1 join tweets as t2 where t1 . uid = t2 . uid group by t2 . uid having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the individuals in the table ?",
            "sql": "select name from user_profiles"
        },
        {
            "utterance": "How many followers does Celine Dion have ?",
            "sql": "select followers from user_profiles where name = value"
        },
        {
            "utterance": "How about Tyler Swift ?",
            "sql": "select followers from user_profiles where name = value"
        },
        {
            "utterance": "What is Tyler Swift 's email ?",
            "sql": "select email from user_profiles where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of each user and number of tweets tweeted by each of them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"
    },
    "interaction": [
        {
            "utterance": "show me the name of the users .",
            "sql": "select name from user_profiles"
        },
        {
            "utterance": "show me the tweets tweeted by them . | do you want to show all the info of the tweets ? | yes",
            "sql": "select * from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid"
        },
        {
            "utterance": "show me the number of tweets of each user",
            "sql": "select t1 . name , count ( * ) from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Return the text of tweets about the topic 'intern'.",
        "sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    "interaction": [
        {
            "utterance": "How many tweets are on the topic intern",
            "sql": "select count ( * ) from tweets where text like value"
        },
        {
            "utterance": "which tweet has the newest creation date ?",
            "sql": "select * from tweets order by createdate desc limit value"
        },
        {
            "utterance": "what about the oldest tweet ?",
            "sql": "select * from tweets order by createdate limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
    },
    "interaction": [
        {
            "utterance": "Find the email of the user whose name contains the word `` Swift ''",
            "sql": "select email from user_profiles where name like value"
        },
        {
            "utterance": "What is his name ?",
            "sql": "select name from user_profiles where name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of users who have more than one tweet.",
        "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you show all user ids that have more than 1 tweet ?",
            "sql": "select t1 . uid from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid having count ( * ) > value"
        },
        {
            "utterance": "Thanks , can you show the names associated with those user ids ?",
            "sql": "select t1 . name from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid having count ( * ) > value"
        },
        {
            "utterance": "Can you list the names in alphabetical order from top to bottom ?",
            "sql": "select t1 . name from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid having count ( * ) > value order by t1 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is his tweeter account ? | can you give more details ? who is `` he '' | The user who tweeted more than once",
            "sql": "select * from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid having count ( * ) > value"
        },
        {
            "utterance": "What are his tweets ? | do you mean the text of tweets | Yes",
            "sql": "select t1 . name , t2 . text from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid having count ( * ) > value"
        },
        {
            "utterance": "How many tweets did Iron man tweet ?",
            "sql": "select count ( * ) from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid and t1 . name = value"
        },
        {
            "utterance": "What about Celine ?",
            "sql": "select count ( * ) from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid and t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of users who have more than one tweet.",
        "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show me all the users .",
            "sql": "select name from user_profiles"
        },
        {
            "utterance": "Which of these users have more than one tweet ?",
            "sql": "select t1 . name from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid having count ( * ) > value"
        },
        {
            "utterance": "Show me the number of tweets for each of these users .",
            "sql": "select t1 . name , count ( * ) from user_profiles as t1 join tweets as t2 on t1 . uid = t2 . uid group by t2 . uid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the maximum and total number of followers of all users.",
        "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me how many users there are ?",
            "sql": "select count ( * ) from user_profiles"
        },
        {
            "utterance": "Which user has the most followers ?",
            "sql": "select name from user_profiles order by followers desc limit value"
        },
        {
            "utterance": "And how many followers does Tyler have ? | Tyler Swift has 99999998 followers | That 's 99999998 followers out of how many total followers for all users ?",
            "sql": "select sum ( followers ) from user_profiles"
        },
        {
            "utterance": "Can you please also provide the number of followers for the remaining users ?",
            "sql": "select followers from user_profiles where name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the nurse has the most appointments?",
        "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the nurse who has the most appointments ?",
            "sql": "select t1 . name from nurse as t1 join appointment as t2 on t1 . employeeid = t2 . prepnurse group by t1 . employeeid order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is her employee ID ?",
            "sql": "select employeeid from nurse as t1 join appointment as t2 on t1 . employeeid = t2 . prepnurse group by t1 . employeeid order by count ( * ) desc limit value"
        },
        {
            "utterance": "List all nurses names in alphabetical order",
            "sql": "select name from nurse order by name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which department has the largest number of employees?",
        "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the departments ?",
            "sql": "select name from department"
        },
        {
            "utterance": "How many employees are in the General Medicine department ?",
            "sql": "select head from department where name = value"
        },
        {
            "utterance": "Please show which departments have greater than 4 employees",
            "sql": "select name from department where head > value"
        },
        {
            "utterance": "Which of these has the largest number of employees ?",
            "sql": "select name from department order by head desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'"
    },
    "interaction": [
        {
            "utterance": "Find the name of Physicians who are affiliate with surgery or Psychiatry department .",
            "sql": "select t1 . name from physician as t1 join affiliated_with as t2 on t1 . employeeid = t2 . physician join department as t3 on t2 . department = t3 . departmentid where t3 . name = value or t3 . name = value"
        },
        {
            "utterance": "What is the Physician name of the following Employee ID ? tell me the SSN . | Sorry what employee IDs are you talking about ? | Sorry for my mistake . What is the Physician name of the following Employee ID 2 ? tell me the SSN .",
            "sql": "select name , ssn from physician where employeeid = value"
        },
        {
            "utterance": "What is the Physician name of the following Position Staff Internist ? tell me the SSN , and Employee ID , | Do you want the name , SSN , and employee ID ? | yes",
            "sql": "select name , ssn , employeeid from physician where position = value"
        },
        {
            "utterance": "which department has most number of head ? tell me department ID ,",
            "sql": "select departmentid from department order by head desc limit value"
        },
        {
            "utterance": "which department has least number of head ? tell me department ID , And department name ?",
            "sql": "select departmentid , name from department order by head limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the highest cost, lowest cost and average cost of procedures?",
        "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures"
    },
    "interaction": [
        {
            "utterance": "Which procedure has the highest cost ? | Do you mean the name of the procedure that has the highest cost ? | Yes . What is the name of the procedure that has the highest cost ?",
            "sql": "select name from procedures order by cost desc limit value"
        },
        {
            "utterance": "What is the name of the procedure that has the lowest cost ?",
            "sql": "select name from procedures order by cost asc limit value"
        },
        {
            "utterance": "What are the highest cost , lowest cost and average cost of procedures ?",
            "sql": "select max ( cost ) , min ( cost ) , avg ( cost ) from procedures"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 4,
    "final": {
        "utterance": "what is the name and position of the head whose department has least number of employees?",
        "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which department has the least number of employees ?",
            "sql": "select * from department as t1 join physician as t2 on t1 . head = t2 . employeeid group by departmentid order by count ( departmentid ) limit value"
        },
        {
            "utterance": "What is the name of the department head of General Medicine ?",
            "sql": "select t2 . name from department as t1 join physician as t2 on t1 . head = t2 . employeeid where t1 . name = value"
        },
        {
            "utterance": "Thank you ! What is Percival Cox 's position ?",
            "sql": "select position from physician where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
    },
    "interaction": [
        {
            "utterance": "Could you please find all the procedures that cost more than 1000 ?",
            "sql": "select * from procedures where cost > value"
        },
        {
            "utterance": "Could you please find all the procedure that Jon Wen was trained in ?",
            "sql": "select * from physician as t1 join trained_in as t2 on t1 . employeeid = t2 . physician join procedures as t3 on t3 . code = t2 . treatment where t1 . name = value"
        },
        {
            "utterance": "What are the names of the procedures that cost more than 1000 and are procedures John Wen was trained in ?",
            "sql": "select name from procedures where cost > value intersect select t3 . name from physician as t1 join trained_in as t2 on t1 . employeeid = t2 . physician join procedures as t3 on t3 . code = t2 . treatment where t1 . name = value"
        },
        {
            "utterance": "When do all of John Wen 's certifications expire ?",
            "sql": "select t2 . certificationexpires from physician as t1 join trained_in as t2 on t1 . employeeid = t2 . physician join procedures as t3 on t3 . code = t2 . treatment where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\""
    },
    "interaction": [
        {
            "utterance": "What are the names and positions of all physicians who prescribed brand X medications ?",
            "sql": "select distinct t1 . name , t1 . position from physician as t1 join prescribes as t2 on t1 . employeeid = t2 . physician join medication as t3 on t3 . code = t2 . medication where t3 . brand = value"
        },
        {
            "utterance": "What were the dates he prescribed those medications ?",
            "sql": "select distinct t2 . date from physician as t1 join prescribes as t2 on t1 . employeeid = t2 . physician join medication as t3 on t3 . code = t2 . medication where t3 . brand = value"
        },
        {
            "utterance": "What was the dose of that medication ?",
            "sql": "select dose from physician as t1 join prescribes as t2 on t1 . employeeid = t2 . physician join medication as t3 on t3 . code = t2 . medication where t3 . brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the physician who prescribed the highest dose?",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list the highest dose prescribed for any medication ? | What information do you want for the prescriptions ? Do you want all information or just the dose amount ? | I wanted the name of the physician that prescribed the highest dose , but I believe you 've already provided that information ?",
            "sql": "select t1 . name from physician as t1 join prescribes as t2 on t1 . employeeid = t2 . physician order by t2 . dose desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of patients who are not using the medication of Procrastin-X.",
        "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )"
    },
    "interaction": [
        {
            "utterance": "What is is the number of patients who are not using Procrastin-X ?",
            "sql": "select count ( * ) from patient where ssn not in ( select t1 . patient from prescribes as t1 join medication as t2 on t1 . medication = t2 . code where t2 . name = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from patient where ssn not in ( select t1 . patient from prescribes as t1 join medication as t2 on t1 . medication = t2 . code where t2 . name = value )"
        },
        {
            "utterance": "And what is their address ?",
            "sql": "select address from patient where ssn not in ( select t1 . patient from prescribes as t1 join medication as t2 on t1 . medication = t2 . code where t2 . name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the employee id of the head whose department has the least number of employees?",
        "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which department has the least number of employees ?",
            "sql": "select * from department group by departmentid order by count ( * ) limit value"
        },
        {
            "utterance": "What is the head of that department ?",
            "sql": "select head from department group by departmentid order by count ( departmentid ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which department has the largest number of employees?",
        "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what are the departments ? | Do you want the names of all department ? | yes",
            "sql": "select name from department"
        },
        {
            "utterance": "which department has the most employees ?",
            "sql": "select name from department group by departmentid order by count ( departmentid ) desc limit value"
        },
        {
            "utterance": "how many employees does Psychiatry have ?",
            "sql": "select head from department where name = value"
        },
        {
            "utterance": "how many employees does surgery have ?",
            "sql": "select head from department where name = value"
        },
        {
            "utterance": "what about general medicine ?",
            "sql": "select head from department where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111"
    },
    "interaction": [
        {
            "utterance": "find the names of all patients who have an undergoing treatment and are staying in room 111",
            "sql": "select distinct t2 . name from undergoes as t1 join patient as t2 on t1 . patient = t2 . ssn join stay as t3 on t1 . stay = t3 . stayid where t3 . room = value"
        },
        {
            "utterance": "find the name of the patient who have an insurance id 68476213",
            "sql": "select name from patient where insuranceid = value"
        },
        {
            "utterance": "find the name of physician who have seen the patient 100000001",
            "sql": "select distinct physician from undergoes where patient = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the patient who most recently stayed in room 111.",
        "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many patients in this table ?",
            "sql": "select count ( patient ) from stay"
        },
        {
            "utterance": "Find the patient who most recently stayed in room 112 ?",
            "sql": "select patient from stay where room = value order by staystart desc limit value"
        },
        {
            "utterance": "How many rooms in this table ?",
            "sql": "select count ( distinct room ) from stay"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of medication used on the patient who stays in room 111?",
        "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"
    },
    "interaction": [
        {
            "utterance": "How many patients are there ?",
            "sql": "select count ( * ) from patient"
        },
        {
            "utterance": "Can you show me the name of the patient who stays in room 111 ?",
            "sql": "select t2 . name from stay as t1 join patient as t2 on t1 . patient = t2 . ssn join prescribes as t3 on t3 . patient = t2 . ssn join medication as t4 on t3 . medication = t4 . code where room = value"
        },
        {
            "utterance": "Can you show me the insurance id of the patient who stays in room 111 ?",
            "sql": "select t2 . insuranceid from stay as t1 join patient as t2 on t1 . patient = t2 . ssn join prescribes as t3 on t3 . patient = t2 . ssn join medication as t4 on t3 . medication = t4 . code where room = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the physician who was trained in the most expensive procedure?",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most expensive procedure ? | Do you mean the name of the procedure with the highest cost ? | Yes .",
            "sql": "select name from procedures order by cost desc limit value"
        },
        {
            "utterance": "How many physicians are trained in Complete Walletectomy ?",
            "sql": "select count ( * ) from physician as t1 join trained_in as t2 on t1 . employeeid = t2 . physician join procedures as t3 on t3 . code = t2 . treatment where t3 . name = value"
        },
        {
            "utterance": "What is that physician 's name ?",
            "sql": "select t1 . name from physician as t1 join trained_in as t2 on t1 . employeeid = t2 . physician join procedures as t3 on t3 . code = t2 . treatment where t3 . name = value"
        },
        {
            "utterance": "When were they trained in that procedure ? | Do you mean the certification date and the expired date of the procedure named Complete Walletectomy ? | The certification date .",
            "sql": "select t2 . certificationdate from physician as t1 join trained_in as t2 on t1 . employeeid = t2 . physician join procedures as t3 on t3 . code = t2 . treatment where t3 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 15,
    "final": {
        "utterance": "what are name and phone number of patients who had more than one appointment?",
        "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the patients who had more than one appointment ?",
            "sql": "select name from appointment as t1 join patient as t2 on t1 . patient = t2 . ssn group by t1 . patient having count ( * ) > value"
        },
        {
            "utterance": "What are their phone numbers , please ?",
            "sql": "select phone from appointment as t1 join patient as t2 on t1 . patient = t2 . ssn group by t1 . patient having count ( * ) > value"
        },
        {
            "utterance": "What are the pcp 's of those patients ?",
            "sql": "select pcp from appointment as t1 join patient as t2 on t1 . patient = t2 . ssn group by t1 . patient having count ( * ) > value"
        },
        {
            "utterance": "What are the names of the patients who only had one appointment ?",
            "sql": "select name from appointment as t1 join patient as t2 on t1 . patient = t2 . ssn group by t1 . patient having count ( * ) = value"
        },
        {
            "utterance": "When did his appointment start and end ?",
            "sql": "select t1 . start , t1 . end from appointment as t1 join patient as t2 on t1 . patient = t2 . ssn group by t1 . patient having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the number of rooms for different block code?",
        "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"
    },
    "interaction": [
        {
            "utterance": "What are the number of rooms for block code 1 ?",
            "sql": "select count ( * ) from block as t1 join room as t2 on t1 . blockfloor = t2 . blockfloor and t1 . blockcode = t2 . blockcode where t1 . blockcode = value"
        },
        {
            "utterance": "What are the room numbers for Block Code 1 ?",
            "sql": "select t2 . roomnumber from block as t1 join room as t2 on t1 . blockfloor = t2 . blockfloor and t1 . blockcode = t2 . blockcode where t1 . blockcode = value"
        },
        {
            "utterance": "What is the block code for room 201 ?",
            "sql": "select t1 . blockcode from block as t1 join room as t2 on t1 . blockfloor = t2 . blockfloor and t1 . blockcode = t2 . blockcode where t2 . roomnumber = value"
        },
        {
            "utterance": "What is the room type for room 101 ?",
            "sql": "select roomtype from room where roomnumber = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of procedures which physician John Wen was trained in.",
        "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
    },
    "interaction": [
        {
            "utterance": "how many physicians are presented on the table",
            "sql": "select count ( * ) from physician"
        },
        {
            "utterance": "show all the procedures on the table | Did you want all the procedure names ? | exactly",
            "sql": "select name from procedures"
        },
        {
            "utterance": "what is the position of John Dorian",
            "sql": "select position from physician where name = value"
        },
        {
            "utterance": "what is the cost of Reverse Rhinopodoplasty",
            "sql": "select cost from procedures where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 18,
    "final": {
        "utterance": "List the names of departments where some physicians are primarily affiliated with.",
        "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"
    },
    "interaction": [
        {
            "utterance": "what departments are some physicians primarily affiliated with ?",
            "sql": "select distinct t2 . name from affiliated_with as t1 join department as t2 on t1 . department = t2 . departmentid where primaryaffiliation = value"
        },
        {
            "utterance": "what is the department id for surgery ?",
            "sql": "select departmentid from department where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the number of rooms for different block code?",
        "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"
    },
    "interaction": [
        {
            "utterance": "Can you show me how many rooms are there in total ?",
            "sql": "select count ( * ) from room"
        },
        {
            "utterance": "How about the total number of block codes ?",
            "sql": "select count ( distinct blockcode ) from room"
        },
        {
            "utterance": "Can you list them by the number of rooms in decending order ? | Do you mean roomnumber ? | Yes",
            "sql": "select blockcode from room order by roomnumber desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name of medication used on the patient who stays in room 111?",
        "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"
    },
    "interaction": [
        {
            "utterance": "I 'm looking for a patient . | What feature do you want ? | I want to know their room number .",
            "sql": "select room from stay"
        },
        {
            "utterance": "What is the patient 's name in room 111 ?",
            "sql": "select t1 . name from stay as t4 join patient as t1 where t4 . patient = t1 . ssn and t4 . room = value"
        },
        {
            "utterance": "What is the name and dose of the medication ?",
            "sql": "select distinct t4 . name , t3 . dose from stay as t1 join patient as t2 on t1 . patient = t2 . ssn join prescribes as t3 on t3 . patient = t2 . ssn join medication as t4 on t3 . medication = t4 . code where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid"
    },
    "interaction": [
        {
            "utterance": "I would like to know the names of all the physicians",
            "sql": "select name from physician"
        },
        {
            "utterance": "wonderful , looks like nine total . approximately how many patients do each of them take care of ? | Would you like to know average patients corresponding to each physician ? | if you could please share the average total patient per physician the would be helpful .",
            "sql": "select t1 . name , count ( * ) from physician as t1 join patient as t2 on t1 . employeeid = t2 . pcp group by t1 . employeeid"
        },
        {
            "utterance": "which of the physicians have zero patients ?",
            "sql": "select name from physician where name not in ( select t1 . name from physician as t1 join patient as t2 on t1 . employeeid = t2 . pcp )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 22,
    "final": {
        "utterance": "what are name and phone number of patients who had more than one appointment?",
        "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hello ! How are you ! Can you provide me with a list of all patient names ?",
            "sql": "select name from patient"
        },
        {
            "utterance": "Thank you so much ! Can you filter this list to show only the patients who had more than one appointment ?",
            "sql": "select name from appointment as t1 join patient as t2 on t1 . patient = t2 . ssn group by t1 . patient having count ( * ) > value"
        },
        {
            "utterance": "Great ! Can you update this list to include the phone number of each of these patients ?",
            "sql": "select name , phone from appointment as t1 join patient as t2 on t1 . patient = t2 . ssn group by t1 . patient having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the name of the patient who made the most recent appointment?",
        "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What was the start date of the most recent appointment ?",
            "sql": "select start from appointment order by start asc limit value"
        },
        {
            "utterance": "What is the patient associated with the appointment on 2008-04-24 10:00 ?",
            "sql": "select patient from appointment where start = value"
        },
        {
            "utterance": "Can you list the patient IDs associated with appointment IDs 93216548 and 86213939 ?",
            "sql": "select patient from appointment where appointmentid = value or appointmentid = value"
        },
        {
            "utterance": "Can you list the names associated with those patient ID 100000004 and 100000002 ?",
            "sql": "select distinct ( t1 . name ) from patient as t1 join appointment as t2 on t1 . ssn = t2 . patient where t2 . patient = value or t2 . patient = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the name of the patient who made the most recent appointment?",
        "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "When was the most recent appointment ? | do you want the most recent start or end of appointment | Start",
            "sql": "select appointmentid from appointment order by start desc limit value"
        },
        {
            "utterance": "What is the patient id of that appointment ?",
            "sql": "select patient from appointment order by start desc limit value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select t1 . name from patient as t1 join appointment as t2 on t1 . ssn = t2 . patient order by t2 . start desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the names of the physician who prescribed the highest dose?",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the physicians ?",
            "sql": "select name from physician"
        },
        {
            "utterance": "Show me the ssn of the physician named John Dorian ?",
            "sql": "select ssn from physician where name = value"
        },
        {
            "utterance": "Show me the name of the physician with employee id 2 ?",
            "sql": "select name from physician where employeeid = value"
        },
        {
            "utterance": "Show me the names of the physician who prescribed the highest dose ?",
            "sql": "select t1 . name from physician as t1 join prescribes as t2 on t1 . employeeid = t2 . physician order by t2 . dose desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of physicians whose position title contains the word 'senior'.",
        "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
    },
    "interaction": [
        {
            "utterance": "How many physicians are there in total ?",
            "sql": "select count ( * ) from physician"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from physician"
        },
        {
            "utterance": "Which of their position titles contain the word senior in it ?",
            "sql": "select position from physician where position like value"
        },
        {
            "utterance": "What is the name of that physician who has the Senior Attending Physician title ?",
            "sql": "select name from physician where position like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the names of procedures which physician John Wen was trained in.",
        "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
    },
    "interaction": [
        {
            "utterance": "What procedures is John Wen trained in ? | Do you mean the name of the procedure that John Wen is trained in ? | Yes .",
            "sql": "select t3 . name from physician as t1 join trained_in as t2 on t1 . employeeid = t2 . physician join procedures as t3 on t3 . code = t2 . treatment where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the id of the appointment with the most recent start date?",
        "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id of the appointment with the most recent start date ?",
            "sql": "select appointmentid from appointment order by start desc limit value"
        },
        {
            "utterance": "What was the end time of that appointment ?",
            "sql": "select end from appointment order by start desc limit value"
        },
        {
            "utterance": "Who was the prep nurse of that appointment ?",
            "sql": "select prepnurse from appointment order by start desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the patient who has the most recent undergoing treatment?",
        "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the patient order by the date they underwent treatment . Recent first .",
            "sql": "select patient from undergoes order by dateundergoes desc"
        },
        {
            "utterance": "Only show the first result .",
            "sql": "select patient from undergoes order by dateundergoes desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 0,
    "final": {
        "utterance": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list all the unique fault log entry ids ?",
            "sql": "select distinct fault_log_entry_id from fault_log"
        },
        {
            "utterance": "Can you count the number of unique part fault ids that belong to each unique fault log entry id , and then add those values to the table ?",
            "sql": "select fault_log_entry_id , count ( * ) from fault_log_parts group by fault_log_entry_id"
        },
        {
            "utterance": "Amazing , can you display only the entry with a fault log id of 1 as well as the description and record time for that entry with a fault log id of 1 ?",
            "sql": "select count ( * ) , * , t1 . fault_description , t1 . fault_log_entry_datetime from fault_log as t1 join fault_log_parts as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id where t1 . fault_log_entry_id = value group by t1 . fault_log_entry_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 1,
    "final": {
        "utterance": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which engineer made the least number of visits ? | Here are the id , first , and last names of the engineer who has the least number of visits . | how many visits did each engineer have ?",
            "sql": "select count ( * ) , t1 . engineer_id from maintenance_engineers as t1 join engineer_visits as t2 on t1 . engineer_id = t2 . engineer_id group by t1 . engineer_id"
        },
        {
            "utterance": "can you list the engineer id , first name , and last name of the engineer who had the least number of visits ?",
            "sql": "select t1 . engineer_id , t1 . first_name , t1 . last_name , count ( * ) from maintenance_engineers as t1 join engineer_visits as t2 on t1 . engineer_id = t2 . engineer_id group by t1 . engineer_id order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 2,
    "final": {
        "utterance": "Which kind of part has the least number of faults? List the part name.",
        "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which part has the least faults ?",
            "sql": "select t1 . part_name from parts as t1 join part_faults as t2 on t1 . part_id = t2 . part_id group by t1 . part_name order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many faults does the middle have ?",
            "sql": "select t1 . part_name , count ( * ) from parts as t1 join part_faults as t2 on t1 . part_id = t2 . part_id where t1 . part_name = value"
        },
        {
            "utterance": "What faults does the middle have ?",
            "sql": "select fault_short_name from part_faults where part_id in ( select t2 . part_id from parts as t1 join part_faults as t2 on t1 . part_id = t2 . part_id group by t1 . part_name order by count ( * ) asc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 3,
    "final": {
        "utterance": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "sql": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the skill code for skill id 1 , 2 and 3 ?",
            "sql": "select skill_id , skill_code from skills where skill_id = value or skill_id = value or skill_id = value"
        },
        {
            "utterance": "How many ids are in part_fault_id ... Tell me total number",
            "sql": "select count ( distinct part_fault_id ) from skills_required_to_fix"
        },
        {
            "utterance": "What is the skill description for skill id 3 ?",
            "sql": "select skill_description from skills where skill_id = value"
        },
        {
            "utterance": "Which skill is used in fixing the most number of faults ? List the skill id and description",
            "sql": "select t1 . skill_id , t1 . skill_description from skills as t1 join skills_required_to_fix as t2 on t1 . skill_id = t2 . skill_id group by t1 . skill_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 4,
    "final": {
        "utterance": "Which parts have more than 2 faults? Show the part name and id.",
        "sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many parts have more than 2 faults ?",
            "sql": "select count ( * ) from ( select t1 . part_name , t1 . part_id from parts as t1 join part_faults as t2 on t1 . part_id = t2 . part_id group by t1 . part_id having count ( * ) > value )"
        },
        {
            "utterance": "What are the parts with more than 2 faults ? | Here are the names of the parts with more than 2 faults | What are the name 's and id 's of the parts with more than 2 faults ?",
            "sql": "select t1 . part_name , t1 . part_id from parts as t1 join part_faults as t2 on t1 . part_id = t2 . part_id group by t1 . part_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 5,
    "final": {
        "utterance": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name"
    },
    "interaction": [
        {
            "utterance": "what is the fault status of engineer visit id 1 ?",
            "sql": "select fault_status from engineer_visits where engineer_visit_id = value"
        },
        {
            "utterance": "what is fault status of engineer id 8 ?",
            "sql": "select fault_status from engineer_visits where engineer_id = value"
        },
        {
            "utterance": "what about the other visit details of engineer id 8 ?",
            "sql": "select other_visit_details from engineer_visits where engineer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 6,
    "final": {
        "utterance": "Which gender makes up the majority of the staff?",
        "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which gender makes up the majority of the staff ?",
            "sql": "select gender from staff group by gender order by count ( * ) desc limit value"
        },
        {
            "utterance": "how many staff are gender 1 ?",
            "sql": "select count ( * ) from staff where gender = value"
        },
        {
            "utterance": "how many staff are not gender 1 ?",
            "sql": "select count ( * ) from staff where gender ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 7,
    "final": {
        "utterance": "Which assets did not incur any fault log? List the asset model.",
        "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)"
    },
    "interaction": [
        {
            "utterance": "Can you list the asset ids , the fault log entry ids and the fault descriptions ?",
            "sql": "select asset_id , fault_log_entry_id , fault_description from fault_log"
        },
        {
            "utterance": "Hmm , I want to know the asset ids that did not incur any fault log .",
            "sql": "select asset_id from assets where asset_id not in ( select asset_id from fault_log )"
        },
        {
            "utterance": "Please just list the asset model of those assets .",
            "sql": "select asset_model from assets where asset_id not in ( select asset_id from fault_log )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 8,
    "final": {
        "utterance": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many fault logs are there in total ?",
            "sql": "select count ( fault_log_entry_id ) from fault_log"
        },
        {
            "utterance": "How many of those fault logs had faulty parts ?",
            "sql": "select count ( * ) from ( select fault_log_entry_id from fault_log where fault_log_entry_id in ( select fault_log_entry_id from fault_log_parts ) )"
        },
        {
            "utterance": "What was the fault log ID with the least number of faulty parts ?",
            "sql": "select t1 . fault_log_entry_id from fault_log as t1 join fault_log_parts as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "What was its description ?",
            "sql": "select t1 . fault_log_entry_id , t1 . fault_description from fault_log as t1 join fault_log_parts as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "What was the fault log ID with the most number of faulty parts ?",
            "sql": "select t1 . fault_log_entry_id from fault_log as t1 join fault_log_parts as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What was its description ?",
            "sql": "select t1 . fault_log_entry_id , t1 . fault_description from fault_log as t1 join fault_log_parts as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How about the record time ?",
            "sql": "select t1 . fault_log_entry_id , t1 . fault_description , t1 . fault_log_entry_datetime from fault_log as t1 join fault_log_parts as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 9,
    "final": {
        "utterance": "List all every engineer's first name, last name, details and coresponding skill description.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
    },
    "interaction": [
        {
            "utterance": "What are the engineers first names ? | Do you mean the first name of all the engineers ? | Yes please",
            "sql": "select first_name from maintenance_engineers"
        },
        {
            "utterance": "I want to know all the engineers corresponding skill description ? | Do you mean the corresponding skill description for all the engineers ? | Yes please",
            "sql": "select t3 . skill_description from maintenance_engineers as t1 join engineer_skills as t2 on t1 . engineer_id = t2 . engineer_id join skills as t3 on t2 . skill_id = t3 . skill_id"
        },
        {
            "utterance": "What are the details for all the engineers ? | Do you mean the other details for all the engineers ? | Yes please",
            "sql": "select other_details from maintenance_engineers"
        },
        {
            "utterance": "Lastly , i will like to know the last name of all the engineers ?",
            "sql": "select last_name from maintenance_engineers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 10,
    "final": {
        "utterance": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show ID and first and last name of Engineer who has visited the most times .",
            "sql": "select t1 . engineer_id , t1 . first_name , t1 . last_name from maintenance_engineers as t1 join engineer_visits as t2 on t1 . engineer_id = t2 . engineer_id group by t1 . engineer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the fault status of Engineer with the first name Etha ?",
            "sql": "select t2 . fault_status from maintenance_engineers as t1 join engineer_visits as t2 on t1 . engineer_id = t2 . engineer_id where t1 . first_name = value"
        },
        {
            "utterance": "What is the visit start DateTime of Engineer with the first name Etha ?",
            "sql": "select t2 . visit_start_datetime from maintenance_engineers as t1 join engineer_visits as t2 on t1 . engineer_id = t2 . engineer_id where t1 . first_name = value"
        },
        {
            "utterance": "What is the visit end datetime of Engineer with the first name Etha ?",
            "sql": "select t2 . visit_end_datetime from maintenance_engineers as t1 join engineer_visits as t2 on t1 . engineer_id = t2 . engineer_id where t1 . first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 11,
    "final": {
        "utterance": "When was the first asset acquired?",
        "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What assets have been aquired ? | What kind of information about the assets do you want me to return ? | Can you tell me the date each asset was aquired ?",
            "sql": "select asset_acquired_date from assets"
        },
        {
            "utterance": "Now i would like to know what the earliest date is ?",
            "sql": "select asset_acquired_date from assets order by asset_acquired_date asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 12,
    "final": {
        "utterance": "Which part has the least chargeable amount? List the part id and amount.",
        "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the chargeable amount for part id 1 ?",
            "sql": "select chargeable_amount from parts where part_id = value"
        },
        {
            "utterance": "Tell me the part name of the part id 3 ?",
            "sql": "select part_name from parts where part_id = value"
        },
        {
            "utterance": "Tell me the part name of the part id 2 ?",
            "sql": "select part_name from parts where part_id = value"
        },
        {
            "utterance": "Which part has the least chargeable amount ? List the part id and amount .",
            "sql": "select part_id , chargeable_amount from parts order by chargeable_amount asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 13,
    "final": {
        "utterance": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "sql": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many engineer visits are required at most for a single fault log ? List the number and the log entry id .",
            "sql": "select count ( * ) , t1 . fault_log_entry_id from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the engineer visit id of that fault log entry id ?",
            "sql": "select t2 . engineer_visit_id from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id where t2 . fault_log_entry_id = ( select t1 . fault_log_entry_id from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What is the contact staff id for that ?",
            "sql": "select t2 . contact_staff_id from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id where t2 . fault_log_entry_id = ( select t1 . fault_log_entry_id from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What is the fault status of that ?",
            "sql": "select t2 . fault_status from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id where t2 . fault_log_entry_id = ( select t1 . fault_log_entry_id from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What 's the fault description for that ?",
            "sql": "select t1 . fault_description from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Tell me what the other fault details for that are , please ?",
            "sql": "select t1 . other_fault_details from fault_log as t1 join engineer_visits as t2 on t1 . fault_log_entry_id = t2 . fault_log_entry_id group by t1 . fault_log_entry_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 14,
    "final": {
        "utterance": "How many assets does each third party company supply? List the count and the company id.",
        "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id"
    },
    "interaction": [
        {
            "utterance": "How many assets does each third party company supply ? | Here is the result table of third-party companies and the number of ASSETS they held . For EXAMPLE , COMPANY 1 HELD 1 ASSET . | How many total assets are there ?",
            "sql": "select count ( * ) from assets"
        },
        {
            "utterance": "How many third party companies are there ?",
            "sql": "select count ( * ) from third_party_companies"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 15,
    "final": {
        "utterance": "Which part fault requires the most number of skills to fix? List part id and name.",
        "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest number of skills needed to fix a part fault ? | what did you want to get about the highest number of skills needed to fix a part fault | What is the name of the part that requires the most amount of skills to fix ?",
            "sql": "select t1 . part_name from parts as t1 join part_faults as t2 on t1 . part_id = t2 . part_id join skills_required_to_fix as t3 on t2 . part_fault_id = t3 . part_fault_id group by t1 . part_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many skills does it need ?",
            "sql": "select count ( * ) from parts as t1 join part_faults as t2 on t1 . part_id = t2 . part_id join skills_required_to_fix as t3 on t2 . part_fault_id = t3 . part_fault_id group by t1 . part_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 16,
    "final": {
        "utterance": "How many assets can each parts be used in? List the part name and the number.",
        "sql": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name"
    },
    "interaction": [
        {
            "utterance": "How many assets can each part be used in ? | Here is the result table of the part names and the number of assets that each of them can use . For example , the middle part can use 5 assets . | what is the part ID 's for these ?",
            "sql": "select t1 . part_id from parts as t1 join asset_parts as t2 on t1 . part_id = t2 . part_id group by t1 . part_name"
        },
        {
            "utterance": "and the chargeable amount for these ?",
            "sql": "select chargeable_amount from parts as t1 join asset_parts as t2 on t1 . part_id = t2 . part_id group by t1 . part_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 17,
    "final": {
        "utterance": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "How many assets have fault logs ?",
            "sql": "select count ( * ) from ( select * from assets as t1 join fault_log as t2 on t1 . asset_id = t2 . asset_id group by t1 . asset_id having count ( * ) > = value )"
        },
        {
            "utterance": "How many of those 9 assets have 2 parts ?",
            "sql": "select count ( * ) from ( select t1 . asset_id , t1 . asset_details from assets as t1 join asset_parts as t2 on t1 . asset_id = t2 . asset_id group by t1 . asset_id having count ( * ) = value intersect select t1 . asset_id , t1 . asset_details from assets as t1 join fault_log as t2 on t1 . asset_id = t2 . asset_id group by t1 . asset_id having count ( * ) > = value )"
        },
        {
            "utterance": "Out of those 2 which has less than 2 fault logs ?",
            "sql": "select t1 . asset_id , t1 . asset_details from assets as t1 join asset_parts as t2 on t1 . asset_id = t2 . asset_id group by t1 . asset_id having count ( * ) = value intersect select t1 . asset_id , t1 . asset_details from assets as t1 join fault_log as t2 on t1 . asset_id = t2 . asset_id group by t1 . asset_id having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 18,
    "final": {
        "utterance": "Which part has the least chargeable amount? List the part id and amount.",
        "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi ! Can you show me a list of all of the product part names ?",
            "sql": "select part_name from parts"
        },
        {
            "utterance": "Can you now show me the list of all part IDs ?",
            "sql": "select part_id from parts"
        },
        {
            "utterance": "Thanks ! Can you please list the part id and the corresponding price of the part with the lowest chargeable amount ? | We do n't have price . Do you mean want the part ids and corresponding chargeable amount of the part with the lowest chargeable amount ? | I 'm sorry , yes that is what I meant . The one with the lower chargeable amount !",
            "sql": "select part_id , chargeable_amount from parts order by chargeable_amount asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 19,
    "final": {
        "utterance": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi ! Which engineer has visited the most times ? | What information about the engineer you want ? | Which engineer id has visited the most ?",
            "sql": "select t1 . engineer_id from maintenance_engineers as t1 join engineer_visits as t2 group by t1 . engineer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is that engineer 's full name , please ?",
            "sql": "select t1 . engineer_id , t1 . first_name , t1 . last_name from maintenance_engineers as t1 join engineer_visits as t2 group by t1 . engineer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are all of her visit start datetimes and visit end datetimes ?",
            "sql": "select visit_start_datetime , visit_end_datetime from engineer_visits where engineer_id = ( select t1 . engineer_id from maintenance_engineers as t1 join engineer_visits as t2 group by t1 . engineer_id order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 20,
    "final": {
        "utterance": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "can you show me companies name ?",
            "sql": "select company_name from third_party_companies"
        },
        {
            "utterance": "can you show me Dooley and Sons 's address ?",
            "sql": "select company_address from third_party_companies where company_name = value"
        },
        {
            "utterance": "what is the engineer 's first name that starting with 'E ' ?",
            "sql": "select first_name from maintenance_engineers where first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 21,
    "final": {
        "utterance": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"
    },
    "interaction": [
        {
            "utterance": "What are all the contract ids",
            "sql": "select maintenance_contract_id from maintenance_contracts"
        },
        {
            "utterance": "Can I also get the numbers of assets for each of these contracts",
            "sql": "select t1 . maintenance_contract_id , t2 . asset_id from maintenance_contracts as t1 join assets as t2 on t1 . maintenance_contract_id = t2 . maintenance_contract_id"
        },
        {
            "utterance": "What I meant was the asset counts for each of these contracts",
            "sql": "select count ( * ) , t1 . maintenance_contract_id from maintenance_contracts as t1 join assets as t2 on t1 . maintenance_contract_id = t2 . maintenance_contract_id group by t1 . maintenance_contract_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 22,
    "final": {
        "utterance": "Which company started the earliest the maintenance contract? Show the company name.",
        "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the date of the earliest contract ?",
            "sql": "select t2 . contract_start_date from third_party_companies as t1 join maintenance_contracts as t2 on t1 . company_id = t2 . maintenance_contract_company_id order by t2 . contract_start_date asc limit value"
        },
        {
            "utterance": "and which contract id is associated with that contract",
            "sql": "select t2 . maintenance_contract_id from third_party_companies as t1 join maintenance_contracts as t2 on t1 . company_id = t2 . maintenance_contract_company_id order by t2 . contract_start_date asc limit value"
        },
        {
            "utterance": "and what is the company name associated with ID 9 ?",
            "sql": "select t1 . company_name from third_party_companies as t1 join maintenance_contracts as t2 on t1 . company_id = t2 . maintenance_contract_company_id where t2 . maintenance_contract_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 23,
    "final": {
        "utterance": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "Which assets have 2 parts and have less than 2 fault logs ? List the asset id and detail .",
            "sql": "select t1 . asset_id , t1 . asset_details from assets as t1 join asset_parts as t2 on t1 . asset_id = t2 . asset_id group by t1 . asset_id having count ( * ) = value intersect select t1 . asset_id , t1 . asset_details from assets as t1 join fault_log as t2 on t1 . asset_id = t2 . asset_id group by t1 . asset_id having count ( * ) < value"
        },
        {
            "utterance": "What is the asset make and asset model for asset id 2 ?",
            "sql": "select asset_make , asset_model from assets where asset_id = value"
        },
        {
            "utterance": "What are the asset acquired date and asset disposed date for asset id 2 ?",
            "sql": "select asset_acquired_date , asset_disposed_date from assets where asset_id = value"
        },
        {
            "utterance": "How many other asset details are there labeled in Bad condition ?",
            "sql": "select count ( * ) from assets where other_asset_details = value"
        },
        {
            "utterance": "What is the maintenance contract id and supplier company id for asset id 2 ?",
            "sql": "select maintenance_contract_id , supplier_company_id from assets where asset_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 24,
    "final": {
        "utterance": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "sql": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
    },
    "interaction": [
        {
            "utterance": "how many skills are presented on the table",
            "sql": "select count ( * ) from skills"
        },
        {
            "utterance": "show all the skill descriptions .",
            "sql": "select skill_description from skills"
        },
        {
            "utterance": "list out the fault short names",
            "sql": "select fault_short_name from part_faults"
        },
        {
            "utterance": "what is the skill code of Mechanical",
            "sql": "select skill_code from skills where skill_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 25,
    "final": {
        "utterance": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "sql": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id"
    },
    "interaction": [
        {
            "utterance": "Have many engineers that were contacted by each manager ?",
            "sql": "select count ( t3 . first_name ) from staff as t1 join engineer_visits as t2 on t1 . staff_id = t2 . contact_staff_id join maintenance_engineers as t3 on t2 . engineer_id = t3 . engineer_id"
        },
        {
            "utterance": "Thank you . Can you please tell me the name of the engineer that was contacted by each manager ? | Of course . First or Last name ? | First and Last name , please .",
            "sql": "select t3 . first_name , t3 . last_name from staff as t1 join engineer_visits as t2 on t1 . staff_id = t2 . contact_staff_id join maintenance_engineers as t3 on t2 . engineer_id = t3 . engineer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 26,
    "final": {
        "utterance": "Which gender makes up the majority of the staff?",
        "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many people are in the staff ?",
            "sql": "select count ( * ) from staff"
        },
        {
            "utterance": "Great , what is the most common name ?",
            "sql": "select staff_name from staff group by staff_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about gender ?",
            "sql": "select gender from staff group by gender order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of tracks which are in both Movies and music playlists.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "How many trucks are in both movies and musical playlists . | Did you mean to ask for the number of tracks in both movies and music playlists ? | yes",
            "sql": "select count ( * ) from ( select t1 . name from tracks as t1 join playlist_tracks as t2 on t1 . id = t2 . track_id join playlists as t3 on t2 . playlist_id = t3 . id where t3 . name = value intersect select t1 . name from tracks as t1 join playlist_tracks as t2 on t1 . id = t2 . track_id join playlists as t3 on t2 . playlist_id = t3 . id where t3 . name = value )"
        },
        {
            "utterance": "who composed For Those About To Rock ( We Salute You ) ?",
            "sql": "select composer from tracks where name = value"
        },
        {
            "utterance": "How long is it ?",
            "sql": "select milliseconds from tracks where name = value"
        },
        {
            "utterance": "Who wrote Fast As a Shark",
            "sql": "select composer from tracks where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of all tracks in the playlists of Movies.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    "interaction": [
        {
            "utterance": "What are the names of the playlists ? Available is defined as able to be used or obtained ; at someone 's disposal",
            "sql": "select name from playlists"
        },
        {
            "utterance": "How many tracks are in the playlist `` movies '' ?",
            "sql": "select count ( * ) from tracks as t1 join playlist_tracks as t2 on t1 . id = t2 . track_id join playlists as t3 on t3 . id = t2 . playlist_id where t3 . name = value"
        },
        {
            "utterance": "Please list the name ( s ) of the tracks in the playlist `` Movies '' .",
            "sql": "select t1 . name from tracks as t1 join playlist_tracks as t2 on t1 . id = t2 . track_id join playlists as t3 on t3 . id = t2 . playlist_id where t3 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many customers does Steve Johnson support?",
        "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the employees ? | Do you want first name or last name ? | First name please .",
            "sql": "select first_name from employees"
        },
        {
            "utterance": "How about their last names ?",
            "sql": "select last_name from employees"
        },
        {
            "utterance": "How many last names start with the letter J ?",
            "sql": "select count ( * ) from employees where last_name like value"
        },
        {
            "utterance": "What is that person 's first name ?",
            "sql": "select first_name from employees where last_name like value"
        },
        {
            "utterance": "Who are the customers that Steve supports ? | This is the information for all the customers that Steve Johnson supports | How many customers does he support ?",
            "sql": "select count ( * ) from employees as t1 join customers as t2 on t2 . support_rep_id = t1 . id where t1 . first_name = value and t1 . last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of tracks which are in both Movies and music playlists.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "How many tracks in this table ?",
            "sql": "select count ( * ) from tracks"
        },
        {
            "utterance": "How many playlists in this table ?",
            "sql": "select count ( id ) from playlists"
        },
        {
            "utterance": "Find average unit price ?",
            "sql": "select avg ( unit_price ) from tracks"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the customers first and last name of 10 least expensive invoices.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "Display the 10 least expensive invoices | Would you like a list of the id 's of these invoices ? | No .",
            "sql": "select t2 . invoice_date from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id order by total limit value"
        },
        {
            "utterance": "Please list the first and last names of each customer on this list .",
            "sql": "select t1 . first_name , t1 . last_name from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id order by total limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List title of albums have the number of tracks greater than 10.",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
    },
    "interaction": [
        {
            "utterance": "May I know the album names and ids , and the number of tracks they have ?",
            "sql": "select t1 . title , t1 . id , count ( t1 . id ) from albums as t1 join tracks as t2 on t1 . id = t2 . album_id group by t1 . id"
        },
        {
            "utterance": "Hmm , can you list the album names and the artist ids ?",
            "sql": "select title , artist_id from albums"
        },
        {
            "utterance": "Can you also list the title of albums that have the number of tracks greater than 10 ?",
            "sql": "select t1 . title from albums as t1 join tracks as t2 on t1 . id = t2 . album_id group by t1 . id having count ( t1 . id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What country does Roberto Almeida live?",
        "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    "interaction": [
        {
            "utterance": "How many countries are our customers located in ?",
            "sql": "select count ( distinct country ) from customers"
        },
        {
            "utterance": "How many customers do we have with the last name Almeida ?",
            "sql": "select count ( * ) from customers where last_name = value"
        },
        {
            "utterance": "Show me the country where Roberto Almeida is located",
            "sql": "select country from customers where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is title of album which track Balls to the Wall belongs to?",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"
    },
    "interaction": [
        {
            "utterance": "What is title of album which track Balls to the Wall belong to ?",
            "sql": "select t1 . title from albums as t1 join tracks as t2 on t1 . id = t2 . genre_id where t2 . name = value"
        },
        {
            "utterance": "Hmmm . What is title of album which track Fast as a Shark belong to ?",
            "sql": "select t1 . title from albums as t1 join tracks as t2 on t1 . id = t2 . genre_id where t2 . name = value"
        },
        {
            "utterance": "What is title of album which track For Those About To Rock ( We Salute You ) belong to ?",
            "sql": "select t1 . title from albums as t1 join tracks as t2 on t1 . id = t2 . genre_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Eduardo Martins is a customer at which company?",
        "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
    },
    "interaction": [
        {
            "utterance": "Check whether Mr. Eduardo Martin is a customer or not ? | Great . Which is the first name ? | Eduardo .",
            "sql": "select * from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "Of which company is Mr. Eduardo Martins a customer ?",
            "sql": "select company from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "In which city is the company 'Woodstock Discos ' located ?",
            "sql": "select city from customers where company = value"
        },
        {
            "utterance": "what is the contact number of 'Woodstock discos ' company ? | The phone of the customer of the company 'Woodstock Discos ' is +55 ( 11 ) 3033-5446 . | What is the contact number of Mr. Eduardo Martins ?",
            "sql": "select phone from customers where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the title, phone and hire date of Nancy Edwards?",
        "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "What is the title , phone and hire date of Nancy Edwards ?",
            "sql": "select title , phone , hire_date from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "what is the total number of employees ?",
            "sql": "select count ( * ) from employees"
        },
        {
            "utterance": "what is the first name of gentral manager ? | I can not find `` gentral manager '' in the table . Did you mean general manager ? | yes that is the general manager ?",
            "sql": "select first_name from employees where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many employees have the job title Manager ?",
            "sql": "select count ( * ) from employees where title like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 11,
    "final": {
        "utterance": "find the full name of employees who report to Nancy Edwards?",
        "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "How many employees report to Nancy Edwards ?",
            "sql": "select count ( * ) from employees as t1 join employees as t2 on t1 . id = t2 . reports_to where t1 . first_name = value and t1 . last_name = value"
        },
        {
            "utterance": "What are their names ? | The table shows the first and last names of the employees who report to Nancy Edward . | Who does not report to Nancy Edwards ?",
            "sql": "select t2 . first_name , t2 . last_name from employees as t1 join employees as t2 on t1 . id = t2 . reports_to where t1 . first_name ! = value and t1 . last_name ! = value"
        },
        {
            "utterance": "Who does Nancy Edwards report to ? | The first and last names of the employee whom Nancy Edwards reports to is Andrew Adams . | Who does Andrew Adams report to ?",
            "sql": "select t1 . first_name , t1 . last_name from employees as t1 join employees as t2 on t1 . id = t2 . reports_to where t2 . first_name = value and t2 . last_name = value"
        },
        {
            "utterance": "Who else reports to Andrew Adams ?",
            "sql": "select t2 . first_name , t2 . last_name from employees as t1 join employees as t2 on t1 . id = t2 . reports_to where t1 . first_name = value and t1 . last_name = value and t2 . first_name ! = value and t2 . last_name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 12,
    "final": {
        "utterance": "List total amount of  invoice from Chicago, IL.",
        "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    "interaction": [
        {
            "utterance": "Show the billing address with the highest amount of invoice ?",
            "sql": "select billing_address from invoices order by total desc limit value"
        },
        {
            "utterance": "Show the total amount of invoice from chicago , IL ?",
            "sql": "select sum ( total ) from invoices where billing_city = value and billing_state = value"
        },
        {
            "utterance": "Show the billing country with the total amount of invoice 3.96 ?",
            "sql": "select billing_country from invoices where total = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "what is the billing address of germany",
            "sql": "select billing_address from invoices where billing_country = value"
        },
        {
            "utterance": "what is the invoice date of customer id 2",
            "sql": "select invoice_date from invoices where customer_id = value"
        },
        {
            "utterance": "what is the billing city of norway",
            "sql": "select distinct ( billing_city ) from invoices where billing_country = value"
        },
        {
            "utterance": "what is the last name of state sp",
            "sql": "select last_name from customers where state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 14,
    "final": {
        "utterance": "How many orders does Lucas Mancini has?",
        "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "what are all the companies on the table | Do you mean the companies that customers work ? | exactly",
            "sql": "select company from customers where company ! = value"
        },
        {
            "utterance": "actually i mean highest total amount",
            "sql": "select total from invoices order by total desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 15,
    "final": {
        "utterance": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"
    },
    "interaction": [
        {
            "utterance": "What tracks belong to genre Rock ?",
            "sql": "select * from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . name = value"
        },
        {
            "utterance": "What are the names of tracks that are Rock or MPEG media type ?",
            "sql": "select t2 . name from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id join media_types as t3 on t3 . id = t2 . media_type_id where t1 . name = value or t3 . name = value"
        },
        {
            "utterance": "What are the names of tracks that belong to the genre Rock and are media type MPEG audio file ?",
            "sql": "select t2 . name from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id join media_types as t3 on t3 . id = t2 . media_type_id where t1 . name = value or t3 . name = value"
        },
        {
            "utterance": "How many distinct media types are Rock genre ?",
            "sql": "select count ( distinct t2 . media_type_id ) from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id join media_types as t3 on t3 . id = t2 . media_type_id where t1 . name = value"
        },
        {
            "utterance": "What is the most common media type for the Rock genre ?",
            "sql": "select * from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id join media_types as t3 on t3 . id = t2 . media_type_id where t1 . name = value group by t3 . id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the full name of employee who supported the most number of customers.",
        "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the employee that supported the most number of customers ?",
            "sql": "select t1 . first_name , t1 . last_name from employees as t1 join customers as t2 on t1 . id = t2 . support_rep_id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is their id ?",
            "sql": "select t1 . id from employees as t1 join customers as t2 on t1 . id = t2 . support_rep_id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is their address ?",
            "sql": "select t1 . address from employees as t1 join customers as t2 on t1 . id = t2 . support_rep_id group by t1 . id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many albums does Billy Cobham has?",
        "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    "interaction": [
        {
            "utterance": "Show the albums of Billy Cobham .",
            "sql": "select * from albums as t1 join artists as t2 on t1 . artist_id = t2 . id where t2 . name = value"
        },
        {
            "utterance": "Count the albums of Billy Colham .",
            "sql": "select count ( * ) from albums as t1 join artists as t2 on t1 . artist_id = t2 . id where t2 . name = value"
        },
        {
            "utterance": "Name of the album .",
            "sql": "select t1 . title from albums as t1 join artists as t2 on t1 . artist_id = t2 . id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "What are all the tracks ?",
            "sql": "select * from tracks"
        },
        {
            "utterance": "Which tracks are on the Movies Playlist ?",
            "sql": "select t1 . name from tracks as t1 join playlist_tracks as t2 on t1 . id = t2 . track_id join playlists as t3 on t2 . playlist_id = t3 . id where t3 . name = value"
        },
        {
            "utterance": "Which tracks are not in the music playlist ?",
            "sql": "select t1 . name from tracks as t1 join playlist_tracks as t2 on t1 . id = t2 . track_id join playlists as t3 on t2 . playlist_id = t3 . id where t3 . name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 19,
    "final": {
        "utterance": "List name of all tracks in Balls to the Wall.",
        "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
    },
    "interaction": [
        {
            "utterance": "what is the id of balls to the walls",
            "sql": "select distinct t2 . id from albums as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . title = value"
        },
        {
            "utterance": "what is the name of all tracks in balls to wall",
            "sql": "select t2 . name from albums as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . title = value"
        },
        {
            "utterance": "name the composer of balls to wall",
            "sql": "select distinct t2 . composer from albums as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 20,
    "final": {
        "utterance": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
    },
    "interaction": [
        {
            "utterance": "What are the names of the 8 countries with the greatest gross invoice size ? | Can you give details about the countries ? Do you mean billing country ? | Yes",
            "sql": "select billing_country from invoices group by billing_country order by sum ( total ) desc limit value"
        },
        {
            "utterance": "Can you tell me which billing city has the letter `` O '' in its name please ?",
            "sql": "select billing_city from invoices where billing_city like value"
        },
        {
            "utterance": "Can you tell me the billing addresses located in the billing city Boston ?",
            "sql": "select distinct billing_address from invoices where billing_city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "Find me the 5 customers who most recently purchased something . | What information about the customer do you need ? | I need the first name and last name please",
            "sql": "select t1 . first_name , t1 . last_name from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id order by t2 . invoice_date desc limit value"
        },
        {
            "utterance": "How about their cities and states ?",
            "sql": "select t1 . first_name , t1 . last_name , t1 . city , t1 . state from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id order by t2 . invoice_date desc limit value"
        },
        {
            "utterance": "Can you also give me the countries ?",
            "sql": "select t1 . first_name , t1 . last_name , t1 . city , t1 . state , t1 . country from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id order by t2 . invoice_date desc limit value"
        },
        {
            "utterance": "How about their e-mail addresses ?",
            "sql": "select t1 . email from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id order by t2 . invoice_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 22,
    "final": {
        "utterance": "List title of albums have the number of tracks greater than 10.",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
    },
    "interaction": [
        {
            "utterance": "How many albums are there",
            "sql": "select count ( * ) from albums"
        },
        {
            "utterance": "How many have fewer than ten tracks ?",
            "sql": "select count ( * ) from ( select count ( * ) from albums as t1 join tracks as t2 on t1 . id = t2 . album_id group by t1 . id having count ( t1 . id ) < value )"
        },
        {
            "utterance": "How many albums are there other than those ?",
            "sql": "select count ( * ) from ( select * from albums as t1 join tracks as t2 on t1 . id = t2 . album_id group by t1 . id having count ( t1 . id ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List all tracks bought by customer Daan Peeters.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    "interaction": [
        {
            "utterance": "what is the billing address of germany | Billing address is associated with each customer , not country . Please clarify your question . | what is the address of state sp",
            "sql": "select address from customers where state = value"
        },
        {
            "utterance": "what is the country of support rep id 5",
            "sql": "select country from customers where support_rep_id = value"
        },
        {
            "utterance": "what is the name of album id 3",
            "sql": "select name from tracks where album_id = value"
        },
        {
            "utterance": "what is the unit price of track id 6",
            "sql": "select unit_price from tracks where id = value"
        },
        {
            "utterance": "what is the composer of genre id 1",
            "sql": "select composer from tracks where genre_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 24,
    "final": {
        "utterance": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "What are the top 5 genres ? | Do you mean sort by the id number ? | Yes please",
            "sql": "select id , name from genres order by id desc limit value"
        },
        {
            "utterance": "Could you please provide the total tracks on each top 5 genres by number of tracks ?",
            "sql": "select t1 . id , count ( * ) from genres as t1 join tracks as t2 on t2 . genre_id = t1 . id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Do you have the best composer of each top 5 genre by number of tracks ?",
            "sql": "select t1 . id , t2 . composer from genres as t1 join tracks as t2 on t2 . genre_id = t1 . id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Overall , do you have the best ranked composer ? | I do not quite understand what you mean . Do you mean rank by milliseconds ? | Yes please .",
            "sql": "select composer from tracks order by milliseconds"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is employee Nancy Edwards's phone number?",
        "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "What is employee named Nancy Andrews phone number ?",
            "sql": "select phone from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "OK. What is it for Nancy Edwards ?",
            "sql": "select phone from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "Great ! And her fax number ?",
            "sql": "select fax from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "Okay . What is her job title ?",
            "sql": "select title from employees where first_name = value and last_name = value"
        },
        {
            "utterance": "How many employees have that job title ?",
            "sql": "select count ( * ) from employees where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the total amount of money spent by Lucas Mancini?",
        "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    "interaction": [
        {
            "utterance": "Can you tell me how many different purchases Lucas Mancini has made ?",
            "sql": "select count ( * ) from invoices as t2 join customers as t1 on t1 . id = t2 . customer_id where t1 . first_name = value and t1 . last_name = value"
        },
        {
            "utterance": "Great ! How much total money has Lucas Mancini spent in total ?",
            "sql": "select sum ( t2 . total ) from customers as t1 join invoices as t2 on t1 . id = t2 . customer_id where t1 . first_name = value and t1 . last_name = value"
        },
        {
            "utterance": "What was the most recent associated invoice date for Lucas Mancini ?",
            "sql": "select t2 . invoice_date from customers as t1 join invoices as t2 on t1 . id = t2 . customer_id where t1 . first_name = value and t1 . last_name = value order by t2 . invoice_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 27,
    "final": {
        "utterance": "List the number of invoices from the US, grouped by state.",
        "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"
    },
    "interaction": [
        {
            "utterance": "How many invoices are from the US ?",
            "sql": "select count ( * ) from invoices where billing_country = value"
        },
        {
            "utterance": "Could you list them grouped by state ?",
            "sql": "select billing_state , count ( * ) from invoices where billing_country = value group by billing_state"
        },
        {
            "utterance": "Could you list the number of invoices grouped by country ?",
            "sql": "select billing_country , count ( * ) from invoices group by billing_country"
        },
        {
            "utterance": "Can you list the number of invoices from the US grouped by billing city ?",
            "sql": "select billing_city , count ( * ) from invoices where billing_country = value group by billing_city"
        },
        {
            "utterance": "Can you list the number of invoices from all countries except the US grouped by billing city ?",
            "sql": "select billing_city , count ( * ) from invoices where billing_country ! = value group by billing_city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Eduardo Martins is a customer at which company?",
        "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
    },
    "interaction": [
        {
            "utterance": "What is country of origin of Eduardo Martins ? | The country of the customer Eduardo Martins is Brazil . | Of which company is he a customer of ?",
            "sql": "select company from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "And what is his phone number ?",
            "sql": "select phone from customers where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is Astrid Gruber's email and phone number?",
        "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
    },
    "interaction": [
        {
            "utterance": "Address of Lu\u00eds K\u00f6hler ? | Is Lu\u00eds K\u00f6hler full name ? | Yes",
            "sql": "select address from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "Provide address of ID 1 ?",
            "sql": "select address from customers where id = value"
        },
        {
            "utterance": "Provide email and phone number of Astrid Gruber 's ?",
            "sql": "select email , phone from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "Postal code of ID 3 ?",
            "sql": "select postal_code from customers where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 30,
    "final": {
        "utterance": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "What are the average invoice sizes of each country ?",
            "sql": "select billing_country , avg ( total ) from invoices group by billing_country"
        },
        {
            "utterance": "What was the country that had the highest invoice size ?",
            "sql": "select billing_country from invoices order by total desc limit value"
        },
        {
            "utterance": "What are the top 10 countries with the highest invoice size along with their amount ?",
            "sql": "select billing_country , total from invoices order by total desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "how many orders are there",
            "sql": "select count ( * ) from invoices"
        },
        {
            "utterance": "find the ten customers with the most total orders",
            "sql": "select * from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "how many orders do each of them have ?",
            "sql": "select count ( * ) from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "how many customers are there",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "how many customers have 7 or more orders",
            "sql": "select count ( * ) from ( select * from customers as t1 join invoices as t2 on t2 . customer_id = t1 . id group by t1 . id having count ( * ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 32,
    "final": {
        "utterance": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "Please show me a list of the top 5 countries by number of invoices . List country name .",
            "sql": "select billing_country from invoices group by billing_country order by count ( * ) desc limit value"
        },
        {
            "utterance": "OK ! Can you also show me the number of invoices for these 5 countries .",
            "sql": "select billing_country , count ( * ) from invoices group by billing_country order by count ( * ) desc limit value"
        },
        {
            "utterance": "May I also see the names of bottom 5 countries by number of invoices . Please show me country names and number of invoices .",
            "sql": "select billing_country , count ( * ) from invoices group by billing_country order by count ( * ) limit value"
        },
        {
            "utterance": "Can you show me the postal codes for these countries .",
            "sql": "select billing_country , billing_postal_code from invoices group by billing_country order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the name of tracks whose genre is Rock?",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    "interaction": [
        {
            "utterance": "How many tracks are in the Rock genre ?",
            "sql": "select count ( t2 . id ) from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . name = value"
        },
        {
            "utterance": "Show me the name of tracks in the Rock genre .",
            "sql": "select t2 . name from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . name = value"
        },
        {
            "utterance": "What is the average unit price for tracks in the Rock genre ?",
            "sql": "select avg ( t2 . unit_price ) from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . name = value"
        },
        {
            "utterance": "How many tracks are in the Jazz genre ?",
            "sql": "select count ( t2 . name ) from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . name = value"
        },
        {
            "utterance": "How many milliseconds is the Rock genre track Balls to the Wall ?",
            "sql": "select t2 . milliseconds from genres as t1 join tracks as t2 on t1 . id = t2 . genre_id where t1 . name = value and t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 34,
    "final": {
        "utterance": "List the name of albums that are released by aritist whose name has 'Led'",
        "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"
    },
    "interaction": [
        {
            "utterance": "How many released albums are there ?",
            "sql": "select count ( * ) from albums"
        },
        {
            "utterance": "How many artists have released albums ?",
            "sql": "select count ( * ) from artists where id in ( select artist_id from albums )"
        },
        {
            "utterance": "how many albums are released by artist with 'Led ' in their name ?",
            "sql": "select count ( * ) from artists as t1 join albums as t2 on t1 . id = t2 . artist_id where t1 . name like value"
        },
        {
            "utterance": "Show me the names of those albums",
            "sql": "select t2 . title from artists as t1 join albums as t2 on t1 . id = t2 . artist_id where t1 . name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 35,
    "final": {
        "utterance": "List the name of all tracks in the playlists of Movies.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    "interaction": [
        {
            "utterance": "Can you please list the names of all tracks in the playlists of Movies ?",
            "sql": "select t1 . name from tracks as t1 join playlist_tracks as t2 on t1 . id = t2 . track_id join playlists as t3 on t3 . id = t2 . playlist_id where t3 . name = value"
        },
        {
            "utterance": "What is the ID of Movies ?",
            "sql": "select id from playlists where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the number of employees whose title is IT Staff from each city?",
        "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "How many employees are IT Staff ?",
            "sql": "select count ( * ) from employees where title = value"
        },
        {
            "utterance": "How many are in Calgary ?",
            "sql": "select count ( * ) from employees where title = value and city = value"
        },
        {
            "utterance": "how about in Edmonton ?",
            "sql": "select count ( * ) from employees where title = value and city = value"
        },
        {
            "utterance": "What city are the 2 employees in ? | You mean the 2 employees with title `` IT Staff '' ? | yes , the two employees with the title of IT Staff .",
            "sql": "select distinct city from employees where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the address of employee Nancy Edwards?",
        "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "What are the addresses of the employees ? | Do you mean all of the employees ? | Yes",
            "sql": "select address from employees"
        },
        {
            "utterance": "Which cities are they from ?",
            "sql": "select city from employees"
        },
        {
            "utterance": "What are their emails ?",
            "sql": "select email from employees"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What country does Roberto Almeida live?",
        "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    "interaction": [
        {
            "utterance": "What county does Roberto Almeida live in ?",
            "sql": "select country from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What state does he live in ?",
            "sql": "select state from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What is his address , please ?",
            "sql": "select address from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What company does he work for ?",
            "sql": "select company from customers where first_name = value and last_name = value"
        },
        {
            "utterance": "What are the names of the other people who work for that company ?",
            "sql": "select first_name , last_name from customers where company = value and first_name ! = value and last_name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 39,
    "final": {
        "utterance": "List total amount of  invoice from Chicago, IL.",
        "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    "interaction": [
        {
            "utterance": "How many invoices in this table ?",
            "sql": "select count ( * ) from invoices"
        },
        {
            "utterance": "List total amount of invoice from Germany ?",
            "sql": "select sum ( total ) from invoices where billing_country = value"
        },
        {
            "utterance": "List total amount of invoices from Norway ?",
            "sql": "select sum ( total ) from invoices where billing_country = value"
        },
        {
            "utterance": "How many billing countries in this invoice ? | Do you mean the types of billing countries in this invoice | Yes .",
            "sql": "select count ( distinct billing_country ) from invoices"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 40,
    "final": {
        "utterance": "List the state in the US with the most invoices.",
        "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Hello . Can you give me the state in the US with most invoices ?",
            "sql": "select billing_state from invoices where billing_country = value group by billing_state order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you give me the billing cities for these invoices ? | here are the billing cities of the invoices from the state in the USA with the most invoices | How about postal codes for these invoices ?",
            "sql": "select distinct billing_postal_code from invoices where billing_state = ( select billing_state from invoices where billing_country = value group by billing_state order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Can you give me the billing dates as well ? | do you mean the date of invoice ? | Yes , date of invoice please",
            "sql": "select distinct invoice_date from invoices where billing_state = ( select billing_state from invoices where billing_country = value group by billing_state order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 41,
    "final": {
        "utterance": "List all tracks bought by customer Daan Peeters.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    "interaction": [
        {
            "utterance": "List all tracks bought by customer Daan Peeters",
            "sql": "select t1 . name from tracks as t1 join invoice_lines as t2 on t1 . id = t2 . track_id join invoices as t3 on t3 . id = t2 . invoice_id join customers as t4 on t4 . id = t3 . customer_id where t4 . first_name = value and t4 . last_name = value"
        },
        {
            "utterance": "How many milliseconds does each of those tracks have ?",
            "sql": "select id , milliseconds from tracks group by id"
        },
        {
            "utterance": "Show me the price for each of those tracks | Do you mean unit price ? | Yes",
            "sql": "select unit_price from tracks"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Find number of tracks in each genre?",
        "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"
    },
    "interaction": [
        {
            "utterance": "how many album id",
            "sql": "select count ( distinct album_id ) from tracks"
        },
        {
            "utterance": "how many genre id",
            "sql": "select count ( distinct genre_id ) from tracks"
        },
        {
            "utterance": "ok , let show me the average unit price of all genre id",
            "sql": "select genre_id , avg ( unit_price ) from tracks group by genre_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the manager's first name, last name and id who won the most manager award?",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "HOW MANY ON THE TABLE | did you mean HOW MANY player ON THE TABLE ? | YES EXACTLY",
            "sql": "select count ( distinct player_id ) from player"
        },
        {
            "utterance": "WHAT IS BIRTH YEAR of aardsda01",
            "sql": "select birth_year from player where player_id = value"
        },
        {
            "utterance": "WHAT ARE THE MANAGER 'S FIRST NAME LAST NAME AND ID WHO WON THE MOST MANAGER AWARD",
            "sql": "select t1 . name_first , t1 . name_last , t2 . player_id from player as t1 join manager_award as t2 on t1 . player_id = t2 . player_id group by t2 . player_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';"
    },
    "interaction": [
        {
            "utterance": "Show the team_id with highest rank ?",
            "sql": "select team_id from team order by rank asc limit value"
        },
        {
            "utterance": "Show the maximum scores of the team Boston Red Stockings when the team won in postseason ?",
            "sql": "select max ( t1 . wins ) from postseason as t1 join team as t2 on t1 . team_id_winner = t2 . team_id_br where t2 . name = value"
        },
        {
            "utterance": "Show the year of postseason with equal wins and loses ?",
            "sql": "select year from postseason where wins = losses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which cities have 2 to 4 parks?",
        "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"
    },
    "interaction": [
        {
            "utterance": "Which cities have 2 to 4 parks ?",
            "sql": "select city from park group by city having count ( * ) between value and value"
        },
        {
            "utterance": "How many parks are in Atlanta ?",
            "sql": "select count ( * ) from park where city = value"
        },
        {
            "utterance": "Which cities have exactly 4 parks ?",
            "sql": "select city from park group by city having count ( * ) = value"
        },
        {
            "utterance": "Which cities have exactly 3 parks ?",
            "sql": "select city from park group by city having count ( * ) = value"
        },
        {
            "utterance": "Which cities have exactly 2 parks ?",
            "sql": "select city from park group by city having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are first and last names of players participating in all star game in 1998?",
        "sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998"
    },
    "interaction": [
        {
            "utterance": "hi , can you tell me the first and last name for the player with player ID : gomezle01 ?",
            "sql": "select name_first , name_last from player where player_id = value"
        },
        {
            "utterance": "yes . What is the player 's first and last name for player ID : ferreri01 ?",
            "sql": "select name_first , name_last from player where player_id = value"
        },
        {
            "utterance": "in addition to Rick Ferrell , Lefty Gomez , and player ID gehrilo01 , can you tell me the first and last names of the other players participating in 1998 all star game ?",
            "sql": "select name_first , name_last from player as t1 join all_star as t2 on t1 . player_id = t2 . player_id where year = value and name_first ! = value or name_last ! = value intersect select name_first , name_last from player as t1 join all_star as t2 on t1 . player_id = t2 . player_id where year = value and name_first ! = value or name_last ! = value intersect select name_first , name_last from player as t1 join all_star as t2 on t1 . player_id = t2 . player_id where year = value and t1 . player_id ! = value"
        },
        {
            "utterance": "great . what is the player with player ID gehrilo01 first and last name ?",
            "sql": "select name_first , name_last from player where player_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 4,
    "final": {
        "utterance": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;"
    },
    "interaction": [
        {
            "utterance": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total ?",
            "sql": "select sum ( t1 . games ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value and t1 . year between value and value"
        },
        {
            "utterance": "What is the one of the best team ? | Do you mean the team with the most number of wins ? | yes",
            "sql": "select t2 . name from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br group by t1 . team_id order by sum ( t2 . w ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the total salary paid by team Boston Red Stockings in 2010?",
        "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"
    },
    "interaction": [
        {
            "utterance": "What is the team id for Boston Red Stockings ?",
            "sql": "select distinct ( team_id ) from team where name = value"
        },
        {
            "utterance": "Yes please .",
            "sql": "select t1 . player_id from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value"
        },
        {
            "utterance": "Can you calculate the total salary paid by team Boston Red Stockings in 2010 ?",
            "sql": "select sum ( t1 . salary ) from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value and t1 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the manager's first name, last name and id who won the most manager award?",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Who won the most manager award ? | Do you mean the first name of the person who won the most manager award ? | Yes , and tell me the last name and the id of that person as well .",
            "sql": "select t1 . name_first , t1 . name_last , t2 . player_id from player as t1 join manager_award as t2 on t1 . player_id = t2 . player_id group by t2 . player_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 7,
    "final": {
        "utterance": "In 2014, what are the id and rank of the team that has the largest average number of attendance?",
        "sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the attendance of the team_id CH1 ?",
            "sql": "select attendance from home_game where team_id = value"
        },
        {
            "utterance": "Show me the id of the team that has the largest average number of attendance in 2014 ?",
            "sql": "select t2 . team_id from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id where t1 . year = value group by t1 . team_id order by avg ( t1 . attendance ) desc limit value"
        },
        {
            "utterance": "Show me the team_id with attendance 3000 ?",
            "sql": "select team_id from home_game where attendance = value"
        },
        {
            "utterance": "Show me the rank of the team that has the largest average number of attendance ?",
            "sql": "select t2 . rank from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id group by t1 . team_id order by avg ( t1 . attendance ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which 3 players won the most player awards? List their full name and id.",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "What are the ids of 3 players that won the most awards ?",
            "sql": "select t1 . player_id from player as t1 join player_award as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you show me the names and ids for this list ? | The result shows the full names and ids of 3 players that won the most awards . | What are the city , state and country for these players ?",
            "sql": "select t1 . birth_city , t1 . birth_state , t1 . birth_country from player as t1 join player_award as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you also show me the birth dates ?",
            "sql": "select t1 . birth_year , t1 . birth_month , t1 . birth_day from player as t1 join player_award as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';"
    },
    "interaction": [
        {
            "utterance": "What is the the birth country of player-ids ? | Do you mean the birth country of all players ? | yes",
            "sql": "select birth_country from player"
        },
        {
            "utterance": "What is the birth state of player aardsda01 ?",
            "sql": "select birth_state from player where player_id = value"
        },
        {
            "utterance": "What about birth city ?",
            "sql": "select birth_city from player where player_id = value"
        },
        {
            "utterance": "and for aaronto01 ? | You mean the birth city for the player with ID aaronto01 ? | yes",
            "sql": "select birth_city from player where player_id = value"
        },
        {
            "utterance": "How many players in the USA have a batter value R ?",
            "sql": "select count ( * ) from player where birth_country = value and bats = value"
        },
        {
            "utterance": "How many with a value R that are dead , died in the USA ?",
            "sql": "select count ( * ) from player where birth_country = value and bats = value and death_year < value and death_country = value"
        },
        {
            "utterance": "How many with a value R died after the year 2000 ?",
            "sql": "select count ( * ) from player where bats = value and death_year > value"
        },
        {
            "utterance": "What about born after the year 1980 ?",
            "sql": "select count ( * ) from player where bats = value and birth_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 10,
    "final": {
        "utterance": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
    },
    "interaction": [
        {
            "utterance": "Which player has the highest salary on the list ?",
            "sql": "select player_id from salary order by salary desc limit value"
        },
        {
            "utterance": "How many players has the birth country in USA ?",
            "sql": "select count ( player_id ) from player where birth_country = value"
        },
        {
            "utterance": "State the team id which has the highest rank in the list ?",
            "sql": "select team_id from team order by rank limit value"
        },
        {
            "utterance": "List player 's first name and last name who received salary from team Washington Nationals in both 2005 and 2007 ?",
            "sql": "select t2 . name_first , t2 . name_last from salary as t1 join player as t2 on t1 . player_id = t2 . player_id join team as t3 on t3 . team_id_br = t1 . team_id where t1 . year = value and t3 . name = value intersect select t2 . name_first , t2 . name_last from salary as t1 join player as t2 on t1 . player_id = t2 . player_id join team as t3 on t3 . team_id_br = t1 . team_id where t1 . year = value and t3 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many games were played in city Atlanta in 2000?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"
    },
    "interaction": [
        {
            "utterance": "can you count the number of of games played in atlanta in 2000",
            "sql": "select count ( * ) from home_game as t1 join park as t2 on t1 . park_id = t2 . park_id where t1 . year = value and t2 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "sql": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which team had the most players in the all star games ?",
            "sql": "select * from all_star group by team_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "WHich player has the most all star games played ?",
            "sql": "select * from player as t1 join all_star as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is his id ?",
            "sql": "select t1 . player_id from player as t1 join all_star as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 13,
    "final": {
        "utterance": "what is the full name and id of the college with the largest number of baseball players?",
        "sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the full name and id of the college with the largest number of baseball players ?",
            "sql": "select t1 . name_full , t1 . college_id from college as t1 join player_college as t2 on t1 . college_id = t2 . college_id group by t1 . college_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "And how many players go there ?",
            "sql": "select count ( distinct player_id ) from player_college where college_id = ( select t1 . college_id from college as t1 join player_college as t2 on t1 . college_id = t2 . college_id group by t1 . college_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "And where is that college located ?",
            "sql": "select t1 . city , t1 . state , t1 . country from college as t1 join player_college as t2 on t1 . college_id = t2 . college_id group by t1 . college_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "And what year did the largest number of baseball players attend that college ?",
            "sql": "select year from player_college where college_id = ( select t1 . college_id from college as t1 join player_college as t2 on t1 . college_id = t2 . college_id group by t1 . college_id order by count ( * ) desc limit value ) group by college_id order by year desc limit value"
        },
        {
            "utterance": "How many baseball players attended that college in 2018 ?",
            "sql": "select count ( player_id ) from player_college where year = value and college_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 14,
    "final": {
        "utterance": "How many players were in the team Boston Red Stockings in 2000?",
        "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "Show me the salary of team id ATL ?",
            "sql": "select salary from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t1 . team_id = value"
        },
        {
            "utterance": "Show me the league id of player id bedrost01 ?",
            "sql": "select distinct t1 . league_id from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t1 . player_id = value"
        },
        {
            "utterance": "Show me the player id with salary 545000 ?",
            "sql": "select distinct t1 . player_id from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t1 . salary = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 15,
    "final": {
        "utterance": "List the 3 highest salaries of the players in 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "List the 3 highest salaries of the players in 2001 ?",
            "sql": "select salary from salary where year = value order by salary desc limit value"
        },
        {
            "utterance": "List the 3 highest salaries of players on ATL in 2001 .",
            "sql": "select salary from salary where year = value and team_id = value order by salary desc limit value"
        },
        {
            "utterance": "List the 3 highest salaries of players in the NL in 2001 .",
            "sql": "select salary from salary where year = value and league_id = value order by salary desc limit value"
        },
        {
            "utterance": "List the 3 highest salaries of players in the AL in 2001",
            "sql": "select salary from salary where year = value and league_id = value order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 16,
    "final": {
        "utterance": "In which year did the least people enter hall of fame?",
        "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the player IDs in the database ?",
            "sql": "select player_id from hall_of_fame"
        },
        {
            "utterance": "Can you update this list to indicate whether or not these players were inducted into the hall of fame ?",
            "sql": "select player_id , inducted from hall_of_fame"
        },
        {
            "utterance": "Thank you for that ! Of all of the years , which year had the fewest players entering the hall of fame ?",
            "sql": "select yearid from hall_of_fame group by yearid order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What were all the salary values of players in 2010 and 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001"
    },
    "interaction": [
        {
            "utterance": "What were all the salary values of players in 2010 and 2001 ?",
            "sql": "select salary from salary where year = value union select salary from salary where year = value"
        },
        {
            "utterance": "What was the average salary of players in 2010 ?",
            "sql": "select avg ( salary ) from salary where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Which team had the least number of attendances in home games in 1980?",
        "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Yes | Sorry . I mean which game OR the sum of attendance of a team in its home game | The sum of attendance of a team in its home game",
            "sql": "select t2 . name from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br group by t1 . team_id order by sum ( t1 . attendance ) asc limit value"
        },
        {
            "utterance": "What was the actual attendance in number ? | What do you mean by actual attendance | The attendance in home games for Altoona Mountain City",
            "sql": "select sum ( t1 . attendance ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id group by t1 . team_id order by sum ( t1 . attendance ) asc limit value"
        },
        {
            "utterance": "Which team had the highest number of attendance ?",
            "sql": "select t2 . name from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id group by t1 . team_id order by sum ( t1 . attendance ) desc limit value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select sum ( t1 . attendance ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id group by t1 . team_id order by sum ( t1 . attendance ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 19,
    "final": {
        "utterance": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me how many games were in 1885 ? | Did you also requre the `` ties '' is '1 ' | how many games had ties ?",
            "sql": "select count ( * ) from postseason where ties = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 20,
    "final": {
        "utterance": "How many games were played in park \"Columbia Park\" in 1907?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"
    },
    "interaction": [
        {
            "utterance": "how many park there",
            "sql": "select count ( * ) from park"
        },
        {
            "utterance": "what is the city of Riverside Park",
            "sql": "select city from park where park_name = value"
        },
        {
            "utterance": "what is the park name of Anaheim city | Angel Stadium of Anaheim is the name of the park in city Anaheim . | what is the state of Columbia Park",
            "sql": "select state from park where park_name = value"
        },
        {
            "utterance": "how many home game there",
            "sql": "select count ( * ) from home_game"
        },
        {
            "utterance": "how many games in 1871 | Do you mean the number of home games in year 1871 ? | yes sir",
            "sql": "select count ( * ) from home_game where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the name and id of the team offering the lowest average salary?",
        "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what is the average salary for all teams ?",
            "sql": "select avg ( salary ) from salary"
        },
        {
            "utterance": "ok , which team offering the highest salary ? | OK , do you want me to show the team name or id ? Also , are you asking about average salary ? | please give me the name . Yes !",
            "sql": "select t1 . name from team as t1 join salary as t2 on t1 . team_id = t2 . team_id group by t1 . team_id order by avg ( t2 . salary ) desc limit value"
        },
        {
            "utterance": "Great ! How about the lowest salary ?",
            "sql": "select t1 . name from team as t1 join salary as t2 on t1 . team_id = t2 . team_id group by t1 . team_id order by avg ( t2 . salary ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Which 3 players won the most player awards? List their full name and id.",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "hey , which 3 players won the most player awards ? list their full name and id",
            "sql": "select t1 . name_first , t1 . name_last , t1 . player_id from player as t1 join player_award as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "yes , the youngest .",
            "sql": "select name_first , name_last from player where player_id in ( select t1 . player_id from player as t1 join player_award as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value ) order by birth_year , birth_month , birth_day desc limit value"
        },
        {
            "utterance": "which teams did the three play for ?",
            "sql": "select t1 . player_id , t2 . league_id from player as t1 join player_award as t2 on t1 . player_id = t2 . player_id group by t1 . player_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List the names of states that have more than 2 parks.",
        "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;"
    },
    "interaction": [
        {
            "utterance": "What are the names of some public parks in the United States ?",
            "sql": "select park_name from park where country = value"
        },
        {
            "utterance": "Thank you . Which states have at least two parks in them ?",
            "sql": "select state from park group by state having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 24,
    "final": {
        "utterance": "List three countries which are the origins of the least players.",
        "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "WHICH COUNTRIES HAS THE ORIGINS OF THE LEAST PLAYERS",
            "sql": "select birth_country from player group by birth_country order by count ( * ) asc limit value"
        },
        {
            "utterance": "LIST ALL THE COUNTRIES WITH ORIGINS OF LEAST PLAYERS | Is n't it the same question as the last one ? | NO , LIST THREE COUNTRIES WHICH ARE THE ORIGINS OF THE LEAST PLAYERS",
            "sql": "select birth_country from player group by birth_country order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
    },
    "interaction": [
        {
            "utterance": "what is the total home game attandance in 1871 ?",
            "sql": "select sum ( t1 . attendance ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t1 . year = value"
        },
        {
            "utterance": "how many games played by BS1 ?",
            "sql": "select count ( * ) from home_game where team_id = value"
        },
        {
            "utterance": "WHAT IS THE RANK OF TEAM BS1 ? IN TEAM TABLE ?",
            "sql": "select rank from team where team_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"
    },
    "interaction": [
        {
            "utterance": "what is the average salary of Boston Red Stockings ?",
            "sql": "select avg ( t1 . salary ) from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value"
        },
        {
            "utterance": "what is the league id of Boston Red Stocking ?",
            "sql": "select league_id from team where name = value"
        },
        {
            "utterance": "what is their rank ? | do you mean all their ranks in every year ? | yes",
            "sql": "select year , rank from team where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What were all the salary values of players in 2010 and 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001"
    },
    "interaction": [
        {
            "utterance": "what is the salary of 1985 ?",
            "sql": "select salary from salary where year = value"
        },
        {
            "utterance": "who is get the high salary ? | Do you mean the id of the player who gets the highest salary ? | Yes .",
            "sql": "select player_id from salary order by salary desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 28,
    "final": {
        "utterance": "How many players were in the team Boston Red Stockings in 2000?",
        "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "How many players are on a team ? | Which team are you referring to ? | The Boston Red Stockings .",
            "sql": "select count ( * ) from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value"
        },
        {
            "utterance": "How many in the year 2000 ?",
            "sql": "select count ( * ) from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value and t1 . year = value"
        },
        {
            "utterance": "What was the total salary of those players ?",
            "sql": "select sum ( salary ) from salary as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value and t1 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
    },
    "interaction": [
        {
            "utterance": "What is the total home game attendance of all teams from 2000 to 2010 ?",
            "sql": "select sum ( t1 . attendance ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t1 . year between value and value"
        },
        {
            "utterance": "What about for just the team Boston Red Stockings ?",
            "sql": "select sum ( t1 . attendance ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value and t1 . year between value and value"
        },
        {
            "utterance": "What 's the average total home game attendance for the Cleveland Forest Citys for all years ?",
            "sql": "select avg ( t1 . attendance ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value"
        },
        {
            "utterance": "What about for the Chicago White Stockings ?",
            "sql": "select avg ( t1 . attendance ) from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br where t2 . name = value"
        },
        {
            "utterance": "What is the name of the team with the earliest home game date , and what is that date ?",
            "sql": "select t2 . name , t1 . span_first from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br order by t1 . span_first limit value"
        },
        {
            "utterance": "What about the latest date ?",
            "sql": "select t2 . name , t1 . span_first from home_game as t1 join team as t2 on t1 . team_id = t2 . team_id_br order by t1 . span_first desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 30,
    "final": {
        "utterance": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
    },
    "interaction": [
        {
            "utterance": "Show me the name of players ?",
            "sql": "select name_first , name_last , name_given from player"
        },
        {
            "utterance": "Show me the name of person who received salary from team Washington nationals ?",
            "sql": "select t2 . name_first , t2 . name_last , t2 . name_given from salary as t1 join player as t2 on t1 . player_id = t2 . player_id join team as t3 on t3 . team_id_br = t1 . team_id where t1 . year = value and t3 . name = value"
        },
        {
            "utterance": "Show me the names of players who received salary in both 2005 and 2007 ?",
            "sql": "select t2 . name_first , t2 . name_last from salary as t1 join player as t2 on t1 . player_id = t2 . player_id join team as t3 on t3 . team_id_br = t1 . team_id where t1 . year = value or t1 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the name and id of the team offering the lowest average salary?",
        "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what team pays the lowest average salary ?",
            "sql": "select * from team as t1 join salary as t2 on t1 . team_id = t2 . team_id group by t1 . team_id order by avg ( t2 . salary ) asc limit value"
        },
        {
            "utterance": "thanks..how about one last one ... what is median salary across all teams ?",
            "sql": "select avg ( salary ) from salary"
        },
        {
            "utterance": "ok , how many teams are the total in this data range ? | What data range are you referring to ? | Team salaries",
            "sql": "select count ( distinct team_id ) from salary"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the name and id of the team with the most victories in 2008 postseason?",
        "sql": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "how many postseason on the table",
            "sql": "select count ( * ) from postseason"
        },
        {
            "utterance": "which postseason are highest wins | Would you like all information for the entry in postseason with the highest value for wins ? | exactly",
            "sql": "select * from postseason order by wins desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 33,
    "final": {
        "utterance": "In which year did the least people enter hall of fame?",
        "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "list the year id in which the least people enter hall of fame",
            "sql": "select yearid from hall_of_fame group by yearid order by count ( * ) asc limit value"
        },
        {
            "utterance": "what is the catogery of the particular year id | Do you mean of the year id 1944 ? | yes , what is the category mentioned for the year id 1944",
            "sql": "select category from hall_of_fame where yearid = value"
        },
        {
            "utterance": "list the number of votes for this category",
            "sql": "select sum ( votes ) from hall_of_fame where category = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
        "sql": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"
    },
    "interaction": [
        {
            "utterance": "what is the number of wins the team Boston Red Stockings got in the postseasons each year in history ?",
            "sql": "select count ( * ) , t1 . year from postseason as t1 join team as t2 on t1 . team_id_winner = t2 . team_id_br where t2 . name = value group by t1 . year"
        },
        {
            "utterance": "ok , list out the all team id winner",
            "sql": "select team_id_winner from postseason"
        },
        {
            "utterance": "ok , list out the all team id loser",
            "sql": "select team_id_loser from postseason"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Which park had most attendances in 2008?",
        "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the Open Year of the Riverside Park ?",
            "sql": "select t1 . year from home_game as t1 join park as t2 on t1 . park_id = t2 . park_id where t2 . park_name = value"
        },
        {
            "utterance": "What is a park in Anaheim ?",
            "sql": "select t2 . park_name from park as t2 where t2 . city = value"
        },
        {
            "utterance": "How many people attendance for Columbia Park ? | Did you mean the sum of the attendance for the Columbia Park for all the years ? | Yes",
            "sql": "select sum ( t1 . attendance ) from home_game as t1 join park as t2 on t1 . park_id = t2 . park_id where t2 . park_name = value"
        },
        {
            "utterance": "Which park had most attendances in 2008 ?",
            "sql": "select t2 . park_name from home_game as t1 join park as t2 on t1 . park_id = t2 . park_id where t1 . year = value order by t1 . attendance desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 36,
    "final": {
        "utterance": "How many games were played in park \"Columbia Park\" in 1907?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"
    },
    "interaction": [
        {
            "utterance": "How many games were played at Columbia Park ?",
            "sql": "select count ( * ) from home_game as t1 join park as t2 on t1 . park_id = t2 . park_id where t2 . park_name = value"
        },
        {
            "utterance": "How many games were played in 1907 ?",
            "sql": "select count ( * ) from home_game as t1 join park as t2 on t1 . park_id = t2 . park_id where t1 . year = value"
        },
        {
            "utterance": "Out of those games , how many of them were played in Columbia Park ? | Did you mean how many games were played in park `` Columbia Park '' in 1907 | Yes please .",
            "sql": "select count ( * ) from home_game as t1 join park as t2 on t1 . park_id = t2 . park_id where t1 . year = value and t2 . park_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the average height of the players from the college named 'Yale University'?",
        "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';"
    },
    "interaction": [
        {
            "utterance": "What is the average height of all players ?",
            "sql": "select avg ( height ) from player"
        },
        {
            "utterance": "What is the average height of all players from the college `` Yale University '' ?",
            "sql": "select avg ( t1 . height ) from player as t1 join player_college as t2 on t1 . player_id = t2 . player_id join college as t3 on t3 . college_id = t2 . college_id where t3 . name_full = value"
        },
        {
            "utterance": "What is the average weight of all players ?",
            "sql": "select avg ( weight ) from player"
        },
        {
            "utterance": "What is the player id of the heaviest player ?",
            "sql": "select player_id from player order by weight desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the average height of the players from the college named 'Yale University'?",
        "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';"
    },
    "interaction": [
        {
            "utterance": "Show me the all student 's names from the college named 'Yale University ' | Do you mean the given names of all the students from the college named 'Yale University ' ? | Yes",
            "sql": "select t1 . name_given from player as t1 join player_college as t2 on t1 . player_id = t2 . player_id join college as t3 on t3 . college_id = t2 . college_id where t3 . name_full = value"
        },
        {
            "utterance": "Show me the height list of the student players from this university | Do you mean the height of the players from the college named 'Yale University ' ? | yes",
            "sql": "select t1 . height from player as t1 join player_college as t2 on t1 . player_id = t2 . player_id join college as t3 on t3 . college_id = t2 . college_id where t3 . name_full = value"
        },
        {
            "utterance": "Show me the average height of the student players from the college named 'Yale University '",
            "sql": "select avg ( t1 . height ) from player as t1 join player_college as t2 on t1 . player_id = t2 . player_id join college as t3 on t3 . college_id = t2 . college_id where t3 . name_full = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 0,
    "final": {
        "utterance": "How many credit cards does customer Blanche Huels have?",
        "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
    },
    "interaction": [
        {
            "utterance": "Can you list the customer names and ids who have credit cards ?",
            "sql": "select t1 . customer_id , t2 . customer_first_name , t2 . customer_last_name from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . card_type_code = value"
        },
        {
            "utterance": "I want to know the customer names and how many credit cards they have ?",
            "sql": "select t2 . customer_first_name , t2 . customer_last_name , count ( * ) from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . card_type_code = value group by t1 . customer_id"
        },
        {
            "utterance": "How many credit cards does Blanche Huels have ?",
            "sql": "select count ( * ) from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_first_name = value and t2 . customer_last_name = value and t1 . card_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the customer first, last name and id with least number of accounts.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many customers have accounts ?",
            "sql": "select count ( * ) from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "What is the customer first , last name and id with the most number of accounts ?",
            "sql": "select t2 . customer_first_name , t2 . customer_last_name , t1 . customer_id from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the customer first , last name and id with the least number of accounts ?",
            "sql": "select t2 . customer_first_name , t2 . customer_last_name , t1 . customer_id from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 2,
    "final": {
        "utterance": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "how many accounts on the table",
            "sql": "select count ( * ) from accounts"
        },
        {
            "utterance": "list out the customers first name",
            "sql": "select customer_first_name from customers"
        },
        {
            "utterance": "what is the address of Aniyah | Did you mean to ask for the address of the customer with first name Aniyah ? | exactly",
            "sql": "select customer_address from customers where customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the customer ids and firstname without a credit card.",
        "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""
    },
    "interaction": [
        {
            "utterance": "show the customer ids and first names without a credit card",
            "sql": "select customer_id , customer_first_name from customers except select t1 . customer_id , t2 . customer_first_name from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where card_type_code = value"
        },
        {
            "utterance": "show the customer ids , first name and last name without a Debit card",
            "sql": "select customer_id , customer_first_name , customer_last_name from customers except select t1 . customer_id , t2 . customer_first_name , t2 . customer_last_name from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where card_type_code = value"
        },
        {
            "utterance": "show the customer ids , first name and last name with card type and number | Do you mean card type code ? | show the customer ids and card number",
            "sql": "select customer_id , card_number from customers_cards"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the card type codes and the number of transactions.",
        "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
    },
    "interaction": [
        {
            "utterance": "how many customers cards there",
            "sql": "select count ( * ) from customers_cards"
        },
        {
            "utterance": "how many credit cards there",
            "sql": "select count ( * ) from customers_cards where card_type_code = value"
        },
        {
            "utterance": "how many debit cards there",
            "sql": "select count ( * ) from customers_cards where card_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the first names and last names of customers without any account.",
        "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "What are the first and last names of all customers who do n't have an account ?",
            "sql": "select customer_first_name , customer_last_name from customers except select t1 . customer_first_name , t1 . customer_last_name from customers as t1 join accounts as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "Can you list the addresses of all customers that have VIP as their other account details ?",
            "sql": "select t1 . customer_address from customers as t1 join accounts as t2 on t1 . customer_id = t2 . customer_id where t2 . other_account_details = value"
        },
        {
            "utterance": "COuld you list the account names of all customers with the letter G or A in their first or last names ?",
            "sql": "select t2 . account_name from customers as t1 join accounts as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_first_name like value or t1 . customer_first_name like value or t1 . customer_last_name like value or t1 . customer_last_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the number of all customers without an account.",
        "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    "interaction": [
        {
            "utterance": "show the number of all customers without an account",
            "sql": "select count ( * ) from customers where customer_id not in ( select customer_id from accounts )"
        },
        {
            "utterance": "can you show their name ? | Do you want their first and last names ? | first name",
            "sql": "select customer_first_name from customers where customer_id not in ( select customer_id from accounts )"
        },
        {
            "utterance": "what is Armani 's customer address ? | Do you mean the address of the customer with a first name Armani ? | yes",
            "sql": "select customer_address from customers where customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 7,
    "final": {
        "utterance": "Show id, first and last names for all customers with at least two cards.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what is the name of customer id 1 ?",
            "sql": "select customer_first_name , customer_last_name from customers where customer_id = value"
        },
        {
            "utterance": "what type of card is used by customer id 6 ?",
            "sql": "select card_type_code from customers_cards where customer_id = value"
        },
        {
            "utterance": "what is the address of customer id 2 ?",
            "sql": "select customer_address from customers where customer_id = value"
        },
        {
            "utterance": "Show id , first and last names for all customers with at least two cards ?",
            "sql": "select t1 . customer_id , t2 . customer_first_name , t2 . customer_last_name from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the card type code with most number of cards?",
        "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the card type with the most number of cards ?",
            "sql": "select card_type_code from customers_cards group by card_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "And the one with the least number of cards ?",
            "sql": "select card_type_code from customers_cards group by card_type_code order by count ( * ) limit value"
        },
        {
            "utterance": "How many cards are credit cards ?",
            "sql": "select count ( * ) from customers_cards where card_type_code = value"
        },
        {
            "utterance": "How many customers have credit cards ?",
            "sql": "select count ( * ) from customers_cards where card_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the customer id with most number of cards, and how many does he have?",
        "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Okay . Sorry about that . Can you please list all of the customer IDs for which the customer has more than one card ?",
            "sql": "select customer_id from customers_cards group by customer_id having count ( * ) > value"
        },
        {
            "utterance": "Can you please update that list to show the total number of cards that each of these customers has ?",
            "sql": "select customer_id , count ( * ) from customers_cards group by customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 10,
    "final": {
        "utterance": "Show id, first and last names for all customers with at least two cards.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Could you please list the first and last names of all the customers that have at least two cards ?",
            "sql": "select t2 . customer_first_name , t2 . customer_last_name from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > = value"
        },
        {
            "utterance": "Please add their IDs into the table ?",
            "sql": "select t1 . customer_id , t2 . customer_first_name , t2 . customer_last_name from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the addresses of all the customers with credit cards ?",
            "sql": "select t2 . customer_address from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . card_type_code = value"
        },
        {
            "utterance": "What is the email of the customer that has the credit card with the earliest date valid from ?",
            "sql": "select t2 . customer_email from customers_cards as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . date_valid_from = ( select min ( date_valid_from ) from customers_cards )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the average and total transaction amount?",
        "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
    },
    "interaction": [
        {
            "utterance": "What is the average transaction amount ?",
            "sql": "select avg ( transaction_amount ) from financial_transactions"
        },
        {
            "utterance": "What is the total transaction amount ?",
            "sql": "select sum ( transaction_amount ) from financial_transactions"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 12,
    "final": {
        "utterance": "Show card type codes with at least 5 cards.",
        "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "Show card types with at least 5 cards ?",
            "sql": "select card_type_code from customers_cards group by card_type_code having count ( * ) > = value"
        },
        {
            "utterance": "What are their ids ? | Do you mean card ids for all cards ? | yes",
            "sql": "select card_id from customers_cards"
        },
        {
            "utterance": "What card type did customer number 14 use ?",
            "sql": "select card_type_code from customers_cards where customer_id = value"
        },
        {
            "utterance": "How about customer number 6 ?",
            "sql": "select card_type_code from customers_cards where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the customer id with most number of cards, and how many does he have?",
        "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many on the customers cards table | Do you mean the amount of customer cards ? | yes exactly",
            "sql": "select count ( * ) from customers_cards"
        },
        {
            "utterance": "what is the 4560596484842 of customer id | The customer_id is 14 | what is the customer id with most number of cards , and how many does he have ?",
            "sql": "select customer_id , count ( * ) from customers_cards group by customer_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 14,
    "final": {
        "utterance": "How many cards does customer Art Turcotte have?",
        "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "list out the customers first name",
            "sql": "select customer_first_name from customers"
        },
        {
            "utterance": "what is the card number of Aniyah | Do you mean the customer with first name Aniyah | exactly",
            "sql": "select t2 . card_number from customers as t1 join customers_cards as t2 on t1 . customer_id = t2 . customer_id where customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 15,
    "final": {
        "utterance": "How many cards does customer Art Turcotte have?",
        "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "What is his customer id ?",
            "sql": "select customer_id from customers where customer_first_name = value and customer_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which game type has most number of games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the Gtype of the GameID 1 ?",
            "sql": "select gtype from video_games where gameid = value"
        },
        {
            "utterance": "What is the GameID of the GName RNG Stone ?",
            "sql": "select gtype from video_games where gameid = value"
        },
        {
            "utterance": "Tell me the GName of the GType Role-playing game ?",
            "sql": "select gname from video_games where gtype = value"
        },
        {
            "utterance": "Which game type has most number of games ?",
            "sql": "select gtype from video_games group by gtype order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the first name and last name of the student who have most number of sports?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are playing multiple sports ?",
            "sql": "select count ( * ) from ( select * from sportsinfo group by stuid having count ( * ) > value )"
        },
        {
            "utterance": "What are the names of the two students who are playing multiple sports ?",
            "sql": "select t2 . fname , t2 . lname from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid group by t1 . stuid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all advisors who have at least two students.",
        "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "can you please show me all the advisors ?",
            "sql": "select advisor from student"
        },
        {
            "utterance": "show me all advisors who does not have at least two students ?",
            "sql": "select advisor from student group by advisor having count ( * ) < value"
        },
        {
            "utterance": "which advisors have at least two students ?",
            "sql": "select advisor from student group by advisor having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Show total hours per week and number of games played for student David Shieber.",
        "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\""
    },
    "interaction": [
        {
            "utterance": "How many hours per week did David Shieber play ? | Do you mean the total hours per week did David Shieber play ? ( He can play different sports ) | Yes , total hours",
            "sql": "select sum ( hoursperweek ) from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t2 . fname = value and t2 . lname = value"
        },
        {
            "utterance": "What are the total number of games he played ?",
            "sql": "select sum ( gamesplayed ) from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t2 . fname = value and t2 . lname = value"
        },
        {
            "utterance": "What are the first and last names of the student who played the most total hours per week ?",
            "sql": "select fname , lname from student where stuid = ( select stuid from sportsinfo group by stuid order by sum ( hoursperweek ) desc limit value )"
        },
        {
            "utterance": "How many total games did she play ?",
            "sql": "select sum ( gamesplayed ) from sportsinfo group by stuid order by sum ( hoursperweek ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all game names played by at least 1000 hours.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000"
    },
    "interaction": [
        {
            "utterance": "What are the names of all games that were played for at least 1000 hours ?",
            "sql": "select gname from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid group by t1 . gameid having sum ( hours_played ) > = value"
        },
        {
            "utterance": "What are the names of all games that were played for less than 1000 hours ?",
            "sql": "select gname from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid group by t1 . gameid having sum ( hours_played ) < value"
        },
        {
            "utterance": "What are the average hours played for each game type ?",
            "sql": "select t2 . gtype , avg ( t1 . hours_played ) from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid group by t2 . gtype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show student ids who don't have any sports.",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo"
    },
    "interaction": [
        {
            "utterance": "Can you show me the student names with ids ?",
            "sql": "select stuid , lname , fname from student"
        },
        {
            "utterance": "Hmm , can you list the student ids with sports played ?",
            "sql": "select stuid , sportname from sportsinfo"
        },
        {
            "utterance": "I want to know the student names and ids who don \u2019 t play any sports .",
            "sql": "select stuid , lname , fname from student where stuid not in ( select stuid from sportsinfo )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the game name that has most number of hours played.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many hours of role-playing games were played ?",
            "sql": "select sum ( hours_played ) from plays_games as t1 join video_games where gtype = value"
        },
        {
            "utterance": "What game had the most hours played ?",
            "sql": "select gname from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid group by t1 . gameid order by sum ( hours_played ) desc limit value"
        },
        {
            "utterance": "Who played the most hours of Works of Widenius ?",
            "sql": "select stuid from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid where t2 . gname = value order by hours_played desc limit value"
        },
        {
            "utterance": "How many students play Works of Widenius ?",
            "sql": "select count ( distinct t1 . stuid ) from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid where t2 . gname = value"
        },
        {
            "utterance": "What game type is Works of Widenius ?",
            "sql": "select gtype from video_games where gname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show total hours per week and number of games played for students under 20.",
        "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20"
    },
    "interaction": [
        {
            "utterance": "What are the number of games played for students under the age of 20 ?",
            "sql": "select sum ( gamesplayed ) from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t2 . age < value"
        },
        {
            "utterance": "What are the total hours per week students under the age of 20 played games ?",
            "sql": "select sum ( hoursperweek ) from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t2 . age < value"
        },
        {
            "utterance": "What is the most common sport name those students played ?",
            "sql": "select sportname , count ( * ) from sportsinfo where stuid in ( select stuid from student where age < value ) group by sportname order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which game type has most number of games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list all the game type",
            "sql": "select gtype from video_games"
        },
        {
            "utterance": "list the name of a shooting game . | Do you mean `` First-person shooter '' games ? | yes i mean `` first-person shooter '' game ?",
            "sql": "select gname from video_games where gtype = value"
        },
        {
            "utterance": "which game type has least number of games ?",
            "sql": "select gtype from video_games group by gtype order by count ( * ) asc limit value"
        },
        {
            "utterance": "Which game type has most number of games ?",
            "sql": "select gtype from video_games group by gtype order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Show student ids who are female and play football.",
        "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""
    },
    "interaction": [
        {
            "utterance": "show student ids who are female and play football",
            "sql": "select stuid from student where sex = value intersect select stuid from sportsinfo where sportname = value"
        },
        {
            "utterance": "what is the name of the student with the id 1002 | Would you like first name and last name of the student with student id 1002 ? | yes",
            "sql": "select fname , lname from student where stuid = value"
        },
        {
            "utterance": "what is the first name and last name of the student with the student id 1003",
            "sql": "select fname , lname from student where stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the game name that has most number of hours played.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the game name that has most number of hours played .",
            "sql": "select gname from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid group by t1 . gameid order by sum ( hours_played ) desc limit value"
        },
        {
            "utterance": "Show the game that least number of hours played .",
            "sql": "select gname from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid group by t1 . gameid order by sum ( hours_played ) asc limit value"
        },
        {
            "utterance": "how many student played the game ? | Would you like to know how many entries in the plays games table correspond to The Vanishing of Eric Calder ? | yes",
            "sql": "select count ( * ) from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid where gname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Show ids of students who play video game and play sports.",
        "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"
    },
    "interaction": [
        {
            "utterance": "Please show me the ids of the students who play video games and play sports ?",
            "sql": "select stuid from sportsinfo intersect select stuid from plays_games"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show last names for all student who are on scholarship.",
        "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "How many students are on scholarship ?",
            "sql": "select count ( * ) from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . onscholarship = value"
        },
        {
            "utterance": "What are the last names for those students ?",
            "sql": "select t2 . lname from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . onscholarship = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select t2 . fname from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . onscholarship = value"
        },
        {
            "utterance": "What are their majors ?",
            "sql": "select t2 . major from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . onscholarship = value"
        },
        {
            "utterance": "What sport name do they play ?",
            "sql": "select t1 . sportname from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . onscholarship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many games are played for all football games by students on scholarship?",
        "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "list number of games played by students",
            "sql": "select sum ( gamesplayed ) from sportsinfo"
        },
        {
            "utterance": "how many of those are played by students on scholarship ?",
            "sql": "select sum ( gamesplayed ) from sportsinfo where onscholarship = value"
        },
        {
            "utterance": "list all the names of the sports available",
            "sql": "select distinct sportname from sportsinfo"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show student ids who are female and play football.",
        "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""
    },
    "interaction": [
        {
            "utterance": "which students are female ? | Do you want the ids of students who are female ? | yes",
            "sql": "select stuid from student where sex = value"
        },
        {
            "utterance": "now give me the student ids of people who play football",
            "sql": "select stuid from sportsinfo where sportname = value"
        },
        {
            "utterance": "show me the ids of the students that are both female and play football",
            "sql": "select stuid from student where sex = value intersect select stuid from sportsinfo where sportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10"
    },
    "interaction": [
        {
            "utterance": "Show all student IDs with more than a total of 10 hours per week on all sports played please .",
            "sql": "select stuid from sportsinfo group by stuid having sum ( hoursperweek ) > value"
        },
        {
            "utterance": "Which of those were just football ?",
            "sql": "select stuid from sportsinfo where sportname = value"
        },
        {
            "utterance": "What 's the average hours per week all students played football ?",
            "sql": "select avg ( hoursperweek ) from sportsinfo where sportname = value"
        },
        {
            "utterance": "What 's the average hours per week all students played athletics ?",
            "sql": "select avg ( hoursperweek ) from sportsinfo"
        },
        {
            "utterance": "What are all sports names ?",
            "sql": "select distinct sportname from sportsinfo"
        },
        {
            "utterance": "What 's the average hours per week all students played Lacrosse ?",
            "sql": "select avg ( hoursperweek ) from sportsinfo where sportname = value"
        },
        {
            "utterance": "What are the student IDs of those students ?",
            "sql": "select stuid from sportsinfo"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Show ids of students who play video game and play sports.",
        "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"
    },
    "interaction": [
        {
            "utterance": "Which students play video games ?",
            "sql": "select distinct stuid from plays_games"
        },
        {
            "utterance": "How about students who play sports ?",
            "sql": "select distinct stuid from sportsinfo"
        },
        {
            "utterance": "Show ids of students who play video games and sports ?",
            "sql": "select stuid from sportsinfo intersect select stuid from plays_games"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Show all game names played by Linda Smith",
        "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\""
    },
    "interaction": [
        {
            "utterance": "Which game names were played by Linda Smith ?",
            "sql": "select gname from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid join student as t3 on t3 . stuid = t1 . stuid where t3 . lname = value and t3 . fname = value"
        },
        {
            "utterance": "What is the Gtype of RGN Stone ?",
            "sql": "select gtype from video_games where gname = value"
        },
        {
            "utterance": "What is the city code of Student Shiela Jones ?",
            "sql": "select city_code from student where lname = value and fname = value"
        },
        {
            "utterance": "How many Hours Played do The Vanishing of Eric Calde hasr ?",
            "sql": "select t1 . hours_played from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid where gname = value"
        },
        {
            "utterance": "What are the Student names who have played Gname The Vanishing of Eric Calder .",
            "sql": "select t3 . fname , t3 . lname from plays_games as t1 join video_games as t2 on t1 . gameid = t2 . gameid join student as t3 on t3 . stuid = t1 . stuid where t2 . gname = value"
        },
        {
            "utterance": "What is the total Hours Played of all Students ?",
            "sql": "select sum ( hours_played ) from plays_games"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the last and first name of students who are playing Football or Lacrosse.",
        "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""
    },
    "interaction": [
        {
            "utterance": "How many students play football ?",
            "sql": "select count ( * ) from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . sportname = value"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select t2 . lname , t2 . fname from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . sportname = value"
        },
        {
            "utterance": "How many students play Lacrosse ?",
            "sql": "select count ( * ) from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . sportname = value"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select t2 . lname , t2 . fname from sportsinfo as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . sportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.",
        "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")"
    },
    "interaction": [
        {
            "utterance": "Age and sex of Smith Linda ? | The age and sex of the student whose last name is Smith and first name is Linda are 18 and F respectively . | What type of game is 'The Vanishing of Eric Calder ' ?",
            "sql": "select gtype from video_games where gname = value"
        },
        {
            "utterance": "Give the hours played by Kim Tracy ?",
            "sql": "select hours_played from student as t1 join plays_games as t2 where lname = value and fname = value"
        },
        {
            "utterance": "City code of Jones Shiela ? | Do you mean the city code of the student whose first name is Shiela and last name is Jones ? | Yes",
            "sql": "select city_code from student where fname = value and lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which game type has least number of games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many game types do you have ?",
            "sql": "select count ( distinct gtype ) from video_games"
        },
        {
            "utterance": "What is the average number of games in all game types ?",
            "sql": "select gtype , count ( * ) from video_games group by gtype"
        },
        {
            "utterance": "Finally , which game type has the least number of games ?",
            "sql": "select gtype from video_games group by gtype order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Show all student IDs with the number of sports and total number of games played",
        "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID"
    },
    "interaction": [
        {
            "utterance": "Could you please show me all the student IDs with the number of sports ?",
            "sql": "select stuid , count ( * ) from sportsinfo group by stuid"
        },
        {
            "utterance": "Could you add the total number of games played to that table please ?",
            "sql": "select stuid , count ( * ) , sum ( gamesplayed ) from sportsinfo group by stuid"
        },
        {
            "utterance": "How many students are on scholarships ?",
            "sql": "select count ( distinct stuid ) from sportsinfo where onscholarship = value"
        },
        {
            "utterance": "What is the most common sports name ?",
            "sql": "select sportname from sportsinfo group by sportname order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of the sport the student with the most hours per week played ?",
            "sql": "select sportname from sportsinfo order by hoursperweek desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the average, minimum, and maximum age for different majors.",
        "sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major"
    },
    "interaction": [
        {
            "utterance": "what is the lname of linda",
            "sql": "select lname from student where fname = value"
        },
        {
            "utterance": "what is the age of linda",
            "sql": "select age from student where fname = value"
        },
        {
            "utterance": "what is the age of kim",
            "sql": "select age from student where lname = value"
        },
        {
            "utterance": "what is the sex of age 18",
            "sql": "select distinct sex from student where age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Which sport has most number of students on scholarship?",
        "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many SportName on scholarship ?",
            "sql": "select count ( distinct sportname ) from sportsinfo where onscholarship = value"
        },
        {
            "utterance": "What are these 7 different sports that have student on scholarship ?",
            "sql": "select distinct sportname from sportsinfo where onscholarship = value"
        },
        {
            "utterance": "which sport has most number of students on scholarship ?",
            "sql": "select sportname from sportsinfo where onscholarship = value group by sportname order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 0,
    "final": {
        "utterance": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";"
    },
    "interaction": [
        {
            "utterance": "how many screen mode there",
            "sql": "select count ( * ) from screen_mode"
        },
        {
            "utterance": "how many phone there",
            "sql": "select count ( * ) from phone"
        },
        {
            "utterance": "what is the company name of XPERIA T , XPERIA J",
            "sql": "select company_name from phone where hardware_model_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the average ram mib size of the chip models that are never used by any phone.",
        "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)"
    },
    "interaction": [
        {
            "utterance": "Find the average ram mib size of the chip models that are never used by any phone",
            "sql": "select avg ( ram_mib ) from chip_model where model_name not in ( select chip_model from phone )"
        },
        {
            "utterance": "How many chips is that which are never used by any phone ?",
            "sql": "select count ( * ) from chip_model where model_name not in ( select chip_model from phone )"
        },
        {
            "utterance": "Give me all their model names and ram mib",
            "sql": "select model_name , ram_mib from chip_model where model_name not in ( select chip_model from phone )"
        },
        {
            "utterance": "How many chips used by phones have a ram mib higher or equal to 64",
            "sql": "select count ( * ) from chip_model where model_name in ( select chip_model from phone ) and ram_mib > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the maximum, minimum and average number of used kb in screen mode.",
        "sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;"
    },
    "interaction": [
        {
            "utterance": "Can you list the maximum number of used kb in screen mode ?",
            "sql": "select max ( used_kb ) from screen_mode"
        },
        {
            "utterance": "How about the minimum too ?",
            "sql": "select min ( used_kb ) from screen_mode"
        },
        {
            "utterance": "Could you get me the average as well , please ?",
            "sql": "select avg ( used_kb ) from screen_mode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    "interaction": [
        {
            "utterance": "How large is the ROM ? | What do you mean by ROM ? | When the `` Nokia Corporation '' company produces phones , what is the average ROM size implemented into a certain phone .",
            "sql": "select t1 . rom_mib from chip_model as t1 join phone as t2 on t1 . model_name = t2 . chip_model where t2 . company_name = value order by t1 . rom_mib desc limit value"
        },
        {
            "utterance": "What is the smallest ROM size of any phone made by company Nokia ?",
            "sql": "select t1 . rom_mib from chip_model as t1 join phone as t2 on t1 . model_name = t2 . chip_model where t2 . company_name = value order by t1 . rom_mib limit value"
        },
        {
            "utterance": "What is the average ROM size of a phone made by company Nokia ?",
            "sql": "select avg ( t1 . rom_mib ) from chip_model as t1 join phone as t2 on t1 . model_name = t2 . chip_model where t2 . company_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the name of the company that produced more than one phone model.",
        "sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;"
    },
    "interaction": [
        {
            "utterance": "List the name of the company that produces more than one phone model .",
            "sql": "select company_name from phone group by company_name having count ( * ) > value"
        },
        {
            "utterance": "Hmmm . Please list the name of the company that produces only one phone model .",
            "sql": "select company_name from phone group by company_name having count ( * ) = value"
        },
        {
            "utterance": "Ok. Can you show me the models produced by Nokia Corporation ?",
            "sql": "select hardware_model_name from phone where company_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'"
    },
    "interaction": [
        {
            "utterance": "How many phones are on the list ?",
            "sql": "select count ( * ) from phone"
        },
        {
            "utterance": "How many different chip models are there ?",
            "sql": "select count ( * ) from chip_model"
        },
        {
            "utterance": "How many chip models are not being used in phones with full accreditation ?",
            "sql": "select model_name from chip_model except select chip_model from phone where accreditation_type = value"
        },
        {
            "utterance": "What are the names of the chip models not used in full accreditation phones ?",
            "sql": "select model_name from chip_model except select chip_model from phone where accreditation_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'"
    },
    "interaction": [
        {
            "utterance": "what are all the pixels are presented on the table",
            "sql": "select pixels from screen_mode"
        },
        {
            "utterance": "how many screen modes on the table",
            "sql": "select count ( * ) from screen_mode"
        },
        {
            "utterance": "which phone has the highest screen mode on the table",
            "sql": "select * from phone where screen_mode = ( select max ( screen_mode ) from phone )"
        },
        {
            "utterance": "list out the chip models on the table",
            "sql": "select chip_model from phone"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "sql": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';"
    },
    "interaction": [
        {
            "utterance": "how many phones are presented on the table | Did you mean to ask for the number of entries in the table phone ? | exactly",
            "sql": "select count ( * ) from phone"
        },
        {
            "utterance": "list out the company name",
            "sql": "select company_name from phone"
        },
        {
            "utterance": "list the hardware model name",
            "sql": "select hardware_model_name from phone"
        },
        {
            "utterance": "what is the chip model of XPERIA T , XPERIA J",
            "sql": "select chip_model from phone where hardware_model_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the accreditation level that more than 3 phones use.",
        "sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "Tell me the chip model which has screen mode greater than 2.0 ? And also tell me the company name of that ...",
            "sql": "select chip_model , company_name from phone where screen_mode > value"
        },
        {
            "utterance": "Find the accreditation level that more than 3 phones use .",
            "sql": "select accreditation_level from phone group by accreditation_level having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 9,
    "final": {
        "utterance": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";"
    },
    "interaction": [
        {
            "utterance": "What is the hardware model name for the phones that were produced by `` Nokia Corporation '' but whose screen mode type is not Text ?",
            "sql": "select distinct t2 . hardware_model_name from screen_mode as t1 join phone as t2 on t1 . graphics_mode = t2 . screen_mode where t2 . company_name = value and t1 . type ! = value"
        },
        {
            "utterance": "What are the pixels of those ?",
            "sql": "select distinct t1 . pixels from screen_mode as t1 join phone as t2 on t1 . graphics_mode = t2 . screen_mode where t2 . company_name = value and t1 . type ! = value"
        },
        {
            "utterance": "What are the char cells of those ?",
            "sql": "select distinct t1 . char_cells from screen_mode as t1 join phone as t2 on t1 . graphics_mode = t2 . screen_mode where t2 . company_name = value and t1 . type ! = value"
        },
        {
            "utterance": "What are the used kb of those ?",
            "sql": "select distinct t1 . used_kb from screen_mode as t1 join phone as t2 on t1 . graphics_mode = t2 . screen_mode where t2 . company_name = value and t1 . type ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the names of the swimmers who have no record.",
        "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
    },
    "interaction": [
        {
            "utterance": "How many swimmers are there with record ?",
            "sql": "select count ( distinct swimmer_id ) from record"
        },
        {
            "utterance": "How about swimmers with no record ?",
            "sql": "select count ( * ) from swimmer where id not in ( select swimmer_id from record )"
        },
        {
            "utterance": "What their names ?",
            "sql": "select name from swimmer where id not in ( select swimmer_id from record )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the event that happened in the most recent year?",
        "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list all events that happened in 2018 ?",
            "sql": "select name from event where year = value"
        },
        {
            "utterance": "Can you list all the events that happened within the last 5 years ?",
            "sql": "select name from event where year > = value"
        },
        {
            "utterance": "Can you sort the list to only include the most recent event ?",
            "sql": "select name from event order by year desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all the swimmers who have won more than once ?",
            "sql": "select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value group by t2 . swimmer_id having count ( * ) > value"
        },
        {
            "utterance": "What are their nationalities ?",
            "sql": "select t1 . nationality from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value group by t2 . swimmer_id having count ( * ) > value"
        },
        {
            "utterance": "Can you list the names and nationalities of the swimmers who have never won ?",
            "sql": "select t1 . name , t1 . nationality from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value except select t1 . name , t1 . nationality from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value group by t2 . swimmer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 3,
    "final": {
        "utterance": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000"
    },
    "interaction": [
        {
            "utterance": "Hello , are there any countries that have two or more stadiums ?",
            "sql": "select country from stadium group by country having count ( * ) > = value"
        },
        {
            "utterance": "What countries have a stadium with a copacity greather than 60000 ?",
            "sql": "select distinct country from stadium where capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 4,
    "final": {
        "utterance": "List countries that have more than one swimmer.",
        "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List the countries more than two swimmer ?",
            "sql": "select nationality from swimmer group by nationality having count ( * ) > value"
        },
        {
            "utterance": "what is the name of swimmer with id 5 ?",
            "sql": "select name from swimmer where id = value"
        },
        {
            "utterance": "whats is nationality of the craif colbertaldo ?",
            "sql": "select nationality from swimmer where name = value"
        },
        {
            "utterance": "how many swimmer in the list ?",
            "sql": "select count ( id ) from swimmer"
        },
        {
            "utterance": "what is the name of the swimmer id 4 ?",
            "sql": "select name from swimmer where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of stadiums that some Australian swimmers have been to.",
        "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'"
    },
    "interaction": [
        {
            "utterance": "What are the names of stadiums that some Australian swimmers have been to ?",
            "sql": "select t4 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id join event as t3 on t2 . event_id = t3 . id join stadium as t4 on t4 . id = t3 . stadium_id where t1 . nationality = value"
        },
        {
            "utterance": "Who were the Australian swimmers ?",
            "sql": "select name from swimmer where nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of stadiums that the most swimmers have been to.",
        "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the names of stadiums that the least swimmers have been to ?",
            "sql": "select t3 . name from record as t1 join event as t2 on t1 . event_id = t2 . id join stadium as t3 on t3 . id = t2 . stadium_id group by t2 . stadium_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many events in this table ?",
            "sql": "select count ( name ) from event"
        },
        {
            "utterance": "How many stadiums in this table ?",
            "sql": "select count ( name ) from stadium"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the swimmer who has at least 2 records.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the swimmer names and their times ?",
            "sql": "select name , time from swimmer"
        },
        {
            "utterance": "Hmm , I also want to know their record times and the related events .",
            "sql": "select t1 . time , t2 . event_id from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id"
        },
        {
            "utterance": "Please tell me the name of the swimmer who has at least 2 records .",
            "sql": "select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id group by t2 . swimmer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the stadium which held the most events?",
        "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many names in the event table",
            "sql": "select count ( name ) from event"
        },
        {
            "utterance": "how many capacity in the stadium table",
            "sql": "select count ( distinct capacity ) from stadium"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of the swimmer who has the most records.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the swimmer who has the greatest number of records ?",
            "sql": "select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id group by t2 . swimmer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the least number of records ?",
            "sql": "select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id group by t2 . swimmer_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "What are the nationalities of swimmers `` Grant Hackett '' and `` Craig Stevens '' ?",
            "sql": "select nationality from swimmer where name = value or name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'"
    },
    "interaction": [
        {
            "utterance": "Can you find me the names of all the swimmers who have `` win '' results in the record ?",
            "sql": "select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value"
        },
        {
            "utterance": "Can you find me the names of all the swimmers who have `` loss '' results in the record ?",
            "sql": "select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value"
        },
        {
            "utterance": "Can you find me the names of all the swimmers who have both `` win '' and `` loss '' results in the record ?",
            "sql": "select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value intersect select t1 . name from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value"
        },
        {
            "utterance": "What are these three swimmers ' nationalities ?",
            "sql": "select t1 . name , t1 . nationality from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value intersect select t1 . name , t1 . nationality from swimmer as t1 join record as t2 on t1 . id = t2 . swimmer_id where result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 11,
    "final": {
        "utterance": "Which country has at most 3 stadiums listed?",
        "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3"
    },
    "interaction": [
        {
            "utterance": "What countries own stadiums ?",
            "sql": "select country from stadium group by country having count ( * ) > = value"
        },
        {
            "utterance": "how many cities have stadiums ?",
            "sql": "select count ( distinct city ) from stadium"
        },
        {
            "utterance": "What country has at max 3 stadiums ?",
            "sql": "select country from stadium group by country having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)"
    },
    "interaction": [
        {
            "utterance": "hi . what is the average capacity of the stadiums ?",
            "sql": "select avg ( capacity ) from stadium"
        },
        {
            "utterance": "and how many stadiums are there whose capacity is smaller than the average capacity ?",
            "sql": "select count ( * ) from stadium where capacity < ( select avg ( capacity ) from stadium )"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select name from stadium where capacity < ( select avg ( capacity ) from stadium )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the stadium that has the maximum capacity.",
        "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the stadium with the maximum capacity",
            "sql": "select name from stadium order by capacity desc limit value"
        },
        {
            "utterance": "in what city is Nou Mestalla",
            "sql": "select city from stadium where name = value"
        },
        {
            "utterance": "what country is Nou Mestalla in ?",
            "sql": "select country from stadium where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 14,
    "final": {
        "utterance": "Which countries do not have a stadium that was opened after 2006?",
        "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006"
    },
    "interaction": [
        {
            "utterance": "what is the name of the countries that do not have a stadium that was opened after 2006 ?",
            "sql": "select country from stadium except select country from stadium where opening_year > value"
        },
        {
            "utterance": "what is the capacity for England ? | You mean the stadium in England ? | yes",
            "sql": "select capacity from stadium where country = value"
        },
        {
            "utterance": "in what city is the stadium in England ?",
            "sql": "select city from stadium where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of aircrafts and that did not win any match.",
        "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)"
    },
    "interaction": [
        {
            "utterance": "Which aircraft did not win any match ? | What information do you want about the aircrafts ? Their names , their ids , or all their information ? | Their names .",
            "sql": "select aircraft from aircraft where aircraft_id not in ( select winning_aircraft from match )"
        },
        {
            "utterance": "Which pilot won the most matches ?",
            "sql": "select winning_pilot from match group by winning_pilot order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which aircraft won the most matches ?",
            "sql": "select winning_aircraft from match group by winning_aircraft order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 1,
    "final": {
        "utterance": "what is the name and age of the youngest winning pilot?",
        "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "In which country Swan River ' Perth located ?",
            "sql": "select country from match where location = value"
        },
        {
            "utterance": "How old is Mr. Cristian Halvorson II ?",
            "sql": "select age from pilot where name = value"
        },
        {
            "utterance": "In which country Mina ' Zayid , Abu Dhabi located ?",
            "sql": "select country from match where location = value"
        },
        {
            "utterance": "what is the name and age of the oldest winning pilot",
            "sql": "select t1 . name , t1 . age from pilot as t1 join match as t2 on t1 . pilot_id = t2 . winning_pilot order by t1 . age desc limit value"
        },
        {
            "utterance": "where is Flamengo Beach , Rio de Janeiro situated ? | did you want to return its country ? | where its located ?",
            "sql": "select country from match where location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of aircrafts and that won matches at least twice.",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the names of the aircraft ?",
            "sql": "select aircraft from aircraft"
        },
        {
            "utterance": "And which of those aircraft won a match ?",
            "sql": "select t1 . aircraft from aircraft as t1 join match as t2 on t1 . aircraft_id = t2 . winning_aircraft"
        },
        {
            "utterance": "How many have won at least two matches ?",
            "sql": "select t1 . aircraft from aircraft as t1 join match as t2 on t1 . aircraft_id = t2 . winning_aircraft group by t2 . winning_aircraft having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 3,
    "final": {
        "utterance": "what is the name and age of the youngest winning pilot?",
        "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the Location and Country of the Round 1 ?",
            "sql": "select location , country from match where round = value"
        },
        {
            "utterance": "What is the pilot id of Prof. Zackery Collins ?",
            "sql": "select pilot_id from pilot where name = value"
        },
        {
            "utterance": "What is the name and age of the youngest winning pilot ...",
            "sql": "select t1 . name , t1 . age from pilot as t1 join match as t2 on t1 . pilot_id = t2 . winning_pilot order by t1 . age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
    },
    "interaction": [
        {
            "utterance": "What are the total number of domestic passengers of airports that contain the word `` London '' ?",
            "sql": "select sum ( domestic_passengers ) from airport where airport_name like value"
        },
        {
            "utterance": "What about with a name like 'Heathrow ' ?",
            "sql": "select sum ( domestic_passengers ) from airport where airport_name like value"
        },
        {
            "utterance": "what about international passengers ?",
            "sql": "select sum ( international_passengers ) from airport where airport_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all information on the airport that has the largest number of international passengers.",
        "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which Airport has the largest number of international passengers ?",
            "sql": "select airport_name from airport order by international_passengers desc limit value"
        },
        {
            "utterance": "How many international passengers in that airport ?",
            "sql": "select international_passengers from airport order by international_passengers desc limit value"
        },
        {
            "utterance": "Show all information on that airport",
            "sql": "select * from airport order by international_passengers desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 6,
    "final": {
        "utterance": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    "interaction": [
        {
            "utterance": "please show the name of all the aircrafts .",
            "sql": "select aircraft from aircraft"
        },
        {
            "utterance": "please show the description of the Aircraft Robinson R-22",
            "sql": "select description from aircraft where aircraft = value"
        },
        {
            "utterance": "Please show the names of aircrafts associated with airport with name `` London Gatwick '' .",
            "sql": "select t1 . aircraft from aircraft as t1 join airport_aircraft as t2 on t1 . aircraft_id = t2 . aircraft_id join airport as t3 on t2 . airport_id = t3 . airport_id where t3 . airport_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
    },
    "interaction": [
        {
            "utterance": "How many total domestic passengers were there ?",
            "sql": "select sum ( domestic_passengers ) from airport"
        },
        {
            "utterance": "What about international passengers ?",
            "sql": "select sum ( international_passengers ) from airport"
        },
        {
            "utterance": "Which airport had the most domestic passengers ?",
            "sql": "select airport_name from airport order by domestic_passengers desc limit value"
        },
        {
            "utterance": "What are the total number of Domestic Passengers of airports that contain the word `` London . ''",
            "sql": "select sum ( domestic_passengers ) from airport where airport_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all information on the airport that has the largest number of international passengers.",
        "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Number of international passengers per airport ? | Did you want the names of airports and their number of international passengers ? | Yes please .",
            "sql": "select airport_name , international_passengers from airport"
        },
        {
            "utterance": "Which of these has the largest number of intentional passengers ?",
            "sql": "select airport_name from airport order by international_passengers desc limit value"
        },
        {
            "utterance": "Ok. Can you show all the information for London Heathrow airport ?",
            "sql": "select * from airport where airport_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the maximum and minimum number of transit passengers of all aiports.",
        "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport"
    },
    "interaction": [
        {
            "utterance": "What are the maximum number of transit passengers of all airports ?",
            "sql": "select max ( transit_passengers ) from airport"
        },
        {
            "utterance": "What are the minimum number of transit passengers of all airports ?",
            "sql": "select min ( transit_passengers ) from airport"
        },
        {
            "utterance": "What is the average of all domestic passengers ?",
            "sql": "select avg ( domestic_passengers ) from airport"
        },
        {
            "utterance": "What airport name has the highest amount of international passengers ?",
            "sql": "select airport_name from airport order by international_passengers desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 10,
    "final": {
        "utterance": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "The column `` winning_pilot `` in Table : `` MATCH '' refers to column `` pilot_id '' in Table : `` pilot '' | Did you mean that you want to get Pilot Id ? | Yes",
            "sql": "select distinct t1 . pilot_id from pilot as t1 join match as t2 on t1 . pilot_id = t2 . winning_pilot"
        },
        {
            "utterance": "find the name and age of the pilot who has won the most number of times among the pilot who are younger than 30",
            "sql": "select t1 . name , t1 . age from pilot as t1 join match as t2 on t1 . pilot_id = t2 . winning_pilot where t1 . age < value group by t2 . winning_pilot order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    "interaction": [
        {
            "utterance": "plese list me about airports | Do you mean the airport ids of all the airports ? | Yes , I just needs the name of aircrafts in airports",
            "sql": "select aircraft from aircraft"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 0,
    "final": {
        "utterance": "How many registed students do each course have? List course name and the number of their registered students?",
        "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
    },
    "interaction": [
        {
            "utterance": "Could you please list each course 's name and the number of its registered students ?",
            "sql": "select t3 . course_name , count ( * ) from students as t1 join student_course_registrations as t2 on t1 . student_id = t2 . student_id join courses as t3 on t2 . course_id = t3 . course_id group by t2 . course_id"
        },
        {
            "utterance": "What are the student ids of all students who registered for statistics ?",
            "sql": "select t2 . student_id from students as t1 join student_course_registrations as t2 on t1 . student_id = t2 . student_id join courses as t3 on t2 . course_id = t3 . course_id where t3 . course_name = value"
        },
        {
            "utterance": "What are their student details , please ?",
            "sql": "select t1 . student_details from students as t1 join student_course_registrations as t2 on t1 . student_id = t2 . student_id join courses as t3 on t2 . course_id = t3 . course_id where t3 . course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the id of students who registered courses or attended courses?",
        "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    "interaction": [
        {
            "utterance": "Please list all IDs of students who have registered courses",
            "sql": "select student_id from student_course_registrations"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 2,
    "final": {
        "utterance": "How many students attend course English?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    "interaction": [
        {
            "utterance": "What is the Course Id for English",
            "sql": "select course_id from courses where course_name = value"
        },
        {
            "utterance": "how many different student ids are there ?",
            "sql": "select count ( distinct student_id ) from student_course_attendance"
        },
        {
            "utterance": "How many students enrolled in Course ID 302 ?",
            "sql": "select count ( * ) from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id where t2 . course_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the id of courses which are registered or attended by student whose id is 121?",
        "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
    },
    "interaction": [
        {
            "utterance": "how many courses did the student with id 121 register for ?",
            "sql": "select count ( course_id ) from student_course_registrations where student_id = value"
        },
        {
            "utterance": "And how many courses did the student attend ?",
            "sql": "select count ( * ) from student_course_attendance where student_id = value"
        },
        {
            "utterance": "show me the id of courses registered or attended by student whose id is 121",
            "sql": "select course_id from student_course_registrations where student_id = value union select course_id from student_course_attendance where student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 4,
    "final": {
        "utterance": "What is detail of the student who most recently registered course?",
        "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many course id in the table ?",
            "sql": "select count ( distinct course_id ) from student_course_registrations"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 5,
    "final": {
        "utterance": "Find id of the candidate who most recently accessed the course?",
        "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "yes | Here are all the candidates ' ids who got assessed . | which of those most recently had an assessment ?",
            "sql": "select candidate_id from candidate_assessments order by assessment_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 6,
    "final": {
        "utterance": "which course has most number of registered students?",
        "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "whats the course id of statistics",
            "sql": "select course_id from courses where course_name = value"
        },
        {
            "utterance": "whats the course description of french",
            "sql": "select course_description from courses where course_name = value"
        },
        {
            "utterance": "which course has most number of registered students ?",
            "sql": "select t1 . course_name from courses as t1 join student_course_registrations as t2 on t1 . course_id = t2 . course_id group by t1 . course_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 7,
    "final": {
        "utterance": "How many courses do the student whose id is 171 attend?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( distinct student_id ) from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id"
        },
        {
            "utterance": "And the amount of courses ?",
            "sql": "select count ( distinct t1 . course_id ) from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id"
        },
        {
            "utterance": "And how many courses did student 171 take ?",
            "sql": "select count ( * ) from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id where t2 . student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 8,
    "final": {
        "utterance": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
    },
    "interaction": [
        {
            "utterance": "Hello , how are you ! Can you provide me with a list of all of the email addresses in this database ?",
            "sql": "select email_address from people"
        },
        {
            "utterance": "Perfect ! Can you update the list to include all of the candidate IDs in addition to these email addresses ?",
            "sql": "select t2 . candidate_id , t1 . email_address from people as t1 join candidates as t2 on t1 . person_id = t2 . candidate_id"
        },
        {
            "utterance": "Can you filter this list to show only the row that contains the email address of stanley.monahan @ example.org ?",
            "sql": "select t2 . candidate_id , t1 . email_address from people as t1 join candidates as t2 on t1 . person_id = t2 . candidate_id where t1 . email_address = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 9,
    "final": {
        "utterance": "How many students attend course English?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    "interaction": [
        {
            "utterance": "tell me course name for course id 301 and 302 ?",
            "sql": "select course_name from courses where course_id = value or course_id = value"
        },
        {
            "utterance": "Tell me the date of attendance for the student id 111 and 121 ?",
            "sql": "select date_of_attendance from student_course_attendance where student_id = value or student_id = value"
        },
        {
            "utterance": "How many students attend course English ?",
            "sql": "select count ( * ) from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 10,
    "final": {
        "utterance": "what is id of students who registered some courses but the least number of courses in these students?",
        "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( student_id ) from student_course_registrations"
        },
        {
            "utterance": "what about courses ?",
            "sql": "select count ( course_id ) from student_course_registrations"
        },
        {
            "utterance": "how many students registered for just one course",
            "sql": "select count ( * ) from ( select student_id from student_course_registrations group by student_id having count ( * ) = value )"
        },
        {
            "utterance": "what are their ids ?",
            "sql": "select student_id from student_course_registrations group by student_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 11,
    "final": {
        "utterance": "Find distinct cities of address of students?",
        "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the student names and their associated addresses and cities ? | Hi . The following table is a list of all the student name details and their associated addresses line 1 and cities . | Thank you ! Can you filter the list to show just the rows that correspond with the 3 most recent `` date from '' values ?",
            "sql": "select t3 . student_details , t1 . city , t1 . line_1 from addresses as t1 join people_addresses as t2 on t1 . address_id = t2 . address_id join students as t3 on t2 . person_id = t3 . student_id order by date_from desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the id of the student who most recently registered course 301?",
        "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the id of the students who registered for course 301 ?",
            "sql": "select student_id from student_course_attendance where course_id = value"
        },
        {
            "utterance": "Which one of them registered the earliest ?",
            "sql": "select student_id from student_course_attendance where course_id = value order by date_of_attendance limit value"
        },
        {
            "utterance": "Which one registered most recently for that course ?",
            "sql": "select student_id from student_course_attendance where course_id = value order by date_of_attendance desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 13,
    "final": {
        "utterance": "List the id of students who registered some courses and the number of their registered courses?",
        "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many students are there in total ?",
            "sql": "select count ( * ) from students"
        },
        {
            "utterance": "Great ! Can you list the ids of these students , and filter the list by only the students who are registered for one or more courses ?",
            "sql": "select distinct t1 . student_id from students as t1 join student_course_registrations as t2 on t1 . student_id = t2 . student_id"
        },
        {
            "utterance": "Awesome ! Can you also add to this list the number of registered courses for each of these students ?",
            "sql": "select t1 . student_id , count ( * ) from students as t1 join student_course_registrations as t2 on t1 . student_id = t2 . student_id group by t1 . student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    "interaction": [
        {
            "utterance": "What is the name of candidate id 111 ?",
            "sql": "select t3 . first_name , t3 . middle_name , t3 . last_name from candidates as t1 join candidate_assessments as t2 on t1 . candidate_id = t2 . candidate_id join people as t3 on t1 . candidate_id = t3 . person_id where t1 . candidate_id = value"
        },
        {
            "utterance": "What is the email address of login id zops ?",
            "sql": "select t3 . email_address from candidates as t1 join candidate_assessments as t2 on t1 . candidate_id = t2 . candidate_id join people as t3 on t1 . candidate_id = t3 . person_id where t3 . login_name = value"
        },
        {
            "utterance": "What is the assessment date of candidate id 121 ?",
            "sql": "select t2 . assessment_date from candidates as t1 join candidate_assessments as t2 on t1 . candidate_id = t2 . candidate_id join people as t3 on t1 . candidate_id = t3 . person_id where t2 . candidate_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 15,
    "final": {
        "utterance": "What are all info of students who registered courses but not attended courses?",
        "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    "interaction": [
        {
            "utterance": "Which students did n't attend courses ?",
            "sql": "select * from student_course_registrations where student_id not in ( select student_id from student_course_attendance )"
        },
        {
            "utterance": "How about student that did attend courses ?",
            "sql": "select * from student_course_registrations where student_id in ( select student_id from student_course_attendance )"
        },
        {
            "utterance": "On what date did the courses start ? | Do you mean the registration date of students or the date of attendance of students ? | Registration date",
            "sql": "select registration_date from student_course_registrations"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 16,
    "final": {
        "utterance": "List the id of students who attended  statistics courses in the order of attendance date.",
        "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
    },
    "interaction": [
        {
            "utterance": "what is the course id of English course ?",
            "sql": "select course_id from courses where course_name = value"
        },
        {
            "utterance": "name the student ids who attend the statastic course ? in order of attendance date",
            "sql": "select t2 . student_id from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value order by t2 . date_of_attendance"
        },
        {
            "utterance": "what is the date of attendance of the student is 121 ? | the date of attendance of the student with id 121 is 2012-04-09 11:44:34 . | which student id attend english and french both course ?",
            "sql": "select t2 . student_id from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value intersect select t2 . student_id from courses as t1 join student_course_attendance as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    "interaction": [
        {
            "utterance": "how many authorship there",
            "sql": "select count ( * ) from authors"
        },
        {
            "utterance": "what is the country of University of Oxford",
            "sql": "select country from inst where name = value"
        },
        {
            "utterance": "what is the title of paper ID 200",
            "sql": "select title from papers where paperid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which paper's title contains the word \"Database\"?",
        "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    "interaction": [
        {
            "utterance": "how many papers are presented on the table",
            "sql": "select count ( * ) from papers"
        },
        {
            "utterance": "please list out the paper id",
            "sql": "select paperid from papers"
        },
        {
            "utterance": "how many title are presented on the table",
            "sql": "select count ( title ) from papers"
        },
        {
            "utterance": "please list out the titles on the table",
            "sql": "select title from papers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".",
        "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\""
    },
    "interaction": [
        {
            "utterance": "yes | What information do you want to know about the author ? The ID , first , or last name ? | first and last name",
            "sql": "select t1 . fname , t1 . lname from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid where t3 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
        "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    "interaction": [
        {
            "utterance": "What are the paper id of Gibbons ?",
            "sql": "select distinct paperid from authors as t1 join authorship as t2 on t1 . authid = t2 . authid where t1 . lname = value"
        },
        {
            "utterance": "Who studied at Norterstein University ? | did You mean list the name of authors who belong to the institution `` Northeastern University '' | Yes",
            "sql": "select distinct t1 . fname , t1 . lname from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value"
        },
        {
            "utterance": "What are the auth id of Ralf ?",
            "sql": "select authid from authors where fname = value"
        },
        {
            "utterance": "Which authors belong to the institution `` Google '' ? Show the first names and last names ?",
            "sql": "select distinct t1 . fname , t1 . lname from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    "interaction": [
        {
            "utterance": "Hi ! What is the name of the institution that `` Mathias Blume '' is associated with ?",
            "sql": "select distinct t3 . name from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join inst as t3 on t2 . instid = t3 . instid where t1 . fname = value and t1 . lname = value"
        },
        {
            "utterance": "How many papers does Mathias Blume have authorship of ?",
            "sql": "select count ( t1 . authid ) from authorship as t1 join authors as t2 on t1 . authid = t2 . authid where t2 . fname = value and t2 . lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which institution does \"Katsuhiro Ueno\" belong to?",
        "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""
    },
    "interaction": [
        {
            "utterance": "What institution does `` Katsuhiro Ueno '' belong to ?",
            "sql": "select distinct t3 . name from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join inst as t3 on t2 . instid = t3 . instid where t1 . fname = value and t1 . lname = value"
        },
        {
            "utterance": "What is Katsuhiro Ueno 's author ID ?",
            "sql": "select authid from authors where fname = value and lname = value"
        },
        {
            "utterance": "Okay . What country is Tohoku University located in ?",
            "sql": "select country from inst where name = value"
        },
        {
            "utterance": "What is Tohoku University 's institution ID ?",
            "sql": "select instid from inst where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the organization that has published the largest number of papers.",
        "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the organization that has published the largest number of papers ?",
            "sql": "select t1 . name from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the Country code for University of Oxford ?",
            "sql": "select country from inst where name = value"
        },
        {
            "utterance": "What is the instID code for University of Oxford ?",
            "sql": "select instid from inst where name = value"
        },
        {
            "utterance": "What is the paperID code for University of Oxford ?",
            "sql": "select distinct t1 . paperid from papers as t1 join authorship as t2 join inst as t3 where t3 . name = value"
        },
        {
            "utterance": "What is the Title of paperID 200 ?",
            "sql": "select title from papers where paperid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the papers published under the institution \"Indiana University\"?",
        "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    "interaction": [
        {
            "utterance": "what is the name of the papers publishes by Indiana University",
            "sql": "select distinct t1 . title from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value"
        },
        {
            "utterance": "what is the paper id ?",
            "sql": "select paperid from papers where title = ( select distinct t1 . title from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value )"
        },
        {
            "utterance": "what is the author count ?",
            "sql": "select count ( * ) from authorship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the organization that has published the largest number of papers.",
        "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the organization that published the greatest number of papers ?",
            "sql": "select t1 . name from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of the organization that published the least number of papers ?",
            "sql": "select t1 . name from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . name order by count ( * ) asc limit value"
        },
        {
            "utterance": "What are the titles of all the papers Google published ?",
            "sql": "select t3 . title from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\""
    },
    "interaction": [
        {
            "utterance": "Which papers were published in an institution in the `` USA '' please ?",
            "sql": "select t3 . title from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid join inst as t4 on t2 . instid = t4 . instid where t4 . country = value"
        },
        {
            "utterance": "Can you please tell me which ones of those have `` Turon '' as their second author ?",
            "sql": "select t3 . title from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid join inst as t4 on t2 . instid = t4 . instid where t4 . country = value and t2 . authorder = value and t1 . lname = value"
        },
        {
            "utterance": "What is Turon 's author id ?",
            "sql": "select authid from authors where lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the papers published under the institution \"Indiana University\"?",
        "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all paper IDs and paper titles that correspond to `` Indiana University '' ?",
            "sql": "select distinct t1 . title , t1 . paperid from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value"
        },
        {
            "utterance": "Great ! Can you please list all of the author Ids that are associated with that paper title ?",
            "sql": "select distinct t2 . authid from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid where t1 . title = ( select distinct t1 . title from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value )"
        },
        {
            "utterance": "Great ! Can you tell me what the total number of papers are for each of these author IDs ? ... in other words , how many papers have each of these authors published ?",
            "sql": "select authid , count ( * ) from authorship group by authid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Retrieve the title of the paper that has the largest number of authors.",
        "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    "interaction": [
        {
            "utterance": "What is the title of the paper that has the largest number of authors ?",
            "sql": "select t2 . title from authorship as t1 join papers as t2 on t1 . paperid = t2 . paperid where t1 . authorder = ( select max ( authorder ) from authorship )"
        },
        {
            "utterance": "How many authors are there ?",
            "sql": "select count ( distinct authid ) from authorship"
        },
        {
            "utterance": "What is the title of the paper that has the smallest number of authors ?",
            "sql": "select t2 . title from authorship as t1 join papers as t2 on t1 . paperid = t2 . paperid where t1 . authorder = ( select min ( authorder ) from authorship )"
        },
        {
            "utterance": "What is the average number of authors for all titles ?",
            "sql": "select paperid , avg ( authorder ) from authorship group by paperid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Retrieve the country that has published the most papers.",
        "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which country published the least papers ?",
            "sql": "select t1 . country from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . country order by count ( * ) limit value"
        },
        {
            "utterance": "How about country with most papers ?",
            "sql": "select t1 . country from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . country order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many papers did it publish ?",
            "sql": "select count ( t3 . paperid ) from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . country order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Retrieve the title of the paper that has the largest number of authors.",
        "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    "interaction": [
        {
            "utterance": "What are the titles of the papers ?",
            "sql": "select title from papers"
        },
        {
            "utterance": "Which titles have more than one author ?",
            "sql": "select t2 . title from authorship as t1 join papers as t2 on t1 . paperid = t2 . paperid where t1 . authorder > value"
        },
        {
            "utterance": "Which title has the most authors ?",
            "sql": "select t2 . title from authorship as t1 join papers as t2 on t1 . paperid = t2 . paperid where t1 . authorder = ( select max ( authorder ) from authorship )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""
    },
    "interaction": [
        {
            "utterance": "can you give me the last names of the authors ?",
            "sql": "select lname from authors"
        },
        {
            "utterance": "who authored the paper Binders Unbound ? | What information do you want about the author of the paper Binders Unbound ? | i want their names",
            "sql": "select t1 . fname , t1 . lname from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid where t3 . title = value"
        },
        {
            "utterance": "can you just show me their last names ?",
            "sql": "select t1 . lname from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid where t3 . title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find all the papers published by \"Aaron Turon\".",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    "interaction": [
        {
            "utterance": "Please find all the papers published by `` Aaron Turon '' ?",
            "sql": "select t3 . title from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid where t1 . fname = value and t1 . lname = value"
        },
        {
            "utterance": "Please find all the papers published by `` Ralf Hinze '' ?",
            "sql": "select t3 . title from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid where t1 . fname = value and t1 . lname = value"
        },
        {
            "utterance": "Can you add the paper IDs of those to the table please ?",
            "sql": "select t3 . title , t3 . paperid from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid where t1 . fname = value and t1 . lname = value"
        },
        {
            "utterance": "What is the name of the author who wrote the most papers ? | Do you mean the fname or lname ? | Both please",
            "sql": "select t1 . lname , t1 . fname from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . authid order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the lname and fname of all authors that wrote exactly 1 paper ?",
            "sql": "select t1 . lname , t1 . fname from authors as t1 join authorship as t2 on t1 . authid = t2 . authid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . authid having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Retrieve the country that has published the most papers.",
        "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "retrieve the country that has published the least papers ?",
            "sql": "select t1 . country from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . country order by count ( * ) limit value"
        },
        {
            "utterance": "retrieve the country that has published the most papers ?",
            "sql": "select t1 . country from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid group by t1 . country order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is count of most papers which is USA has published ?",
            "sql": "select t1 . country , count ( * ) from inst as t1 join authorship as t2 on t1 . instid = t2 . instid join papers as t3 on t2 . paperid = t3 . paperid where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many papers are published by the institution \"Tokohu University\"?",
        "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
    },
    "interaction": [
        {
            "utterance": "What is the number of papers published by Tokohu University",
            "sql": "select count ( distinct t1 . title ) from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value"
        },
        {
            "utterance": "What about the numbers of papers published by University of Oxford ?",
            "sql": "select count ( distinct t1 . title ) from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid where t3 . name = value"
        },
        {
            "utterance": "Do you have a comparison of how many papers were published by each institution ?",
            "sql": "select t3 . name , count ( distinct t1 . title ) from papers as t1 join authorship as t2 on t1 . paperid = t2 . paperid join inst as t3 on t2 . instid = t3 . instid group by t3 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of the First and Last names of all authors with the last name of `` Ohori '' ?",
            "sql": "select fname , lname from authors where lname = value"
        },
        {
            "utterance": "Thank you so much ! Can you please provide me with Atsushi Ohori 's author ID ?",
            "sql": "select authid from authors where lname = value and fname = value"
        },
        {
            "utterance": "Can you please provide me with a list of all paper IDs that are associated with author ID 57 ?",
            "sql": "select paperid from authorship where authid = value"
        },
        {
            "utterance": "Thank you ! Can you provide me with the paper title of PaperID 204 ?",
            "sql": "select title from papers where paperid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id and location of circuits that belong to France or Belgium?",
        "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
    },
    "interaction": [
        {
            "utterance": "Hello , how many circuits belong to France ?",
            "sql": "select count ( * ) from circuits where country = value"
        },
        {
            "utterance": "Can you please provide their circuit IDs ?",
            "sql": "select circuitid from circuits where country = value"
        },
        {
            "utterance": "Can you also include the location of these circuits ?",
            "sql": "select circuitid , location from circuits where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
    },
    "interaction": [
        {
            "utterance": "Can you provide me with a list of all of the names of the races ?",
            "sql": "select name from races"
        },
        {
            "utterance": "Which of these races are held after 12:00:00 ?",
            "sql": "select name from races where time > value"
        },
        {
            "utterance": "Can you list the races that are held before 09:00:00 ?",
            "sql": "select name from races where time < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
    },
    "interaction": [
        {
            "utterance": "Hi , What are the unique names of races that are held in Spain ?",
            "sql": "select distinct t1 . name from races as t1 join circuits as t2 on t1 . circuitid = t2 . circuitid where t2 . country = value"
        },
        {
            "utterance": "Where is the European Grand Prix held ? | Do you want to return the location , country or latitude and longitude ? | Country please .",
            "sql": "select distinct t2 . country from races as t1 join circuits as t2 on t1 . circuitid = t2 . circuitid where t1 . name = value"
        },
        {
            "utterance": "What year was the last European Grand Prix held in Spain ?",
            "sql": "select t1 . year from races as t1 join circuits as t2 on t1 . circuitid = t2 . circuitid where t2 . country = value order by t1 . year desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
    },
    "interaction": [
        {
            "utterance": "what are race circuits in Spain",
            "sql": "select name from circuits where country = value"
        },
        {
            "utterance": "races held after 2017",
            "sql": "select t1 . name from races as t1 join circuits as t2 on t1 . circuitid = t2 . circuitid where t1 . year > value"
        },
        {
            "utterance": "races held after 2017 in spain circuits",
            "sql": "select t1 . name from races as t1 join circuits as t2 on t1 . circuitid = t2 . circuitid where t2 . country = value and t1 . year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "What are the drivers ' last names who had 11 pit stops and participated in more than 5 race results ?",
            "sql": "select t1 . surname , t1 . driverid from drivers as t1 join pitstops as t2 on t1 . driverid = t2 . driverid group by t1 . driverid having count ( * ) = value intersect select t1 . surname , t1 . driverid from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid group by t1 . driverid having count ( * ) > value"
        },
        {
            "utterance": "What are the drivers ' last names who had 11 pit stops ?",
            "sql": "select t1 . surname , t1 . driverid from drivers as t1 join pitstops as t2 on t1 . driverid = t2 . driverid group by t1 . driverid having count ( * ) = value"
        },
        {
            "utterance": "What are the race ids that the driver with the surname Nakajima was in ?",
            "sql": "select t2 . raceid from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid where t1 . surname = value"
        },
        {
            "utterance": "How many wins does that driver have ?",
            "sql": "select count ( * ) from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid where t1 . surname = value and t2 . rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "What are the driver 's names ?",
            "sql": "select forename , surname from drivers"
        },
        {
            "utterance": "How many of them participated in more than 5 races ?",
            "sql": "select count ( * ) from ( select ( t1 . driverid ) from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid group by t1 . driverid having count ( * ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Find the id , forename and number of races of all drivers who have at least participated in two races ?",
            "sql": "select t1 . driverid , t1 . forename , count ( * ) from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid group by t1 . driverid having count ( * ) > = value"
        },
        {
            "utterance": "What is the driver reference and nationality of Fernando ? | Do you mean the driver reference and nationality of the driver whose forename is Fernando ? | Yes",
            "sql": "select driverref , nationality from drivers where forename = value"
        },
        {
            "utterance": "What position and how many wins does the forename Fernando have ? | Do you mean the position of the driver with forename Fernando when he ranked 1 and the number of times that he ranked 1 ? | yes",
            "sql": "select t2 . position , count ( * ) from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid where t1 . forename = value and rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id and last name of the driver who participated in the most races after 2010?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id and last name of the driver who participated in the most races after 2010 ?",
            "sql": "select t1 . driverid , t1 . surname from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid where t3 . year > value group by t1 . driverid order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the id of the driver who participated in the least races after 2010 ?",
            "sql": "select t1 . driverid from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid where t3 . year > value group by t1 . driverid order by count ( * ) limit value"
        },
        {
            "utterance": "Hmm . Can you also give me his last name .",
            "sql": "select t1 . surname from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid where t3 . year > value group by t1 . driverid order by count ( * ) limit value"
        },
        {
            "utterance": "Okay . How many races did he participate in ?",
            "sql": "select count ( * ) from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid where t3 . year > value group by t1 . driverid order by count ( * ) limit value"
        },
        {
            "utterance": "How many races did Hamilton participate in after 2010 ?",
            "sql": "select count ( * ) from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid where t3 . year > value and t1 . surname = value group by t1 . driverid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the forename and surname of the driver who has the smallest laptime?",
        "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you give me a list of all of the forenames and surnames of the various drivers ?",
            "sql": "select forename , surname from drivers"
        },
        {
            "utterance": "Great ! Can you filter this list to show just the forename and surname of the driver who has the smallest lap time ?",
            "sql": "select t1 . forename , t1 . surname from drivers as t1 join laptimes as t2 on t1 . driverid = t2 . driverid order by t2 . milliseconds limit value"
        },
        {
            "utterance": "Perfect ! Can you tell me what the nationality or country of origin of Lewis and Hamilton is ?",
            "sql": "select nationality from drivers where forename = value and surname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id and surname of the driver who participated the most number of races?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many drivers are there , total ?",
            "sql": "select count ( * ) from drivers"
        },
        {
            "utterance": "of these total drivers , how many countries are represented ?",
            "sql": "select count ( distinct nationality ) from drivers"
        },
        {
            "utterance": "and of those 41 countries , which one has the most drivers ?",
            "sql": "select nationality from drivers group by nationality order by count ( * ) desc limit value"
        },
        {
            "utterance": "please give me the name of the driver",
            "sql": "select t1 . forename , t1 . surname from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid where t1 . nationality = value order by fastestlapspeed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    "interaction": [
        {
            "utterance": "Hi , how many years has the Monaco Grand Prix been held ? | Would you like the number of distinct years found for races ? | yes please !",
            "sql": "select count ( distinct year ) from races"
        },
        {
            "utterance": "okay great - can you tell me the maximum fastest lap speed during this race ?",
            "sql": "select max ( t2 . fastestlapspeed ) from races as t1 join results as t2 on t1 . raceid = t2 . raceid where t1 . year = value and t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the id and family name of the driver who has the longest laptime?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name id of the person with the longest laptime ? | Do you mean driver id ? | yes",
            "sql": "select t1 . driverid from drivers as t1 join laptimes as t2 on t1 . driverid = t2 . driverid order by t2 . milliseconds desc limit value"
        },
        {
            "utterance": "what is the date of birth ?",
            "sql": "select t1 . driverid , t1 . dob from drivers as t1 join laptimes as t2 on t1 . driverid = t2 . driverid order by t2 . milliseconds desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the name of the race held most recently?",
        "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many races has there been ?",
            "sql": "select count ( * ) from races"
        },
        {
            "utterance": "When was the oldest one ? | Did you mean the date | Yes",
            "sql": "select date from races order by date limit value"
        },
        {
            "utterance": "How about the most recent one ? | Did you just want to know the recent date ? | Yes",
            "sql": "select date from races order by date desc limit value"
        },
        {
            "utterance": "Actually , can you also give me the name of that race ?",
            "sql": "select name , date from races order by date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the name and date of the most recent race?",
        "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the forename of all races",
            "sql": "select name from races"
        },
        {
            "utterance": "what is the forename of the race that occurred most recently ?",
            "sql": "select name , date from races order by date desc limit value"
        },
        {
            "utterance": "what is its code ? | Do you mean circuit id ? | yes",
            "sql": "select name , circuitid from races order by date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"
    },
    "interaction": [
        {
            "utterance": "How many drivers have participated in 30 or fewer races ?",
            "sql": "select count ( * ) from ( select t1 . driverid from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid group by t1 . driverid having count ( * ) < = value )"
        },
        {
            "utterance": "What are the ID 's of those drivers ?",
            "sql": "select t1 . driverid from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid group by t1 . driverid having count ( * ) < = value"
        },
        {
            "utterance": "How many races did each of these drivers participate in ?",
            "sql": "select t1 . driverid , count ( * ) from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid group by t1 . driverid"
        },
        {
            "utterance": "How many of those drivers placed in the top 3 of any race ?",
            "sql": "select t1 . driverid from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid join races as t3 on t2 . raceid = t3 . raceid group by t1 . driverid having t2 . rank < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "Hello , how many drivers are there in total ?",
            "sql": "select count ( * ) from drivers"
        },
        {
            "utterance": "Perfect , how many drivers had 11 pit stops and participated in more than 5 total races ?",
            "sql": "select count ( * ) from ( select t1 . surname , t1 . driverid from drivers as t1 join pitstops as t2 on t1 . driverid = t2 . driverid group by t1 . driverid having count ( * ) = value intersect select t1 . surname , t1 . driverid from drivers as t1 join results as t2 on t1 . driverid = t2 . driverid group by t1 . driverid having count ( * ) > value )"
        },
        {
            "utterance": "Okay , which driver had the most amount of pit stops ?",
            "sql": "select t1 . driverid from drivers as t1 join pitstops as t2 on t1 . driverid = t2 . driverid group by t1 . driverid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
        "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list driver iDs for all drivers that had first position in laptime at least twice ?",
            "sql": "select t1 . driverid from drivers as t1 join laptimes as t2 on t1 . driverid = t2 . driverid where position = value group by t1 . driverid having count ( * ) > = value"
        },
        {
            "utterance": "Can you list all driver IDs ?",
            "sql": "select driverid from drivers"
        },
        {
            "utterance": "Can you add to the table the forenames and surnames associated with each driver id ?",
            "sql": "select driverid , forename , surname from drivers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50"
    },
    "interaction": [
        {
            "utterance": "Hi , can you please tell me what is the ID of the station whose maximum precipitation is higher than 50 ?",
            "sql": "select t2 . id from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id group by t1 . station_id having max ( t1 . precipitation ) > value"
        },
        {
            "utterance": "thank you , could you please also let me know their names and local authorities ?",
            "sql": "select t2 . id , t2 . network_name , t2 . local_authority from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id group by t1 . station_id having max ( t1 . precipitation ) > value"
        },
        {
            "utterance": "that was quick , thank you again . then could you please let me know if there is any station which has less than 10 maximum precipitation ?",
            "sql": "select t2 . id from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id group by t1 . station_id having max ( t1 . precipitation ) < value"
        },
        {
            "utterance": "seems like everybody will have some rain here.. then could you please let me know what is the lowest precipitation we have on the table ?",
            "sql": "select min ( precipitation ) from weekly_weather"
        },
        {
            "utterance": "could you please let me know the ID of the stations with 10 precipitation ?",
            "sql": "select t2 . id from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id where t1 . precipitation = value"
        },
        {
            "utterance": "what would be the name of the station ?",
            "sql": "select t2 . id , t2 . network_name from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id where t1 . precipitation = value"
        },
        {
            "utterance": "Then my last inquiry , could you please let me know Amersham 's high temperature and wind speed on Friday ?",
            "sql": "select t1 . high_temperature , t1 . wind_speed_mph from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id where t1 . day_of_week = value and t2 . network_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the origins from which more than 1 train starts.",
        "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many origin in the train table",
            "sql": "select count ( distinct origin ) from train"
        },
        {
            "utterance": "what highest time in the train table",
            "sql": "select time from train order by time desc limit value"
        },
        {
            "utterance": "how many train number in the train table",
            "sql": "select count ( train_number ) from train"
        },
        {
            "utterance": "how many interval in the trail table",
            "sql": "select count ( interval ) from train"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 2,
    "final": {
        "utterance": "How many trains have 'Express' in their names?",
        "sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\""
    },
    "interaction": [
        {
            "utterance": "how many trains have express in their names ?",
            "sql": "select count ( * ) from train where name like value"
        },
        {
            "utterance": "what is the destination for Ananthapuri Express ?",
            "sql": "select destination from train where name = value"
        },
        {
            "utterance": "give me the train number",
            "sql": "select train_number from train where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of the train whose route runs through greatest number of stations.",
        "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I need to know which train route passes through the most stations , please .",
            "sql": "select t1 . name from train as t1 join route as t2 on t1 . id = t2 . train_id group by t2 . train_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many stations does this train run through ?",
            "sql": "select count ( * ) from train as t1 join route as t2 on t1 . id = t2 . train_id group by t2 . train_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the names of those stations ?",
            "sql": "select t2 . station_id from train as t1 join route as t2 on t1 . id = t2 . train_id group by t2 . train_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME"
    },
    "interaction": [
        {
            "utterance": "Give me the times of all trains that go to Chennai",
            "sql": "select time from train where destination = value"
        },
        {
            "utterance": "Show me the numbers of all trains that go to Chennai",
            "sql": "select count ( * ) from train where destination = value"
        },
        {
            "utterance": "Show me the train number of all trains that go to Chennai",
            "sql": "select train_number from train where destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 5,
    "final": {
        "utterance": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME"
    },
    "interaction": [
        {
            "utterance": "What are the times of trains that go to chennai ?",
            "sql": "select time from train where destination = value"
        },
        {
            "utterance": "What are the trains names that go to chennai ?",
            "sql": "select name from train where destination = value"
        },
        {
            "utterance": "What is the origin of Ananthapuri express ?",
            "sql": "select origin from train where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 6,
    "final": {
        "utterance": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "sql": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\""
    },
    "interaction": [
        {
            "utterance": "hi , what is the maximum low temperature at Amersham station ?",
            "sql": "select max ( t1 . low_temperature ) from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id where t2 . network_name = value"
        },
        {
            "utterance": "on what day was it ? | Did you mean the day of week in weekly weather table | Yes , in what say was the maximum low temperature in Amersham station .",
            "sql": "select t1 . day_of_week from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id where t2 . network_name = value order by low_temperature desc limit value"
        },
        {
            "utterance": "Can you tell me what is the average precipitation at the Amersham station ?",
            "sql": "select avg ( t1 . precipitation ) from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id where t2 . network_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 7,
    "final": {
        "utterance": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "sql": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all train names for trains that are associated with the local authority of Chiltern ?",
            "sql": "select distinct t3 . name from station as t1 join route as t2 on t1 . id = t2 . station_id join train as t3 on t2 . train_id = t3 . id where t1 . local_authority = value"
        },
        {
            "utterance": "That 's great ! Can you update that list to also include all of the arrival times for the trains that have Chiltern listed as their station 's local authority ?",
            "sql": "select t3 . name , t3 . time from station as t1 join route as t2 on t1 . id = t2 . station_id join train as t3 on t2 . train_id = t3 . id where t1 . local_authority = value"
        },
        {
            "utterance": "Great ! Finally , can you update this list to also include The train ID and train number for each ?",
            "sql": "select t3 . name , t3 . time , t3 . train_number , t2 . train_id from station as t1 join route as t2 on t1 . id = t2 . station_id join train as t3 on t2 . train_id = t3 . id where t1 . local_authority = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of trains for each station, as well as the station network name and services.",
        "sql": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"
    },
    "interaction": [
        {
            "utterance": "How many trains are there per station ?",
            "sql": "select t2 . station_id , count ( * ) from station as t1 join route as t2 on t1 . id = t2 . station_id group by t2 . station_id"
        },
        {
            "utterance": "What are the station network names ?",
            "sql": "select network_name from station"
        },
        {
            "utterance": "What services do they offer ?",
            "sql": "select services from station"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id and local authority of the station with has the highest average high temperature.",
        "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which station has the highest average high temperature ? | Which attributes of this station do you want ? | The station name .",
            "sql": "select t2 . network_name from weekly_weather as t1 join station as t2 on t1 . station_id = t2 . id group by t1 . station_id order by avg ( high_temperature ) desc limit value"
        },
        {
            "utterance": "What is Charleywood 's ID ?",
            "sql": "select id from station where network_name = value"
        },
        {
            "utterance": "What is the local authority of Chorleywood , ID 10 ?",
            "sql": "select local_authority from station where network_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the number of trains for each station, as well as the station network name and services.",
        "sql": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"
    },
    "interaction": [
        {
            "utterance": "* I have left the chat *",
            "sql": "select count ( * ) from station as t1 join route as t2 on t1 . id = t2 . station_id group by t2 . station_id"
        },
        {
            "utterance": "what are the station network name and services for these station",
            "sql": "select t1 . network_name , t1 . services from station as t1 join route as t2 on t1 . id = t2 . station_id group by t2 . station_id"
        },
        {
            "utterance": "include station id in the list",
            "sql": "select t1 . network_name , t1 . services , station_id from station as t1 join route as t2 on t1 . id = t2 . station_id group by t2 . station_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 11,
    "final": {
        "utterance": "show the lowest low temperature and highest wind speed in miles per hour.",
        "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather"
    },
    "interaction": [
        {
            "utterance": "Show all the low temperatures .",
            "sql": "select low_temperature from weekly_weather"
        },
        {
            "utterance": "Show the highest low temperature .",
            "sql": "select max ( low_temperature ) from weekly_weather"
        },
        {
            "utterance": "Show all the wind speeds in miles per hour .",
            "sql": "select wind_speed_mph from weekly_weather"
        },
        {
            "utterance": "List all the winds speeds in ascending order .",
            "sql": "select wind_speed_mph from weekly_weather order by wind_speed_mph"
        },
        {
            "utterance": "Show the lowest low temperature and the highest wind speed in miles per hour .",
            "sql": "select min ( wind_speed_mph ) , max ( wind_speed_mph ) from weekly_weather order by wind_speed_mph"
        },
        {
            "utterance": "What day of the week has the lowest low temperature .",
            "sql": "select day_of_week , min ( wind_speed_mph ) from weekly_weather order by wind_speed_mph"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the id and details of the customers who have at least 3 events?",
        "sql": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "What is the id of the customer with at least 3 events ?",
            "sql": "select ( t1 . customer_id ) from customers as t1 join customer_events as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the details for the customer with at least 3 events ?",
            "sql": "select t1 . customer_details from customers as t1 join customer_events as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"
    },
    "interaction": [
        {
            "utterance": "how many Services there",
            "sql": "select count ( * ) from services"
        },
        {
            "utterance": "what is the Check of service_id | Do you mean the service_id of all services with service_type_code `` Check '' ? | ok",
            "sql": "select service_id from services where service_type_code = value"
        },
        {
            "utterance": "how many Organizations there",
            "sql": "select count ( * ) from organizations"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"
    },
    "interaction": [
        {
            "utterance": "I 'm looking for the things with Close status before 2017-06-19 02:59:21 | Do you want things that satisfy both criteria or at least at of them ? And do you want the ids or other ? | I want the number of things in a close status",
            "sql": "select count ( distinct thing_id ) from timed_status_of_things where status_of_thing_code = value"
        },
        {
            "utterance": "of those things which are closed before 2017-06-19 02:59:21 | Do you still want the number of them ? | Yes",
            "sql": "select count ( distinct thing_id ) from timed_status_of_things where status_of_thing_code = value and date_and_date < value"
        },
        {
            "utterance": "What type of thing are all five of those ?",
            "sql": "select distinct t2 . type_of_thing_code from timed_status_of_things as t1 join things as t2 on t1 . thing_id = t2 . thing_id where t1 . status_of_thing_code = value and t1 . date_and_date < value"
        },
        {
            "utterance": "What is the distinct ID of elctronics or Commen ?",
            "sql": "select distinct thing_id from things where type_of_thing_code = value or type_of_thing_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 3,
    "final": {
        "utterance": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'"
    },
    "interaction": [
        {
            "utterance": "How many distinct locations have the things with service detail 'Unsatisfied ' been located in ?",
            "sql": "select count ( distinct t2 . location_code ) from things as t1 join timed_locations_of_things as t2 on t1 . thing_id = t2 . thing_id where t1 . service_details = value"
        },
        {
            "utterance": "How many type of thing code includes 'Electronics ' ? | Do you mean how many things include type of thing code 'Electronics ' ? | Yes",
            "sql": "select count ( distinct thing_id ) from things where type_of_thing_code = value"
        },
        {
            "utterance": "What are the service details of thing id 2 ?",
            "sql": "select service_details from things where thing_id = value"
        },
        {
            "utterance": "What is the service type code of thing id 2 ?",
            "sql": "select service_type_code from things where thing_id = value"
        },
        {
            "utterance": "What is the location code of thing id 10 and the date and time ?",
            "sql": "select location_code , date_and_time from timed_locations_of_things where thing_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 4,
    "final": {
        "utterance": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "sql": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many services has each resident requested",
            "sql": "select t1 . resident_id , count ( * ) from residents as t1 join residents_services as t2 on t1 . resident_id = t2 . resident_id group by t1 . resident_id"
        },
        {
            "utterance": "List the resident_id , details , and the count in descending order of the count",
            "sql": "select t1 . resident_id , t1 . other_details , count ( * ) from residents as t1 join residents_services as t2 on t1 . resident_id = t2 . resident_id group by t1 . resident_id order by count ( * ) desc"
        },
        {
            "utterance": "Tell me the count of total number of residents",
            "sql": "select count ( * ) from residents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"
    },
    "interaction": [
        {
            "utterance": "What organization id Denesik and Sons Party ?",
            "sql": "select organization_id from organizations where organization_details = value"
        },
        {
            "utterance": "What are the service type code of service id 10 ?",
            "sql": "select service_type_code from services where service_id = value"
        },
        {
            "utterance": "What organization details of service id 11 ?",
            "sql": "select t2 . organization_details from services as t1 join organizations as t2 on t1 . organization_id = t2 . organization_id where t1 . service_id = value"
        },
        {
            "utterance": "What is the distinct service type that are provided by the organization which has detail 'Denesik and Sons Party ' ?",
            "sql": "select distinct t1 . service_type_code from services as t1 join organizations as t2 on t1 . organization_id = t2 . organization_id where t2 . organization_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 6,
    "final": {
        "utterance": "Which organizations are not a parent organization of others? List the organization id.",
        "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations"
    },
    "interaction": [
        {
            "utterance": "How many organizations are there ?",
            "sql": "select count ( organization_id ) from organizations"
        },
        {
            "utterance": "How many of those organizations are parent organizations ?",
            "sql": "select organization_id from organizations where organization_id in ( select parent_organization_id from organizations )"
        },
        {
            "utterance": "Could you tell me how many organizations are not parent organizations of others ?",
            "sql": "select count ( organization_id ) from organizations where organization_id not in ( select parent_organization_id from organizations )"
        },
        {
            "utterance": "What is the full name of that organization ?",
            "sql": "select organization_id from organizations except select parent_organization_id from organizations"
        },
        {
            "utterance": "What about its organization ID ?",
            "sql": "select organization_id from organizations except select parent_organization_id from organizations"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 7,
    "final": {
        "utterance": "Which events have the number of notes between one and three? List the event id and the property id.",
        "sql": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3"
    },
    "interaction": [
        {
            "utterance": "Which events only have 1 note ?",
            "sql": "select t1 . customer_event_id from customer_events as t1 join customer_event_notes as t2 on t1 . customer_event_id = t2 . customer_event_id group by t1 . customer_event_id having count ( * ) = value"
        },
        {
            "utterance": "What about events that have 2 or 3 notes as well ? Can you add those to the list .",
            "sql": "select t1 . customer_event_id from customer_events as t1 join customer_event_notes as t2 on t1 . customer_event_id = t2 . customer_event_id group by t1 . customer_event_id having count ( * ) between value and value"
        },
        {
            "utterance": "Can you show all the events that have one , two or three notes with their property ids ?",
            "sql": "select t1 . customer_event_id , t1 . property_id from customer_events as t1 join customer_event_notes as t2 on t1 . customer_event_id = t2 . customer_event_id group by t1 . customer_event_id having count ( * ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 8,
    "final": {
        "utterance": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "sql": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many services has each resident requested ?",
            "sql": "select t1 . resident_id , count ( * ) from residents as t1 join residents_services as t2 on t1 . resident_id = t2 . resident_id group by t1 . resident_id order by count ( * ) desc"
        },
        {
            "utterance": "Can you list them in descending order ?",
            "sql": "select t1 . resident_id , count ( * ) from residents as t1 join residents_services as t2 on t1 . resident_id = t2 . resident_id group by t1 . resident_id order by count ( * ) desc"
        },
        {
            "utterance": "Can you list the residents by the count of services in descending order by count of services ? | Do you just want the resident ids ? | The resident_id and count of services",
            "sql": "select t1 . resident_id , count ( * ) from residents as t1 join residents_services as t2 on t1 . resident_id = t2 . resident_id group by t1 . resident_id order by count ( * ) desc"
        },
        {
            "utterance": "Can you add the resident other detail to the results ?",
            "sql": "select t1 . resident_id , t1 . other_details , count ( * ) from residents as t1 join residents_services as t2 on t1 . resident_id = t2 . resident_id group by t1 . resident_id order by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"
    },
    "interaction": [
        {
            "utterance": "What is their distinct id and type ?",
            "sql": "select distinct t2 . thing_id , t2 . type_of_thing_code from timed_status_of_things as t1 join things as t2 on t1 . thing_id = t2 . thing_id where t1 . status_of_thing_code = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select distinct t2 . thing_id , t2 . type_of_thing_code from timed_status_of_things as t1 join things as t2 on t1 . thing_id = t2 . thing_id where t1 . status_of_thing_code = value and t1 . date_and_date < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 10,
    "final": {
        "utterance": "How many residents does each property have? List property id and resident count.",
        "sql": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id"
    },
    "interaction": [
        {
            "utterance": "how many residents does each property have ? list property id",
            "sql": "select t1 . property_id , count ( * ) from properties as t1 join residents as t2 on t1 . property_id = t2 . property_id group by t1 . property_id"
        },
        {
            "utterance": "find the property type code and address for the property id 24",
            "sql": "select property_type_code , property_address from properties where property_id = value"
        },
        {
            "utterance": "find the date moved in for the resident id 6",
            "sql": "select date_moved_in from residents where resident_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the founded year of the newest non public school.",
        "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please show me a list of all of the school names for all schools that are not of the Public affiliation ?",
            "sql": "select school from university where affiliation ! = value"
        },
        {
            "utterance": "Great ! Can you update that list to include the year that the school was founded ?",
            "sql": "select school , founded from university where affiliation ! = value"
        },
        {
            "utterance": "Nice ! Can you show me a list of the names of all of the schools ?",
            "sql": "select school from university"
        },
        {
            "utterance": "Wonderful ! Finally , can you update this list to show the affiliation type of each of these schools ?",
            "sql": "select school , affiliation from university"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the total and minimum enrollment of all schools?",
        "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university"
    },
    "interaction": [
        {
            "utterance": "Can you show me a list of colleges that have an enrollment of 15,000 or higher ? | Do you want the names of the schools that have an enrollment of 15000 or higher ? | Can you provide the name and the location of the schools that have an enrollment of 15,000 or higher ?",
            "sql": "select school , location from university where enrollment > value"
        },
        {
            "utterance": "What conference are these schools in ?",
            "sql": "select primary_conference from university where school in ( select school from university where enrollment > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the schools that were either founded after 1850 or public.",
        "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    "interaction": [
        {
            "utterance": "Hi , when was the University of Delaware founded ?",
            "sql": "select founded from university where school = value"
        },
        {
            "utterance": "and Lebanon Valley College ?",
            "sql": "select founded from university where school = value"
        },
        {
            "utterance": "What is University of Rhode Island 's affiliation ?",
            "sql": "select affiliation from university where school = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the founded year of the newest non public school.",
        "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you tell me how many school have an affiliation type that is not public ?",
            "sql": "select count ( * ) from university where affiliation ! = value"
        },
        {
            "utterance": "Can you please tell me the name of that school and the enrollment ?",
            "sql": "select school , enrollment from university where affiliation ! = value"
        },
        {
            "utterance": "What year was that school founded ?",
            "sql": "select founded from university where affiliation ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation"
    },
    "interaction": [
        {
            "utterance": "I want to know the number of public universities",
            "sql": "select count ( * ) from university where affiliation = value"
        },
        {
            "utterance": "I want to know the number of public universities with over 20000 enrollment size .",
            "sql": "select count ( * ) from university where affiliation = value and enrollment > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the schools that were either founded after 1850 or public.",
        "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    "interaction": [
        {
            "utterance": "What is the Primary conference of Lebanon Valley College ?",
            "sql": "select primary_conference from university where school = value"
        },
        {
            "utterance": "What is the nickname of University of Rhode Island ?",
            "sql": "select nickname from university where school = value"
        },
        {
            "utterance": "What is the location of Fightin ' Blue Hens ?",
            "sql": "select location from university where nickname = value"
        },
        {
            "utterance": "Find the school that was either founded after 1850 or public .",
            "sql": "select school from university where founded > value or affiliation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the enrollment and primary_conference of the oldest college.",
        "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which is the oldest college in the table",
            "sql": "select school from university order by founded limit value"
        },
        {
            "utterance": "what is the enrollment of the conference | The enrollment of the oldest college is 19067.0 . | list the enrollment and primary-conference of the oldest college",
            "sql": "select enrollment , primary_conference from university order by founded limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the location and all games score of the school that has Clemson as its team name.",
        "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    "interaction": [
        {
            "utterance": "what location are the clemson teams ?",
            "sql": "select t1 . location from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id where team_name = value"
        },
        {
            "utterance": "what scores were Clemson 's home games ?",
            "sql": "select t2 . all_home from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id where team_name = value"
        },
        {
            "utterance": "How about the road game scores for Clemson ?",
            "sql": "select t2 . all_road from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id where team_name = value"
        },
        {
            "utterance": "What about all games score for the Clemson school ?",
            "sql": "select t2 . all_games from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id where team_name = value"
        },
        {
            "utterance": "How about for the Duke school ?",
            "sql": "select t2 . all_games from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id where team_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the highest acc percent score in the competition?",
        "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the acc percent of each team ?",
            "sql": "select team_id , acc_percent from basketball_match"
        },
        {
            "utterance": "can you tell me what the lowest acc percent score is ?",
            "sql": "select acc_percent from basketball_match order by acc_percent limit value"
        },
        {
            "utterance": "what 's the highest acc percent score ?",
            "sql": "select acc_percent from basketball_match order by acc_percent desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 9,
    "final": {
        "utterance": "Find how many school locations have the word 'NY'.",
        "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    "interaction": [
        {
            "utterance": "Show me the location details",
            "sql": "select location from university"
        },
        {
            "utterance": "Show me the details of the schools",
            "sql": "select school from university"
        },
        {
            "utterance": "Show me how many school locations have the word 'NY '",
            "sql": "select count ( * ) from university where location like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 10,
    "final": {
        "utterance": "How many schools do not participate in the basketball match?",
        "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
    },
    "interaction": [
        {
            "utterance": "What is the name of the school that participated in the basketball match ?",
            "sql": "select school from university where school_id not in ( select school_id from basketball_match )"
        },
        {
            "utterance": "When was university of Rhode island founded ?",
            "sql": "select founded from university where school = value"
        },
        {
            "utterance": "What is the afflilation of university of rhode island ?",
            "sql": "select affiliation from university where school = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many schools are there ?",
            "sql": "select count ( * ) from university"
        },
        {
            "utterance": "Which school has the highest acc percent score ?",
            "sql": "select t1 . school from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id order by t2 . acc_percent desc limit value"
        },
        {
            "utterance": "How about the lowest ?",
            "sql": "select t1 . school from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id order by t2 . acc_percent limit value"
        },
        {
            "utterance": "What 's its primary conference ?",
            "sql": "select t1 . primary_conference from university as t1 join basketball_match as t2 on t1 . school_id = t2 . school_id order by t2 . acc_percent limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 12,
    "final": {
        "utterance": "When was the school with the largest enrollment founded?",
        "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me the top 3 school with the largest enrollment ?",
            "sql": "select * from university order by enrollment desc limit value"
        },
        {
            "utterance": "Can you filter that list to show only the school with the largest enrollment ?",
            "sql": "select * from university order by enrollment desc limit value"
        },
        {
            "utterance": "Thank you ! What athletic conference is Rutgers University in ?",
            "sql": "select primary_conference from university where school = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 13,
    "final": {
        "utterance": "When was the school with the largest enrollment founded?",
        "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which school has the largest enrollment ?",
            "sql": "select school from university order by enrollment desc limit value"
        },
        {
            "utterance": "When was the school founded ?",
            "sql": "select founded from university order by enrollment desc limit value"
        },
        {
            "utterance": "Where is it located ?",
            "sql": "select location from university order by enrollment desc limit value"
        },
        {
            "utterance": "How many are enrolled ?",
            "sql": "select enrollment from university order by enrollment desc limit value"
        },
        {
            "utterance": "What is the school 's nickname ?",
            "sql": "select nickname from university order by enrollment desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
    },
    "interaction": [
        {
            "utterance": "Yes please",
            "sql": "select sum ( enrollment ) from university"
        },
        {
            "utterance": "How about the total number of enrollments for just colleges that were founded after the year 1850 ?",
            "sql": "select sum ( enrollment ) from university where founded > value"
        },
        {
            "utterance": "How about the total number of enrollments for just colleges that were founded after the year 1850 for each type of affiliation ?",
            "sql": "select affiliation , sum ( enrollment ) from university where founded > value group by affiliation"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me which school is founded most recently ?",
            "sql": "select * from university order by founded desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of representatives that have not participated in elections listed here.",
        "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
    },
    "interaction": [
        {
            "utterance": "please show me the names of all of the representatives",
            "sql": "select name from representative"
        },
        {
            "utterance": "Now show narrow down the list to just those who have not been involved in an election",
            "sql": "select name from representative where representative_id not in ( select representative_id from election )"
        },
        {
            "utterance": "now show those representatives and what party they are a member of",
            "sql": "select name , party from representative where representative_id not in ( select representative_id from election )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 1,
    "final": {
        "utterance": "What parties have at least three representatives?",
        "sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "what is the average lifespan of the representatives",
            "sql": "select avg ( lifespan ) from representative"
        },
        {
            "utterance": "what parties have at least two representatives",
            "sql": "select party from representative group by party having count ( * ) > = value"
        },
        {
            "utterance": "what parties have at least three representatives",
            "sql": "select party from representative group by party having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the life spans of representatives from New York state or Indiana state?",
        "sql": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\""
    },
    "interaction": [
        {
            "utterance": "list the life spans of all representatives",
            "sql": "select lifespan from representative"
        },
        {
            "utterance": "what are the life spans of representatives from New York ?",
            "sql": "select lifespan from representative where state = value"
        },
        {
            "utterance": "what are the life spans of representatives from Indiana ?",
            "sql": "select lifespan from representative where state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the party of the representative that has the smallest number of votes.",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many representatives are republicans ?",
            "sql": "select count ( * ) from representative where party = value"
        },
        {
            "utterance": "And democrats ?",
            "sql": "select count ( * ) from representative where party = value"
        },
        {
            "utterance": "WHich representative has the lowest votes ?",
            "sql": "select representative_id from election order by votes asc limit value"
        },
        {
            "utterance": "What party is this representative in ?",
            "sql": "select party from representative where representative_id = ( select representative_id from election order by votes asc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 4,
    "final": {
        "utterance": "What states have at least two representatives?",
        "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which states have two or more representatives ?",
            "sql": "select state from representative group by state having count ( * ) > = value"
        },
        {
            "utterance": "What are the names of the representatives from those states ?",
            "sql": "select name from representative where state in ( select state from representative group by state having count ( * ) > = value )"
        },
        {
            "utterance": "What parties do they belong to ?",
            "sql": "select party from representative where state in ( select state from representative group by state having count ( * ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the minimum and maximum vote percents of elections?",
        "sql": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election"
    },
    "interaction": [
        {
            "utterance": "what is the minimum vote percent of elections ?",
            "sql": "select min ( vote_percent ) from election"
        },
        {
            "utterance": "what is the maximum vote percent of elections ?",
            "sql": "select max ( vote_percent ) from election"
        },
        {
            "utterance": "Which election had the most votes ?",
            "sql": "select election_id from election where votes = ( select max ( votes ) from election )"
        },
        {
            "utterance": "Which election had the least votes ?",
            "sql": "select election_id from election where votes = ( select min ( votes ) from election )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of representatives in descending order of votes?",
        "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of representatives in descending order of votes please ?",
            "sql": "select t2 . name from election as t1 join representative as t2 on t1 . representative_id = t2 . representative_id order by votes desc"
        },
        {
            "utterance": "What are their parties ?",
            "sql": "select t2 . name , t2 . party from election as t1 join representative as t2 on t1 . representative_id = t2 . representative_id order by votes desc"
        },
        {
            "utterance": "What states are they from , please ?",
            "sql": "select t2 . name , t2 . state from election as t1 join representative as t2 on t1 . representative_id = t2 . representative_id order by votes desc"
        },
        {
            "utterance": "What are their vote percents ?",
            "sql": "select t2 . name , t1 . vote_percent from election as t1 join representative as t2 on t1 . representative_id = t2 . representative_id order by votes desc"
        },
        {
            "utterance": "What about their dates ?",
            "sql": "select t2 . name , t1 . date from election as t1 join representative as t2 on t1 . representative_id = t2 . representative_id order by votes desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the countries that have managers of age above 50 or below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46"
    },
    "interaction": [
        {
            "utterance": "Hi , can you please tell me which country has a manager of age above 50 ?",
            "sql": "select country from manager where age > value"
        },
        {
            "utterance": "what about the countries with manager of age below 46 ?",
            "sql": "select country from manager where age < value"
        },
        {
            "utterance": "can you please tell me how many managers Scotland has ?",
            "sql": "select count ( * ) from manager where country = value"
        },
        {
            "utterance": "what about other countries ?",
            "sql": "select count ( * ) , country from manager where country ! = value group by country"
        },
        {
            "utterance": "how many level 5 managers does United States have ?",
            "sql": "select count ( * ) from manager where country = value and level = value"
        },
        {
            "utterance": "and can you please tell me their names ?",
            "sql": "select name from manager where country = value and level = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the countries that have managers of age above 50 or below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46"
    },
    "interaction": [
        {
            "utterance": "Show the countries that have managers of age above 50 or below 46 ?",
            "sql": "select country from manager where age > value or age < value"
        },
        {
            "utterance": "What is the least aged Manager 's name on the list ?",
            "sql": "select name from manager order by age limit value"
        },
        {
            "utterance": "How many managers are from United States on the list ?",
            "sql": "select count ( * ) from manager where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 2,
    "final": {
        "utterance": "List the object number of railways that do not have any trains.",
        "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
    },
    "interaction": [
        {
            "utterance": "Which railways do not have trains ? | Did you mean the object number of railways that do not have any train ? | Yes",
            "sql": "select objectnumber from railway where railway_id not in ( select railway_id from train )"
        },
        {
            "utterance": "and ones that do ?",
            "sql": "select objectnumber from railway where railway_id in ( select railway_id from train )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select railway from railway where railway_id in ( select railway_id from train )"
        },
        {
            "utterance": "and the names of the railways with no trains ?",
            "sql": "select railway from railway where railway_id not in ( select railway_id from train )"
        },
        {
            "utterance": "when were they built ?",
            "sql": "select built from railway where railway_id not in ( select railway_id from train )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 3,
    "final": {
        "utterance": "Show id and location of railways that are associated with more than one train.",
        "sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many railway there",
            "sql": "select count ( * ) from railway"
        },
        {
            "utterance": "what is the train number of sewagram exp",
            "sql": "select train_num from train where name = value"
        },
        {
            "utterance": "what is the location of mr",
            "sql": "select location from railway where railway = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the oldest manager?",
        "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the name of the oldest manager please ?",
            "sql": "select name from manager order by age desc limit value"
        },
        {
            "utterance": "What is the name of the manager with the earliest working year ?",
            "sql": "select name from manager order by working_year_starts asc limit value"
        },
        {
            "utterance": "Can you list the names of all managers with the highest level ?",
            "sql": "select name from manager where level = ( select max ( level ) from manager )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the most common builder of railways.",
        "sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , Can you tell me the most common builder of railways ?",
            "sql": "select builder from railway group by builder order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you tell me the last railways this builder has build ?",
            "sql": "select railway from railway group by builder having builder = value order by built desc limit value"
        },
        {
            "utterance": "In what year was GWRSn build ?",
            "sql": "select built from railway group by builder having builder = value order by built desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 6,
    "final": {
        "utterance": "List the object number of railways that do not have any trains.",
        "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
    },
    "interaction": [
        {
            "utterance": "which object railways that do not have any trains ? | Do you mean the object number ? | yes , I apologize . Which object number railways that do not have any trains ?",
            "sql": "select objectnumber from railway where railway_id not in ( select railway_id from train )"
        },
        {
            "utterance": "which one is located in New York . | Do you mean York ? | sorry , yes .",
            "sql": "select objectnumber from railway where railway_id not in ( select railway_id from train ) and location = value"
        },
        {
            "utterance": "which object numbers do have trains ?",
            "sql": "select objectnumber from railway where railway_id in ( select railway_id from train )"
        },
        {
            "utterance": "who is the builder of Object Number 1975-7006 ?",
            "sql": "select builder from railway where objectnumber = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the oldest manager?",
        "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you find the name and age of the oldest manager ?",
            "sql": "select name , age from manager order by age desc limit value"
        },
        {
            "utterance": "What year did Todd Hamilton start working ?",
            "sql": "select working_year_starts from manager where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46"
    },
    "interaction": [
        {
            "utterance": "Please show the countries that have both managers of age above 50 , and managers of age below 46",
            "sql": "select country from manager where age > value intersect select country from manager where age < value"
        },
        {
            "utterance": "Please show me the names of all those managers",
            "sql": "select name from manager"
        },
        {
            "utterance": "Please show me the age of the youngest and oldest managers",
            "sql": "select min ( age ) , max ( age ) from manager"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the locations that have more than one railways.",
        "sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of the locations that have two or more railways ?",
            "sql": "select location from railway group by location having count ( * ) > = value"
        },
        {
            "utterance": "When were those built ?",
            "sql": "select built from railway group by location having count ( * ) > = value"
        },
        {
            "utterance": "What is the location of the most recently built railway ?",
            "sql": "select location from railway order by built desc limit value"
        },
        {
            "utterance": "Who is the builder of the railway built earliest ?",
            "sql": "select builder from railway order by built asc limit value"
        },
        {
            "utterance": "When was that railway built ?",
            "sql": "select built from railway order by built asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the id and builder of the railway that are associated with the most trains.",
        "sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which builder has the least trains ?",
            "sql": "select t1 . builder from railway as t1 join train as t2 on t1 . railway_id = t2 . railway_id group by t2 . railway_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "How about the builder with the most trains ?",
            "sql": "select t1 . builder from railway as t1 join train as t2 on t1 . railway_id = t2 . railway_id group by t2 . railway_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is his id ?",
            "sql": "select t1 . railway_id from railway as t1 join train as t2 on t1 . railway_id = t2 . railway_id group by t2 . railway_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name and phone of the customer without any mailshot.",
        "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)"
    },
    "interaction": [
        {
            "utterance": "what form of payment method did customer ID 1 Use ?",
            "sql": "select payment_method from customers where customer_id = value"
        },
        {
            "utterance": "what is customer Wendell address ? | Do you mean the customer address of Wendell | what is the customer address of Wendell ?",
            "sql": "select customer_address from customers where customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "sql": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "Can you please provide me with a list of all customer names and phone numbers ?",
            "sql": "select t1 . customer_name , t1 . customer_phone from customers as t1 join mailshot_customers as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "Can you filter that list of customers to show only those who have 'No Response ' as their outcome code ?",
            "sql": "select t1 . customer_name , t1 . customer_phone from customers as t1 join mailshot_customers as t2 on t1 . customer_id = t2 . customer_id where t2 . outcome_code = value"
        },
        {
            "utterance": "Can you please provide me with the phone number and email addresses of these five customers ?",
            "sql": "select t1 . customer_phone , t1 . customer_email from customers as t1 join mailshot_customers as t2 on t1 . customer_id = t2 . customer_id where t2 . outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of customers who have the most mailshots.",
        "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the highest number of mailshots for the customers ?",
            "sql": "select count ( * ) from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the highest mailshot id number ?",
            "sql": "select t1 . mailshot_id from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the customer id for that mailshot id ?",
            "sql": "select t1 . customer_id from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many mailshots does customer id 1 have ?",
            "sql": "select count ( * ) from mailshot_customers where customer_id = value"
        },
        {
            "utterance": "What is the name of customer id 1 ?",
            "sql": "select customer_name from customers where customer_id = value"
        },
        {
            "utterance": "What is the amount of mailshots that Wendell has ?",
            "sql": "select count ( * ) from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "What are names of customers who have both mailshots in `` order '' outcome ? | Do you want the names of customers who have mailshot with an outcome code `` Order '' ? | Yes",
            "sql": "select t2 . customer_name from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . outcome_code = value"
        },
        {
            "utterance": "What are the payment methods of those customers ?",
            "sql": "select t2 . payment_method from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . outcome_code = value"
        },
        {
            "utterance": "Show me names and payment methods of customers who have mailshot with an outcome code `` No Response ''",
            "sql": "select t2 . customer_name , t2 . payment_method from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "what are the names of the payment method of customers who have both mailshot in 'Order ' outcome and mailshot in 'No response ' outcome .",
            "sql": "select t2 . customer_name , t2 . payment_method from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . outcome_code = value intersect select t2 . customer_name , t2 . payment_method from mailshot_customers as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . outcome_code = value"
        },
        {
            "utterance": "How many customers pay by Credit card ?",
            "sql": "select count ( * ) from customers where payment_method = value"
        },
        {
            "utterance": "which customers pay with debit card ?",
            "sql": "select * from customers where payment_method = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'"
    },
    "interaction": [
        {
            "utterance": "Show the shipping charge and customer id for customer orders with order status `` Cancelled ''",
            "sql": "select order_shipping_charges , customer_id from customer_orders where order_status_code = value"
        },
        {
            "utterance": "Show the shipping charge and customer id for customer orders with order status `` Paid ''",
            "sql": "select order_shipping_charges , customer_id from customer_orders where order_status_code = value"
        },
        {
            "utterance": "Show the shipping method code for customer orders with order status `` Paid ''",
            "sql": "select shipping_method_code from customer_orders where order_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the number of employees of each gender whose salary is lower than 50000.",
        "sql": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "Yes . Can you tell me the number of employees ?",
            "sql": "select count ( * ) from employee"
        },
        {
            "utterance": "Thank you . Can you tell me how many of them are males ?",
            "sql": "select count ( * ) from employee where sex = value"
        },
        {
            "utterance": "Can you also tell me how many employees have a salary lower than 50000 ?",
            "sql": "select count ( * ) from employee where salary < value"
        },
        {
            "utterance": "Ok.How many male employees have a salary lower than 50000 ?",
            "sql": "select count ( * ) from employee where salary < value and sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of departments that are located in Houston.",
        "sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'"
    },
    "interaction": [
        {
            "utterance": "Show me all the departments",
            "sql": "select * from department"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which campus was opened between 1935 and 1939?",
        "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    "interaction": [
        {
            "utterance": "What campuses were opened between 1935 and 1939 ?",
            "sql": "select campus from campuses where year > = value and year < = value"
        },
        {
            "utterance": "What campuses were opened after that ? | Do you mean opened after 1939 ? | Yes , please",
            "sql": "select campus from campuses where year > value"
        },
        {
            "utterance": "How many total campuses were opened ?",
            "sql": "select count ( * ) from campuses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which university is in Los Angeles county and opened after 1950?",
        "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"
    },
    "interaction": [
        {
            "utterance": "Which universities are in Los Angeles county and opened after 1950 ?",
            "sql": "select campus from campuses where county = value and year > value"
        },
        {
            "utterance": "What about before 1950 ?",
            "sql": "select campus from campuses where county = value and year < value"
        },
        {
            "utterance": "What are the years they opened ?",
            "sql": "select year from campuses where county = value and year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which year did any college confer the most amount of degrees ?",
            "sql": "select t3 . year from campuses as t1 join faculty as t2 on t1 . id = t2 . campus join degrees as t3 on t1 . id = t3 . campus and t2 . year = t3 . year order by t3 . degrees desc limit value"
        },
        {
            "utterance": "How about the year before that ? | Did you mean which college conferred the most number of degrees in 2003 ? | Yes",
            "sql": "select t1 . campus from campuses as t1 join faculty as t2 on t1 . id = t2 . campus join degrees as t3 on t1 . id = t3 . campus and t2 . year = t3 . year where t3 . year = value order by t3 . degrees desc limit value"
        },
        {
            "utterance": "How many faculty were at California State University-Channel Islands , in the year of 2002 ?",
            "sql": "select t2 . faculty from campuses as t1 join faculty as t2 on t1 . id = t2 . campus join degrees as t3 on t1 . id = t3 . campus and t2 . year = t3 . year where t2 . year = value and t1 . campus = value"
        },
        {
            "utterance": "How about for California State University-chico ? | Do you mean in the year 2002 ? | Yes",
            "sql": "select t2 . faculty from campuses as t1 join faculty as t2 on t1 . id = t2 . campus join degrees as t3 on t1 . id = t3 . campus and t2 . year = t3 . year where t2 . year = value and t1 . campus = value"
        },
        {
            "utterance": "How about for the year 1965 ?",
            "sql": "select distinct t1 . location from campuses as t1 join faculty as t2 on t1 . id = t2 . campus join degrees as t3 on t1 . id = t3 . campus and t2 . year = t3 . year where t1 . year = value and t1 . campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"
    },
    "interaction": [
        {
            "utterance": "What are the degrees conferred in `` San Francisco State University '' ?",
            "sql": "select degrees from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t1 . campus = value"
        },
        {
            "utterance": "What are the degrees conferred in `` San Francisco State University '' in 2001 ?",
            "sql": "select degrees from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t1 . campus = value and t2 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "please list out the campus | which column do you want to list ? | first column",
            "sql": "select id from campuses"
        },
        {
            "utterance": "what is the highest campus fees",
            "sql": "select campusfee from csu_fees order by campusfee desc limit value"
        },
        {
            "utterance": "what is the year of California State University-Bakersfield",
            "sql": "select year from campuses where campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "How many degrees did `` San Jose State University '' confer in 2000 ?",
            "sql": "select degrees from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t1 . campus = value and t2 . year = value"
        },
        {
            "utterance": "What about for campus id 5 ?",
            "sql": "select sum ( degrees ) from degrees where campus = value"
        },
        {
            "utterance": "What is the name of that campus ?",
            "sql": "select distinct t1 . campus from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t2 . campus = value"
        },
        {
            "utterance": "What is the name of campus with id 19 ?",
            "sql": "select distinct t1 . campus from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t2 . campus = value"
        },
        {
            "utterance": "How many degrees did `` San Jose State University '' confer in 2001 ?",
            "sql": "select sum ( degrees ) from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t1 . campus = value and t2 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996"
    },
    "interaction": [
        {
            "utterance": "Hello . What universities are in San Francisco ? | Would you like to know the names of all campuses located in San Francisco ? | That would be great !",
            "sql": "select campus from campuses where location = value"
        },
        {
            "utterance": "Okay . What was the fee of San Francisco State University in 1996 ?",
            "sql": "select campusfee from campuses as t1 join csu_fees as t2 on t1 . id = t2 . campus where t1 . campus = value and t2 . year = value"
        },
        {
            "utterance": "And which campus had a fee of 2258 in 1996 ?",
            "sql": "select t1 . campus from campuses as t1 join csu_fees as t2 on t1 . id = t2 . campus where t2 . year = value and t2 . campusfee = value"
        },
        {
            "utterance": "Interesting ! What county is that in ?",
            "sql": "select t1 . county from campuses as t1 join csu_fees as t2 on t1 . id = t2 . campus where t2 . year = value and t2 . campusfee = value"
        },
        {
            "utterance": "And what county is San Francisco State University in ?",
            "sql": "select county from campuses where campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 7,
    "final": {
        "utterance": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004"
    },
    "interaction": [
        {
            "utterance": "how many campuses are presented on the table",
            "sql": "select count ( * ) from campuses"
        },
        {
            "utterance": "list out the campuses name",
            "sql": "select campus from campuses"
        },
        {
            "utterance": "what is the location of California State University-Bakersfield",
            "sql": "select location from campuses where campus = value"
        },
        {
            "utterance": "what is the county of California State University-Chico",
            "sql": "select county from campuses where campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 8,
    "final": {
        "utterance": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me campuses years ?",
            "sql": "select year from campuses"
        },
        {
            "utterance": "can you show me campuses county ?",
            "sql": "select county from campuses"
        },
        {
            "utterance": "can you show me a list of degrees ?",
            "sql": "select * from degrees"
        },
        {
            "utterance": "how many faculty lines are there in the university that conferred the least number of degrees in year 2001 ?",
            "sql": "select t2 . faculty from campuses as t1 join faculty as t2 on t1 . id = t2 . campus join degrees as t3 on t1 . id = t3 . campus and t2 . year = t3 . year where t2 . year = value order by t3 . degrees limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
        "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")"
    },
    "interaction": [
        {
            "utterance": "Which California State University is located in Kern County ?",
            "sql": "select campus from campuses where campus like value and county = value"
        },
        {
            "utterance": "What year was California State University-Chico started ?",
            "sql": "select year from campuses where campus = value"
        },
        {
            "utterance": "Which campus has the smallest faculty",
            "sql": "select t1 . campus from campuses as t1 join faculty as t2 on t1 . id = t2 . campus where t2 . faculty = ( select min ( faculty ) from faculty )"
        },
        {
            "utterance": "Which campus was started in 2002 ?",
            "sql": "select campus from campuses where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 10,
    "final": {
        "utterance": "For each Orange county campus, report the number of degrees granted after 2000.",
        "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    "interaction": [
        {
            "utterance": "hi I was wondering how many counties you have information for ?",
            "sql": "select count ( distinct t1 . county ) from campuses as t1 join degrees as t2 on t1 . id = t2 . campus"
        },
        {
            "utterance": "how many schools are in Orange county ?",
            "sql": "select count ( * ) from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t1 . county = value"
        },
        {
            "utterance": "can you tell me how many degrees have been granted for each Orange county campus since the year 2000 ?",
            "sql": "select t1 . campus , sum ( t2 . degrees ) from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t1 . county = value and t2 . year > = value group by t1 . campus"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Which campus was opened between 1935 and 1939?",
        "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    "interaction": [
        {
            "utterance": "How many campuses opened between 1935 and 1939 ?",
            "sql": "select count ( campus ) from campuses where year > = value and year < = value"
        },
        {
            "utterance": "Which county is the campus in ?",
            "sql": "select county from campuses where year > = value and year < = value"
        },
        {
            "utterance": "What is the full name of that campus ?",
            "sql": "select campus from campuses where year > = value and year < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"
    },
    "interaction": [
        {
            "utterance": "Find the id of year 1956 ? | do you mean the id of the campus that is opened in 1956 ? | Yes",
            "sql": "select id from campuses where year = value"
        },
        {
            "utterance": "How many TotalEnrollment of Campus California State University-Channel Islands ?",
            "sql": "select t2 . totalenrollment_ay from campuses as t1 join enrollments as t2 on t1 . id = t2 . campus where t1 . campus = value"
        },
        {
            "utterance": "What are the country of FTE_AY 178 ?",
            "sql": "select t1 . county from campuses as t1 join enrollments as t2 on t1 . id = t2 . campus where t2 . fte_ay = value"
        },
        {
            "utterance": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956 ?",
            "sql": "select t1 . campus from campuses as t1 join enrollments as t2 on t1 . id = t2 . campus where t2 . year = value and totalenrollment_ay > value and fte_ay > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Which year has the most degrees conferred?",
        "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the years for which there is data ?",
            "sql": "select distinct year from degrees"
        },
        {
            "utterance": "Thank you ! Can you update this list to include how many degrees were conferred each year ?",
            "sql": "select sum ( degrees ) , year from degrees group by year"
        },
        {
            "utterance": "Thanks ! Lastly , ( I am about to run out of time ) can you filter that list to show me which year had the most degrees conferred ?",
            "sql": "select year from degrees group by year order by sum ( degrees ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "Find the campus fee of `` San Jose State University '' in year 2000 .",
            "sql": "select t1 . campusfee from csu_fees as t1 join campuses as t2 on t1 . campus = t2 . id where t2 . campus = value and t1 . year = value"
        },
        {
            "utterance": "What is the campus id of San Jose State University ?",
            "sql": "select id from campuses where campus = value"
        },
        {
            "utterance": "What is the campus fee of that ?",
            "sql": "select t1 . campusfee from csu_fees as t1 join campuses as t2 on t1 . campus = t2 . id where t2 . campus = value"
        },
        {
            "utterance": "What year is that for ?",
            "sql": "select t1 . year from csu_fees as t1 join campuses as t2 on t1 . campus = t2 . id where t2 . campus = value"
        },
        {
            "utterance": "What county is San Jose State University in ?",
            "sql": "select county from campuses where campus = value"
        },
        {
            "utterance": "What is the location of that university ?",
            "sql": "select location from campuses where campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which campus has the most faculties in year 2003?",
        "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "ID 1 is for which Campus ?",
            "sql": "select campus from campuses where id = value"
        },
        {
            "utterance": "which campus has the fewest faculties in year 2003 ?",
            "sql": "select t1 . campus from campuses as t1 join faculty as t2 on t1 . id = t2 . campus where t2 . year = value order by t2 . faculty limit value"
        },
        {
            "utterance": "which campus has the most faculties in year 2003 ?",
            "sql": "select t1 . campus from campuses as t1 join faculty as t2 on t1 . id = t2 . campus where t2 . year = value order by t2 . faculty desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
    },
    "interaction": [
        {
            "utterance": "Please tell me the number of undergraduates from each campus in the year 2004",
            "sql": "select t2 . campus , sum ( t1 . graduate ) from discipline_enrollments as t1 join campuses as t2 on t1 . campus = t2 . id where t1 . year = value group by t2 . campus"
        },
        {
            "utterance": "please show the undergrads total from each campus",
            "sql": "select t2 . campus , sum ( t1 . undergraduate ) from discipline_enrollments as t1 join campuses as t2 on t1 . campus = t2 . id group by t2 . campus"
        },
        {
            "utterance": "now please show just the total of graduates from San Francisco State University in 2004",
            "sql": "select sum ( t1 . graduate ) from discipline_enrollments as t1 join campuses as t2 on t1 . campus = t2 . id where t1 . year = value and t2 . campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 17,
    "final": {
        "utterance": "For each Orange county campus, report the number of degrees granted after 2000.",
        "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    "interaction": [
        {
            "utterance": "For each Orange county campus , report the number of degrees granted after 2000 .",
            "sql": "select t1 . campus , sum ( t2 . degrees ) from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t1 . county = value and t2 . year > = value group by t1 . campus"
        },
        {
            "utterance": "which year has the highest number of degrees ?",
            "sql": "select year from degrees order by degrees desc limit value"
        },
        {
            "utterance": "which location in 2004 ? | do you mean campus ? | which campus has the highest number of degrees ?",
            "sql": "select t1 . campus from campuses as t1 join degrees as t2 on t1 . id = t2 . campus where t2 . degrees = ( select max ( degrees ) from degrees )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 0,
    "final": {
        "utterance": "which countries have more than 2 airports?",
        "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "list out the airport names",
            "sql": "select name from airport"
        },
        {
            "utterance": "how many airports on this table",
            "sql": "select count ( distinct name ) from airport"
        },
        {
            "utterance": "what is the country of Akureyri Airport",
            "sql": "select country from airport where name = value"
        },
        {
            "utterance": "what is the city of Schiphol Airport",
            "sql": "select city from airport where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 1,
    "final": {
        "utterance": "How many companies operates airlines in each airport?",
        "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id"
    },
    "interaction": [
        {
            "utterance": "How many airports are there ?",
            "sql": "select count ( * ) from airport"
        },
        {
            "utterance": "How many total companies are there ?",
            "sql": "select count ( * ) from operate_company"
        },
        {
            "utterance": "How many companies operate airlines in each airport ? | Do you want the result by airport id , or airport name or all airport information ? | I would like the results by airport id , please .",
            "sql": "select t3 . id , count ( * ) from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id join airport as t3 on t2 . airport_id = t3 . id group by t3 . id"
        },
        {
            "utterance": "How many airports are in the United States ?",
            "sql": "select count ( * ) from airport where country = value"
        },
        {
            "utterance": "How many companies operate in airports in the United States ?",
            "sql": "select count ( distinct t1 . id ) from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id join airport as t3 on t2 . airport_id = t3 . id where t3 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'"
    },
    "interaction": [
        {
            "utterance": "where is the location of the conference ? | What conference ? | Do you know any name of the pilot that provides cargo ?",
            "sql": "select t2 . pilot from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id where t1 . principal_activities = value"
        },
        {
            "utterance": "Ok. Do you know any name of the pilot that provides a company `` catering services '' activities ?",
            "sql": "select t2 . pilot from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id where t1 . principal_activities = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the pilots who flew a flight in the United States ?",
            "sql": "select distinct t2 . pilot from airport as t1 join flight as t2 on t1 . id = t2 . airport_id where t1 . country = value"
        },
        {
            "utterance": "What are the names of all the pilots who flew a flight in the Billund Airport ?",
            "sql": "select distinct t2 . pilot from airport as t1 join flight as t2 on t1 . id = t2 . airport_id where t1 . name = value"
        },
        {
            "utterance": "Can you list the names and velocities of all pilots who flew out of Ted Stevens Airport ?",
            "sql": "select t2 . pilot , t2 . velocity from airport as t1 join flight as t2 on t1 . id = t2 . airport_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200"
    },
    "interaction": [
        {
            "utterance": "Which flight has the least velocity in the list ? | What info do you want about that flight ? id ? date ? number ? or something else ? | I want the number",
            "sql": "select vehicle_flight_number from flight order by velocity limit value"
        },
        {
            "utterance": "State the principal activities of Air Hong Kong ?",
            "sql": "select distinct principal_activities from operate_company where name = value"
        },
        {
            "utterance": "What are the distinct types of the companies that have operated any flights with velocity less than 200 ?",
            "sql": "select distinct t1 . type from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id where t2 . velocity < value"
        },
        {
            "utterance": "State the type of air china in the list ?",
            "sql": "select type from operate_company where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the most common company type, and how many are there?",
        "sql": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common type ?",
            "sql": "select type from operate_company group by type order by count ( * ) desc limit value"
        },
        {
            "utterance": "And how many companies are there with this type ?",
            "sql": "select count ( distinct name ) from operate_company where type = value"
        },
        {
            "utterance": "And how about the least common type of company ?",
            "sql": "select type from operate_company group by type order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 6,
    "final": {
        "utterance": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );"
    },
    "interaction": [
        {
            "utterance": "How many airports has pilot Thompson driven an aircraft ?",
            "sql": "select count ( * ) from airport where id in ( select airport_id from flight where pilot = value )"
        },
        {
            "utterance": "How many airports had Thompson driven by August 1963 ?",
            "sql": "select count ( * ) from airport as t1 join flight as t2 on t1 . id = t2 . airport_id where t2 . pilot = value and t2 . date > value"
        },
        {
            "utterance": "What is the flight number of the aircraft Thompson drove in March 1 , 1963",
            "sql": "select vehicle_flight_number from flight where pilot = value and date = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 7,
    "final": {
        "utterance": "which pilot is in charge of the most number of flights?",
        "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are pilots names ?",
            "sql": "select distinct pilot from flight"
        },
        {
            "utterance": "Which pilot is in charge of most number of flights ?",
            "sql": "select pilot from flight group by pilot order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 8,
    "final": {
        "utterance": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );"
    },
    "interaction": [
        {
            "utterance": "how many flights have pilot Thompson flown ?",
            "sql": "select count ( * ) from flight where pilot = value"
        },
        {
            "utterance": "What are the names of those airports ?",
            "sql": "select name from airport where id not in ( select airport_id from flight where pilot = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the id, name and IATA code of the airport that had most number of flights?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the date of first flight ?",
            "sql": "select date from flight order by date limit value"
        },
        {
            "utterance": "who is the first flight 's pilot ?",
            "sql": "select pilot from flight order by date limit value"
        },
        {
            "utterance": "what is the average of altitude ?",
            "sql": "select avg ( altitude ) from flight"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the ids and names of the companies that operated more than one flight?",
        "sql": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hi , which companies have operated more than one flight ?",
            "sql": "select * from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "Great , can you show me the top 3 companies that have operated the most flights ?",
            "sql": "select * from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id group by t1 . id order by count ( * ) limit value"
        },
        {
            "utterance": "Which type of principal activity , cargo airline or airline , operates the most flights ?",
            "sql": "select principal_activities from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id group by principal_activities order by count ( * ) limit value"
        },
        {
            "utterance": "What are the top 3 companies operating the most cargo flights ?",
            "sql": "select * from operate_company as t1 join flight as t2 on t1 . id = t2 . company_id where t1 . principal_activities = value group by t1 . name order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "sql": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest average monthly rental of all the students ?",
            "sql": "select monthly_rental from student_addresses as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by avg ( monthly_rental ) desc limit value"
        },
        {
            "utterance": "Hmm , can you tell me the addresses that have the highest average monthly rental ?",
            "sql": "select t2 . address_id from student_addresses as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by avg ( monthly_rental ) desc limit value"
        },
        {
            "utterance": "What are the id and first name of the student whose addresses have the highest average monthly rental ?",
            "sql": "select t1 . student_id , t2 . first_name from student_addresses as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by avg ( monthly_rental ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "sql": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the teacher id of detention id 1",
            "sql": "select teacher_id from detention where detention_id = value"
        },
        {
            "utterance": "when does the datetime detention end | What did you mean by the datetime detention end ? Do you want a list of all the datetime detention end or a specific one ? | for detention id 1",
            "sql": "select datetime_detention_end from detention where detention_id = value"
        },
        {
            "utterance": "what is the middle name of teacher id 1 ?",
            "sql": "select t1 . middle_name from teachers as t1 where t1 . teacher_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the monthly rentals of student addresses in Texas state?",
        "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""
    },
    "interaction": [
        {
            "utterance": "What are the monthly rentals of student ?",
            "sql": "select t2 . monthly_rental from addresses as t1 join student_addresses as t2 on t1 . address_id = t2 . address_id"
        },
        {
            "utterance": "what are the total number of student addresses in Texas state ?",
            "sql": "select count ( t2 . student_id ) from addresses as t1 join student_addresses as t2 on t1 . address_id = t2 . address_id where t1 . state_province_county = value"
        },
        {
            "utterance": "what are the monthly rentals of student addresses in Texas state ?",
            "sql": "select t2 . monthly_rental from addresses as t1 join student_addresses as t2 on t1 . address_id = t2 . address_id where t1 . state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the monthly rentals of student addresses in Texas state?",
        "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""
    },
    "interaction": [
        {
            "utterance": "What is the address of address id 3 ?",
            "sql": "select * from addresses where address_id = value"
        },
        {
            "utterance": "How much does the rental cost for address id 3 ?",
            "sql": "select monthly_rental from student_addresses where address_id = value"
        },
        {
            "utterance": "What is the cost for address id 1 ?",
            "sql": "select monthly_rental from student_addresses where address_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the id and city of the student address with the highest average monthly rental.",
        "sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest average monthly rental ? | what do you mean by `` highest average monthly rental '' | sorry , highest monthly rental",
            "sql": "select max ( monthly_rental ) from student_addresses"
        },
        {
            "utterance": "What is the address ID of that rental ?",
            "sql": "select address_id from student_addresses order by monthly_rental desc limit value"
        },
        {
            "utterance": "What is the city of that address ?",
            "sql": "select t1 . city from addresses as t1 join student_addresses as t2 on t1 . address_id = t2 . address_id order by monthly_rental desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the code and description of the least frequent detention type ?",
        "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the detention type code for the detention with id 1 ?",
            "sql": "select t1 . detention_type_code from detention as t1 join ref_detention_type as t2 on t1 . detention_type_code = t2 . detention_type_code where detention_id = value"
        },
        {
            "utterance": "Show the code and description of the least frequent detention type ?",
            "sql": "select t1 . detention_type_code , t2 . detention_type_description from detention as t1 join ref_detention_type as t2 on t1 . detention_type_code = t2 . detention_type_code group by t1 . detention_type_code order by count ( * ) asc limit value"
        },
        {
            "utterance": "Show the code and description of the most frequent detention type ?",
            "sql": "select t1 . detention_type_code , t2 . detention_type_description from detention as t1 join ref_detention_type as t2 on t1 . detention_type_code = t2 . detention_type_code group by t1 . detention_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\""
    },
    "interaction": [
        {
            "utterance": "hi , how many teachers have addresses with zip code `` 918 ''",
            "sql": "select count ( * ) from addresses as t1 join teachers as t2 on t1 . address_id = t2 . address_id where t1 . zip_postcode = value"
        },
        {
            "utterance": "can you tell me who that teacher is ? | The teacher is Alvis Macer Schultz | and what is that teacher 's email address ?",
            "sql": "select t2 . email_address from addresses as t1 join teachers as t2 on t1 . address_id = t2 . address_id where t1 . zip_postcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the first names of teachers whose email address contains the word \"man\".",
        "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'"
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE EMAIL ADDRESS OF LYLA WILSON MEDHURST ?",
            "sql": "select email_address from teachers where first_name = value and middle_name = value and last_name = value"
        },
        {
            "utterance": "WHAT IS THE ADDRESS ID OF SID TREMAYNE BRAKUS ?",
            "sql": "select email_address from teachers where first_name = value and middle_name = value and last_name = value"
        },
        {
            "utterance": "WHAT IS THE CELL MOBILE NUMBER OF TRYSTAN ALEXANE SCHUSTER ?",
            "sql": "select cell_mobile_number from teachers where first_name = value and middle_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\""
    },
    "interaction": [
        {
            "utterance": "What are the dates of assessment notes for students with first name 'Fanny ' ?",
            "sql": "select t1 . date_of_notes from assessment_notes as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . first_name = value"
        },
        {
            "utterance": "Could you tell me the dates students with first name 'Fanny ' left the university ?",
            "sql": "select date_left_university from students where first_name = value"
        },
        {
            "utterance": "What are the cell mobile numbers of students with the first name 'Fanny ' ?",
            "sql": "select cell_mobile_number from students where first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""
    },
    "interaction": [
        {
            "utterance": "Can you find me student with first name `` Emma '' ? | What do you want to know about that student ? | Student id",
            "sql": "select student_id from students where first_name = value"
        },
        {
            "utterance": "What is the last name for that student ?",
            "sql": "select last_name from students where first_name = value"
        },
        {
            "utterance": "What is her email ?",
            "sql": "select email_address from students where first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 10,
    "final": {
        "utterance": "How many students are not involved in any behavior incident?",
        "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )"
    },
    "interaction": [
        {
            "utterance": "How many students are in the class",
            "sql": "select count ( * ) from students"
        },
        {
            "utterance": "What are the student id 1 's incident type code ?",
            "sql": "select incident_type_code from behavior_incident where student_id = value"
        },
        {
            "utterance": "what are the recommendations are given to student ?",
            "sql": "select recommendations from behavior_incident"
        },
        {
            "utterance": "what is the mobile number of student id 1 ?",
            "sql": "select cell_mobile_number from students where student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the id and last name of the student that has the most behavior incidents?",
        "sql": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How Many Students have Behavior Incident reports with recommendations ?",
            "sql": "select count ( * ) from ( select * from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id )"
        },
        {
            "utterance": "How many of those Recommendations required the students to leave the university ?",
            "sql": "select count ( * ) from ( select * from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where recommendations = value group by t1 . student_id )"
        },
        {
            "utterance": "What was the students last name and ID that had the most behavior incidents ?",
            "sql": "select t1 . student_id , t2 . last_name from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the id and zip code of the address with the highest monthly rental?",
        "sql": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Add a column for monthly rental to the table Addresses | i can not understand your question , can you give more information ? thanks | What 's the highest monthly rental in the table Student Addresses ?",
            "sql": "select monthly_rental from student_addresses order by monthly_rental desc limit value"
        },
        {
            "utterance": "And what is the zip postcode of the address with monthly rental 1297.807 ?",
            "sql": "select t1 . zip_postcode from addresses as t1 join student_addresses as t2 on t1 . address_id = t2 . address_id where t2 . monthly_rental = value"
        },
        {
            "utterance": "And can you also tell me the line 1 value from the table Addresses for the same property ?",
            "sql": "select t1 . line_1 from addresses as t1 join student_addresses as t2 on t1 . address_id = t2 . address_id where t2 . monthly_rental = value"
        },
        {
            "utterance": "Hmmm ... can you also please tell me the address id for this same property ?",
            "sql": "select t1 . address_id from addresses as t1 join student_addresses as t2 on t1 . address_id = t2 . address_id where t2 . monthly_rental = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\""
    },
    "interaction": [
        {
            "utterance": "Find the start and end dates of behavior incidents of students with last name `` Rohan '' ?",
            "sql": "select t1 . date_incident_start , t1 . date_incident_end from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . last_name = value"
        },
        {
            "utterance": "Find the start and end dates of behavior incidents of students with last name `` Bergnaum '' ?",
            "sql": "select t1 . date_incident_start , date_incident_end from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . last_name = value"
        },
        {
            "utterance": "Find the start and end dates of behavior incidents of students with last name `` Hansen '' ?",
            "sql": "select t2 . last_name from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\""
    },
    "interaction": [
        {
            "utterance": "what 's the zip code of Lyla address of where she lives ?",
            "sql": "select t1 . zip_postcode from addresses as t1 join teachers as t2 on t1 . address_id = t2 . address_id where t2 . first_name = value"
        },
        {
            "utterance": "where is the city where Lyla stays ?",
            "sql": "select t1 . city from addresses as t1 join teachers as t2 on t1 . address_id = t2 . address_id where t2 . first_name = value"
        },
        {
            "utterance": "what 's Lyla last name ?",
            "sql": "select last_name from teachers where first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""
    },
    "interaction": [
        {
            "utterance": "What are the emails of the students with the first name Emma ?",
            "sql": "select email_address from students where first_name = value"
        },
        {
            "utterance": "What about last name Rohan ? | The emails of the students with the last name Rohan is derrick.jenkins @ example.com | What is that person 's student id ?",
            "sql": "select student_id from students where last_name = value"
        },
        {
            "utterance": "What is the name of the student with id 4 ? | Here are the first , middle , and last name of the student with id 4 . | What is their email address ?",
            "sql": "select email_address from students where student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the last names of teachers who are not involved in any detention.",
        "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id"
    },
    "interaction": [
        {
            "utterance": "How many detentions are there ?",
            "sql": "select distinct count ( * ) from detention"
        },
        {
            "utterance": "How many teachers are not involved in any of them ?",
            "sql": "select count ( * ) from ( select last_name from teachers except select t1 . last_name from teachers as t1 join detention as t2 on t1 . teacher_id = t2 . teacher_id )"
        },
        {
            "utterance": "What are the last names of those teachers ?",
            "sql": "select last_name from teachers except select t1 . last_name from teachers as t1 join detention as t2 on t1 . teacher_id = t2 . teacher_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you provide a count of assessment notes by teacher id ?",
            "sql": "select t1 . teacher_id , count ( * ) from assessment_notes as t1 join teachers as t2 on t1 . teacher_id = t2 . teacher_id group by t1 . teacher_id"
        },
        {
            "utterance": "For that table , can you sort by descending count ?",
            "sql": "select t1 . teacher_id , count ( * ) from assessment_notes as t1 join teachers as t2 on t1 . teacher_id = t2 . teacher_id group by t1 . teacher_id order by count ( * ) desc"
        },
        {
            "utterance": "Can you left join the Assessment Notes table with the Teachers table on teacher_id ?",
            "sql": "select * from assessment_notes as t1 join teachers as t2 on t1 . teacher_id = t2 . teacher_id"
        },
        {
            "utterance": "For the earlier table with sorted counts , can you give me the first name associted with each teacher_id ?",
            "sql": "select t2 . first_name , t1 . teacher_id , count ( * ) from assessment_notes as t1 join teachers as t2 on t1 . teacher_id = t2 . teacher_id group by t1 . teacher_id order by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the last names of teachers who are not involved in any detention.",
        "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( teacher_id ) from teachers"
        },
        {
            "utterance": "How many of them involve in detention ?",
            "sql": "select count ( distinct t2 . teacher_id ) from teachers as t1 join detention as t2 on t1 . teacher_id = t2 . teacher_id"
        },
        {
            "utterance": "Can you show me a list of teachers that are not involve in detention ?",
            "sql": "select last_name from teachers except select t1 . last_name from teachers as t1 join detention as t2 on t1 . teacher_id = t2 . teacher_id"
        },
        {
            "utterance": "Can you also include their id ?",
            "sql": "select last_name , teacher_id from teachers except select t1 . last_name , t1 . teacher_id from teachers as t1 join detention as t2 on t1 . teacher_id = t2 . teacher_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 19,
    "final": {
        "utterance": "How many students are not involved in any behavior incident?",
        "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )"
    },
    "interaction": [
        {
            "utterance": "How many student are involved in any kind of accident ?",
            "sql": "select count ( * ) from students where student_id in ( select student_id from behavior_incident )"
        },
        {
            "utterance": "How about student not involved in any kind of incident ?",
            "sql": "select count ( * ) from students where student_id not in ( select student_id from behavior_incident )"
        },
        {
            "utterance": "And what are their names ?",
            "sql": "select first_name , middle_name , last_name from students where student_id not in ( select student_id from behavior_incident )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\""
    },
    "interaction": [
        {
            "utterance": "Find the start date of behavior incidents of students with the last name `` Fahey '' ?",
            "sql": "select t1 . date_incident_start from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . last_name = value"
        },
        {
            "utterance": "Find the incident type code of behavior incidents of students with the last name `` Fahey '' ?",
            "sql": "select t1 . incident_type_code from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . last_name = value"
        },
        {
            "utterance": "What is the date left university of the student with the last name `` Fahey '' ?",
            "sql": "select t2 . date_left_university from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . last_name = value"
        },
        {
            "utterance": "How many students have the incident type code `` VIOLENCE '' ?",
            "sql": "select count ( * ) from behavior_incident where incident_type_code = value"
        },
        {
            "utterance": "What are the names of the students that have the incident type code `` VIOLENCE '' ? | Do you mean last name or first name ? | Both , please .",
            "sql": "select t2 . first_name , t2 . last_name from behavior_incident as t1 join students as t2 on t1 . student_id = t2 . student_id where t1 . incident_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the first names and last names of students with address in Wisconsin state?",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\""
    },
    "interaction": [
        {
            "utterance": "how many students are living in each state province county ?",
            "sql": "select count ( * ) , state_province_county from addresses as t1 join students as t2 on t1 . address_id = t2 . address_id group by state_province_county"
        },
        {
            "utterance": "show me the first and last names of students in Wisconsin .",
            "sql": "select t2 . first_name , t2 . last_name from addresses as t1 join students as t2 on t1 . address_id = t2 . address_id where t1 . state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
    },
    "interaction": [
        {
            "utterance": "Which browsers are compatible with firefox ?",
            "sql": "select t3 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t1 . name = value"
        },
        {
            "utterance": "WHat about with Fasterfox ?",
            "sql": "select t3 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t1 . name = value"
        },
        {
            "utterance": "Which browsers are compatible with CACHebox ?",
            "sql": "select t3 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t1 . name = value"
        },
        {
            "utterance": "Which browsers are compatible with both ?",
            "sql": "select t3 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t1 . name = value intersect select t3 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many accelerators on the table",
            "sql": "select count ( * ) from web_client_accelerator"
        },
        {
            "utterance": "what is the connection of CACHEbox",
            "sql": "select connection from web_client_accelerator where name = value"
        },
        {
            "utterance": "please list out the operating system | Can you please clarify which operating system do you need ? | list out the all operating system on client accelerator",
            "sql": "select operating_system from web_client_accelerator"
        },
        {
            "utterance": "what are all the client accelerators on the table",
            "sql": "select name from web_client_accelerator"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what are the ids and names of the web accelerators that are compatible with two or more browsers ?",
            "sql": "select t1 . id , t1 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id group by t1 . id having count ( * ) > = value"
        },
        {
            "utterance": "how many browser id ?",
            "sql": "select count ( distinct browser_id ) from accelerator_compatible_browser"
        },
        {
            "utterance": "what are using CProxy in Operating system ?",
            "sql": "select operating_system from web_client_accelerator where name = value"
        },
        {
            "utterance": "who is using Appliance ( Linux ) Operating system ? | Do you want the name of the accelerator ? | yes",
            "sql": "select name from web_client_accelerator where operating_system = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 3,
    "final": {
        "utterance": "How many accelerators are not compatible with the browsers listed ?",
        "sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );"
    },
    "interaction": [
        {
            "utterance": "how many accelerators are there ?",
            "sql": "select count ( * ) from web_client_accelerator"
        },
        {
            "utterance": "what accelerators are not compatible with the browsers ?",
            "sql": "select * from web_client_accelerator where id not in ( select accelerator_id from accelerator_compatible_browser )"
        },
        {
            "utterance": "can you tell me how many accelerators are not compatible ?",
            "sql": "select count ( * ) from web_client_accelerator where id not in ( select accelerator_id from accelerator_compatible_browser )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 4,
    "final": {
        "utterance": "Which accelerator name contains substring \"Opera\"?",
        "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    "interaction": [
        {
            "utterance": "Which accelerator did the client user have ? | Do you mean the name of the accelerator that the client named user has ? | Yes",
            "sql": "select name from web_client_accelerator where client = value"
        },
        {
            "utterance": "Which one of this contains a substring called Opera ? | Do you mean the name of the accelerators whose name contains a substring called `` Opera '' and that the client named user has ? | Yes",
            "sql": "select name from web_client_accelerator where client = value and name like value"
        },
        {
            "utterance": "Which operating system did the client End user , ISP have ?",
            "sql": "select operating_system from web_client_accelerator where client = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998"
    },
    "interaction": [
        {
            "utterance": "WHAT ARE THE BROWSERS LISTED IN THE TABLE",
            "sql": "select name from browser"
        },
        {
            "utterance": "WHICH BROWSER IS COMPATIBLE WITH ACCELERATOR 'CPROXY ' AFTER YEAR 1998",
            "sql": "select t1 . name from browser as t1 join accelerator_compatible_browser as t2 on t1 . id = t2 . browser_id join web_client_accelerator as t3 on t2 . accelerator_id = t3 . id where t3 . name = value and t2 . compatible_since_year > value"
        },
        {
            "utterance": "WHAT IS THE BROWSER ID OF OPERA",
            "sql": "select t1 . id from browser as t1 join accelerator_compatible_browser as t2 on t1 . id = t2 . browser_id join web_client_accelerator as t3 on t2 . accelerator_id = t3 . id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the maximum, minimum and average market share of the listed browsers?",
        "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser"
    },
    "interaction": [
        {
            "utterance": "What is the maximum market share of the browsers ?",
            "sql": "select max ( market_share ) from browser"
        },
        {
            "utterance": "What is the minimum market share of all browsers ?",
            "sql": "select min ( market_share ) from browser"
        },
        {
            "utterance": "What is the average market share of all browsers ?",
            "sql": "select avg ( market_share ) from browser"
        },
        {
            "utterance": "Can you list the names of all browsers that have market shares above the average ?",
            "sql": "select name from browser where market_share > ( select avg ( market_share ) from browser )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the maximum, minimum and average market share of the listed browsers?",
        "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser"
    },
    "interaction": [
        {
            "utterance": "What is the market share of Internet explorer",
            "sql": "select market_share from browser where name = value"
        },
        {
            "utterance": "What about Firefox 's Market share",
            "sql": "select market_share from browser where name = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select market_share from browser where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
    },
    "interaction": [
        {
            "utterance": "Names of browsers that are compartable with cachebox ?",
            "sql": "select t3 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t1 . name = value"
        },
        {
            "utterance": "Names of browsers that are compartable with fasterfox ?",
            "sql": "select t3 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t1 . name = value"
        },
        {
            "utterance": "What is firefox market ahare ?",
            "sql": "select market_share from browser where name = value"
        },
        {
            "utterance": "Tell me the market share of safari ?",
            "sql": "select market_share from browser where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'"
    },
    "interaction": [
        {
            "utterance": "which operating system has a connection of Broadband , Satellite , Wireless , Fiber , DSL ?",
            "sql": "select operating_system from web_client_accelerator where connection = value"
        },
        {
            "utterance": "What is the market share of Safari ?",
            "sql": "select market_share from browser where name = value"
        },
        {
            "utterance": "Since which year has CProxy been compatible ?",
            "sql": "select t2 . compatible_since_year from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t1 . id = t2 . accelerator_id where t1 . name = value"
        },
        {
            "utterance": "What is the total number of browsers are available ?",
            "sql": "select count ( * ) from browser"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select name from browser"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "sql": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the Id of the browser that is compatible with most web accelerators ?",
            "sql": "select t1 . id from browser as t1 join accelerator_compatible_browser as t2 on t1 . id = t2 . browser_id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of browser with id 1 ?",
            "sql": "select name from browser where id = value"
        },
        {
            "utterance": "What is the name of the browser with the second largest market share ?",
            "sql": "select name from browser order by market_share limit value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select t1 . name from browser as t1 join accelerator_compatible_browser as t2 on t1 . id = t2 . browser_id order by compatible_since_year asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 11,
    "final": {
        "utterance": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "sql": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the names of all compatible browsers and accelerators ?",
            "sql": "select t2 . name , t3 . name from accelerator_compatible_browser as t1 join browser as t2 on t1 . browser_id = t2 . id join web_client_accelerator as t3 on t1 . accelerator_id = t3 . id"
        },
        {
            "utterance": "Can you also show their compatible years ?",
            "sql": "select t2 . name , t3 . name , t1 . compatible_since_year from accelerator_compatible_browser as t1 join browser as t2 on t1 . browser_id = t2 . id join web_client_accelerator as t3 on t1 . accelerator_id = t3 . id"
        },
        {
            "utterance": "Hmm , can you list the names of all compatible browsers and accelerators in the descending order of compatible year ?",
            "sql": "select t2 . name , t3 . name from accelerator_compatible_browser as t1 join browser as t2 on t1 . browser_id = t2 . id join web_client_accelerator as t3 on t1 . accelerator_id = t3 . id order by t1 . compatible_since_year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 12,
    "final": {
        "utterance": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;"
    },
    "interaction": [
        {
            "utterance": "What distinct accelerator names are compatible with Firefox .",
            "sql": "select distinct t1 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t3 . name = value"
        },
        {
            "utterance": "What distinct accelerator names are compatible with the browsers that have a market share higher than 15 .",
            "sql": "select distinct t1 . name from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2 . accelerator_id = t1 . id join browser as t3 on t2 . browser_id = t3 . id where t3 . market_share > value"
        },
        {
            "utterance": "What distinct accelerator names have been compatible since at least 1996 .",
            "sql": "select distinct t2 . name from accelerator_compatible_browser as t1 join web_client_accelerator as t2 on t1 . accelerator_id = t2 . id where compatible_since_year > = value"
        },
        {
            "utterance": "Out of these accelerators which are compatible with browsers that have a market share higher than 25 .",
            "sql": "select distinct t2 . name from accelerator_compatible_browser as t1 join web_client_accelerator as t2 on t1 . accelerator_id = t2 . id join browser as t3 on t3 . id = t1 . browser_id where t1 . compatible_since_year > = value and t3 . market_share > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of clubs that do not have any players.",
        "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all clubs ?",
            "sql": "select name from club"
        },
        {
            "utterance": "Show me the name of the club that has the id number 3 ?",
            "sql": "select name from club where club_id = value"
        },
        {
            "utterance": "Show me the region of the club BK Slide ?",
            "sql": "select region from club where name = value"
        },
        {
            "utterance": "Show me the names of the clubs that do not have any players ?",
            "sql": "select name from club where club_id not in ( select club_id from player )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 1,
    "final": {
        "utterance": "List the most common type of competition.",
        "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHich country had the most competitions ?",
            "sql": "select country from competition group by country order by count ( * ) desc limit value"
        },
        {
            "utterance": "What year did most competitions occur ?",
            "sql": "select year from competition group by year order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the most common type ?",
            "sql": "select competition_type from competition group by competition_type order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of clubs that have players with position \"Right Wing\".",
        "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\""
    },
    "interaction": [
        {
            "utterance": "How many clubs have players with the position `` Right Wing '' ?",
            "sql": "select count ( * ) from club as t1 join player as t2 on t1 . club_id = t2 . club_id where t2 . position = value"
        },
        {
            "utterance": "How many total players are there ?",
            "sql": "select count ( * ) from player"
        },
        {
            "utterance": "Can you list all the players ?",
            "sql": "select * from player"
        },
        {
            "utterance": "How many positions are there in total ?",
            "sql": "select count ( distinct position ) from player"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of clubs that do not have any players.",
        "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the club names and ids ?",
            "sql": "select name , club_id from club"
        },
        {
            "utterance": "Hmm , I want to know the player ids , names and their club ids .",
            "sql": "select player_id , name , club_id from player"
        },
        {
            "utterance": "Please list the names of those clubs that do not have any players .",
            "sql": "select name from club where club_id not in ( select club_id from player )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 4,
    "final": {
        "utterance": "what are the name of players who get more than the average points.",
        "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"
    },
    "interaction": [
        {
            "utterance": "What are the names of players who get more than the average points ?",
            "sql": "select name from player where points > ( select avg ( points ) from player )"
        },
        {
            "utterance": "Give me the name of player with the most points",
            "sql": "select name from player where points = ( select max ( points ) from player )"
        },
        {
            "utterance": "Which players scored highest ? Give me names | Do you mean the names of player with the most points ? | Yes",
            "sql": "select name from player where points = ( select max ( points ) from player )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average points of players from club with name \"AIB\".",
        "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\""
    },
    "interaction": [
        {
            "utterance": "What year did the IFG Club form ?",
            "sql": "select t1 . start_year from club as t1 join player as t2 on t1 . club_id = t2 . club_id where t1 . name = value"
        },
        {
            "utterance": "And the club with the name `` AIB ''",
            "sql": "select distinct t1 . start_year from club as t1 join player as t2 on t1 . club_id = t2 . club_id where t1 . name = value"
        },
        {
            "utterance": "What is the position of the player `` Michael Platt '' ?",
            "sql": "select t2 . position from club as t1 join player as t2 on t1 . club_id = t2 . club_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the countries that have never participated in any competition with Friendly type.",
        "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"
    },
    "interaction": [
        {
            "utterance": "Find the countries that have never participated in any competition with Friendly type",
            "sql": "select country from competition except select country from competition where competition_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 7,
    "final": {
        "utterance": "List the types of competition that have at most five competitions of that type.",
        "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5"
    },
    "interaction": [
        {
            "utterance": "Show me all the types of competitions ?",
            "sql": "select distinct ( competition_type ) from competition"
        },
        {
            "utterance": "show me the types of competition that have atleast five competition of that type",
            "sql": "select competition_type from competition group by competition_type having count ( * ) > = value"
        },
        {
            "utterance": "show me the types of competition that has at most competitions of that type",
            "sql": "select competition_type from competition group by competition_type having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 8,
    "final": {
        "utterance": "which country did participated in the most number of Tournament competitions?",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the country that participated in the greatest number of tournaments ?",
            "sql": "select country from competition where competition_type = value group by country order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the name of the country that participated in the least number of tournaments ?",
            "sql": "select country from competition where competition_type = value group by country order by count ( * ) asc limit value"
        },
        {
            "utterance": "What were the competition types of all the competitions Russia participated in ?",
            "sql": "select competition_type from competition where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 9,
    "final": {
        "utterance": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20"
    },
    "interaction": [
        {
            "utterance": "Who scored more than 20 points ?",
            "sql": "select * from player where points > value"
        },
        {
            "utterance": "And what positions did those players play ?",
            "sql": "select position from player where points > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from player where points > value"
        },
        {
            "utterance": "And who scored the highest points out of them ?",
            "sql": "select name from player where points = ( select max ( points ) from player )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 10,
    "final": {
        "utterance": "which countries did participated in both Friendly and Tournament type competitions.",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'"
    },
    "interaction": [
        {
            "utterance": "what are the name of the countries who have participated in both the friendly and tournament type competitions",
            "sql": "select country from competition where competition_type = value intersect select country from competition where competition_type = value"
        },
        {
            "utterance": "what is the competition id of the country | Can you clarify ? The competition id is not unique to a country . | list all the competition id for russia",
            "sql": "select competition_id from competition where country = value"
        },
        {
            "utterance": "include the year in the table",
            "sql": "select competition_id , year from competition where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the countries that have never participated in any competition with Friendly type.",
        "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"
    },
    "interaction": [
        {
            "utterance": "What countries have not participated in any competition with Friendly type ?",
            "sql": "select country from competition except select country from competition where competition_type = value"
        },
        {
            "utterance": "How many countries have not participated in competitions with friendly types ?",
            "sql": "select count ( * ) from ( select country from competition except select country from competition where competition_type = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of journalists that have reported more than one event.",
        "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the total number of journalists ?",
            "sql": "select count ( * ) from journalist"
        },
        {
            "utterance": "How many journalists have worked for more than 5 years ?",
            "sql": "select count ( * ) from journalist where years_working > value"
        },
        {
            "utterance": "What is the name of the journalist who has worked longest ?",
            "sql": "select name from journalist order by years_working desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of journalists and the names of the events they reported in ascending order",
        "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me all the names of the journalists ?",
            "sql": "select name from journalist"
        },
        {
            "utterance": "What are the names of the events they reported ?",
            "sql": "select t3 . name , t2 . name from news_report as t1 join event as t2 on t1 . event_id = t2 . event_id join journalist as t3 on t1 . journalist_id = t3 . journalist_id"
        },
        {
            "utterance": "Could you please organize those in ascending order ?",
            "sql": "select t3 . name , t2 . name from news_report as t1 join event as t2 on t1 . event_id = t2 . event_id join journalist as t3 on t1 . journalist_id = t3 . journalist_id order by t2 . event_attendance asc"
        },
        {
            "utterance": "What work type do those journalists do ?",
            "sql": "select t3 . name , t1 . work_type from news_report as t1 join event as t2 on t1 . event_id = t2 . event_id join journalist as t3 on t1 . journalist_id = t3 . journalist_id"
        },
        {
            "utterance": "How many years have they each been working , please ?",
            "sql": "select name , years_working from journalist"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 2,
    "final": {
        "utterance": "what are the average and maximum attendances of all events?",
        "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event"
    },
    "interaction": [
        {
            "utterance": "What is the average attendance of all events ?",
            "sql": "select avg ( event_attendance ) from event"
        },
        {
            "utterance": "What is the maximum attendance of all events ?",
            "sql": "select max ( event_attendance ) from event"
        },
        {
            "utterance": "What is the minimum attendance of all events ?",
            "sql": "select min ( event_attendance ) from event"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of journalists from \"England\" or \"Wales\".",
        "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\""
    },
    "interaction": [
        {
            "utterance": "show me the journalists from England | Do you want their names ? | Yes , I do",
            "sql": "select name from journalist where nationality = value"
        },
        {
            "utterance": "and from Wales too",
            "sql": "select name from journalist where nationality = value or nationality = value"
        },
        {
            "utterance": "How many journalists are from England or Wales ?",
            "sql": "select count ( * ) from journalist where nationality = value or nationality = value"
        },
        {
            "utterance": "Can you show me their names ?",
            "sql": "select name from journalist where nationality = value or nationality = value"
        },
        {
            "utterance": "How many journalists from England have worked for over an year ?",
            "sql": "select count ( * ) from journalist where nationality = value and years_working > value"
        },
        {
            "utterance": "What about Wales ?",
            "sql": "select count ( * ) from journalist where nationality = value and years_working > value"
        },
        {
            "utterance": "Can you show me the names of those journalists ? | Do you mean the journalists from Wales and England who have worked for over a year ? | Yes",
            "sql": "select name from journalist where nationality = value and years_working > value union select name from journalist where nationality = value and years_working > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the average age and experience working length of journalists working on different role type.",
        "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    "interaction": [
        {
            "utterance": "how many journalist there",
            "sql": "select count ( * ) from journalist"
        },
        {
            "utterance": "what is the Nationality of Herbert Swindells",
            "sql": "select nationality from journalist where name = value"
        },
        {
            "utterance": "what is the age of George Gilchrist",
            "sql": "select age from journalist where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of journalists and the dates of the events they reported.",
        "sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID"
    },
    "interaction": [
        {
            "utterance": "Show me the names of journalists",
            "sql": "select name from journalist"
        },
        {
            "utterance": "Show me the events they reported | which columuns to return | date",
            "sql": "select t1 . event_id , t1 . date from event as t1 join news_report as t2 on t1 . event_id = t2 . event_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of journalists and the number of events they reported.",
        "sql": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name"
    },
    "interaction": [
        {
            "utterance": "Can you please list the names of the journalists in a table with the number of events they each reported ?",
            "sql": "select t3 . name , count ( * ) from news_report as t1 join event as t2 on t1 . event_id = t2 . event_id join journalist as t3 on t1 . journalist_id = t3 . journalist_id group by t3 . name"
        },
        {
            "utterance": "Can you add their ages and nationalities to the table please ?",
            "sql": "select t3 . name , t3 . age , t3 . nationality , count ( * ) from news_report as t1 join event as t2 on t1 . event_id = t2 . event_id join journalist as t3 on t1 . journalist_id = t3 . journalist_id group by t3 . name"
        },
        {
            "utterance": "What is the name of the event that the oldest journalist reported on ?",
            "sql": "select t3 . name , t2 . name from news_report as t1 join event as t2 on t1 . event_id = t2 . event_id join journalist as t3 on t1 . journalist_id = t3 . journalist_id where t3 . age = ( select max ( age ) from journalist )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of journalists and the names of the events they reported in ascending order",
        "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
    },
    "interaction": [
        {
            "utterance": "Hmm , interesting . What is the nationality of Jackie Waring ? | Do you mean the journalist Jackie Waring ? | Yes .",
            "sql": "select nationality from journalist where name = value"
        },
        {
            "utterance": "What other Journalists have England as their nationality ?",
            "sql": "select * from journalist where name ! = value and nationality = value"
        },
        {
            "utterance": "How old is Herbert Swindells ?",
            "sql": "select age from journalist where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the nationality of the journalist with the largest number of years working?",
        "sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , what journalist had worked the most amount of years ?",
            "sql": "select journalist_id from journalist order by years_working desc limit value"
        },
        {
            "utterance": "Which journalist has worked the 2nd most amount of years ?",
            "sql": "select journalist_id from journalist where journalist_id not in ( select journalist_id from journalist order by years_working desc limit value ) order by years_working desc limit value"
        },
        {
            "utterance": "Thank you , for the journalist with the ID of 4 , what is his name ?",
            "sql": "select name from journalist where journalist_id = value"
        },
        {
            "utterance": "Wonderful ! What is her nationality ?",
            "sql": "select nationality from journalist where journalist_id = value"
        },
        {
            "utterance": "Thank you ! That 's all I needed , but I 'm also curious , how many journalists are from England ?",
            "sql": "select count ( journalist_id ) from journalist where nationality = value"
        },
        {
            "utterance": "Which one has the least amount of years worked ?",
            "sql": "select journalist_id from journalist where nationality = value order by years_working limit value"
        },
        {
            "utterance": "Awesome , Im almost done , but can you tell me overall who worked the least amount of years as well ?",
            "sql": "select journalist_id from journalist order by years_working limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of journalists from \"England\" or \"Wales\".",
        "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\""
    },
    "interaction": [
        {
            "utterance": "how many journalist there",
            "sql": "select count ( * ) from journalist"
        },
        {
            "utterance": "what is the name of journalist ID 2",
            "sql": "select name from journalist where journalist_id = value"
        },
        {
            "utterance": "what is the nationality of journalist ID 1",
            "sql": "select nationality from journalist where journalist_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "sql": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3"
    },
    "interaction": [
        {
            "utterance": "Show the journalists with more than 10 years of working .",
            "sql": "select * from journalist where years_working > value"
        },
        {
            "utterance": "Show the name of journalists with more than 10 years of working and less than 3 years of working .",
            "sql": "select name from journalist where years_working > value and years_working < value"
        },
        {
            "utterance": "List the nations that have journalists with more than 10 years of working and journalists with less than 3 years of working .",
            "sql": "select nationality from journalist where years_working > value intersect select nationality from journalist where years_working < value"
        },
        {
            "utterance": "What is the average years of working for journalists from England .",
            "sql": "select avg ( years_working ) from journalist where nationality = value"
        },
        {
            "utterance": "List the names of all journalists from England .",
            "sql": "select name from journalist where nationality = value"
        },
        {
            "utterance": "What is the average age for all journalists from England .",
            "sql": "select avg ( age ) from journalist where nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 11,
    "final": {
        "utterance": "List the event venues and names that have the top 2 most number of people attended.",
        "sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( * ) from event"
        },
        {
            "utterance": "Can you list the ids of them by the numer of people attended ? | Do you want to list them in ascending order or descending order ? | Descending please",
            "sql": "select event_id from event order by event_attendance desc"
        },
        {
            "utterance": "Can you please also include their names and the number of peole attended ?",
            "sql": "select event_id , event_attendance , name from event order by event_attendance desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008"
    },
    "interaction": [
        {
            "utterance": "how many locations have shops that opened before 2008 ?",
            "sql": "select count ( location ) from shop where open_year = value"
        },
        {
            "utterance": "how many shops opened later than 2012 ?",
            "sql": "select count ( location ) from shop where open_year > value"
        },
        {
            "utterance": "can you show the locations for those stores ?",
            "sql": "select location from shop where open_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 1,
    "final": {
        "utterance": "Show names of shops that have more than one kind of device in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what are the shops ? | Do you want the names of all the shops ? | yes",
            "sql": "select shop_name from shop"
        },
        {
            "utterance": "now show me the shop which have devices in stock",
            "sql": "select t2 . shop_name from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id"
        },
        {
            "utterance": "now show me the shops that have more than one device in stock",
            "sql": "select t2 . shop_name from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 2,
    "final": {
        "utterance": "List the software platform shared by the greatest number of devices.",
        "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the software platform shared by the greatest number of devices .",
            "sql": "select software_platform from device group by software_platform order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many devices from the list use the Android platform ?",
            "sql": "select count ( * ) from device where software_platform = value"
        },
        {
            "utterance": "And how many devices from the list use the iOS platform ?",
            "sql": "select count ( * ) from device where software_platform = value"
        },
        {
            "utterance": "Could you please list the devices that use the Android platform ?",
            "sql": "select device from device where software_platform = value"
        },
        {
            "utterance": "How many different carriers are there on the list ?",
            "sql": "select count ( distinct carrier ) from device"
        },
        {
            "utterance": "What is the carrier for the Samsung device ?",
            "sql": "select carrier from device where device = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name of the shop that has the most kind of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many devices are in stock at Dinas Device ?",
            "sql": "select count ( device_id ) from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id where shop_name = value"
        },
        {
            "utterance": "How many devices are at Best Buy ?",
            "sql": "select count ( device_id ) from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id where shop_name = value"
        },
        {
            "utterance": "Show me the name of the shop that has the most devices in stock ?",
            "sql": "select t2 . shop_name from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Where are they located ?",
            "sql": "select t2 . shop_name , location from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name of the shop that have the largest quantity of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the shop names ?",
            "sql": "select shop_name from shop"
        },
        {
            "utterance": "Beautiful ! Can you update this list to include the stock quantity for all of these shops ?",
            "sql": "select t2 . shop_name , t1 . quantity from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id"
        },
        {
            "utterance": "Can you filter this list to show the name of the shop that has the largest quantity of stock , and please also display the quantity of stock ?",
            "sql": "select t2 . shop_name , t1 . quantity from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by sum ( t1 . quantity ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name of the shop that have the largest quantity of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHICH SHOP HAS THE LARGEST QUANTITY OF DEVICES IN STOCK",
            "sql": "select t2 . shop_name from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by sum ( t1 . quantity ) desc limit value"
        },
        {
            "utterance": "WHAT IS THE LOCATION OF THIS SHOP",
            "sql": "select t2 . location from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by sum ( t1 . quantity ) desc limit value"
        },
        {
            "utterance": "WHAT IS THE SHOP ID | Do you mean the shop id for the shop that has the largest quantity of devices in stock ? | YES",
            "sql": "select t2 . shop_id from stock as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by sum ( t1 . quantity ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008"
    },
    "interaction": [
        {
            "utterance": "Show me the open year of all shops in numerical order .",
            "sql": "select open_year from shop order by open_year"
        },
        {
            "utterance": "Show the locations shared by shops .",
            "sql": "select location from shop group by location having count ( * ) > value"
        },
        {
            "utterance": "Show the shops with open year later than 2012 and open year before 2008 .",
            "sql": "select shop_name from shop where open_year > value or open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\""
    },
    "interaction": [
        {
            "utterance": "What are the enrollment dates of all the tests that have result `` Pass '' ?",
            "sql": "select t1 . date_of_enrolment from student_course_enrolment as t1 join student_tests_taken as t2 on t1 . registration_id = t2 . registration_id where t2 . test_result = value"
        },
        {
            "utterance": "What are the student IDs of students who passed the test ?",
            "sql": "select t1 . student_id from student_course_enrolment as t1 join student_tests_taken as t2 on t1 . registration_id = t2 . registration_id where t2 . test_result = value"
        },
        {
            "utterance": "How many students passed the test ?",
            "sql": "select count ( t1 . student_id ) from student_course_enrolment as t1 join student_tests_taken as t2 on t1 . registration_id = t2 . registration_id where t2 . test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the student ID and personal name of the student with at least two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "find the student id and personal name of the student whose course id is 2",
            "sql": "select t1 . student_id , t2 . personal_name from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id where t1 . course_id = value"
        },
        {
            "utterance": "show the date of registration for the student id 1",
            "sql": "select date_of_registration from students where student_id = value"
        },
        {
            "utterance": "show the login name and password for registration id 2",
            "sql": "select t1 . login_name , t1 . password from students as t1 join student_course_enrolment as t2 on t2 . student_id = t1 . student_id where registration_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the common login name of course authors and students.",
        "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
    },
    "interaction": [
        {
            "utterance": "How many different student logins are there ?",
            "sql": "select count ( distinct login_name ) from students"
        },
        {
            "utterance": "how many different author logins are there ?",
            "sql": "select count ( distinct login_name ) from course_authors_and_tutors"
        },
        {
            "utterance": "How many login names are in both authors and students ?",
            "sql": "select login_name from course_authors_and_tutors intersect select login_name from students"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the completion dates of all the tests that have result \"Fail\"?",
        "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""
    },
    "interaction": [
        {
            "utterance": "What is the latest test completion date ?",
            "sql": "select t1 . date_of_completion from student_course_enrolment as t1 join student_tests_taken as t2 on t1 . registration_id = t2 . registration_id order by t1 . date_of_completion desc limit value"
        },
        {
            "utterance": "How many students have taken tests ?",
            "sql": "select count ( distinct student_id ) from student_course_enrolment"
        },
        {
            "utterance": "How many students failed tests ?",
            "sql": "select count ( distinct t1 . student_id ) from student_course_enrolment as t1 join student_tests_taken as t2 on t1 . registration_id = t2 . registration_id where t2 . test_result = value"
        },
        {
            "utterance": "When did these failures occur ?",
            "sql": "select t1 . date_of_completion from student_course_enrolment as t1 join student_tests_taken as t2 on t1 . registration_id = t2 . registration_id where t2 . test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
        "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of login name ?",
            "sql": "select login_name from students"
        },
        {
            "utterance": "can you show me a list of password ?",
            "sql": "select password from students"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many courses are taught ?",
            "sql": "select count ( * ) from courses"
        },
        {
            "utterance": "How many different course authors are there ?",
            "sql": "select count ( distinct author_id ) from course_authors_and_tutors"
        },
        {
            "utterance": "What is the name of the author who teaches the most courses ? | Which kinds of names do you prefer ? | personal name",
            "sql": "select t1 . personal_name from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id group by t2 . author_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the family name ?",
            "sql": "select t1 . family_name from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id group by t2 . author_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the author id ?",
            "sql": "select t2 . author_id from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id group by t2 . author_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the student ID and personal name of the student with at least two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What is the highest number of enrollments any student has ?",
            "sql": "select count ( * ) from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many students have 5 enrollments ?",
            "sql": "select count ( * ) from ( select * from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) = value )"
        },
        {
            "utterance": "What is that student 's registration ID ?",
            "sql": "select t1 . registration_id from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) = value"
        },
        {
            "utterance": "Can you give me the student ID of registration ID 19 ?",
            "sql": "select student_id from student_course_enrolment where registration_id = value"
        },
        {
            "utterance": "What is the personal name of student ID 15 ?",
            "sql": "select personal_name from students where student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
        "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"
    },
    "interaction": [
        {
            "utterance": "How many courses are there in Computer Science ?",
            "sql": "select count ( * ) from courses as t1 join subjects as t2 on t1 . subject_id = t2 . subject_id where t2 . subject_name = value"
        },
        {
            "utterance": "Great , and how many courses are there in Arts ?",
            "sql": "select count ( * ) from courses as t1 join subjects as t2 on t1 . subject_id = t2 . subject_id where t2 . subject_name = value"
        },
        {
            "utterance": "Wonderful . And how many courses in Language ?",
            "sql": "select count ( * ) from courses as t1 join subjects as t2 on t1 . subject_id = t2 . subject_id where t2 . subject_name = value"
        },
        {
            "utterance": "Great , can you sort a list of Computer Science , Arts , and Language by the number of courses , in ascending order ?",
            "sql": "select t2 . subject_name from courses as t1 join subjects as t2 on t1 . subject_id = t2 . subject_id group by t1 . subject_id order by count ( * ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 8,
    "final": {
        "utterance": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""
    },
    "interaction": [
        {
            "utterance": "How many students have the family name `` Zieme '' ?",
            "sql": "select count ( student_id ) from students where family_name = value"
        },
        {
            "utterance": "What is that student 's personal name ?",
            "sql": "select personal_name from students where family_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the student ID and middle name for all the students with at most two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the IDs and middle names of all students who have no more than 2 enrollments ?",
            "sql": "select t1 . student_id , t2 . middle_name from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) < = value"
        },
        {
            "utterance": "What are the dates of enrollment and completion for each of those students ? Please list it in the table .",
            "sql": "select t1 . date_of_enrolment , t1 . date_of_completion from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) < = value"
        },
        {
            "utterance": "What is the full name of the student with the latest date of completion ?",
            "sql": "select t2 . personal_name , t2 . middle_name , t2 . family_name from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id order by t1 . date_of_completion desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of the course that has the most student enrollment?",
        "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the course that has the most student enrollment ?",
            "sql": "select t1 . course_name from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id group by t1 . course_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many students are enrolled in French ?",
            "sql": "select count ( * ) from student_course_enrolment as t1 join courses as t2 on t2 . course_id = t1 . course_id where course_name = value"
        },
        {
            "utterance": "What is the name of the course that has the least student enrollment ?",
            "sql": "select t1 . course_name from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id group by t1 . course_name order by count ( * ) limit value"
        },
        {
            "utterance": "How many students are enrolled in Chinese Painting ?",
            "sql": "select count ( * ) from student_course_enrolment as t1 join courses as t2 on t2 . course_id = t1 . course_id where course_name = value"
        },
        {
            "utterance": "What is this student 's name ? | There no info about the name of the student . How about the id of the student ? | What is the ID of this student ?",
            "sql": "select student_id from student_course_enrolment as t1 join courses as t2 on t2 . course_id = t1 . course_id where course_name = value"
        },
        {
            "utterance": "What other classes is this student taking ?",
            "sql": "select distinct course_name from student_course_enrolment as t1 join courses as t2 on t2 . course_id = t1 . course_id where student_id = value and course_name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of each course and the corresponding number of student enrollment?",
        "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the courses",
            "sql": "select course_name from courses"
        },
        {
            "utterance": "Yes please",
            "sql": "select t1 . course_name , count ( * ) from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id group by t1 . course_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the student ID and login name of the student with the most course enrollments",
        "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest number of enrollments ? | do you mean the highest number of course enrollments of student ? | yes",
            "sql": "select count ( * ) from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the student ID with the most course enrollments",
            "sql": "select t1 . student_id from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the login name of the student with the most course enrollments ?",
            "sql": "select t2 . login_name from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id group by t1 . student_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 13,
    "final": {
        "utterance": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""
    },
    "interaction": [
        {
            "utterance": "LIST THE DATES OF ENROLLMENT AND COMPLETION OF THE STUDENT WITH PERSONAL NAME `` KARSON '' ?",
            "sql": "select t1 . date_of_enrolment , t1 . date_of_completion from student_course_enrolment as t1 join students as t2 on t1 . student_id = t2 . student_id where t2 . personal_name = value"
        },
        {
            "utterance": "List the name of all students ?",
            "sql": "select personal_name , middle_name , family_name from students"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the common login name of course authors and students.",
        "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
    },
    "interaction": [
        {
            "utterance": "How many login names are there ? | Did you mean the login names for all students ? | How many login names are there for the students ?",
            "sql": "select count ( distinct login_name ) from students"
        },
        {
            "utterance": "What login name is the same for students and course authors ?",
            "sql": "select login_name from course_authors_and_tutors intersect select login_name from students"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
        "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the course authors who teach the course with the name `` operating system '' or `` data structure '' please ? | do you want to return their personal , middle , and family names ? | All of those , please ?",
            "sql": "select t1 . personal_name , t1 . middle_name , t1 . family_name from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id where t2 . course_name = value or t2 . course_name = value"
        },
        {
            "utterance": "What are their login names ?",
            "sql": "select t1 . login_name from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id where t2 . course_name = value or t2 . course_name = value"
        },
        {
            "utterance": "What are the full names of the course authors who teach the course with the name `` advanced database '' please ?",
            "sql": "select t1 . personal_name , t1 . middle_name , t1 . family_name from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id where t2 . course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "List the author ids listed more than once in the courses",
            "sql": "select author_id from courses group by author_id having count ( author_id ) > value"
        },
        {
            "utterance": "Find the addresses and author IDs of the course authors that teach at least two courses .",
            "sql": "select t1 . address_line_1 , t2 . author_id from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id group by t2 . author_id having count ( * ) > = value"
        },
        {
            "utterance": "How about those who teaches at least one course ?",
            "sql": "select t1 . address_line_1 , t2 . author_id from course_authors_and_tutors as t1 join courses as t2 on t1 . author_id = t2 . author_id group by t2 . author_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the date of enrollment of the course named \"Spanish\"?",
        "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""
    },
    "interaction": [
        {
            "utterance": "What is the date of enrollment of the course named `` Spanish '' ?",
            "sql": "select t2 . date_of_enrolment from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value"
        },
        {
            "utterance": "What is the date of enrollment in the course named `` database '' ?",
            "sql": "select t2 . date_of_enrolment from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value"
        },
        {
            "utterance": "What is the date of enrollment in the course named `` advanced database '' ?",
            "sql": "select t2 . date_of_enrolment from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value"
        },
        {
            "utterance": "What is the date of enrollment in the course named `` operating system '' ?",
            "sql": "select t2 . date_of_enrolment from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value"
        },
        {
            "utterance": "What is the date of completion in the course named `` advanced database ? ''",
            "sql": "select t2 . date_of_completion from courses as t1 join student_course_enrolment as t2 on t1 . course_id = t2 . course_id where t1 . course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id"
    },
    "interaction": [
        {
            "utterance": "what are the subjects available ?",
            "sql": "select subject_name from subjects"
        },
        {
            "utterance": "list the author ids",
            "sql": "select author_id from courses"
        },
        {
            "utterance": "list the course ids available",
            "sql": "select course_id from courses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 19,
    "final": {
        "utterance": "List each test result and its count in descending order of count.",
        "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many failed the exam ?",
            "sql": "select count ( * ) from student_tests_taken where test_result = value"
        },
        {
            "utterance": "And what about passed ?",
            "sql": "select count ( * ) from student_tests_taken where test_result = value"
        },
        {
            "utterance": "Can you list each test result and it 's count in descending order based on count ?",
            "sql": "select test_result , count ( * ) from student_tests_taken group by test_result order by count ( * ) desc"
        },
        {
            "utterance": "Yes , what are ids of all passed exams ?",
            "sql": "select registration_id from student_tests_taken where test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the login name of the course author that teaches the course with name \"advanced database\".",
        "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""
    },
    "interaction": [
        {
            "utterance": "Can you please provide the names of all courses ?",
            "sql": "select course_name from courses"
        },
        {
            "utterance": "Can you please provide the author id for the author that teaches the Advanced Database course ?",
            "sql": "select author_id from courses where course_name = value"
        },
        {
            "utterance": "And what is the full name of the teacher with author id 6 ?",
            "sql": "select personal_name , middle_name , family_name from course_authors_and_tutors where author_id = value"
        },
        {
            "utterance": "And the login name for Adolf Keira Rohan ?",
            "sql": "select login_name from course_authors_and_tutors where personal_name like value and middle_name like value and family_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of the city with the top 5 white percentages.",
        "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "how many cities are there ?",
            "sql": "select count ( * ) from city"
        },
        {
            "utterance": "which city has most hispanic population ?",
            "sql": "select name from city order by hispanic desc limit value"
        },
        {
            "utterance": "what about black ?",
            "sql": "select name from city order by black desc limit value"
        },
        {
            "utterance": "what about white ?",
            "sql": "select name from city order by white desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name of cities in the county that has the largest number of police officers.",
        "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "show the names of cities",
            "sql": "select name from city"
        },
        {
            "utterance": "list out the names",
            "sql": "select name from city"
        },
        {
            "utterance": "what is the population of Abbotsford",
            "sql": "select population from county_public_safety where name = value"
        },
        {
            "utterance": "what is the crime rate of Campbell River",
            "sql": "select crime_rate from county_public_safety where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the number of cities in counties that have a population more than 20000.",
        "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all of the cities including city IDs and city names ?",
            "sql": "select city_id , name from city"
        },
        {
            "utterance": "Oh , I am sorry about that . Can you please show me a list of all of the cities located in counties that for which the county has a population over 20,000 ?",
            "sql": "select name from city where county_id in ( select county_id from county_public_safety where population > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of counties that do not have any cities.",
        "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
    },
    "interaction": [
        {
            "utterance": "Okay ! Can you provide me with a list of all of the city names and which counties they belong to ?",
            "sql": "select t2 . name , t1 . name from county_public_safety as t1 join city as t2 on t1 . county_id = t2 . county_id"
        },
        {
            "utterance": "Thank you very much ! Can you filter this list to show only the cities in the country with the largest population ?",
            "sql": "select t2 . name , t1 . name from county_public_safety as t1 join city as t2 on t1 . county_id = t2 . county_id order by population desc limit value"
        },
        {
            "utterance": "Thank you ! Can you update this filtered list to show the total population of this county ?",
            "sql": "select t1 . population from county_public_safety as t1 join city as t2 on t1 . county_id = t2 . county_id order by population desc limit value"
        },
        {
            "utterance": "Awesome ! Finally , can you show me the number of residents per officer for this county ?",
            "sql": "select t1 . residents_per_officer from county_public_safety as t1 join city as t2 on t1 . county_id = t2 . county_id order by population desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the police force shared by counties with location on the east and west.",
        "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""
    },
    "interaction": [
        {
            "utterance": "What is the police force of counties on the east side ?",
            "sql": "select police_force from county_public_safety where location = value"
        },
        {
            "utterance": "What is the police force of counties on the west side ?",
            "sql": "select police_force from county_public_safety where location = value"
        },
        {
            "utterance": "What is the police force shared by county on both sides ?",
            "sql": "select police_force from county_public_safety where location = value intersect select police_force from county_public_safety where location = value"
        },
        {
            "utterance": "How many police officers are in the police force shared by county on both sides ?",
            "sql": "select count ( * ) from ( select police_force from county_public_safety where location = value intersect select police_force from county_public_safety where location = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name of cities in the county that has the largest number of police officers.",
        "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Show the name of cities in the county that has the largest number of police officers .",
            "sql": "select name from city where county_id = ( select county_id from county_public_safety order by police_officers desc limit value )"
        },
        {
            "utterance": "How many police officers are in Albonito ? | Do you mean 'Aibonito ' not 'Albonito ' ? | Yes Aibonito , my mistake",
            "sql": "select police_officers from county_public_safety where county_id = ( select county_id from city where name = value )"
        },
        {
            "utterance": "What is the population of Aibonito ?",
            "sql": "select population from county_public_safety where county_id = ( select county_id from city where name = value )"
        },
        {
            "utterance": "What is the crime rate in Aibonito ?",
            "sql": "select crime_rate from county_public_safety where county_id = ( select county_id from city where name = value )"
        },
        {
            "utterance": "How many residents per officer are there in Aibonito ?",
            "sql": "select residents_per_officer from county_public_safety where county_id = ( select county_id from city where name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the minimum and maximum crime rate of counties?",
        "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"
    },
    "interaction": [
        {
            "utterance": "How many counties are there ?",
            "sql": "select count ( * ) from county_public_safety"
        },
        {
            "utterance": "Which county has the lowest crime rate ? | Would you like the county name corresponding to the lowest crime rate ? | yes",
            "sql": "select name from county_public_safety order by crime_rate asc limit value"
        },
        {
            "utterance": "which county has the highest crime rate ?",
            "sql": "select name from county_public_safety order by crime_rate desc limit value"
        },
        {
            "utterance": "list together , the crime rate for Central Saanich and Campbell River counties | Would you like me to list the crime rates for counties with the name Central Saanich or Campbell River ? | yes",
            "sql": "select name , crime_rate from county_public_safety where name = value or name = value"
        },
        {
            "utterance": "please list by crime rate in ascending order | Would you like the crime rates for all counties in ascending order of crime rate ? | no , just for the 2 counties from the previous query",
            "sql": "select name , crime_rate from county_public_safety where name = value or name = value order by crime_rate asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the crime rate of counties with a city having white percentage more than 90.",
        "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"
    },
    "interaction": [
        {
            "utterance": "what the highest population in the county public safety table",
            "sql": "select max ( population ) from county_public_safety"
        },
        {
            "utterance": "how many locations in the county public safety table",
            "sql": "select count ( location ) from county_public_safety"
        },
        {
            "utterance": "what are the highest crime rate in the county public safety table",
            "sql": "select crime_rate from county_public_safety order by crime_rate desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 8,
    "final": {
        "utterance": "List the name of the county with the largest population.",
        "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Could you please get me the name of the county with the largest population ?",
            "sql": "select name from county_public_safety order by population desc limit value"
        },
        {
            "utterance": "How many police officers are there in that county ?",
            "sql": "select police_officers from county_public_safety order by population desc limit value"
        },
        {
            "utterance": "What counties have more police officers than that ? | do you want to return their names ? | Yes , please .",
            "sql": "select name from county_public_safety where police_officers > ( select police_officers from county_public_safety order by population desc limit value )"
        },
        {
            "utterance": "Which county has the lowest amount of police officers ?",
            "sql": "select name from county_public_safety order by population limit value"
        },
        {
            "utterance": "How many police officers are in that county ?",
            "sql": "select police_officers from county_public_safety order by police_officers limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the location shared by most counties?",
        "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many customer list ? | Do you want the number of documents in the list ? | No , and what is the location shared by the least counties ?",
            "sql": "select location from county_public_safety group by location order by count ( * ) limit value"
        },
        {
            "utterance": "Find the crime rate of the county named `` Burnaby '' ?",
            "sql": "select crime_rate from county_public_safety where name = value"
        },
        {
            "utterance": "Find the location of the campbell river ?",
            "sql": "select location from county_public_safety where name = value"
        },
        {
            "utterance": "which police force assigned the country id 2 ?",
            "sql": "select police_officers from county_public_safety where county_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 0,
    "final": {
        "utterance": "List the nominees that have been nominated more than two musicals.",
        "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Give me the list of nominees that has been nominated multiple times for musicals",
            "sql": "select nominee from musical group by nominee having count ( * ) > value"
        },
        {
            "utterance": "And what musicals were they nominated for ?",
            "sql": "select name from musical group by nominee having count ( * ) > value"
        },
        {
            "utterance": "What year ( s ) were they nominated in ?",
            "sql": "select year from musical group by nominee having count ( * ) > value"
        },
        {
            "utterance": "Who else was also nominated in 1986 ?",
            "sql": "select distinct nominee from musical where year = value and nominee ! = value"
        },
        {
            "utterance": "What musicals were they nominated for ?",
            "sql": "select name from musical where year = value and nominee = value"
        },
        {
            "utterance": "And in what categories were those nominations ?",
            "sql": "select name , category from musical where year = value and nominee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the duration of the oldest actor?",
        "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the duration of the oldest actor ?",
            "sql": "select duration from actor order by age desc limit value"
        },
        {
            "utterance": "What is the character of Tom Oliver ?",
            "sql": "select character from actor where name = value"
        },
        {
            "utterance": "Please List out the Actors name ?",
            "sql": "select name from actor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
    },
    "interaction": [
        {
            "utterance": "Which nominees have nominated musicals for `` Tony Award '' ?",
            "sql": "select distinct nominee from musical where award = value"
        },
        {
            "utterance": "Which nominees have nominated musicals for `` Drama Desk Award '' ?",
            "sql": "select distinct nominee from musical where award = value"
        },
        {
            "utterance": "Which of these have nominated musicals for both `` Tony Award '' and `` Drama Desk Award '' ?",
            "sql": "select nominee from musical where award = value intersect select nominee from musical where award = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 3,
    "final": {
        "utterance": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
    },
    "interaction": [
        {
            "utterance": "What 1986 movie was nominated for a Tony Award for Best Book of a Musical ?",
            "sql": "select name from musical where year = value and category = value and result = value"
        },
        {
            "utterance": "How many actors appeared in it ?",
            "sql": "select count ( t1 . name ) from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id where t2 . year = value and t2 . category = value and t2 . result = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t1 . name from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id where t2 . year = value and t2 . category = value and t2 . result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
    },
    "interaction": [
        {
            "utterance": "Can you list the awards of the musical nominee `` Bob Fosse '' ?",
            "sql": "select distinct award from musical where nominee = value"
        },
        {
            "utterance": "Can you list the awards of the musical nominee `` Cleavant Derricks '' ?",
            "sql": "select distinct award from musical where nominee = value"
        },
        {
            "utterance": "What categories did Cleavant Derricks win for ?",
            "sql": "select category from musical where nominee = value and result = value"
        },
        {
            "utterance": "What categories were Cleavant Derrick nominated for ?",
            "sql": "select category from musical where nominee = value and result = value"
        },
        {
            "utterance": "What categories did Bob Fosse win in ?",
            "sql": "select category from musical where nominee = value and result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the nominee who has been nominated the greatest number of times.",
        "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many times has Bob Fosse been nominated ?",
            "sql": "select count ( * ) from musical where nominee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 6,
    "final": {
        "utterance": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
    },
    "interaction": [
        {
            "utterance": "Which musician has the most number of actors who have appeared in the musicals ? | Did you want the name of the musical ? | Yes",
            "sql": "select t2 . name from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id group by t1 . musical_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "From which year is it ?",
            "sql": "select t2 . year from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id group by t1 . musical_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the musical id of Lou Carpenter ?",
            "sql": "select t2 . musical_id from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id where t1 . character = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names of musicals which have at least three actors.",
        "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "which musical ids showed up at least three times in the actor table ?",
            "sql": "select t2 . musical_id from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id group by t1 . musical_id having count ( * ) > = value"
        },
        {
            "utterance": "What year is that musical with id 6 ?",
            "sql": "select distinct ( t2 . year ) from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id where t2 . musical_id = value"
        },
        {
            "utterance": "And what 's the name for that musical with ID 6 ?",
            "sql": "select distinct ( t2 . name ) from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id where t2 . musical_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 8,
    "final": {
        "utterance": "Show names of musicals which have at least three actors.",
        "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "list the names of the musicals with more than three actors",
            "sql": "select t2 . name from actor as t1 join musical as t2 on t1 . musical_id = t2 . musical_id group by t1 . musical_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 0,
    "final": {
        "utterance": "Which address do not have any member with the black membership card?",
        "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    "interaction": [
        {
            "utterance": "what is the average level of membership ?",
            "sql": "select avg ( level_of_membership ) from member"
        },
        {
            "utterance": "How many membership cards are black ?",
            "sql": "select count ( * ) from member where membership_card = value"
        },
        {
            "utterance": "what 's the average time of purchase for white membership card ?",
            "sql": "select avg ( time_of_purchase ) from member where membership_card = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from member where membership_card = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "sql": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'"
    },
    "interaction": [
        {
            "utterance": "how many membership cards ? | There are 2 different membership cards . | what is age of Ashby Lazale",
            "sql": "select age from member where name = value"
        },
        {
            "utterance": "how many time of purchase in ashby lazale",
            "sql": "select time_of_purchase from member where name = value"
        },
        {
            "utterance": "Level of membership Breton , Robert",
            "sql": "select level_of_membership from member where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 2,
    "final": {
        "utterance": "Which address has both members younger than 30 and members older than 40?",
        "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"
    },
    "interaction": [
        {
            "utterance": "What is the membership card of Breton , Robert ?",
            "sql": "select membership_card from member where name = value"
        },
        {
            "utterance": "What is the age of Breton , Robert ?",
            "sql": "select age from member where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the id and address of the shops which have a happy hour in May?",
        "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'"
    },
    "interaction": [
        {
            "utterance": "Which store has the most staff ? | Do you want to get the shop ID which has the most staff ? | yes , please",
            "sql": "select shop_id from shop order by num_of_staff desc limit value"
        },
        {
            "utterance": "Which shop has a happy hour in may ? | Do you want to get shop ID or another attribute ? | shop id",
            "sql": "select t1 . shop_id from shop as t1 join happy_hour as t2 on t1 . shop_id = t2 . shop_id where month = value"
        },
        {
            "utterance": "Can you also show me their addresses ? | Here are the addresses of shops that have happy hours in may | Can you show me them with their corresponding shop ids ?",
            "sql": "select t1 . address , t1 . shop_id from shop as t1 join happy_hour as t2 on t1 . shop_id = t2 . shop_id where month = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 4,
    "final": {
        "utterance": "Which months have more than 2 happy hours?",
        "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "whats he average number of staffs in charge",
            "sql": "select avg ( num_of_shaff_in_charge ) from happy_hour"
        },
        {
            "utterance": "how many months in total",
            "sql": "select count ( distinct month ) from happy_hour"
        },
        {
            "utterance": "which months have more than 2 happy hours",
            "sql": "select month from happy_hour group by month having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the average score and average staff number of all shops?",
        "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
    },
    "interaction": [
        {
            "utterance": "How many shops have a score of above 37 ?",
            "sql": "select count ( * ) from shop where score > value"
        },
        {
            "utterance": "Which shop has the lowest number of staff ? | The shop with ID 1 has the lowest number of staff . | What is the average number of workers for all the shops ?",
            "sql": "select avg ( num_of_staff ) from shop"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the ids and names of members who are under age 30 or with black membership card.",
        "sql": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30"
    },
    "interaction": [
        {
            "utterance": "Find the ids and names of members who are under age 30",
            "sql": "select name , member_id from member where age < value"
        },
        {
            "utterance": "Please find the ids and names of members with black membership card .",
            "sql": "select name , member_id from member where membership_card = value"
        },
        {
            "utterance": "Hmmm . Can you also show me the ids and names of members who are over age 30 ?",
            "sql": "select name , member_id from member where membership_card = value or age > value"
        },
        {
            "utterance": "How many of these members have a black membership card ?",
            "sql": "select count ( * ) from member where membership_card = value or age > value"
        },
        {
            "utterance": "Can you please show me their names ?",
            "sql": "select name from member where membership_card = value or age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 7,
    "final": {
        "utterance": "Which month has the most happy hours?",
        "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I 'd like to know how many staff are in charge in June ?",
            "sql": "select num_of_shaff_in_charge from happy_hour where month = value"
        },
        {
            "utterance": "How many places offer happy hour ?",
            "sql": "select count ( distinct shop_id ) from happy_hour"
        },
        {
            "utterance": "Which of those 5 distinct shops have the most happy hours ? | Shop id 1 has the most happy hours | Can you tell me which shop ID offers the least happy hours ?",
            "sql": "select shop_id from happy_hour group by shop_id order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 8,
    "final": {
        "utterance": "Which address has both members younger than 30 and members older than 40?",
        "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"
    },
    "interaction": [
        {
            "utterance": "Which address has members younger than 30 ?",
            "sql": "select address from member where age < value"
        },
        {
            "utterance": "Which address has members older than 40 ?",
            "sql": "select address from member where age > value"
        },
        {
            "utterance": "Which address has members younger than 30 and older than 40 ?",
            "sql": "select address from member where age < value intersect select address from member where age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the average score and average staff number of all shops?",
        "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
    },
    "interaction": [
        {
            "utterance": "What are the average score and average staff number of all shops ?",
            "sql": "select avg ( num_of_staff ) , avg ( score ) from shop"
        },
        {
            "utterance": "Which shop has the highest score ?",
            "sql": "select * from shop order by score desc limit value"
        },
        {
            "utterance": "How many shops have more staff than shop 10 ?",
            "sql": "select count ( * ) from shop where num_of_staff > ( select num_of_staff from shop where shop_id = value )"
        },
        {
            "utterance": "And are there any other shops on the same street ? | What street are you referring to ? | The street shop 10 is on .",
            "sql": "select * from shop where address = ( select address from shop where shop_id = value ) and shop_id ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 0,
    "final": {
        "utterance": "Which kind of policy type was chosen by the most customers?",
        "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many policy types are there ?",
            "sql": "select count ( distinct policy_type_code ) from customer_policies"
        },
        {
            "utterance": "what are those types ?",
            "sql": "select policy_type_code from customer_policies group by policy_type_code"
        },
        {
            "utterance": "how many times has a customer chosen car | There are 4 times that a customer chose a policy with type code car . | how about life ?",
            "sql": "select count ( * ) from customer_policies where policy_type_code = value"
        },
        {
            "utterance": "what about for each of the last two policies ?",
            "sql": "select count ( * ) , policy_type_code from customer_policies group by policy_type_code having policy_type_code = value or policy_type_code = value"
        },
        {
            "utterance": "Which of those has the highest count of customers ?",
            "sql": "select policy_type_code from customer_policies group by policy_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "And which has least ?",
            "sql": "select policy_type_code from customer_policies group by policy_type_code order by count ( * ) limit value"
        },
        {
            "utterance": "Which policy had the most , again ?",
            "sql": "select policy_type_code from customer_policies group by policy_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the most popular payment method?",
        "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! From this database , what is the most popular payment method ?",
            "sql": "select payment_method_code from payments group by payment_method_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 2,
    "final": {
        "utterance": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"
    },
    "interaction": [
        {
            "utterance": "tell me how many settlements each claim responds to | Did you mean to ask for the claim id and number of settlements that each claim responds to ? | list the claim ids",
            "sql": "select claim_id from claims"
        },
        {
            "utterance": "list all the amounts claimed",
            "sql": "select amount_claimed from claims"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 3,
    "final": {
        "utterance": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
        "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "What date was the claim made ?",
            "sql": "select date_claim_made from claims"
        },
        {
            "utterance": "Looking at the claim for 2018-06-14 what date was it settled ?",
            "sql": "select date_claim_settled from claims where date_claim_made = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 4,
    "final": {
        "utterance": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
        "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what 's the policy id for claim id 143 ?",
            "sql": "select policy_id from claims where claim_id = value"
        },
        {
            "utterance": "What 's the most recent claim date ?",
            "sql": "select date_claim_settled from claims order by date_claim_settled desc limit value"
        },
        {
            "utterance": "what was the amount claimed ? | On this day ? | yes",
            "sql": "select amount_claimed from claims where date_claim_settled = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 5,
    "final": {
        "utterance": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"
    },
    "interaction": [
        {
            "utterance": "Hello , I was wondering how many claims are made ?",
            "sql": "select count ( * ) from claims"
        },
        {
            "utterance": "About how many settlements does each claim correspond to ?",
            "sql": "select t1 . claim_id , count ( * ) from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id group by t1 . claim_id"
        },
        {
            "utterance": "No problem , what is the average amount of days for a claim to be settled ?",
            "sql": "select avg ( date_claim_settled - date_claim_made ) from claims"
        },
        {
            "utterance": "Claim number 801 had 4 settlements , what was the largest one ? | Do you mean largest in terms of the amount claimed or amount settled ? | Yes , both .",
            "sql": "select t2 . settlement_id , t2 . amount_claimed , t2 . amount_settled from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id where t1 . claim_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 6,
    "final": {
        "utterance": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "hi I was wondering how many policies Ellsworth Paucek has ?",
            "sql": "select count ( * ) from customers as t1 join customer_policies as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_details = value"
        },
        {
            "utterance": "do you know how many total customers had more than 1 policy ?",
            "sql": "select count ( * ) from ( select t1 . customer_details , t1 . customer_id from customers as t1 join customer_policies as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > value )"
        },
        {
            "utterance": "could you tell me those four customer 's details and their ID ?",
            "sql": "select t1 . customer_details , t1 . customer_id from customers as t1 join customer_policies as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 7,
    "final": {
        "utterance": "Which kind of policy type was chosen by the most customers?",
        "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which kind of policy type was chosen by the most customers ?",
            "sql": "select policy_type_code from customer_policies group by policy_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "what about the least ?",
            "sql": "select policy_type_code from customer_policies group by policy_type_code order by count ( * ) limit value"
        },
        {
            "utterance": "What is Policy_Type_Code of Customer_ID 3 ?",
            "sql": "select policy_type_code from customer_policies where customer_id = value"
        },
        {
            "utterance": "What is the Start Date of Policy ID 143 ?",
            "sql": "select start_date from customer_policies where policy_id = value"
        },
        {
            "utterance": "What is the Policy ID of Policy Type Life ?",
            "sql": "select policy_id from customer_policies where policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 8,
    "final": {
        "utterance": "With which kind of payment method were the least number of payments processed?",
        "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average payment method used to process payments ? | Sorry . Can you clarify your question ? | How many payment methods were used to process payments ?",
            "sql": "select count ( distinct payment_method_code ) from payments"
        },
        {
            "utterance": "What payment method is used to process payments the most ?",
            "sql": "select payment_method_code from payments group by payment_method_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "And the least used payment method ?",
            "sql": "select payment_method_code from payments group by payment_method_code order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many payment methods has American Express processed ?",
            "sql": "select payment_method_code , count ( * ) from payments group by payment_method_code having payment_method_code = value"
        },
        {
            "utterance": "What about MasterCard ?",
            "sql": "select payment_method_code , count ( * ) from payments where payment_method_code = value"
        },
        {
            "utterance": "Can I get the names of all the payment methods used ?",
            "sql": "select distinct payment_method_code from payments"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 9,
    "final": {
        "utterance": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the settlement claim with the largest claim amount ? | What do you mean by the name of the settlement claim ? | i mean the claim id",
            "sql": "select claim_id from claims order by amount_claimed desc limit value"
        },
        {
            "utterance": "in what policy id is it in ?",
            "sql": "select policy_id from claims order by amount_claimed desc limit value"
        },
        {
            "utterance": "what date was the claim made ?",
            "sql": "select date_claim_made from claims order by amount_claimed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 10,
    "final": {
        "utterance": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the claim that incurred most number of settlements ? | what do you want to know about this claim ? | what is the claim id ?",
            "sql": "select t1 . claim_id from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id group by t1 . claim_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the date that the claim was settled ?",
            "sql": "select t2 . date_claim_settled from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id group by t1 . claim_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 11,
    "final": {
        "utterance": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all the claim IDs and their associated claim amount ?",
            "sql": "select claim_id , amount_claimed from claims"
        },
        {
            "utterance": "Thank you for that ! Can you filter this list to show the rows and associated Claim IDs and amounts for the claims with a higher than average amount ? | Hi sorry , can you ask this question again . | Sorry ! I 'll ask it a different way ... Can you please list all claim ids which have a higher than average claim amount ?",
            "sql": "select claim_id from claims where amount_claimed > ( select avg ( amount_claimed ) from claims )"
        },
        {
            "utterance": "Great ! Can you tell me which ClaimID is associated with the largest claim amount ?",
            "sql": "select claim_id from claims order by amount_claimed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 12,
    "final": {
        "utterance": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"
    },
    "interaction": [
        {
            "utterance": "Which claims caused more than 2 settlements ? Please list the date the claim was made and the claim id ?",
            "sql": "select t1 . date_claim_made , t1 . claim_id from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id group by t1 . claim_id having count ( * ) > value"
        },
        {
            "utterance": "Which claim had the highest claim value ? Please list the date the claim was made and the claim id .",
            "sql": "select t1 . date_claim_made , t1 . claim_id from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id order by t1 . amount_claimed desc limit value"
        },
        {
            "utterance": "What date was that claim made ?",
            "sql": "select t1 . date_claim_made from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id order by t1 . amount_claimed desc limit value"
        },
        {
            "utterance": "What date was that claim settled ?",
            "sql": "select t1 . date_claim_settled from claims as t1 join settlements as t2 on t1 . claim_id = t2 . claim_id order by t1 . amount_claimed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 13,
    "final": {
        "utterance": "Of all the claims, what was the earliest date when any claim was made?",
        "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What days were the claims made ?",
            "sql": "select date_claim_made from claims"
        },
        {
            "utterance": "When was the earliest claim made ?",
            "sql": "select date_claim_made from claims order by date_claim_made asc limit value"
        },
        {
            "utterance": "What was the claim ID for the earliest claim ?",
            "sql": "select claim_id from claims order by date_claim_made asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the actual delivery dates of orders with quantity 1?",
        "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"
    },
    "interaction": [
        {
            "utterance": "what are the actual delivery dates of orders with quantity 1 ?",
            "sql": "select t1 . actual_delivery_date from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id where t2 . order_quantity = value"
        },
        {
            "utterance": "what is the order date of order id 1 ?",
            "sql": "select order_date from customer_orders where order_id = value"
        },
        {
            "utterance": "Customer id of order id 1",
            "sql": "select customer_id from customer_orders where order_id = value"
        },
        {
            "utterance": "what is Planned Delivery Date of customer id 516",
            "sql": "select planned_delivery_date from customer_orders where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 1,
    "final": {
        "utterance": "Which city is the address of the store named \"FJA Filming\" located in?",
        "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""
    },
    "interaction": [
        {
            "utterance": "What is the address for FJA Filming ?",
            "sql": "select * from addresses as t1 join stores as t2 on t1 . address_id = t2 . address_id where t2 . store_name = value"
        },
        {
            "utterance": "What state is that in ?",
            "sql": "select t1 . state_county from addresses as t1 join stores as t2 on t1 . address_id = t2 . address_id where t2 . store_name = value"
        },
        {
            "utterance": "What is the city ?",
            "sql": "select t1 . city_town from addresses as t1 join stores as t2 on t1 . address_id = t2 . address_id where t2 . store_name = value"
        },
        {
            "utterance": "Last what is the phone number ?",
            "sql": "select store_phone from stores where store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all cities along with the number of drama workshop groups in each city.",
        "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"
    },
    "interaction": [
        {
            "utterance": "list all city towns",
            "sql": "select city_town from addresses"
        },
        {
            "utterance": "give the state county each belongs to",
            "sql": "select city_town , state_county from addresses"
        },
        {
            "utterance": "list all store email addresses",
            "sql": "select store_email_address from drama_workshop_groups"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the product ID of the most frequently ordered item on invoices?",
        "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many Invoices there",
            "sql": "select count ( * ) from invoices"
        },
        {
            "utterance": "how many master card there",
            "sql": "select count ( * ) from invoices where payment_method_code = value"
        },
        {
            "utterance": "how many visa card use to payment",
            "sql": "select count ( * ) from invoices where payment_method_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the payment method code used by the most orders?",
        "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you please provide me with a list of all of the different payment method code types ?",
            "sql": "select distinct payment_method_code from invoices"
        },
        {
            "utterance": "Awesome ! Of these different codes , can you tell me which individual code was used by the largest number of orders ?",
            "sql": "select payment_method_code from invoices group by payment_method_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "Great ! Can you please tell me what is the total number of orders that used MasterCard ?",
            "sql": "select count ( * ) from invoices where payment_method_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\""
    },
    "interaction": [
        {
            "utterance": "what are all the marketing regions ?",
            "sql": "select marketing_region_name from marketing_regions"
        },
        {
            "utterance": "what is the store Rob Dinning 's marketing code ?",
            "sql": "select marketing_region_code from stores where store_name = value"
        },
        {
            "utterance": "what is the name of Rob Dinning 's marketing region ?",
            "sql": "select t1 . marketing_region_name from marketing_regions as t1 join stores as t2 on t1 . marketing_region_code = t2 . marketing_region_code where t2 . store_name = value"
        },
        {
            "utterance": "what can you tell me about Rob Dinning ?",
            "sql": "select * from stores where store_name = value"
        },
        {
            "utterance": "now tell me Rob Dinning 's marketing region ?",
            "sql": "select t1 . marketing_region_name from marketing_regions as t1 join stores as t2 on t1 . marketing_region_code = t2 . marketing_region_code where t2 . store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the minimum, average, maximum order quantity of all invoices.",
        "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES"
    },
    "interaction": [
        {
            "utterance": "show the minimum order quality of all invoices",
            "sql": "select min ( order_quantity ) from invoices"
        },
        {
            "utterance": "show the maximum order quality of all invoices",
            "sql": "select max ( order_quantity ) from invoices"
        },
        {
            "utterance": "show the average order quantity of all invoices",
            "sql": "select avg ( order_quantity ) from invoices"
        },
        {
            "utterance": "show the order id , product id with order quantity",
            "sql": "select order_id , product_id , order_quantity from invoices"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""
    },
    "interaction": [
        {
            "utterance": "How many drama workshop groups are in Feliciaberg City ?",
            "sql": "select count ( * ) from addresses as t1 join drama_workshop_groups as t2 on t1 . address_id = t2 . address_id where t1 . city_town = value"
        },
        {
            "utterance": "What is the group 's name ?",
            "sql": "select t2 . store_name from addresses as t1 join drama_workshop_groups as t2 on t1 . address_id = t2 . address_id where t1 . city_town = value"
        },
        {
            "utterance": "In what state is it located ?",
            "sql": "select t1 . state_county from addresses as t1 join drama_workshop_groups as t2 on t1 . address_id = t2 . address_id where t1 . city_town = value"
        },
        {
            "utterance": "What is the exact address ? | Do you mean line 1 of address ? | yes",
            "sql": "select t1 . line_1 from addresses as t1 join drama_workshop_groups as t2 on t1 . address_id = t2 . address_id where t1 . city_town = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""
    },
    "interaction": [
        {
            "utterance": "Show me the names of the workshop groups that have bookings with status code `` stop '' ?",
            "sql": "select t2 . store_name from bookings as t1 join drama_workshop_groups as t2 on t1 . workshop_group_id = t2 . workshop_group_id where t1 . status_code = value"
        },
        {
            "utterance": "Show me IDs of workshop groups that have bookings with status code `` stop ''",
            "sql": "select t2 . workshop_group_id from bookings as t1 join drama_workshop_groups as t2 on t1 . workshop_group_id = t2 . workshop_group_id where t1 . status_code = value"
        },
        {
            "utterance": "Show me Address IDs of workshop groups that have bookings with status code `` stop ''",
            "sql": "select t2 . address_id from bookings as t1 join drama_workshop_groups as t2 on t1 . workshop_group_id = t2 . workshop_group_id where t1 . status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the most frequent status of bookings?",
        "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many bookings are there ?",
            "sql": "select count ( * ) from bookings"
        },
        {
            "utterance": "How many different statuses are used on those bookings ?",
            "sql": "select count ( distinct status_code ) from bookings"
        },
        {
            "utterance": "Which of those statuses is used most commonly ?",
            "sql": "select status_code from bookings group by status_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all cities where at least one customer lives in but no performer lives in.",
        "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"
    },
    "interaction": [
        {
            "utterance": "What are the names of the cities that all customers live in ?",
            "sql": "select t1 . city_town from addresses as t1 join customers as t2 on t1 . address_id = t2 . address_id"
        },
        {
            "utterance": "Okay , what about the names of the cities that all performers live in ?",
            "sql": "select distinct t1 . city_town from addresses as t1 join performers as t2 on t1 . address_id = t2 . address_id"
        },
        {
            "utterance": "Of these cities , which do not also appear on the customer cities list ?",
            "sql": "select t1 . city_town from addresses as t1 join performers as t2 on t1 . address_id = t2 . address_id except select t1 . city_town from addresses as t1 join customers as t2 on t1 . address_id = t2 . address_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the order dates of orders with price higher than 1000?",
        "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000"
    },
    "interaction": [
        {
            "utterance": "How many orders are priced higher than 1000 ?",
            "sql": "select count ( * ) from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id join products as t3 on t2 . product_id = t3 . product_id where t3 . product_price > value"
        },
        {
            "utterance": "What are the order dates of orders with a price higher than 1000 ?",
            "sql": "select t1 . order_date from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id join products as t3 on t2 . product_id = t3 . product_id where t3 . product_price > value"
        },
        {
            "utterance": "What are their planned delivery dates ?",
            "sql": "select t1 . planned_delivery_date from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id join products as t3 on t2 . product_id = t3 . product_id where t3 . product_price > value"
        },
        {
            "utterance": "And what were the actual delivery dates ?",
            "sql": "select t1 . actual_delivery_date from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id join products as t3 on t2 . product_id = t3 . product_id where t3 . product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the description and code of the type of service that is performed the most often?",
        "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the description of the type of service that is performed the most often ?",
            "sql": "select t1 . service_type_description from ref_service_types as t1 join services as t2 on t1 . service_type_code = t2 . service_type_code group by t1 . service_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the code of the type of service that is performed the most often ?",
            "sql": "select t1 . service_type_code from ref_service_types as t1 join services as t2 on t1 . service_type_code = t2 . service_type_code group by t1 . service_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is its parent service type code ?",
            "sql": "select t1 . parent_service_type_code from ref_service_types as t1 join services as t2 on t1 . service_type_code = t2 . service_type_code group by t1 . service_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the actual delivery dates of orders with quantity 1?",
        "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"
    },
    "interaction": [
        {
            "utterance": "What are the delivery dates of orders with 1 quantity ? | do you mean the actual delivery dates ? | Yes",
            "sql": "select t1 . actual_delivery_date from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id where t2 . order_quantity = value"
        },
        {
            "utterance": "What are the product id of orders with quantity 1 ?",
            "sql": "select product_id from order_items where order_quantity = value"
        },
        {
            "utterance": "Ok , , what are the cuatomers id that have order of quantity 1 ?",
            "sql": "select t1 . customer_id from customer_orders as t1 join order_items as t2 on t1 . order_id = t2 . order_id where t2 . order_quantity = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 0,
    "final": {
        "utterance": "List the branch name and city without any registered members.",
        "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
    },
    "interaction": [
        {
            "utterance": "list the branch for registered members ? | did you mean the ids of branches with registered members ? | yes",
            "sql": "select branch_id from membership_register_branch"
        },
        {
            "utterance": "Find the membership amount of the popert ? | did you mean the membership amount of the branch with the name `` Popert '' ? | yes",
            "sql": "select membership_amount from branch where name = value"
        },
        {
            "utterance": "List the name with registered members ? | There are the names of branches with registered members . | which city of Alexandra ?",
            "sql": "select city from branch where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all branch names with the number of members in each branch registered after 2015.",
        "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"
    },
    "interaction": [
        {
            "utterance": "Show me all branch names with the number of members in each branch registered after 2015",
            "sql": "select t2 . name , count ( * ) from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id where t1 . register_year > value group by t2 . branch_id"
        },
        {
            "utterance": "When were those branches opened ?",
            "sql": "select t2 . name , t2 . open_year from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id where t1 . register_year > value group by t2 . branch_id"
        },
        {
            "utterance": "How many branches have the number of members in each branch registered after 2015 ? | Did you mean the number of branches which have some members registered after 2015 ? | Thanks !",
            "sql": "select count ( * ) from ( select t2 . name from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id where t1 . register_year > value group by t2 . branch_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the city and the number of branches opened before 2010 for each city.",
        "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "Show me the cities | Do you mean you want the cities where there are branches there ? | yes",
            "sql": "select distinct city from branch"
        },
        {
            "utterance": "show me the number of branches of cities",
            "sql": "select city , count ( * ) from branch group by city"
        },
        {
            "utterance": "Count the branches opened before 2010 ?",
            "sql": "select count ( * ) from branch where open_year < value"
        },
        {
            "utterance": "Count branches opened before 2010 for each city",
            "sql": "select city , count ( * ) from branch where open_year < value group by city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the branches ?",
            "sql": "select name from branch"
        },
        {
            "utterance": "Given the branches are Alexandre , Popert , Stanley , Zytogorski , Cochrane , Taverner , Saint Amant , and Brooke Greville , which have members in Louisville , Kentucky ?",
            "sql": "select t2 . name from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id join member as t3 on t1 . member_id = t3 . member_id where t3 . hometown = value"
        },
        {
            "utterance": "Given the branches are Alexandre and Zytogorski , which have members in Hiram , Georgia ?",
            "sql": "select t2 . name from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id join member as t3 on t1 . member_id = t3 . member_id where t3 . hometown = value intersect select t2 . name from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id join member as t3 on t1 . member_id = t3 . member_id where t3 . hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the branch with the greatest amount of memberships that were registered in the year 2016 ?",
            "sql": "select t2 . name from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id where t1 . register_year = value group by t2 . branch_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the year that branch opened ?",
            "sql": "select t2 . open_year from membership_register_branch as t1 join branch as t2 on t1 . branch_id = t2 . branch_id where t1 . register_year = value group by t2 . branch_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you list the name and membership amount of the branch that had the least amount of memberships that were opened in the year 2017 ?",
            "sql": "select name , membership_amount from branch where membership_amount = ( select min ( membership_amount ) from branch where open_year like value )"
        },
        {
            "utterance": "Can you list the name and opening year of the branch that opened the earliest ?",
            "sql": "select name , open_year from branch where open_year = ( select min ( open_year ) from branch )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "How many names in this table ?",
            "sql": "select count ( name ) from branch"
        },
        {
            "utterance": "Find the total amount of membership ?",
            "sql": "select sum ( membership_amount ) from branch"
        },
        {
            "utterance": "Find highest membership amount ?",
            "sql": "select membership_amount from branch order by membership_amount desc limit value"
        },
        {
            "utterance": "Find the lowest membership amount ?",
            "sql": "select min ( membership_amount ) from branch"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 6,
    "final": {
        "utterance": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'"
    },
    "interaction": [
        {
            "utterance": "show the minimum amount of memberships for all branches opened in 2011 or located at city location",
            "sql": "select min ( membership_amount ) from branch where open_year = value or city = value"
        },
        {
            "utterance": "show the maximum amount of memberships for all branches opened in 2011 or located at city location",
            "sql": "select max ( membership_amount ) from branch where open_year = value or city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the membership level with most number of members.",
        "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Could you please show the membership level with the greatest number of members ?",
            "sql": "select level from member group by level order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the member ids of the people who have that membership level ?",
            "sql": "select member_id from member where level in ( select level from member group by level order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What are their names , please ?",
            "sql": "select name from member where level in ( select level from member group by level order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What about the membership level with the least number of members ?",
            "sql": "select level from member group by level order by count ( * ) asc limit value"
        },
        {
            "utterance": "What are the member ids of the people who have that membership level ?",
            "sql": "select member_id from member where level in ( select level from member group by level order by count ( * ) asc limit value )"
        },
        {
            "utterance": "What is their name , please ?",
            "sql": "select name from member where level in ( select level from member group by level order by count ( * ) asc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the member name and hometown who registered a branch in 2016.",
        "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"
    },
    "interaction": [
        {
            "utterance": "What are the register year of Jeremy Jarmon ?",
            "sql": "select t1 . register_year from membership_register_branch as t1 join member as t2 on t1 . member_id = t2 . member_id where t2 . name = value"
        },
        {
            "utterance": "What is Corey Peters Card_Number ?",
            "sql": "select card_number from member where name = value"
        },
        {
            "utterance": "What is Myron Pryor Hometown ?",
            "sql": "select hometown from member where name = value"
        },
        {
            "utterance": "Show the member name and hometown who registered a branch in 2016 .",
            "sql": "select t2 . name , t2 . hometown from membership_register_branch as t1 join member as t2 on t1 . member_id = t2 . member_id where t1 . register_year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the total number of purchases for members with level 6?",
        "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
    },
    "interaction": [
        {
            "utterance": "What is the total number of purchases for members with level 6 ?",
            "sql": "select count ( * ) from purchase as t1 join member as t2 on t1 . member_id = t2 . member_id where t2 . level = value"
        },
        {
            "utterance": "Which 2 members have the highest number of purchases ?",
            "sql": "select t2 . name from purchase as t1 join member as t2 on t1 . member_id = t2 . member_id group by t1 . member_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the hometown of Myron Pryor ?",
            "sql": "select hometown from member where name = value"
        },
        {
            "utterance": "What is the branch ID associated with Myron Pryor ?",
            "sql": "select t2 . branch_id from member as t1 join purchase as t2 on t1 . member_id = t2 . member_id where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 10,
    "final": {
        "utterance": "Show member names without any registered branch.",
        "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"
    },
    "interaction": [
        {
            "utterance": "Show member names with a registered branch ?",
            "sql": "select name from member where member_id in ( select member_id from membership_register_branch )"
        },
        {
            "utterance": "Show member names without any registered branch ?",
            "sql": "select name from member where member_id not in ( select member_id from membership_register_branch )"
        },
        {
            "utterance": "What is the total number of branches ?",
            "sql": "select count ( distinct branch_id ) from membership_register_branch"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "How many cities have a branch with 100 membership ?",
            "sql": "select count ( distinct city ) from branch where membership_amount > value"
        },
        {
            "utterance": "show all the branches opened in 2000 ?",
            "sql": "select branch_id from branch where open_year = value"
        },
        {
            "utterance": "Which year was Stanley open ?",
            "sql": "select open_year from branch where name = value"
        },
        {
            "utterance": "What is the address road of Stanley ?",
            "sql": "select address_road from branch where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 12,
    "final": {
        "utterance": "List all open years when at least two shops are opened.",
        "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Name the branch with least membership amount . ?",
            "sql": "select name from branch order by membership_amount asc limit value"
        },
        {
            "utterance": "state the open year of branch id 3 ?",
            "sql": "select open_year from branch where branch_id = value"
        },
        {
            "utterance": "List all open years when at least two shops are opened ?",
            "sql": "select open_year from branch group by open_year having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 13,
    "final": {
        "utterance": "What are names for top three branches with most number of membership?",
        "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names for the top three membership branches",
            "sql": "select name from branch order by membership_amount desc limit value"
        },
        {
            "utterance": "How many memberships do these branches have ?",
            "sql": "select membership_amount from branch order by membership_amount desc limit value"
        },
        {
            "utterance": "What years did the branches open ?",
            "sql": "select open_year from branch order by membership_amount desc limit value"
        },
        {
            "utterance": "What are the addresses for these three branches ?",
            "sql": "select address_road from branch order by membership_amount desc limit value"
        },
        {
            "utterance": "Which address has the most memberships ?",
            "sql": "select address_road from branch order by membership_amount desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the city and the number of branches opened before 2010 for each city.",
        "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "Show the city and the number of branches opened before 2010 for each city",
            "sql": "select city , count ( * ) from branch where open_year < value group by city"
        },
        {
            "utterance": "Which year were those branches opened ?",
            "sql": "select open_year from branch where open_year < value"
        },
        {
            "utterance": "Cities that were opened before 2010 | Ah , I can not understand . Do you mean cities that have branches opened before 2010 ? | Give me names of branches opened before 2010",
            "sql": "select name from branch where open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all cities without a branch having more than 100 memberships.",
        "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "Which cities have a branch ?",
            "sql": "select distinct city from branch"
        },
        {
            "utterance": "How many branches does London have ?",
            "sql": "select count ( branch_id ) from branch where city = value"
        },
        {
            "utterance": "How many branches does Oxford have ?",
            "sql": "select count ( branch_id ) from branch where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 16,
    "final": {
        "utterance": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
    },
    "interaction": [
        {
            "utterance": "Who are the members whose hometown address includes Kentucky | Did you want the names of the members whose hometown address includes the word Kentucky ? | Yes please give their names .",
            "sql": "select name from member where hometown like value"
        },
        {
            "utterance": "Kindly list the card numbers of all the members .",
            "sql": "select card_number from member"
        },
        {
            "utterance": "How many members are they in total ?",
            "sql": "select count ( * ) from member"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018"
    },
    "interaction": [
        {
            "utterance": "What is the total pounds of purchases in the year 2018 for all branches in London ?",
            "sql": "select sum ( total_pounds ) from purchase as t1 join branch as t2 on t1 . branch_id = t2 . branch_id where t2 . city = value and t1 . year = value"
        },
        {
            "utterance": "How many branches are there in London ?",
            "sql": "select count ( * ) from branch where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the total number of purchases for members with level 6?",
        "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
    },
    "interaction": [
        {
            "utterance": "how many purchases did each member make ?",
            "sql": "select t1 . member_id , count ( * ) from purchase as t1 join member as t2 on t1 . member_id = t2 . member_id group by t1 . member_id"
        },
        {
            "utterance": "how many purchases did members with level 5 make ?",
            "sql": "select count ( * ) from purchase as t1 join member as t2 on t1 . member_id = t2 . member_id where t2 . level = value"
        },
        {
            "utterance": "now how many purchases did members with level 6 make ?",
            "sql": "select count ( * ) from purchase as t1 join member as t2 on t1 . member_id = t2 . member_id where t2 . level = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 19,
    "final": {
        "utterance": "What are names for top three branches with most number of membership?",
        "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names for the top three branches with most number of membership ?",
            "sql": "select name from branch order by membership_amount desc limit value"
        },
        {
            "utterance": "What year did they open ?",
            "sql": "select name , open_year from branch order by membership_amount desc limit value"
        },
        {
            "utterance": "What are their cities ?",
            "sql": "select name , city from branch order by membership_amount desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
    },
    "interaction": [
        {
            "utterance": "What are the investor name of Leonardo Binchi ?",
            "sql": "select t1 . investor from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id where t2 . name = value"
        },
        {
            "utterance": "What is the total amount of money requested for three persons ? | Sorry , which three persons do you want ? | The three persons are Francesco Postiglione , Leonardo Binchi and Fabrizio Buonocore",
            "sql": "select sum ( t1 . money_requested ) from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id where t2 . name = value or t2 . name = value or t2 . name = value"
        },
        {
            "utterance": "What is the company name of Fabrizio Buonocore ?",
            "sql": "select t1 . company from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id where t2 . name = value"
        },
        {
            "utterance": "What are the name of entrepreneurs whose investor is not `` Rachel Elnaugh '' ?",
            "sql": "select t2 . name from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id where t1 . investor! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the date of birth of the investors Simon Woodroffe and Peter Jones ?",
            "sql": "select t2 . date_of_birth from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id where t1 . investor = value or t1 . investor = value"
        },
        {
            "utterance": "That was really quick , thank you . Then can you please tell me how much money they requested , respectively ?",
            "sql": "select money_requested from entrepreneur where investor = value or investor = value"
        },
        {
            "utterance": "haha I am sorry , Thanks again for your answer ! : ) Then could you please let me know which entrepreneur requested for the biggest amount of money ?",
            "sql": "select entrepreneur_id from entrepreneur order by money_requested desc limit value"
        },
        {
            "utterance": "Glad that I did n't trouble you again : ) Thank you , then could you please let me know the investor 's name and company for the ID ?",
            "sql": "select entrepreneur_id , investor , company from entrepreneur order by money_requested desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name of the entrepreneur with the greatest weight?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many weight of Francesco Postiglione ?",
            "sql": "select weight from people where name = value"
        },
        {
            "utterance": "How much money requested of people id 2 ?",
            "sql": "select money_requested from entrepreneur where people_id = value"
        },
        {
            "utterance": "Date of birth of Fabrizio Buonocore ?",
            "sql": "select date_of_birth from people where name = value"
        },
        {
            "utterance": "What is the name of the entrepreneur with the greatest weight ?",
            "sql": "select t2 . name from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id order by t2 . weight desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the company of the tallest entrepreneur.",
        "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the company details",
            "sql": "select company from entrepreneur"
        },
        {
            "utterance": "Show me the details of all entrepreneurs",
            "sql": "select * from entrepreneur"
        },
        {
            "utterance": "Show me the company of the tallest entrepreneur",
            "sql": "select t1 . company from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id order by t2 . height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the entrepreneur with the greatest weight?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the largest weight that appears in the people table ?",
            "sql": "select weight from people order by weight desc limit value"
        },
        {
            "utterance": "Can you add the people id associated with that weight into the table ?",
            "sql": "select people_id , weight from people order by weight desc limit value"
        },
        {
            "utterance": "Can you also add the name associated with that people id into the table ?",
            "sql": "select people_id , name , weight from people order by weight desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all investor names ?",
            "sql": "select distinct investor from entrepreneur"
        },
        {
            "utterance": "Can you filter this list to include only the investors that were associated with more than one entrepreneur id ?",
            "sql": "select investor from entrepreneur group by investor having count ( * ) > value"
        },
        {
            "utterance": "Can you filter this list to show only the rows associated with money requested that are not between 120000 and 140000 ?",
            "sql": "select investor from entrepreneur where investor in ( select investor from entrepreneur where money_requested > value intersect select investor from entrepreneur where money_requested < value ) group by investor having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 6,
    "final": {
        "utterance": "List the names of people that are not entrepreneurs.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
    },
    "interaction": [
        {
            "utterance": "Hi ! Can you show me a list of all people and their people IDs ?",
            "sql": "select name , people_id from people"
        },
        {
            "utterance": "Nice ! Can you filter the list to show only the people who do not have an associated entrepreneur ID ?",
            "sql": "select name , people_id from people where people_id not in ( select people_id from entrepreneur )"
        },
        {
            "utterance": "Wonderful ! Can you tell me what is the total amount of money requested by the people who ARE entrepreneurs ?",
            "sql": "select sum ( money_requested ) from entrepreneur"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the weights of entrepreneurs in descending order of money requested?",
        "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
    },
    "interaction": [
        {
            "utterance": "Who are the entrepreneurs requesting money | What attributes would you like to know about the entrepreneurs raising money ? | What are the entrepreneur 's weights",
            "sql": "select t2 . weight from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "What are the entrepreneurs names associated with those weights ? Thanks .",
            "sql": "select t2 . name , t2 . weight from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "What company is each entrepreneur associated with ?",
            "sql": "select t1 . company from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Which entrepreneur has the highest weight ? Thanks ! | What attribute would you like to know about the entrepreneur with the highest weight ? | I would like to know the name of the entrepreneur with the highest weight .",
            "sql": "select t2 . name from entrepreneur as t1 join people as t2 on t1 . people_id = t2 . people_id order by t2 . weight desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 0,
    "final": {
        "utterance": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007"
    },
    "interaction": [
        {
            "utterance": "State the location of flower awards held ?",
            "sql": "select location from festival_detail where festival_name = value"
        },
        {
            "utterance": "Which festival has the least number of audience ?",
            "sql": "select festival_name from festival_detail order by num_of_audience limit value"
        },
        {
            "utterance": "What is the name of artwork id 2 ?",
            "sql": "select name from artwork where artwork_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the number of audience in year 2008 or 2010.",
        "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Which year had the most festivals ?",
            "sql": "select year from festival_detail group by year order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many festivals were there in 2008 ?",
            "sql": "select count ( * ) from festival_detail group by year having year = value"
        },
        {
            "utterance": "What was the number of the audience for it ?",
            "sql": "select num_of_audience from festival_detail where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\""
    },
    "interaction": [
        {
            "utterance": "Which festival name was nimonated for artwork ? | you want all of festival name was nimonated for artwork ? | Yes",
            "sql": "select distinct t3 . festival_name from nomination as t1 join artwork as t2 on t1 . artwork_id = t2 . artwork_id join festival_detail as t3 on t1 . festival_id = t3 . festival_id"
        },
        {
            "utterance": "Which festival name was associated with program talent show ?",
            "sql": "select t3 . festival_name from nomination as t1 join artwork as t2 on t1 . artwork_id = t2 . artwork_id join festival_detail as t3 on t1 . festival_id = t3 . festival_id where t2 . type = value"
        },
        {
            "utterance": "What was the location of LA awards ?",
            "sql": "select location from festival_detail where festival_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 3,
    "final": {
        "utterance": "List the most common type of artworks.",
        "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the different type of artworks ?",
            "sql": "select distinct type from artwork"
        },
        {
            "utterance": "Show the most common type of artworks ?",
            "sql": "select type from artwork group by type order by count ( * ) desc limit value"
        },
        {
            "utterance": "Show the type of artwork Loving you ?",
            "sql": "select type from artwork where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 4,
    "final": {
        "utterance": "List the year in which there are more than one festivals.",
        "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which year had more than one festival please ?",
            "sql": "select year from festival_detail group by year having count ( * ) > value"
        },
        {
            "utterance": "What are the names of the festivals that occurred that year ?",
            "sql": "select festival_name from festival_detail where year = value"
        },
        {
            "utterance": "What other years did the Cherry Awards occur during ?",
            "sql": "select year from festival_detail where festival_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 5,
    "final": {
        "utterance": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "sql": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many total nominees there are ?",
            "sql": "select count ( artwork_id ) from nomination"
        },
        {
            "utterance": "Excellent ! For each nomination can you show me the name of the artwork associated with it , and the name of the festival where it was nominated ?",
            "sql": "select t2 . name , t3 . festival_name from nomination as t1 join artwork as t2 on t1 . artwork_id = t2 . artwork_id join festival_detail as t3 on t1 . festival_id = t3 . festival_id"
        },
        {
            "utterance": "Thanks ! Can you update this list to show all of the associated years for each of these festivals ?",
            "sql": "select t2 . name , t3 . festival_name , t3 . year from nomination as t1 join artwork as t2 on t1 . artwork_id = t2 . artwork_id join festival_detail as t3 on t1 . festival_id = t3 . festival_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the number of audience in year 2008 or 2010.",
        "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Show the number of audience in year 2008 or 2010 .",
            "sql": "select num_of_audience from festival_detail where year = value or year = value"
        },
        {
            "utterance": "How about the chair name for those years ?",
            "sql": "select chair_name from festival_detail where year = value or year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of the festivals that had two or more nominations for artwork ?",
            "sql": "select t3 . festival_name from nomination as t1 join artwork as t2 on t1 . artwork_id = t2 . artwork_id join festival_detail as t3 on t1 . festival_id = t3 . festival_id group by t1 . festival_id having count ( * ) > = value"
        },
        {
            "utterance": "Can you list their IDs in the table too ?",
            "sql": "select t3 . festival_id , t3 . festival_name from nomination as t1 join artwork as t2 on t1 . artwork_id = t2 . artwork_id join festival_detail as t3 on t1 . festival_id = t3 . festival_id group by t1 . festival_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the names of all the artworks that won ?",
            "sql": "select t2 . name from nomination as t1 join artwork as t2 on t1 . artwork_id = t2 . artwork_id where t1 . result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of the three most recent festivals.",
        "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Where were these festivals held ?",
            "sql": "select festival_name , location from festival_detail order by year desc limit value"
        },
        {
            "utterance": "Who was the chair of the LA Awards ?",
            "sql": "select chair_name from festival_detail where festival_name = value"
        },
        {
            "utterance": "How many people attended the LA Awards in 2010 ?",
            "sql": "select num_of_audience from festival_detail where festival_name = value and year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name and city of the airport which is the source for the most number of flight routes.",
        "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of airport which is the source for the most number of flight routes ?",
            "sql": "select t1 . name from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid group by t2 . src_apid order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the names of city of airport which is the source for the most number of flight routes | Do you mean the name of city which is the source for the most number of flight routes ? | Yes",
            "sql": "select t1 . city from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid group by t2 . src_apid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of routes with destination airports in Italy.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
    },
    "interaction": [
        {
            "utterance": "Name the airport in Madang city ?",
            "sql": "select name from airports where city = value"
        },
        {
            "utterance": "How many airports are in Papua New Guinea country ?",
            "sql": "select count ( * ) from airports where country = value"
        },
        {
            "utterance": "Find the number of routes with destination airports in Italy ?",
            "sql": "select count ( * ) from routes as t1 join airports as t2 on t1 . dst_apid = t2 . apid where t2 . country = value"
        },
        {
            "utterance": "What is the elevation of Mount Hagen Kagamuga Airport ?",
            "sql": "select elevation from airports where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 2,
    "final": {
        "utterance": "Which countries has the most number of airlines whose active status is 'Y'?",
        "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which countries have the most number of airlines whose active status is Y ?",
            "sql": "select country from airlines where active = value group by country order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the names of those airlines ? | Here are the names of airlines who are active . | What is the airline id of Aloha Airlines ?",
            "sql": "select alid from airlines where name = value"
        },
        {
            "utterance": "What about the icao ? | the icao of Aloha Airlines is AAH | What 's the call sign of airline id 5 ?",
            "sql": "select callsign from airlines where alid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the cities which have exactly two airports.",
        "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
    },
    "interaction": [
        {
            "utterance": "Find the cities which have exactly two airports",
            "sql": "select city from airports group by city having count ( * ) = value"
        },
        {
            "utterance": "What location airports is near by me has two airports ? | What do you mean by near by you ? Sorry , We can not answer this . | what is the name of airport in the country Papua New Guinea",
            "sql": "select name from airports where country = value"
        },
        {
            "utterance": "what is the elevation of Madang Airport ?",
            "sql": "select elevation from airports where name = value"
        },
        {
            "utterance": "What is the elevation of Goroka Airport",
            "sql": "select elevation from airports where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of routes operated by American Airlines.",
        "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "Find the routes operated by all airlines ? | Do you mean return all the routes ? | yes .",
            "sql": "select * from routes"
        },
        {
            "utterance": "Which of these is operated by American Airlines ?",
            "sql": "select * from airlines as t1 join routes as t2 on t1 . alid = t2 . alid where t1 . name = value"
        },
        {
            "utterance": "How many are they ?",
            "sql": "select count ( * ) from airlines as t1 join routes as t2 on t1 . alid = t2 . alid where t1 . name = value"
        },
        {
            "utterance": "What of those not operated by American Airlines ?",
            "sql": "select * from airlines as t1 join routes as t2 on t1 . alid = t2 . alid where t1 . name ! = value"
        },
        {
            "utterance": "How many routes are not operated by American Airlines ?",
            "sql": "select count ( * ) from airlines as t1 join routes as t2 on t1 . alid = t2 . alid where t1 . name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of airline which runs the most number of routes.",
        "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many airlines are there ?",
            "sql": "select count ( * ) from airlines"
        },
        {
            "utterance": "What 's the least number of routes that an airline runs ?",
            "sql": "select count ( * ) from airlines as t1 join routes as t2 on t1 . alid = t2 . alid group by t1 . name order by count ( * ) asc limit value"
        },
        {
            "utterance": "how about the most number of routes that an airline runs ?",
            "sql": "select count ( * ) from airlines as t1 join routes as t2 on t1 . alid = t2 . alid group by t1 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of that airline ?",
            "sql": "select t1 . name from airlines as t1 join routes as t2 on t1 . alid = t2 . alid group by t1 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What country does Ryanair belong to ?",
            "sql": "select country from airlines where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 6,
    "final": {
        "utterance": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "What is the name of the airport in Mount Hagen city ?",
            "sql": "select name from airports where city = value"
        },
        {
            "utterance": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines '' ?",
            "sql": "select count ( * ) from routes as t1 join airports as t2 on t1 . dst_apid = t2 . apid join airlines as t3 on t1 . alid = t3 . alid where t2 . country = value and t3 . name = value"
        },
        {
            "utterance": "How many active airlines are on the list ?",
            "sql": "select count ( * ) from airlines where active = value"
        },
        {
            "utterance": "What is the elevation of Madang Airport airport ?",
            "sql": "select elevation from airports where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 7,
    "final": {
        "utterance": "List the cities which have more than one airport and number of airports.",
        "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the name of airport in the city Goroka ?",
            "sql": "select name from airports where city = value"
        },
        {
            "utterance": "Which airport situate in the elevation 5282 ?",
            "sql": "select name from airports where elevation = value"
        },
        {
            "utterance": "What is the iata of Madang airport ?",
            "sql": "select iata from airports where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the busiest source airport that runs most number of routes in China.",
        "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the busiest airport in china ? | busiest source airport or destination airport ? | busiest source airport",
            "sql": "select t1 . name from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid where t1 . country = value group by t1 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the source airport id ?",
            "sql": "select t1 . apid from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid where t1 . country = value group by t1 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the airline for source airport ?",
            "sql": "select distinct airline from routes where src_apid = ( select t1 . apid from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid where t1 . country = value group by t1 . name order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id of routes whose source and destination airports are in the United States.",
        "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
    },
    "interaction": [
        {
            "utterance": "whose source and destination airports are in the United States | Do you want the id of the routes whose source and destination airports are in the United States ? | Yes",
            "sql": "select rid from routes where dst_apid in ( select apid from airports where country = value ) and src_apid in ( select apid from airports where country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the busiest destination airport that runs most number of routes in China.",
        "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the destination of the airport least number of routes in china ?",
            "sql": "select t1 . name from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid where t1 . country = value group by t1 . name order by count ( * ) asc limit value"
        },
        {
            "utterance": "how many airports in the list ?",
            "sql": "select distinct ( count ( name ) ) from airports"
        },
        {
            "utterance": "find the country in the list ? | What do you mean ? | how many country in the list ?",
            "sql": "select count ( distinct country ) from airports"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 11,
    "final": {
        "utterance": "How many cities are there that have more than 3 airports?",
        "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)"
    },
    "interaction": [
        {
            "utterance": "how many airports are presented on the table",
            "sql": "select count ( * ) from airports"
        },
        {
            "utterance": "list out the airports names",
            "sql": "select name from airports"
        },
        {
            "utterance": "how many cities are the aiports | Did you mean the number of cities that have any airport ? | exactly",
            "sql": "select count ( distinct city ) from airports"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 12,
    "final": {
        "utterance": "Which countries has the most number of airlines whose active status is 'Y'?",
        "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you first give me a list of all of the countries ?",
            "sql": "select country from airlines"
        },
        {
            "utterance": "Great ! Which of these countries has the most airlines with an Active status of `` Y '' ?",
            "sql": "select country from airlines where active = value group by country order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you tell me what is the total number of airlines in the United States that have an active status of `` Y '' ?",
            "sql": "select count ( * ) from airlines where active = value and country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name, city, and country of the airport that has the lowest altitude.",
        "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the airport with the lowest altitude ?",
            "sql": "select name from airports order by elevation limit value"
        },
        {
            "utterance": "And in which city is it located ?",
            "sql": "select city from airports order by elevation limit value"
        },
        {
            "utterance": "And in what country is that ?",
            "sql": "select country from airports order by elevation limit value"
        },
        {
            "utterance": "Yes , what is the exact altitude of the Bar Yehuda Airfield ?",
            "sql": "select elevation from airports where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 14,
    "final": {
        "utterance": "Return the cities with more than 3 airports in the United States.",
        "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "What cities have more than 3 airports in the United States ?",
            "sql": "select city from airports where country = value group by city having count ( * ) > value"
        },
        {
            "utterance": "What cities in the United States have more than 4 airports ?",
            "sql": "select city from airports where country = value group by city having count ( * ) > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from airports where country = value group by city having count ( * ) > value"
        },
        {
            "utterance": "Show the names of all airports with elevation over 4000 .",
            "sql": "select name from airports where elevation > value"
        },
        {
            "utterance": "Show the names of all airports with elevation over 5000 .",
            "sql": "select name from airports where elevation > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the number of routes from the United States to Canada.",
        "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
    },
    "interaction": [
        {
            "utterance": "what is the elevation of goroka airport",
            "sql": "select elevation from airports where name = value"
        },
        {
            "utterance": "find the number of routes from the United States to Canada",
            "sql": "select count ( * ) from routes where dst_apid in ( select apid from airports where country = value ) and src_apid in ( select apid from airports where country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the number of routes that have destination John F Kennedy International Airport.",
        "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"
    },
    "interaction": [
        {
            "utterance": "Show me the destination details of John F Kennedy International Airport",
            "sql": "select dst_apid , dst_ap from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid where t1 . name = value"
        },
        {
            "utterance": "Show me the routes details | do you mean the routes details of John F Kennedy International Airport ? | Yes",
            "sql": "select * from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid where t1 . name = value"
        },
        {
            "utterance": "Show me the number of routes that have destination John F Kennedy International Airport",
            "sql": "select count ( * ) from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the busiest source airport that runs most number of routes in China.",
        "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE AIRPORT NAME OF GORKA CITY IN AIRPORT TABLE ?",
            "sql": "select name from airports where city = value"
        },
        {
            "utterance": "MADANG CITY SITUATED IN WHICH COUNTRY ? IN AIRPORT TABLE",
            "sql": "select country from airports where city = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select distinct rid from routes where alid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the number of routes for each source airport and the airport name.",
        "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "What are all the source airports ?",
            "sql": "select t2 . src_apid , t2 . src_ap , t1 . name from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid group by t1 . name"
        },
        {
            "utterance": "What are all of the routes for each source airport ? | do you mean the number of all of the routes ? | Yes please .",
            "sql": "select count ( * ) from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid group by t1 . name"
        },
        {
            "utterance": "What are the names of the airports associated with each number of routes ?",
            "sql": "select t1 . name , count ( * ) from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid group by t1 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 19,
    "final": {
        "utterance": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the number of routes with the destination airport Italy ?",
            "sql": "select count ( * ) from routes as t1 join airports as t2 on t1 . dst_apid = t2 . apid where t2 . country = value"
        },
        {
            "utterance": "Can you please tell me the number of routes with the destination airport in Italy operated by the airline with the name 'American Airlines ' ?",
            "sql": "select count ( * ) from routes as t1 join airports as t2 on t1 . dst_apid = t2 . apid join airlines as t3 on t1 . alid = t3 . alid where t2 . country = value and t3 . name = value"
        },
        {
            "utterance": "What are the source airports of those routes ?",
            "sql": "select t1 . src_ap from routes as t1 join airports as t2 on t1 . dst_apid = t2 . apid join airlines as t3 on t1 . alid = t3 . alid where t2 . country = value and t3 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the country of the airlines whose name starts with 'Orbit'.",
        "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'"
    },
    "interaction": [
        {
            "utterance": "How many airlines are there ?",
            "sql": "select count ( * ) from airlines"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select * from airlines where name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 21,
    "final": {
        "utterance": "List the cities which have more than one airport and number of airports.",
        "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which cities have more than one airport ?",
            "sql": "select city from airports group by city having count ( * ) > value"
        },
        {
            "utterance": "Now show the number of airports in each of those cities",
            "sql": "select city , count ( * ) from airports group by city having count ( * ) > value"
        },
        {
            "utterance": "Which cities have three airports",
            "sql": "select city from airports group by city having count ( * ) = value"
        },
        {
            "utterance": "Which cities have 4 or more airports",
            "sql": "select city from airports group by city having count ( * ) > = value"
        },
        {
            "utterance": "Show the number of airports in those cities",
            "sql": "select city , count ( * ) from airports group by city having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the number of routes whose destination airports are in Canada.",
        "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"
    },
    "interaction": [
        {
            "utterance": "How many routes have a destination airport in Canada , please ?",
            "sql": "select count ( * ) from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid where country = value"
        },
        {
            "utterance": "How many routes have a destination airport in the United States , please ?",
            "sql": "select count ( * ) from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid where country = value"
        },
        {
            "utterance": "How many routes have a source airport in Canada and a destination airport in the United States , please ?",
            "sql": "select count ( * ) from ( select rid from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid where t1 . country = value intersect select rid from airports as t3 join routes as t4 on t3 . apid = t4 . src_apid where t3 . country = value )"
        },
        {
            "utterance": "What are the names of those source airports that begin with the letter A ?",
            "sql": "select t1 . name from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid where t1 . name like value"
        },
        {
            "utterance": "What are the ones that are in Canada only ?",
            "sql": "select distinct ( t1 . name ) from airports as t1 join routes as t2 on t1 . apid = t2 . src_apid where t1 . name like value and t1 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the number of airports whose name contain the word 'International'.",
        "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'"
    },
    "interaction": [
        {
            "utterance": "Can you list the number of airports whose names contain the word `` International '' ?",
            "sql": "select count ( * ) from airports where name like value"
        },
        {
            "utterance": "What is the most common country of all of those airports ?",
            "sql": "select country from airports group by country order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the greatest elevation of all of those airports ?",
            "sql": "select max ( elevation ) from airports"
        },
        {
            "utterance": "What is the minimum elevation ?",
            "sql": "select min ( elevation ) from airports"
        },
        {
            "utterance": "What country is the airport with the lowest elevation located in ?",
            "sql": "select country from airports where elevation = ( select min ( elevation ) from airports )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the number of different airports which are the destinations of the American Airlines.",
        "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "Show the route id of the destination airport id 2990 ?",
            "sql": "select rid from routes where dst_apid = value"
        },
        {
            "utterance": "Show the number of different airports which are the destinations of the American Airlines ?",
            "sql": "select count ( distinct dst_apid ) from airlines as t1 join routes as t2 on t1 . alid = t2 . alid where t1 . name = value"
        },
        {
            "utterance": "Show the destination airport of route id 39 ?",
            "sql": "select dst_apid from routes where rid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name and city of the airport which is the destination of the most number of routes.",
        "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many on the airport table",
            "sql": "select count ( * ) from airports"
        },
        {
            "utterance": "what is the country of goroka",
            "sql": "select country from airports where city = value"
        },
        {
            "utterance": "find the name and city of the airport which is the destination of the most number of route .",
            "sql": "select t1 . name , t1 . city from airports as t1 join routes as t2 on t1 . apid = t2 . dst_apid group by t2 . dst_apid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the names of the top 10 airlines that operate the most number of routes.",
        "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"
    },
    "interaction": [
        {
            "utterance": "How many airlines do you have ?",
            "sql": "select count ( * ) from airlines"
        },
        {
            "utterance": "How many routes does each airline have ?",
            "sql": "select t1 . name , count ( * ) from airlines as t1 join routes as t2 on t1 . alid = t2 . alid group by t2 . alid"
        },
        {
            "utterance": "What are the names of the top 10 airlines with the most number of routes ?",
            "sql": "select t1 . name from airlines as t1 join routes as t2 on t1 . alid = t2 . alid group by t2 . alid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the number of routes with destination airports in Italy.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
    },
    "interaction": [
        {
            "utterance": "hi . How many routes are there ?",
            "sql": "select count ( * ) from routes as t1 join airports as t2"
        },
        {
            "utterance": "how many have destination airports in Italy ?",
            "sql": "select count ( * ) from routes as t1 join airports as t2 on t1 . dst_apid = t2 . apid where t2 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 28,
    "final": {
        "utterance": "For each country and airline name, how many routes are there?",
        "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the airlines ?",
            "sql": "select name from airlines"
        },
        {
            "utterance": "How many routes are there in the United States ?",
            "sql": "select count ( * ) from routes as t1 join airlines as t2 on t2 . alid = t1 . alid where t2 . country = value"
        },
        {
            "utterance": "Can you give me a number of routes per country and airline name ?",
            "sql": "select t1 . country , t1 . name , count ( * ) from airlines as t1 join routes as t2 on t1 . alid = t2 . alid group by t1 . country , t1 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 29,
    "final": {
        "utterance": "List the cities which have more than 2 airports sorted by the number of airports.",
        "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the total number of airports ?",
            "sql": "select count ( apid ) from airports"
        },
        {
            "utterance": "How about the total number of cities ?",
            "sql": "select count ( distinct city ) from airports"
        },
        {
            "utterance": "Can you sort them by the number of airports ?",
            "sql": "select city from airports group by city having count ( * ) > value order by count ( * )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 30,
    "final": {
        "utterance": "Which country is the airport that has the highest altitude located in?",
        "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which country has the airport with the highest altitude ?",
            "sql": "select country from airports order by elevation desc limit value"
        },
        {
            "utterance": "in what city is it located ?",
            "sql": "select city from airports order by elevation desc limit value"
        },
        {
            "utterance": "what is its elevation ?",
            "sql": "select elevation from airports order by elevation desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you list all of the hometowns listed in this database ?",
            "sql": "select distinct hometown from people"
        },
        {
            "utterance": "Thank you for that information ! Can you filter that list to show just the hometowns for gymnasts whose total points are more than 57.5 ?",
            "sql": "select distinct t2 . hometown from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id where t1 . total_points > value"
        },
        {
            "utterance": "Thank you ! Can you show all of the names of the gymnasts for those hometowns ?",
            "sql": "select name from people where hometown = value or hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the hometowns shared by people older than 23 and younger than 20.",
        "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the hometowns ?",
            "sql": "select hometown from people"
        },
        {
            "utterance": "Thank you ! Can you filter this list ot show only the hometowns that have both people older than 23 years of age and people younger than 20 years of age ?",
            "sql": "select hometown from people where age > value intersect select hometown from people where age < value"
        },
        {
            "utterance": "Excellent ! Can you tell me how many people in total have Santo Domingo as their Hometown ?",
            "sql": "select count ( * ) from people where hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of gymnasts in ascending order by their heights.",
        "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
    },
    "interaction": [
        {
            "utterance": "Who is the tallest gymnast ?",
            "sql": "select t2 . name from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id order by t2 . height desc limit value"
        },
        {
            "utterance": "How tall is Nadia Caba Rodr\u00edguez ?",
            "sql": "select height from people where name = value"
        },
        {
            "utterance": "Great , can you list the names of the gymnasts in ascending order by their heights ?",
            "sql": "select t2 . name from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id order by t2 . height"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the most common hometown of gymnasts?",
        "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list all of the gymnast IDs and their associated hometowns ?",
            "sql": "select t1 . gymnast_id , t2 . hometown from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id"
        },
        {
            "utterance": "Awesome ! Which of these hometowns is the most common ?",
            "sql": "select t2 . hometown from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id group by t2 . hometown order by count ( * ) desc limit value"
        },
        {
            "utterance": "Awesome ! Can you show me a list of all people names that are associated with Santo Domingo ?",
            "sql": "select name from people where hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"
    },
    "interaction": [
        {
            "utterance": "what are the hometowns of gymnasts",
            "sql": "select t2 . hometown from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id group by t2 . hometown"
        },
        {
            "utterance": "the corresponding number of gymnasts ? | Can you clarity what do you mean by the corresponding number ? | how many gymnasts are in table ?",
            "sql": "select count ( * ) from gymnast"
        },
        {
            "utterance": "details about paul hamm | Can you be more specific for what details do you need for Paul Hamm ? | i want paul hamm 's age",
            "sql": "select age from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the age of the tallest person?",
        "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many people are there",
            "sql": "select count ( * ) from people"
        },
        {
            "utterance": "how many are under age 21",
            "sql": "select count ( * ) from people where age < value"
        },
        {
            "utterance": "how many are from same hometown | Santo Domingo is the only hometown where more than 1 person is from . There are 5 people from the hometown San Domingo . | what is the name of people ID 2",
            "sql": "select name from people where people_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the ages of gymnasts in descending order of total points.",
        "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC"
    },
    "interaction": [
        {
            "utterance": "Show the ages of gymnasts in descending order of total points .",
            "sql": "select t2 . age from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id order by t1 . total_points desc"
        },
        {
            "utterance": "Show their names .",
            "sql": "select t2 . name from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id order by t1 . total_points desc"
        },
        {
            "utterance": "What is the height of Paul Hamm ?",
            "sql": "select height from people where name = value"
        },
        {
            "utterance": "What is his hometown ?",
            "sql": "select hometown from people where name = value"
        },
        {
            "utterance": "How many total points does he have ?",
            "sql": "select sum ( total_points ) from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id where t2 . name = value"
        },
        {
            "utterance": "How many rings points does he have ?",
            "sql": "select rings_points from gymnast as t1 join people as t2 on t1 . gymnast_id = t2 . people_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the age of the tallest person?",
        "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the tallest height ?",
            "sql": "select max ( height ) from people"
        },
        {
            "utterance": "What is that person 's name ?",
            "sql": "select name from people order by height desc limit value"
        },
        {
            "utterance": "How old is he ?",
            "sql": "select age from people order by height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all the buildings that have at least 10 professors.",
        "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "Show me all the buildings",
            "sql": "select building from faculty"
        },
        {
            "utterance": "Show me the details of all professors | do you mean all information about them ? | Yes",
            "sql": "select * from faculty"
        },
        {
            "utterance": "Show me all the buildings that have at least 10 professors",
            "sql": "select building from faculty where rank = value group by building having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the ids of the students who don't participate in any activity.",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in"
    },
    "interaction": [
        {
            "utterance": "how many students are there ?",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "how many do n't participate in activities ?",
            "sql": "select count ( * ) from ( select stuid from student except select stuid from participates_in )"
        },
        {
            "utterance": "What are their Ids ?",
            "sql": "select stuid from student except select stuid from participates_in"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of first name , last name , and faculty ID of all faculty ?",
            "sql": "select fname , lname , facid from faculty"
        },
        {
            "utterance": "Great ! Can you update this list to include the activity name associated with each individual faculty member ?",
            "sql": "select t1 . fname , t1 . lname , t1 . facid , t3 . activity_name from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t2 . actid = t3 . actid"
        },
        {
            "utterance": "Excellent ! Can you filter this list to remove all professors who are associated with either Canoeing or Kayaking ?",
            "sql": "select t1 . fname , t1 . lname , t1 . facid , t3 . activity_name from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t2 . actid = t3 . actid where t3 . activity_name ! = value or t3 . activity_name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many Professors are in building NEB?",
        "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( * ) from faculty where rank = value"
        },
        {
            "utterance": "How many different buildings do you have ?",
            "sql": "select count ( distinct building ) from faculty"
        },
        {
            "utterance": "Can you tell me the number of Professors in the building NEB ?",
            "sql": "select count ( * ) from faculty where rank = value and building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "what is the activity id of faculty id of 1082",
            "sql": "select actid from faculty_participates_in where facid = value"
        },
        {
            "utterance": "what is the rank of mark",
            "sql": "select rank from faculty where fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the number of male and female assistant professors.",
        "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( * ) from faculty where rank = value"
        },
        {
            "utterance": "how many are assistant professors ? | Did you mean to ask for the number of assistant professors in total ? | Well , yes .",
            "sql": "select count ( * ) from faculty where rank = value"
        },
        {
            "utterance": "How many or women ? | Did you mean to ask for the number of female assistant professors ? | yes , how many are women ?",
            "sql": "select count ( * ) from faculty where rank = value and sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the ids for all the faculty members who have at least 2 students.",
        "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many student of there",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "how many male students of there",
            "sql": "select count ( * ) from student where sex = value"
        },
        {
            "utterance": "how many students from age of 18",
            "sql": "select count ( * ) from student where age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Find the ids of the students who participate in Canoeing and Kayaking .",
            "sql": "select t1 . stuid from participates_in as t1 join activity as t2 on t2 . actid = t2 . actid where t2 . activity_name = value intersect select t1 . stuid from participates_in as t1 join activity as t2 on t2 . actid = t2 . actid where t2 . activity_name = value"
        },
        {
            "utterance": "What is activity name of activity id 770 ?",
            "sql": "select activity_name from activity where actid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the ids of the faculty who don't participate in any activity.",
        "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in"
    },
    "interaction": [
        {
            "utterance": "Hello , what are the names of the faculty members who do n't participate in any activity ?",
            "sql": "select lname , fname from faculty except select facid from faculty_participates_in"
        },
        {
            "utterance": "Which faculty members participate in activities ?",
            "sql": "select t2 . lname , t2 . fname from faculty_participates_in as t1 join faculty as t2 on t1 . facid = t2 . facid"
        },
        {
            "utterance": "What activities do Michael Goodrich and Gerald Masson participate in ?",
            "sql": "select actid from faculty_participates_in as t1 join faculty as t2 on t1 . facid = t2 . facid where t2 . lname = value and t2 . fname = value union select actid from faculty_participates_in as t1 join faculty as t2 on t1 . facid = t2 . facid where t2 . lname = value and t2 . fname = value"
        },
        {
            "utterance": "In total , how many faculty members are there ?",
            "sql": "select count ( * ) from faculty"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many Professors are in building NEB?",
        "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "How many professors do you have in buildings ? | Can you clarify your question ? | Total number of professors in NEB building ?",
            "sql": "select count ( * ) from faculty where rank = value and building = value"
        },
        {
            "utterance": "What of instructors ?",
            "sql": "select count ( * ) from faculty where rank = value and building = value"
        },
        {
            "utterance": "What of total number of faculty ?",
            "sql": "select count ( * ) from faculty where building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all the faculty ranks and the number of students advised by each rank.",
        "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"
    },
    "interaction": [
        {
            "utterance": "Can you rank the faculty for me by ID | what ID did you want to order by ? | How many students were advised by professors ?",
            "sql": "select count ( * ) from faculty as t1 join student as t2 on t1 . facid = t2 . advisor where t1 . rank = value"
        },
        {
            "utterance": "How many students were advised by instructors ?",
            "sql": "select count ( * ) from faculty as t1 join student as t2 on t1 . facid = t2 . advisor where t1 . rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Find the first names of the faculty members who participate in Caonoeing and Kayaking .",
            "sql": "select t1 . lname from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t2 . actid = t2 . actid where t3 . activity_name = value intersect select t1 . lname from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t2 . actid = t2 . actid where t3 . activity_name = value"
        },
        {
            "utterance": "What about faculty members who participate in Mountain Climbing ?",
            "sql": "select t1 . fname from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t2 . actid = t2 . actid where t3 . activity_name = value"
        },
        {
            "utterance": "What about Mountain Climbing and Kayaking ?",
            "sql": "select t1 . fname from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t2 . actid = t2 . actid where t3 . activity_name = value intersect select t1 . fname from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t2 . actid = t2 . actid where t3 . activity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of all the activities Mark Giuliano participates in.",
        "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all the activities Mark Giuliano participates in .",
            "sql": "select t3 . activity_name from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid join activity as t3 on t3 . actid = t2 . actid where t1 . fname = value and t1 . lname = value"
        },
        {
            "utterance": "What rank does Mark Giuliano have ?",
            "sql": "select rank from faculty where lname = value and fname = value"
        },
        {
            "utterance": "Give me names of all faculty members in alphabetical order | Do you want to rank by first name or last name ? | first name",
            "sql": "select fname from faculty order by fname asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the first and last name of the faculty participating in the most activities?",
        "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the first name of faculty partcipating in most activities ?",
            "sql": "select t1 . fname from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid group by t1 . facid order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the last name of faculty partcipating in most activities ?",
            "sql": "select t1 . lname from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid group by t1 . facid order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the rank of mark ?",
            "sql": "select rank from faculty where fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the number of male and female assistant professors.",
        "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "what is the name of faceid 1082",
            "sql": "select fname , lname from faculty where facid = value"
        },
        {
            "utterance": "What is the sex of professor | I am sorry . Which professor are you referring to ? | Rank profeesor",
            "sql": "select sex from faculty where rank = value"
        },
        {
            "utterance": "What is the phone of goodrich",
            "sql": "select phone from faculty where lname = value"
        },
        {
            "utterance": "what is the last name of mark",
            "sql": "select lname from faculty where fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the ids for all the faculty members who have at least 2 students.",
        "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show all faculty ids",
            "sql": "select facid from faculty"
        },
        {
            "utterance": "faculty Ids who have at least 2 students",
            "sql": "select t1 . facid from faculty as t1 join student as t2 on t1 . facid = t2 . advisor group by t1 . facid having count ( * ) > = value"
        },
        {
            "utterance": "now what are their major | Do you mean the major of the students whose faculty have at least 2 students ? | yes",
            "sql": "select t2 . major from faculty as t1 join student as t2 on t1 . facid = t2 . advisor group by t1 . facid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Which rank has the smallest number of faculty members?",
        "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average number of faculty members ? | Do you mean the average number of FacID ? | yes",
            "sql": "select avg ( facid ) from faculty"
        },
        {
            "utterance": "Which rank has the highest number of faculty members ?",
            "sql": "select rank from faculty group by rank order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many ranks have professors",
            "sql": "select count ( * ) from faculty where rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the name of the activity with the most students?",
        "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Thank you for taking the time to work with me ! Can you provide me with a list of all of the different activity names ?",
            "sql": "select activity_name from activity"
        },
        {
            "utterance": "Can you filter that list to show the activity with the most student participants ?",
            "sql": "select t1 . activity_name from activity as t1 join participates_in as t2 on t1 . actid = t2 . actid group by t1 . actid order by count ( * ) desc limit value"
        },
        {
            "utterance": "Great ! Can you tell me how many students in total participated in football ?",
            "sql": "select count ( distinct t2 . stuid ) from activity as t1 join participates_in as t2 on t1 . actid = t2 . actid where t1 . activity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the first name and last name of Linda Smith's advisor?",
        "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""
    },
    "interaction": [
        {
            "utterance": "I want to know the names of advisors available",
            "sql": "select fname , lname from faculty"
        },
        {
            "utterance": "Could you tell me the names of advisors for female students ?",
            "sql": "select t2 . fname , t2 . lname from student as t1 join faculty as t2 on t2 . facid = t1 . advisor where t1 . sex = value"
        },
        {
            "utterance": "What about the name of the advisor for the student named Linda Smith ?",
            "sql": "select t2 . fname , t2 . lname from student as t1 join faculty as t2 on t2 . facid = t1 . advisor where t1 . fname = value and t1 . lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"
    },
    "interaction": [
        {
            "utterance": "what are the names and activities of all faculty members who participated in some activity ?",
            "sql": "select t1 . fname , t1 . lname , count ( * ) , t1 . facid from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid group by t1 . facid"
        },
        {
            "utterance": "what is the count for Naiman ?",
            "sql": "select count ( * ) from faculty as t1 join faculty_participates_in as t2 on t1 . facid = t2 . facid group by t1 . fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\""
    },
    "interaction": [
        {
            "utterance": "What is the phone of Jerry Prince ?",
            "sql": "select phone from faculty where fname = value and lname = value"
        },
        {
            "utterance": "What is his room number ?",
            "sql": "select room from faculty where fname = value and lname = value"
        },
        {
            "utterance": "And what is building name ?",
            "sql": "select building from faculty where fname = value and lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"
    },
    "interaction": [
        {
            "utterance": "Show the faculty id of each faculty member , along with the number of students he or she advises .",
            "sql": "select t1 . facid , count ( * ) from faculty as t1 join student as t2 on t1 . facid = t2 . advisor group by t1 . facid"
        },
        {
            "utterance": "How may faculties in this survey ?",
            "sql": "select count ( * ) from faculty"
        },
        {
            "utterance": "How many males in this table ? | Do you mean the table `` Faculty '' ? | Yes .",
            "sql": "select count ( * ) from faculty where sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Show all the ranks and the number of male and female faculty for each rank.",
        "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
    },
    "interaction": [
        {
            "utterance": "Can you please list all the ranks and the number of male faculty members for those ranks ?",
            "sql": "select rank , sex , count ( * ) from faculty where sex = value group by rank , sex"
        },
        {
            "utterance": "Can you add the number of female faculty members for each of the ranks to the table please ?",
            "sql": "select rank , sex , count ( * ) from faculty group by rank , sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Show all the activity names and the number of faculty involved in each activity.",
        "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me what activities are listed ? | The following table shows activity names | Can you tell me how many faculty are involved in each activity ?",
            "sql": "select t1 . activity_name , count ( * ) from activity as t1 join faculty_participates_in as t2 on t1 . actid = t2 . actid group by t1 . actid"
        },
        {
            "utterance": "What is the most popular activity ?",
            "sql": "select t1 . activity_name from activity as t1 join faculty_participates_in as t2 on t1 . actid = t2 . actid group by t1 . actid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Show all the ranks and the number of male and female faculty for each rank.",
        "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
    },
    "interaction": [
        {
            "utterance": "how many faculties ?",
            "sql": "select count ( * ) from faculty"
        },
        {
            "utterance": "How many female faculties ?",
            "sql": "select count ( * ) from faculty where sex = value"
        },
        {
            "utterance": "How many professors ?",
            "sql": "select count ( * ) from faculty where rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the artist ids and their volume issues ?",
            "sql": "select t1 . artist_id , t2 . volume_issue from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id"
        },
        {
            "utterance": "Which volumes have more than 2 weeks on top ?",
            "sql": "select * from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id where t2 . weeks_on_top > value"
        },
        {
            "utterance": "Hmm , I want to know the famous titles of the artists associated with volumes with more than 2 weeks on top .",
            "sql": "select t1 . famous_title from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id where t2 . weeks_on_top > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 1,
    "final": {
        "utterance": "Please show the songs that have result \"nominated\" at music festivals.",
        "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\""
    },
    "interaction": [
        {
            "utterance": "What are the issue date of 34th England Academy Prize ?",
            "sql": "select t2 . issue_date from music_festival as t1 join volume as t2 on t1 . volume = t2 . volume_id where t1 . music_festival = value"
        },
        {
            "utterance": "What are the music festivals of Everybody Have Fun Tonight song ?",
            "sql": "select t1 . music_festival from music_festival as t1 join volume as t2 on t1 . volume = t2 . volume_id where t2 . song = value"
        },
        {
            "utterance": "Show the songs that have result `` nominated '' at music festivals .",
            "sql": "select t2 . song from music_festival as t1 join volume as t2 on t1 . volume = t2 . volume_id where t1 . result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Please show the results of music festivals and the number of music festivals that have had each , ordered by this count .",
            "sql": "select result , count ( * ) from music_festival group by result order by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\""
    },
    "interaction": [
        {
            "utterance": "what is average of volume ?",
            "sql": "select avg ( volume ) from music_festival"
        },
        {
            "utterance": "can you show a list of categories ?",
            "sql": "select distinct category from music_festival"
        },
        {
            "utterance": "where are the date of ceremony of music festivals with category 'best song ' and 'awarded ' ?",
            "sql": "select date_of_ceremony from music_festival where category = value and result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the issue date of the volume with the minimum weeks on top?",
        "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "The song The way was issued on what date ?",
            "sql": "select issue_date from volume where song like value"
        },
        {
            "utterance": "the song The way was issued what volume ?",
            "sql": "select volume_issue from volume where song like value"
        },
        {
            "utterance": "what 's the artist id for Everybody Have Fun Tonight",
            "sql": "select artist_id from volume where song like value"
        },
        {
            "utterance": "Give me the issue date of the volume with the minimum weeks on top",
            "sql": "select issue_date from volume order by weeks_on_top asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the categories of the music festivals with count more than 1.",
        "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hi.Can you show the categories of the music festivals ?",
            "sql": "select category from music_festival"
        },
        {
            "utterance": "Ok thank you.Can you please show me the music festivals with counts more than 1 ? | Did you mean to ask for the categories of the music festivals with counts more than 1 ? | Yes .",
            "sql": "select category from music_festival group by category having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\""
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me in what year did the artist Gorgoroth release his first song ? | 16 May - 30 May is the issue date of the song the artist Gorgoroth first released . | what is the name of the song ?",
            "sql": "select t2 . song from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id where t1 . artist = value order by t2 . issue_date limit value"
        },
        {
            "utterance": "Great , what is the issue dates of all volumes of the artist `` Gorgoroth ''",
            "sql": "select t2 . issue_date from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id where t1 . artist = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23"
    },
    "interaction": [
        {
            "utterance": "What are the issue dates of volumes associated with the artist aged 23 or younger ?",
            "sql": "select issue_date from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id where t1 . age < = value"
        },
        {
            "utterance": "What are the issue dates of volumes associated with the artist aged 24 or older ?",
            "sql": "select issue_date from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id where t1 . age > = value"
        },
        {
            "utterance": "How many weeks on top for volumes associated with the artist aged 24 or older ?",
            "sql": "select count ( weeks_on_top ) from artist as t1 join volume as t2 on t1 . artist_id = t2 . artist_id where t1 . age > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the maximum and minimum week on top of all volumes?",
        "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume"
    },
    "interaction": [
        {
            "utterance": "Hello , can you please tell me the most weeks spent on top ?",
            "sql": "select max ( weeks_on_top ) from volume"
        },
        {
            "utterance": "And how many volumes spent 3.0 weeks on top ?",
            "sql": "select count ( * ) from volume where weeks_on_top = value"
        },
        {
            "utterance": "What are the names of the two volumes that spend 3.0 weeks on top ? | What do you mean by names ? | I am sorry - what are the songs of the two volumes that spent 3.0 weeks on top ?",
            "sql": "select song from volume where weeks_on_top = value"
        },
        {
            "utterance": "What was the minimum time spent on top ?",
            "sql": "select min ( weeks_on_top ) from volume"
        },
        {
            "utterance": "And how many volumes spent 1.0 weeks on top ?",
            "sql": "select count ( * ) from volume where weeks_on_top = value"
        },
        {
            "utterance": "Did any artist ID appear more than once in the weeks spent on top ? | Do you mean the artists id which has more than one volume ? | Yes please .",
            "sql": "select artist_id from volume group by artist_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the song in the volume with the maximum weeks on top?",
        "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the maximum weeks on top in the table ?",
            "sql": "select weeks_on_top from volume order by weeks_on_top desc limit value"
        },
        {
            "utterance": "Which volume id has the maximum weeks on top ?",
            "sql": "select distinct ( volume_id ) from volume where weeks_on_top = ( select weeks_on_top from volume order by weeks_on_top desc limit value )"
        },
        {
            "utterance": "Hmm , I want to know what is the song in the volume with the maximum weeks on top please .",
            "sql": "select distinct ( song ) from volume where weeks_on_top = ( select weeks_on_top from volume order by weeks_on_top desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of editors that are on at least two journal committees.",
        "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the names of editors on the list with at least two journal committees .",
            "sql": "select t1 . name from editor as t1 join journal_committee as t2 on t1 . editor_id = t2 . editor_id group by t1 . name having count ( * ) > = value"
        },
        {
            "utterance": "What are the ages of the editors that are at least two journal committees .",
            "sql": "select t1 . age from editor as t1 join journal_committee as t2 on t1 . editor_id = t2 . editor_id group by t1 . name having count ( * ) > = value"
        },
        {
            "utterance": "What type of work does Kamila Porczyk do ?",
            "sql": "select t2 . work_type from editor as t1 join journal_committee as t2 on t1 . editor_id = t2 . editor_id where t1 . name = value"
        },
        {
            "utterance": "Who is the youngest journal committee member ?",
            "sql": "select t1 . name from editor as t1 join journal_committee as t2 on t1 . editor_id = t2 . editor_id order by t1 . age asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of editors of age either 24 or 25.",
        "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25"
    },
    "interaction": [
        {
            "utterance": "Show the names of editors of age either 24 or 25 .",
            "sql": "select name from editor where age = value or age = value"
        },
        {
            "utterance": "List out the editors name ? | sorry , did you mean you need the Editor ID | How many editor id 's in the table ?",
            "sql": "select count ( editor_id ) from editor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000"
    },
    "interaction": [
        {
            "utterance": "What is the journal id of Anna Powierza ?",
            "sql": "select t3 . journal_id from journal_committee as t1 join editor as t2 on t1 . editor_id = t2 . editor_id join journal as t3 on t1 . journal_id = t3 . journal_id where t2 . name = value"
        },
        {
            "utterance": "What are the work type of Kamila Porczyk ?",
            "sql": "select t1 . work_type from journal_committee as t1 join editor as t2 on t1 . editor_id = t2 . editor_id join journal as t3 on t1 . journal_id = t3 . journal_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'"
    },
    "interaction": [
        {
            "utterance": "Show average sales of the journals that have an editor whose work type is photo",
            "sql": "select avg ( t1 . sales ) from journal as t1 join journal_committee as t2 on t1 . journal_id = t2 . journal_id where t2 . work_type = value"
        },
        {
            "utterance": "The one I asked before",
            "sql": "select t1 . journal_id from journal as t1 join journal_committee as t2 on t1 . journal_id = t2 . journal_id where t2 . work_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of editors of age either 24 or 25.",
        "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25"
    },
    "interaction": [
        {
            "utterance": "Show the names of editors of age 24 .",
            "sql": "select name from editor where age = value"
        },
        {
            "utterance": "Please show me the names of editors of age 25 .",
            "sql": "select name from editor where age = value"
        },
        {
            "utterance": "hmmm . Can you also show me the name and age of the oldest editor ?",
            "sql": "select name , age from editor where age = ( select max ( age ) from editor )"
        },
        {
            "utterance": "ok. can you also please give me the name and age of the youngest editor ?",
            "sql": "select name , age from editor where age = ( select min ( age ) from editor )"
        },
        {
            "utterance": "How many editors are older then 25 and younger than 45 ?",
            "sql": "select count ( * ) from editor where age > value and age < value"
        },
        {
            "utterance": "May I have their names please ?",
            "sql": "select name from editor where age > value and age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of editors that are on at least two journal committees.",
        "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "show the names of editors that are on at least two journal committees ?",
            "sql": "select t1 . name from editor as t1 join journal_committee as t2 on t1 . editor_id = t2 . editor_id group by t1 . name having count ( * ) > = value"
        },
        {
            "utterance": "what is the work type of Kamila Porczyk ?",
            "sql": "select t2 . work_type from editor as t1 join journal_committee as t2 on t1 . editor_id = t2 . editor_id where t1 . name = value"
        },
        {
            "utterance": "how much years old is Anna Powierza ?",
            "sql": "select t1 . age from editor as t1 where t1 . name = value"
        },
        {
            "utterance": "what is the work type of Anna Powierza ?",
            "sql": "select t2 . work_type from editor as t1 join journal_committee as t2 on t1 . editor_id = t2 . editor_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the youngest editor?",
        "sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello . What is the name of the youngest editor ?",
            "sql": "select name from editor order by age asc limit value"
        },
        {
            "utterance": "What is the age of the youngest editor ?",
            "sql": "select age from editor order by age asc limit value"
        },
        {
            "utterance": "What is the name of that editor ?",
            "sql": "select name from editor order by age asc limit value"
        },
        {
            "utterance": "Can you tell me the name of the oldest editor as well ?",
            "sql": "select name from editor order by age desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 0,
    "final": {
        "utterance": "Which countries have more than two members?",
        "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Which countries have members ?",
            "sql": "select distinct ( country ) from member"
        },
        {
            "utterance": "Which country has the most members ?",
            "sql": "select country from member group by country order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which country has more than 2 members ?",
            "sql": "select country from member group by country having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the most common country across members.",
        "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Where is the most common country across members ?",
            "sql": "select country from member group by country order by count ( * ) desc limit value"
        },
        {
            "utterance": "Okay , which members are there ? | Do you mean which members are in United States ? | Yes . Which members are in the United States ?",
            "sql": "select name from member where country = value"
        },
        {
            "utterance": "Okay . What other countries are listed ?",
            "sql": "select distinct country from member except select country from member where country = value"
        },
        {
            "utterance": "Who are the members in Canada ?",
            "sql": "select name from member where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\""
    },
    "interaction": [
        {
            "utterance": "show the total distinct leader names of the college associated with the members of all country",
            "sql": "select distinct t1 . leader_name from college as t1 join member as t2 on t1 . college_id = t2 . college_id"
        },
        {
            "utterance": "find the college id for the college location Ottawa",
            "sql": "select college_id from college where college_location = value"
        },
        {
            "utterance": "find the member name and college location for the member id 1",
            "sql": "select t2 . name , t1 . college_location from college as t1 join member as t2 on t2 . college_id = t1 . college_id where member_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "sql": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\""
    },
    "interaction": [
        {
            "utterance": "how many members are from united states or canada",
            "sql": "select count ( name ) from member where country = value or country = value"
        },
        {
            "utterance": "can you list the name of these 10 members",
            "sql": "select name from member where country = value or country = value"
        },
        {
            "utterance": "arrange the names in ascending order",
            "sql": "select name from member where country = value or country = value order by name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of members in ascending order of their rank in rounds.",
        "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC"
    },
    "interaction": [
        {
            "utterance": "list the name of the members in the order of their rank in rounds",
            "sql": "select t1 . name from member as t1 join round as t2 on t1 . member_id = t2 . member_id order by rank_in_round asc"
        },
        {
            "utterance": "include member id in this table",
            "sql": "select t1 . name , t1 . member_id from member as t1 join round as t2 on t1 . member_id = t2 . member_id order by rank_in_round asc"
        },
        {
            "utterance": "also include the college id in this table",
            "sql": "select t1 . name , t1 . member_id , t1 . college_id from member as t1 join round as t2 on t1 . member_id = t2 . member_id order by rank_in_round asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the most common country across members.",
        "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common college id ?",
            "sql": "select college_id from member group by college_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Who went there ?",
            "sql": "select name from member where college_id = value"
        },
        {
            "utterance": "What about the most common country ?",
            "sql": "select country from member group by country order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "sql": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC"
    },
    "interaction": [
        {
            "utterance": "Please show the names of all members who go to Saskatchewan School",
            "sql": "select t2 . name from college as t1 join member as t2 on t1 . college_id = t2 . college_id where t1 . name = value"
        },
        {
            "utterance": "Now please show the names of all members , and the locations of the colleges they go to",
            "sql": "select t2 . name , t1 . college_location from college as t1 join member as t2 on t1 . college_id = t2 . college_id"
        },
        {
            "utterance": "now can you show the those same results , but ordered in ascending order of member names",
            "sql": "select t2 . name , t1 . college_location from college as t1 join member as t2 on t1 . college_id = t2 . college_id order by t2 . name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    "interaction": [
        {
            "utterance": "which rooms have a king bed ?",
            "sql": "select * from rooms where bedtype = value"
        },
        {
            "utterance": "what are the decor of those rooms ?",
            "sql": "select distinct decor from rooms where bedtype = value"
        },
        {
            "utterance": "show me the names and the decor of the rooms that have a king bed",
            "sql": "select roomname , decor from rooms where bedtype = value"
        },
        {
            "utterance": "show me the price of the rooms also",
            "sql": "select roomname , decor , baseprice from rooms where bedtype = value"
        },
        {
            "utterance": "now sort the list by price",
            "sql": "select roomname , decor , baseprice from rooms where bedtype = value order by baseprice"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name and id of the top 3 expensive rooms.",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "Can you list the base price for all rooms ?",
            "sql": "select baseprice from rooms"
        },
        {
            "utterance": "Can you sort the list to show only the 3 highest base prices ?",
            "sql": "select baseprice from rooms order by baseprice desc limit value"
        },
        {
            "utterance": "Can you please list the room name and room id associated with each of those 3 base prices ?",
            "sql": "select roomid , roomname from rooms order by baseprice desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which room has cheapest base price? List the room's name and the base price.",
        "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me which room has the cheapest base price ?",
            "sql": "select * from rooms order by baseprice asc limit value"
        },
        {
            "utterance": "Could you please tell me which room has the most expensive base price ?",
            "sql": "select * from rooms order by baseprice desc limit value"
        },
        {
            "utterance": "What is the average base price for all rooms ?",
            "sql": "select avg ( baseprice ) from rooms"
        },
        {
            "utterance": "What is the name of the room with the largest max occupancy ?",
            "sql": "select roomname from rooms order by maxoccupancy desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the number of rooms that do not have any reservation.",
        "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    "interaction": [
        {
            "utterance": "which one of these rooms has reservations ?",
            "sql": "select * from rooms where roomid in ( select distinct room from reservations )"
        },
        {
            "utterance": "What about the rooms which do not have reservations ?",
            "sql": "select * from rooms where roomid not in ( select distinct room from reservations )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the first and last names of people who payed more than the rooms' base prices.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"
    },
    "interaction": [
        {
            "utterance": "Can you find the first and last names of all people who paid more than the rooms ' base prices ?",
            "sql": "select t1 . firstname , t1 . lastname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . rate - t2 . baseprice > value"
        },
        {
            "utterance": "Could you add in the rates they paid to the table please ? | Sorry , did you mean the base price of the room ? | The reservation rate , please",
            "sql": "select t1 . firstname , t1 . lastname , t1 . rate from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . rate - t2 . baseprice > value"
        },
        {
            "utterance": "Can you find the first and last names of all people who paid less than the rooms ' base prices ?",
            "sql": "select t1 . firstname , t1 . lastname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . rate - t2 . baseprice < value"
        },
        {
            "utterance": "Could you add in the reservation rates they paid to the table ?",
            "sql": "select t1 . firstname , t1 . lastname , t1 . rate from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . rate - t2 . baseprice < value"
        },
        {
            "utterance": "What is the name of the room that was booked most often ?",
            "sql": "select room from reservations group by room order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what is the last name of room id IBS ? | Do mean the last name of the reservation for the room with id IBS ? | yes",
            "sql": "select t1 . lastname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t2 . roomid = value"
        },
        {
            "utterance": "what is the bed type of the column `` room in HBB ? | Do you mean the bed type for the room with id HBB ? | yes",
            "sql": "select bedtype from rooms where roomid = value"
        },
        {
            "utterance": "what is the check in and check out of the room id RND ?",
            "sql": "select t1 . checkin , t1 . checkout from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t2 . roomid = value"
        },
        {
            "utterance": "Find the most popular room in the hotel . The most popular room is the room that had seen the largest number of reservations .",
            "sql": "select t2 . roomname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid group by t1 . room order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";"
    },
    "interaction": [
        {
            "utterance": "what is the average of rates ?",
            "sql": "select avg ( rate ) from reservations"
        },
        {
            "utterance": "show me a list of check outs ?",
            "sql": "select checkout from reservations"
        },
        {
            "utterance": "show me a list of check in ?",
            "sql": "select checkin from reservations"
        },
        {
            "utterance": "how many adults stay in the room contad selbig checked in on oct 23 , 2010 ?",
            "sql": "select count ( adults ) from reservations where checkin = value and firstname = value and lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many times does ROY SWEAZY has reserved a room.",
        "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    "interaction": [
        {
            "utterance": "how many times does ROY SWEAZY has reserved a room",
            "sql": "select count ( * ) from reservations where firstname = value and lastname = value"
        },
        {
            "utterance": "ok , show the count of all room",
            "sql": "select count ( distinct room ) from reservations"
        },
        {
            "utterance": "show the count of all adults and kids",
            "sql": "select count ( adults ) , count ( kids ) from reservations"
        },
        {
            "utterance": "find the check in and out for the code 10105",
            "sql": "select checkin , checkout from reservations where code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of rooms with king bed for each decor type.",
        "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
    },
    "interaction": [
        {
            "utterance": "How many rooms with the King Size bed are there ?",
            "sql": "select count ( * ) from rooms where bedtype = value"
        },
        {
            "utterance": "How much does one room with the King size bed cost per night ?",
            "sql": "select avg ( baseprice ) from rooms where bedtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of rooms that have been reserved for more than 60 times.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"
    },
    "interaction": [
        {
            "utterance": "What is the first name of Reservations Code 10105 ?",
            "sql": "select firstname from reservations where code = value"
        },
        {
            "utterance": "What is the last name of Reservations Code 10105 ?",
            "sql": "select lastname from reservations where code = value"
        },
        {
            "utterance": "Can you show the names of rooms that have been reserved for more than 60 times",
            "sql": "select t2 . roomname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid group by t1 . room having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    "interaction": [
        {
            "utterance": "Find the names of all modern rooms with a base price below $ 160 and two beds .",
            "sql": "select roomname from rooms where baseprice < value and beds = value and decor = value"
        },
        {
            "utterance": "Which room has highest price value ? tell me the name and Room ID",
            "sql": "select roomname , roomid from rooms where baseprice = ( select max ( baseprice ) from rooms )"
        },
        {
            "utterance": "Which room has lowest price value ? tell me the price , the name and Room ID",
            "sql": "select baseprice , roomname , roomid from rooms where baseprice = ( select min ( baseprice ) from rooms )"
        },
        {
            "utterance": "Which room has most number of beds ? Tell me the Room ID , Name and decor ?",
            "sql": "select roomid , roomname , decor from rooms where beds = ( select max ( beds ) from rooms )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the average and minimum price of the rooms in different decor.",
        "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"
    },
    "interaction": [
        {
            "utterance": "What are the bed type of room id RND ?",
            "sql": "select bedtype from rooms where roomid = value"
        },
        {
            "utterance": "What type of decor in room name Abscond or bolster ?",
            "sql": "select decor from rooms where roomname = value"
        },
        {
            "utterance": "Find the max occupancy of bed type Queen ? | Here are the max occupancies of rooms with bed type Queen . | Find the average and minimum price of the rooms in different decor .",
            "sql": "select decor , avg ( baseprice ) , min ( baseprice ) from rooms group by decor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name and id of the top 3 expensive rooms.",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "What are the names of the top 3 expensive rooms ?",
            "sql": "select roomname from rooms order by baseprice desc limit value"
        },
        {
            "utterance": "What are the bed types of those rooms ?",
            "sql": "select bedtype from rooms order by baseprice desc limit value"
        },
        {
            "utterance": "What are the bed types of the three least expensive rooms ?",
            "sql": "select bedtype from rooms order by baseprice limit value"
        },
        {
            "utterance": "What are the ids of the top 3 expensive rooms ?",
            "sql": "select roomid from rooms order by baseprice desc limit value"
        },
        {
            "utterance": "What are the ids of the three least expensive rooms ?",
            "sql": "select roomid from rooms order by baseprice limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    "interaction": [
        {
            "utterance": "WHAT IS ROOM ID OF MODERN DECOR ?",
            "sql": "select roomid from rooms where decor = value"
        },
        {
            "utterance": "OK .HOW MANY ROOMS IN KING BED TYPE ?",
            "sql": "select count ( * ) from rooms where bedtype = value"
        },
        {
            "utterance": "WHAT IS ROOM NAME of rooms that have a king bed . ?",
            "sql": "select roomname from rooms where bedtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
    },
    "interaction": [
        {
            "utterance": "List all the room names .",
            "sql": "select t2 . roomname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid"
        },
        {
            "utterance": "List all the room names with 2 beds .",
            "sql": "select t2 . roomname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t2 . beds = value"
        },
        {
            "utterance": "List all the room names booked with 1 adult .",
            "sql": "select t2 . roomname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . adults = value"
        },
        {
            "utterance": "List all the room names booked with 1 adult and their check in date .",
            "sql": "select t2 . roomname , t1 . checkin from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . adults = value"
        },
        {
            "utterance": "List all the room names booked with 1 adult and a check in date in October .",
            "sql": "select t2 . roomname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . adults = value and t1 . checkin like value"
        },
        {
            "utterance": "List the names of rooms booked by a customer whose first name is Roy .",
            "sql": "select t2 . roomname from reservations as t1 join rooms as t2 on t1 . room = t2 . roomid where t1 . firstname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the id and name of the most expensive base price room.",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many rooms are there ?",
            "sql": "select count ( * ) from rooms"
        },
        {
            "utterance": "What are their prices ?",
            "sql": "select baseprice from rooms"
        },
        {
            "utterance": "What is the id of the room with a base price of 250 ?",
            "sql": "select roomid from rooms where baseprice = value"
        },
        {
            "utterance": "What is the name of that room ?",
            "sql": "select roomname from rooms where baseprice = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the number of rooms that do not have any reservation.",
        "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    "interaction": [
        {
            "utterance": "which rooms have reservations ?",
            "sql": "select distinct room from reservations"
        },
        {
            "utterance": "show me the average number of beds of the rooms with reservations .",
            "sql": "select avg ( beds ) from rooms where roomid in ( select distinct room from reservations )"
        },
        {
            "utterance": "how about the rooms that do not have any reservations ?",
            "sql": "select avg ( beds ) from rooms where roomid not in ( select distinct room from reservations )"
        },
        {
            "utterance": "what are the number of rooms that do not have any reservations ?",
            "sql": "select count ( * ) from rooms where roomid not in ( select distinct room from reservations )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of rooms whose price is higher than the average price.",
        "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
    },
    "interaction": [
        {
            "utterance": "how rooms are presented on the table | Did you mean to ask how many entries are in the table rooms ? | exactly",
            "sql": "select count ( * ) from rooms"
        },
        {
            "utterance": "list out the room names",
            "sql": "select roomname from rooms"
        },
        {
            "utterance": "what is the base price of Recluse and defiance",
            "sql": "select baseprice from rooms where roomname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of the first names of all customers who rented films before '2005-08-23 02:06:01 ' ?",
            "sql": "select first_name from customer where customer_id in ( select customer_id from rental where rental_date < value )"
        },
        {
            "utterance": "Thank you ! That 's a lot of people ! Can you filter the list to show me only the active customers ?",
            "sql": "select first_name from customer where customer_id in ( select customer_id from rental where rental_date < value ) and active = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
    },
    "interaction": [
        {
            "utterance": "Which film actors and actresses played a role in more than 30 films ? List their first and last names .",
            "sql": "select t2 . first_name , t2 . last_name from film_actor as t1 join actor as t2 on t1 . actor_id = t2 . actor_id group by t2 . actor_id having count ( * ) > value"
        },
        {
            "utterance": "How many films was actor id 9 in ?",
            "sql": "select count ( * ) from film_actor where actor_id = value"
        },
        {
            "utterance": "What 's that person 's name ?",
            "sql": "select first_name , last_name from actor where actor_id = value"
        },
        {
            "utterance": "Is there anyone else with the first name Joe ?",
            "sql": "select first_name , last_name from actor where first_name = value and last_name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which staff handled least number of payments? List the full name and the id.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which staff handled payments ?",
            "sql": "select * from staff"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Where does the customer with the first name Linda live? And what is her email?",
        "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table | Did you mean to ask how many entries there are in the table customer ? | exactly",
            "sql": "select count ( * ) from customer"
        },
        {
            "utterance": "list out the customers first name",
            "sql": "select first_name from customer"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the first name and the last name of the customer who made the earliest rental?",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the last name of staff id 1 ? | Do you mean customer , not staff ? | yes",
            "sql": "select last_name from customer where customer_id = value"
        },
        {
            "utterance": "what is the inventory id of the rent id 3 ?",
            "sql": "select inventory_id from rental where rental_id = value"
        },
        {
            "utterance": "what is the first name and the last name of the customer who made the earliest rental ?",
            "sql": "select t1 . first_name , t1 . last_name from customer as t1 join rental as t2 on t1 . customer_id = t2 . customer_id order by t2 . rental_date asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many films are there ?",
            "sql": "select count ( * ) from film"
        },
        {
            "utterance": "What is the range of dates they were made ?",
            "sql": "select min ( release_year ) , max ( release_year ) from film"
        },
        {
            "utterance": "What is the range of rental cost for the films ?",
            "sql": "select min ( rental_rate ) , max ( rental_rate ) from film"
        },
        {
            "utterance": "Which film has the most actors and actresses ? | What attributes of the film that has the most actors and actresses would you like to know ? | film name ?",
            "sql": "select t2 . title from film_actor as t1 join film as t2 on t1 . film_id = t2 . film_id group by t2 . film_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "film id ?",
            "sql": "select t2 . film_id from film_actor as t1 join film as t2 on t1 . film_id = t2 . film_id group by t2 . film_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "film description ?",
            "sql": "select t2 . description from film_actor as t1 join film as t2 on t1 . film_id = t2 . film_id group by t2 . film_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Where does the staff member with the first name Elsa live?",
        "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'"
    },
    "interaction": [
        {
            "utterance": "what is the city id of alberta district ?",
            "sql": "select distinct city_id from address where district = value"
        },
        {
            "utterance": "ok good ! .what is last update in qld district ?",
            "sql": "select distinct last_update from address where district = value"
        },
        {
            "utterance": "what is address of qld district ?",
            "sql": "select address from address where district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the largest payment amount?",
        "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Whew ! That was a long wait to join the chat ! Can you please show me what the largest single payment amount is ?",
            "sql": "select amount from payment order by amount desc limit value"
        },
        {
            "utterance": "Great ! Can you provide me with the associated customer ID and payment ID ?",
            "sql": "select amount , payment_id , customer_id from payment order by amount desc limit value"
        },
        {
            "utterance": "Perfect ! Could you tell me which payment ID over $ 5.00 has the most recent payment date ?",
            "sql": "select payment_id from payment where amount > value order by last_update desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
    },
    "interaction": [
        {
            "utterance": "Show me the name of the film with film id 1 ? | Do you mean the title in the table file | yes",
            "sql": "select title from film where film_id = value"
        },
        {
            "utterance": "Show all the films longer than 100 minutes ? | do you mean the films id ? | yes",
            "sql": "select film_id from film where length > value"
        },
        {
            "utterance": "Show me the name of all the films with release year 2006 ?",
            "sql": "select title from film where release_year = value"
        },
        {
            "utterance": "Show the names of all films except those who cost more than 200 for replacement ?",
            "sql": "select title from film except select title from film where replacement_cost > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the actor that starred in most films ?",
            "sql": "select t2 . first_name , t2 . last_name from film_actor as t1 join actor as t2 on t1 . actor_id = t2 . actor_id group by t2 . actor_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is Gina Gegeneres 's actor id ?",
            "sql": "select actor_id from actor where first_name = value and last_name = value"
        },
        {
            "utterance": "when was Gina Gegeneres 's last update ?",
            "sql": "select last_update from actor where first_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"
    },
    "interaction": [
        {
            "utterance": "What movies contain the words `` deleted scenes '' in the column Special Features ?",
            "sql": "select * from film where special_features like value"
        },
        {
            "utterance": "How many movies contain the words `` Deleted scenes '' in the Special Features column ?",
            "sql": "select count ( * ) from film where special_features like value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select title from film where special_features like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Which film has the most copies in the inventory? List both title and id.",
        "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you list the film ID of the film with the most copies in the inventory ?",
            "sql": "select t1 . film_id from film as t1 join inventory as t2 on t1 . film_id = t2 . film_id group by t1 . film_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Thank you ! Can you show include the flim 's title to that list ?",
            "sql": "select t1 . title , t1 . film_id from film as t1 join inventory as t2 on t1 . film_id = t2 . film_id group by t1 . film_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Great ! Can I see the description for that movie , in addition to its rating and special features ?",
            "sql": "select t1 . description , t1 . rating , t1 . special_features from film as t1 join inventory as t2 on t1 . film_id = t2 . film_id group by t1 . film_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Which districts have at least two addresses?",
        "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the districts of the addresses ?",
            "sql": "select district from address"
        },
        {
            "utterance": "How about the district which has at least two addresses ?",
            "sql": "select district from address group by district having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"
    },
    "interaction": [
        {
            "utterance": "Can you show me the first names of customers who have a rental date on or before 2005-08-23 ?",
            "sql": "select first_name from customer where customer_id in ( select customer_id from rental where rental_date < = value )"
        },
        {
            "utterance": "Hmm , I want to know the customer ids who have not rented any films after '2005-08-23 02:06:01 ' please .",
            "sql": "select customer_id from customer where customer_id not in ( select customer_id from rental where rental_date > value )"
        },
        {
            "utterance": "Can you just show me the first names of those customers ?",
            "sql": "select first_name from customer where customer_id not in ( select customer_id from rental where rental_date > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which store owns most items?",
        "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many stores are there ?",
            "sql": "select count ( distinct store_id ) from inventory"
        },
        {
            "utterance": "Which store owns the fewest items ?",
            "sql": "select * from inventory group by store_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "And which stores owns the most items ?",
            "sql": "select * from inventory group by store_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the most popular full name of the actors?",
        "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What name is popular for actors ? | did you mean the most popular ? | yes",
            "sql": "select first_name , last_name from actor group by first_name , last_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can i have the list of the names of film that was rented",
            "sql": "select t1 . title from film as t1 join inventory as t2 on t1 . film_id = t2 . film_id join rental as t3 on t2 . inventory_id = t3 . inventory_id group by t2 . inventory_id"
        },
        {
            "utterance": "Give me the inventory id and title of the film that was most frequently rented",
            "sql": "select t1 . title , t2 . inventory_id from film as t1 join inventory as t2 on t1 . film_id = t2 . film_id join rental as t3 on t2 . inventory_id = t3 . inventory_id group by t2 . inventory_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what are the special features of ACADEMY DINOSAUR",
            "sql": "select special_features from film where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Which countries have at least 3 cities?",
        "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "How many countries have more than 1 city ?",
            "sql": "select count ( * ) from ( select * from city as t1 join country as t2 on t1 . country_id = t2 . country_id group by t2 . country_id having count ( * ) > value )"
        },
        {
            "utterance": "How many countries have at least 3 cities ?",
            "sql": "select count ( * ) from ( select * from city as t1 join country as t2 on t1 . country_id = t2 . country_id group by t2 . country_id having count ( * ) > = value )"
        },
        {
            "utterance": "Show these countries",
            "sql": "select t2 . country from city as t1 join country as t2 on t1 . country_id = t2 . country_id group by t2 . country_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the city with the most addresses ?",
            "sql": "select t2 . city from address as t1 join city as t2 on t1 . city_id = t2 . city_id group by t1 . city_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many addresses does it have ?",
            "sql": "select count ( * ) from address as t1 join city as t2 on t1 . city_id = t2 . city_id group by t1 . city_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is its city id ?",
            "sql": "select t2 . city_id from address as t1 join city as t2 on t1 . city_id = t2 . city_id group by t1 . city_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you list the all addresses that have the letter S in them ?",
            "sql": "select address from address where address like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the genre name of the film HUNGER ROOF?",
        "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"
    },
    "interaction": [
        {
            "utterance": "What is the genre name of the film HUNGER ROOF , please ?",
            "sql": "select t1 . name from category as t1 join film_category as t2 on t1 . category_id = t2 . category_id join film as t3 on t2 . film_id = t3 . film_id where t3 . title = value"
        },
        {
            "utterance": "How many other films have that same genre name ?",
            "sql": "select count ( * ) from category as t1 join film_category as t2 on t1 . category_id = t2 . category_id join film as t3 on t2 . film_id = t3 . film_id where t1 . name = value"
        },
        {
            "utterance": "Of those films , which ones have the special features Deleted Scenes ?",
            "sql": "select count ( * ) from category as t1 join film_category as t2 on t1 . category_id = t2 . category_id join film as t3 on t2 . film_id = t3 . film_id where t1 . name = value and t3 . special_features = value"
        },
        {
            "utterance": "What about the special features Trailers ?",
            "sql": "select count ( * ) from category as t1 join film_category as t2 on t1 . category_id = t2 . category_id join film as t3 on t2 . film_id = t3 . film_id where t1 . name = value and t3 . special_features = value"
        },
        {
            "utterance": "What about films of the genre Action ?",
            "sql": "select count ( * ) from category as t1 join film_category as t2 on t1 . category_id = t2 . category_id join film as t3 on t2 . film_id = t3 . film_id where t1 . name = value and t3 . special_features = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
    },
    "interaction": [
        {
            "utterance": "Show me all the films which listed in the table ? | There are the titles of all the films . | Show me all films longer than 100 minutes ?",
            "sql": "select title from film where length > value"
        },
        {
            "utterance": "Show me all the films not longer than 100 minutes ?",
            "sql": "select title from film where length < = value"
        },
        {
            "utterance": "Find all the films rated PG , except those who cost more than 200 for replacement ?",
            "sql": "select title from film where rating = value except select title from film where replacement_cost > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the largest payment amount?",
        "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the largest payment amount ?",
            "sql": "select amount from payment order by amount desc limit value"
        },
        {
            "utterance": "OK , what is the average of all payment amounts ?",
            "sql": "select avg ( amount ) from payment"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "what film has rental fee of 0.99 ?",
            "sql": "select title from film where rental_rate = value"
        },
        {
            "utterance": "Which of the film has the highest rent fee ?",
            "sql": "select title from film order by rental_rate desc limit value"
        },
        {
            "utterance": "list the films with less than three in inventory",
            "sql": "select title from film intersect select t1 . title from film as t1 join inventory as t2 on t1 . film_id = t2 . film_id group by t1 . film_id having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( * ) from customer"
        },
        {
            "utterance": "How many are there that has made at least one payment ?",
            "sql": "select count ( * ) from ( select * from customer as t1 join payment as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id )"
        },
        {
            "utterance": "Out of those customers , who has spent the least amount of money ? | Do you want the first and last names and id of the customer who has spent the least amount of money ? | Yes please",
            "sql": "select t1 . first_name , t1 . last_name , t1 . customer_id from customer as t1 join payment as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by sum ( amount ) asc limit value"
        },
        {
            "utterance": "How much money did that customer spend ?",
            "sql": "select sum ( amount ) from customer as t1 join payment as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by sum ( amount ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 0,
    "final": {
        "utterance": "List the camera lens names containing substring \"Digital\".",
        "sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\""
    },
    "interaction": [
        {
            "utterance": "How many different lens are there ? | Did you mean the different brand of lens are there | No , I meant the total number of lenses",
            "sql": "select count ( * ) from camera_lens"
        },
        {
            "utterance": "Can you please list the ones that contain substring `` Digital '' in their names ? | The names of the camera lens that contain substring `` Digital '' in their names are Olympus M.Zuiko Digital ED 45mm f/1.8 , Olympus M.Zuiko Digital ED 75mm f/1.8 | Can you please also include their id ?",
            "sql": "select name , id from camera_lens where name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of the cameras that have taken picture of the most mountains?",
        "sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the brand name of id 2 ? | Did you mean the brand or name of the camera lens with ID 2 ? | yes",
            "sql": "select brand from camera_lens where id = value"
        },
        {
            "utterance": "what is color of mountain id no . 20 ?",
            "sql": "select distinct ( color ) from photos where mountain_id = value"
        },
        {
            "utterance": "what is focus length of id 3 ?",
            "sql": "select focal_length_mm from camera_lens where id = value"
        },
        {
            "utterance": "what is the name of the camera lens in the mountains id 2 ?",
            "sql": "select t2 . name from photos as t1 join camera_lens as t2 on t1 . camera_lens_id = t2 . id where t1 . mountain_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 2,
    "final": {
        "utterance": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'"
    },
    "interaction": [
        {
            "utterance": "How many distinct kinds of camera lenses are used to take photos of mountain ranges in the country `` Ethiopia '' ?",
            "sql": "select count ( distinct t2 . camera_lens_id ) from mountain as t1 join photos as t2 on t1 . id = t2 . mountain_id where t1 . country = value"
        },
        {
            "utterance": "What about in other countries ?",
            "sql": "select count ( distinct t2 . camera_lens_id ) from mountain as t1 join photos as t2 on t1 . id = t2 . mountain_id where t1 . country ! = value"
        },
        {
            "utterance": "What are the names of the photographers who used those lenses ?",
            "sql": "select t1 . name from mountain as t1 join photos as t2 on t1 . id = t2 . mountain_id where t1 . country ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'"
    },
    "interaction": [
        {
            "utterance": "How many photos use Olympus camera lenses ?",
            "sql": "select count ( * ) from photos as t1 join camera_lens as t2 on t1 . camera_lens_id = t2 . id where t2 . brand = value"
        },
        {
            "utterance": "What are their names ? | Do you mean the photos name | Yes",
            "sql": "select t1 . name from photos as t1 join camera_lens as t2 on t1 . camera_lens_id = t2 . id group by t1 . name having t2 . brand = value"
        },
        {
            "utterance": "What are the names of the photos that use a Sigma lens ?",
            "sql": "select t2 . name from camera_lens as t1 join photos as t2 on t2 . camera_lens_id = t1 . id where t1 . brand = value"
        },
        {
            "utterance": "How many photos use a Sigma lens ?",
            "sql": "select count ( * ) from photos as t1 join camera_lens as t2 on t1 . camera_lens_id = t2 . id where t2 . brand = value"
        },
        {
            "utterance": "What are their photo names ?",
            "sql": "select t1 . name from photos as t1 join camera_lens as t2 on t1 . camera_lens_id = t2 . id where t2 . brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "sql": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "Can you list the name of each camera lens and the number of photos taken by it ?",
            "sql": "select t1 . name , count ( * ) from camera_lens as t1 join photos as t2 on t1 . id = t2 . camera_lens_id group by t1 . id"
        },
        {
            "utterance": "Can you order the table by the count of photos in ascending order ?",
            "sql": "select t1 . name , count ( * ) from camera_lens as t1 join photos as t2 on t1 . id = t2 . camera_lens_id group by t1 . id order by count ( * )"
        },
        {
            "utterance": "What are the names of all photos taken by Olympus brand cameras ?",
            "sql": "select t2 . name from camera_lens as t1 join photos as t2 on t1 . id = t2 . camera_lens_id where t1 . brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 5,
    "final": {
        "utterance": "How many camera lenses are not used in taking any photos?",
        "sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )"
    },
    "interaction": [
        {
            "utterance": "How many camera lenses are not used in taking any photos ?",
            "sql": "select count ( * ) from camera_lens where id not in ( select camera_lens_id from photos )"
        },
        {
            "utterance": "What lenses are those ? | Which kind of information do you want about those lenses ? | What is the name of the lenses not used for taking photos ?",
            "sql": "select name from camera_lens where id not in ( select camera_lens_id from photos )"
        },
        {
            "utterance": "What is the max aperture for the Olympus M.Zuiko Digital ED 45mm f/1.8 ?",
            "sql": "select max_aperture from camera_lens where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'"
    },
    "interaction": [
        {
            "utterance": "What is the location of the bridge named 'Kolob Arch ' or 'Rainbow Bridge ' ?",
            "sql": "select location from bridge where name = value or name = value"
        },
        {
            "utterance": "What is the length of the Kolob Arch",
            "sql": "select length_meters from bridge where name = value"
        },
        {
            "utterance": "What bridge is the longest bridge measured in feet ? | Do you want the name of the longest bridge measured in feet ? | Yes",
            "sql": "select name from bridge where length_feet = ( select max ( length_feet ) from bridge )"
        },
        {
            "utterance": "Where is the Xian ren Qiao ( fairy bridge ) located ?",
            "sql": "select location from bridge where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name"
    },
    "interaction": [
        {
            "utterance": "Can you please show me the names of all male architects by their names lexicographically ?",
            "sql": "select name from architect where gender = value order by name"
        },
        {
            "utterance": "Can you please show me all female architects by their names lexicographically ?",
            "sql": "select name from architect where gender = value order by name"
        },
        {
            "utterance": "can you please show me all the female architects ?",
            "sql": "select name from architect where gender = value"
        },
        {
            "utterance": "List the name , nationality and id of all male architects ordered by their names lexicographically ?",
            "sql": "select name , nationality , id from architect where gender = value order by name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Can I please have a list of architects who have built at least two bridges , or at least one mill ? | What attributes of the architects do you want ? | Can you please tell me the names and the ids of the architects who have built two bridges ?",
            "sql": "select t1 . id , t1 . name from architect as t1 join bridge as t2 on t1 . id = t2 . architect_id group by t1 . id having count ( * ) = value"
        },
        {
            "utterance": "Great . Would you please list the ids , names and genders of architects have built one mill ?",
            "sql": "select t1 . id , t1 . name , t1 . gender from architect as t1 join mill as t2 on t1 . id = t2 . architect_id group by t1 . id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the most common mill type, and how many are there?",
        "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common mill type ?",
            "sql": "select type from mill group by type order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many of those are there ?",
            "sql": "select type , count ( * ) from mill group by type order by count ( * ) desc limit value"
        },
        {
            "utterance": "What years were each of those built ?",
            "sql": "select built_year from mill where type = ( select type from mill group by type order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 4,
    "final": {
        "utterance": "How many architects haven't built a mill before year 1850?",
        "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );"
    },
    "interaction": [
        {
            "utterance": "What is the nationality of Zaha Hadid ?",
            "sql": "select nationality from architect where name = value"
        },
        {
            "utterance": "What is the gender of Frank Gehry ?",
            "sql": "select gender from architect where name = value"
        },
        {
            "utterance": "What is the built year of architect id 2 ?",
            "sql": "select built_year from mill where architect_id = value"
        },
        {
            "utterance": "What is the location of id 3 ?",
            "sql": "select location from mill where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the id, name and nationality of the architect who built most mills?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "CAN YOU GIVE ME THE LIST OF architect NAME",
            "sql": "select name from architect"
        },
        {
            "utterance": "GREAT , CAN YOU GIVE ME THE DETAILS OF AMERICAN ARCHITECT NAMES",
            "sql": "select * from architect where nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80"
    },
    "interaction": [
        {
            "utterance": "How long is the Fairy Bridge ?",
            "sql": "select length_meters from bridge where name = value"
        },
        {
            "utterance": "Can you find the bridge name Xian Ren Qiao ?",
            "sql": "select * from bridge where name = value"
        },
        {
            "utterance": "Do you know who the architect is for that bridge ?",
            "sql": "select * from bridge as t1 join architect as t2 on t1 . architect_id = t2 . id where t1 . name = value"
        },
        {
            "utterance": "What other bridges did Wright architect ?",
            "sql": "select * from bridge as t1 join architect as t2 on t1 . architect_id = t2 . id where t2 . name = value and t1 . name ! = value"
        },
        {
            "utterance": "Do you know the mills built by architects who also built a bridge longer than 80 meters ?",
            "sql": "select * from mill as t1 join architect as t2 on t1 . architect_id = t2 . id join bridge as t3 on t3 . architect_id = t2 . id where t3 . length_meters > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the ids and names of the architects who built at least 3 bridges ?",
        "sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "How many bridges was built by Frank Lloyd Wright ?",
            "sql": "select count ( * ) from architect as t1 join bridge as t2 on t1 . id = t2 . architect_id where t1 . name = value"
        },
        {
            "utterance": "How many bridges was built by Frank Gehry ?",
            "sql": "select count ( * ) from architect as t1 join bridge as t2 on t1 . id = t2 . architect_id where t1 . name = value"
        },
        {
            "utterance": "Who was the builder of Xian Ren Qiao ( Fairy Bridge ) ?",
            "sql": "select t1 . name from architect as t1 join bridge as t2 on t1 . id = t2 . architect_id where t2 . name = value"
        },
        {
            "utterance": "What is the name of id 2 ?",
            "sql": "select name from architect where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the id, name and nationality of the architect who built most mills?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me the name of the architect who built the most mills ?",
            "sql": "select t1 . name from architect as t1 join mill as t2 on t1 . id = t2 . architect_id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Awesome ! Can you update this list to also include the architect ID and nationality of this individual ?",
            "sql": "select t1 . id , t1 . name , t1 . nationality from architect as t1 join mill as t2 on t1 . id = t2 . architect_id group by t1 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Thank you ! Can you please show me a list of all of the mill names that were built by Frank Lloyd Wright ?",
            "sql": "select t2 . name from architect as t1 join mill as t2 on t1 . id = t2 . architect_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the distinct types of mills that are built by American or Canadian architects?",
        "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'"
    },
    "interaction": [
        {
            "utterance": "How many mills are built by American architects ?",
            "sql": "select count ( * ) from mill as t1 join architect as t2 on t1 . architect_id = t2 . id where t2 . nationality = value"
        },
        {
            "utterance": "Hmm , I also want to know how many mills are built by Canadian architects .",
            "sql": "select count ( * ) from mill as t1 join architect as t2 on t1 . architect_id = t2 . id where t2 . nationality = value"
        },
        {
            "utterance": "What are the distinct type of mills that are built by American or Canadian architects ?",
            "sql": "select distinct t1 . type from mill as t1 join architect as t2 on t1 . architect_id = t2 . id where t2 . nationality = value or t2 . nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the tourist attractions that can be accessed by bus or walk ?",
            "sql": "select name from tourist_attractions where how_to_get_there = value or how_to_get_there = value"
        },
        {
            "utterance": "What are their opening hours , please ?",
            "sql": "select name , opening_hours from tourist_attractions where how_to_get_there = value or how_to_get_there = value"
        },
        {
            "utterance": "What are the names of the tourist attractions that can be accessed by shuttle ?",
            "sql": "select name from tourist_attractions where how_to_get_there = value"
        },
        {
            "utterance": "What are their opening hours ?",
            "sql": "select name , opening_hours from tourist_attractions where how_to_get_there = value"
        },
        {
            "utterance": "What are the location ids of those ?",
            "sql": "select name , location_id from tourist_attractions where how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""
    },
    "interaction": [
        {
            "utterance": "What is the name of photo ID 280",
            "sql": "select name from photos where photo_id = value"
        },
        {
            "utterance": "What is the description of game2 ?",
            "sql": "select description from photos where name = value"
        },
        {
            "utterance": "What is the tourist attraction id of game2",
            "sql": "select tourist_attraction_id from photos where name = value"
        },
        {
            "utterance": "What is game2 tourist attraction name ?",
            "sql": "select t2 . name from photos as t1 join tourist_attractions as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the details of the shops that can be accessed by walk?",
        "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "how many shops are there ?",
            "sql": "select count ( * ) from shops"
        },
        {
            "utterance": "what kinds of shops are they ?",
            "sql": "select shop_details from shops"
        },
        {
            "utterance": "Can any one of them be accessed by bus ?",
            "sql": "select t1 . shop_id from shops as t1 join tourist_attractions as t2 on t1 . shop_id = t2 . tourist_attraction_id where t2 . how_to_get_there = value"
        },
        {
            "utterance": "how about by walk ?",
            "sql": "select t1 . shop_id from shops as t1 join tourist_attractions as t2 on t1 . shop_id = t2 . tourist_attraction_id where t2 . how_to_get_there = value"
        },
        {
            "utterance": "What kind of shop is that ?",
            "sql": "select t1 . shop_details from shops as t1 join tourist_attractions as t2 on t1 . shop_id = t2 . tourist_attraction_id where t2 . how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 3,
    "final": {
        "utterance": "How many tourists did not make any visit?",
        "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
    },
    "interaction": [
        {
            "utterance": "How many tourists were there total ?",
            "sql": "select count ( * ) from visitors"
        },
        {
            "utterance": "How many tourist attractions ?",
            "sql": "select count ( distinct tourist_attraction_id ) from visits"
        },
        {
            "utterance": "How many tourists visited more than one tourist attraction ?",
            "sql": "select count ( * ) from ( select * from visits as t1 join visitors as t2 on t1 . tourist_id = t2 . tourist_id group by t1 . tourist_id having count ( * ) > value )"
        },
        {
            "utterance": "How many tourists did n't visit any tourist attractions ?",
            "sql": "select count ( * ) from visitors where tourist_id not in ( select tourist_id from visits )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all the tourist attractions ?",
            "sql": "select name from tourist_attractions"
        },
        {
            "utterance": "Hmm , I want to know the names of the tourist attractions that can be reached by bus .",
            "sql": "select name from tourist_attractions where how_to_get_there = value"
        },
        {
            "utterance": "Can you also tell me the name of the tourist attraction that is at address 254 Ottilie Junction ?",
            "sql": "select t2 . name from locations as t1 join tourist_attractions as t2 on t1 . location_id = t2 . location_id where t1 . address = value"
        },
        {
            "utterance": "Can you list the location names of the tourist attractions that can be reached by bus ?",
            "sql": "select t1 . location_name from locations as t1 join tourist_attractions as t2 on t1 . location_id = t2 . location_id where t2 . how_to_get_there = value"
        },
        {
            "utterance": "Can you list the location addresses ?",
            "sql": "select t1 . address from locations as t1 join tourist_attractions as t2 on t1 . location_id = t2 . location_id where t2 . how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""
    },
    "interaction": [
        {
            "utterance": "What are the tourist attractions available ? | Did you mean to show you all the attractions ? | Yes , what are their names ?",
            "sql": "select distinct ( name ) from tourist_attractions"
        },
        {
            "utterance": "Which attractions did Vincent go to ?",
            "sql": "select * from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value"
        },
        {
            "utterance": "Which attractions did Vivian visit ?",
            "sql": "select * from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value"
        },
        {
            "utterance": "What are the names of the other tourist ?",
            "sql": "select tourist_details from visitors where tourist_details ! = value and tourist_details! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 6,
    "final": {
        "utterance": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the tourist attractions ' names ?",
            "sql": "select distinct name from tourist_attractions"
        },
        {
            "utterance": "Can you show me the ids for all these attractions ? | Do you mean Tourist Attraction IDs ? | yes",
            "sql": "select name , tourist_attraction_id from tourist_attractions"
        },
        {
            "utterance": "In addition , can you also show me the corresponding number of visits in the same list ?",
            "sql": "select t1 . name , t2 . tourist_attraction_id , count ( * ) from tourist_attractions as t1 join visits as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id group by t2 . tourist_attraction_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
    },
    "interaction": [
        {
            "utterance": "What are the visit date of the visitor whose detail is `` Vincent '' ?",
            "sql": "select t2 . visit_date from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id where t1 . tourist_details = value"
        },
        {
            "utterance": "What is his tourist ID ?",
            "sql": "select t1 . tourist_id from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id where t1 . tourist_details = value"
        },
        {
            "utterance": "What is his visit details ?",
            "sql": "select t2 . visit_details from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id where t1 . tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
    },
    "interaction": [
        {
            "utterance": "Which places did Alison visit",
            "sql": "select t1 . name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value"
        },
        {
            "utterance": "And which of those did Rosalind not visit",
            "sql": "select t1 . name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value except select t1 . name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names and ids of tourist attractions that are visited at least two times.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all the names and ids for all tourist attractions ?",
            "sql": "select name , tourist_attraction_id from tourist_attractions"
        },
        {
            "utterance": "Great ! Can you filter this list to show only the names and ids for tourist attractions that were visited 2 or more times ?",
            "sql": "select t1 . name , t2 . tourist_attraction_id from tourist_attractions as t1 join visits as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id group by t2 . tourist_attraction_id having count ( * ) > = value"
        },
        {
            "utterance": "Great ! Can you update this list to show how many times each tourist attraction was visited ?",
            "sql": "select t1 . name , count ( * ) from tourist_attractions as t1 join visits as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id group by t2 . tourist_attraction_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""
    },
    "interaction": [
        {
            "utterance": "Hello , can you tell me the tourist attraction id for the photo name `` game1 '' ?",
            "sql": "select t2 . tourist_attraction_id from photos as t1 join tourist_attractions as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id where t1 . name = value"
        },
        {
            "utterance": "Can you tell me the name for this attraction as well ?",
            "sql": "select t2 . name from photos as t1 join tourist_attractions as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id where t1 . name = value"
        },
        {
            "utterance": "How about how to get there ?",
            "sql": "select t2 . how_to_get_there from photos as t1 join tourist_attractions as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id where t1 . name = value"
        },
        {
            "utterance": "I need the opening hours as well please .",
            "sql": "select t2 . opening_hours from photos as t1 join tourist_attractions as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id where t1 . name = value"
        },
        {
            "utterance": "What about the other details ?",
            "sql": "select t2 . other_details from photos as t1 join tourist_attractions as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the names and ids of tourist attractions that are visited at most once.",
        "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the tourist attractions that have only been visited once ?",
            "sql": "select t1 . name from tourist_attractions as t1 join visits as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id group by t2 . tourist_attraction_id having count ( * ) = value"
        },
        {
            "utterance": "What are the ids of those ?",
            "sql": "select t1 . tourist_attraction_id from tourist_attractions as t1 join visits as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id group by t2 . tourist_attraction_id having count ( * ) = value"
        },
        {
            "utterance": "What are the opening hours of those attractions ?",
            "sql": "select t1 . opening_hours from tourist_attractions as t1 join visits as t2 on t1 . tourist_attraction_id = t2 . tourist_attraction_id group by t2 . tourist_attraction_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 12,
    "final": {
        "utterance": "How many tourists did not make any visit?",
        "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
    },
    "interaction": [
        {
            "utterance": "What is the number of tourists who did n't make any visit ?",
            "sql": "select count ( * ) from visitors where tourist_id not in ( select tourist_id from visits )"
        },
        {
            "utterance": "What are their details ?",
            "sql": "select tourist_details from visitors where tourist_id not in ( select tourist_id from visits )"
        },
        {
            "utterance": "What are the details of the tourist who had the earliest visit ?",
            "sql": "select t1 . tourist_details from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id order by visit_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""
    },
    "interaction": [
        {
            "utterance": "Hi , what are some tourist attractions that tourist visit ? | do you want the name of the tourist attractions that tourist visit ? | Yes please .",
            "sql": "select t1 . name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id"
        },
        {
            "utterance": "When did they visit parking ?",
            "sql": "select t3 . visit_date from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value union select t3 . visit_date from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value"
        },
        {
            "utterance": "How did they get to parking ?",
            "sql": "select t1 . name , t3 . visit_date , t1 . how_to_get_there from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value union select t1 . name , t3 . visit_date , t1 . how_to_get_there from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1 . tourist_attraction_id = t3 . tourist_attraction_id and t2 . tourist_id = t3 . tourist_id where t2 . tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the description and code of the attraction type most tourist attractions belong to.",
        "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What attraction type do most tourist attractions belong to ? | Did you want to know the attraction type that most tourist attractions belong to ? code or description ? | Yes , can you give me the codes please ?",
            "sql": "select t2 . attraction_type_code from ref_attraction_types as t1 join tourist_attractions as t2 on t1 . attraction_type_code = t2 . attraction_type_code group by t2 . attraction_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is its description ? | Did you also want to konw the description the attraction type most tourist attractions belong to ? | yes",
            "sql": "select t1 . attraction_type_description from ref_attraction_types as t1 join tourist_attractions as t2 on t1 . attraction_type_code = t2 . attraction_type_code group by t2 . attraction_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "List the names of the attractions which belong to gallery type | Did you mean all the names ? | yes",
            "sql": "select t2 . name from ref_attraction_types as t1 join tourist_attractions as t2 on t1 . attraction_type_code = t2 . attraction_type_code where attraction_type_description = value"
        },
        {
            "utterance": "How many gallery type attractions are there ? | Can you give more info about this ? | How many attractions belong to gallery type ?",
            "sql": "select count ( * ) from ref_attraction_types as t1 join tourist_attractions as t2 on t1 . attraction_type_code = t2 . attraction_type_code where attraction_type_description = value"
        },
        {
            "utterance": "What are the opening hours of the haunted mansion ?",
            "sql": "select opening_hours from tourist_attractions where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the star rating descriptions of the hotels with price above 10000?",
        "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000"
    },
    "interaction": [
        {
            "utterance": "How many hotels have a price of over 10000 ?",
            "sql": "select count ( * ) from hotels where price_range > value"
        },
        {
            "utterance": "What are the maximum number of stars a hotel with price above 10000 can get ?",
            "sql": "select max ( star_rating_code ) from hotels where price_range > value"
        },
        {
            "utterance": "What are the star rating descriptions of these hotels ? | You mean the hotels with price above 10000 ? | Yes . The ones we 've been talking about .",
            "sql": "select t2 . star_rating_description from hotels as t1 join ref_hotel_star_ratings as t2 on t1 . star_rating_code = t2 . star_rating_code where t1 . price_range > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the transportation method most people choose to get to tourist attractions.",
        "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the location ID of the Tourist Attraction ID 2113 ?",
            "sql": "select location_id from tourist_attractions where tourist_attraction_id = value"
        },
        {
            "utterance": "Show the transportation method least people choose to get to tourist attractions .",
            "sql": "select how_to_get_there from tourist_attractions group by how_to_get_there order by count ( * ) limit value"
        },
        {
            "utterance": "Show the transportation method most people choose to get to tourist attractions ?",
            "sql": "select how_to_get_there from tourist_attractions group by how_to_get_there order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the transportation method most people choose to get to tourist attractions.",
        "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of where i can go on bus ? | do you want the id of location or tourist attraction or the name ? | yes",
            "sql": "select tourist_attraction_id , location_id , name from tourist_attractions where how_to_get_there = value"
        },
        {
            "utterance": "can you show me a list of location id ?",
            "sql": "select location_id from tourist_attractions"
        },
        {
            "utterance": "i want to learn attraction type code ?",
            "sql": "select location_id , attraction_type_code from tourist_attractions"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
    },
    "interaction": [
        {
            "utterance": "Thanks . What is the visit details of the visitor whose detail is Vincent ?",
            "sql": "select t2 . visit_details from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id where t1 . tourist_details = value"
        },
        {
            "utterance": "What about the visit dates ?",
            "sql": "select t2 . visit_date from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id where t1 . tourist_details = value"
        },
        {
            "utterance": "Can you show me dates of all visits before the year 2013 only ?",
            "sql": "select visit_date from visits where visit_date < value"
        },
        {
            "utterance": "What are the visit date and details of the visitor whose detail is Toney ?",
            "sql": "select t2 . visit_date , t2 . visit_details from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id where t1 . tourist_details = value"
        },
        {
            "utterance": "What about for Graciela ?",
            "sql": "select t2 . visit_date , t2 . visit_details from visitors as t1 join visits as t2 on t1 . tourist_id = t2 . tourist_id where t1 . tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of the tourist attractions that are walking distance ? | do you want to just return their names\uff1f | Ah yes ! For now could you please return both the tourist attraction id and the name ?",
            "sql": "select name , tourist_attraction_id from tourist_attractions where how_to_get_there = value"
        },
        {
            "utterance": "Thank you could you also add to this list any tourist attractions located at 660 Shea Crescent ?",
            "sql": "select t2 . name , t2 . tourist_attraction_id from locations as t1 join tourist_attractions as t2 on t1 . location_id = t2 . location_id where t1 . address = value or t2 . how_to_get_there = value"
        },
        {
            "utterance": "Thank you very much ! Could you add the Opening Hours to that list for each of the tourist attractions ?",
            "sql": "select t2 . name , t2 . tourist_attraction_id , t2 . opening_hours from locations as t1 join tourist_attractions as t2 on t1 . location_id = t2 . location_id where t1 . address = value or t2 . how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show me the name of instructors ? | Here is the table of first and last names of faculties . | How many instructors are teaching top 3 number of courses ?",
            "sql": "select count ( * ) from ( select * from course as t1 join faculty as t2 on t1 . instructor = t2 . facid group by t1 . instructor order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Show the first and last names of them",
            "sql": "select t2 . fname , t2 . lname from course as t1 join faculty as t2 on t1 . instructor = t2 . facid group by t1 . instructor order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the max and min grade point for all letter grade.",
        "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"
    },
    "interaction": [
        {
            "utterance": "List grade points by letter grade ?",
            "sql": "select gradepoint , lettergrade from gradeconversion"
        },
        {
            "utterance": "List max of each grade for all letter grades ?",
            "sql": "select max ( gradepoint ) from gradeconversion"
        },
        {
            "utterance": "The max for each letter grade ?",
            "sql": "select lettergrade , max ( gradepoint ) from gradeconversion group by lettergrade"
        },
        {
            "utterance": "List the min grade point for each letter grade ?",
            "sql": "select min ( gradepoint ) , lettergrade from gradeconversion group by lettergrade"
        },
        {
            "utterance": "Find the min grade point for all letter grade ?",
            "sql": "select min ( gradepoint ) from gradeconversion"
        },
        {
            "utterance": "Find the max and min grade point for all letter grade ?",
            "sql": "select max ( gradepoint ) , min ( gradepoint ) from gradeconversion"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the name of courses that have at least five enrollments?",
        "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "What is the grade of CID 550.681 ? | Did you mean the grades of students who enrolled in the course with CID 550.681 ? | YES",
            "sql": "select grade from enrolled_in where cid = value"
        },
        {
            "utterance": "How many hours computer literacy course in a week ?",
            "sql": "select hours from course where cname = value"
        },
        {
            "utterance": "In which day of a week the course introduction to computer science is taught ?",
            "sql": "select days from course where cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of the department that has no students minored in?",
        "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO"
    },
    "interaction": [
        {
            "utterance": "which dno has no stuid associated with it ?",
            "sql": "select dno from department where dno not in ( select dno from minor_in )"
        },
        {
            "utterance": "what are the dname 's of those DNO 's ?",
            "sql": "select dname from department where dno not in ( select dno from minor_in )"
        },
        {
            "utterance": "sort the department names alphabetically",
            "sql": "select dname from department where dno not in ( select dno from minor_in ) order by dname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the last names of faculties in building Barton in alphabetic order.",
        "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname"
    },
    "interaction": [
        {
            "utterance": "How many faculty members are in building Barton ?",
            "sql": "select count ( * ) from faculty where building = value"
        },
        {
            "utterance": "Please list the faculty members in building Barton .",
            "sql": "select * from faculty where building = value"
        },
        {
            "utterance": "Can you please get just their last names ?",
            "sql": "select lname from faculty where building = value"
        },
        {
            "utterance": "Of the faculty members in building Barton , how many are in each rank ?",
            "sql": "select rank , count ( * ) from faculty where building = value group by rank"
        },
        {
            "utterance": "Can you please list the last names of the faculty in Barton one more time , in alphabetical order ?",
            "sql": "select lname from faculty where building = value order by lname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 5,
    "final": {
        "utterance": "Which building does the instructor who teaches the most number of courses live in?",
        "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "* I have left the chat *",
            "sql": "select room from faculty where rank = value"
        },
        {
            "utterance": "what is the first name of the instructor who teaches the least number of courses ?",
            "sql": "select t2 . fname from course as t1 join faculty as t2 on t1 . instructor = t2 . facid group by t1 . instructor order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the max and min grade point for all letter grade.",
        "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"
    },
    "interaction": [
        {
            "utterance": "What is the highest grade point ?",
            "sql": "select max ( gradepoint ) from gradeconversion"
        },
        {
            "utterance": "What is the highest grade point for each letter grade ?",
            "sql": "select lettergrade , max ( gradepoint ) from gradeconversion group by lettergrade"
        },
        {
            "utterance": "Can you show both the highest and lowest grade point for each letter grade ?",
            "sql": "select lettergrade , max ( gradepoint ) , min ( gradepoint ) from gradeconversion group by lettergrade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the rooms of faculties with rank professor who live in building NEB.",
        "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "Room and phone no . of id 1121 ?",
            "sql": "select room , phone from faculty where facid = value"
        },
        {
            "utterance": "Provide the rooms of faculties with rank professor who live in building NEB ?",
            "sql": "select room from faculty where rank = value and building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140"
    },
    "interaction": [
        {
            "utterance": "What are the first names of the students that minor in the department with DNO 140 ?",
            "sql": "select t2 . fname from minor_in as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . dno = value"
        },
        {
            "utterance": "What are the last names of the students that minor in the department with DNO 140 ?",
            "sql": "select t2 . lname from minor_in as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . dno = value"
        },
        {
            "utterance": "What are the ages of the students with the last name Lee ?",
            "sql": "select age from student where lname = value"
        },
        {
            "utterance": "What are the student ids of the students with the last name Smith ?",
            "sql": "select stuid from student where lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the last names of faculties who are members of computer science department.",
        "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\""
    },
    "interaction": [
        {
            "utterance": "what is the last names of faculties who are members of computer science department ?",
            "sql": "select t2 . lname from department as t1 join faculty as t2 on t1 . dno = t3 . dno join member_of as t3 on t2 . facid = t3 . facid where t1 . dname = value"
        },
        {
            "utterance": "what is the rank for Goodrich | Goodrich is the last name , right ? | yes",
            "sql": "select rank from faculty where lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the first names of students whose first names contain letter \"a\".",
        "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select lname , fname from student"
        },
        {
            "utterance": "Can I see a list of students who 's first name contains letter `` a '' ?",
            "sql": "select distinct fname from student where fname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the first names of faculties of rank Professor in alphabetic order.",
        "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname"
    },
    "interaction": [
        {
            "utterance": "what is the rank of Mark | Do you mean the rank of the faculty whose fname is Mark ? | exactly",
            "sql": "select rank from faculty where fname = value"
        },
        {
            "utterance": "how many faculty are presented on the table",
            "sql": "select count ( * ) from faculty"
        },
        {
            "utterance": "what are all the ranks on the table",
            "sql": "select distinct rank from faculty"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the name of courses that have at least five enrollments?",
        "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the course ids and enrollments ?",
            "sql": "select t1 . cid , count ( * ) from course as t1 join enrolled_in as t2 on t1 . cid = t2 . cid group by t2 . cid"
        },
        {
            "utterance": "Which courses have at least five enrollments ?",
            "sql": "select * from course as t1 join enrolled_in as t2 on t1 . cid = t2 . cid group by t2 . cid having count ( * ) > = value"
        },
        {
            "utterance": "Can you show me their ids ?",
            "sql": "select t1 . cid from course as t1 join enrolled_in as t2 on t1 . cid = t2 . cid group by t2 . cid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the full names of faculties who are members of department with department number 520.",
        "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the full names of all faculty who are members of department number 520 ?",
            "sql": "select t1 . fname , t1 . lname from faculty as t1 join member_of as t2 on t1 . facid = t2 . facid where t2 . dno = value"
        },
        {
            "utterance": "What about for department number 600 ?",
            "sql": "select t1 . fname , t1 . lname from faculty as t1 join member_of as t2 on t1 . facid = t2 . facid where t2 . dno = value"
        },
        {
            "utterance": "What is the sex of each of those faculty who are members of the department with department number 600 .",
            "sql": "select t1 . sex from faculty as t1 join member_of as t2 on t1 . facid = t2 . facid where t2 . dno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 14,
    "final": {
        "utterance": "Which building does the instructor who teaches the most number of courses live in?",
        "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me how many instructors there are ?",
            "sql": "select count ( distinct instructor ) from course"
        },
        {
            "utterance": "Can you tell me which instructor teaches the most number of courses ?",
            "sql": "select instructor from course group by instructor order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8"
    },
    "interaction": [
        {
            "utterance": "which student had highest grade | Here are the first and last names of the student who had the highest grade . | which letter grade has the lowest grade point ?",
            "sql": "select distinct t2 . lettergrade from enrolled_in as t1 join gradeconversion as t2 join student as t3 on t1 . grade = t2 . lettergrade and t1 . stuid = t3 . stuid order by t2 . gradepoint limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the first names of students whose first names contain letter \"a\".",
        "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "What are the first names of these students ?",
            "sql": "select fname from student"
        },
        {
            "utterance": "Out of these names , which names contain the letter a ?",
            "sql": "select fname from student where fname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the maximum and minimum grade point of students who live in NYC?",
        "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\""
    },
    "interaction": [
        {
            "utterance": "What is the maximum grade point of all students who live in NYC ?",
            "sql": "select max ( t2 . gradepoint ) from enrolled_in as t1 join gradeconversion as t2 join student as t3 on t1 . grade = t2 . lettergrade and t1 . stuid = t3 . stuid where t3 . city_code = value"
        },
        {
            "utterance": "What is the minimum grade point of all students who live in NYC ?",
            "sql": "select min ( t2 . gradepoint ) from enrolled_in as t1 join gradeconversion as t2 join student as t3 on t1 . grade = t2 . lettergrade and t1 . stuid = t3 . stuid where t3 . city_code = value"
        },
        {
            "utterance": "What about for students who live in HKG ?",
            "sql": "select min ( t2 . gradepoint ) from enrolled_in as t1 join gradeconversion as t2 join student as t3 on t1 . grade = t2 . lettergrade and t1 . stuid = t3 . stuid where t3 . city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "Can you please list the full names of all male faculty members and the buildings they live in ?",
            "sql": "select fname , lname , building from faculty where sex = value"
        },
        {
            "utterance": "Could you narrow that down to just male faculty members in the NEB building ?",
            "sql": "select fname , lname from faculty where sex = value and building = value"
        },
        {
            "utterance": "What rooms do they live in ? Please add it to the table .",
            "sql": "select fname , lname , room from faculty where sex = value and building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the last name of female (sex is F) students in the descending order of age.",
        "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC"
    },
    "interaction": [
        {
            "utterance": "Tell me the last name , age and first name for the student id 1003 and 1004 ...",
            "sql": "select lname , age , fname from student where stuid = value or stuid = value"
        },
        {
            "utterance": "Tell me the sex of 1005 and 1004 and their city code ..",
            "sql": "select sex , city_code from student where stuid = value or stuid = value"
        },
        {
            "utterance": "Tell me total number of Male students and total number of female students ... ..",
            "sql": "select sex , count ( * ) from student group by sex"
        },
        {
            "utterance": "Find the last name of female ( Sex as F ) students in the descending order of age .",
            "sql": "select lname from student where sex = value order by age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the first name of students not enrolled in any course.",
        "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
    },
    "interaction": [
        {
            "utterance": "how many students have not enrolled in any courses",
            "sql": "select count ( * ) from student where stuid not in ( select stuid from enrolled_in )"
        },
        {
            "utterance": "please check the table once more for the name of students not enrolled in any course | Do you need those students ' Fname or Lname ? | i need the students first name",
            "sql": "select fname from student where stuid not in ( select stuid from enrolled_in )"
        },
        {
            "utterance": "list the first name and last name of students with grade A",
            "sql": "select t1 . fname , t1 . lname from student as t1 join enrolled_in as t2 on t1 . stuid = t2 . stuid where t2 . grade = value"
        },
        {
            "utterance": "WHAT IS THE ID OF THESE STUDENTS",
            "sql": "select stuid from enrolled_in where grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "How many male faculties live in NEB ?",
            "sql": "select count ( * ) from faculty where sex = value and building = value"
        },
        {
            "utterance": "What is the rank of Mark Giuliano ?",
            "sql": "select rank from faculty where fname = value and lname = value"
        },
        {
            "utterance": "How many of the faculties are the rank of professors ?",
            "sql": "select count ( * ) from faculty where rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the first name of students not enrolled in any course.",
        "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
    },
    "interaction": [
        {
            "utterance": "How many students are not enrolled in the course ?",
            "sql": "select count ( * ) from student where stuid not in ( select stuid from enrolled_in )"
        },
        {
            "utterance": "What are names of all the students enrolled in the course ? | Do you mean the first name and last name of all the students enrolled in the course ? | Just the first names",
            "sql": "select fname from student where stuid in ( select stuid from enrolled_in )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\""
    },
    "interaction": [
        {
            "utterance": "What department is the Introduction to Computer Science course in ?",
            "sql": "select t2 . dname , t2 . room from course as t1 join department as t2 on t1 . dno = t2 . dno where t1 . cname = value"
        },
        {
            "utterance": "Ok , the class will be in Room 224 . Do you know who the instructor will be ?",
            "sql": "select instructor from course as t1 join department as t2 on t1 . dno = t2 . dno where t1 . cname = value"
        },
        {
            "utterance": "What day is class ?",
            "sql": "select days from course as t1 join department as t2 on t1 . dno = t2 . dno where t1 . cname = value"
        },
        {
            "utterance": "How long is the class ?",
            "sql": "select hours from course as t1 join department as t2 on t1 . dno = t2 . dno where t1 . cname = value"
        },
        {
            "utterance": "Oh ok , how many credit hours is this course worth ?",
            "sql": "select credits from course as t1 join department as t2 on t1 . dno = t2 . dno where t1 . cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "What is the building name of division AS ? | Do you mean DName ? | Nope building name",
            "sql": "select building from department where division = value"
        },
        {
            "utterance": "What is the room number of Chemistry ?",
            "sql": "select room from department where dname = value"
        },
        {
            "utterance": "What is the DPhone of Biology ?",
            "sql": "select dphone from department where dname = value"
        },
        {
            "utterance": "What is the room number of Biology ?",
            "sql": "select room from department where dname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name of the department that has the fewest members.",
        "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many departments are there ?",
            "sql": "select count ( * ) from department"
        },
        {
            "utterance": "Which department is the smallest ? | Do you mean the department that has the fewest members ? | Yes , which department has the fewest members ?",
            "sql": "select t1 . dname from department as t1 join member_of as t2 on t1 . dno = t2 . dno group by t2 . dno order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many members does it have ?",
            "sql": "select count ( * ) from department as t1 join member_of as t2 on t1 . dno = t2 . dno group by t2 . dno order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Report all majors that have less than 3 students.",
        "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "how many Student there",
            "sql": "select count ( * ) from student"
        },
        {
            "utterance": "what is the city code of student id 1001",
            "sql": "select city_code from student where stuid = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select age from student where stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "Find the number of students whose city code is NYC , please ?",
            "sql": "select count ( * ) from student as t1 join voting_record as t2 on t1 . stuid = class_senator_vote where t1 . city_code = value"
        },
        {
            "utterance": "What is the number of students who have class senator votes in the spring election cycle ?",
            "sql": "select count ( * ) from student as t1 join voting_record as t2 on t1 . stuid = class_senator_vote where t2 . election_cycle = value"
        },
        {
            "utterance": "What are the first names and last names of those students ?",
            "sql": "select distinct t1 . fname , t1 . lname from student as t1 join voting_record as t2 on t1 . stuid = class_senator_vote where t2 . election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
    },
    "interaction": [
        {
            "utterance": "What is the first and last name of all students 18 years old who have vice president votes ?",
            "sql": "select distinct t1 . fname , t1 . lname from student as t1 join voting_record as t2 on t1 . stuid = t2 . vice_president_vote where t1 . age = value"
        },
        {
            "utterance": "Ok , what is the first and last name of the student who has president votes ?",
            "sql": "select distinct t1 . fname , t1 . lname from student as t1 join voting_record as t2 on t1 . stuid = t2 . president_vote"
        },
        {
            "utterance": "Ok , and of the students who had President votes how many were males ?",
            "sql": "select distinct count ( * ) from student as t1 join voting_record as t2 on t1 . stuid = t2 . president_vote where t1 . sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the most common major among female (sex is F) students?",
        "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all students .",
            "sql": "select avg ( age ) from student"
        },
        {
            "utterance": "Which student is older than the average age . | Do you want their id or last name or first name ? | The first name for the student older than the average age .",
            "sql": "select fname from student where age > ( select avg ( age ) from student )"
        },
        {
            "utterance": "Give me the count for the students older than the average age .",
            "sql": "select count ( fname ) from student where age > ( select avg ( age ) from student )"
        },
        {
            "utterance": "Give me the count for the students younger than the average age .",
            "sql": "select count ( fname ) from student where age < ( select avg ( age ) from student )"
        },
        {
            "utterance": "Give me the count for all students",
            "sql": "select count ( fname ) from student"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""
    },
    "interaction": [
        {
            "utterance": "Find the distinct last names of all the students who have president votes and whose advisor is 8741",
            "sql": "select distinct t1 . lname from student as t1 join voting_record as t2 on t1 . stuid = president_vote intersect select distinct lname from student where advisor = value"
        },
        {
            "utterance": "Give me the name for the student 1001 | Do you want the last name or first name ? | first name and the last name please",
            "sql": "select lname , fname from student where stuid = value"
        },
        {
            "utterance": "can you give me the students with president vote 1004 | What attributes of that student do you want ? | first and last names please",
            "sql": "select t1 . lname , t1 . fname from student as t1 join voting_record as t2 on t1 . stuid = t2 . stuid where t2 . president_vote = value"
        },
        {
            "utterance": "Can you give me the first and last names for students with Vice President vote 1017",
            "sql": "select t1 . lname , t1 . fname from student as t1 join voting_record as t2 on t1 . stuid = t2 . stuid where t2 . vice_president_vote = value"
        },
        {
            "utterance": "Give me the age for Linda Smith",
            "sql": "select age from student where lname = value and fname = value"
        },
        {
            "utterance": "Give me the names of all the students",
            "sql": "select lname , fname from student"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Which major has the most students?",
        "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which major has the most students ?",
            "sql": "select major from student group by major order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many students are in that major ?",
            "sql": "select count ( * ) from student group by major order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are their names , please ?",
            "sql": "select lname , fname from student where major in ( select major from student group by major order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Who is the advisor for that major ?",
            "sql": "select advisor from student where major = ( select major from student group by major order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Who is the advisor for the major with the second most number of students ?",
            "sql": "select advisor from student where major in ( select major from student group by major order by count ( * ) desc limit value ) and major ! = ( select major from student group by major order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "How many students are voting in the spring election cycle ?",
            "sql": "select count ( * ) from student as t1 join voting_record as t2 on t1 . stuid = secretary_vote where t2 . election_cycle = value"
        },
        {
            "utterance": "How many are females that are voting in the election cycle ? | Did you want the number of females that are voting in the spring election cycle ? | Yes",
            "sql": "select count ( * ) from student as t1 join voting_record as t2 on t1 . stuid = secretary_vote where t1 . sex = value and t2 . election_cycle = value"
        },
        {
            "utterance": "What are the ages of everyone voting in the Spring election cycle ?",
            "sql": "select t1 . age from student as t1 join voting_record as t2 on t1 . stuid = secretary_vote where t2 . election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "how many females have president votes ?",
            "sql": "select count ( * ) from student as t1 join voting_record as t2 on t1 . stuid = t2 . president_vote where t1 . sex = value"
        },
        {
            "utterance": "what are there first and last names ?",
            "sql": "select distinct t1 . fname , t1 . lname from student as t1 join voting_record as t2 on t1 . stuid = t2 . president_vote where t1 . sex = value"
        },
        {
            "utterance": "how many votes did she get ? | Do you mean the total votes in four election or list them separately ? | the total votes",
            "sql": "select sum ( t2 . president_vote ) from student as t1 join voting_record as t2 on t1 . stuid = t2 . president_vote where t1 . sex = value"
        },
        {
            "utterance": "how many of those votes were from the secretary ?",
            "sql": "select sum ( t2 . secretary_vote ) from student as t1 join voting_record as t2 on t1 . stuid = t2 . president_vote where t1 . sex = value"
        },
        {
            "utterance": "how many were from the vice president ?",
            "sql": "select sum ( t2 . vice_president_vote ) from student as t1 join voting_record as t2 on t1 . stuid = t2 . president_vote where t1 . sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the city_code of the city that the most students live in?",
        "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "mention the city code of the city that the most students live .",
            "sql": "select city_code from student group by city_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "Show the name of students",
            "sql": "select lname , fname from student"
        },
        {
            "utterance": "How many of them live in city with code NYC and have secretary votes in the spring election cycle",
            "sql": "select count ( distinct t1 . stuid ) from student as t1 join voting_record as t2 on t1 . stuid = secretary_vote where t1 . city_code = value and t2 . election_cycle = value"
        },
        {
            "utterance": "Show the name of this student",
            "sql": "select t1 . lname , t1 . fname from student as t1 join voting_record as t2 on t1 . stuid = secretary_vote where t1 . city_code = value and t2 . election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Which major has the most students?",
        "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Number of students in each major ?",
            "sql": "select major , count ( * ) from student group by major"
        },
        {
            "utterance": "List of majors ?",
            "sql": "select distinct ( major ) from student"
        },
        {
            "utterance": "Names of students in each major ? | LName or FName ? | LName .",
            "sql": "select major , lname from student"
        },
        {
            "utterance": "What about FName ?",
            "sql": "select major , fname from student"
        },
        {
            "utterance": "Which major has the most number of students ?",
            "sql": "select major from student group by major order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which major has the least ?",
            "sql": "select major from student group by major order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the maximum and minimum age of students with major 600?",
        "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"
    },
    "interaction": [
        {
            "utterance": "How many students have a major of 600 ?",
            "sql": "select count ( * ) from student where major = value"
        },
        {
            "utterance": "What is the age of the oldest of those students ?",
            "sql": "select max ( age ) from student where major = value"
        },
        {
            "utterance": "What about the youngest ?",
            "sql": "select min ( age ) from student where major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the city_code of the city that the most students live in?",
        "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the city code of the city that the most students live in ?",
            "sql": "select city_code from student group by city_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the city code of the city that the least students live in ?",
            "sql": "select city_code from student group by city_code order by count ( * ) limit value"
        },
        {
            "utterance": "What is the average age of all the students ?",
            "sql": "select avg ( age ) from student"
        },
        {
            "utterance": "What are the majors of all the students with sex F ?",
            "sql": "select major from student where sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all body builder names and their associated birth dates ?",
            "sql": "select t2 . name , t2 . birth_date from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Could you filter this list to show only the rows which are associated with body builders whose birthday value contains the work `` January '' ?",
            "sql": "select t2 . name , t2 . birth_date from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id where t2 . birth_date like value"
        },
        {
            "utterance": "Great ! Can you tell me where Jack Campbells birthplace was ?",
            "sql": "select birth_place from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names and origins of people who are not body builders.",
        "sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id"
    },
    "interaction": [
        {
            "utterance": "How about the rest of people ?",
            "sql": "select name , birth_date from people except select t1 . name , t1 . birth_date from people as t1 join body_builder as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "oh , sorry , please show their names and birth places .",
            "sql": "select name , birth_place from people except select t1 . name , t1 . birth_place from people as t1 join body_builder as t2 on t1 . people_id = t2 . people_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the most common birth place of people?",
        "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common birth place of people ?",
            "sql": "select birth_place from people group by birth_place order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the least common birthplace of people ?",
            "sql": "select birth_place from people group by birth_place order by count ( * ) limit value"
        },
        {
            "utterance": "What about the most common ?",
            "sql": "select birth_place from people group by birth_place order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the birth date of Ty Conklin ?",
            "sql": "select birth_place from people where name = value"
        },
        {
            "utterance": "When was he born ?",
            "sql": "select birth_date from people where name = value"
        },
        {
            "utterance": "What is his height ?",
            "sql": "select height from people where name = value"
        },
        {
            "utterance": "Tell me his weight please .",
            "sql": "select weight from people where name = value"
        },
        {
            "utterance": "What are the names of the other people with that weight ?",
            "sql": "select name from people where weight = value and name! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the birth date and birth place of the body builder with the highest total points?",
        "sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which builder has the highest total points ? | Do you want their name or id ? | their name please",
            "sql": "select t2 . name from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id order by t1 . total desc limit value"
        },
        {
            "utterance": "what is his ID ?",
            "sql": "select t2 . name , t2 . people_id from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id order by t1 . total desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the heights of body builders with total score smaller than 315?",
        "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315"
    },
    "interaction": [
        {
            "utterance": "Show me the details of the body builders | Which information would you like to know about the body builders ? | Heights of the body builders",
            "sql": "select t2 . height from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Show me the scores of the body builders | Which score , Snatch , Clean Jerk , or Total ? | Total score",
            "sql": "select t1 . total from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Show me the heights of body builders with total score smaller than 315",
            "sql": "select t2 . height from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id where t1 . total < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the birth places that are shared by at least two people?",
        "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the birth places that are shared by at least two people ?",
            "sql": "select birth_place from people group by birth_place having count ( * ) > = value"
        },
        {
            "utterance": "what is the name of the person who weighs the most ?",
            "sql": "select name from people order by weight desc limit value"
        },
        {
            "utterance": "what is the name of the person who weighs the least ?",
            "sql": "select name from people order by weight asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of body builders whose total score is higher than 300?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300"
    },
    "interaction": [
        {
            "utterance": "how many body builder id are there",
            "sql": "select count ( * ) from body_builder"
        },
        {
            "utterance": "ok , list out the body builder name",
            "sql": "select t2 . name from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "ok , name the body builders whose total score is higher than 250",
            "sql": "select t2 . name from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id where t1 . total > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the body builder with the greatest body weight?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all body builders",
            "sql": "select t2 . name from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Show me the details of weight of the all body builders",
            "sql": "select t2 . weight from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "Show me the greatest weight of the body builder",
            "sql": "select t2 . weight from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id order by t2 . weight desc limit value"
        },
        {
            "utterance": "Show me the name of the body builder with the most weight",
            "sql": "select t2 . name from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id order by t2 . weight desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"
    },
    "interaction": [
        {
            "utterance": "what is the weight of ty conklin",
            "sql": "select weight from people where name = value"
        },
        {
            "utterance": "what is the height of jack campbell",
            "sql": "select height from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 9,
    "final": {
        "utterance": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;"
    },
    "interaction": [
        {
            "utterance": "show me the body builders name .",
            "sql": "select t2 . name from body_builder as t1 join people as t2 on t1 . people_id = t2 . people_id"
        },
        {
            "utterance": "What is the height of Jack Campbell ?",
            "sql": "select height from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the minimum, maximum, and average age for all people.",
        "sql": "SELECT min(age) ,  max(age) ,  avg(age) FROM people"
    },
    "interaction": [
        {
            "utterance": "what is the minimum age of all people",
            "sql": "select min ( age ) from people"
        },
        {
            "utterance": "what is the maximum age for all people",
            "sql": "select max ( age ) from people"
        },
        {
            "utterance": "what is the average age for all people",
            "sql": "select avg ( age ) from people"
        },
        {
            "utterance": "now , list the minimum , maximum and average age for all people",
            "sql": "select min ( age ) , max ( age ) , avg ( age ) from people"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the opening year in whcih at least two churches opened.",
        "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what is the Open Date of Pure Church of Christ ? | Did you mean the open date of the church named Pure Church of Christ ? | yes",
            "sql": "select open_date from church where name = value"
        },
        {
            "utterance": "who organized the Pure Church of Christ ?",
            "sql": "select organized_by from church where name = value"
        },
        {
            "utterance": "what is the ID of the Church of Christ ?",
            "sql": "select church_id from church where name = value"
        },
        {
            "utterance": "which church was organized by Ezra Booth ? | Did you want the name of the church organized by Ezra Booth . | yes",
            "sql": "select name from church where organized_by = value"
        },
        {
            "utterance": "Show the opening year in which at least two churches opened",
            "sql": "select open_date from church group by open_date having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names for all females from Canada having a wedding in year 2016.",
        "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'"
    },
    "interaction": [
        {
            "utterance": "which females had a wedding in 2016 ?",
            "sql": "select t2 . name from wedding as t1 join people as t2 on t1 . female_id = t2 . people_id where t1 . year = value and t2 . is_male = value"
        },
        {
            "utterance": "which females in that list are from canada ?",
            "sql": "select t2 . name from wedding as t1 join people as t2 on t1 . female_id = t2 . people_id where t1 . year = value and t2 . is_male = value and t2 . country = value"
        },
        {
            "utterance": "who are the females in canada ?",
            "sql": "select name from people where country = value and is_male = value"
        },
        {
            "utterance": "who got married in 2016 ?",
            "sql": "select t2 . name from wedding as t1 join people as t2 on t1 . female_id = t2 . people_id or t1 . male_id = t2 . people_id where t1 . year = value"
        },
        {
            "utterance": "who in that list is from canada ?",
            "sql": "select t2 . name from wedding as t1 join people as t2 on t1 . female_id = t2 . people_id or t1 . male_id = t2 . people_id where t1 . year = value and t2 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all church names that have hosted least two weddings.",
        "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all churches please ? | Do you need their names or ids ? | Ah yes ! Can you please provide me with a list containing both ?",
            "sql": "select church_id , name from church"
        },
        {
            "utterance": "Thank you for that ! Could you filter that list to show only the church names and ids of churches that have hosted 2 or more weddings ?",
            "sql": "select t1 . name , t1 . church_id from church as t1 join wedding as t2 on t1 . church_id = t2 . church_id group by t1 . church_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the pair of male and female names in all weddings after year 2014",
        "sql": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014"
    },
    "interaction": [
        {
            "utterance": "Which weddings took place after 2014 ?",
            "sql": "select * from wedding where year > value"
        },
        {
            "utterance": "What are the male names in weddings after 2014 ?",
            "sql": "select t2 . name from wedding as t1 join people as t2 on t1 . male_id = t2 . people_id where t1 . year > value"
        },
        {
            "utterance": "What are the female names in weddings after 2014 ?",
            "sql": "select t3 . name from wedding as t1 join people as t2 on t1 . male_id = t2 . people_id join people as t3 on t1 . female_id = t3 . people_id where t1 . year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the opening year in whcih at least two churches opened.",
        "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What years did two or more churches open in ?",
            "sql": "select open_date from church group by open_date having count ( * ) > = value"
        },
        {
            "utterance": "What is the name of the church that opened the latest ?",
            "sql": "select name from church order by open_date desc limit value"
        },
        {
            "utterance": "What is that church a continuation of ?",
            "sql": "select open_date from church order by open_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and opening year for three churches that opened most recently.",
        "sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names and opening years of the three churches that opened most recently ?",
            "sql": "select name , open_date from church order by open_date desc limit value"
        },
        {
            "utterance": "What are the names and opening years of the three churches that opened the earliest ?",
            "sql": "select name , open_date from church order by open_date asc limit value"
        },
        {
            "utterance": "Who were those churches organized by ?",
            "sql": "select organized_by from church order by open_date asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all church names except for those that had a wedding in year 2015.",
        "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015"
    },
    "interaction": [
        {
            "utterance": "How many churches are there ?",
            "sql": "select count ( * ) from church"
        },
        {
            "utterance": "How many churches had weddings in 2015 ?",
            "sql": "select count ( * ) from church as t1 join wedding as t2 on t1 . church_id = t2 . church_id where t2 . year = value"
        },
        {
            "utterance": "Show all church names except or those that had a wedding in year 2015 .",
            "sql": "select name from church except select t1 . name from church as t1 join wedding as t2 on t1 . church_id = t2 . church_id where t2 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 8,
    "final": {
        "utterance": "How many female people are older than 30 in our record?",
        "sql": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30"
    },
    "interaction": [
        {
            "utterance": "How many women are there ?",
            "sql": "select count ( * ) from people where is_male = value"
        },
        {
            "utterance": "And men ?",
            "sql": "select count ( * ) from people where is_male = value"
        },
        {
            "utterance": "How many people are there over the age of 30 ?",
            "sql": "select count ( * ) from people where age > value"
        },
        {
            "utterance": "How many of them are women ?",
            "sql": "select count ( * ) from people where is_male = value and age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the country where people older than 30 and younger than 25 are from.",
        "sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30"
    },
    "interaction": [
        {
            "utterance": "Show me the country with people younger than 30 ,",
            "sql": "select distinct country from people where age < value"
        },
        {
            "utterance": "Show me a list of countries with people over the age of 30 .",
            "sql": "select distinct country from people where age > value"
        },
        {
            "utterance": "How many males 30 or older are in the Canada",
            "sql": "select count ( * ) from people where age > = value and is_male = value and country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the church names for the weddings of all people older than 30.",
        "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30"
    },
    "interaction": [
        {
            "utterance": "What are all church names ?",
            "sql": "select name from church"
        },
        {
            "utterance": "How about church names for weddings of people older than 30 ?",
            "sql": "select t4 . name from wedding as t1 join people as t2 on t1 . male_id = t2 . people_id join people as t3 on t1 . female_id = t3 . people_id join church as t4 on t4 . church_id = t1 . church_id where t2 . age > value or t3 . age > value"
        },
        {
            "utterance": "What are their opening years ?",
            "sql": "select t4 . name , t4 . open_date from wedding as t1 join people as t2 on t1 . male_id = t2 . people_id join people as t3 on t1 . female_id = t3 . people_id join church as t4 on t4 . church_id = t1 . church_id where t2 . age > value or t3 . age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot"
    },
    "interaction": [
        {
            "utterance": "what players have a overall rating greater than 80 ?",
            "sql": "select * from player_attributes where overall_rating > value"
        },
        {
            "utterance": "of those players how many are right-footed ?",
            "sql": "select count ( * ) from player_attributes where overall_rating > value and preferred_foot = value"
        },
        {
            "utterance": "of the players with an overall rating greater than 80 how many are left-footed ?",
            "sql": "select count ( * ) from player_attributes where overall_rating > value and preferred_foot = value"
        },
        {
            "utterance": "of the players with an overall rating greater than 80 how many are right-footed ?",
            "sql": "select count ( * ) from player_attributes where overall_rating > value and preferred_foot = value"
        },
        {
            "utterance": "could add the right-footed and left-footed players that have an overall rating greater than 80 together ?",
            "sql": "select preferred_foot , count ( * ) from player_attributes where overall_rating > value group by preferred_foot"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please provide me with a list of the player IDs and player names ?",
            "sql": "select player_api_id , player_name from player"
        },
        {
            "utterance": "Can you update this list to show both the heights for each player , as well as each of their overall scores ?",
            "sql": "select t1 . player_api_id , t1 . player_name , t1 . height , t2 . overall_rating from player as t1 join player_attributes as t2 on t1 . player_fifa_api_id = t2 . player_fifa_api_id"
        },
        {
            "utterance": "Thank you ! Can you filter this list to show only the players who have an overall rating higher than 85 ?",
            "sql": "select t1 . player_api_id , t1 . player_name , t1 . height , t2 . overall_rating from player as t1 join player_attributes as t2 on t1 . player_fifa_api_id = t2 . player_fifa_api_id where t2 . overall_rating > value"
        },
        {
            "utterance": "Excellent ! Finally , could you filter this list to show only the players with a height that is greater than 180 cm ?",
            "sql": "select player_api_id from player where height > value intersect select player_api_id from player_attributes where overall_rating > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many left footed players there are ?",
            "sql": "select count ( * ) from player_attributes where preferred_foot = value"
        },
        {
            "utterance": "Holy smokes that 's a lot ! Okay , let 's narrow that down . How many left footed players have a height between 180cm and 190cm ?",
            "sql": "select count ( * ) from ( select player_api_id from player where height > = value and height < = value intersect select player_api_id from player_attributes where preferred_foot = value )"
        },
        {
            "utterance": "Thank you ! Can you please list player ids for all of the left-footed players with heights between 180cm and 190cm ?",
            "sql": "select player_api_id from player where height > = value and height < = value intersect select player_api_id from player_attributes where preferred_foot = value"
        },
        {
            "utterance": "Great ! Can you tell me the name of the player who is the tallest left-footed player ?",
            "sql": "select player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . preferred_foot = value order by height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 3,
    "final": {
        "utterance": "List all player names who have an overall rating higher than the average.",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )"
    },
    "interaction": [
        {
            "utterance": "List all player names who have an overall rating higher than the average .",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . overall_rating > ( select avg ( overall_rating ) from player_attributes )"
        },
        {
            "utterance": "List all player names who have an overall rating lower than the average .",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . overall_rating < ( select avg ( overall_rating ) from player_attributes )"
        },
        {
            "utterance": "How many players have an overall rating lower than the average ?",
            "sql": "select count ( distinct t1 . id ) from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . overall_rating < ( select avg ( overall_rating ) from player_attributes )"
        },
        {
            "utterance": "What is the average height of players that have an overall rating lower than the average ?",
            "sql": "select avg ( t1 . height ) from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . overall_rating < ( select avg ( overall_rating ) from player_attributes )"
        },
        {
            "utterance": "What is the average height of players that have an overall rating higher than the average ?",
            "sql": "select avg ( t1 . height ) from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . overall_rating > ( select avg ( overall_rating ) from player_attributes )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90"
    },
    "interaction": [
        {
            "utterance": "What are the names of people with overall rating between 85 and 90 ? | by people did you mean players ? | yes",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . overall_rating > = value and t2 . overall_rating < = value"
        },
        {
            "utterance": "Of them which are left footed ?",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . preferred_foot = value and t2 . overall_rating > = value and t2 . overall_rating < = value"
        },
        {
            "utterance": "What about the names of right-footed players ?",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id where t2 . preferred_foot = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List the names and birthdays of the top five players in terms of potential.",
        "sql": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "Which 5 players have the highest potential ? | Do you want the names of those players ? | Yes , please .",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id order by potential desc limit value"
        },
        {
            "utterance": "What are their birthdays ?",
            "sql": "select distinct t1 . birthday from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id order by potential desc limit value"
        },
        {
            "utterance": "What are their weights ?",
            "sql": "select distinct t1 . weight from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id order by potential desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Who are the top 3 players in terms of overall rating?",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Who are the top 3 players in terms of overall rating ?",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id order by overall_rating desc limit value"
        },
        {
            "utterance": "Which player scored highest in dribbling ?",
            "sql": "select distinct t1 . player_name from player as t1 join player_attributes as t2 on t1 . player_api_id = t2 . player_api_id order by dribbling desc limit value"
        },
        {
            "utterance": "What is Cristiano Ronaldo 's birthday ?",
            "sql": "select birthday from player where player_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the product name and total order quantity for each product.",
        "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
    },
    "interaction": [
        {
            "utterance": "Can you show the product name and total order quantity of each product please ?",
            "sql": "select t1 . product_name , sum ( t2 . order_quantity ) from products as t1 join order_items as t2 on t1 . product_id = t2 . product_id group by t1 . product_id"
        },
        {
            "utterance": "Could you add the product type codes to the table please ?",
            "sql": "select t1 . product_name , sum ( t2 . order_quantity ) , t1 . product_type_code from products as t1 join order_items as t2 on t1 . product_id = t2 . product_id group by t1 . product_id"
        },
        {
            "utterance": "What is the average product price of all the products ?",
            "sql": "select avg ( product_price ) from products"
        },
        {
            "utterance": "Can you list the product names of all products with prices below the average product price ?",
            "sql": "select product_name from products where product_price < ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "The product ids of all products whose prices are above the average product price are listed .",
            "sql": "select product_name from products where product_price > ( select avg ( product_price ) from products )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name of the customer who has the most orders.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "show all the customers name",
            "sql": "select customer_name from customers"
        },
        {
            "utterance": "what is the customer number of Kayley",
            "sql": "select customer_number from customers where customer_name = value"
        },
        {
            "utterance": "what is the order status code of Sterling",
            "sql": "select t2 . order_status_code from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        },
        {
            "utterance": "show the name of the customer who has the most orders",
            "sql": "select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 2,
    "final": {
        "utterance": "How many products have a price higher than the average?",
        "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "How many products have a price higher than the average ?",
            "sql": "select count ( * ) from products where product_price > ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "Can you give me the product names for these ?",
            "sql": "select product_name from products where product_price > ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "And how many products have a price lower than the average ?",
            "sql": "select count ( * ) from products where product_price < ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "May I have their product names please ?",
            "sql": "select distinct product_name from products where product_price < ( select avg ( product_price ) from products )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the product type codes which have at least two products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Please list all unique Product Names",
            "sql": "select distinct product_name from products"
        },
        {
            "utterance": "Now please list all unique product type codes",
            "sql": "select distinct product_type_code from products"
        },
        {
            "utterance": "now please show the product type codes which have at least two products",
            "sql": "select product_type_code from products group by product_type_code having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please provide me with a list of all of customer IDs in the Customer Address History table ?",
            "sql": "select customer_id from customer_address_history"
        },
        {
            "utterance": "Thank you for that ! Can you update this list to include the associated customer names , customer address city and the date from and date to for each row ?",
            "sql": "select t2 . customer_name , t3 . city , t1 . date_from , t1 . date_to from customer_address_history as t1 join customers as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t1 . address_id = t3 . address_id"
        },
        {
            "utterance": "Great ! Can you tell me which , if any , customers on this list appear more than once ?",
            "sql": "select t2 . customer_name from customer_address_history as t1 join customers as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t1 . address_id = t3 . address_id group by t2 . customer_name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show the names of customers who use Credit Card payment method",
            "sql": "select customer_name from customers where payment_method_code = value"
        },
        {
            "utterance": "Which of those customers have more than 2 orders ?",
            "sql": "select t1 . customer_name from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where t1 . payment_method_code = value group by t1 . customer_id having count ( * ) > value"
        },
        {
            "utterance": "Show me their customer addresses",
            "sql": "select t1 . customer_address from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id where t1 . payment_method_code = value group by t1 . customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 6,
    "final": {
        "utterance": "How many products have a price higher than the average?",
        "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( product_price ) from products"
        },
        {
            "utterance": "What are the product names that have a price higher than the average ?",
            "sql": "select product_name from products where product_price > ( select avg ( product_price ) from products )"
        },
        {
            "utterance": "How many products have a price higher than the average ?",
            "sql": "select count ( * ) from products where product_price > ( select avg ( product_price ) from products )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names and phones of customers who do not have address information.",
        "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all customers who do n't have any address information , please ?",
            "sql": "select customer_name from customers where customer_id not in ( select customer_id from customer_address_history )"
        },
        {
            "utterance": "Can you find their addresses and add them to the chart ?",
            "sql": "select customer_name , customer_address from customers where customer_id not in ( select customer_id from customer_address_history )"
        },
        {
            "utterance": "Can you list the customer names for all the customers that do n't have anything listed under the customer_address column ?",
            "sql": "select customer_name from customers where customer_id not in ( select customer_id from customer_address_history )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the name and phone of the customer with the most ordered product quantity?",
        "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What was the product id for the customer that ordered the most product quantity ?",
            "sql": "select t1 . customer_id from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t3 . order_id = t2 . order_id group by t1 . customer_id order by sum ( t3 . order_quantity ) desc limit value"
        },
        {
            "utterance": "What are the name and phone of the customer with the most ordered product quantity ?",
            "sql": "select t1 . customer_name , t1 . customer_phone from customers as t1 join customer_orders as t2 on t1 . customer_id = t2 . customer_id join order_items as t3 on t3 . order_id = t2 . order_id group by t1 . customer_id order by sum ( t3 . order_quantity ) desc limit value"
        },
        {
            "utterance": "What is the address for the customer Cleo ?",
            "sql": "select customer_address from customers where customer_name = value"
        },
        {
            "utterance": "What is the email for Customer name of Cleo with phone number 1-202-928-5395 ?",
            "sql": "select customer_email from customers where customer_name = value and customer_phone = value"
        },
        {
            "utterance": "What is the customer number for customer name Cleo ?",
            "sql": "select customer_number from customers where customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of the building that has the most company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which company has the most buildings ? | Do you want to the name of the company ? | Yes and the company ID .",
            "sql": "select name , id from companies where id = ( select company_id from office_locations group by company_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What is the building ID that has the most company offices ?",
            "sql": "select t2 . id from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id group by t1 . building_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of building with ID 3 ?",
            "sql": "select name from buildings where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the headquarters shared by more than two companies.",
        "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Which company has its headquarter in the US ? | Did you mean to ask for the companies with headquarters in USA ? | yes .",
            "sql": "select name from companies where headquarters = value"
        },
        {
            "utterance": "What is the industry of the company named General Electric ?",
            "sql": "select industry from companies where name = value"
        },
        {
            "utterance": "How much profit did it make ?",
            "sql": "select profits_billion from companies where name = value"
        },
        {
            "utterance": "Which company has the highest amount of assets ?",
            "sql": "select name from companies order by assets_billion desc limit value"
        },
        {
            "utterance": "how much is it worth ? | Did you mean to ask for the market value in billions for BNP Paribas ? | yes",
            "sql": "select market_value_billion from companies where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the stories of the building with the largest height.",
        "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which building is the highest ?",
            "sql": "select name from buildings order by height desc limit value"
        },
        {
            "utterance": "How tall is the Torre Reforma ?",
            "sql": "select stories from buildings where name = value"
        },
        {
            "utterance": "How many stories does the highest building have ?",
            "sql": "select stories from buildings order by height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
    },
    "interaction": [
        {
            "utterance": "How many companies have an industry of banking ?",
            "sql": "select count ( * ) from companies where industry = value"
        },
        {
            "utterance": "How many do n't have a banking industry ?",
            "sql": "select count ( * ) from companies where industry ! = value"
        },
        {
            "utterance": "What are the total sales of those companies ?",
            "sql": "select sum ( sales_billion ) from companies where industry ! = value"
        },
        {
            "utterance": "What is the maximum sales of those companies ?",
            "sql": "select max ( sales_billion ) from companies where industry ! = value"
        },
        {
            "utterance": "What is the minimum sales ?",
            "sql": "select min ( sales_billion ) from companies where industry ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the stories of the building with the largest height.",
        "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the building with the largest height ?",
            "sql": "select name from buildings order by height desc limit value"
        },
        {
            "utterance": "How many stories does that building have ?",
            "sql": "select stories from buildings order by height desc limit value"
        },
        {
            "utterance": "What is the height of that building ?",
            "sql": "select height from buildings order by height desc limit value"
        },
        {
            "utterance": "What city is that building in ?",
            "sql": "select city from buildings order by height desc limit value"
        },
        {
            "utterance": "How many stories does the building with the smallest height have ?",
            "sql": "select stories from buildings order by height limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of the buildings that have more than one company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show the names of the buildings that have more than one company offices .",
            "sql": "select t2 . name from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id group by t1 . building_id having count ( * ) > value"
        },
        {
            "utterance": "Can you tell me which companies are located at the Torre KOI building ? | What attributes of these companies do you want to know ? | The names of the companies that are present in that building .",
            "sql": "select t3 . name from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id where t2 . name = value"
        },
        {
            "utterance": "What other buildings is JPMorgan Chase also located in ?",
            "sql": "select t2 . name from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id where t3 . name = value and t2 . name ! = value"
        },
        {
            "utterance": "Does Torre Mitkah have an HSBC located in it ?",
            "sql": "select * from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id where t3 . name = value and t2 . name = value"
        },
        {
            "utterance": "What is the name of company with the company id 4 ?",
            "sql": "select name from companies where id = value"
        },
        {
            "utterance": "ExxonMobil is located in Punto Chapultepec , correct ?",
            "sql": "select * from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id where t3 . name = value and t2 . name = value"
        },
        {
            "utterance": "Which buildings have a General Electric then ?",
            "sql": "select t2 . name from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id where t3 . name = value"
        },
        {
            "utterance": "What other companies are located in Corporativo BBVA Bancomer ?",
            "sql": "select t3 . name from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id where t2 . name = value and t3 . name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name of the building that has the most company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of building IDs",
            "sql": "select count ( id ) from buildings"
        },
        {
            "utterance": "add a column for company id",
            "sql": "select count ( * ) , t1 . company_id , t1 . building_id from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id group by t1 . building_id"
        },
        {
            "utterance": "list the number of unique building ids for each company id",
            "sql": "select t1 . company_id , count ( distinct t1 . building_id ) from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id group by t1 . company_id"
        },
        {
            "utterance": "add a column for company name",
            "sql": "select t1 . company_id , t3 . name , count ( distinct t1 . building_id ) from office_locations as t1 join buildings as t2 on t1 . building_id = t2 . id join companies as t3 on t1 . company_id = t3 . id group by t1 . company_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 7,
    "final": {
        "utterance": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC"
    },
    "interaction": [
        {
            "utterance": "Show the names of the buildings",
            "sql": "select name from buildings"
        },
        {
            "utterance": "Now show the names of building whose status is on-hold",
            "sql": "select name from buildings where status = value"
        },
        {
            "utterance": "names of buildings whose status is on-hold in ascending order | In what ascending order ? | In ascending order of stories",
            "sql": "select name from buildings where status = value order by stories asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
    },
    "interaction": [
        {
            "utterance": "what is the highest profits of companies",
            "sql": "select max ( profits_billion ) from companies"
        },
        {
            "utterance": "what is the market value of JPMorgan Chase",
            "sql": "select market_value_billion from companies where name = value"
        },
        {
            "utterance": "what is name of headquarters on General Electric",
            "sql": "select headquarters from companies where name = value"
        },
        {
            "utterance": "which company is highest assets value",
            "sql": "select name from companies order by assets_billion desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the party that has the most people.",
        "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of people names ?",
            "sql": "select name from people"
        },
        {
            "utterance": "can you show me the oldest one ?",
            "sql": "select name from people order by age desc limit value"
        },
        {
            "utterance": "can you show me average of ages ?",
            "sql": "select avg ( age ) from people"
        },
        {
            "utterance": "Show the party that has the most people",
            "sql": "select party from people group by party order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the people who have been on the affirmative side of debates ?",
            "sql": "select t2 . name from debate_people as t1 join people as t2 on t1 . affirmative = t2 . people_id group by t2 . name"
        },
        {
            "utterance": "What are their party affiliations ?",
            "sql": "select t2 . party from debate_people as t1 join people as t2 on t1 . affirmative = t2 . people_id group by t2 . name"
        },
        {
            "utterance": "How many debates did they win total ?",
            "sql": "select count ( * ) from debate_people where if_affirmative_win = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200"
    },
    "interaction": [
        {
            "utterance": "Can you show me the names of the people who were on the affirmative side of debates with an audience bigger than 200 ?",
            "sql": "select t3 . name from debate_people as t1 join debate as t2 on t1 . debate_id = t2 . debate_id join people as t3 on t1 . affirmative = t3 . people_id where t2 . num_of_audience > value"
        },
        {
            "utterance": "Of those three , who is the oldest ?",
            "sql": "select t3 . name from debate_people as t1 join debate as t2 on t1 . debate_id = t2 . debate_id join people as t3 on t1 . affirmative = t3 . people_id where t2 . num_of_audience > value order by t3 . age desc limit value"
        },
        {
            "utterance": "What party affiliation does James Humphrey hold ?",
            "sql": "select party from people where name = value"
        },
        {
            "utterance": "What district does James Humphrey represent ?",
            "sql": "select district from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID"
    },
    "interaction": [
        {
            "utterance": "can you list the names of all people ?",
            "sql": "select name from people"
        },
        {
            "utterance": "list the dates of debates",
            "sql": "select date from debate"
        },
        {
            "utterance": "list all the venues of the the debates",
            "sql": "select venue from debate"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 4,
    "final": {
        "utterance": "List the names of people that have not been on the affirmative side of debates.",
        "sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me the names of the people that have not been on the affirmative side of all debates ?",
            "sql": "select name from people where people_id not in ( select affirmative from debate_people )"
        },
        {
            "utterance": "Could you please tell me their party affiliations ?",
            "sql": "select party from people where people_id not in ( select affirmative from debate_people )"
        },
        {
            "utterance": "What are their ages ?",
            "sql": "select age from people where people_id not in ( select affirmative from debate_people )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the people ?",
            "sql": "select name from people"
        },
        {
            "utterance": "What are the names of the people who are in the affirmative side ?",
            "sql": "select t3 . name from debate_people as t1 join debate as t2 on t1 . debate_id = t2 . debate_id join people as t3 on t1 . affirmative = t3 . people_id"
        },
        {
            "utterance": "What are the venues of debates on the affirmative side ?",
            "sql": "select t2 . venue from debate_people as t1 join debate as t2 on t1 . debate_id = t2 . debate_id join people as t3 on t1 . affirmative = t3 . people_id"
        },
        {
            "utterance": "What are the dates of the debates on the affirmative side ?",
            "sql": "select t2 . date from debate_people as t1 join debate as t2 on t1 . debate_id = t2 . debate_id join people as t3 on t1 . affirmative = t3 . people_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of people aged either 35 or 36.",
        "sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36"
    },
    "interaction": [
        {
            "utterance": "what is the name of people aged either 35 or 36",
            "sql": "select name from people where age = value or age = value"
        },
        {
            "utterance": "how old is Luther C. Carter ?",
            "sql": "select age from people where name = value"
        },
        {
            "utterance": "what is the age of William B. Maclay",
            "sql": "select age from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the player with the largest number of votes?",
        "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello . Can you list the top three vote getters ?",
            "sql": "select player_name from player order by votes desc limit value"
        },
        {
            "utterance": "Excellent ! Which had the greatest number of votes ?",
            "sql": "select player_name from player order by votes desc limit value"
        },
        {
            "utterance": "And who were the top three , in order from most to least ?",
            "sql": "select player_name from player order by votes desc limit value"
        },
        {
            "utterance": "How many votes did Jim receive ?",
            "sql": "select votes from player where player_name like value"
        },
        {
            "utterance": "And what is his occupation ?",
            "sql": "select occupation from player where player_name like value"
        },
        {
            "utterance": "Who got more than 10,000 votes ?",
            "sql": "select player_name from player where votes > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names and genders of players with a coach starting after 2011.",
        "sql": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of starting year ?",
            "sql": "select starting_year from player_coach"
        },
        {
            "utterance": "yes | What information do you want to know about each gender ? | which coach gender is much ?",
            "sql": "select coach_name from coach where gender = value"
        },
        {
            "utterance": "can you show me a list of player 's residence ?",
            "sql": "select residence from player"
        },
        {
            "utterance": "Show the names and genders of players with a coach starting after 2011",
            "sql": "select t3 . player_name , t3 . gender from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id where t1 . starting_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the residences that have at least two players.",
        "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the residences of the players ?",
            "sql": "select residence from player"
        },
        {
            "utterance": "Which of those residences have both male and female players ?",
            "sql": "select residence from player where gender = value intersect select residence from player where gender = value"
        },
        {
            "utterance": "How many male players does Winnipeg have ?",
            "sql": "select count ( * ) from player where gender = value and residence = value"
        },
        {
            "utterance": "How many female players does Winnipeg have ?",
            "sql": "select count ( * ) from player where gender = value and residence = value"
        },
        {
            "utterance": "How many residences are there in total ?",
            "sql": "select count ( distinct residence ) from player"
        },
        {
            "utterance": "And how many of those six distinct residences have More than one player ?",
            "sql": "select count ( * ) from ( select * from player group by residence having count ( * ) > value )"
        },
        {
            "utterance": "Which residence is the one with more than one player ?",
            "sql": "select residence from player group by residence having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 3,
    "final": {
        "utterance": "Please show the most common occupation of players.",
        "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common occupation of players ?",
            "sql": "select occupation from player group by occupation order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about least common ?",
            "sql": "select occupation from player group by occupation order by count ( * ) limit value"
        },
        {
            "utterance": "What are their names ? | did you mean the names of the players who have the least common occupation ? | yes",
            "sql": "select player_name from player group by occupation order by count ( * ) limit value"
        },
        {
            "utterance": "What about most common ?",
            "sql": "select player_name from player group by occupation order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is his sponsor name ?",
            "sql": "select sponsor_name from player group by occupation order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of players coached by the rank 1 coach.",
        "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1"
    },
    "interaction": [
        {
            "utterance": "what are the names of the players ?",
            "sql": "select player_name from player"
        },
        {
            "utterance": "Who has been coached by Jameson Tomas ?",
            "sql": "select t3 . player_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id where t2 . coach_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the player with the largest number of votes?",
        "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the player with the largest number of votes ?",
            "sql": "select player_name from player order by votes desc limit value"
        },
        {
            "utterance": "Who is the sponsor of the player with the least amount of votes ?",
            "sql": "select sponsor_name from player order by votes asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of players and names of their coaches.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
    },
    "interaction": [
        {
            "utterance": "What are the names of all players ?",
            "sql": "select player_name from player"
        },
        {
            "utterance": "What are the names of their coaches ? | Do you mean list the names of players and names of their coaches together ? | Yes",
            "sql": "select t3 . player_name , t2 . coach_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id"
        },
        {
            "utterance": "What are their sponsor names ?",
            "sql": "select t3 . sponsor_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id"
        },
        {
            "utterance": "What is the gender of the sponsors ?",
            "sql": "select t3 . gender from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of the players ?",
            "sql": "select player_name from player"
        },
        {
            "utterance": "Who are their coaches ?",
            "sql": "select t3 . player_name , t2 . coach_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id"
        },
        {
            "utterance": "Show me these names in descending order based on number of player votes .",
            "sql": "select t3 . player_name , t2 . coach_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id order by t3 . votes desc"
        },
        {
            "utterance": "also Show me the gender of the coaches and players .",
            "sql": "select t3 . player_name , t3 . gender , t2 . coach_name , t2 . gender from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id order by t3 . votes desc"
        },
        {
            "utterance": "How many votes did each player receive ?",
            "sql": "select player_name , votes from player"
        },
        {
            "utterance": "Please list this in descending order .",
            "sql": "select player_name , votes from player order by votes desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the residences that have at least two players.",
        "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many residences are there ?",
            "sql": "select count ( distinct residence ) from player"
        },
        {
            "utterance": "What are these residences ?",
            "sql": "select distinct residence from player"
        },
        {
            "utterance": "Which residences have more than 1 player ?",
            "sql": "select residence from player group by residence having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "What are all the residences ?",
            "sql": "select distinct residence from player"
        },
        {
            "utterance": "How many people live at each of them ?",
            "sql": "select residence , count ( * ) from player group by residence"
        },
        {
            "utterance": "Now remove the residences with less than 2 people",
            "sql": "select residence , count ( * ) from player except select residence , count ( * ) from player where count ( * ) < value"
        },
        {
            "utterance": "OK , now list all the people who live in Winnipeg and their gender .",
            "sql": "select player_name , gender from player where residence = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of players and names of their coaches.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
    },
    "interaction": [
        {
            "utterance": "Which coach started in 2010 ?",
            "sql": "select coach_id from player_coach where starting_year = value"
        },
        {
            "utterance": "What are the names of the coaches that started in 2010 ?",
            "sql": "select coach_name from coach as t1 join player_coach as t2 on t1 . coach_id = t2 . coach_id where starting_year = value"
        },
        {
            "utterance": "What are the names of the players who were coached by Jameson Tomas ?",
            "sql": "select t3 . player_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id where t2 . coach_name = value"
        },
        {
            "utterance": "What are the names of the players who were coached by Smith Brown ?",
            "sql": "select t3 . player_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id where t2 . coach_name = value"
        },
        {
            "utterance": "What is the name of the coach who started in 2011 ?",
            "sql": "select t1 . coach_name from coach as t1 join player_coach as t2 on t1 . coach_id = t2 . coach_id where t2 . starting_year = value"
        },
        {
            "utterance": "What are the names of the players who were coached by Robert Chen ?",
            "sql": "select t3 . player_name from player_coach as t1 join coach as t2 on t1 . coach_id = t2 . coach_id join player as t3 on t1 . player_id = t3 . player_id where t2 . coach_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "Show the residences that have both a player of gender `` M '' and a player `` F '' .",
            "sql": "select residence from player where gender = value intersect select residence from player where gender = value"
        },
        {
            "utterance": "who is the sponsor of jean luc bouche ?",
            "sql": "select sponsor_name from player where player_name = value"
        },
        {
            "utterance": "Final question is how many votes for Niki Ashton ?",
            "sql": "select votes from player where player_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of contact individuals of the `` Labour Party '' ? | Do you want to know the first name , middle name , last name ? | Just the last names .",
            "sql": "select t3 . individual_last_name from organizations as t1 join organization_contact_individuals as t2 on t1 . organization_id = t2 . organization_id join individuals as t3 on t2 . individual_id = t3 . individual_id where t1 . organization_name = value order by t2 . date_contact_to desc limit value"
        },
        {
            "utterance": "Who is the latest contact individual ? | the last name of the latest contact individual of the organization `` Labour Party '' is Bradtke | And what is the date of contact ?",
            "sql": "select t2 . date_contact_from , t2 . date_contact_to from organizations as t1 join organization_contact_individuals as t2 on t1 . organization_id = t2 . organization_id join individuals as t3 on t2 . individual_id = t3 . individual_id where t1 . organization_name = value order by t2 . date_contact_to desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 1,
    "final": {
        "utterance": "Find name of the services that has never been used.",
        "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"
    },
    "interaction": [
        {
            "utterance": "What booking made date of service id 1 ?",
            "sql": "select booking_made_date from services as t1 join party_services as t2 on t1 . service_id = t2 . service_id where t1 . service_id = value"
        },
        {
            "utterance": "What are the service name of booking id 2 ?",
            "sql": "select service_name from services as t1 join party_services as t2 on t1 . service_id = t2 . service_id where t2 . booking_id = value"
        },
        {
            "utterance": "What are the service description of service type code Welfare ?",
            "sql": "select service_descriptio from services where service_type_code = value"
        },
        {
            "utterance": "Find mane of the service that has never been used .",
            "sql": "select service_name from services except select t1 . service_name from services as t1 join party_services as t2 on t1 . service_id = t2 . service_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name of all the cities and states.",
        "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
    },
    "interaction": [
        {
            "utterance": "Find the name of all the cities and states . | you want the columns of town_city and state_province_county , right ? | Umm . Give me the names and the states please",
            "sql": "select town_city from addresses union select state_province_county from addresses"
        },
        {
            "utterance": "Can you give me the zip_postcode for Colorado",
            "sql": "select zip_postcode from addresses where state_province_county = value"
        },
        {
            "utterance": "Give me the cities where the state is Colorado",
            "sql": "select town_city from addresses where state_province_county = value"
        },
        {
            "utterance": "Ok. Can you give me the cities where the state is NorthCarolina",
            "sql": "select town_city from addresses where state_province_county = value"
        },
        {
            "utterance": "Give me all the zipcodes",
            "sql": "select zip_postcode from addresses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the emails of parties with the most popular party form.",
        "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "how many parties are on the table ?",
            "sql": "select count ( * ) from parties"
        },
        {
            "utterance": "how many of the parties are popular ? | What do you mean by popular ? | how many parties have the most popular party form ?",
            "sql": "select count ( * ) from parties as t1 join party_forms as t2 on t1 . party_id = t2 . party_id where t2 . form_id = ( select form_id from party_forms group by form_id order by count ( * ) desc limit value )"
        },
        {
            "utterance": "can i have their emails ?",
            "sql": "select t1 . party_email from parties as t1 join party_forms as t2 on t1 . party_id = t2 . party_id where t2 . form_id = ( select form_id from party_forms group by form_id order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 4,
    "final": {
        "utterance": "Which is the email of the party that has used the services the most number of times?",
        "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the party email of the party with id 1 ?",
            "sql": "select party_email from parties where party_id = value"
        },
        {
            "utterance": "Tell me the party phone of the party id 2 ?",
            "sql": "select party_phone from parties where party_id = value"
        },
        {
            "utterance": "Tell me the service id of the customer id 10 ?",
            "sql": "select service_id from party_services where customer_id = value"
        },
        {
            "utterance": "Which is the email of the party that has used the services the most number of times ?",
            "sql": "select t1 . party_email from parties as t1 join party_services as t2 on t1 . party_id = t2 . customer_id group by t1 . party_email order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 0,
    "final": {
        "utterance": "Which catalog publisher has published the most catalogs?",
        "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "LIST THE NAME OF CATALOGS",
            "sql": "select catalog_name from catalogs"
        },
        {
            "utterance": "WHICH PUBLISHER HAS PUBLISHED MORE CATALOGS",
            "sql": "select catalog_publisher , count ( * ) from catalogs group by catalog_publisher order by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of catalog entries with level number 8.",
        "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
    },
    "interaction": [
        {
            "utterance": "What are the names of catalog with number 8",
            "sql": "select t1 . catalog_entry_name from catalog_contents as t1 join catalog_contents_additional_attributes as t2 on t1 . catalog_entry_id = t2 . catalog_entry_id where t2 . catalog_level_number = value"
        },
        {
            "utterance": "Could you please show me their attribute ID",
            "sql": "select t2 . attribute_id from catalog_contents as t1 join catalog_contents_additional_attributes as t2 on t1 . catalog_entry_id = t2 . catalog_entry_id where t2 . catalog_level_number = value"
        },
        {
            "utterance": "What about their attribute value",
            "sql": "select t2 . attribute_value from catalog_contents as t1 join catalog_contents_additional_attributes as t2 on t1 . catalog_entry_id = t2 . catalog_entry_id where t2 . catalog_level_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the entry name of the most expensive catalog (in USD)?",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me highest value of the entry name ?",
            "sql": "select catalog_entry_name from catalog_contents order by price_in_dollars desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
    },
    "interaction": [
        {
            "utterance": "what are the names of all catalogs",
            "sql": "select catalog_name from catalogs"
        },
        {
            "utterance": "list the publication dates for all catalogs",
            "sql": "select date_of_publication from catalogs"
        },
        {
            "utterance": "list the catalogs that have level number greater than 5 | Do you want catalog name or id ? | id",
            "sql": "select t1 . catalog_id from catalogs as t1 join catalog_structure as t2 on t1 . catalog_id = t2 . catalog_id where catalog_level_number > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 4,
    "final": {
        "utterance": "Find all the catalog publishers whose name contains \"Murray\"",
        "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
    },
    "interaction": [
        {
            "utterance": "Could you please tell me all the catalog publishers whose name contains `` Murray '' ?",
            "sql": "select distinct ( catalog_publisher ) from catalogs where catalog_publisher like value"
        },
        {
            "utterance": "What is the name of that catalog ?",
            "sql": "select catalog_name from catalogs where catalog_publisher like value"
        },
        {
            "utterance": "What are the dates of latest revision for those ?",
            "sql": "select date_of_latest_revision from catalogs where catalog_publisher like value"
        },
        {
            "utterance": "Could you please tell me all the catalog publishers whose name contains `` chocolate '' ?",
            "sql": "select catalog_publisher from catalogs where catalog_publisher like value"
        },
        {
            "utterance": "How many catalogs do they publish ?",
            "sql": "select count ( * ) from catalogs where catalog_publisher in ( select distinct ( catalog_publisher ) from catalogs where catalog_publisher like value )"
        },
        {
            "utterance": "What 's the name of that catalog and its date of publication ?",
            "sql": "select catalog_name , date_of_publication from catalogs where catalog_publisher in ( select distinct ( catalog_publisher ) from catalogs where catalog_publisher like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the average and minimum price (in Euro) of all products?",
        "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
    },
    "interaction": [
        {
            "utterance": "What are the average and minimum prices ( in Euros ) of all products ?",
            "sql": "select avg ( price_in_euros ) , min ( price_in_euros ) from catalog_contents"
        },
        {
            "utterance": "How about just for Cola ?",
            "sql": "select avg ( price_in_euros ) , min ( price_in_euros ) from catalog_contents where catalog_entry_name = value"
        },
        {
            "utterance": "How about the price of Cola in dollars ? | do you still want to know the average and minimum ? | Yes please !",
            "sql": "select avg ( price_in_dollars ) , min ( price_in_dollars ) from catalog_contents where catalog_entry_name = value"
        },
        {
            "utterance": "How about the prices for root beer in dollars ? | did you still want to know the average and minimum ? | Yes please !",
            "sql": "select avg ( price_in_dollars ) , min ( price_in_dollars ) from catalog_contents where catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the product with the highest height? Give me the catalog entry name.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell the capacity , length , height and width for the catalog entry name cola ?",
            "sql": "select capacity , length , height , width from catalog_contents where catalog_entry_name = value"
        },
        {
            "utterance": "Tell me the price of Cream Soda in dollars , euros and pounds .",
            "sql": "select price_in_dollars , price_in_euros , price_in_pounds from catalog_contents where catalog_entry_name = value"
        },
        {
            "utterance": "What is the product with the highest height ? Give me the catalog entry name .",
            "sql": "select catalog_entry_name from catalog_contents order by height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the dates on which more than one revisions were made.",
        "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What were the dates of the latest revisions ?",
            "sql": "select date_of_latest_revision from catalogs"
        },
        {
            "utterance": "Which of these appear more than once ?",
            "sql": "select date_of_latest_revision from catalogs group by date_of_latest_revision having count ( * ) > value"
        },
        {
            "utterance": "What catalogs were done on these dates ?",
            "sql": "select catalog_name from catalogs where date_of_latest_revision in ( select date_of_latest_revision from catalogs group by date_of_latest_revision having count ( * ) > value )"
        },
        {
            "utterance": "Great , can you show me the dates these catalogs were revised again ?",
            "sql": "select catalog_name , date_of_latest_revision from catalogs where date_of_latest_revision in ( select date_of_latest_revision from catalogs group by date_of_latest_revision having count ( * ) > value )"
        },
        {
            "utterance": "Can you show me what dates appear more than once again ?",
            "sql": "select date_of_latest_revision from catalogs group by date_of_latest_revision having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 8,
    "final": {
        "utterance": "Which catalog publisher has published the most catalogs?",
        "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Could you list the catalog publishers in descending order ? | order by what ? | Alphabetical order",
            "sql": "select catalog_publisher from catalogs group by catalog_publisher order by catalog_publisher desc"
        },
        {
            "utterance": "Great ! How many catalogs has each publisher published ?",
            "sql": "select catalog_publisher , count ( * ) from catalogs group by catalog_publisher"
        },
        {
            "utterance": "Great ! Which publishers have the most published catalogues ?",
            "sql": "select catalog_publisher from catalogs group by catalog_publisher order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "What are the attribute data types that possessed more than 3 attribute definitions ?",
            "sql": "select attribute_data_type from attribute_definitions group by attribute_data_type having count ( * ) > value"
        },
        {
            "utterance": "What is bool 's attribute name ? | Do you mean the attribute names for attributes whose attribute data type is bool ? | Yes please",
            "sql": "select attribute_name from attribute_definitions where attribute_data_type = value"
        },
        {
            "utterance": "What is the attribute ID for attributes whose data type is bool ?",
            "sql": "select attribute_id from attribute_definitions where attribute_data_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the product with the highest height? Give me the catalog entry name.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which product has the greatest height ? | Which attribute of product do you want ? | Can you please show me the catalog entry name ?",
            "sql": "select catalog_entry_name from catalog_contents order by height desc limit value"
        },
        {
            "utterance": "What is the catalog entry id and product stock number for Cola ?",
            "sql": "select catalog_entry_id , product_stock_number from catalog_contents where catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the entry name of the most expensive catalog (in USD)?",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many Catalog Contents there",
            "sql": "select count ( * ) from catalog_contents"
        },
        {
            "utterance": "what is the parent entry id of cola",
            "sql": "select parent_entry_id from catalog_contents where catalog_entry_name = value"
        },
        {
            "utterance": "what is the product stock number of Cream Soda",
            "sql": "select product_stock_number from catalog_contents where catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the entry names of catalog with the attribute possessed by most entries.",
        "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are the entry names of catalog with the attribute processed by most entries ?",
            "sql": "select t1 . catalog_entry_name from catalog_contents as t1 join catalog_contents_additional_attributes as t2 on t1 . catalog_entry_id = t2 . catalog_entry_id where t2 . attribute_value = ( select attribute_value from catalog_contents_additional_attributes group by attribute_value order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What are the product stock numbers with the attribute processed by most entries ?",
            "sql": "select t1 . product_stock_number from catalog_contents as t1 join catalog_contents_additional_attributes as t2 on t1 . catalog_entry_id = t2 . catalog_entry_id where t2 . attribute_value = ( select attribute_value from catalog_contents_additional_attributes group by attribute_value order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    "interaction": [
        {
            "utterance": "What is the height of Cola ?",
            "sql": "select height from catalog_contents where catalog_entry_name = value"
        },
        {
            "utterance": "Which product has a height smaller than 5 ? | Do you want to know the names of the products with heights smaller than 5 | Yes",
            "sql": "select catalog_entry_name from catalog_contents where length < value"
        },
        {
            "utterance": "What about their length ?",
            "sql": "select catalog_entry_name , length from catalog_contents where length < value"
        },
        {
            "utterance": "What is the height of Fenta orange ?",
            "sql": "select height from catalog_contents where catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id of the candidate who got the lowest oppose rate.",
        "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know the lowest oppose rate among the candidates .",
            "sql": "select oppose_rate from candidate order by oppose_rate limit value"
        },
        {
            "utterance": "Which candidate got this lowest oppose rate ?",
            "sql": "select candidate_id from candidate order by oppose_rate limit value"
        },
        {
            "utterance": "Hmm , which poll source did this candidate belong to ?",
            "sql": "select poll_source from candidate order by oppose_rate limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 1,
    "final": {
        "utterance": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
    },
    "interaction": [
        {
            "utterance": "Hello , how many candidates total are there ?",
            "sql": "select count ( * ) from candidate"
        },
        {
            "utterance": "Perfect , and who has the highest support percentage ? | Do you want the people id ? | Actually , just the percentage please .",
            "sql": "select max ( support_rate ) from candidate"
        },
        {
            "utterance": "Perfect , what about the lowest consider rate ?",
            "sql": "select min ( consider_rate ) from candidate"
        },
        {
            "utterance": "And what about the lowest oppose rate ?",
            "sql": "select min ( oppose_rate ) from candidate"
        },
        {
            "utterance": "And finally , can you tell me the average unsure rate ?",
            "sql": "select avg ( unsure_rate ) from candidate"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 2,
    "final": {
        "utterance": "what are the top 3 highest support rates?",
        "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you show me the top three highest support rates for the candidates ?",
            "sql": "select support_rate from candidate order by support_rate desc limit value"
        },
        {
            "utterance": "What polls are those from ? | Did you want the poll source for these polls ? | Yes , please",
            "sql": "select poll_source , support_rate from candidate order by support_rate desc limit value"
        },
        {
            "utterance": "What is the name of the poll source with the earliest date ?",
            "sql": "select poll_source from candidate order by date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 3,
    "final": {
        "utterance": "which gender got the highest average uncertain ratio.",
        "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many poll sources are there ?",
            "sql": "select count ( poll_source ) from candidate"
        },
        {
            "utterance": "how many people are there ?",
            "sql": "select count ( people_id ) from people"
        },
        {
            "utterance": "And how many are female ? | Do you mean the people who are female ? | Yes , how many are female , have gender `` F ''",
            "sql": "select count ( * ) from people where sex = value"
        },
        {
            "utterance": "what is their unsure rate ? | Do you mean the unsure rate of the people who are female ? | Yes",
            "sql": "select t2 . unsure_rate from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . sex = value"
        },
        {
            "utterance": "and the males ? | Do you mean the unsure rate of the people who are male ? | yes",
            "sql": "select t2 . unsure_rate from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the average height and weight for all males (sex is M).",
        "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"
    },
    "interaction": [
        {
            "utterance": "Find the average height and weight for all males ( sex is M ) .",
            "sql": "select avg ( height ) , avg ( weight ) from people where sex = value"
        },
        {
            "utterance": "How many male people are on the table ?",
            "sql": "select count ( * ) from people where sex = value"
        },
        {
            "utterance": "Which person has the highest height ?",
            "sql": "select * from people order by height desc limit value"
        },
        {
            "utterance": "How many female people are on the list ?",
            "sql": "select count ( * ) from people where sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the average height and weight for all males (sex is M).",
        "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"
    },
    "interaction": [
        {
            "utterance": "what is the current height of Hubert Henno",
            "sql": "select height from people where name = value"
        },
        {
            "utterance": "How many male sex are there",
            "sql": "select count ( * ) from people where sex = value"
        },
        {
            "utterance": "which of the male has he highest weight | Would you like to know the name of the person who has the highest weight among sex M ? | yes of course",
            "sql": "select name from people where sex = value order by height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name and gender of the candidate who got the highest support rate.",
        "sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which candidate was most supported | You mean the candidate who got the highest support rate ? | yes which candidate was most popular",
            "sql": "select t1 . name from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id order by t2 . support_rate desc limit value"
        },
        {
            "utterance": "what was Vincent Montmeat 's support rate",
            "sql": "select t2 . support_rate from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . name = value"
        },
        {
            "utterance": "what was his opposition rate",
            "sql": "select t2 . oppose_rate from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    "interaction": [
        {
            "utterance": "How many females are there ?",
            "sql": "select count ( * ) from people where sex = value"
        },
        {
            "utterance": "How about males ?",
            "sql": "select count ( * ) from people where sex = value"
        },
        {
            "utterance": "What is the lowest oppose rate that male candidates have ?",
            "sql": "select min ( oppose_rate ) from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . sex = value"
        },
        {
            "utterance": "What 's the name of the male candidate that has an oppose rate of 0.32 ?",
            "sql": "select name from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . sex = value and oppose_rate = value"
        },
        {
            "utterance": "Can you also show me the lowest oppose rate that female candidates have ?",
            "sql": "select min ( oppose_rate ) from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . sex = value"
        },
        {
            "utterance": "Can you show me the name of that female candidate ?",
            "sql": "select name from people as t1 join candidate as t2 on t1 . people_id = t2 . people_id where t1 . sex = value order by oppose_rate asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 8,
    "final": {
        "utterance": "what are the top 3 highest support rates?",
        "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the top 3 highest support rates ?",
            "sql": "select support_rate from candidate order by support_rate desc limit value"
        },
        {
            "utterance": "What are the poll sources of those support rates ?",
            "sql": "select poll_source from candidate order by support_rate desc limit value"
        },
        {
            "utterance": "What are the dates for those support rates ?",
            "sql": "select date from candidate order by support_rate desc limit value"
        },
        {
            "utterance": "What 's the unsure rate of those ?",
            "sql": "select unsure_rate from candidate order by support_rate desc limit value"
        },
        {
            "utterance": "What are the consider rates of those ?",
            "sql": "select consider_rate from candidate order by support_rate desc limit value"
        },
        {
            "utterance": "What are the oppose rates of those ?",
            "sql": "select oppose_rate from candidate order by support_rate desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 9,
    "final": {
        "utterance": "how many people are there whose weight is higher than 85 for each gender?",
        "sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "Hello . How many people have a weight that is higher than 85 ?",
            "sql": "select count ( * ) from people where weight > value"
        },
        {
            "utterance": "Out of those 6 people , how many of them are female ?",
            "sql": "select count ( * ) from people where weight > value and sex = value"
        },
        {
            "utterance": "How many of them are male ?",
            "sql": "select count ( * ) from people where weight > value and sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all ships from United States ?",
            "sql": "select name from ship where nationality = value"
        },
        {
            "utterance": "Show the names of all ships from United Kingdom ?",
            "sql": "select name from ship where nationality = value"
        },
        {
            "utterance": "What type of ship is the Corbridge ?",
            "sql": "select type from ship where name = value"
        },
        {
            "utterance": "What is the tonnage of the Corbridge ?",
            "sql": "select tonnage from ship where name = value"
        },
        {
            "utterance": "What is the name of the ship with 3146 tonnage ?",
            "sql": "select name from ship where tonnage = value"
        },
        {
            "utterance": "What is the name of the ship with the most tonnage ?",
            "sql": "select name from ship order by tonnage desc limit value"
        },
        {
            "utterance": "How many different types of ships are there ?",
            "sql": "select count ( distinct type ) from ship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of ships that are not involved in any mission",
        "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"
    },
    "interaction": [
        {
            "utterance": "List the name of ships that are not involved in any mission",
            "sql": "select name from ship where ship_id not in ( select ship_id from mission )"
        },
        {
            "utterance": "Which ships have been decommissioned ?",
            "sql": "select ship_id from mission where fate like value"
        },
        {
            "utterance": "Give me the names of ships that have been decommissioned",
            "sql": "select name from ship where ship_id in ( select ship_id from mission where fate like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000"
    },
    "interaction": [
        {
            "utterance": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000 .",
            "sql": "select type from ship where tonnage > value intersect select type from ship where tonnage < value"
        },
        {
            "utterance": "Show the types of ships with tonnage between 3000 and 5000 .",
            "sql": "select distinct type from ship where tonnage > value and tonnage < value"
        },
        {
            "utterance": "What is the nationality of the ship with maximum tonnage ?",
            "sql": "select nationality from ship order by tonnage desc limit value"
        },
        {
            "utterance": "Can you give me the nationality of the ship with minimum tonnage .",
            "sql": "select nationality from ship order by tonnage limit value"
        },
        {
            "utterance": "What is the maximum and the minimum tonnage for a cargo ship ?",
            "sql": "select max ( tonnage ) , min ( tonnage ) from ship where type = value"
        },
        {
            "utterance": "Hmmm . Can you also give me the maximum and the minimum tonnage for a battle ship ?",
            "sql": "select max ( tonnage ) , min ( tonnage ) from ship where type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\""
    },
    "interaction": [
        {
            "utterance": "Hello ! How are you ! Can you tell me how many missions there are in total ?",
            "sql": "select count ( * ) from mission"
        },
        {
            "utterance": "Great ! Can you filter this list to show only the mission that involved ships from the United States ?",
            "sql": "select t1 . fate from mission as t1 join ship as t2 on t1 . ship_id = t2 . ship_id where t2 . nationality = value"
        },
        {
            "utterance": "Great ! Could you update this list to show all of the mission IDs ?",
            "sql": "select t1 . fate , t1 . mission_id from mission as t1 join ship as t2 on t1 . ship_id = t2 . ship_id where t2 . nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 4,
    "final": {
        "utterance": "List the nations that have more than two ships.",
        "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many ships does United Kingdom have ?",
            "sql": "select nationality , count ( * ) from ship where nationality = value group by nationality"
        },
        {
            "utterance": "Which other country has more than 2 ships ?",
            "sql": "select nationality from ship where nationality ! = value group by nationality having count ( * ) > value"
        },
        {
            "utterance": "What type of ships does United States have ?",
            "sql": "select distinct type from ship where nationality = value"
        },
        {
            "utterance": "What about United Kingdom 's type of ships ?",
            "sql": "select distinct type from ship where nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the ship with the largest tonnage?",
        "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many ships are there ?",
            "sql": "select count ( * ) from ship"
        },
        {
            "utterance": "What are their nationalities ?",
            "sql": "select nationality from ship"
        },
        {
            "utterance": "What is the name of the ship with the largest tonnage ?",
            "sql": "select name from ship order by tonnage desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 6,
    "final": {
        "utterance": "Please show the most common type of ships.",
        "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the most common type of ships",
            "sql": "select type from ship group by type order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names of ships involved in a mission launched after 1928.",
        "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928"
    },
    "interaction": [
        {
            "utterance": "show names of ships involved in a mission launched after 1928 .",
            "sql": "select t2 . name from mission as t1 join ship as t2 on t1 . ship_id = t2 . ship_id where t1 . launched_year > value"
        },
        {
            "utterance": "which ships were lost ?",
            "sql": "select * from mission as t1 join ship as t2 on t1 . ship_id = t2 . ship_id where t1 . fate like value"
        },
        {
            "utterance": "which among them was the biggest ?",
            "sql": "select * from mission as t1 join ship as t2 on t1 . ship_id = t2 . ship_id where t1 . fate like value order by t2 . tonnage desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 0,
    "final": {
        "utterance": "List the locations of schools that do not have any player.",
        "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)"
    },
    "interaction": [
        {
            "utterance": "how many player are presented on the table | Did you mean to ask for the number of entries in the table player ? | exactly",
            "sql": "select count ( * ) from player"
        },
        {
            "utterance": "list out the player",
            "sql": "select player from player"
        },
        {
            "utterance": "what is the age of Timothy Beckham",
            "sql": "select age from player where player = value"
        },
        {
            "utterance": "what is the position of Pedro \u00c1lvarez",
            "sql": "select position from player where player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the denomination shared by more than one school.",
        "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show the School name with School_ID 1 ?",
            "sql": "select school from school where school_id = value"
        },
        {
            "utterance": "Show the denomination shared by more than one school ?",
            "sql": "select denomination from school group by denomination having count ( * ) > value"
        },
        {
            "utterance": "Show the Location of Barker College ?",
            "sql": "select location from school where school = value"
        },
        {
            "utterance": "Show the names of schools with only girls ?",
            "sql": "select school from school where boys_or_girls = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 2,
    "final": {
        "utterance": "List the teams of the players with the top 5 largest ages.",
        "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "Which team of players has the smallest age ? | Did you mean to ask for the team of the player with the smallest age ? | yes",
            "sql": "select team from player order by age limit value"
        },
        {
            "utterance": "Which team does Timothy Beckham play for ?",
            "sql": "select team from player where player = value"
        },
        {
            "utterance": "How old is he and what position does he play ?",
            "sql": "select age , position from player where player = value"
        },
        {
            "utterance": "What position does Eric Hosmer play ?",
            "sql": "select position from player where player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"
    },
    "interaction": [
        {
            "utterance": "What schools were founded before 1890 ?",
            "sql": "select school from school where founded < value"
        },
        {
            "utterance": "What was its denomination ?",
            "sql": "select denomination from school where founded < value"
        },
        {
            "utterance": "What schools were founded after 1900 ?",
            "sql": "select school from school where founded > value"
        },
        {
            "utterance": "What were their denominations ?",
            "sql": "select denomination from school where founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the locations of schools that have more than 1 player.",
        "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which schools have more than 1 player ?",
            "sql": "select t2 . school from player as t1 join school as t2 on t1 . school_id = t2 . school_id group by t1 . school_id having count ( * ) > value"
        },
        {
            "utterance": "Okay , and where are the locations of each school ?",
            "sql": "select t2 . school , t2 . location from player as t1 join school as t2 on t1 . school_id = t2 . school_id group by t1 . school_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"
    },
    "interaction": [
        {
            "utterance": "what is the high enrollment of school | Are you asking the highest enrollment number for all schools ? | exactly",
            "sql": "select max ( enrollment ) from school"
        },
        {
            "utterance": "what is the school color of barker college",
            "sql": "select school_colors from school where school = value"
        },
        {
            "utterance": "what is the enrollment of cranbrook school",
            "sql": "select enrollment from school where school = value"
        },
        {
            "utterance": "which school is hightest founded | Do you mean the school that is founded earliest ? | exactly",
            "sql": "select school from school order by founded limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name and id of the good with the highest average rank.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the good with the highest average rank ?",
            "sql": "select t1 . title from item as t1 join review as t2 on t1 . i_id = t2 . i_id group by t2 . i_id order by avg ( t2 . rank ) desc limit value"
        },
        {
            "utterance": "What is the ID of cup ?",
            "sql": "select i_id from item where title = value"
        },
        {
            "utterance": "Now , can you please tell me the name and id of the good with the highest average rank ?",
            "sql": "select t1 . title , t1 . i_id from item as t1 join review as t2 on t1 . i_id = t2 . i_id group by t2 . i_id order by avg ( t2 . rank ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the user who gives the most reviews.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "for which user id rating is high | did you mean for which user id is the rating highest ? | ok , find user id who gives the rating 10",
            "sql": "select t1 . u_id from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t2 . rating = value"
        },
        {
            "utterance": "find the name of the user who gives most reviews",
            "sql": "select t1 . name from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id group by t2 . u_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "find the name of the user who gives 1 rank",
            "sql": "select t1 . name from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t2 . rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of the items that did not receive any review.",
        "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the names of the items that did not receive any reviews ?",
            "sql": "select title from item where i_id not in ( select i_id from review )"
        },
        {
            "utterance": "What are their item IDs ?",
            "sql": "select i_id from item where i_id not in ( select i_id from review )"
        },
        {
            "utterance": "How many items did receive reviews ?",
            "sql": "select count ( distinct i_id ) from review"
        },
        {
            "utterance": "What are their item ids ?",
            "sql": "select distinct ( i_id ) from review"
        },
        {
            "utterance": "What is the rating of item id 3 ?",
            "sql": "select rating from review where i_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all product IDs and the associated product titles ? | Are you asking for all item IDs and their corresponding item titles ? | Yes ! That is correct !",
            "sql": "select i_id , title from item"
        },
        {
            "utterance": "Thank you ! Can you filter that list to show only the entries with a rank that is higher than 3 please ? | Are you looking for ranks that are better than 3 or higher in value than 3 ? | I would like to filter the list to show the entries which have a rank value that is higher than 3 please .",
            "sql": "select t1 . title , t1 . i_id from item as t1 join review as t2 on t1 . i_id = t2 . i_id where t2 . rank > value"
        },
        {
            "utterance": "Excellent . Can you include to this list the review rating for each of these items ?",
            "sql": "select t1 . title , t1 . i_id , rating from item as t1 join review as t2 on t1 . i_id = t2 . i_id where t2 . rank > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 4,
    "final": {
        "utterance": "For each user, return the name and the average rating of reviews given by them.",
        "sql": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    "interaction": [
        {
            "utterance": "What is the used id 1 ? | Do you mean what is the name of the user with id 1 ? | yes",
            "sql": "select name from useracct where u_id = value"
        },
        {
            "utterance": "What is the name of user id 3 ?",
            "sql": "select name from useracct where u_id = value"
        },
        {
            "utterance": "What is the rank of user id 3 ?",
            "sql": "select t2 . rank from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t2 . u_id = value"
        },
        {
            "utterance": "What is the average rating of reviews of user id1 ?",
            "sql": "select avg ( t2 . rating ) from useracct where t2 . u_id = value as t1 join review as t2 on t1 . u_id = t2 . u_id group by t2 . u_id"
        },
        {
            "utterance": "Find out the average rating of every user ?",
            "sql": "select t1 . name , avg ( t2 . rating ) from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id group by t2 . u_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the target user with the lowest trust score.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me useracct name ? | Would you like a list of the names of the users ? | yes",
            "sql": "select name from useracct"
        },
        {
            "utterance": "can you show me target user id | Would you like a list of all the target user id ? | yes",
            "sql": "select target_u_id from trust"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of the items that did not receive any review.",
        "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "What is item number 4 ?",
            "sql": "select * from item where i_id = value"
        },
        {
            "utterance": "What is the avocado 's rating ?",
            "sql": "select rating from review where i_id = ( select i_id from item where title = value )"
        },
        {
            "utterance": "And what about the avocado 's rank ?",
            "sql": "select rank from review where i_id = ( select i_id from item where title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of users who did not leave any review.",
        "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "How many users did not leave a review ?",
            "sql": "select name from useracct where u_id not in ( select u_id from review )"
        },
        {
            "utterance": "Can you list out their names ?",
            "sql": "select name from useracct where u_id not in ( select u_id from review )"
        },
        {
            "utterance": "And the users who did not ?",
            "sql": "select name from useracct where u_id not in ( select u_id from review )"
        },
        {
            "utterance": "How many reviews did we receive ?",
            "sql": "select count ( * ) from review"
        },
        {
            "utterance": "How many of the reviews have a rating greater than or equal to 5 ?",
            "sql": "select count ( * ) from review where rating > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and id of the item with the highest average rating.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the items with highest average rating | Do you mean the the title of the item with the highest average rating ? | yes , title of the item with highest average rating",
            "sql": "select t1 . title from item as t1 join review as t2 on t1 . i_id = t2 . i_id group by t2 . i_id order by avg ( t2 . rating ) desc limit value"
        },
        {
            "utterance": "what is the id of cup",
            "sql": "select i_id from item where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and id of the item with the highest average rating.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the item with the highest average rating ?",
            "sql": "select t1 . title from item as t1 join review as t2 on t1 . i_id = t2 . i_id group by t2 . i_id order by avg ( t2 . rating ) desc limit value"
        },
        {
            "utterance": "What is its id ?",
            "sql": "select t1 . i_id from item as t1 join review as t2 on t1 . i_id = t2 . i_id group by t2 . i_id order by avg ( t2 . rating ) desc limit value"
        },
        {
            "utterance": "What is the name of the item with the lowest average rating ?",
            "sql": "select t1 . title from item as t1 join review as t2 on t1 . i_id = t2 . i_id group by t2 . i_id order by avg ( t2 . rating ) limit value"
        },
        {
            "utterance": "What is its item id ?",
            "sql": "select t1 . i_id from item as t1 join review as t2 on t1 . i_id = t2 . i_id group by t2 . i_id order by avg ( t2 . rating ) limit value"
        },
        {
            "utterance": "What item names have a rating of 5 ?",
            "sql": "select t1 . title from item as t1 join review as t2 on t1 . i_id = t2 . i_id where rating = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of the user who gives the most reviews.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the user id of Helen",
            "sql": "select u_id from useracct where name = value"
        },
        {
            "utterance": "What is Helen rating ?",
            "sql": "select t2 . rating from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t1 . name = value"
        },
        {
            "utterance": "And what is helen rank",
            "sql": "select t2 . rank from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t1 . name = value"
        },
        {
            "utterance": "What is helen item id",
            "sql": "select t2 . i_id from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t1 . name = value"
        },
        {
            "utterance": "How about her a id",
            "sql": "select t2 . a_id from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t1 . name = value"
        },
        {
            "utterance": "Who gave the most reviews",
            "sql": "select t1 . name from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id group by t2 . u_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many review did he have",
            "sql": "select count ( * ) from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id group by t2 . u_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Yes what is mark rank ?",
            "sql": "select t2 . rank from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t1 . name = value"
        },
        {
            "utterance": "What is matk user id",
            "sql": "select u_id from useracct where name = value"
        },
        {
            "utterance": "What is his a id",
            "sql": "select t2 . a_id from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 11,
    "final": {
        "utterance": "For each user, find their name and the number of reviews written by them.",
        "sql": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    "interaction": [
        {
            "utterance": "Which id has the least rating on the table ? | Which id do you need , a id , u id , or i id ? | i id",
            "sql": "select i_id from review order by rating limit value"
        },
        {
            "utterance": "For each user , find their name and the number of reviews written by them .",
            "sql": "select t1 . name , count ( * ) from useracct as t1 join review as t2 on t1 . u_id = t2 . u_id group by t2 . u_id"
        },
        {
            "utterance": "Which u id has the least rank on the list ?",
            "sql": "select u_id from review order by rank limit value"
        },
        {
            "utterance": "State the name of u id 2 on the list ?",
            "sql": "select name from useracct where u_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)"
    },
    "interaction": [
        {
            "utterance": "which item has the highest rating ?",
            "sql": "select t1 . title from item as t1 join review as t2 on t1 . i_id = t2 . i_id order by rating desc limit value"
        },
        {
            "utterance": "what is the average rating ?",
            "sql": "select avg ( rating ) from review"
        },
        {
            "utterance": "what items have higher rating than 7 ?",
            "sql": "select t1 . title from item as t1 join review as t2 on t1 . i_id = t2 . i_id where t2 . rating > value"
        },
        {
            "utterance": "what is item id of cup ?",
            "sql": "select i_id from item where title = value"
        },
        {
            "utterance": "what is item id 4 ?",
            "sql": "select title from item where i_id = value"
        },
        {
            "utterance": "please list all items",
            "sql": "select * from item"
        },
        {
            "utterance": "please list each item and rating from highest to lowest rating",
            "sql": "select t1 . title , t2 . rating from item as t1 join review as t2 on t1 . i_id = t2 . i_id order by t2 . rating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of customers who have more than one loan.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List names of customers with more than 1 loan",
            "sql": "select t1 . cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having count ( * ) > value"
        },
        {
            "utterance": "How about those with only 1 loan ?",
            "sql": "select t1 . cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having count ( * ) = value"
        },
        {
            "utterance": "How about those with no loans ?",
            "sql": "select t1 . cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having count ( * ) = value"
        },
        {
            "utterance": "List the customers who have mortgages",
            "sql": "select loan_id from loan where loan_type = value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select t1 . cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id where loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the customers with a credit score below 100 ?",
            "sql": "select * from customer where credit_score < value"
        },
        {
            "utterance": "Can you provide me with a list of all of the loans that both Mary and Jack received ?",
            "sql": "select t2 . loan_type from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id where t1 . cust_name = value intersect select t4 . loan_type from customer as t3 join loan as t4 on t3 . cust_id = t4 . cust_id where t3 . cust_name = value"
        },
        {
            "utterance": "Can you show me which bank branch provided the highest number of loans to customers with credit scores below 100 ?",
            "sql": "select t2 . bname from loan as t1 join bank as t2 on t1 . branch_id = t2 . branch_id join customer as t3 on t1 . cust_id = t3 . cust_id where t3 . credit_score < value group by t2 . bname order by sum ( t1 . amount ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 2,
    "final": {
        "utterance": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"
    },
    "interaction": [
        {
            "utterance": "Can you show the average account balance of customers with credit score lower than 50 for each account type and their corresponding account types ?",
            "sql": "select avg ( acc_bal ) , acc_type from customer where credit_score < value group by acc_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
    },
    "interaction": [
        {
            "utterance": "How many customers have loans that total more than 5000 ?",
            "sql": "select count ( * ) from ( select * from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having sum ( t2 . amount ) > value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having sum ( t2 . amount ) > value"
        },
        {
            "utterance": "What is her account balance ?",
            "sql": "select t1 . acc_bal from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having sum ( t2 . amount ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total amount of loans offered by each bank branch.",
        "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"
    },
    "interaction": [
        {
            "utterance": "Can you list the loan types , branch names and ids , and loan amounts ? | Did you mean the Ids of the branches ? | Yes , please .",
            "sql": "select t2 . loan_type , t1 . bname , t2 . branch_id , t2 . amount from bank as t1 join loan as t2 on t1 . branch_id = t2 . branch_id group by t1 . bname"
        },
        {
            "utterance": "Hmm , I want to know the number of customers each bank branch has . | Would you like both the branch name and the branch ID ? | Yes please .",
            "sql": "select branch_id , bname , no_of_customers from bank"
        },
        {
            "utterance": "Please find out the total amount of loans offered by each bank branch .",
            "sql": "select sum ( amount ) , t1 . bname from bank as t1 join loan as t2 on t1 . branch_id = t2 . branch_id group by t1 . bname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the state which has the most number of customers.",
        "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hello . Can you tell me the number of states in which there are customers ?",
            "sql": "select count ( state ) from bank where no_of_customers > value"
        },
        {
            "utterance": "and what states are they , please ? | Do you mean the states of all the branches ? | what are the four states in which there are customers ?",
            "sql": "select state from bank where no_of_customers > value"
        },
        {
            "utterance": "and which of those states has the most number of customers ?",
            "sql": "select state from bank group by state order by sum ( no_of_customers ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the city and name of bank branches that provide business loans.",
        "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
    },
    "interaction": [
        {
            "utterance": "What are the names of the bank branches ?",
            "sql": "select bname from bank"
        },
        {
            "utterance": "Which bank branches provide business loans ? | do you want the id or the name of the bank branches ? | Names of the bank branches please .",
            "sql": "select t1 . bname from bank as t1 join loan as t2 on t1 . branch_id = t2 . branch_id where t2 . loan_type = value"
        },
        {
            "utterance": "What is the city of the bank branch that provides business loans ?",
            "sql": "select t1 . city from bank as t1 join loan as t2 on t1 . branch_id = t2 . branch_id where t2 . loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the the name of the customers who have a loan with amount more than 3000.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"
    },
    "interaction": [
        {
            "utterance": "How many customers in this table ?",
            "sql": "select count ( cust_name ) from customer"
        },
        {
            "utterance": "How many loan types in this table ?",
            "sql": "select count ( loan_type ) from loan"
        },
        {
            "utterance": "How many account types in this table ?",
            "sql": "select count ( distinct acc_type ) from customer"
        },
        {
            "utterance": "Find average account balance ?",
            "sql": "select avg ( acc_bal ) from customer"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of customer who has the lowest credit score.",
        "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can i get the customer name who has low credit score",
            "sql": "select cust_name from customer order by credit_score limit value"
        },
        {
            "utterance": "From which state he was ?",
            "sql": "select state from customer order by credit_score limit value"
        },
        {
            "utterance": "Wow ! What was his account type ?",
            "sql": "select acc_type from customer order by credit_score limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
    },
    "interaction": [
        {
            "utterance": "Hi there ! How are you ? Can you show a list of all customer IDs for customers who have loans in the amount of 5000 or more ?",
            "sql": "select t1 . cust_id from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having sum ( t2 . amount ) > = value"
        },
        {
            "utterance": "Excellent ! Can you update that list to include the customer names and their account balances ?",
            "sql": "select t1 . cust_id , t1 . cust_name , t1 . acc_bal from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id group by t1 . cust_name having sum ( t2 . amount ) > = value"
        },
        {
            "utterance": "Awesome ! Finally , can you show me the number of loans and credit score for Owen ?",
            "sql": "select t1 . credit_score , count ( * ) from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id where t1 . cust_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of customer who has the highest amount of loans.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me average of credit scores ?",
            "sql": "select avg ( credit_score ) from customer"
        },
        {
            "utterance": "what is the highest credit score ?",
            "sql": "select max ( credit_score ) from customer"
        },
        {
            "utterance": "what is the highest account balance ?",
            "sql": "select max ( acc_bal ) from customer"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of customers who have loans of both Mortgages and Auto.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"
    },
    "interaction": [
        {
            "utterance": "Who are the customers ?",
            "sql": "select cust_name from customer"
        },
        {
            "utterance": "Which of them have mortgage loans ?",
            "sql": "select t1 . cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id where loan_type = value"
        },
        {
            "utterance": "And which also have auto loans ?",
            "sql": "select t1 . cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id where loan_type = value intersect select t1 . cust_name from customer as t1 join loan as t2 on t1 . cust_id = t2 . cust_id where loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of customers who do not have an saving account.",
        "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
    },
    "interaction": [
        {
            "utterance": "Find the name of customers who do not have a saving account .",
            "sql": "select cust_name from customer except select cust_name from customer where acc_type = value"
        },
        {
            "utterance": "what other types of accounts are available ?",
            "sql": "select acc_type from customer where acc_type ! = value"
        },
        {
            "utterance": "who has the highest credit score ?",
            "sql": "select cust_name from customer order by credit_score desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For each state, find the total account balance of customers whose credit score is above 100.",
        "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"
    },
    "interaction": [
        {
            "utterance": "what is the total balance of customers whose credit score is above 100",
            "sql": "select sum ( acc_bal ) from customer where credit_score > value group by state"
        },
        {
            "utterance": "what is the account type ? | Would you like a list of all the account types ? | yes",
            "sql": "select acc_type from customer"
        },
        {
            "utterance": "what is the credit score for Mary ?",
            "sql": "select credit_score from customer where cust_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know what is the greatest amount of loan to customers that each bank branch has made .",
            "sql": "select t2 . bname , max ( t1 . amount ) from loan as t1 join bank as t2 on t1 . branch_id = t2 . branch_id join customer as t3 on t1 . cust_id = t3 . cust_id group by t2 . bname"
        },
        {
            "utterance": "Can you show me the credit score of the customer receiving the greatest amount of loan ?",
            "sql": "select t2 . credit_score from loan as t1 join customer as t2 on t1 . cust_id = t2 . cust_id order by t1 . amount desc limit value"
        },
        {
            "utterance": "Can you show me the name of the bank branch providing the greatest total amount of loans to customers ?",
            "sql": "select t2 . bname from loan as t1 join bank as t2 on t1 . branch_id = t2 . branch_id join customer as t3 on t1 . cust_id = t3 . cust_id group by t2 . bname order by sum ( t1 . amount ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the name of customer who has the lowest credit score.",
        "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "FIND THE NAME OF CUSTOMER WHO HAS THE LOWEST CREDIT SCORE",
            "sql": "select cust_name from customer order by credit_score limit value"
        },
        {
            "utterance": "FIND THE NAME OF CUSTOMER WHO HAS THE HIGHEST CREDIT SCORE",
            "sql": "select cust_name from customer order by credit_score desc limit value"
        },
        {
            "utterance": "FIND THE NAME OF CUSTOMER WHO HAS HIGH ACCOUNT BALANCE | Did you mean the highest account balance ? | YES",
            "sql": "select cust_name from customer order by acc_bal desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the the name of the customers who have a loan with amount more than 3000.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"
    },
    "interaction": [
        {
            "utterance": "Thanks ! I 'm a bit short on time , so can you provide me with Owens loan amount ?",
            "sql": "select t2 . amount from loan as t2 join customer as t1 on t1 . cust_id = t2 . cust_id where t1 . cust_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the total account balance of each customer from Utah or Texas.",
        "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"
    },
    "interaction": [
        {
            "utterance": "what is the average of account balance ?",
            "sql": "select avg ( acc_bal ) from customer"
        },
        {
            "utterance": "can you show me a list of account type ?",
            "sql": "select distinct acc_type from customer"
        },
        {
            "utterance": "what is the average of credit score ?",
            "sql": "select avg ( credit_score ) from customer"
        },
        {
            "utterance": "find the total account balance of each customer from Utah or Texas",
            "sql": "select sum ( acc_bal ) from customer where state = value or state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the country that has the most perpetrators?",
        "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "tell me the total number of injured in both china and japan",
            "sql": "select sum ( injured ) from perpetrator where country = value or country = value"
        },
        {
            "utterance": "what is the rate of kill in south korea",
            "sql": "select killed from perpetrator where country = value"
        },
        {
            "utterance": "what is the location of ID 3 | Do you mean the perpetrator ID ? | yes the prepetrator ID",
            "sql": "select location from perpetrator where perpetrator_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the location of the perpetrator with the largest kills.",
        "sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many perpetrators are there ?",
            "sql": "select count ( * ) from perpetrator"
        },
        {
            "utterance": "What is the location for each perpetrator ?",
            "sql": "select location from perpetrator"
        },
        {
            "utterance": "Can you tell me the location of the perpetrator with the largest kills ?",
            "sql": "select location from perpetrator order by killed desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of people that are not perpetrators.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)"
    },
    "interaction": [
        {
            "utterance": "what is the name of people that are not perpetrators",
            "sql": "select name from people where people_id not in ( select people_id from perpetrator )"
        },
        {
            "utterance": "what is the weight of John Danks",
            "sql": "select weight from people where name = value"
        },
        {
            "utterance": "what is the height of John Danks",
            "sql": "select height from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the total kills of the perpetrators with height more than 1.84.",
        "sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84"
    },
    "interaction": [
        {
            "utterance": "I want to know how many perpetrators are taller than 1.84 | So do you mean the kills of perpetrators with height more than 1.84 ? | Yes , that 's exactly what I mean",
            "sql": "select sum ( t2 . killed ) from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t1 . height > value"
        },
        {
            "utterance": "How many perpetrators does that include ?",
            "sql": "select count ( t2 . perpetrator_id ) from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t1 . height > value"
        },
        {
            "utterance": "When did the earliest killing take place ?",
            "sql": "select date from perpetrator order by date asc limit value"
        },
        {
            "utterance": "Can you tell me how many people were injured for the most recent date ?",
            "sql": "select injured from perpetrator order by date desc limit value"
        },
        {
            "utterance": "Which country had the most killings and injuries ? | Do you mean killings plus injuries together ? | Yes , that is what I mean .",
            "sql": "select country from perpetrator group by country order by sum ( killed ) +sum ( injured ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of perpetrators whose country is not \"China\"?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\""
    },
    "interaction": [
        {
            "utterance": "Hi - can you please list the names of perpetrators in all countries except for China ?",
            "sql": "select t1 . name from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t2 . country ! = value"
        },
        {
            "utterance": "Great - I forgot to ask , can you please show which countries each of the listed perpetrators are associated with ?",
            "sql": "select t1 . name , t2 . country from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t2 . country ! = value"
        },
        {
            "utterance": "Fantastic - what was the total number of perpetrators in China ?",
            "sql": "select count ( * ) from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t2 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20"
    },
    "interaction": [
        {
            "utterance": "How many countries are there on the list ?",
            "sql": "select count ( country ) from perpetrator"
        },
        {
            "utterance": "Can you list the name of the countries that have perpetrators with injures more than 50 ?",
            "sql": "select country from perpetrator where injured > value"
        },
        {
            "utterance": "Can you also include the name of the contries that have perpetrators with injures smaller than 20 ?",
            "sql": "select country from perpetrator where injured < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the perpetrators in the country China ?",
            "sql": "select t1 . name from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t2 . country = value"
        },
        {
            "utterance": "What are the names of the perpetrators in the country Japan ?",
            "sql": "select t1 . name from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t2 . country = value"
        },
        {
            "utterance": "What are the heights of all the perpetrators in Japan and China ?",
            "sql": "select t1 . height from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t2 . country = value or t2 . country = value"
        },
        {
            "utterance": "What are the weights of all the perpetrators from South Korea ?",
            "sql": "select t1 . weight from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id where t2 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the date of the tallest perpetrator.",
        "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the date of the tallest perpetrator .",
            "sql": "select t2 . date from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id order by t1 . height desc limit value"
        },
        {
            "utterance": "show me the location of the tallest perpetrator .",
            "sql": "select t2 . location from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id order by t1 . height desc limit value"
        },
        {
            "utterance": "what country is Kaio from ?",
            "sql": "select country from perpetrator where location = value"
        },
        {
            "utterance": "how many people were killed in Japan ?",
            "sql": "select sum ( killed ) from perpetrator where country = value"
        },
        {
            "utterance": "how many got injured in japan ?",
            "sql": "select sum ( injured ) from perpetrator where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the perpetrator with the biggest weight.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "HOW MANY PEOPLE HAS KILLED AT SOUTH KOREA ?",
            "sql": "select killed from perpetrator where country = value"
        },
        {
            "utterance": "WHAT IS THE NAME OF THE PERPETRATOR WITH THE BIGGEST WEIGHT ?",
            "sql": "select t1 . name from people as t1 join perpetrator as t2 on t1 . people_id = t2 . people_id order by t1 . weight desc limit value"
        },
        {
            "utterance": "WHERE IS THE LOCATION OF EVENTS IN JAPAN ?",
            "sql": "select location from perpetrator where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the order id and order details for the order more than two invoices.",
        "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many orders have more than two invoices ?",
            "sql": "select count ( * ) from ( select * from invoices as t1 join orders as t2 on t1 . order_id = t2 . order_id group by t2 . order_id having count ( * ) > value )"
        },
        {
            "utterance": "What are the order IDs and details ?",
            "sql": "select t2 . order_id , t2 . order_details from invoices as t1 join orders as t2 on t1 . order_id = t2 . order_id group by t2 . order_id having count ( * ) > value"
        },
        {
            "utterance": "What are the customer ID 's for these orders ?",
            "sql": "select t2 . customer_id from invoices as t1 join orders as t2 on t1 . order_id = t2 . order_id group by t2 . order_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the account id with most number of transactions.",
        "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Please tell me how many accounts payed an amount over $ 600 .",
            "sql": "select count ( distinct account_id ) from financial_transactions where transaction_amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 2,
    "final": {
        "utterance": "How many products were not included in any order?",
        "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    "interaction": [
        {
            "utterance": "How many products are there ?",
            "sql": "select count ( * ) from products"
        },
        {
            "utterance": "How many orders were there ?",
            "sql": "select count ( distinct order_id ) from order_items"
        },
        {
            "utterance": "What is the total number of products not included in any of the orders ?",
            "sql": "select count ( * ) from products where product_id not in ( select product_id from order_items )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 3,
    "final": {
        "utterance": "Show ids for all transactions whose amounts are greater than the average.",
        "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
    },
    "interaction": [
        {
            "utterance": "What is the average amount of transaction ?",
            "sql": "select avg ( transaction_amount ) from financial_transactions"
        },
        {
            "utterance": "What are ids of all transactions with amount greater than the average ?",
            "sql": "select transaction_id from financial_transactions where transaction_amount > ( select avg ( transaction_amount ) from financial_transactions )"
        },
        {
            "utterance": "And what are their transaction dates ?",
            "sql": "select transaction_date from financial_transactions where transaction_amount > ( select avg ( transaction_amount ) from financial_transactions )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the first name and last name for the customer with account name 900.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    "interaction": [
        {
            "utterance": "Show the first name and last name for the customer with account name 900 .",
            "sql": "select t2 . customer_first_name , t2 . customer_last_name from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . account_name = value"
        },
        {
            "utterance": "What is a login name of Dee A Larkin ?",
            "sql": "select login_name from customers where customer_first_name = value and customer_middle_initial = value and customer_last_name = value"
        },
        {
            "utterance": "Final question is How many customers in the table ?",
            "sql": "select count ( customer_id ) from customers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the order id and order details for the order more than two invoices.",
        "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "how many Invoices there",
            "sql": "select count ( * ) from invoices"
        },
        {
            "utterance": "how many orders there",
            "sql": "select count ( * ) from orders"
        },
        {
            "utterance": "what is the customer id of order id 3",
            "sql": "select customer_id from orders where order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 6,
    "final": {
        "utterance": "How many products were not included in any order?",
        "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    "interaction": [
        {
            "utterance": "* I have left the chat *",
            "sql": "select product_id from order_items where order_item_id = value"
        },
        {
            "utterance": "How many product quantity does order item 1 have ?",
            "sql": "select product_quantity from order_items where order_item_id = value"
        },
        {
            "utterance": "What is the product type code of order item 1 ?",
            "sql": "select production_type_code from order_items as t1 join products as t2 on t1 . product_id = t2 . product_id where t1 . order_item_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all product names and the number of customers having an order on each product.",
        "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
    },
    "interaction": [
        {
            "utterance": "Show all product names and the number of customers having an order on each product .",
            "sql": "select t2 . product_name , count ( * ) from order_items as t1 join products as t2 on t1 . product_id = t2 . product_id join orders as t3 on t3 . order_id = t1 . order_id group by t2 . product_name"
        },
        {
            "utterance": "Please show me unit price of books ?",
            "sql": "select unit_price from products where production_type_code = value"
        },
        {
            "utterance": "Please give me Placed order date of customer id 12 ?",
            "sql": "select date_order_placed from orders where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 8,
    "final": {
        "utterance": "How many transaction does account with name 337 have?",
        "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    "interaction": [
        {
            "utterance": "Hello ! How many transactions are there total ?",
            "sql": "select count ( * ) from financial_transactions"
        },
        {
            "utterance": "Perfect ! And is there an account number of 337 ? | Do you mean the account name ? | Yes the account name being 337 .",
            "sql": "select * from accounts where account_name = value"
        },
        {
            "utterance": "How many total transactions does that account have ?",
            "sql": "select count ( * ) from financial_transactions as t1 join accounts as t2 on t1 . account_id = t2 . account_id where t2 . account_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\""
    },
    "interaction": [
        {
            "utterance": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling ?",
            "sql": "select t1 . account_name , t1 . other_account_details from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t2 . customer_first_name = value and t2 . customer_last_name = value"
        },
        {
            "utterance": "what is the total number of customers ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "ok .Who is the number one customer ? | Do you mean the customer with id 1 | yes",
            "sql": "select * from customers where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 10,
    "final": {
        "utterance": "Show first name and id for all customers with at least 2 accounts.",
        "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you show me the first names of customers and the number of accounts they have ?",
            "sql": "select t2 . customer_first_name , count ( * ) from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id"
        },
        {
            "utterance": "Which customers have at least 2 accounts ? List their first names please .",
            "sql": "select t2 . customer_first_name from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the first name and last name for the customer with account name 900.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with the first and last name of the customer who has account name 900 ?",
            "sql": "select t2 . customer_first_name , t2 . customer_last_name from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . account_name = value"
        },
        {
            "utterance": "Great ! Could you update this list to show me Meaghan 's email address and phone number as well ?",
            "sql": "select t2 . customer_first_name , t2 . customer_last_name , t2 . email_address , t2 . phone_number from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . account_name = value"
        },
        {
            "utterance": "Great ! Finally , can you show me all other customers names ( first and last ) who have the same `` other account details '' details as Meaghan ?",
            "sql": "select distinct t2 . customer_first_name , t2 . customer_last_name from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id where t1 . other_account_details = ( select other_account_details from accounts where account_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"
    },
    "interaction": [
        {
            "utterance": "Hello , I was wondering how many accounts are listed under the first name of John ?",
            "sql": "select count ( distinct account_id ) from customers as t1 join accounts as t2 on t2 . customer_id = t1 . customer_id where customer_first_name = value"
        },
        {
            "utterance": "How about Meaghan or Jessica ?",
            "sql": "select count ( distinct account_id ) from customers as t1 join accounts as t2 on t2 . customer_id = t1 . customer_id where customer_first_name = value or customer_first_name = value"
        },
        {
            "utterance": "Okay , could you just give me the account names listed under Meaghan first ?",
            "sql": "select account_name from customers as t1 join accounts as t2 on t2 . customer_id = t1 . customer_id where customer_first_name = value"
        },
        {
            "utterance": "And what are the id 's for those accounts ?",
            "sql": "select account_id from customers as t1 join accounts as t2 on t2 . customer_id = t1 . customer_id where customer_first_name = value"
        },
        {
            "utterance": "Thank you so much , now back to the accounts listed for Jessica . What are the account names of those ?",
            "sql": "select account_name from customers as t1 join accounts as t2 on t2 . customer_id = t1 . customer_id where customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 13,
    "final": {
        "utterance": "Show id, first name and last name for all customers and the number of accounts.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    "interaction": [
        {
            "utterance": "What are first and last names of all customers ?",
            "sql": "select customer_first_name , customer_last_name from customers"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select customer_id from customers"
        },
        {
            "utterance": "And what are their number of accounts ?",
            "sql": "select count ( * ) from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id"
        },
        {
            "utterance": "Yes , what type of accounts are there ?",
            "sql": "select distinct other_account_details from accounts"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the customer last name, id and phone number with most number of orders?",
        "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many orders did the person with the most orders have ?",
            "sql": "select count ( * ) from orders group by customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "who was that person ? Give me the id .",
            "sql": "select customer_id from orders group by customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "can you give me the last name , id , and phone number of the person with the most order ?",
            "sql": "select t1 . customer_last_name , t1 . customer_id , t1 . phone_number from customers as t1 join orders as t2 on t1 . customer_id = t2 . customer_id group by t2 . customer_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the customer last name, id and phone number with most number of orders?",
        "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many orders does the customer with the most orders have ?",
            "sql": "select count ( * ) from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "who has the second most orders ? | Do you want the customer first name or something else ? | something else , that was a typo . What I meant to say was , how many orders does the person with the second most orders have ?",
            "sql": "select count ( * ) from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "when was the customer with the most order 's last order placed ?",
            "sql": "select date_order_placed from orders where customer_id in ( select t1 . customer_id from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value ) order by date_order_placed desc limit value"
        },
        {
            "utterance": "what is that customer 's gender ?",
            "sql": "select t2 . gender from orders as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the customer id, first and last name with most number of accounts.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the customer ID of the customer with the most number of accounts ?",
            "sql": "select t1 . customer_id from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is their first name ? | Do you mean their ? can you give more info ? | What is the customer first name of the customer with the most number of accounts ?",
            "sql": "select t2 . customer_first_name from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the customer last name of the customer with the most number of accounts ?",
            "sql": "select t2 . customer_last_name from accounts as t1 join customers as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the most common participant type?",
        "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many participants on the table",
            "sql": "select count ( * ) from participants"
        },
        {
            "utterance": "what is participant type code of karlee batz",
            "sql": "select participant_type_code from participants where participant_details = value"
        },
        {
            "utterance": "what is most common participant type",
            "sql": "select participant_type_code from participants group by participant_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the participant id in lupe deckow",
            "sql": "select participant_id from participants where participant_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 1,
    "final": {
        "utterance": "How many events did not have any participants?",
        "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
    },
    "interaction": [
        {
            "utterance": "Show me the details of all participants .",
            "sql": "select * from participants_in_events"
        },
        {
            "utterance": "show me the details of the events . | here are the details of all events | How many events did not have any participants ?",
            "sql": "select count ( * ) from events where event_id not in ( select event_id from participants_in_events )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 2,
    "final": {
        "utterance": "what are the event details of the services that have the type code 'Marriage'?",
        "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'"
    },
    "interaction": [
        {
            "utterance": "How many events with `` Marriage '' type codes are there ? | There are 5 events with the `` Marriage '' service type code . | What are event details associated with the event of this type code ?",
            "sql": "select t1 . event_details from events as t1 join services as t2 on t1 . service_id = t2 . service_id where t2 . service_type_code = value"
        },
        {
            "utterance": "How many among them are with `` success '' ?",
            "sql": "select count ( * ) from events as t1 join services as t2 on t1 . service_id = t2 . service_id where t2 . service_type_code = value and event_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 3,
    "final": {
        "utterance": "How many events had participants whose details had the substring 'Dr.'",
        "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
    },
    "interaction": [
        {
            "utterance": "How many participants are there ?",
            "sql": "select count ( * ) from participants"
        },
        {
            "utterance": "How about the total number of events ?",
            "sql": "select count ( distinct event_id ) from participants_in_events"
        },
        {
            "utterance": "Can you list the events that have participents whose details had the substring 'Dr . ' ?",
            "sql": "select t2 . event_id from participants as t1 join participants_in_events as t2 on t1 . participant_id = t2 . participant_id where t1 . participant_details like value"
        },
        {
            "utterance": "Can you please list all those events with their participants ' names ?",
            "sql": "select t2 . event_id , t1 . participant_details from participants as t1 join participants_in_events as t2 on t1 . participant_id = t2 . participant_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 4,
    "final": {
        "utterance": "Which services type had both successful and failure event details?",
        "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'"
    },
    "interaction": [
        {
            "utterance": "Which services type had successful event details ?",
            "sql": "select t1 . service_type_code from services as t1 join events as t2 on t1 . service_id = t2 . service_id where t2 . event_details = value"
        },
        {
            "utterance": "What about events that had failure for their event details ?",
            "sql": "select t1 . service_type_code from services as t1 join events as t2 on t1 . service_id = t2 . service_id where t2 . event_details = value"
        },
        {
            "utterance": "Which service types had both success and failure for their event details ?",
            "sql": "select t1 . service_type_code from services as t1 join events as t2 on t1 . service_id = t2 . service_id where t2 . event_details = value intersect select t1 . service_type_code from services as t1 join events as t2 on t1 . service_id = t2 . service_id where t2 . event_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 5,
    "final": {
        "utterance": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    "interaction": [
        {
            "utterance": "Which event id does not have any participant with the detail Kneyatta Kuhn ?",
            "sql": "select event_id from events except select t1 . event_id from participants_in_events as t1 join participants as t2 on t1 . participant_id = t2 . participant_id where participant_details = value"
        },
        {
            "utterance": "And how about the detail `` Karlee Batz '' ?",
            "sql": "select event_id from events except select t1 . event_id from participants_in_events as t1 join participants as t2 on t1 . participant_id = t2 . participant_id where participant_details = value"
        },
        {
            "utterance": "Which event id does have a participant with the detail Kenyatta Kuhn ?",
            "sql": "select t1 . event_id from events as t1 join participants_in_events as t2 join participants as t3 where participant_details = value"
        },
        {
            "utterance": "How many events have the event detail fail ?",
            "sql": "select count ( * ) from events where event_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the ids and details of events that have more than one participants?",
        "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What ids have more than one participant ? | Which kind of ID do you mean ? | Event ID and Service ID",
            "sql": "select t1 . event_id , t1 . service_id from events as t1 join participants_in_events as t2 on t1 . event_id = t2 . event_id group by t1 . event_id having count ( * ) > value"
        },
        {
            "utterance": "And which Event Details have more than one participant ? | Do you mean the Event Details of the event ? | I mean the details of the events that have more than one participant .",
            "sql": "select t1 . event_details from events as t1 join participants_in_events as t2 on t1 . event_id = t2 . event_id group by t1 . event_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 7,
    "final": {
        "utterance": "How many events had participants whose details had the substring 'Dr.'",
        "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( distinct event_id ) from participants_in_events"
        },
        {
            "utterance": "How many of them had participants whose details had substring `` Dr '' ?",
            "sql": "select count ( * ) from participants as t1 join participants_in_events as t2 on t1 . participant_id = t2 . participant_id where t1 . participant_details like value"
        },
        {
            "utterance": "What is his name ?",
            "sql": "select participant_details from participants as t1 join participants_in_events as t2 on t1 . participant_id = t2 . participant_id where t1 . participant_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the ids and details of events that have more than one participants?",
        "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Excellent ! Can you show me a list of the event IDs and event details for each of those five events which have more than one participant ?",
            "sql": "select t1 . event_id , t1 . event_details from events as t1 join participants_in_events as t2 on t1 . event_id = t2 . event_id group by t1 . event_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 0,
    "final": {
        "utterance": "Which college have both players with position midfielder and players with position defender?",
        "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "Tell me the Draft Class for the season 1996.0 ?",
            "sql": "select draft_class from match_season where season = value"
        },
        {
            "utterance": "Tell me the Draft Pick Number for the country 6 ? | For which season do you want ? | for 1998.0",
            "sql": "select draft_pick_number from match_season where season = value and country = value"
        },
        {
            "utterance": "Tell me the player for team 1 in the season 1996 ?",
            "sql": "select player from match_season where season = value and team = value"
        },
        {
            "utterance": "Which college have both players with position midfielder and players with position defender ?",
            "sql": "select college from match_season where position = value intersect select college from match_season where position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name of colleges that have at least two players.",
        "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello Yes , I 'm interested to know which college has two players",
            "sql": "select college from match_season group by college having count ( * ) = value"
        },
        {
            "utterance": "Oh , I see , and what are the names of the players from UCLA ?",
            "sql": "select player from match_season where college = value"
        },
        {
            "utterance": "Can you also tell me which position they play ?",
            "sql": "select player , position from match_season where college = value"
        },
        {
            "utterance": "Great , I 'm a bit curious as to how many players does UNLV have",
            "sql": "select count ( * ) from match_season where college = value"
        },
        {
            "utterance": "One player , okay was the season 1997 ?",
            "sql": "select season from match_season where college = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 2,
    "final": {
        "utterance": "Which college have both players with position midfielder and players with position defender?",
        "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "What colleges do the players play for ? | * I have left the chat * | Yes , please",
            "sql": "select distinct college from match_season"
        },
        {
            "utterance": "Thank you . And what are the names of the players who play for those schools ?",
            "sql": "select player from match_season"
        },
        {
            "utterance": "Thank you . Which players play midfielder ?",
            "sql": "select player from match_season where position = value"
        },
        {
            "utterance": "Which college have both players with position midfielder and players with position defender ?",
            "sql": "select college from match_season where position = value intersect select college from match_season where position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all official native languages that contain the word \"English\".",
        "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    "interaction": [
        {
            "utterance": "how many different languages do countries speak ?",
            "sql": "select count ( distinct official_native_language ) from country"
        },
        {
            "utterance": "how many of them are some form of English ?",
            "sql": "select count ( distinct official_native_language ) from country where official_native_language like value"
        },
        {
            "utterance": "please list those languages",
            "sql": "select official_native_language from country where official_native_language like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 4,
    "final": {
        "utterance": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE Indonesia CAPITAL",
            "sql": "select capital from country where country_name = value"
        },
        {
            "utterance": "WHAT IS THE Iran OF CAPITAL | Did you mean the capital of the country named Iran ? | YES EXACTLY",
            "sql": "select capital from country where country_name = value"
        },
        {
            "utterance": "HOW MANY DISTINCT OFFICIAL LANGUAGES ARE THERE AMONG COUNTRIES OF PLAYERS WHOSE POSITIONS ARE DEFENDERS",
            "sql": "select count ( distinct t1 . official_native_language ) from country as t1 join match_season as t2 on t1 . country_id = t2 . country where t2 . position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the players and years played for players from team \"Columbus Crew\".",
        "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    "interaction": [
        {
            "utterance": "Show the players and years played for players from team `` Columbus Crew '' .",
            "sql": "select t1 . player , t1 . years_played from player as t1 join team as t2 on t1 . team = t2 . team_id where t2 . name = value"
        },
        {
            "utterance": "What is Hong 's singles record ?",
            "sql": "select singles_wl from player where player like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""
    },
    "interaction": [
        {
            "utterance": "how many countries are participated ?",
            "sql": "select count ( distinct country ) from match_season"
        },
        {
            "utterance": "how many players are participated ?",
            "sql": "select count ( distinct player ) from match_season"
        },
        {
            "utterance": "how many colleges are participated ?",
            "sql": "select count ( distinct college ) from match_season"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    "interaction": [
        {
            "utterance": "Yes , sorry that I did n't make it clear . I meant the corresponding name and ID of the country for Dublin as capital , in the `` country '' table .",
            "sql": "select country_name , country_id from country where capital = value"
        },
        {
            "utterance": "Thank you . Then could you please show me the positions of players from Ireland ? So country ID 4",
            "sql": "select position from match_season where country = value"
        },
        {
            "utterance": "Great , thank you . What about their names ?",
            "sql": "select player from match_season where country = value"
        },
        {
            "utterance": "Thank you . Then could you please show me the players from Iraq ? | Do you want their names ? | yes , the 'player ' field , so names .",
            "sql": "select t1 . player from match_season as t1 join country as t2 on t1 . country = t2 . country_id where t2 . country_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the distinct position of players from college UCLA or Duke.",
        "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    "interaction": [
        {
            "utterance": "What are the different colleges this season ?",
            "sql": "select distinct college from match_season"
        },
        {
            "utterance": "How many players are playing for the listed colleges ?",
            "sql": "select college , count ( * ) from match_season group by college"
        },
        {
            "utterance": "What are the draft classes for the players from UCLA and Duke ?",
            "sql": "select distinct draft_class from match_season where college = value or college = value"
        },
        {
            "utterance": "Could you tell me the draft pick numbers of the players from those draft classes ?",
            "sql": "select draft_pick_number from match_season where draft_class in ( select distinct draft_class from match_season where college = value or college = value )"
        },
        {
            "utterance": "What players were those draft pick numbers for ? | do you want to see both the players and the draft pick numbers ? | Yes please .",
            "sql": "select player , draft_pick_number from match_season where draft_class in ( select distinct draft_class from match_season where college = value or college = value )"
        },
        {
            "utterance": "What are the positions of each of those players ?",
            "sql": "select position , player , draft_pick_number from match_season where draft_class in ( select distinct draft_class from match_season where college = value or college = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    "interaction": [
        {
            "utterance": "WHAT ARE THE DISTINCT POSITIONS OF THE PLAYERS FROM COUNTRY WHOSE CAPITAL IS DUBLIN",
            "sql": "select distinct t2 . position from country as t1 join match_season as t2 on t1 . country_id = t2 . country where t1 . capital = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many students live in HKG or CHI?",
        "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
    },
    "interaction": [
        {
            "utterance": "Where does the student live ? | Which student are you referring to ? | Is there any students living in HKG or CHI ?",
            "sql": "select count ( * ) from student where city_code = value or city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many students have a food allergy?",
        "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of allergies ?",
            "sql": "select allergy from allergy_type"
        },
        {
            "utterance": "can you show me a list of allergy name ?",
            "sql": "select allergy from allergy_type"
        },
        {
            "utterance": "what is their allergy types ?",
            "sql": "select distinct allergytype from allergy_type"
        },
        {
            "utterance": "how many students have a food allergy ?",
            "sql": "select count ( * ) from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all student IDs who have at least two allergies.",
        "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( distinct stuid ) from has_allergy"
        },
        {
            "utterance": "How many allergies are there ?",
            "sql": "select count ( distinct allergy ) from has_allergy"
        },
        {
            "utterance": "Can you display all student IDs with at least two allergies ?",
            "sql": "select stuid from has_allergy group by stuid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many female students have milk or egg allergies?",
        "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    "interaction": [
        {
            "utterance": "Can you list the student ids and their allergies ?",
            "sql": "select stuid , allergy from has_allergy"
        },
        {
            "utterance": "How many students have milk or egg allergies ?",
            "sql": "select count ( * ) from has_allergy as t1 join student as t2 on t1 . stuid = t2 . stuid where t1 . allergy = value or t1 . allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the student id of the oldest student.",
        "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
    },
    "interaction": [
        {
            "utterance": "What is the most common major ?",
            "sql": "select major from student group by major order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of the oldest student ?",
            "sql": "select lname , fname from student where age = ( select max ( age ) from student )"
        },
        {
            "utterance": "What is that student 's Id ?",
            "sql": "select stuid from student where age = ( select max ( age ) from student )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the last name and age of the student who has allergy to both milk and cat.",
        "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    "interaction": [
        {
            "utterance": "Which student have allergy to both milk and cats ? | Here are the student ids of the students who have allergies to both milk and cat . | What are their last names ?",
            "sql": "select lname from student where stuid in ( select stuid from has_allergy where allergy = value intersect select stuid from has_allergy where allergy = value )"
        },
        {
            "utterance": "And what about their age ?",
            "sql": "select lname , age from student where stuid in ( select stuid from has_allergy where allergy = value intersect select stuid from has_allergy where allergy = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which allergy has most number of students affected?",
        "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Most number of students affected by which allergy ?",
            "sql": "select allergy from has_allergy group by allergy order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which allergy affects student ID 1001",
            "sql": "select allergy from has_allergy where stuid = value"
        },
        {
            "utterance": "Which allergy affects student ID 1002",
            "sql": "select allergy from has_allergy where stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the average age of the students who have allergies with food and animal types.",
        "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
    },
    "interaction": [
        {
            "utterance": "Can you list all student IDs that have any kind of allergy ?",
            "sql": "select stuid from has_allergy"
        },
        {
            "utterance": "Can you filter the list to only show student IDs that have food and animal type allergies ?",
            "sql": "select t1 . stuid from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value intersect select t1 . stuid from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value"
        },
        {
            "utterance": "Can you display the ages associated with those student IDs ?",
            "sql": "select age from student where stuid in ( select t1 . stuid from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value intersect select t1 . stuid from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value )"
        },
        {
            "utterance": "What is the average of those 3 ages ?",
            "sql": "select avg ( age ) from student where stuid in ( select t1 . stuid from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value intersect select t1 . stuid from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List the first and last name of the students who do not have any food type allergy.",
        "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    "interaction": [
        {
            "utterance": "Which students have allergies ? | Do you want to return their first and last names or other info ? | Just names",
            "sql": "select t2 . fname , t2 . lname from has_allergy as t1 join student as t2 on t1 . stuid = t2 . stuid"
        },
        {
            "utterance": "How many students do n't have any type of allergy ?",
            "sql": "select count ( * ) from student where stuid not in ( select t2 . stuid from has_allergy as t1 join student as t2 on t1 . stuid = t2 . stuid )"
        },
        {
            "utterance": "What are their full names ?",
            "sql": "select lname , fname from student where stuid not in ( select t2 . stuid from has_allergy as t1 join student as t2 on t1 . stuid = t2 . stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which major has most number of students?",
        "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which major has the highest number of students ?",
            "sql": "select major from student group by major order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the average age of the students in this major ?",
            "sql": "select avg ( age ) from student where major = ( select major from student group by major order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What is the sex of the students in this major ?",
            "sql": "select sex from student where major = ( select major from student group by major order by count ( * ) desc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which allergy type has least number of allergies?",
        "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many allergies does the food allergy type have ?",
            "sql": "select count ( allergy ) from allergy_type where allergytype = value"
        },
        {
            "utterance": "How many allergies does the animal allergy type have ?",
            "sql": "select count ( allergy ) from allergy_type where allergytype = value"
        },
        {
            "utterance": "How many allergies does the environmental allergy type have ?",
            "sql": "select count ( allergy ) from allergy_type where allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the number of male (sex is 'M') students who have some food type allery.",
        "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    "interaction": [
        {
            "utterance": "Could you please find the number of male ( sex is 'M ' ) students who have some type of food allergy ?",
            "sql": "select count ( * ) from student where sex = value and stuid in ( select stuid from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy where t2 . allergytype = value )"
        },
        {
            "utterance": "What are their full names and the names of the food allergies they have ?",
            "sql": "select t3 . fname , t3 . lname , t2 . allergy from has_allergy as t1 join allergy_type as t2 on t1 . allergy = t2 . allergy join student as t3 on t3 . stuid = t1 . stuid where t2 . allergytype = value and t3 . sex = value"
        },
        {
            "utterance": "How many female students are allergic to cats ?",
            "sql": "select count ( * ) from has_allergy as t1 join student as t2 on t2 . stuid = t1 . stuid where t1 . allergy = value and t2 . sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    "interaction": [
        {
            "utterance": "how many female students presented on table",
            "sql": "select count ( * ) from student where sex = value"
        },
        {
            "utterance": "what is the age of smith | Do you mean the age of the student whose last name is Smith ? | exactly",
            "sql": "select age from student where lname = value"
        },
        {
            "utterance": "exactly | I mean which one do you want to know , first name or last name or both ? | i want first name",
            "sql": "select fname from student order by advisor desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the first name and major of the students who are not allegry to soy.",
        "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    "interaction": [
        {
            "utterance": "How many different types of allergies are there ?",
            "sql": "select count ( distinct allergy ) from has_allergy"
        },
        {
            "utterance": "What allergy is most prevalent among students ?",
            "sql": "select allergy from student as t1 join has_allergy as t2 on t1 . stuid = t2 . stuid group by allergy order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many male students have a tree pollen allergy ?",
            "sql": "select count ( * ) from student as t1 join has_allergy as t2 on t1 . stuid = t2 . stuid where allergy = value and t1 . sex = value"
        },
        {
            "utterance": "How many students have a soy allergy ?",
            "sql": "select count ( * ) from student where stuid in ( select stuid from has_allergy where allergy = value )"
        },
        {
            "utterance": "How many students do n't have a soy allergy ?",
            "sql": "select count ( * ) from student where stuid not in ( select stuid from has_allergy where allergy = value )"
        },
        {
            "utterance": "Can you list them for me with their names and majors ? | First name ? | Yes please . First name and major .",
            "sql": "select fname , major from student where stuid not in ( select stuid from has_allergy where allergy = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which allergy has most number of students affected?",
        "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which allergy has the most number of students affected ?",
            "sql": "select allergy from has_allergy group by allergy order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many students has tree pollen affected ?",
            "sql": "select count ( stuid ) from has_allergy where allergy = value"
        },
        {
            "utterance": "Which allergy has the least number of students affected ?",
            "sql": "select allergy from has_allergy group by allergy order by count ( * ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which advisor has most number of students?",
        "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know advisor with the most number of students",
            "sql": "select advisor from student group by advisor order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the advisor with the least number of students",
            "sql": "select advisor from student group by advisor order by count ( * ) asc limit value"
        },
        {
            "utterance": "Could you tell me the names of both advisors with the most and the least number of students ?",
            "sql": "select advisor from student where advisor = ( select advisor from student group by advisor order by count ( * ) asc limit value ) or advisor = ( select advisor from student group by advisor order by count ( * ) desc limit value ) group by advisor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"
    },
    "interaction": [
        {
            "utterance": "Can you give me the allergies that the student with the first name Lisa has",
            "sql": "select t1 . allergy from allergy_type as t1 join has_allergy as t2 on t1 . allergy = t2 . allergy join student as t3 on t3 . stuid = t2 . stuid where t3 . fname = value"
        },
        {
            "utterance": "Are there any other names that have allergies | Do you want the first name or the last name of students other than Lisa who have allergies ? | Can i have the list of foods that Lisa is allergic to",
            "sql": "select t1 . allergy from allergy_type as t1 join has_allergy as t2 on t1 . allergy = t2 . allergy join student as t3 on t3 . stuid = t2 . stuid where t3 . fname = value and t1 . allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
    },
    "interaction": [
        {
            "utterance": "Can you get me the first names of students that have a milk allergy ?",
            "sql": "select distinct t1 . fname from student as t1 join has_allergy as t2 on t1 . stuid = t2 . stuid where t2 . allergy = value"
        },
        {
            "utterance": "Can you list the cities of these students ? | Do you want both the cities and the first names of the students ? | Yes . Can you please provide both simultaneously ?",
            "sql": "select distinct t1 . city_code , t1 . fname from student as t1 join has_allergy as t2 on t1 . stuid = t2 . stuid where t2 . allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which city does student Linda Smith live in?",
        "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "What is the student Id of Linda Smith ?",
            "sql": "select stuid from student where fname = value and lname = value"
        },
        {
            "utterance": "What is her age ?",
            "sql": "select age from student where fname = value and lname = value"
        },
        {
            "utterance": "What city is she in ?",
            "sql": "select city_code from student where fname = value and lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which major has least number of students? List the major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which city code of Smith ? | Is Smith first name or last name ? | first name",
            "sql": "select city_code from student where fname = value"
        },
        {
            "utterance": "What age of last name Kim ?",
            "sql": "select age from student where lname = value"
        },
        {
            "utterance": "What are the student id of city code WAS ?",
            "sql": "select stuid from student where city_code = value"
        },
        {
            "utterance": "Which major has least number of students ? List the major and the number of students .",
            "sql": "select major , count ( * ) from student group by major order by count ( major ) asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"
    },
    "interaction": [
        {
            "utterance": "Which major has between 2 and 30 number of students ? List major and the number of students .",
            "sql": "select major , count ( * ) from student group by major having count ( major ) between value and value"
        },
        {
            "utterance": "Which major has highest number of students ? List the students First name ?",
            "sql": "select major , fname from student where major = ( select major from student group by major order by count ( * ) desc limit value )"
        },
        {
            "utterance": "Which major has least number of students ? List the students First name ?",
            "sql": "select major , fname from student where major = ( select major from student group by major order by count ( * ) asc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many restaurant is the Sandwich type restaurant?",
        "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
    },
    "interaction": [
        {
            "utterance": "show me the name of the restaurant with ResID 1 ?",
            "sql": "select resname from restaurant where resid = value"
        },
        {
            "utterance": "can you show me the address of the restaurant with ResID 1 ?",
            "sql": "select address from restaurant where resid = value"
        },
        {
            "utterance": "Can you show me the rating of the restaurant with ResID 1 ?",
            "sql": "select rating from restaurant where resid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;"
    },
    "interaction": [
        {
            "utterance": "Hello , how many students are over 18 ?",
            "sql": "select count ( * ) from student where age > value"
        },
        {
            "utterance": "Perfect , and how many of those students are majoring in 600 ?",
            "sql": "select count ( * ) from student where major = value"
        },
        {
            "utterance": "Can you list each student 's first and last name ? | Students majoring in 600 ? | Yes that are over 18 as well .",
            "sql": "select fname , lname from student where age > value and major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How many restaurant is the Sandwich type restaurant?",
        "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
    },
    "interaction": [
        {
            "utterance": "How many Restaurants are there ?",
            "sql": "select count ( * ) from restaurant"
        },
        {
            "utterance": "Where is Subway located ?",
            "sql": "select address from restaurant where resname = value"
        },
        {
            "utterance": "What is Subway 's rating ?",
            "sql": "select rating from restaurant where resname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"
    },
    "interaction": [
        {
            "utterance": "List major and number of students for majors with 2 to 30 number of students",
            "sql": "select major , count ( * ) from student group by major having count ( major ) between value and value"
        },
        {
            "utterance": "Which majors have between 2 and 20 students ? Show me major and number of students",
            "sql": "select major , count ( * ) from student group by major having count ( major ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 7,
    "final": {
        "utterance": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';"
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the list of all female students who are older than 18 and not majoring in 600 ? | what did you want to get about female students who are older than 18 and not majoring in 600 ? | Oh sorry for the confusion , it would be great if I can see their first and last name .",
            "sql": "select fname , lname from student where age > value and major ! = value and sex = value"
        },
        {
            "utterance": "Thank you very much ! Then could you please show me the male students ' first and last name with the same condition ? Meaning older than 18 and not majoring in 600 .",
            "sql": "select fname , lname from student where age > value and major ! = value and sex = value"
        },
        {
            "utterance": "Thank you again . Could you please let me know who are the oldest among them with his age ? | Did you mean base on the last one question ? | yes please , so my question would be about the oldest male student who is not majoring in 600 .",
            "sql": "select fname , lname from student where major ! = value and sex = value order by age desc limit value"
        },
        {
            "utterance": "Then could you please let me know what is Ian Thornton 's major and advisor code ?",
            "sql": "select major , advisor from student where lname = value and fname = value"
        },
        {
            "utterance": "Thank you very much . This will be my last question , could you please show me the name of female students who are majoring in 520 , if there are any ? | Did you mean the full name about those ? | yes please , first and last name would be great .",
            "sql": "select fname , lname from student where sex = value and major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which city does student Linda Smith live in?",
        "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "What is the name of the city the student by the name of Linda Smith is from ? | Do you mean the code of the city ? since we do n't have the name of cities . | Yes , please",
            "sql": "select city_code from student where fname = value and lname = value"
        },
        {
            "utterance": "What are the first and last names of all students with the sex `` F '' ?",
            "sql": "select fname , lname from student where sex = value"
        },
        {
            "utterance": "What are their city codes ?",
            "sql": "select city_code from student where sex = value"
        },
        {
            "utterance": "What is the name of the oldest student ?",
            "sql": "select fname , lname from student order by age desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the age of student Linda Smith?",
        "sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "What is the age of the student named Linda Smith ?",
            "sql": "select age from student where fname = value and lname = value"
        },
        {
            "utterance": "Yes , please . | First OR last OR both ? | Both , please . Sorry !",
            "sql": "select fname , lname from student order by age desc limit value"
        },
        {
            "utterance": "Who is the advisor of the youngest student ?",
            "sql": "select advisor from student order by age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How long does student Linda Smith spend on the restaurant in total?",
        "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "Are there any other students with the same city code as Linda Smith ?",
            "sql": "select * from student where city_code = ( select city_code from student where fname = value and lname = value ) and fname ! = value and lname ! = value"
        },
        {
            "utterance": "Of those three students , can you tell me which of them have more time spent in restaurants than Linda Smith ?",
            "sql": "select t1 . stuid , sum ( t2 . spent ) from student as t1 join visits_restaurant as t2 where city_code = ( select city_code from student where fname = value and lname = value ) and fname ! = value and lname ! = value group by t1 . stuid having sum ( t2 . spent ) > ( select sum ( spent ) from student as t1 join visits_restaurant as t2 on t1 . stuid = t2 . stuid where t1 . fname = value and t1 . lname = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the id of the project with least number of documents?",
        "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the ID of the project with the least number of documents ?",
            "sql": "select project_id from documents group by project_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "What is the ID of the project with the most number of documents ?",
            "sql": "select project_id from documents group by project_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the document date of project ID 105 ? | Do you mean Document ID 105 | yes",
            "sql": "select document_date from documents where document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the project detail for the project with document \"King Book\"?",
        "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\""
    },
    "interaction": [
        {
            "utterance": "What is the project detail for the project with document `` King Book '' ?",
            "sql": "select t1 . project_details from projects as t1 join documents as t2 on t1 . project_id = t2 . project_id where t2 . document_name = value"
        },
        {
            "utterance": "What is the document date for the project with document `` King Book '' ?",
            "sql": "select t2 . document_date from projects as t1 join documents as t2 on t1 . project_id = t2 . project_id where t2 . document_name = value"
        },
        {
            "utterance": "How many documents are there with the document type code `` CV '' ?",
            "sql": "select count ( t2 . document_date ) from projects as t1 join documents as t2 on t1 . project_id = t2 . project_id where t2 . document_type_code = value"
        },
        {
            "utterance": "How many documents are there with the document type code `` BK '' ?",
            "sql": "select count ( t2 . document_date ) from projects as t1 join documents as t2 on t1 . project_id = t2 . project_id where t2 . document_type_code = value"
        },
        {
            "utterance": "What are the document dates of all documents with the document type code `` BK '' ?",
            "sql": "select t2 . document_date from projects as t1 join documents as t2 on t1 . project_id = t2 . project_id where t2 . document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the ids for projects with at least 2 documents.",
        "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Could you please show me the ids of the projects with at least 2 documents ?",
            "sql": "select project_id from documents group by project_id having count ( * ) > = value"
        },
        {
            "utterance": "What about those with at least 3 documents ?",
            "sql": "select project_id from documents group by project_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the dates of those , please ?",
            "sql": "select project_id , document_date from documents group by project_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the dates of the projects with at least 2 documents , please ? | Do you mean the projects of documents , not projects , right ? | Yes",
            "sql": "select document_date from documents where project_id in ( select project_id from documents group by project_id having count ( * ) > = value )"
        },
        {
            "utterance": "What are the project ids of those ?",
            "sql": "select project_id from documents group by project_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 3,
    "final": {
        "utterance": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'"
    },
    "interaction": [
        {
            "utterance": "Hello , how many total documents are there ?",
            "sql": "select count ( * ) from documents"
        },
        {
            "utterance": "Can you tell me the document type code , name , and description of the document with the name 'Noel CV ' ?",
            "sql": "select document_type_code , document_name , document_description from documents where document_name = value"
        },
        {
            "utterance": "Perfect , and can you do the same with 'King Book ' ?",
            "sql": "select document_type_code , document_name , document_description from documents where document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
    },
    "interaction": [
        {
            "utterance": "What is the name of the document on project `` Graph Database project '' ?",
            "sql": "select document_name from documents as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value"
        },
        {
            "utterance": "What are the document dates ?",
            "sql": "select document_date from documents as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value"
        },
        {
            "utterance": "What is their description ?",
            "sql": "select document_description from documents as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 5,
    "final": {
        "utterance": "How many documents do not have any expense?",
        "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
    },
    "interaction": [
        {
            "utterance": "How many documents do not have expense reports ?",
            "sql": "select count ( * ) from documents where document_id not in ( select document_id from documents_with_expenses )"
        },
        {
            "utterance": "What category would the report fall into ?",
            "sql": "select budget_type_code from documents_with_expenses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 6,
    "final": {
        "utterance": "Show ids for all documents with budget types described as 'Government'.",
        "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\""
    },
    "interaction": [
        {
            "utterance": "Could you show me the IDs for all documents with budget types described as 'Government ' ?",
            "sql": "select t1 . document_id from documents_with_expenses as t1 join ref_budget_codes as t2 on t1 . budget_type_code = t2 . budget_type_code where t2 . budget_type_description = value"
        },
        {
            "utterance": "What are the document details of each of those ?",
            "sql": "select t1 . document_details from documents_with_expenses as t1 join ref_budget_codes as t2 on t1 . budget_type_code = t2 . budget_type_code where t2 . budget_type_description = value"
        },
        {
            "utterance": "Could you show me the IDs for all documents with budget types described as 'Organisation ' ?",
            "sql": "select t1 . document_id from documents_with_expenses as t1 join ref_budget_codes as t2 on t1 . budget_type_code = t2 . budget_type_code where t2 . budget_type_description = value"
        },
        {
            "utterance": "What are the budget type codes for those ?",
            "sql": "select t2 . budget_type_code from documents_with_expenses as t1 join ref_budget_codes as t2 on t1 . budget_type_code = t2 . budget_type_code where t2 . budget_type_description = value"
        },
        {
            "utterance": "Can you tell me the document details for the highest numbered document id please ?",
            "sql": "select document_details from documents_with_expenses order by document_id desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 7,
    "final": {
        "utterance": "How many documents do not have any expense?",
        "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
    },
    "interaction": [
        {
            "utterance": "How many documents are there ?",
            "sql": "select count ( * ) from documents"
        },
        {
            "utterance": "How many of them have expenses ?",
            "sql": "select count ( document_id ) from documents_with_expenses"
        },
        {
            "utterance": "What are the different document types ?",
            "sql": "select distinct document_type_code from documents"
        },
        {
            "utterance": "Is GV the only budget type ?",
            "sql": "select distinct budget_type_code from documents_with_expenses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the account details with the largest value or with value having char '5' in it?",
        "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""
    },
    "interaction": [
        {
            "utterance": "What are the account details with the largest value ?",
            "sql": "select account_details from accounts order by account_details desc limit value"
        },
        {
            "utterance": "What about the account details with the value having the character '5 ' in it , please ?",
            "sql": "select account_details from accounts where account_details like value"
        },
        {
            "utterance": "What are the statement ids of those accounts , please ?",
            "sql": "select statement_id from accounts where account_details like value"
        },
        {
            "utterance": "What about the account details with the value having the character '9 ' in it , please ?",
            "sql": "select account_details from accounts where account_details like value"
        },
        {
            "utterance": "Could you tell me the account ids of those accounts too ?",
            "sql": "select account_id from accounts where account_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"
    },
    "interaction": [
        {
            "utterance": "can you show me the document date ?",
            "sql": "select document_date from documents"
        },
        {
            "utterance": "can you show me the document name ?",
            "sql": "select document_name from documents"
        },
        {
            "utterance": "can you show me document type code ?",
            "sql": "select document_type_code from documents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"
    },
    "interaction": [
        {
            "utterance": "Tell me the document date of the project id 30 ?",
            "sql": "select document_type_code from documents where project_id = value"
        },
        {
            "utterance": "Tell me the statement details of the statement id 197 ?",
            "sql": "select statement_details from statements where statement_id = value"
        },
        {
            "utterance": "Tell me the document name of the document id 42 ?",
            "sql": "select document_name from documents where document_id = value"
        },
        {
            "utterance": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project ' ?",
            "sql": "select t1 . statement_details , t2 . document_name from statements as t1 join documents as t2 on t1 . statement_id = t2 . document_id where t1 . statement_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the project id and detail for the project with at least two documents?",
        "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show me the project id | Do you mean you wan na see the whole project id of the table `` Projects '' ? | Yes",
            "sql": "select project_id from projects"
        },
        {
            "utterance": "Show me the details for the whole project id of the table `` projects ''",
            "sql": "select project_id , project_details from projects"
        },
        {
            "utterance": "Show me the project id and details for the project with at least two documents",
            "sql": "select t1 . project_id , t1 . project_details from projects as t1 join documents as t2 on t1 . project_id = t2 . project_id group by t1 . project_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which statement has the most number of accounts ? | Do you want to know its statement id ? | Yes , what is its statement id ?",
            "sql": "select t1 . statement_id from accounts as t1 join statements as t2 on t1 . statement_id = t2 . statement_id group by t1 . statement_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Thank you . Can you also show me the statement detail for the statement with the most number of accounts ?",
            "sql": "select t1 . statement_id , t2 . statement_details from accounts as t1 join statements as t2 on t1 . statement_id = t2 . statement_id group by t1 . statement_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the document type code with most number of documents?",
        "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What code has the most number of documents ? | The type code that has the most number of documents is BK | How many documents are in BK ?",
            "sql": "select count ( * ) from documents where document_type_code = value"
        },
        {
            "utterance": "How about in CV ?",
            "sql": "select count ( * ) from documents where document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"
    },
    "interaction": [
        {
            "utterance": "What are the ids of documents with the letter 's ' in the name with any expense budgets ?",
            "sql": "select t1 . document_id from documents as t1 join documents_with_expenses as t2 on t1 . document_id = t2 . document_id where t1 . document_name like value"
        },
        {
            "utterance": "What are the document type codes of documents with the letter 's ' in the name with any expense budgets ?",
            "sql": "select t1 . document_type_code from documents as t1 join documents_with_expenses as t2 on t1 . document_id = t2 . document_id where t1 . document_name like value"
        },
        {
            "utterance": "What are the project id of documents with the letter 's ' in the name with any expense budgets ?",
            "sql": "select t1 . project_id from documents as t1 join documents_with_expenses as t2 on t1 . document_id = t2 . document_id where t1 . document_name like value"
        },
        {
            "utterance": "What are the ids of documents with the letter 'a ' in the name with any expense budgets ?",
            "sql": "select t1 . document_id from documents as t1 join documents_with_expenses as t2 on t1 . document_id = t2 . document_id where t1 . document_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the statement id and the statement detail for the statement with most number of accounts ?",
            "sql": "select t1 . statement_id , t2 . statement_details from accounts as t1 join statements as t2 on t1 . statement_id = t2 . statement_id group by t1 . statement_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many account ids are on the table ?",
            "sql": "select count ( account_id ) from accounts"
        },
        {
            "utterance": "What is the statement detail of statement id 57 ?",
            "sql": "select statement_details from statements where statement_id = value"
        },
        {
            "utterance": "What is the account details of account id 61 ?",
            "sql": "select account_details from accounts where account_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
    },
    "interaction": [
        {
            "utterance": "Show the document name and the document date for all documents on project with details 'Graph Database project '",
            "sql": "select document_name , document_date from documents as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value"
        },
        {
            "utterance": "Which of those documents is the oldest ? | which kind of information the oldest documents do you want me to give you ? | Give me the document name from those documents that has the earliest document date .",
            "sql": "select document_name from documents as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value order by document_date limit value"
        },
        {
            "utterance": "What is its document date ?",
            "sql": "select document_date from documents as t1 join projects as t2 on t1 . project_id = t2 . project_id where t2 . project_details = value order by document_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the budget type code with most number of documents.",
        "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the budget type code with the largest number of documents ?",
            "sql": "select budget_type_code from documents_with_expenses group by budget_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the most common document detail ?",
            "sql": "select document_details from documents_with_expenses group by document_details order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the most common budget type code ?",
            "sql": "select budget_type_code from documents_with_expenses group by budget_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the school name and type for schools without a school bus.",
        "sql": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)"
    },
    "interaction": [
        {
            "utterance": "What are the school names of the schools without school buses ?",
            "sql": "select school from school where school_id not in ( select school_id from school_bus )"
        },
        {
            "utterance": "Can you please get me the types of those schools ?",
            "sql": "select type from school where school_id not in ( select school_id from school_bus )"
        },
        {
            "utterance": "what are schools in Hawaii have school buses ?",
            "sql": "select school from school where location like value and school_id in ( select school_id from school_bus )"
        },
        {
            "utterance": "What about in Indonesia ?",
            "sql": "select school from school where location like value and school_id in ( select school_id from school_bus )"
        },
        {
            "utterance": "How many private schools are in Hawaii ?",
            "sql": "select count ( * ) from school where location like value and type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 1,
    "final": {
        "utterance": "find the name of driver who is driving the school bus with the longest working history.",
        "sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list the driver ids and whether they drive full time or not ?",
            "sql": "select driver_id , if_full_time from school_bus"
        },
        {
            "utterance": "Hmm , I also want to know their years working .",
            "sql": "select driver_id , years_working , if_full_time from school_bus"
        },
        {
            "utterance": "Can you tell me the name of the driver who is driving the school bus with the longest working history ?",
            "sql": "select t1 . name from driver as t1 join school_bus as t2 on t1 . driver_id = t2 . driver_id order by years_working desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 2,
    "final": {
        "utterance": "How many drivers are from Hartford city or younger than 40?",
        "sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40"
    },
    "interaction": [
        {
            "utterance": "Can you show me the number of drivers who are from Hartford City ?",
            "sql": "select count ( * ) from driver where home_city = value"
        },
        {
            "utterance": "Oh , I want the names of the drivers .",
            "sql": "select name from driver where home_city = value"
        },
        {
            "utterance": "Hmm , please show me names of the drivers who are younger than 40 .",
            "sql": "select name from driver where age < value"
        },
        {
            "utterance": "Can you count the number of drivers who are from Hartford City or younger than 40 ?",
            "sql": "select count ( * ) from driver where home_city = value or age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the home city with the most number of drivers.",
        "sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many drivers are there ?",
            "sql": "select count ( * ) from driver"
        },
        {
            "utterance": "What is the average age of your drivers ?",
            "sql": "select avg ( age ) from driver"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 4,
    "final": {
        "utterance": "Show home city where at least two drivers older than 40 are from.",
        "sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many driver are presented on the table",
            "sql": "select count ( * ) from driver"
        },
        {
            "utterance": "list out the driver names on the table",
            "sql": "select name from driver"
        },
        {
            "utterance": "what is the age of Matthew Ritter",
            "sql": "select age from driver where name = value"
        },
        {
            "utterance": "what is the home city of Dan Carter",
            "sql": "select home_city from driver where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of the drivers without a school bus.",
        "sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"
    },
    "interaction": [
        {
            "utterance": "what are the names of all drivers ?",
            "sql": "select name from driver"
        },
        {
            "utterance": "also give me their driver ids",
            "sql": "select name , driver_id from driver"
        },
        {
            "utterance": "what are the number of years for working for each driver and their names ?",
            "sql": "select t1 . name , t2 . years_working from driver as t1 join school_bus as t2 where t1 . driver_id = t2 . driver_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the school name and driver name for all school buses.",
        "sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me all school names and bus driver names for each of the school buses in this database ?",
            "sql": "select t2 . school , t3 . name from school_bus as t1 join school as t2 on t1 . school_id = t2 . school_id join driver as t3 on t1 . driver_id = t3 . driver_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the party with drivers from Hartford and drivers older than 40.",
        "sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40"
    },
    "interaction": [
        {
            "utterance": "How many of the drivers are over 40 ?",
            "sql": "select count ( * ) from driver where age > value"
        },
        {
            "utterance": "How many of these drivers are also from Hartford ?",
            "sql": "select count ( * ) from driver where home_city = value and age > value"
        },
        {
            "utterance": "What is the party of these 4 drivers ?",
            "sql": "select party from driver where home_city = value and age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "sql": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the customer id that spends the most",
            "sql": "select customer_id from payments group by customer_id order by sum ( amount_paid ) desc limit value"
        },
        {
            "utterance": "For that Customer with ID 12 , what was the amount they spend ?",
            "sql": "select sum ( amount_paid ) from payments where customer_id = value"
        },
        {
            "utterance": "What was the payment type of customer with ID 12 ?",
            "sql": "select payment_type_code from payments where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 1,
    "final": {
        "utterance": "Are the customers holding coupons with amount 500 bad or good?",
        "sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500"
    },
    "interaction": [
        {
            "utterance": "How many customers are there",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "How many of them have a coupon amount of 500",
            "sql": "select count ( * ) from customers as t1 join discount_coupons as t2 on t1 . coupon_id = t2 . coupon_id where t2 . coupon_amount = value"
        },
        {
            "utterance": "What is their name | First name or last name ? | What is their customer id",
            "sql": "select t1 . customer_id from customers as t1 join discount_coupons as t2 on t1 . coupon_id = t2 . coupon_id where t2 . coupon_amount = value"
        },
        {
            "utterance": "Are they a good or bad customer",
            "sql": "select t1 . good_or_bad_customer from customers as t1 join discount_coupons as t2 on t1 . coupon_id = t2 . coupon_id where t2 . coupon_amount = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "sql": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of product description ?",
            "sql": "select product_description from products_for_hire"
        },
        {
            "utterance": "what are the start date and end of date of the booking that has booked the product named 'book collection A ' ?",
            "sql": "select t3 . booking_start_date , t3 . booking_end_date from products_for_hire as t1 join products_booked as t2 on t1 . product_id = t2 . product_id join bookings as t3 on t2 . booking_id = t3 . booking_id where t1 . product_name = value"
        },
        {
            "utterance": "what is the average of booked amount ?",
            "sql": "select avg ( booked_amount ) from products_booked"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of products whose availability equals to 1?",
        "sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1"
    },
    "interaction": [
        {
            "utterance": "what is the daily hire cost of the product id 1",
            "sql": "select daily_hire_cost from products_for_hire where product_id = value"
        },
        {
            "utterance": "what is the status date of the product name Book collection C ?",
            "sql": "select status_date from view_product_availability as t1 join products_for_hire as t2 on t1 . product_id = t2 . product_id where product_name = value"
        },
        {
            "utterance": "what is the product description of the product id 3 ?",
            "sql": "select product_description from products_for_hire where product_id = value"
        },
        {
            "utterance": "what are the names of products whose availability equals to 1 ?",
            "sql": "select t2 . product_name from view_product_availability as t1 join products_for_hire as t2 on t1 . product_id = t2 . product_id where t1 . available_yn = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the maximum, minimum, and average booked count for the products booked?",
        "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked"
    },
    "interaction": [
        {
            "utterance": "what is the highest booked amount",
            "sql": "select max ( booked_amount ) from products_booked"
        },
        {
            "utterance": "what is the minimum booked count for products booked",
            "sql": "select min ( booked_count ) from products_booked"
        },
        {
            "utterance": "what is the maximum booked count",
            "sql": "select max ( booked_count ) from products_booked"
        },
        {
            "utterance": "what is the least booked amount",
            "sql": "select min ( booked_amount ) from products_booked"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "sql": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20"
    },
    "interaction": [
        {
            "utterance": "How many 'Cutlery ' type products are there ?",
            "sql": "select count ( product_id ) from products_for_hire where product_type_code = value"
        },
        {
            "utterance": "Okay good to know . How many products have a daily hire cost lower than 20 ?",
            "sql": "select count ( product_id ) from products_for_hire where daily_hire_cost < value"
        },
        {
            "utterance": "Thank you for that info . Now , how many 'cutlery ' products have the daily hire cost lower than 20 ?",
            "sql": "select count ( product_id ) from products_for_hire where product_type_code = value and daily_hire_cost < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 6,
    "final": {
        "utterance": "How many products are never booked with amount higher than 200?",
        "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )"
    },
    "interaction": [
        {
            "utterance": "Can you list the product ids and the booked amounts ?",
            "sql": "select t1 . product_id , t2 . booked_amount from products_for_hire as t1 join products_booked as t2 on t1 . product_id = t2 . product_id"
        },
        {
            "utterance": "What product ids are never booked with amount higher than 200 ?",
            "sql": "select product_id from products_for_hire where product_id not in ( select product_id from products_booked where booked_amount > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the coupon IDs and coupon amounts ?",
            "sql": "select coupon_id , coupon_amount from discount_coupons"
        },
        {
            "utterance": "Great ! Can you filter this list to show just the rows the coupons and coupon amounts that are associated with both values of good and bad in the `` good or bad customer '' category .",
            "sql": "select t1 . coupon_id , t1 . coupon_amount from discount_coupons as t1 join customers as t2 on t1 . coupon_id = t2 . coupon_id where t2 . good_or_bad_customer = value intersect select t1 . coupon_id , t1 . coupon_amount from discount_coupons as t1 join customers as t2 on t1 . coupon_id = t2 . coupon_id where t2 . good_or_bad_customer = value"
        },
        {
            "utterance": "Awesome ! Can you tell me what the date issued is for each of these two coupon_ids ?",
            "sql": "select date_issued from discount_coupons where coupon_id in ( select t1 . coupon_id from discount_coupons as t1 join customers as t2 on t1 . coupon_id = t2 . coupon_id where t2 . good_or_bad_customer = value intersect select t1 . coupon_id from discount_coupons as t1 join customers as t2 on t1 . coupon_id = t2 . coupon_id where t2 . good_or_bad_customer = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 8,
    "final": {
        "utterance": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "sql": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    "interaction": [
        {
            "utterance": "Hello , what is the total number of bookings ?",
            "sql": "select count ( * ) from bookings"
        },
        {
            "utterance": "Perfect , and how many different customers were there ?",
            "sql": "select count ( distinct customer_id ) from bookings"
        },
        {
            "utterance": "Awesome ! And finally , can you list the customer id , first name , and total bookings of each customer ?",
            "sql": "select t1 . customer_id , t1 . first_name , count ( * ) from customers as t1 join bookings as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the maximum, minimum, and average booked count for the products booked?",
        "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked"
    },
    "interaction": [
        {
            "utterance": "Could you show me the maximum booked count for the booked products ?",
            "sql": "select max ( booked_count ) from products_booked"
        },
        {
            "utterance": "Could you also add the minimum number of booked products ?",
            "sql": "select max ( booked_count ) , min ( booked_count ) from products_booked"
        },
        {
            "utterance": "Finally , could you add the average booked count for the products ?",
            "sql": "select max ( booked_count ) , min ( booked_count ) , avg ( booked_count ) from products_booked"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the id of the product that is booked for 3 times?",
        "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3"
    },
    "interaction": [
        {
            "utterance": "actually i mean how many product are on the table | Did you mean to ask for the distinct number of product ids in the table Products_Booked ? | exactly",
            "sql": "select count ( distinct product_id ) from products_booked"
        },
        {
            "utterance": "what is the highest booked amount",
            "sql": "select max ( booked_amount ) from products_booked"
        },
        {
            "utterance": "what is the least booked count",
            "sql": "select min ( booked_count ) from products_booked"
        },
        {
            "utterance": "what is the id of the product that is booked for 5 times ?",
            "sql": "select product_id from products_booked where booked_count = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the product description of the product booked with an amount of 102.76?",
        "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76"
    },
    "interaction": [
        {
            "utterance": "What is the product ID for the booked amount 102.76 ?",
            "sql": "select product_id from products_booked where booked_amount = value"
        },
        {
            "utterance": "What is the product description that matches that product ID ?",
            "sql": "select t2 . product_description from products_booked as t1 join products_for_hire as t2 on t1 . product_id = t2 . product_id where t1 . booked_amount = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 0,
    "final": {
        "utterance": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"
    },
    "interaction": [
        {
            "utterance": "How many exhibitions have an attendance of more than 100 ?",
            "sql": "select count ( * ) from exhibition_record as t1 join exhibition as t2 on t1 . exhibition_id = t2 . exhibition_id where t1 . attendance > value"
        },
        {
            "utterance": "How many exhibitions have a ticket price below 10 ?",
            "sql": "select count ( * ) from exhibition_record as t1 join exhibition as t2 on t1 . exhibition_id = t2 . exhibition_id where t2 . ticket_price < value"
        },
        {
            "utterance": "What are the dates of the exhibitions who have an attendance of more than 100 ?",
            "sql": "select t1 . date from exhibition_record as t1 join exhibition as t2 on t1 . exhibition_id = t2 . exhibition_id where t1 . attendance > value"
        },
        {
            "utterance": "What was the theme of the party held in the latest year ?",
            "sql": "select theme from exhibition order by year desc limit value"
        },
        {
            "utterance": "What was the ticket price of that party ?",
            "sql": "select ticket_price from exhibition order by year desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the artist who joined latest?",
        "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what country is Vijay Singh from ?",
            "sql": "select country from artist where name = value"
        },
        {
            "utterance": "who is the latest artist ?",
            "sql": "select name from artist order by year_join desc limit value"
        },
        {
            "utterance": "what year did Vijay Singh joined ?",
            "sql": "select year_join from artist where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 2,
    "final": {
        "utterance": "Show names for artists without any exhibition.",
        "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the names of the artists who do n't have any exhibitions ?",
            "sql": "select name from artist where artist_id not in ( select artist_id from exhibition )"
        },
        {
            "utterance": "What are their countries ?",
            "sql": "select country from artist where artist_id not in ( select artist_id from exhibition )"
        },
        {
            "utterance": "What are their ages ?",
            "sql": "select age from artist where artist_id not in ( select artist_id from exhibition )"
        },
        {
            "utterance": "What is the name of the oldest artist ?",
            "sql": "select name from artist order by age desc limit value"
        },
        {
            "utterance": "Did he have any exhibitions ?",
            "sql": "select name from artist where artist_id in ( select artist_id from exhibition ) and name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name and country for the artist with most number of exhibitions?",
        "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name for the artist with the most number of exhibitions ?",
            "sql": "select t2 . name from exhibition as t1 join artist as t2 on t1 . artist_id = t2 . artist_id group by t1 . artist_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What country is he from ?",
            "sql": "select t2 . country from exhibition as t1 join artist as t2 on t1 . artist_id = t2 . artist_id group by t1 . artist_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Who is the artist with the least number of exhibitions ?",
            "sql": "select * from exhibition as t1 join artist as t2 on t1 . artist_id = t2 . artist_id group by t1 . artist_id order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
    },
    "interaction": [
        {
            "utterance": "Show the theme for exhibitions with records of an attendance below 100",
            "sql": "select t2 . theme from exhibition_record as t1 join exhibition as t2 on t1 . exhibition_id = t2 . exhibition_id where t1 . attendance < value"
        },
        {
            "utterance": "Show the theme for exhibitions with records of an attendance above 500",
            "sql": "select t2 . theme from exhibition_record as t1 join exhibition as t2 on t1 . exhibition_id = t2 . exhibition_id where t1 . attendance > value"
        },
        {
            "utterance": "Show me the dates of those exhibitions",
            "sql": "select t1 . date from exhibition_record as t1 join exhibition as t2 on t1 . exhibition_id = t2 . exhibition_id where t1 . attendance > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
    },
    "interaction": [
        {
            "utterance": "how many exhibition are presented on the table",
            "sql": "select count ( * ) from exhibition"
        },
        {
            "utterance": "ok fine then list out the artists name",
            "sql": "select name from artist"
        },
        {
            "utterance": "what is the age of Vijay Singh",
            "sql": "select age from artist where name = value"
        },
        {
            "utterance": "what is the highest ticket price on the table",
            "sql": "select ticket_price from exhibition order by ticket_price desc limit value"
        },
        {
            "utterance": "What is the theme and artist name for the exhibition with a ticket price higher than the average ? ''",
            "sql": "select t1 . theme , t2 . name from exhibition as t1 join artist as t2 on t1 . artist_id = t2 . artist_id where t1 . ticket_price > ( select avg ( ticket_price ) from exhibition )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 6,
    "final": {
        "utterance": "How many artists are above age 46 and joined after 1990?",
        "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the artist names ?",
            "sql": "select name from artist"
        },
        {
            "utterance": "Excellent ! Can you filter this list to show only the names of artists above the age of 46 ?",
            "sql": "select name from artist where age > value"
        },
        {
            "utterance": "Great ! Can you tell me how many of these artists above age 46 joined after 1990 ?",
            "sql": "select count ( * ) from artist where age > value and year_join > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the average and minimum age of all artists from United States.",
        "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
    },
    "interaction": [
        {
            "utterance": "What is the highest age of the the Artists from the United States ?",
            "sql": "select max ( age ) from artist where country = value"
        },
        {
            "utterance": "How many artists from the USA joined after 1993 ?",
            "sql": "select count ( artist_id ) from artist where country = value and year_join > value"
        },
        {
            "utterance": "When did Vijay Singh join ?",
            "sql": "select year_join from artist where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"
    },
    "interaction": [
        {
            "utterance": "Show the average ticket prices for exhibitions for all years before 2009 ?",
            "sql": "select avg ( ticket_price ) from exhibition where year < value"
        },
        {
            "utterance": "Show minimum ticket prices for exhibitions for all years before 2009 ?",
            "sql": "select min ( ticket_price ) from exhibition where year < value"
        },
        {
            "utterance": "Show maximum ticket prices for exhibitions for all years before 2009 ?",
            "sql": "select max ( ticket_price ) from exhibition where year < value"
        },
        {
            "utterance": "Show average ticket price for exhibitions for year 2005 ?",
            "sql": "select avg ( ticket_price ) from exhibition where year = value"
        },
        {
            "utterance": "Show average ticket price for exhibitions for all years before 2006 ?",
            "sql": "select avg ( ticket_price ) from exhibition where year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 9,
    "final": {
        "utterance": "How many artists are above age 46 and joined after 1990?",
        "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    "interaction": [
        {
            "utterance": "what is the average of artist ages ?",
            "sql": "select avg ( age ) from artist"
        },
        {
            "utterance": "who is the oldest artist ? | do you want to show his/her name ? | yes",
            "sql": "select name from artist order by age desc limit value"
        },
        {
            "utterance": "can you show me artist 's countries ? | did you mean the country of the oldest artist or countries of all the artists ? | countries of all the artists",
            "sql": "select distinct country from artist"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the average and minimum age of all artists from United States.",
        "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
    },
    "interaction": [
        {
            "utterance": "Can you list the ages of all the artists from United States ?",
            "sql": "select age from artist where country = value"
        },
        {
            "utterance": "What is the average age of all the artists from United States ?",
            "sql": "select avg ( age ) from artist where country = value"
        },
        {
            "utterance": "Hmm , I also want to know the minimum age of all the artists from United States please .",
            "sql": "select min ( age ) from artist where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"
    },
    "interaction": [
        {
            "utterance": "What are the names of mountains in the area ?",
            "sql": "select name from mountain"
        },
        {
            "utterance": "How many of these have a height above 5000 ?",
            "sql": "select count ( name ) from mountain where height > value"
        },
        {
            "utterance": "What are the names of these mountains ?",
            "sql": "select name from mountain where height > value"
        },
        {
            "utterance": "Which of these 3 mountains is the tallest ?",
            "sql": "select name from mountain where height > value and prominence > value order by height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"
    },
    "interaction": [
        {
            "utterance": "list the countries with mountains with height less than 5200",
            "sql": "select country from mountain where height < value"
        },
        {
            "utterance": "what are countries with mountains with height more than 5600",
            "sql": "select country from mountain where height > value"
        },
        {
            "utterance": "list both the countries with mountains height less than 5200 and height more than 5600 in the same table",
            "sql": "select country from mountain where height > value intersect select country from mountain where height < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    "interaction": [
        {
            "utterance": "How many mountains in this table ?",
            "sql": "select count ( * ) from mountain"
        },
        {
            "utterance": "Show the distinct names of mountains climbed by climbers from country `` West Germany '' .",
            "sql": "select distinct t2 . name from climber as t1 join mountain as t2 on t1 . mountain_id = t2 . mountain_id where t1 . country = value"
        },
        {
            "utterance": "Please show me the name of the highest mountain .",
            "sql": "select name from mountain order by height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the times used by climbers to climb mountains in Country Uganda.",
        "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
    },
    "interaction": [
        {
            "utterance": "Please list the names of all the climbers .",
            "sql": "select name from climber"
        },
        {
            "utterance": "Can you show me the climbers who climbed mountains in Country Uganda ? | The climbers with IDs of 9 and 10 climbed mountains in the country Uganda | Hmm , I want to know the times used by the climbers to climb mountains in Country Uganda please .",
            "sql": "select t1 . time from climber as t1 join mountain as t2 on t1 . mountain_id = t2 . mountain_id where t2 . country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 4,
    "final": {
        "utterance": "List the countries that have more than one mountain.",
        "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what is height of Kibo ( Uhuru Pk )",
            "sql": "select height from mountain where name = value"
        },
        {
            "utterance": "how many mountain does Tanzania have ? | Do you mean the number of mountains in the country Tanzania\uff1f | yes",
            "sql": "select count ( * ) from mountain where country = value"
        },
        {
            "utterance": "what is the range of Mount Kenya ( Batian ) in country kenya",
            "sql": "select range from mountain where country = value and name = value"
        },
        {
            "utterance": "highest mountain in Tanzania | Do you mean the name of the highest mountain in country Tanzania ? | yes",
            "sql": "select name from mountain where country = value order by height desc limit value"
        },
        {
            "utterance": "The name of the smallest mountain from all countries | Do you mean the name of the lowest mountain ? | YES",
            "sql": "select name from mountain order by height limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"
    },
    "interaction": [
        {
            "utterance": "What are the names of the mountains with height more than 5000 ?",
            "sql": "select name from mountain where height > value"
        },
        {
            "utterance": "Which of those has a prominence greater than 1000 ?",
            "sql": "select name from mountain where height > value and prominence > value"
        },
        {
            "utterance": "And in what range is each of those located ?",
            "sql": "select range from mountain where height > value and prominence > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the highest mountain?",
        "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many mountains in this table ?",
            "sql": "select count ( * ) from mountain"
        },
        {
            "utterance": "How many countries in this table ?",
            "sql": "select count ( distinct country ) from mountain"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)"
    },
    "interaction": [
        {
            "utterance": "What is the market share of Chabudai ?",
            "sql": "select market_rate from furniture where name = value"
        },
        {
            "utterance": "What is its price ?",
            "sql": "select t2 . price_in_dollar from furniture as t1 join furniture_manufacte as t2 on t1 . furniture_id = t2 . furniture_id where t1 . name = value"
        },
        {
            "utterance": "What is its ID ?",
            "sql": "select t2 . manufacturer_id from furniture as t1 join furniture_manufacte as t2 on t1 . furniture_id = t2 . furniture_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the companies that produce the most expensive furniture | Do you mean the names of manufacturers that produce the most expensive furniture ? | yes , the names of the company that produces the most expensive furniture",
            "sql": "select t1 . name from manufacturer as t1 join furniture_manufacte as t2 on t1 . manufacturer_id = t2 . manufacturer_id order by t2 . price_in_dollar desc limit value"
        },
        {
            "utterance": "what is the id of this name",
            "sql": "select t1 . manufacturer_id from manufacturer as t1 join furniture_manufacte as t2 on t1 . manufacturer_id = t2 . manufacturer_id order by t2 . price_in_dollar desc limit value"
        },
        {
            "utterance": "list both the id and number of shops for the company that produces the most expensive furniture in the same table",
            "sql": "select t1 . manufacturer_id , t1 . num_of_shops from manufacturer as t1 join furniture_manufacte as t2 on t1 . manufacturer_id = t2 . manufacturer_id order by t2 . price_in_dollar desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 2,
    "final": {
        "utterance": "Return the name and id of the furniture with the highest market rate.",
        "sql": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Return the name and ID of the furniture with the highest market rate",
            "sql": "select name , furniture_id from furniture order by market_rate desc limit value"
        },
        {
            "utterance": "rank the furniture according to the number of pieces available | Do you want a list of furniture name sorted by its corresponding number of component ? | Yes , Name and corresponding number of components .",
            "sql": "select name , num_of_component from furniture order by num_of_component"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which furniture has the highest price ? | The id of the furniture with the highest price is 7 . | What is the name of the manufacturer that sells that furniture ?",
            "sql": "select t1 . name from manufacturer as t1 join furniture_manufacte as t2 on t1 . manufacturer_id = t2 . manufacturer_id order by t2 . price_in_dollar desc limit value"
        },
        {
            "utterance": "What is the manufacturer ID for Tomorrow ?",
            "sql": "select manufacturer_id from manufacturer where name = value"
        },
        {
            "utterance": "How many shops does Tomorrow have ?",
            "sql": "select num_of_shops from manufacturer where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10"
    },
    "interaction": [
        {
            "utterance": "Hello , can you find me the names of the furniture with less then 6 components ?",
            "sql": "select name from furniture where num_of_component < value"
        },
        {
            "utterance": "Thanks can you find me the names of the furniture with more then 10 components ?",
            "sql": "select name from furniture where num_of_component > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of furnitures whose prices are lower than the highest price.",
        "sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)"
    },
    "interaction": [
        {
            "utterance": "how many furnitures on the table",
            "sql": "select count ( * ) from furniture"
        },
        {
            "utterance": "which furnitures are highest market rate | The name of the furniture that has the highest market rate is Billiard table | what about the highest price of furniture",
            "sql": "select t1 . name from furniture as t1 join furniture_manufacte as t2 on t1 . furniture_id = t2 . furniture_id order by t2 . price_in_dollar desc limit value"
        },
        {
            "utterance": "what is highest num of component ?",
            "sql": "select num_of_component from furniture order by num_of_component desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 6,
    "final": {
        "utterance": "find the total market rate of the furnitures that have the top 2 market shares.",
        "sql": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "how can find total market rate of the furniture",
            "sql": "select sum ( market_rate ) from furniture"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the most common type code across products.",
        "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of the various product type codes ?",
            "sql": "select product_type_code from products"
        },
        {
            "utterance": "Wonderful ! Of these product type codes , can you tell me which code is the most common one ?",
            "sql": "select product_type_code from products group by product_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name"
    },
    "interaction": [
        {
            "utterance": "Show the names of products that are in at least two events in ascending alphabetical order of product name .",
            "sql": "select t1 . product_name from products as t1 join products_in_events as t2 on t1 . product_id = t2 . product_id group by t1 . product_name having count ( * ) > = value order by t1 . product_name"
        },
        {
            "utterance": "What is the product price of men suits ?",
            "sql": "select product_price from products where product_name = value"
        },
        {
            "utterance": "What is the most expensive product price ?",
            "sql": "select max ( product_price ) from products"
        },
        {
            "utterance": "How about the least expensive ?",
            "sql": "select min ( product_price ) from products"
        },
        {
            "utterance": "What product type is the one that has the least expensive product price ? | Did you want to get Product Type Code that has the least expensive product price ? | Yes",
            "sql": "select product_type_code from products order by product_price limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the product type codes that have at least two products.",
        "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list all the product type codes that have two or more products ?",
            "sql": "select product_type_code from products group by product_type_code having count ( * ) > = value"
        },
        {
            "utterance": "What is the name of the product with the greatest price ?",
            "sql": "select product_name from products order by product_price desc limit value"
        },
        {
            "utterance": "What are the names of all products with prices over 3000 ?",
            "sql": "select product_name from products where product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of products that are not in any event.",
        "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)"
    },
    "interaction": [
        {
            "utterance": "how many products in total are not in any event ?",
            "sql": "select count ( * ) from products where product_id not in ( select product_id from products_in_events )"
        },
        {
            "utterance": "and can you tell me the names of those 5 products ?",
            "sql": "select product_name from products where product_id not in ( select product_id from products_in_events )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\""
    },
    "interaction": [
        {
            "utterance": "Tell me the prices of Dining | Sorry , there is no product named `` Dining '' . There is , however , a product named `` Dinning '' . This might be a typo . Do you want to know the prices of `` Dinning '' ? | Tell me the prices of Dinning",
            "sql": "select product_price from products where product_name = value"
        },
        {
            "utterance": "Show me the prices of Trading Policy",
            "sql": "select product_price from products where product_name = value"
        },
        {
            "utterance": "Show me the prices of Business Policy",
            "sql": "select product_price from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the most common type code across products.",
        "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common type code of all the products ?",
            "sql": "select product_type_code from products group by product_type_code order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the product names of all products with the type code `` Food '' ?",
            "sql": "select product_name from products where product_type_code = value"
        },
        {
            "utterance": "What are the prices of those ?",
            "sql": "select product_price from products where product_type_code = value"
        },
        {
            "utterance": "What are the names and prices of all products with the type code books ?",
            "sql": "select product_name , product_price from products where product_type_code = value"
        },
        {
            "utterance": "What are the name and type code of the product with the highest price ?",
            "sql": "select product_name , product_type_code from products order by product_price desc limit value"
        },
        {
            "utterance": "Can you list all product names and their corresponding type codes of the products with prices below the average price ?",
            "sql": "select product_name , product_type_code from products where product_price < ( select avg ( product_price ) from products )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\""
    },
    "interaction": [
        {
            "utterance": "Show me the prices of the products named `` Dining ''",
            "sql": "select product_price from products where product_name = value"
        },
        {
            "utterance": "Show me the prices of the products named Trading Policy",
            "sql": "select product_price from products where product_name = value"
        },
        {
            "utterance": "Show me the product type code of products named `` Dining ''",
            "sql": "select distinct product_type_code from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of products that are in at least two events.",
        "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many products in this table ?",
            "sql": "select count ( * ) from products"
        },
        {
            "utterance": "How many Product events in this table ?",
            "sql": "select count ( * ) from products_in_events"
        },
        {
            "utterance": "Show the names of products that are in at least 3 events ?",
            "sql": "select t1 . product_name from products as t1 join products_in_events as t2 on t1 . product_id = t2 . product_id group by t1 . product_name having count ( * ) > = value"
        },
        {
            "utterance": "Find the top price ?",
            "sql": "select product_price from products order by product_price desc limit value"
        },
        {
            "utterance": "find average of the price ?",
            "sql": "select avg ( product_price ) from products"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you show me a list of all of the different product type codes ?",
            "sql": "select product_type_code from products"
        },
        {
            "utterance": "Nice ! Can you filter this list to show the Product Type Codes for the entries which have either a product price higher than 4500 or a product price lower than 3000 ?",
            "sql": "select product_type_code from products where product_price > value intersect select product_type_code from products where product_price < value"
        },
        {
            "utterance": "Awesome ! What product price is associated with the Product Type Code of `` food '' ?",
            "sql": "select product_price from products where product_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 0,
    "final": {
        "utterance": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""
    },
    "interaction": [
        {
            "utterance": "The column `` product_id `` in Table : `` problems '' refers to column `` product_id '' in Table : `` product '' | could give more info about this question ? | List the ids of the problem from the product ''voluptatem '' that are reported after 1995 ?",
            "sql": "select t1 . problem_id from problems as t1 join product as t2 on t1 . product_id = t2 . product_id where t2 . product_name = value and t1 . date_problem_reported > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 1,
    "final": {
        "utterance": "For each product which has problems, what are the number of problems and the product id?",
        "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"
    },
    "interaction": [
        {
            "utterance": "What are the number of products that had problems ?",
            "sql": "select count ( * ) from problems as t1 join product as t2 on t1 . product_id = t2 . product_id"
        },
        {
            "utterance": "Could you please list their product ids ?",
            "sql": "select t2 . product_id from problems as t1 join product as t2 on t1 . product_id = t2 . product_id"
        },
        {
            "utterance": "What are the number of problems each of these had ?",
            "sql": "select count ( * ) , t2 . product_id from problems as t1 join product as t2 on t1 . product_id = t2 . product_id group by t2 . product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""
    },
    "interaction": [
        {
            "utterance": "What is the staff id of Bosco ?",
            "sql": "select staff_id from staff where staff_last_name = value"
        },
        {
            "utterance": "Are there any problems reported by staff id 1 ?",
            "sql": "select problem_id from problems where reported_by_staff_id = value"
        },
        {
            "utterance": "How many total problems are there reported by staff ID 1 ?",
            "sql": "select count ( * ) from problems where reported_by_staff_id = value"
        },
        {
            "utterance": "What is the full set of information associated with staff with last name Bosco ?",
            "sql": "select * from staff where staff_last_name = value"
        },
        {
            "utterance": "What are the ids of the problems reported by staff first name Lacey ?",
            "sql": "select t1 . problem_id from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id where t2 . staff_first_name = value"
        },
        {
            "utterance": "Find the ids of all problems reported by staff with last name Bosco",
            "sql": "select t1 . problem_id from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id where t2 . staff_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 3,
    "final": {
        "utterance": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"
    },
    "interaction": [
        {
            "utterance": "Please list staff names of staff assigned to at least 1 problem | First or last name ? | both",
            "sql": "select staff_first_name , staff_last_name from staff as t1 join problem_log as t2 on t1 . staff_id = t2 . assigned_to_staff_id where t2 . problem_id = value"
        },
        {
            "utterance": "Now just list the staff who are assigned to problem id 1",
            "sql": "select staff_first_name , staff_last_name from staff as t1 join problem_log as t2 on t1 . staff_id = t2 . assigned_to_staff_id where t2 . problem_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
    },
    "interaction": [
        {
            "utterance": "What is the date problem reported of w ?",
            "sql": "select t2 . date_problem_reported from problems as t1 join problems as t2 where t2 . problem_description = value"
        },
        {
            "utterance": "What is the name of the person who reported a problem on 1976-12-18 23:54:41 ? | Here are the first and last names of the staff who reported a problem on 1976-12-18 23:54:41 . | What are her other staff details ?",
            "sql": "select t1 . other_staff_details from problems as t2 join staff as t1 where t2 . date_problem_reported = value and t2 . reported_by_staff_id = t1 . staff_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 5,
    "final": {
        "utterance": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"
    },
    "interaction": [
        {
            "utterance": "can you list the products that have problems | Did you mean to ask for the product names of products that have problems ? | yes",
            "sql": "select t2 . product_name from problems as t1 join product as t2 on t1 . product_id = t2 . product_id"
        },
        {
            "utterance": "give me all the problem ids",
            "sql": "select t2 . product_id from problems as t1 join product as t2 on t1 . product_id = t2 . product_id"
        },
        {
            "utterance": "list all product details",
            "sql": "select t2 . product_details from problems as t1 join product as t2 on t1 . product_id = t2 . product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
    },
    "interaction": [
        {
            "utterance": "Find the first and last name of the staff members who reported problems from the product `` rem '' but not `` aut '' ?",
            "sql": "select t3 . staff_first_name , t3 . staff_last_name from problems as t1 join product as t2 join staff as t3 on t1 . product_id = t2 . product_id and t1 . reported_by_staff_id = t3 . staff_id where t2 . product_name = value except select t3 . staff_first_name , t3 . staff_last_name from problems as t1 join product as t2 join staff as t3 on t1 . product_id = t2 . product_id and t1 . reported_by_staff_id = t3 . staff_id where t2 . product_name = value"
        },
        {
            "utterance": "What about staff members who reported problems for the product `` rem '' ?",
            "sql": "select t3 . staff_first_name , t3 . staff_last_name from problems as t1 join product as t2 join staff as t3 on t1 . product_id = t2 . product_id and t1 . reported_by_staff_id = t3 . staff_id where t2 . product_name = value"
        },
        {
            "utterance": "What about staff members who reported problems for the product `` aut '' ?",
            "sql": "select t3 . staff_first_name , t3 . staff_last_name from problems as t1 join product as t2 join staff as t3 on t1 . product_id = t2 . product_id and t1 . reported_by_staff_id = t3 . staff_id where t2 . product_name = value"
        },
        {
            "utterance": "What is the name of the staff member who reported problem id 1 ?",
            "sql": "select t3 . staff_first_name , t3 . staff_last_name from problems as t1 join product as t2 join staff as t3 on t1 . product_id = t2 . product_id and t1 . reported_by_staff_id = t3 . staff_id where t1 . problem_id = value"
        },
        {
            "utterance": "What is the staff id of that person ?",
            "sql": "select t3 . staff_id from problems as t1 join product as t2 join staff as t3 on t1 . product_id = t2 . product_id and t1 . reported_by_staff_id = t3 . staff_id where t1 . problem_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id of the problem log that is created most recently?",
        "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the total number of problem logs ?",
            "sql": "select count ( * ) from problem_log"
        },
        {
            "utterance": "When was the oldest one created ?",
            "sql": "select log_entry_date from problem_log order by log_entry_date asc limit value"
        },
        {
            "utterance": "How about the most recent one ?",
            "sql": "select log_entry_date from problem_log order by log_entry_date desc limit value"
        },
        {
            "utterance": "What is its id ?",
            "sql": "select problem_log_id from problem_log order by log_entry_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the oldest log id and its corresponding problem id?",
        "sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list out the problem logs",
            "sql": "select * from problem_log"
        },
        {
            "utterance": "show the problem status code on Middleware",
            "sql": "select problem_status_code from problem_log where problem_category_code = value"
        },
        {
            "utterance": "show the other log details",
            "sql": "select * from problem_log where problem_category_code ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 9,
    "final": {
        "utterance": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
    },
    "interaction": [
        {
            "utterance": "What is the staff ID of the staff with the first name Christop ?",
            "sql": "select staff_id from staff where staff_first_name = value"
        },
        {
            "utterance": "How many problems have been reported under staff ID 10 ?",
            "sql": "select count ( * ) from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id where t2 . staff_id = value"
        },
        {
            "utterance": "Can you give me a list of the problem descriptions he reported ?",
            "sql": "select t1 . problem_description from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id where t2 . staff_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
    },
    "interaction": [
        {
            "utterance": "What are the IDs of problems that the staff member Dameon Frami reported ?",
            "sql": "select product_id from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id where t2 . staff_first_name = value and t2 . staff_last_name = value"
        },
        {
            "utterance": "What are the IDs of problems that the staff member Jolie Weber reported ?",
            "sql": "select product_id from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id where t2 . staff_first_name = value and t2 . staff_last_name = value"
        },
        {
            "utterance": "What is the most common problem ID reported by all staff ?",
            "sql": "select problem_id from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id group by problem_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""
    },
    "interaction": [
        {
            "utterance": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst ?",
            "sql": "select product_id from problems as t1 join staff as t2 on t1 . reported_by_staff_id = t2 . staff_id where t2 . staff_first_name = value and t2 . staff_last_name = value intersect select product_id from problems as t1 join staff as t2 on t1 . closure_authorised_by_staff_id = t2 . staff_id where t2 . staff_first_name = value and t2 . staff_last_name = value"
        },
        {
            "utterance": "How many staffs are on the list ?",
            "sql": "select count ( * ) from staff"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the staff members first and last names ?",
            "sql": "select staff_first_name , staff_last_name from staff"
        },
        {
            "utterance": "Can you filter this list to show just the staff members who reported problems with the product named `` rem '' ?",
            "sql": "select t3 . staff_first_name , t3 . staff_last_name from problems as t1 join product as t2 join staff as t3 on t1 . product_id = t2 . product_id and t1 . reported_by_staff_id = t3 . staff_id where t2 . product_name = value"
        },
        {
            "utterance": "Interesting ... Okay , I can only see the first three entries on that table , so I assumed `` rem '' and `` auf '' were lower down and I simply could n't see them . Can you show me a list of all of the different product names on the `` Product '' table ?",
            "sql": "select product_name from product"
        },
        {
            "utterance": "Can you show me which three products received the three highest total number of reported problems ?",
            "sql": "select t1 . product_name from product as t1 join problems as t2 on t1 . product_id = t2 . product_id group by t2 . product_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the headquarters that have at least two companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Names of headquarters that have at least two companies ?",
            "sql": "select headquarters from company group by headquarters having count ( * ) > = value"
        },
        {
            "utterance": "What is tbe name of the company in china ?",
            "sql": "select name from company where headquarters = value"
        },
        {
            "utterance": "What industry does petrochina belong to ?",
            "sql": "select industry from company where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the headquarters that have at least two companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all company IDs , with their names and headquarters locations ?",
            "sql": "select company_id , name , headquarters from company"
        },
        {
            "utterance": "Could you filter this same list to list only the Headquarter countries that have more than one company in them ?",
            "sql": "select headquarters from company group by headquarters having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 2,
    "final": {
        "utterance": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC"
    },
    "interaction": [
        {
            "utterance": "What are some companies with more than 200 sales ?",
            "sql": "select name from company where sales_in_billion > value"
        },
        {
            "utterance": "Can you sort the list in descending order of sales and profits",
            "sql": "select name from company where sales_in_billion > value order by sales_in_billion , profits_in_billion desc"
        },
        {
            "utterance": "How many companies are in the list ?",
            "sql": "select count ( * ) from company where sales_in_billion > value order by sales_in_billion , profits_in_billion desc"
        },
        {
            "utterance": "Can you show me the list in descending order of sales and profits again ?",
            "sql": "select name from company where sales_in_billion > value order by sales_in_billion , profits_in_billion desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the most common headquarter for companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which company have a higher sales ? | do you mean which company have a highest sales ? | yes",
            "sql": "select name from company order by sales_in_billion desc limit value"
        },
        {
            "utterance": "What are the kinds of industries in the table ?",
            "sql": "select distinct industry from company"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 4,
    "final": {
        "utterance": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working"
    },
    "interaction": [
        {
            "utterance": "Show the name of the company with company_id 1.0 ?",
            "sql": "select name from company where company_id = value"
        },
        {
            "utterance": "Show the names of companies and that of employees in descending order of number of years working for that employee ?",
            "sql": "select t3 . name , t2 . name from employment as t1 join people as t2 on t1 . people_id = t2 . people_id join company as t3 on t1 . company_id = t3 . company_id order by t1 . year_working"
        },
        {
            "utterance": "Show all companies with Headquarters USA ? | Did you mean to show the company IDs ? | yes",
            "sql": "select company_id from company where headquarters = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of companies in the banking or retailing industry?",
        "sql": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\""
    },
    "interaction": [
        {
            "utterance": "What companies are in the banking or retailing industry ? | Do you want their company id or name ? | What are the names of the companies in the banking or retail industries ?",
            "sql": "select name from company where industry = value or industry = value"
        },
        {
            "utterance": "What are the total sales in billions of all of these companies combined ?",
            "sql": "select sum ( sales_in_billion ) from company where industry = value or industry = value"
        },
        {
            "utterance": "and what is their total market value in billions ?",
            "sql": "select sum ( market_value_in_billion ) from company where industry = value or industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the headquarter of the company with the largest sales?",
        "sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which company has the largest sales ? | Did you mean the name of the company with the largest sales ? | Yes thr name of the company that has the largest sales",
            "sql": "select name from company order by sales_in_billion desc limit value"
        },
        {
            "utterance": "Where is the headquarters of royal dutch shell ?",
            "sql": "select headquarters from company where name = value"
        },
        {
            "utterance": "What kind of industry does royal dutch shell belongs to ?",
            "sql": "select industry from company where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of people that are not employed by any company",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)"
    },
    "interaction": [
        {
            "utterance": "Give me the nationality of the unemployed people",
            "sql": "select nationality from people where people_id not in ( select people_id from employment )"
        },
        {
            "utterance": "Which college did Reggie Lewis graduated from",
            "sql": "select graduation_college from people where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "sql": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\""
    },
    "interaction": [
        {
            "utterance": "hi , can you show me headquarters that have companies in the banking industry ?",
            "sql": "select distinct headquarters from company where industry = value"
        },
        {
            "utterance": "and can you also show me headquarters that have companies in the oil and gas industry ?",
            "sql": "select distinct headquarters from company where industry = value"
        },
        {
            "utterance": "and can you show me only those headquarters that have both companies in oil and gas as well as banking industry ?",
            "sql": "select headquarters from company where industry = value intersect select headquarters from company where industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the most common headquarter for companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different countries serve as headquarters ?",
            "sql": "select count ( distinct headquarters ) from company"
        },
        {
            "utterance": "What is the most popular industry ?",
            "sql": "select industry from company group by industry order by count ( * ) desc limit value"
        },
        {
            "utterance": "What company has the highest market value ? | Did you mean the max Profits_in_Billion ? | No , I mean Market_Value_in_Billion .",
            "sql": "select name from company order by market_value_in_billion desc limit value"
        },
        {
            "utterance": "What headquarter is the most popular ?",
            "sql": "select headquarters from company group by headquarters order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of employees that work for companies with sales bigger than 200.",
        "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200"
    },
    "interaction": [
        {
            "utterance": "Please show me the names of employees that work for companies with sales bigger than 200",
            "sql": "select t2 . name from employment as t1 join people as t2 on t1 . people_id = t2 . people_id join company as t3 on t1 . company_id = t3 . company_id where t3 . sales_in_billion > value"
        },
        {
            "utterance": "please show me the average age of those employees",
            "sql": "select avg ( t2 . age ) from employment as t1 join people as t2 on t1 . people_id = t2 . people_id join company as t3 on t1 . company_id = t3 . company_id where t3 . sales_in_billion > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 11,
    "final": {
        "utterance": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC"
    },
    "interaction": [
        {
            "utterance": "what is the name of the company with more than 200 sales ?",
            "sql": "select name from company where sales_in_billion > value"
        },
        {
            "utterance": "where is the headquarters for BP",
            "sql": "select headquarters from company where name = value"
        },
        {
            "utterance": "in what industry is BP",
            "sql": "select industry from company where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 0,
    "final": {
        "utterance": "Which state has the most customers?",
        "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which state has the most customers ?",
            "sql": "select state from customers group by state order by count ( * ) limit value"
        },
        {
            "utterance": "How many customers have the customer type code `` Good Credit Rating '' ?",
            "sql": "select count ( customer_id ) from customers where customer_type_code = value"
        },
        {
            "utterance": "What are the states of all customers who who have the customer type code Good Credit Rating ?",
            "sql": "select state from customers where customer_type_code = value"
        },
        {
            "utterance": "What are the customer ids of all customers who who have the customer type code Good Credit Rating ?",
            "sql": "select customer_id from customers where customer_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 1,
    "final": {
        "utterance": "Which products has been complained by the customer who has filed least amount of complaints?",
        "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who has filed the least amounts of complaints ?",
            "sql": "select distinct t3 . customer_id from products as t1 join complaints as t2 on t1 . product_id = t2 . product_id join customers as t3 group by t3 . customer_id order by count ( * ) limit value"
        },
        {
            "utterance": "Which product have they complained about ? | Who do you mean by `` they '' ? | Customer , 113 .",
            "sql": "select distinct t1 . product_name from products as t1 join complaints as t2 on t1 . product_id = t2 . product_id join customers as t3 group by t3 . customer_id having t3 . customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "How many complaints did each customer file ? | Did you want the customer ids and number of complaints fold for each customer ? | Yes , please .",
            "sql": "select customer_id , count ( * ) from complaints group by customer_id"
        },
        {
            "utterance": "Can you tell me the id of the product with most complaints ?",
            "sql": "select product_id from complaints group by product_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the emails of the customers who filed a complaint of this product ?",
            "sql": "select t1 . email_address from customers as t1 join complaints as t2 on t1 . customer_id = t2 . customer_id where t2 . product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the phone number of the customer who has filed the most recent complaint?",
        "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What date was the most recent complaint raised ?",
            "sql": "select date_complaint_raised from complaints order by date_complaint_raised desc limit value"
        },
        {
            "utterance": "Was this complaint closed ? | Do you mean whether the complaint which raised at 2007-10-14 21:50:43 was closed ? | Correct . Has the complaint raised at 2007-10-14 21:50:43 been closed ?",
            "sql": "select date_complaint_closed from complaints where date_complaint_raised = value"
        },
        {
            "utterance": "What is the customer id for that complaint ? | Do you mean the customer id for the complaint which raised at 2007-10-14 21:50:43 ? | Correct . What is the customer id for the complaint raised at 2007-10-14 21:50:43 ?",
            "sql": "select customer_id from complaints where date_complaint_raised = value"
        },
        {
            "utterance": "What is the phone number for customer id 118 ?",
            "sql": "select phone_number from customers where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of complaints with Product Failure type for each complaint status.",
        "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code"
    },
    "interaction": [
        {
            "utterance": "Find the number of complaints with Product Failure type for each complaint status ?",
            "sql": "select complaint_status_code , count ( * ) from complaints where complaint_type_code = value group by complaint_status_code"
        },
        {
            "utterance": "What were the complaint outcome code of each of those claims ? | Here are the complaint outcome codes of each of Product Failure type claims . | What is the complaint status code of each of those claims ?",
            "sql": "select complaint_status_code from complaints where complaint_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 5,
    "final": {
        "utterance": "Which complaint status has more than 3 records on file?",
        "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "Hello , which complaint id has more than 3 records present on this list ?",
            "sql": "select complaint_id from complaints group by complaint_id having count ( * ) > value"
        },
        {
            "utterance": "Okay , I see . Which complaint status code has more than 3 records on this list ?",
            "sql": "select complaint_status_code from complaints group by complaint_status_code having count ( * ) > value"
        },
        {
            "utterance": "Alright ! Now can you update this list to show the associated complain type code for these two status codes ?",
            "sql": "select complaint_status_code , complaint_type_code from complaints group by complaint_status_code having count ( * ) > value"
        },
        {
            "utterance": "Finally , can you show me the complaint outcome code for each of these two entries ?",
            "sql": "select complaint_outcome_code from complaints group by complaint_status_code having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the last name of the staff who has handled the first ever complaint?",
        "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHAT IS LAST NAME OF THE STAFF WHO HAS HANDLED THE FIRST EVER COMPLAINT ?",
            "sql": "select t1 . last_name from staff as t1 join complaints as t2 on t1 . staff_id = t2 . staff_id order by t2 . date_complaint_raised limit value"
        },
        {
            "utterance": "THE FIRST NAME OF THE STAFF WHO HAS HANDLED THE LAST COMPLAINT",
            "sql": "select t1 . first_name from staff as t1 join complaints as t2 on t1 . staff_id = t2 . staff_id order by t2 . date_complaint_raised desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the email and phone number of the customers who have never filed a complaint before.",
        "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"
    },
    "interaction": [
        {
            "utterance": "Hello , how many complaints have we had ?",
            "sql": "select count ( * ) from complaints"
        },
        {
            "utterance": "How about customers ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "How many customers have filed complaints ?",
            "sql": "select count ( * ) from customers where customer_id in ( select customer_id from complaints )"
        },
        {
            "utterance": "And how many have not filed complaints ?",
            "sql": "select count ( * ) from customers where customer_id not in ( select customer_id from complaints )"
        },
        {
            "utterance": "What is that customer 's phone number ?",
            "sql": "select phone_number from customers where customer_id not in ( select customer_id from complaints )"
        },
        {
            "utterance": "what about that customer 's email ?",
            "sql": "select email_address from customers where customer_id not in ( select customer_id from complaints )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the phone number of the customer who has filed the most recent complaint?",
        "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the phone number of the customer who has filed the most recent complaint ?",
            "sql": "select t1 . phone_number from customers as t1 join complaints as t2 on t1 . customer_id = t2 . customer_id order by t2 . date_complaint_raised desc limit value"
        },
        {
            "utterance": "The customer who filed the latest complaint uses which phone number ?",
            "sql": "select t1 . phone_number from customers as t1 join complaints as t2 on t1 . customer_id = t2 . customer_id order by t2 . date_complaint_raised desc limit value"
        },
        {
            "utterance": "What is the address of the customer who filed the most recent complaint ?",
            "sql": "select t1 . address_line_1 , t1 . address_line_2 from customers as t1 join complaints as t2 on t1 . customer_id = t2 . customer_id order by t2 . date_complaint_raised desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of member in charge of greatest number of events?",
        "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What member is in charge of the most events ?",
            "sql": "select member_in_charge_id , count ( * ) from party_events group by member_in_charge_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of Member ID 4 ?",
            "sql": "select member_name from member where member_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of party with most number of members?",
        "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHO IS THE HON TONY ABBOTT | did you mean the Member ID of HON TONY ABBOTT | YES EXACTLY",
            "sql": "select member_id from member where member_name = value"
        },
        {
            "utterance": "WHAT IS THE NAME OF PARTY WITH MOST NUMBER OF MEMBERS",
            "sql": "select t2 . party_name from member as t1 join party as t2 on t1 . party_id = t2 . party_id group by t1 . party_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the minister who took office after 1961 or before 1959.",
        "sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"
    },
    "interaction": [
        {
            "utterance": "How many ministers were there ?",
            "sql": "select count ( minister ) from party"
        },
        {
            "utterance": "Show the minister who took office after 1961 or before 1959 .",
            "sql": "select minister from party where took_office > value or took_office < value"
        },
        {
            "utterance": "Which minister took office just before 1959 ?",
            "sql": "select minister from party where took_office < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of parties with at least 2 events?",
        "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the names of parties with 2 events",
            "sql": "select t2 . party_name from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id group by t1 . party_id having count ( * ) = value"
        },
        {
            "utterance": "what is the minister name of the party with 2 events",
            "sql": "select t2 . minister from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id group by t1 . party_id having count ( * ) = value"
        },
        {
            "utterance": "what are the minister names of the parties with 1 events",
            "sql": "select t2 . minister from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id group by t1 . party_id having count ( * ) = value"
        },
        {
            "utterance": "what is the name of the party with region ID 3",
            "sql": "select party_name from party where region_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 4,
    "final": {
        "utterance": "How many Annual Meeting events happened in the United Kingdom region?",
        "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
    },
    "interaction": [
        {
            "utterance": "Hello , can you please provide me with a list of all Event IDs and Event names ?",
            "sql": "select event_id , event_name from party_events"
        },
        {
            "utterance": "Can you please filter this list to include only the rows that have 'Annual Meeting ' as the Event Name ?",
            "sql": "select event_id , event_name from party_events where event_name = value"
        },
        {
            "utterance": "Can you show me which of the Events on this list took place in the United Kingdom ?",
            "sql": "select t3 . event_id , t3 . event_name from region as t1 join party as t2 on t1 . region_id = t2 . region_id join party_events as t3 on t2 . party_id = t3 . party_id where t1 . region_name = value and t3 . event_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 5,
    "final": {
        "utterance": "Show party names and the number of events for each party.",
        "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    "interaction": [
        {
            "utterance": "show the party names and the number of events for party id 2",
            "sql": "select t2 . party_name , count ( * ) from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id where t1 . party_id = value group by t1 . party_id"
        },
        {
            "utterance": "find the count of the event name took place for the party id 1",
            "sql": "select t1 . party_id , count ( t2 . party_name ) from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id where t1 . party_id = value"
        },
        {
            "utterance": "find the took office and region id for the event id 1",
            "sql": "select t2 . took_office , t2 . region_id from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id where t1 . party_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all member names who are not in charge of any event.",
        "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id"
    },
    "interaction": [
        {
            "utterance": "Hi how are you ! ? Can you provide me with a list of all of the different member names ?",
            "sql": "select distinct member_name from member"
        },
        {
            "utterance": "Excellent ! Thanks for that ! Can you add to this list the event name associated with each member name ?",
            "sql": "select distinct member_name , t2 . event_name from member as t1 join party_events as t2 on t1 . member_id = t2 . member_in_charge_id"
        },
        {
            "utterance": "Alright ! Can you please show me a list of all member names who are not associated with any event ?",
            "sql": "select member_name from member except select t1 . member_name from member as t1 join party_events as t2 on t1 . member_id = t2 . member_in_charge_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 7,
    "final": {
        "utterance": "Show party names and the number of events for each party.",
        "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    "interaction": [
        {
            "utterance": "How many parties are there ?",
            "sql": "select count ( * ) from party"
        },
        {
            "utterance": "Can you show me the names of the five parties ?",
            "sql": "select party_name from party"
        },
        {
            "utterance": "Can you tell me how many events are at each party ?",
            "sql": "select count ( * ) from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id group by t1 . party_id"
        },
        {
            "utterance": "Yes .",
            "sql": "select t2 . party_name , count ( * ) from party_events as t1 join party as t2 on t1 . party_id = t2 . party_id group by t1 . party_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the customer who has the most policies listed?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many policies does America Jaskolski have listed ?",
            "sql": "select count ( * ) from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id where customer_name = value"
        },
        {
            "utterance": "What about Mrs. Hanna Willms ? | Did you mean the number of policies Mrs. Hanna Willms has listed ? | Yes",
            "sql": "select count ( * ) from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id where customer_name = value"
        },
        {
            "utterance": "How many policies are listed total ?",
            "sql": "select count ( policy_id ) from customers_policies"
        },
        {
            "utterance": "What is the Customer Name who has the most policies listed ?",
            "sql": "select t1 . customer_name from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 1,
    "final": {
        "utterance": "What are all the policy types of the customer that has the most policies listed?",
        "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are all the policy types of the customer that has the most policies listed ?",
            "sql": "select distinct t3 . policy_type_code from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id join available_policies as t3 on t2 . policy_id = t3 . policy_id where t1 . customer_name = ( select t1 . customer_name from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_name order by count ( * ) desc limit value )"
        },
        {
            "utterance": "What is the name of the customer ?",
            "sql": "select t1 . customer_name from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id group by t1 . customer_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the phone number for life insurance ?",
            "sql": "select customer_phone from available_policies where policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    "interaction": [
        {
            "utterance": "How many service names in this table ?",
            "sql": "select count ( service_name ) from services"
        },
        {
            "utterance": "How many customers in this table ?",
            "sql": "select count ( * ) from customers"
        },
        {
            "utterance": "How many customer names in this table ?",
            "sql": "select count ( distinct customer_name ) from customers"
        },
        {
            "utterance": "How many policy ids are in this table ?",
            "sql": "select count ( policy_id ) from first_notification_of_loss"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 3,
    "final": {
        "utterance": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What is the customer ID of America Jaskolski",
            "sql": "select customer_id from customers where customer_name = value"
        },
        {
            "utterance": "How many customer listed ?",
            "sql": "select count ( * ) from customers as t1"
        },
        {
            "utterance": "What is the date opened for customer ID 214 ?",
            "sql": "select date_opened from customers_policies where customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the names of users who do not have a first notification of loss record.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which customers do not have a first notification of loss record ? | What attributes of the customers that do not have a first notification of loss record would you like to know ? | Can you tell me their names ?",
            "sql": "select customer_name from customers except select t1 . customer_name from customers as t1 join first_notification_of_loss as t2 on t1 . customer_id = t2 . customer_id"
        },
        {
            "utterance": "Can you tell me America Jaskolski 's policy id ?",
            "sql": "select t2 . policy_id from customers as t1 join first_notification_of_loss as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 5,
    "final": {
        "utterance": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "How many policies are listed for the customer named `` Dayana Robel '' ?",
            "sql": "select count ( * ) from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        },
        {
            "utterance": "And for America Jaskolski ?",
            "sql": "select count ( * ) from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        },
        {
            "utterance": "How many policies does Ellsworth Paucek have listed ?",
            "sql": "select count ( * ) from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id where t1 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 6,
    "final": {
        "utterance": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What policies does Dayana Robel have ? | Do you mean the policy types of the customer named `` Dayana Robel '' ? | yes",
            "sql": "select distinct t3 . policy_type_code from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id join available_policies as t3 on t2 . policy_id = t3 . policy_id where t1 . customer_name = value"
        },
        {
            "utterance": "What is it 's phone number ?",
            "sql": "select distinct customer_phone from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id join available_policies as t3 on t2 . policy_id = t3 . policy_id where t1 . customer_name = value"
        },
        {
            "utterance": "And on which date was this policy opened ?",
            "sql": "select t2 . date_opened from customers as t1 join customers_policies as t2 on t1 . customer_id = t2 . customer_id join available_policies as t3 on t2 . policy_id = t3 . policy_id where t1 . customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you provide me with a list of all of the service names ?",
            "sql": "select service_name from services"
        },
        {
            "utterance": "Thank you very much for that ! Could you please filter this list to show only the Service Names which occur more than once on the First Notification of Loss table ?",
            "sql": "select t2 . service_name from first_notification_of_loss as t1 join services as t2 on t1 . service_id = t2 . service_id group by t1 . service_id having count ( * ) > value"
        },
        {
            "utterance": "My apologies ! I meant to ask for the list to be filtered to show only the Service Names which occur more than 2 times on the First_Notification_of_Loss table ?",
            "sql": "select t2 . service_name from first_notification_of_loss as t1 join services as t2 on t1 . service_id = t2 . service_id group by t1 . service_id having count ( * ) > value"
        },
        {
            "utterance": "Awesome ! Can you show me how many times New policy application has been used ?",
            "sql": "select t2 . service_name , count ( * ) from first_notification_of_loss as t1 join services as t2 on t1 . service_id = t2 . service_id group by t1 . service_id having service_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the total and average amount of settlements.",
        "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the settlement IDs and the corresponding settlement amounts ?",
            "sql": "select settlement_id , settlement_amount from settlements"
        },
        {
            "utterance": "Great ! Can you calculate for me the sum total of all Settlement Amounts and also the average Settlement Amount for all settlements ?",
            "sql": "select sum ( settlement_amount ) , avg ( settlement_amount ) from settlements"
        },
        {
            "utterance": "Wonderful ! Can you show me what the oldest settlement effective date is ?",
            "sql": "select effective_date from settlements order by effective_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 9,
    "final": {
        "utterance": "Which policy type has the most records in the database?",
        "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the policy types available ? | Do you mean policy type code ? | yes",
            "sql": "select distinct policy_type_code from available_policies"
        },
        {
            "utterance": "Show me the policy type code with policy id 257 ?",
            "sql": "select policy_type_code from available_policies where policy_id = value"
        },
        {
            "utterance": "Show me the policy id of the policy type code Life insurance ?",
            "sql": "select policy_id from available_policies where policy_type_code = value"
        },
        {
            "utterance": "Show which policy type has the most records in the database ?",
            "sql": "select policy_type_code from available_policies group by policy_type_code order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "Find the number of scientists involved for the projects that require more than 300 hours",
            "sql": "select count ( distinct scientist ) from projects as t1 join assignedto as t2 on t1 . code = t2 . project where t1 . hours > value"
        },
        {
            "utterance": "Find the number of scientists involved for the projects that require less than 300 hours",
            "sql": "select count ( distinct scientist ) from projects as t1 join assignedto as t2 on t1 . code = t2 . project where t1 . hours < value"
        },
        {
            "utterance": "and what are the names of the projects requiring more than 300 hours",
            "sql": "select name from projects where hours > value"
        },
        {
            "utterance": "and what is the scientist id for project Aerodynamics and Bridge Design",
            "sql": "select t2 . scientist from projects as t1 join assignedto as t2 on t1 . code = t2 . project where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'"
    },
    "interaction": [
        {
            "utterance": "Fine the name of the project for which a scientist whose name contains `` Smith '' is assigned to .",
            "sql": "select t2 . name from assignedto as t1 join projects as t2 on t1 . project = t2 . code join scientists as t3 on t1 . scientist = t3 . ssn where t3 . name like value"
        },
        {
            "utterance": "What is the first name of `` Smith ''",
            "sql": "select name from scientists where name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the number of scientists involved for each project name.",
        "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "How many number if scientist belong to project AeH1",
            "sql": "select count ( * ) from projects as t1 join assignedto as t2 on t1 . code = t2 . project where t1 . code = value"
        },
        {
            "utterance": "How about project Ast3 , how many scientists ?",
            "sql": "select count ( * ) from projects as t1 join assignedto as t2 on t1 . code = t2 . project where t1 . code = value"
        },
        {
            "utterance": "How about project AeH3",
            "sql": "select count ( * ) from projects as t1 join assignedto as t2 on t1 . code = t2 . project where t1 . code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.",
        "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "how many projects are presented on the table",
            "sql": "select count ( * ) from projects"
        },
        {
            "utterance": "list out the projects names",
            "sql": "select name from projects"
        },
        {
            "utterance": "which project are least hours on the table",
            "sql": "select name from projects where hours = ( select min ( hours ) from projects )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name"
    },
    "interaction": [
        {
            "utterance": "What are all of the scientists ' names please ?",
            "sql": "select name from scientists"
        },
        {
            "utterance": "What are the project names of all of them ?",
            "sql": "select t1 . name , t3 . name from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code"
        },
        {
            "utterance": "Can you show the hours they each worked too , please ?",
            "sql": "select t1 . name , t3 . name , t3 . hours from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code order by t3 . name , t1 . name"
        },
        {
            "utterance": "Can you please order them in alphabetical order of project , and then of scientist name ?",
            "sql": "select t1 . name , t3 . name , t3 . hours from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code order by t3 . name , t1 . name"
        },
        {
            "utterance": "What are the average hours worked by all scientists , please ? | Do you mean average hours on each project among all scientists ? | Yes , please .",
            "sql": "select avg ( hours ) from projects"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "state the projects with least hours ? | Do you need the project code or name ? | name",
            "sql": "select name from projects order by hours limit value"
        },
        {
            "utterance": "List the name of all projects that are operated longer than the average working hours of all projects",
            "sql": "select name from projects where hours > ( select avg ( hours ) from projects )"
        },
        {
            "utterance": "State the total number of projects of the list ?",
            "sql": "select count ( * ) from projects"
        },
        {
            "utterance": "Which project has the highest hours on the list ?",
            "sql": "select name from projects order by hours desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of scientists who are not working on the project with the highest hours.",
        "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "What is the name of the project with the highest hours ?",
            "sql": "select name from projects order by hours desc limit value"
        },
        {
            "utterance": "What is the code of the project A Magnetic Primer Designer ?",
            "sql": "select code from projects where name = value"
        },
        {
            "utterance": "Who are the scientists who are not assigned to the project Bte2 ?",
            "sql": "select scientist from assignedto where project ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
        "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'"
    },
    "interaction": [
        {
            "utterance": "What about the names of scientists that worked on the project named 'A Puzzling Parallax ' ?",
            "sql": "select t3 . name from assignedto as t1 join projects as t2 on t1 . project = t2 . code join scientists as t3 on t1 . scientist = t3 . ssn where t2 . name = value"
        },
        {
            "utterance": "Could you give the list of all projects along with the names of scientists that worked on them ? | Do you mean a list of the names of all the projects and the names of scientists that worked on them ? | Yes Please !",
            "sql": "select t3 . name , t2 . name from assignedto as t1 join projects as t2 on t1 . project = t2 . code join scientists as t3 on t1 . scientist = t3 . ssn"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name"
    },
    "interaction": [
        {
            "utterance": "List all project code name and hours worked by Scientists ssn | Do you mean list their ssn 's ? | yes , list the project codes , names , and hours worked by scientists by ssn",
            "sql": "select t3 . name , t3 . code , t3 . hours from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code order by t1 . ssn"
        },
        {
            "utterance": "list scientists names by ssn",
            "sql": "select name from scientists order by ssn"
        },
        {
            "utterance": "list Project codes , names , and hours worked by scientist by ssn and name",
            "sql": "select t3 . code , t3 . name , t3 . hours from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code order by t1 . ssn"
        },
        {
            "utterance": "list results by scientists name",
            "sql": "select t3 . code , t3 . name , t3 . hours from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code order by t1 . name"
        },
        {
            "utterance": "list results by project by scientists names | Do you mean list the project names by scientists names ? | yes",
            "sql": "select t3 . name from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code order by t1 . name"
        },
        {
            "utterance": "list project names in ascending order",
            "sql": "select t3 . name from scientists as t1 join assignedto as t2 on t1 . ssn = t2 . scientist join projects as t3 on t2 . project = t3 . code order by t1 . name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Select the project names which are not assigned yet.",
        "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"
    },
    "interaction": [
        {
            "utterance": "What are assigned project names ?",
            "sql": "select t1 . name from projects as t1 join assignedto as t2 on t1 . code = t2 . project"
        },
        {
            "utterance": "How about names of not assigned projects ?",
            "sql": "select name from projects where code not in ( select project from assignedto )"
        },
        {
            "utterance": "what is the name of not assigned project with the least hours ?",
            "sql": "select name from projects where code not in ( select project from assignedto ) order by hours limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of project that continues for the longest time.",
        "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What project has the longest time ? List the name .",
            "sql": "select name from projects order by hours desc limit value"
        },
        {
            "utterance": "What are the names of the projects ?",
            "sql": "select name from projects"
        },
        {
            "utterance": "How many hours does A Magnetic Primer Designer have ?",
            "sql": "select hours from projects where name = value"
        },
        {
            "utterance": "What is the code for A Magnetic Primer Designer ?",
            "sql": "select code from projects where name = value"
        },
        {
            "utterance": "What Project has the Shortest time ?",
            "sql": "select name from projects order by hours limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of storms which don't have affected region in record.",
        "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
    },
    "interaction": [
        {
            "utterance": "What are the names of storms which do n't have affected region in record ?",
            "sql": "select name from storm where storm_id not in ( select storm_id from affected_region )"
        },
        {
            "utterance": "What is the number of city affected for storm with name two ?",
            "sql": "select number_city_affected from affected_region where storm_id = ( select storm_id from storm where name = value )"
        },
        {
            "utterance": "What is storm name two storm ID ?",
            "sql": "select storm_id from storm where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"
    },
    "interaction": [
        {
            "utterance": "Can you please show me the average damage for all storms ?",
            "sql": "select avg ( damage_millions_usd ) from storm"
        },
        {
            "utterance": "Can you please show me the maximum damage for all storms ?",
            "sql": "select max ( damage_millions_usd ) from storm"
        },
        {
            "utterance": "Can you please show me the minimum damage for all storms ?",
            "sql": "select min ( damage_millions_usd ) from storm"
        },
        {
            "utterance": "Can you please show me the minimum damage for all storms with maximum speed higher than 1000 ?",
            "sql": "select min ( damage_millions_usd ) from storm where max_speed > value"
        },
        {
            "utterance": "Can you please show me the maximum damage for all storms with maximum speed higher than 1000 ?",
            "sql": "select max ( damage_millions_usd ) from storm where max_speed > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the region name with at least two storms.",
        "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many region are presented on the table",
            "sql": "select count ( * ) from region"
        },
        {
            "utterance": "list out the region name",
            "sql": "select region_name from region"
        },
        {
            "utterance": "what is the region code of Afghanistan",
            "sql": "select region_code from region where region_name = value"
        },
        {
            "utterance": "what is the highest number city affected",
            "sql": "select t1 . region_name from region as t1 join affected_region as t2 on t1 . region_id = t2 . region_id group by t1 . region_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all storm names affecting region \"Denmark\".",
        "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
    },
    "interaction": [
        {
            "utterance": "What is the region id for region name Denmark ?",
            "sql": "select region_id from region where region_name = value"
        },
        {
            "utterance": "Show me all storm ids affecting a region id of 12 .",
            "sql": "select t3 . storm_id from affected_region as t1 join region as t2 on t1 . region_id = t2 . region_id join storm as t3 on t1 . storm_id = t3 . storm_id where t2 . region_name = value"
        },
        {
            "utterance": "What is the name of this storm ?",
            "sql": "select t3 . name from affected_region as t1 join region as t2 on t1 . region_id = t2 . region_id join storm as t3 on t1 . storm_id = t3 . storm_id where t2 . region_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the storm name and max speed which affected the greatest number of regions?",
        "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the storm name of the storm that affected the greatest number of regions ?",
            "sql": "select t1 . name , t1 . max_speed from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of the storm with the lowest speed ?",
            "sql": "select t1 . name from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id order by max_speed limit value"
        },
        {
            "utterance": "What is the average speed of all the storms ?",
            "sql": "select avg ( max_speed ) from storm"
        },
        {
            "utterance": "What 's the average damage in millions usd for all storms ?",
            "sql": "select avg ( damage_millions_usd ) from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name for regions not affected.",
        "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me the name of the regions not affected by storms ?",
            "sql": "select region_name from region where region_id not in ( select region_id from affected_region )"
        },
        {
            "utterance": "Can you tell me the names of the cities affected by storm ?",
            "sql": "select region_name from region where region_id in ( select region_id from affected_region )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"
    },
    "interaction": [
        {
            "utterance": "What was the name of the storm that affected Afghanistan and Albania between May 19 and May 25 ?",
            "sql": "select t3 . name from affected_region as t1 join region as t2 on t1 . region_id = t2 . region_id join storm as t3 on t1 . storm_id = t3 . storm_id where t2 . region_name = value and t3 . dates_active = value intersect select t3 . name from affected_region as t1 join region as t2 on t1 . region_id = t2 . region_id join storm as t3 on t1 . storm_id = t3 . storm_id where t2 . region_name = value and t3 . dates_active = value"
        },
        {
            "utterance": "What storm affected city 10.0 and 15.0 ? | do you mean the name of storm that affected city 10 and 15 ? | Yes",
            "sql": "select t1 . name from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id where t2 . number_city_affected = value or t2 . number_city_affected = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name of storms which don't have affected region in record.",
        "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
    },
    "interaction": [
        {
            "utterance": "what is the average of high speed ? | Did you mean to ask for the average max speed of the storms ? | yes",
            "sql": "select avg ( max_speed ) from storm"
        },
        {
            "utterance": "what is the highest speed of the storms ?",
            "sql": "select max ( max_speed ) from storm"
        },
        {
            "utterance": "what is the total number of deaths ?",
            "sql": "select sum ( number_deaths ) from storm"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name for regions and the number of storms for each region.",
        "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
    },
    "interaction": [
        {
            "utterance": "how many cities were affected ?",
            "sql": "select sum ( number_city_affected ) from affected_region"
        },
        {
            "utterance": "what are the name for the regions ?",
            "sql": "select region_name from region"
        },
        {
            "utterance": "how many number of storms for each region ?",
            "sql": "select t1 . region_name , count ( * ) from region as t1 join affected_region as t2 on t1 . region_id = t2 . region_id group by t1 . region_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 9,
    "final": {
        "utterance": "Show storm name with at least two regions and 10 cities affected.",
        "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the storms that affected at least two regions ?",
            "sql": "select t1 . name from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the names of all the storms that affected at least 10 cities ?",
            "sql": "select t1 . name from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id having sum ( t2 . number_city_affected ) > = value"
        },
        {
            "utterance": "What are the names of all the storms that affected at least 10 cities and two regions ?",
            "sql": "select t1 . name from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id having count ( * ) > = value intersect select t1 . name from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id having sum ( t2 . number_city_affected ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 10,
    "final": {
        "utterance": "Show storm name with at least two regions and 10 cities affected.",
        "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
    },
    "interaction": [
        {
            "utterance": "how many storms caused damage to any regions ?",
            "sql": "select count ( * ) from storm"
        },
        {
            "utterance": "how many of the storms caused damage to at least two regions ?",
            "sql": "select count ( * ) from ( select t1 . name from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id having count ( * ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 11,
    "final": {
        "utterance": "List the name for storms and the number of affected regions for each storm.",
        "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of all storms ?",
            "sql": "select name from storm"
        },
        {
            "utterance": "How many regions were affected by the first storm ?",
            "sql": "select t1 . name , count ( * ) from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id limit value"
        },
        {
            "utterance": "What is the number of affected regions for each storm ?",
            "sql": "select t1 . name , count ( * ) from storm as t1 join affected_region as t2 on t1 . storm_id = t2 . storm_id group by t1 . storm_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 0,
    "final": {
        "utterance": "List the official names of cities that have not held any competition.",
        "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
    },
    "interaction": [
        {
            "utterance": "What is the population of city Id 2 ?",
            "sql": "select population from city where city_id = value"
        },
        {
            "utterance": "What is the census ranking of Perth-Andover ?",
            "sql": "select census_ranking from city where official_name = value"
        },
        {
            "utterance": "What is the name of hosts of Carnival M is back ?",
            "sql": "select hosts from farm_competition where theme like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 1,
    "final": {
        "utterance": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    "interaction": [
        {
            "utterance": "Which cities have populations larger than 1000 ? List their ids .",
            "sql": "select city_id from city where population > value"
        },
        {
            "utterance": "What is the theme for these cities ? | The themes of competitions with host cities having populations larger than 1000 are Carnival M is back ! , Codehunters , and MTV Asia Aid | Which cities have populations less than 1000 ? List their ids .",
            "sql": "select distinct t1 . city_id from city as t1 join farm_competition as t2 on t1 . city_id = t2 . host_city_id where t1 . population < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
    },
    "interaction": [
        {
            "utterance": "what is the status of Perth-Andover | The status of the city with official name Perth-Andover is Village . | what is the name of the city that is top in area km 2 .",
            "sql": "select official_name from city order by area_km_2 desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and minimum number of cows across all farms.",
        "sql": "SELECT max(Cows) ,  min(Cows) FROM farm"
    },
    "interaction": [
        {
            "utterance": "Out of all the farms , what are the maximum and minimum numbers of cows ?",
            "sql": "select max ( cows ) , min ( cows ) from farm"
        },
        {
            "utterance": "And for horses ? | Do you mean total horses or working horses ? | total horses",
            "sql": "select max ( total_horses ) , min ( total_horses ) from farm"
        },
        {
            "utterance": "How many more oxen are there than cattle on farm id 1",
            "sql": "select oxen , total_cattle from farm where farm_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the official names of the cities that have hosted more than one competition.",
        "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show me the official names of the cities that have hosted more than one competition ?",
            "sql": "select t1 . official_name from city as t1 join farm_competition as t2 on t1 . city_id = t2 . host_city_id group by t2 . host_city_id having count ( * ) > value"
        },
        {
            "utterance": "Show me the official names of the cities that have hosted only one competition ?",
            "sql": "select t1 . official_name from city as t1 join farm_competition as t2 on t1 . city_id = t2 . host_city_id group by t2 . host_city_id having count ( * ) = value"
        },
        {
            "utterance": "What were the themes of each of those competitions ?",
            "sql": "select t1 . official_name , t2 . theme from city as t1 join farm_competition as t2 on t1 . city_id = t2 . host_city_id group by t2 . host_city_id having count ( * ) = value"
        },
        {
            "utterance": "What is the census rating of the city with the official name `` Plaster Rock '' ?",
            "sql": "select t1 . census_ranking from city as t1 join farm_competition as t2 on t1 . city_id = t2 . host_city_id where t1 . official_name = value"
        },
        {
            "utterance": "What is the census rating of the city that hosted the competition with the theme `` Carnival M is back ! `` ?",
            "sql": "select t1 . census_ranking from city as t1 join farm_competition as t2 on t1 . city_id = t2 . host_city_id where t2 . theme = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the status of the city that has hosted the greatest number of competitions.",
        "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Sure ! On my end I 'm seeing that the first table is labeled `` City '' , but if these are towns and villages then I 'd like to see what you are suggesting ! Thanks !",
            "sql": "select official_name from city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 0,
    "final": {
        "utterance": "find the program owners that have some programs in both morning and night time.",
        "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\""
    },
    "interaction": [
        {
            "utterance": "which program owners have programs in the morning and the night",
            "sql": "select t1 . owner from program as t1 join broadcast as t2 on t1 . program_id = t2 . program_id where t2 . time_of_day = value intersect select t1 . owner from program as t1 join broadcast as t2 on t1 . program_id = t2 . program_id where t2 . time_of_day = value"
        },
        {
            "utterance": "what are the programs by Beijing television ? | Did you want the program names by the owner Beijing television ( BTV ) | yes",
            "sql": "select name from program where owner = value"
        },
        {
            "utterance": "when did kaku launch ?",
            "sql": "select launch from program where name = value"
        },
        {
            "utterance": "who is Toonmax owner ? | Did you want the owner of the program named Toonmax ? | yes",
            "sql": "select owner from program where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 1,
    "final": {
        "utterance": "find the name of the program that was launched most recently.",
        "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are names of all programs ?",
            "sql": "select name from program"
        },
        {
            "utterance": "Of them which was launched most recently ?",
            "sql": "select name from program order by launch desc limit value"
        },
        {
            "utterance": "Who is the owner ?",
            "sql": "select owner from program order by launch desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of the channels that are broadcast in the morning.",
        "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Could you provide me with a list of all of the channel IDs for which the `` time of day '' is morning ?",
            "sql": "select channel_id from broadcast where time_of_day = value"
        },
        {
            "utterance": "Thank you for that ! Could you update this list to include the channel name ?",
            "sql": "select t1 . name , t2 . channel_id from channel as t1 join broadcast as t2 on t1 . channel_id = t2 . channel_id where t2 . time_of_day = value"
        },
        {
            "utterance": "Excellent ! Finally , can you show me what the ownership is of each of those stations ?",
            "sql": "select t1 . name , t2 . channel_id , owner from channel as t1 join broadcast as t2 on t1 . channel_id = t2 . channel_id where t2 . time_of_day = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 3,
    "final": {
        "utterance": "what are the names of the channels that broadcast in both morning and night?",
        "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'"
    },
    "interaction": [
        {
            "utterance": "how many broadcast are presented on the table",
            "sql": "select count ( * ) from broadcast"
        },
        {
            "utterance": "what are all the channel are presented on the table",
            "sql": "select * from channel"
        },
        {
            "utterance": "what is the owner name of CCTV-1",
            "sql": "select owner from channel where name = value"
        },
        {
            "utterance": "which channel are highest rating percent on the table",
            "sql": "select name from channel where rating_in_percent = ( select max ( rating_in_percent ) from channel )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of the program that is broadcast most frequently.",
        "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show me the programmes | Do you mean all the program ids ? | yes",
            "sql": "select program_id from program"
        },
        {
            "utterance": "list the name of programme that broadcast frequently | Do you mean the name of the program that is broadcast most frequently ? | yes",
            "sql": "select t1 . name from program as t1 join broadcast as t2 on t1 . program_id = t2 . program_id group by t2 . program_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Please show the most common publication date.",
        "sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the publication dates in the list ?",
            "sql": "select publication_date from publication"
        },
        {
            "utterance": "Can you sort the list by publication date from most common to least common ?",
            "sql": "select publication_date from publication group by publication_date order by count ( * ) desc"
        },
        {
            "utterance": "What is the most common publication date ?",
            "sql": "select publication_date from publication group by publication_date order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Show publishers that have more than one publication.",
        "sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show publishers that have less than one publication ?",
            "sql": "select publisher from publication group by publisher having count ( * ) > value"
        },
        {
            "utterance": "Show all the publishers ?",
            "sql": "select publisher from publication"
        },
        {
            "utterance": "What is the highest price that a publisher earns ?",
            "sql": "select price from publication order by price desc limit value"
        },
        {
            "utterance": "What is the lowest price that a publisher earns ?",
            "sql": "select price from publication order by price limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the titles of books in descending order of publication price.",
        "sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC"
    },
    "interaction": [
        {
            "utterance": "I need a list of the titles of books .",
            "sql": "select title from book"
        },
        {
            "utterance": "Can you give me the price of those books ?",
            "sql": "select t2 . price from book as t1 join publication as t2 on t1 . book_id = t2 . book_id"
        },
        {
            "utterance": "can you list those in ascending order ?",
            "sql": "select t2 . price from book as t1 join publication as t2 on t1 . book_id = t2 . book_id order by t2 . price asc"
        },
        {
            "utterance": "Can you list the prices along with the books ?",
            "sql": "select t2 . price , t1 . title from book as t1 join publication as t2 on t1 . book_id = t2 . book_id order by t2 . price asc"
        },
        {
            "utterance": "Now can you list the titles of the books and the prices but in descending order ?",
            "sql": "select t2 . price , t1 . title from book as t1 join publication as t2 on t1 . book_id = t2 . book_id order by t2 . price desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Show writers who have published a book with price more than 4000000.",
        "sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000"
    },
    "interaction": [
        {
            "utterance": "what 's the highest price of book published on this list ?",
            "sql": "select max ( t2 . price ) from book as t1 join publication as t2 on t1 . book_id = t2 . book_id"
        },
        {
            "utterance": "who 's the writer of The Black Lamb ?",
            "sql": "select t1 . writer from book as t1 join publication as t2 on t1 . book_id = t2 . book_id where t1 . title = value"
        },
        {
            "utterance": "what 's the price for Wiley 's publication ? | Which of Wiley 's publications do you want to know the price for ? | the one of june 2006",
            "sql": "select t2 . price from book as t1 join publication as t2 on t1 . book_id = t2 . book_id where t2 . publisher = value and t2 . publication_date = value"
        },
        {
            "utterance": "who 's the writer of Bloody Mary ? | Did you mean Bloody Mary or Bloody Mary : Lady Liberty ? | Bloody Mary",
            "sql": "select writer from book where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 4,
    "final": {
        "utterance": "List the publication dates of publications with 3 lowest prices.",
        "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the prices of the 3 lowest publications ?",
            "sql": "select price from publication order by price asc limit value"
        },
        {
            "utterance": "And who are the publishers of the 3 lowest priced publications ?",
            "sql": "select publisher from publication order by price asc limit value"
        },
        {
            "utterance": "What are the publication dates of the 3 lowest priced publications ?",
            "sql": "select publication_date from publication order by price asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000"
    },
    "interaction": [
        {
            "utterance": "how many publishers are there ?",
            "sql": "select count ( distinct publisher ) from publication"
        },
        {
            "utterance": "Yes please | Which one ? Do you mean the publishers of the result table that also have publications with prices lower than 5000000 or any publisher that has a publication with a price lower than 5000000 ? | in the table that you just created , add the names of the publishers with price lower than 5000000 , and include their price in the table too .",
            "sql": "select publisher , price from publication where price > value or price < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 0,
    "final": {
        "utterance": "Which document has the most draft copies? List its document id and number of draft copies.",
        "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "how many documents are there ?",
            "sql": "select count ( * ) from draft_copies"
        },
        {
            "utterance": "What 's the least amount of draft copies that a document has ?",
            "sql": "select count ( copy_number ) from draft_copies group by document_id order by count ( copy_number ) limit value"
        },
        {
            "utterance": "What 's the most amount of draft copies that a document has ?",
            "sql": "select count ( copy_number ) from draft_copies group by document_id order by count ( copy_number ) desc limit value"
        },
        {
            "utterance": "what 's the id of the document that has the most draft copies ?",
            "sql": "select document_id from draft_copies group by document_id order by count ( copy_number ) desc limit value"
        },
        {
            "utterance": "how many draft copies does that document have ?",
            "sql": "select document_id , count ( copy_number ) from draft_copies group by document_id order by count ( copy_number ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 1,
    "final": {
        "utterance": "How many documents were shipped by USPS?",
        "sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    "interaction": [
        {
            "utterance": "Show me a list of all shipping agent codes",
            "sql": "select shipping_agent_code from ref_shipping_agents"
        },
        {
            "utterance": "add a column showing the total number of documents shipped per code",
            "sql": "select shipping_agent_code , count ( * ) from documents group by shipping_agent_code"
        },
        {
            "utterance": "Add another column showing the shipping agent name",
            "sql": "select t1 . shipping_agent_code , t1 . shipping_agent_name , count ( * ) from ref_shipping_agents as t1 join documents as t2 on t2 . shipping_agent_code = t1 . shipping_agent_code group by t2 . shipping_agent_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 2,
    "final": {
        "utterance": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Hello . What is the name of the employee that has showed up the most in circulation history documents ?",
            "sql": "select t1 . employee_name from employees as t1 join circulation_history as t2 on t2 . employee_id = t1 . employee_id group by t1 . employee_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many drafts have they shown up in ?",
            "sql": "select t1 . employee_name , sum ( t2 . draft_number ) from employees as t1 join circulation_history as t2 on t2 . employee_id = t1 . employee_id group by t2 . document_id , t2 . draft_number , t2 . copy_number order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many copies have they shown up in ?",
            "sql": "select sum ( t2 . copy_number ) from employees as t1 join circulation_history as t2 on t2 . employee_id = t1 . employee_id group by t2 . document_id , t2 . draft_number , t2 . copy_number order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 3,
    "final": {
        "utterance": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the name of the shipping agent that shipped the largest number of documents ?",
            "sql": "select t1 . shipping_agent_name from ref_shipping_agents as t1 join documents as t2 on t2 . shipping_agent_code = t1 . shipping_agent_code group by t1 . shipping_agent_code order by count ( t2 . document_id ) desc limit value"
        },
        {
            "utterance": "What is the name of the shipping agent that shipped the smallest number of documents ?",
            "sql": "select t1 . shipping_agent_name from ref_shipping_agents as t1 join documents as t2 on t2 . shipping_agent_code = t1 . shipping_agent_code group by t1 . shipping_agent_code order by count ( t2 . document_id ) limit value"
        },
        {
            "utterance": "What are the receipt dates of all of the documents Airline shipped ?",
            "sql": "select t2 . receipt_date from ref_shipping_agents as t1 join documents as t2 on t2 . shipping_agent_code = t1 . shipping_agent_code where t1 . shipping_agent_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 4,
    "final": {
        "utterance": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( * ) from employees"
        },
        {
            "utterance": "How many employees are in the circulation history with the document id 1 ?",
            "sql": "select count ( employee_id ) from circulation_history where document_id = value"
        },
        {
            "utterance": "Can you tell me the name of the employee that is in the circulation history with document id 1 ?",
            "sql": "select t1 . employee_name from employees as t1 join circulation_history as t2 on t1 . employee_id = t2 . employee_id where t2 . document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the role of the employee named Koby?",
        "sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"
    },
    "interaction": [
        {
            "utterance": "what role does Koby play ?",
            "sql": "select t1 . role_description from roles as t1 join employees as t2 on t1 . role_code = t2 . role_code where t2 . employee_name = value"
        },
        {
            "utterance": "what is the role code",
            "sql": "select t1 . role_code from roles as t1 join employees as t2 on t1 . role_code = t2 . role_code where t2 . employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of pilots and the number of records they have.",
        "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the pilots with IDs 1 and 2 ?",
            "sql": "select pilot_name from pilot where pilot_id = value or pilot_id = value"
        },
        {
            "utterance": "How many records do they have ?",
            "sql": "select t2 . pilot_id , count ( * ) from pilot_record as t1 join pilot as t2 on t1 . pilot_id = t2 . pilot_id where t2 . pilot_id = value or t2 . pilot_id = value group by t2 . pilot_id"
        },
        {
            "utterance": "Which year did they join ?",
            "sql": "select pilot_id , join_year from pilot where pilot_id = value or pilot_id = value"
        },
        {
            "utterance": "Which are their teams ?",
            "sql": "select pilot_id , team from pilot where pilot_id = value or pilot_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the most common nationality of pilots.",
        "sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello , how many different nationalities of pilots are there ?",
            "sql": "select count ( distinct nationality ) from pilot"
        },
        {
            "utterance": "What are the pilot names of those 3 nationalities ?",
            "sql": "select nationality , pilot_name from pilot"
        },
        {
            "utterance": "What is the most common nationality of the 3 nationalities ?",
            "sql": "select nationality from pilot group by nationality order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank"
    },
    "interaction": [
        {
            "utterance": "Can you please show the names of all pilots and fleet series of the aircrafts they have flown in ascending order of the rank of the pilot ?",
            "sql": "select t3 . pilot_name , t2 . fleet_series from pilot_record as t1 join aircraft as t2 on t1 . aircraft_id = t2 . aircraft_id join pilot as t3 on t1 . pilot_id = t3 . pilot_id order by t3 . rank"
        },
        {
            "utterance": "What are each of those pilots ' nationalities ? | Do you want to konw Pilot name and related pilots ' nationalities ? | Yes , please .",
            "sql": "select pilot_name , nationality from pilot"
        },
        {
            "utterance": "What kind of fuel propulsion do these pilots ' aircrafts use ?",
            "sql": "select distinct ( fuel_propulsion ) from aircraft"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005"
    },
    "interaction": [
        {
            "utterance": "show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000 .",
            "sql": "select position from pilot where join_year < value intersect select position from pilot where join_year > value"
        },
        {
            "utterance": "show me the ages of pilots in the center team position",
            "sql": "select age from pilot where position = value"
        },
        {
            "utterance": "what is the nationality of the forward-center team ? | Do you mean the nationality of the pilot in the forward-center team ? | yes",
            "sql": "select nationality from pilot where position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34"
    },
    "interaction": [
        {
            "utterance": "please tell me the name of pilot | Did you mean all the names in the pilot ? | yes",
            "sql": "select pilot_name from pilot"
        },
        {
            "utterance": "i need the pilot ID | Did you mean to show all of the pilot IDs ? | yes",
            "sql": "select pilot_id from pilot"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of route that has the highest number of deliveries.",
        "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of route that has the lowest number of deliveries ?",
            "sql": "select t1 . route_name from delivery_routes as t1 join delivery_route_locations as t2 on t1 . route_id = t2 . route_id group by t1 . route_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many route names in this table ?",
            "sql": "select count ( route_name ) from delivery_routes"
        },
        {
            "utterance": "How many delivery route location in this table ?",
            "sql": "select t2 . location_code , count ( * ) from delivery_routes as t1 join delivery_route_locations as t2 on t1 . route_id = t2 . route_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name and price of the product that has been ordered the greatest number of times.",
        "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know what product has been ordered the greatest number of times .",
            "sql": "select * from products as t1 join regular_order_products as t2 on t1 . product_id = t2 . product_id group by t2 . product_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What products have less orders than dvds ? | Did you want to return all info of the products or just their names ? | What is the total cost of the dvd orders ?",
            "sql": "select sum ( product_price ) from products as t1 join regular_order_products as t2 on t1 . product_id = t2 . product_id where t1 . product_name = value"
        },
        {
            "utterance": "And what about electronics ?",
            "sql": "select sum ( product_price ) from products as t1 join regular_order_products as t2 on t1 . product_id = t2 . product_id where t1 . product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the payment method that is used most frequently.",
        "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most frequently used payment method ?",
            "sql": "select payment_method from customers group by payment_method order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many customers used Visa to pay ?",
            "sql": "select count ( * ) from customers group by payment_method having payment_method = value"
        },
        {
            "utterance": "Can you show me the email addresses of all the customers who paid with Visa ?",
            "sql": "select customer_email from customers where payment_method = value"
        },
        {
            "utterance": "How about their phone numbers ?",
            "sql": "select customer_phone from customers where payment_method = value"
        },
        {
            "utterance": "Who is the newest customer of that group ?",
            "sql": "select customer_name from customers where payment_method = value order by date_became_customer limit value"
        },
        {
            "utterance": "When did that customer become a customer ?",
            "sql": "select date_became_customer from customers where payment_method = value order by date_became_customer limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and price of the product that has been ordered the greatest number of times.",
        "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the products ?",
            "sql": "select product_name from products"
        },
        {
            "utterance": "What is the highest price for the products ?",
            "sql": "select max ( product_price ) from products"
        },
        {
            "utterance": "What product has been ordered the greatest number of times ?",
            "sql": "select t1 . product_name from products as t1 join regular_order_products as t2 on t1 . product_id = t2 . product_id group by t2 . product_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the price of the dvds ?",
            "sql": "select product_price from products where product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the states which do not have any employee in their record.",
        "sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)"
    },
    "interaction": [
        {
            "utterance": "Which state has the most employees ?",
            "sql": "select t1 . state_province_county from addresses as t1 join employees as t2 on t1 . address_id = t2 . employee_address_id group by t1 . state_province_county order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which state has the least ?",
            "sql": "select t1 . state_province_county from addresses as t1 join employees as t2 on t1 . address_id = t2 . employee_address_id group by t1 . state_province_county order by count ( * ) limit value"
        },
        {
            "utterance": "WHich states have no employees ?",
            "sql": "select state_province_county from addresses where address_id not in ( select employee_address_id from employees )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the first 5 customers.",
        "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customer_id ) from customers"
        },
        {
            "utterance": "When did the last customer come ?",
            "sql": "select date_became_customer from customers order by date_became_customer desc limit value"
        },
        {
            "utterance": "How about the first ?",
            "sql": "select date_became_customer from customers order by date_became_customer limit value"
        },
        {
            "utterance": "Can you show me the names of the first five customers ?",
            "sql": "select customer_name from customers order by date_became_customer limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of customers who are not living in the state of California.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all customer IDs for customers not located in the state of California ?",
            "sql": "select customer_id from customers except select t1 . customer_id from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id where t3 . state_province_county = value"
        },
        {
            "utterance": "Thanks ! Can you update this list to show both the city name and state associated with each of these customers ?",
            "sql": "select t1 . customer_id , t3 . city , t3 . state_province_county from customers as t1 join customer_addresses as t2 on t1 . customer_id = t2 . customer_id join addresses as t3 on t2 . address_id = t3 . address_id where t3 . state_province_county ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the first 5 customers.",
        "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "How many customers used Visa ?",
            "sql": "select count ( distinct customer_name ) from customers where payment_method = value"
        },
        {
            "utterance": "And what are their names ?",
            "sql": "select customer_name from customers where payment_method = value"
        },
        {
            "utterance": "How about names of first five customers who used any type of payment ?",
            "sql": "select customer_name from customers order by date_became_customer limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 0,
    "final": {
        "utterance": "How many instruments does the song \"Le Pop\" use?",
        "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "Can you list all the instruments used in the song Le Pop ?",
            "sql": "select distinct instrument from instruments as t1 join songs as t2 on t1 . songid = t2 . songid where title = value"
        },
        {
            "utterance": "Okay , how many instruments are used in the song `` Baby '' ?",
            "sql": "select count ( distinct instrument ) from instruments as t1 join songs as t2 on t1 . songid = t2 . songid where title = value"
        }
    ]
}
