{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of the department which has the highest average salary of professors.",
        "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find out the average salary of professors ?",
            "sql": "select avg ( instructor.salary )"
        },
        {
            "utterance": "Find the average salary of the professors of each department ?",
            "sql": "select avg ( instructor.salary ) , instructor.dept_name group_by instructor.dept_name"
        },
        {
            "utterance": "Which department has the highest average salary of professors ?",
            "sql": "select instructor.dept_name group_by instructor.dept_name order_by avg ( instructor.salary ) desc limit_value"
        },
        {
            "utterance": "Which department has the lowest average salary of professors ?",
            "sql": "select instructor.dept_name group_by instructor.dept_name order_by avg ( instructor.salary ) limit_value"
        },
        {
            "utterance": "In which department Mr. Mird work for ?",
            "sql": "select instructor.dept_name where instructor.name = value"
        },
        {
            "utterance": "How much is the salary Mr. Mird earns currently ?",
            "sql": "select instructor.salary where instructor.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the maximum and average capacity among rooms in each building.",
        "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "What is the maximum capacity in Lambert ? | Did you mean Lamberton ? | yes . my apologies .",
            "sql": "select max ( classroom.capacity ) where classroom.building = value"
        },
        {
            "utterance": "What is the maximum capacity of all of the rooms ?",
            "sql": "select max ( classroom.capacity )"
        },
        {
            "utterance": "How many rooms are there ?",
            "sql": "select sum ( classroom.room_number )"
        },
        {
            "utterance": "What is the average capacity of the rooms ?",
            "sql": "select avg ( classroom.capacity )"
        },
        {
            "utterance": "Which classroom is the smallest ?",
            "sql": "select classroom.* order_by classroom.capacity limit_value"
        },
        {
            "utterance": "What room seats 120 people ?",
            "sql": "select classroom.* where classroom.capacity = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the id of the courses that do not have any prerequisite?",
        "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
    },
    "interaction": [
        {
            "utterance": "Can you list the names and ids of courses ?",
            "sql": "select course.course_id , course.title"
        },
        {
            "utterance": "I want to know the course names and the prerequisite ids .",
            "sql": "select course.title , prereq.prereq_id where course.course_id = prereq.course_id"
        },
        {
            "utterance": "Hmm , please tell me the course ids that do not have any prerequisite .",
            "sql": "select course.course_id except select prereq.course_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"
    },
    "interaction": [
        {
            "utterance": "What is the average salary for the physics department ?",
            "sql": "select avg ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "How many instructors in the physics department make less than that ?",
            "sql": "select count ( instructor.* ) where instructor.dept_name = value and instructor.salary < ( select avg ( instructor.salary ) where instructor.dept_name = value )"
        },
        {
            "utterance": "What is the name and salary of that instructor ?",
            "sql": "select instructor.name , instructor.salary where instructor.dept_name = value and instructor.salary < ( select avg ( instructor.salary ) where instructor.dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the year and semester when offers the largest number of courses.",
        "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the year that offers the largest number of courses ?",
            "sql": "select section.year group_by section.semester , section.year order_by count ( section.* ) desc limit_value"
        },
        {
            "utterance": "What semester in that year offers the largest number of courses ?",
            "sql": "select section.semester where section.year = value group_by section.semester order_by count ( section.* ) desc limit_value"
        },
        {
            "utterance": "What buildings have course sections offered then ?",
            "sql": "select section.building where section.semester = value and section.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    "interaction": [
        {
            "utterance": "Who is the instructor of the statistics department ?",
            "sql": "select instructor.name where instructor.dept_name = value"
        },
        {
            "utterance": "What is their average salary ?",
            "sql": "select avg ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "Who in the statistics department has the highest salary ?",
            "sql": "select instructor.name where instructor.dept_name = value order_by instructor.salary desc limit_value"
        },
        {
            "utterance": "How much is his salary ?",
            "sql": "select instructor.salary where instructor.dept_name = value order_by instructor.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Find the names of top 3 departments ? | What do you mean by top ? | Top three departments that provide the largest amount of courses ?",
            "sql": "select course.dept_name group_by course.dept_name order_by count ( course.* ) desc limit_value"
        },
        {
            "utterance": "Find the names of top 3 departments that provide the lowest amount of courses ?",
            "sql": "select course.dept_name group_by course.dept_name order_by count ( course.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many courses are offered ?",
            "sql": "select count ( course.course_id )"
        },
        {
            "utterance": "How many courses have more than one prerequisite ?",
            "sql": "select count ( * ) ( select course.title group_by prereq.course_id having count ( * ) > value )"
        },
        {
            "utterance": "Can you tell me the titles of those courses ?",
            "sql": "select course.title group_by prereq.course_id having count ( * ) > value"
        },
        {
            "utterance": "What departments are those courses in ?",
            "sql": "select course.dept_name , course.course_id group_by prereq.course_id having count ( * ) > value"
        },
        {
            "utterance": "Can you also provide the number of credits for each of those courses ?",
            "sql": "select course.credits , course.course_id group_by prereq.course_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
        "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    "interaction": [
        {
            "utterance": "can you show me the name and salary of all instructors ?",
            "sql": "select instructor.name , instructor.salary"
        },
        {
            "utterance": "How much does the biology professor make ?",
            "sql": "select instructor.name , instructor.salary where instructor.dept_name = value"
        },
        {
            "utterance": "How many professors make more than Valtchev ?",
            "sql": "select count ( instructor.* ) where instructor.salary > ( select instructor.salary where instructor.name = value )"
        },
        {
            "utterance": "Can you tell me the names of the professors that make more than Valtchev ?",
            "sql": "select instructor.name where instructor.salary > ( select instructor.salary where instructor.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
    },
    "interaction": [
        {
            "utterance": "Whsts the name of the student thst took prerequisite course title internatoinal finance ?",
            "sql": "select student.name where takes.course_id in ( select prereq.prereq_id where course.title = value )"
        },
        {
            "utterance": "What is the title of course id 787 ?",
            "sql": "select course.title where course.course_id = value"
        },
        {
            "utterance": "What is the department name of course id 787 ?",
            "sql": "select course.dept_name where course.course_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the maximum and average capacity among rooms in each building.",
        "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which room number has a capacity higher than the average capacity ?",
            "sql": "select classroom.room_number where classroom.capacity > ( select avg ( classroom.capacity ) )"
        },
        {
            "utterance": "What is the range of capacity among rooms in each building ?",
            "sql": "select max ( classroom.capacity ) , min ( classroom.capacity ) , classroom.building group_by classroom.building"
        },
        {
            "utterance": "Which building houses the room that has the maximum capacity ?",
            "sql": "select classroom.building order_by classroom.capacity desc limit_value"
        },
        {
            "utterance": "Which building houses the room that has the minimum capacity ?",
            "sql": "select classroom.building order_by classroom.capacity limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
    },
    "interaction": [
        {
            "utterance": "Find the name of instructors who are advisors of students from the Math department , and sort the results by students ' total credit .",
            "sql": "select instructor.name where student.dept_name = value order_by student.tot_cred"
        },
        {
            "utterance": "Find name of students in the Math department",
            "sql": "select student.name where student.dept_name = value"
        },
        {
            "utterance": "Give me IDs of instructors in the Marketing department",
            "sql": "select instructor.id where instructor.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the students who have more than one advisor?",
        "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Who are the students that have more than one advisor ?",
            "sql": "select student.name group_by advisor.s_id having count ( * ) > value"
        },
        {
            "utterance": "How many students have more than one credit ?",
            "sql": "select student.name group_by advisor.s_id having student.tot_cred > value"
        },
        {
            "utterance": "How many students have more than 115 credits ?",
            "sql": "select student.name group_by advisor.s_id having student.tot_cred > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 13,
    "final": {
        "utterance": "How many courses that do not have prerequisite?",
        "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    "interaction": [
        {
            "utterance": "how many courses have prerequisite ?",
            "sql": "select count ( course.* ) where course.course_id in ( select prereq.course_id )"
        },
        {
            "utterance": "how many courses are there ?",
            "sql": "select count ( course.* )"
        },
        {
            "utterance": "How many courses that do not have prerequisite ?",
            "sql": "select count ( course.* ) where course.course_id not in ( select prereq.course_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of instructors who are advising more than one student.",
        "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many instructors are there ?",
            "sql": "select count ( instructor.* )"
        },
        {
            "utterance": "OK . Which instructor ids appear more than once in the advisor table",
            "sql": "select instructor.id group_by advisor.i_id having count ( * ) > value"
        },
        {
            "utterance": "What are the instructors name for each of those ids the are advising more than one student ?",
            "sql": "select instructor.name group_by advisor.i_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
    },
    "interaction": [
        {
            "utterance": "What are the names of all students who took any course in the fall semester of the year 2003 ?",
            "sql": "select student.name where student.id in ( select takes.id where takes.semester = value and takes.year = value )"
        },
        {
            "utterance": "What about in the spring semester ?",
            "sql": "select student.name where student.id in ( select takes.id where takes.semester = value and takes.year = value )"
        },
        {
            "utterance": "What about in 2004 ?",
            "sql": "select student.name where student.id in ( select takes.id where takes.semester = value and takes.year = value )"
        },
        {
            "utterance": "What course id were offered in that semester ?",
            "sql": "select distinct takes.id where takes.semester = value and takes.year = value"
        },
        {
            "utterance": "What 's the grade of 10838 ?",
            "sql": "select takes.grade where takes.semester = value and takes.year = value and takes.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 16,
    "final": {
        "utterance": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many instructors are in the statistics department ?",
            "sql": "select count ( instructor.* ) where instructor.dept_name = value"
        },
        {
            "utterance": "What is the lowest salary of the instructors in the statistics department ?",
            "sql": "select min ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "And what is the name of the instructor that earns that salary ?",
            "sql": "select instructor.name where instructor.dept_name = value order_by instructor.salary asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of the courses that do not have any prerequisite?",
        "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    "interaction": [
        {
            "utterance": "How many courses do not have a prerequisite ?",
            "sql": "select count ( course.* ) where course.course_id not in ( select prereq.course_id )"
        },
        {
            "utterance": "Which of those courses has the most number of credits ?",
            "sql": "select course.* where course.course_id not in ( select prereq.course_id ) order_by course.credits desc limit_value"
        },
        {
            "utterance": "How many courses are there ?",
            "sql": "select count ( course.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the title of the prerequisite class of International Finance course?",
        "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
    },
    "interaction": [
        {
            "utterance": "What is the course id for the International Finance course ?",
            "sql": "select course.course_id where course.title = value"
        },
        {
            "utterance": "What is the course id for the prerequisite of that course ?",
            "sql": "select course.course_id where course.course_id in ( select prereq.prereq_id where course.title = value )"
        },
        {
            "utterance": "What is the title of that course ?",
            "sql": "select course.title where course.course_id in ( select prereq.prereq_id where course.title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the number of rooms with more than 50 capacity for each building.",
        "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "How many buildings are in the list ?",
            "sql": "select count ( distinct classroom.building )"
        },
        {
            "utterance": "What are the buildings that have more than 50 capacity ?",
            "sql": "select classroom.building where classroom.capacity > value group_by classroom.building"
        },
        {
            "utterance": "Can you rind me the number of rooms with more than 50 capacity for those 20 buildings ?",
            "sql": "select count ( classroom.room_number ) where classroom.capacity > value"
        },
        {
            "utterance": "Can you show me the number of rooms with capacity greater than 50 for each building ?",
            "sql": "select classroom.building , count ( classroom.room_number ) where classroom.capacity > value group_by classroom.building"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name of department has the highest amount of students?",
        "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which department has the highest amount of students ?",
            "sql": "select student.dept_name group_by student.dept_name order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "Do you know the total credits for the Civil Eng . Department ? | Did you want the sum of total credits across all students in the Civil Eng . department ? | Sure .",
            "sql": "select sum ( student.tot_cred ) where student.dept_name = value"
        },
        {
            "utterance": "Ok , do you know the ID number for the department ? | Did you want the ID numbers for the students in the Civil Eng . department ? | please",
            "sql": "select student.id where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "List all instructors who taught a class in Fall 2009 | Did you mean the instructor IDs who taught a class in Fall 2009 | yes",
            "sql": "select teaches.id where teaches.semester = value and teaches.year = value"
        },
        {
            "utterance": "Remove all instructor IDs who did not teach in Spring 2010 from the list . | Did you mean retain the instructor IDs who both teach in Spring 2010 and in Fall 2009 | Retain the instructor IDs who did not teach in Spring 2010 but did teach in Fall 2009",
            "sql": "select teaches.id where teaches.semester = value and teaches.year = value except select teaches.id where teaches.semester = value and teaches.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "What are the names of the different departments ?",
            "sql": "select distinct course.dept_name"
        },
        {
            "utterance": "What are the names of all Statistics courses ?",
            "sql": "select course.title where course.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
    },
    "interaction": [
        {
            "utterance": "what is the highest salary ?",
            "sql": "select max ( instructor.salary )"
        },
        {
            "utterance": "what is the salary of instructor in math department ?",
            "sql": "select instructor.salary where student.dept_name = value"
        },
        {
            "utterance": "what is McKinnon salary ?",
            "sql": "select instructor.salary where instructor.name = value"
        },
        {
            "utterance": "what department is McKinnon ?",
            "sql": "select instructor.dept_name where instructor.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "I 'd like to know about the prerequisites for courses",
            "sql": "select prereq.course_id , prereq.prereq_id"
        },
        {
            "utterance": "What courses have more than one prerequisite ?",
            "sql": "select prereq.course_id group_by prereq.course_id having count ( prereq.* ) > value"
        },
        {
            "utterance": "What are the title , credit and department of these courses ?",
            "sql": "select course.title , course.credits , course.dept_name group_by prereq.course_id having count ( * ) > value"
        },
        {
            "utterance": "how many prerequisite credits are needed ? | Which course ? | Game programming",
            "sql": "select sum ( course.credits ) where course.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the title of the course that is offered by more than one department.",
        "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many courses are there ?",
            "sql": "select count ( course.* )"
        },
        {
            "utterance": "How many courses are in Mech . eng ?",
            "sql": "select count ( course.* ) where course.dept_name = value"
        },
        {
            "utterance": "Out of those 12 how many of them are more than 3 credits ?",
            "sql": "select count ( course.* ) where course.dept_name = value and course.credits > value"
        },
        {
            "utterance": "Are any of these courses offered by more than one department ? | Did you mean the same course titles ? | Yes are there any courses `` same title '' in the list that are offered by more than one department ?",
            "sql": "select distinct ( course.dept_name ) where course.title in ( select course.title where course.dept_name = value and course.credits > value ) and course.dept_name != value"
        },
        {
            "utterance": "How many of those courses are there ?",
            "sql": "select count ( course.* ) where course.title in ( select course.title where course.dept_name = value and course.credits > value ) and course.dept_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of instructors who didn't teach any courses?",
        "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of Instructor IDs for those who did not teach any courses ?",
            "sql": "select instructor.id where instructor.id not in ( select teaches.id )"
        },
        {
            "utterance": "Thank you ! Can you update that list with the professors ' names ?",
            "sql": "select instructor.id , instructor.name where instructor.id not in ( select teaches.id )"
        },
        {
            "utterance": "Thank you ! Can you update that list to include the instructor names and which departments they are in ?",
            "sql": "select instructor.name , instructor.dept_name where instructor.id not in ( select teaches.id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "in what department is Rumat ? | Do you want the name of the department ? | Yes !",
            "sql": "select student.dept_name where student.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.",
        "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)"
    },
    "interaction": [
        {
            "utterance": "Show the average salary of all departments . | Would you like to the know the average salary grouped over each department name ? | Yes show average salary grouped over each department name .",
            "sql": "select instructor.dept_name , avg ( instructor.salary ) group_by instructor.dept_name"
        },
        {
            "utterance": "Show the department with the lowest average salary .",
            "sql": "select instructor.dept_name group_by instructor.dept_name order_by avg ( instructor.salary ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the name of instructors in Comp . Sci . department whose salary is higher than 80000 ?",
            "sql": "select instructor.name where instructor.dept_name = value and instructor.salary > value"
        },
        {
            "utterance": "Oh only two of them . Thank you : ) Then could you please let me know the name of the instructor whose salary is the highest in the table ?",
            "sql": "select instructor.name order_by instructor.salary desc limit_value"
        },
        {
            "utterance": "That was quick , thank you again . Then could you please tell me the department name of instructor Wieland ?",
            "sql": "select instructor.dept_name where instructor.name = value"
        },
        {
            "utterance": "Thank you : ) If it is not too bothersome , could you please let me know the average salary of the instructors in Pol . Sci . ?",
            "sql": "select avg ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "Thank you , then could you please tell me what would be the average salary of instructors for Cybernetics ?",
            "sql": "select avg ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "Thank you : ) This will be my last question , could you please let me know the name and ID of the instructor whose salary is the lowest ?",
            "sql": "select instructor.name , instructor.id order_by instructor.salary asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Who is the instructor with the highest salary?",
        "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , show me the instructors",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Nice . What is their average salary ?",
            "sql": "select avg ( instructor.salary )"
        },
        {
            "utterance": "Who earns the highest salary ?",
            "sql": "select instructor.name order_by instructor.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "Find the title of course that is provided by Statistics but not Psychology departments .",
            "sql": "select course.title where course.dept_name = value except select course.title where course.dept_name = value"
        },
        {
            "utterance": "How many credits is Care and Feeding of Cats ?",
            "sql": "select course.credits where course.title = value"
        },
        {
            "utterance": "What is the course id of that ?",
            "sql": "select course.course_id where course.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
    },
    "interaction": [
        {
            "utterance": "Find the department name of the instructor whose name contains 'Soisalon '",
            "sql": "select instructor.dept_name where instructor.name like value"
        },
        {
            "utterance": "Sorry , what is the id number of the instructor for psychology ?",
            "sql": "select instructor.id where instructor.dept_name = value"
        },
        {
            "utterance": "What is the salary of the instructor with id number 22591 ?",
            "sql": "select instructor.salary where instructor.id = value"
        },
        {
            "utterance": "And what about the salary of the instructor with id number 96895 ?",
            "sql": "select instructor.salary where instructor.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the total number of students and total number of instructors for each department.",
        "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
    },
    "interaction": [
        {
            "utterance": "What are the total number of students in each department ?",
            "sql": "select count ( distinct student.id ) , instructor.dept_name group_by instructor.dept_name"
        },
        {
            "utterance": "And , do you also have information on the total number of instructors in each department ?",
            "sql": "select count ( distinct student.id ) , count ( distinct instructor.id ) , instructor.dept_name group_by instructor.dept_name"
        },
        {
            "utterance": "Do you also have a total enrollment ? | What do you mean by enrollment ? | Total number of students .",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "Do you know the name of the Astronomy instructor ?",
            "sql": "select instructor.name where department.dept_name = value"
        },
        {
            "utterance": "Lastly , do you have his salary ?",
            "sql": "select instructor.name , instructor.salary where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all of the instructors who are advisors ?",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Could you narrow it down to just the names of instructors who are advisors to students from the Math department ?",
            "sql": "select instructor.name where student.dept_name = value"
        },
        {
            "utterance": "What are all of their salaries ?",
            "sql": "select instructor.name , instructor.salary where student.dept_name = value"
        },
        {
            "utterance": "What are the names and salaries of the instructors who are advisors to students from the History department ?",
            "sql": "select instructor.name , instructor.salary where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the semester and year which has the least number of student taking any class.",
        "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all course IDs ?",
            "sql": "select takes.course_id"
        },
        {
            "utterance": "Wow that 's a lot ! Can you update that list to show me the semester and year which have the fewest number of students taking any class ?",
            "sql": "select takes.semester , takes.year group_by takes.semester , takes.year order_by count ( takes.* ) limit_value"
        },
        {
            "utterance": "Excellent ! Can you update this list to show many total classes were taken in Fall of 2008 ? | Do you mean how many total classes were taken in Fall of 2008 ? | Yes ! That is what I meant ! Sorry ! How many total classes were taken in Fall of 2008 ?",
            "sql": "select count ( takes.* ) where takes.semester = value and takes.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the total budgets of the Marketing or Finance department.",
        "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
    },
    "interaction": [
        {
            "utterance": "what is the budget for chandler ?",
            "sql": "select department.budget where department.building = value"
        },
        {
            "utterance": "how many departments are in table ?",
            "sql": "select count ( department.* )"
        },
        {
            "utterance": "how many buildings are available ?",
            "sql": "select count ( distinct department.building )"
        },
        {
            "utterance": "which department is managed by taylor ?",
            "sql": "select department.dept_name where department.building = value"
        },
        {
            "utterance": "how much budget is taking biology department ?",
            "sql": "select department.budget where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 37,
    "final": {
        "utterance": "Find the name of the instructors who taught C Programming course before.",
        "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
    },
    "interaction": [
        {
            "utterance": "Tell me title name for all course ids ... .",
            "sql": "select course.course_id , course.title"
        },
        {
            "utterance": "Tell me the name of the instructor who getting high salary ... And tell his department name too ... | How do you define a high salary ? | Higher than 80000 ... ..",
            "sql": "select instructor.name where instructor.salary > value"
        },
        {
            "utterance": "Find the name of the instructors who taught C programming course before..",
            "sql": "select instructor.name where course.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?",
        "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)"
    },
    "interaction": [
        {
            "utterance": "Which building has a room with highest capacity ?",
            "sql": "select classroom.building order_by classroom.capacity desc limit_value"
        },
        {
            "utterance": "How many credits is `` Accounting '' worth ?",
            "sql": "select course.credits where course.title = value"
        },
        {
            "utterance": "And what is the capacity of the Whitman room ?",
            "sql": "select classroom.capacity where classroom.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the id of the instructor who advises of all students from History department?",
        "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "Show me the instructor ID associated with the History department . | Do you mean the ids of the instructors who advises of all students from History department ? | Yes , what is the answer to your question ?",
            "sql": "select advisor.i_id where student.dept_name = value"
        },
        {
            "utterance": "How many instructors advising of students from the history department ?",
            "sql": "select count ( advisor.i_id ) where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the names of all instructors in the Art department who have taught some course and the course_id.",
        "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"
    },
    "interaction": [
        {
            "utterance": "Find the names of all instructors in the Art department who have taught some course and the course id .",
            "sql": "select instructor.name , teaches.course_id where instructor.dept_name = value"
        },
        {
            "utterance": "Find the names of all instructors in the Art department",
            "sql": "select instructor.name where instructor.dept_name = value"
        },
        {
            "utterance": "Find the instructor id of all instructors in the Statistics department",
            "sql": "select instructor.id where instructor.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 41,
    "final": {
        "utterance": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Which courses ran in Fall 2009 and in Spring 2010 ?",
            "sql": "select section.* where section.semester = value and section.year = value intersect select section.course_id where section.semester = value and section.year = value"
        },
        {
            "utterance": "What building is the Spring 2010 course located ?",
            "sql": "select section.building where section.semester = value and section.year = value"
        },
        {
            "utterance": "Which building housed section ID 443 ? | You mean course id or section id ? | Section ID",
            "sql": "select section.building where section.sec_id = value"
        },
        {
            "utterance": "Which building housed course ID 443 ?",
            "sql": "select section.building where section.course_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 42,
    "final": {
        "utterance": "What is the id of the instructor who advises of all students from History department?",
        "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "Can you show me how many departments there are ? | Did you mean the number of distinct department names ? | Yes , please",
            "sql": "select count ( distinct student.dept_name )"
        },
        {
            "utterance": "Can you also show me the total number of instructers ? | what did you mean by instructers ? can you give more info ? | Sorry , I meant instructors",
            "sql": "select count ( advisor.i_id )"
        },
        {
            "utterance": "Can you show me the id of the instructor who is from the History department ?",
            "sql": "select advisor.i_id where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 43,
    "final": {
        "utterance": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    "interaction": [
        {
            "utterance": "what is the name of dept of statistics | Do you mean the name of instructors from the statistics department ? | yes",
            "sql": "select instructor.name where instructor.dept_name = value"
        },
        {
            "utterance": "show the total no . of ID",
            "sql": "select count ( instructor.id )"
        },
        {
            "utterance": "what is the salary of the the ID 78699",
            "sql": "select instructor.salary where instructor.id = value"
        },
        {
            "utterance": "what is the dept . name of the McKinnon",
            "sql": "select instructor.dept_name where instructor.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 44,
    "final": {
        "utterance": "What is the name of the student who has the highest total credits in the History department.",
        "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the student who has the highest total credits in the History department ?",
            "sql": "select student.name where student.dept_name = value order_by student.tot_cred desc limit_value"
        },
        {
            "utterance": "how many students are in the history department ?",
            "sql": "select count ( student.name ) where student.dept_name = value"
        },
        {
            "utterance": "what is the average total credits in the history department ?",
            "sql": "select avg ( student.tot_cred ) where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 45,
    "final": {
        "utterance": "Find the name of the department which has the highest average salary of professors.",
        "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of the department which has the highest average salary of professors",
            "sql": "select instructor.dept_name group_by instructor.dept_name order_by avg ( instructor.salary ) desc limit_value"
        },
        {
            "utterance": "what is the average salary of a physics professor ?",
            "sql": "select avg ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "find the department name which has the lowest average salary of professors",
            "sql": "select instructor.dept_name group_by instructor.dept_name order_by avg ( instructor.salary ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 46,
    "final": {
        "utterance": "Find the name of students who didn't take any course from Biology department.",
        "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    "interaction": [
        {
            "utterance": "how many course are presented on the table | Did you mean to ask for the number of entries in the table course ? | exactly",
            "sql": "select count ( course.* )"
        },
        {
            "utterance": "what are all the title are on the table | Did you mean to ask for the titles in the table course ? | yeah correct",
            "sql": "select course.title"
        },
        {
            "utterance": "what is the credits of C Programming",
            "sql": "select course.credits where course.title = value"
        },
        {
            "utterance": "list out the student name",
            "sql": "select student.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 47,
    "final": {
        "utterance": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "What are courses provided by Statistics deparment ?",
            "sql": "select course.title where course.dept_name = value"
        },
        {
            "utterance": "What are courses provided by Psychology department ?",
            "sql": "select course.title where course.dept_name = value"
        },
        {
            "utterance": "Which Statistics courses are not provided by Psychology department ?",
            "sql": "select course.title where course.dept_name = value except select course.title where course.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 48,
    "final": {
        "utterance": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all courses that were offered in the Chandler building ? | Do you want just their titles , or all the course information ? | I would like both please !",
            "sql": "select * where section.building = value"
        },
        {
            "utterance": "Thank you for that ! Can you filter that list to show only the rows that correspond to Fall of 2010 ?",
            "sql": "select * where section.building = value and section.semester = value and section.year = value"
        },
        {
            "utterance": "Can you please tell me how many credits that course was worth ?",
            "sql": "select course.credits where section.building = value and section.semester = value and section.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 49,
    "final": {
        "utterance": "What is the course title of the prerequisite of course Mobile Computing?",
        "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
    },
    "interaction": [
        {
            "utterance": "What is the prerequisite for Mobile computing ?",
            "sql": "select course.title where course.course_id in ( select prereq.prereq_id where course.title = value )"
        },
        {
            "utterance": "What is the department name for these courses ?",
            "sql": "select course.dept_name where course.course_id in ( select prereq.prereq_id where course.title = value )"
        },
        {
            "utterance": "How many courses are there in the History Department ?",
            "sql": "select count ( course.* ) where course.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 50,
    "final": {
        "utterance": "Which department has the lowest budget?",
        "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you show me a list of all of the departments and the budgets ?",
            "sql": "select department.dept_name , department.budget"
        },
        {
            "utterance": "Thank you ! Can you filter that list to show only the department with the lowest budget ?",
            "sql": "select department.dept_name , department.budget order_by department.budget limit_value"
        },
        {
            "utterance": "Awesome ! Can you add the building of the Comp Sci department to that list as well ?",
            "sql": "select department.dept_name , department.building , department.budget order_by department.budget limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 51,
    "final": {
        "utterance": "Find the name of instructors who didn't teach any courses?",
        "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( instructor.name ) where instructor.id in ( select teaches.id )"
        },
        {
            "utterance": "How many teachers did n't teach at all ?",
            "sql": "select count ( instructor.name ) where instructor.id not in ( select teaches.id )"
        },
        {
            "utterance": "WHAT ARE THEIR NAMES ?",
            "sql": "select instructor.name where instructor.id not in ( select teaches.id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 52,
    "final": {
        "utterance": "Find the number of rooms with more than 50 capacity for each building.",
        "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "Can you show all rooms with a capacity larger than 50 ?",
            "sql": "select classroom.* where classroom.capacity > value"
        },
        {
            "utterance": "Can you display only the number of rooms currently in the table ?",
            "sql": "select classroom.room_number where classroom.capacity > value"
        },
        {
            "utterance": "How many unique room numbers are currently in the table ?",
            "sql": "select count ( distinct classroom.room_number ) where classroom.capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 0,
    "final": {
        "utterance": "show the train name and station name for each train.",
        "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id"
    },
    "interaction": [
        {
            "utterance": "What is the station ID for London Waterloo",
            "sql": "select station.station_id where station.name = value"
        },
        {
            "utterance": "What trains go to station ID 1 ?",
            "sql": "select * where train_station.station_id = value"
        },
        {
            "utterance": "Can you give me the names of those trains and tell me when they have service",
            "sql": "select train.name , train.time where train_station.station_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\""
    },
    "interaction": [
        {
            "utterance": "Find the station id of Ananthapuri Express ? | the station ids that serve the train Ananthapuri Express are 1 and 2 | What are the annual entry exit of station id 1 ?",
            "sql": "select station.annual_entry_exit where station.station_id = value"
        },
        {
            "utterance": "Find the total passengers of station id 1 and 2 ?",
            "sql": "select station.total_passengers where station.station_id = value or station.station_id = value"
        },
        {
            "utterance": "What are the names of the stations which serve both `` Ananthapuri Express '' and `` Guruvayur Express '' train ?",
            "sql": "select station.name where train.name = value intersect select station.name where train.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 2,
    "final": {
        "utterance": "show the train name and station name for each train.",
        "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id"
    },
    "interaction": [
        {
            "utterance": "Show the train name and station name for each train",
            "sql": "select station.name , train.name"
        },
        {
            "utterance": "Give me total passengers on each station",
            "sql": "select station.total_passengers"
        },
        {
            "utterance": "Give me main services for each station",
            "sql": "select station.main_services"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all locations with only 1 station.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "what is the highest annual interchanges ?",
            "sql": "select station.annual_interchanges order_by station.annual_interchanges desc limit_value"
        },
        {
            "utterance": "what is stations ' total passengers ? | Do you mean sum of total passengers in all stations ? | yes",
            "sql": "select sum ( station.total_passengers )"
        },
        {
            "utterance": "show all locations with only 1 station .",
            "sql": "select station.location group_by station.location having count ( station.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names and main services for train stations that have the top three total number of passengers.",
        "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you show me a list of all of the train station names ?",
            "sql": "select station.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "sql": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION"
    },
    "interaction": [
        {
            "utterance": "what is the Number_of_Platforms does Main_Services South Western Main Line West of England Main Line have ?",
            "sql": "select station.number_of_platforms where station.main_services = value"
        },
        {
            "utterance": "how many passengers are in the London Waterloo ?",
            "sql": "select station.total_passengers where station.name = value"
        },
        {
            "utterance": "can you help me with the Annual interchanges for London Bridge",
            "sql": "select station.annual_interchanges where station.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the station name with greatest number of trains.",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the station name with the greatest number of trains , please .",
            "sql": "select station.name group_by train_station.station_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the location of that station ?",
            "sql": "select station.location group_by train_station.station_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are the main services of that station ?",
            "sql": "select station.main_services group_by train_station.station_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the station id of that station ?",
            "sql": "select station.station_id group_by train_station.station_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many annual interchanges are at that station ?",
            "sql": "select station.annual_interchanges group_by train_station.station_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of the station with station id 3 ?",
            "sql": "select station.name where station.station_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the location with most number of train stations.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which location has the most number of train stations ?",
            "sql": "select station.location , count ( station.* ) group_by station.location order_by count ( station.* ) desc limit_value"
        },
        {
            "utterance": "What is the total number of passengers do train station in london has ?",
            "sql": "select sum ( station.total_passengers ) where station.location = value"
        },
        {
            "utterance": "How many number of platforms do they have ? | could you give more info of your problem ? it the `` they '' station id or location ? | What is the number of platforms does train station in london has ?",
            "sql": "select sum ( station.number_of_platforms ) where station.location = value"
        },
        {
            "utterance": "What is the name of the train station in londom ?",
            "sql": "select station.name where station.location = value"
        },
        {
            "utterance": "What is the main service of train station in london ?",
            "sql": "select station.main_services where station.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all locations which don't have a train station with at least 15 platforms.",
        "sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"
    },
    "interaction": [
        {
            "utterance": "Find the total passengers of London Waterloo ?",
            "sql": "select station.total_passengers where station.name = value"
        },
        {
            "utterance": "How many Number of Platforms in station id 2 ?",
            "sql": "select station.number_of_platforms where station.station_id = value"
        },
        {
            "utterance": "What are the Main Services of station id 3 ?",
            "sql": "select station.main_services where station.station_id = value"
        },
        {
            "utterance": "Show all locations which do n't have a train station with at least 15 platforms .",
            "sql": "select station.location except select station.location where station.number_of_platforms > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the station name with greatest number of trains.",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which station has the greatest number of traims ?",
            "sql": "select * group_by train_station.station_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Whats the total passengers london waterloo has ?",
            "sql": "select station.total_passengers where station.name = value"
        },
        {
            "utterance": "Whats the number of platforms do london waterloo has ?",
            "sql": "select station.number_of_platforms where station.name = value"
        },
        {
            "utterance": "Where is it located ?",
            "sql": "select station.location where station.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names and main services for train stations that have the top three total number of passengers.",
        "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the top three total number of passengers ?",
            "sql": "select station.total_passengers order_by station.total_passengers desc limit_value"
        },
        {
            "utterance": "What are the names and main services for train stations for these ?",
            "sql": "select station.name , station.main_services order_by station.total_passengers desc limit_value"
        },
        {
            "utterance": "What about the names and main services for the train stations with the least 3 number of passengers ?",
            "sql": "select station.name , station.main_services order_by station.total_passengers asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25"
    },
    "interaction": [
        {
            "utterance": "Could you show me all the locations that have train stations with at least 15 platforms ?",
            "sql": "select distinct station.location where station.number_of_platforms > = value"
        },
        {
            "utterance": "Could you show me all the locations that have train stations with more than 25 total passengers ?",
            "sql": "select distinct station.location where station.total_passengers > value"
        },
        {
            "utterance": "Could you show me all the locations that have train stations with exactly 19 platforms ?",
            "sql": "select distinct station.location where station.number_of_platforms = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all locations with only 1 station.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Can you please list all of the locations with only one station ?",
            "sql": "select station.location group_by station.location having count ( station.* ) = value"
        },
        {
            "utterance": "What is the name of the station in Glasgow ?",
            "sql": "select station.name where station.location = value"
        },
        {
            "utterance": "How many platforms does Glasgow Central have ?",
            "sql": "select station.number_of_platforms where station.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\""
    },
    "interaction": [
        {
            "utterance": "When did the violin players perform ?",
            "sql": "select performance.date where member.role = value"
        },
        {
            "utterance": "Which violin player attended the most ? | Do you mean the name of the violin player that attended the most number of performances ? | Yes , what is the name of the violin player who attended the most number of performances ?",
            "sql": "select member.name group_by member_attendance.member_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What about the violin player who attended the least performances ?",
            "sql": "select member.name group_by member_attendance.member_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the most common location of performances.",
        "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of locations ?",
            "sql": "select performance.location"
        },
        {
            "utterance": "what is the average of attendance ?",
            "sql": "select avg ( performance.attendance )"
        },
        {
            "utterance": "what is the highest attendance 's ?",
            "sql": "select max ( performance.attendance )"
        },
        {
            "utterance": "what is the lowest attendance 's ?",
            "sql": "select min ( performance.attendance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
        "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC"
    },
    "interaction": [
        {
            "utterance": "Hello , how many members are there ?",
            "sql": "select count ( member.* )"
        },
        {
            "utterance": "What is the Nationality of the id number 4 .",
            "sql": "select member.nationality where member.member_id = value"
        },
        {
            "utterance": "What is the most common nationality ?",
            "sql": "select member.nationality group_by member.nationality order_by count ( member.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of members who did not attend any performance.",
        "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)"
    },
    "interaction": [
        {
            "utterance": "How many performances are listed ? | Did you mean the count of Performance ID in the member attendance table \uff1f | Yes",
            "sql": "select count ( distinct member_attendance.performance_id )"
        },
        {
            "utterance": "What are the roles for each performance ?",
            "sql": "select member_attendance.performance_id , member.role group_by member_attendance.performance_id"
        },
        {
            "utterance": "What country is each member from ? | Did you mean show the name of member and the related Nationality ? | yes",
            "sql": "select member.name , member.nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the date of the performance with the highest number of attendees?",
        "sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list all dates available",
            "sql": "select performance.date"
        },
        {
            "utterance": "on what date of the performance with the highest number of attendees ?",
            "sql": "select performance.date order_by performance.attendance desc limit_value"
        },
        {
            "utterance": "of the highest number of attendees | Did you mean to ask for the performance id of the performance with the highest number of attendees ? | yes",
            "sql": "select performance.performance_id order_by performance.attendance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 0,
    "final": {
        "utterance": "Show director with the largest number of show times in total.",
        "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the films title that direct by Bill Schreiner ?",
            "sql": "select film.title where film.directed_by = value"
        },
        {
            "utterance": "show director with the largest number of show times in total",
            "sql": "select film.directed_by group_by film.directed_by order_by sum ( schedule.show_times_per_day ) desc limit_value"
        },
        {
            "utterance": "show me a list of original air date ?",
            "sql": "select film.original_air_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the cinema name and location for cinemas with capacity above average.",
        "sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"
    },
    "interaction": [
        {
            "utterance": "How many cinemas are there in total ?",
            "sql": "select count ( cinema.* )"
        },
        {
            "utterance": "What is the average capacity ?",
            "sql": "select avg ( cinema.capacity )"
        },
        {
            "utterance": "How many cinemas have above average capacity ?",
            "sql": "select count ( cinema.* ) where cinema.capacity > ( select avg ( cinema.capacity ) )"
        },
        {
            "utterance": "What is the name and location of the 2 cinemas with above average capacity ?",
            "sql": "select cinema.name , cinema.location where cinema.capacity > ( select avg ( cinema.capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the locations that have more than one movie theater with capacity above 300.",
        "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what is the capacity of county wicklow",
            "sql": "select cinema.capacity where cinema.location = value"
        },
        {
            "utterance": "what is the average capacity",
            "sql": "select avg ( cinema.capacity )"
        },
        {
            "utterance": "find the locations that have more than one movie theater with capacity above 300",
            "sql": "select cinema.location where cinema.capacity > value group_by cinema.location having count ( cinema.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 3,
    "final": {
        "utterance": "How many films have the word 'Dummy' in their titles?",
        "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""
    },
    "interaction": [
        {
            "utterance": "What are the names of each of the films ?",
            "sql": "select film.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the title and maximum price of each film?",
        "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    "interaction": [
        {
            "utterance": "what is the highest price ?",
            "sql": "select max ( schedule.price )"
        },
        {
            "utterance": "what is the average of prices*",
            "sql": "select avg ( schedule.price )"
        },
        {
            "utterance": "what is the average of rank in series ?",
            "sql": "select avg ( film.rank_in_series )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the title and maximum price of each film?",
        "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    "interaction": [
        {
            "utterance": "How many film titles are there ?",
            "sql": "select count ( distinct film.title )"
        },
        {
            "utterance": "Please list all the film titles .",
            "sql": "select film.title"
        },
        {
            "utterance": "Please list each title with its maximum price .",
            "sql": "select film.title , max ( schedule.price ) group_by film.film_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011"
    },
    "interaction": [
        {
            "utterance": "Show all the locations where some cinemas were opened in year 2010",
            "sql": "select cinema.location where cinema.openning_year = value"
        },
        {
            "utterance": "Show all the locations where some cinemas were opened in year 2011",
            "sql": "select cinema.location where cinema.openning_year = value"
        },
        {
            "utterance": "How many locations where cinemas were opened in both year 2010 and 2011 ?",
            "sql": "select count ( cinema.* ) ( select cinema.location where cinema.openning_year = value intersect select cinema.location where cinema.openning_year = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the location with the most cinemas opened in year 2010 or later?",
        "sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different cinemas are on the list ?",
            "sql": "select count ( distinct cinema.cinema_id )"
        },
        {
            "utterance": "What is the average capacity of each cinema ?",
            "sql": "select avg ( cinema.capacity )"
        },
        {
            "utterance": "Which cinema has the highest capacity , and which has the lowest capacity ?",
            "sql": "select cinema.name where cinema.capacity = ( select min ( cinema.capacity ) ) or cinema.capacity = ( select max ( cinema.capacity ) )"
        },
        {
            "utterance": "Which locations have the most cinemas ?",
            "sql": "select cinema.location group_by cinema.location order_by count ( cinema.* ) desc limit_value"
        },
        {
            "utterance": "Which location has the most cinemas opened in 2010 or later ?",
            "sql": "select cinema.location where cinema.openning_year > = value group_by cinema.location order_by count ( cinema.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all the locations where no cinema has capacity over 800.",
        "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of cinema names ?",
            "sql": "select cinema.name"
        },
        {
            "utterance": "which one is the opened first ?",
            "sql": "select cinema.name order_by cinema.openning_year asc limit_value"
        },
        {
            "utterance": "what is the average of capacities ?",
            "sql": "select avg ( cinema.capacity )"
        },
        {
            "utterance": "show all the locations where no cinema has capacity over 800 .",
            "sql": "select cinema.location except select cinema.location where cinema.capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the name and location of the cinema with the largest capacity?",
        "sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the capacity of Codling ? | Did you mean the capacity of the cinema with a name of Coding ? | yes",
            "sql": "select cinema.capacity where cinema.name = value"
        },
        {
            "utterance": "Which is the largest capacity of cinema ?",
            "sql": "select max ( cinema.capacity )"
        },
        {
            "utterance": "where is the location of Codling ?",
            "sql": "select cinema.location where cinema.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the locations that have more than one movie theater with capacity above 300.",
        "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many movie theatres have a capacity of at least 300 people ?",
            "sql": "select count ( cinema.* ) where cinema.capacity > = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select cinema.name where cinema.capacity > = value"
        },
        {
            "utterance": "What are their specific locations ?",
            "sql": "select cinema.location where cinema.capacity > = value"
        },
        {
            "utterance": "Which theatre has the largest capacity ?",
            "sql": "select cinema.* order_by cinema.capacity desc limit_value"
        },
        {
            "utterance": "Which year was Codling open ?",
            "sql": "select cinema.openning_year where cinema.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 11,
    "final": {
        "utterance": "What is total number of show times per dat for each cinema?",
        "sql": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id"
    },
    "interaction": [
        {
            "utterance": "what is the total number of showtimes at each cinema ?",
            "sql": "select cinema.name , sum ( schedule.show_times_per_day ) group_by schedule.cinema_id"
        },
        {
            "utterance": "what cinema has the most showings in one day ?",
            "sql": "select cinema.name group_by schedule.cinema_id order_by sum ( schedule.show_times_per_day ) desc limit_value"
        },
        {
            "utterance": "What cinema has the highest capacity ?",
            "sql": "select cinema.name order_by cinema.capacity desc limit_value"
        },
        {
            "utterance": "what cinema is in Cork county ?",
            "sql": "select cinema.name where cinema.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all the locations where no cinema has capacity over 800.",
        "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"
    },
    "interaction": [
        {
            "utterance": "what is the capacity of Codling Cinema",
            "sql": "select cinema.capacity where cinema.name = value"
        },
        {
            "utterance": "what year was it opened ?",
            "sql": "select cinema.openning_year where cinema.name = value"
        },
        {
            "utterance": "where is it located ?",
            "sql": "select cinema.location where cinema.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 13,
    "final": {
        "utterance": "Show director with the largest number of show times in total.",
        "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many directors have multiple show times ?",
            "sql": "select count ( distinct film.directed_by ) where schedule.show_times_per_day > value"
        },
        {
            "utterance": "What are the names of the two directors who have multiple show times ?",
            "sql": "select distinct film.directed_by where schedule.show_times_per_day > value"
        },
        {
            "utterance": "How many show times does BIll Schreiner have",
            "sql": "select sum ( schedule.show_times_per_day ) where film.directed_by = value group_by film.directed_by"
        },
        {
            "utterance": "How many show times does Jesus Salvador Trevino have ?",
            "sql": "select sum ( schedule.show_times_per_day ) where film.directed_by = value group_by film.directed_by"
        },
        {
            "utterance": "Which show director has the largest number of show times in total ?",
            "sql": "select film.directed_by group_by film.directed_by order_by sum ( schedule.show_times_per_day ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'"
    },
    "interaction": [
        {
            "utterance": "Show me the captain ranks",
            "sql": "select captain.rank"
        },
        {
            "utterance": "Show me the captain rank that has no captain in Third-rate ship of the line class",
            "sql": "select captain.rank where captain.class != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the ship type that are used by both ships with Panama and Malta flags.",
        "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'"
    },
    "interaction": [
        {
            "utterance": "What are the ship id of HM Cutter Avenger ?",
            "sql": "select ship.ship_id where ship.name = value"
        },
        {
            "utterance": "what type of Flag is used by HMS Manxman ?",
            "sql": "select ship.flag where ship.name = value"
        },
        {
            "utterance": "what are the Built Year of HMS Gorgon ?",
            "sql": "select ship.built_year where ship.name = value"
        },
        {
            "utterance": "Find the ship type that are used by both ships with Panama and Malta flags ?",
            "sql": "select ship.type where ship.flag = value intersect select ship.type where ship.flag = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'"
    },
    "interaction": [
        {
            "utterance": "what ship is steered by a captain with lieutenant rank ? | do you want to return the names of these ships ? | yes",
            "sql": "select ship.name where captain.rank = value"
        },
        {
            "utterance": "give me the ship id",
            "sql": "select ship.ship_id where captain.rank = value"
        },
        {
            "utterance": "what is the captain 's age ?",
            "sql": "select captain.age where captain.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which flag is most widely used among all ships?",
        "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which flag is least widely used among all ships ?",
            "sql": "select ship.flag group_by ship.flag order_by count ( ship.* ) limit_value"
        },
        {
            "utterance": "How many flags in this table ?",
            "sql": "select count ( ship.flag )"
        },
        {
            "utterance": "How many built year same in this table ? | did you mean 'How many built year saved this table ' ? | Yes .",
            "sql": "select count ( distinct ship.built_year )"
        },
        {
            "utterance": "How many names in this table ?",
            "sql": "select count ( distinct ship.name )"
        },
        {
            "utterance": "How many types in this table ?",
            "sql": "select count ( distinct ship.type )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 4,
    "final": {
        "utterance": "what are the names and classes of the ships that do not have any captain yet?",
        "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
    },
    "interaction": [
        {
            "utterance": "what are the names and classes of the ships that do not have any captain yet ?",
            "sql": "select ship.name , ship.class where ship.ship_id not in ( select captain.ship_id )"
        },
        {
            "utterance": "What are the names of the captains that have classes ?",
            "sql": "select captain.name where captain.class != value"
        },
        {
            "utterance": "What is the id for HMS Gorgon ? | Did you mean ship id ? | yes",
            "sql": "select ship.ship_id where ship.name = value"
        },
        {
            "utterance": "How many classes are there ? | Did you mean the number of distinct type classes of ships ? | yes",
            "sql": "select count ( distinct ship.class )"
        },
        {
            "utterance": "What is HMS Gorgon 's rank ?",
            "sql": "select captain.rank where ship.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the ship that is steered by the youngest captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many ships in this table ?",
            "sql": "select count ( ship.* )"
        },
        {
            "utterance": "How many captains in this table ?",
            "sql": "select count ( captain.* )"
        },
        {
            "utterance": "Who is the most aged captain in this table ?",
            "sql": "select captain.captain_id order_by captain.age desc limit_value"
        },
        {
            "utterance": "How many different ranks in this table ?",
            "sql": "select count ( distinct captain.rank )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which classes have more than two captains?",
        "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many captains does third-rate ship of the line have ?",
            "sql": "select count ( captain.* ) where captain.class = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 7,
    "final": {
        "utterance": "what are the names and classes of the ships that do not have any captain yet?",
        "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
    },
    "interaction": [
        {
            "utterance": "What are the names of all ships ?",
            "sql": "select ship.name"
        },
        {
            "utterance": "And what about all the classes ?",
            "sql": "select ship.class"
        },
        {
            "utterance": "Can I see list of names and classes of ships that do n't have any captain ?",
            "sql": "select ship.name , ship.class where ship.ship_id not in ( select captain.ship_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the ships that have more than one captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many ships have more than one captain ?",
            "sql": "select count ( * ) ( select * group_by captain.ship_id having count ( * ) > value )"
        },
        {
            "utterance": "how many ships have a single captain ?",
            "sql": "select count ( * ) ( select * group_by captain.ship_id having count ( * ) = value )"
        },
        {
            "utterance": "what is the age of the oldest captain ?",
            "sql": "select captain.age order_by captain.age desc limit_value"
        },
        {
            "utterance": "what about the youngest ?",
            "sql": "select captain.age order_by captain.age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the average and minimum age of captains in different class?",
        "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest in the list ?",
            "sql": "select captain.name order_by captain.age desc limit_value"
        },
        {
            "utterance": "what is the rank of Captain Gilbert Pears ?",
            "sql": "select captain.rank where captain.name = value"
        },
        {
            "utterance": "What 's about Captain Sir Henry Langford ?",
            "sql": "select captain.rank where captain.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')"
    },
    "interaction": [
        {
            "utterance": "List name of ships ?",
            "sql": "select ship.name"
        },
        {
            "utterance": "Show flags of ships ?",
            "sql": "select ship.name , ship.flag"
        },
        {
            "utterance": "Name of ships not steered by by any captain with Midshipman rank ?",
            "sql": "select ship.name where ship.ship_id not in ( select captain.ship_id where captain.rank = value )"
        },
        {
            "utterance": "Flags of ships not steered by any captain with Midshipman rank ?",
            "sql": "select ship.flag where ship.ship_id not in ( select captain.ship_id where captain.rank = value )"
        },
        {
            "utterance": "Okay . Name and flags of ships not steered by any captain of Midshipman rank ?",
            "sql": "select ship.name , ship.flag where ship.ship_id not in ( select captain.ship_id where captain.rank = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many captains with younger than 50 are in each rank?",
        "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest captain ?",
            "sql": "select captain.name order_by captain.age desc limit_value"
        },
        {
            "utterance": "What about the youngest captain ?",
            "sql": "select captain.name order_by captain.age asc limit_value"
        },
        {
            "utterance": "How many captains are there younger than 50 in each rank ?",
            "sql": "select count ( captain.* ) , captain.rank where captain.age < value group_by captain.rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the name of the youngest captain?",
        "sql": "SELECT name FROM captain ORDER BY age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "let me know the name of the youngest captain",
            "sql": "select captain.name order_by captain.age limit_value"
        },
        {
            "utterance": "How young is he ?",
            "sql": "select captain.age order_by captain.age limit_value"
        },
        {
            "utterance": "Now who is the oldest captain ?",
            "sql": "select captain.name order_by captain.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the ships that have more than one captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many ships are there ?",
            "sql": "select count ( ship.* )"
        },
        {
            "utterance": "Out of them which ship names have more than one captain ?",
            "sql": "select ship.name group_by captain.ship_id having count ( * ) > value"
        },
        {
            "utterance": "How about ship names with only one captain ?",
            "sql": "select ship.name group_by captain.ship_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'"
    },
    "interaction": [
        {
            "utterance": "What are the ships that are steered by a captain with Midshipman rank ?",
            "sql": "select ship.name where captain.rank = value"
        },
        {
            "utterance": "What are the ships that are steered by a captain with Lieutenant rank ?",
            "sql": "select ship.name where captain.rank = value"
        },
        {
            "utterance": "Are there any captains that are included in both lists ? | Did you mean ships that are included in both lists ? | Oh sorry , yes ships that are included in both lists",
            "sql": "select ship.name where captain.rank = value intersect select ship.name where captain.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
        "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'"
    },
    "interaction": [
        {
            "utterance": "What rank is Captain Conway ?",
            "sql": "select captain.rank where captain.name like value"
        },
        {
            "utterance": "What is the average age of the midshipmans",
            "sql": "select avg ( captain.age ) where captain.rank = value"
        },
        {
            "utterance": "What class of captain named Lieutenant Hugh Bolitho ?",
            "sql": "select captain.class where captain.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many ship there",
            "sql": "select count ( ship.* )"
        },
        {
            "utterance": "what is the name of ship id 2",
            "sql": "select ship.name where ship.ship_id = value"
        },
        {
            "utterance": "what is the built year of the ship id 3",
            "sql": "select ship.built_year where ship.ship_id = value"
        },
        {
            "utterance": "what is the class of the ship id 1",
            "sql": "select ship.class where ship.ship_id = value"
        },
        {
            "utterance": "what is the flag of the ship id 1",
            "sql": "select ship.flag where ship.ship_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of the ship that is steered by the youngest captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are the captains ? | Do you mean you want the name of captain ? | Yes , what are the captains names",
            "sql": "select captain.name"
        },
        {
            "utterance": "Who is the youngest captain ?",
            "sql": "select captain.name order_by captain.age limit_value"
        },
        {
            "utterance": "What ship does Captain Henry steer ? | Do you mean the name of ships of Captain Henry ? | Yes the name of the ship of Captain Henry",
            "sql": "select ship.name where captain.name like value"
        },
        {
            "utterance": "Which is the ship of Captain Henry Dumaresq ?",
            "sql": "select ship.name where captain.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
    },
    "interaction": [
        {
            "utterance": "Who are the technicians from team `` CLE '' and `` CWS '' ?",
            "sql": "select technician.name where technician.team = value or technician.team = value"
        },
        {
            "utterance": "Please show me the starting years for them",
            "sql": "select technician.starting_year where technician.team = value or technician.team = value"
        },
        {
            "utterance": "What years are shared ?",
            "sql": "select technician.starting_year where technician.team = value intersect select technician.starting_year where technician.team = value"
        },
        {
            "utterance": "Can you also give me the minimum and maximum starting years ?",
            "sql": "select max ( technician.starting_year ) , min ( technician.starting_year )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 1,
    "final": {
        "utterance": "Show names of technicians and series of machines they are assigned to repair.",
        "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID"
    },
    "interaction": [
        {
            "utterance": "Who are the technicians ?",
            "sql": "select technician.name"
        },
        {
            "utterance": "Show me which team of machine each technician is assigned .",
            "sql": "select technician.name , machine.team"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 2,
    "final": {
        "utterance": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    "interaction": [
        {
            "utterance": "show names of technicians by order of quality rank of machine they are assigned from worst to best",
            "sql": "select technician.name order_by machine.quality_rank"
        },
        {
            "utterance": "Which technician is the oldest ? | Do you mean the id of the oldest technician ? | What is the Name of the oldest technician ?",
            "sql": "select technician.name order_by technician.age desc limit_value"
        },
        {
            "utterance": "What is the name of the Team with the most number of value points ?",
            "sql": "select machine.team order_by machine.value_points desc limit_value"
        },
        {
            "utterance": "What was the Making Year of the Machine series With the lowest quality rank ?",
            "sql": "select machine.making_year order_by machine.quality_rank limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 3,
    "final": {
        "utterance": "Show names of technicians and the number of machines they are assigned to repair.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many technicians are there in total ?",
            "sql": "select count ( technician.* )"
        },
        {
            "utterance": "Can you show me a list of all of the technicians names the machines they are assigned to repair ? | Did you want the names of technicians and the ids of machines they are assigned to repair ? | Yes ! Can you show me their names and their machine ids that they are assigned to repair ?",
            "sql": "select technician.name , repair_assignment.machine_id"
        },
        {
            "utterance": "Great ! Also add to that list the starting year and age of each technician ?",
            "sql": "select technician.name , repair_assignment.machine_id , technician.starting_year , technician.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
    },
    "interaction": [
        {
            "utterance": "What are the names of technicians from `` CLE '' ?",
            "sql": "select technician.name where technician.team = value"
        },
        {
            "utterance": "What about names from `` CWS '' ?",
            "sql": "select technician.name where technician.team = value"
        },
        {
            "utterance": "And what are starting years shared by technicians from both teams ?",
            "sql": "select technician.starting_year where technician.team = value intersect select technician.starting_year where technician.team = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 5,
    "final": {
        "utterance": "List the names of technicians who have not been assigned to repair machines.",
        "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
    },
    "interaction": [
        {
            "utterance": "List out the all technician name",
            "sql": "select technician.name"
        },
        {
            "utterance": "list out the all machine id",
            "sql": "select repair_assignment.machine_id"
        },
        {
            "utterance": "list out the all technician age",
            "sql": "select technician.technician_id , technician.age"
        },
        {
            "utterance": "list the name of technician who have not been assigned to repair machines",
            "sql": "select technician.name where technician.technician_id not in ( select repair_assignment.technician_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 6,
    "final": {
        "utterance": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    "interaction": [
        {
            "utterance": "Show the names of all technicians .",
            "sql": "select technician.name"
        },
        {
            "utterance": "Show the names of all technicians and the machines they are assigned to .",
            "sql": "select technician.name , repair_assignment.machine_id"
        },
        {
            "utterance": "Show the names of all technicians assigned to the machine with ID 2 .",
            "sql": "select technician.name , repair_assignment.machine_id"
        },
        {
            "utterance": "Show the names of all technicians in ascending order of quality rank assigned to the machine with ID 2 .",
            "sql": "select technician.name , repair_assignment.machine_id , machine.quality_rank order_by machine.quality_rank"
        },
        {
            "utterance": "Show the names of all technicians in ascending order of quality rank assigned to the machine with ID 1 .",
            "sql": "select technician.name , repair_assignment.machine_id , machine.quality_rank order_by machine.quality_rank"
        },
        {
            "utterance": "Show the names of technicians in ascending order of quality rank of the machine they are assigned .",
            "sql": "select technician.name order_by machine.quality_rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the starting year of the oldest technicians?",
        "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the starting year of the oldest technician ?",
            "sql": "select technician.starting_year order_by technician.age desc limit_value"
        },
        {
            "utterance": "What is their name and team ? | what do you mean their ? could you give more info ? | What is the name of the oldest technician ?",
            "sql": "select technician.name order_by technician.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many students does LORIA ONDERSMA teaches?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""
    },
    "interaction": [
        {
            "utterance": "Can you list the class room associated with the name Loria Ondersma in the teachers table ?",
            "sql": "select teachers.classroom where teachers.lastname = value"
        },
        {
            "utterance": "Can you show me all first and last names from the list table that have a classroom id of 108 ?",
            "sql": "select teachers.firstname , teachers.lastname where teachers.classroom = value"
        },
        {
            "utterance": "Can you tell me how many unique names are currently in the table ?",
            "sql": "select count ( distinct teachers.firstname )"
        },
        {
            "utterance": "How many unique names in the list table have a classroom id of 108 ?",
            "sql": "select count ( distinct teachers.firstname ) where teachers.classroom = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list all of the first and last names for all of the students in the database ?",
            "sql": "select list.lastname , list.firstname"
        },
        {
            "utterance": "Excellent ! Could you filter that list to show only the students who were taught by the teacher with the last name Moyer ?",
            "sql": "select list.firstname , list.lastname where teachers.lastname = value"
        },
        {
            "utterance": "Great ! Could you update this list to include the grade of each student ?",
            "sql": "select list.firstname , list.lastname , list.grade where teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""
    },
    "interaction": [
        {
            "utterance": "what is the lname of grade 2 | Do you mean what are the last names of the students in grade 2 ? | what is the lname of classroom 101",
            "sql": "select list.lastname where list.classroom = value"
        },
        {
            "utterance": "what is the fname of class room 102",
            "sql": "select list.firstname where list.classroom = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of the teacher who teaches the largest number of students.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all of the students ?",
            "sql": "select list.lastname , list.firstname"
        },
        {
            "utterance": "How many students are in that classroom ?",
            "sql": "select count ( list.* ) group_by list.classroom order_by count ( list.* ) desc limit_value"
        },
        {
            "utterance": "What is the name of the teacher who teaches in that classroom ?",
            "sql": "select teachers.firstname , teachers.lastname group_by teachers.firstname , teachers.lastname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the last names of all the teachers that teach GELL TAMI.",
        "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of grades ?",
            "sql": "select list.grade"
        },
        {
            "utterance": "can you show me a list of first name that starting with 'J ' ?",
            "sql": "select list.firstname where list.firstname like value"
        },
        {
            "utterance": "can you show me a list of last name that starting with 'J ' ?",
            "sql": "select list.lastname where list.lastname like value"
        },
        {
            "utterance": "can you show me a list of teacher class room ?",
            "sql": "select teachers.classroom"
        },
        {
            "utterance": "`` Find the last names of all the teachers that teach GELL TAMI .",
            "sql": "select teachers.lastname where list.firstname = value and list.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which classroom has the most students?",
        "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which classroom has the most students ?",
            "sql": "select list.classroom group_by list.classroom order_by count ( list.* ) desc limit_value"
        },
        {
            "utterance": "Could you tell me what grade that is , please ?",
            "sql": "select list.classroom , list.grade group_by list.classroom order_by count ( list.* ) desc limit_value"
        },
        {
            "utterance": "What are the first names of the students in that classroom that begin with the letter `` S '' ?",
            "sql": "select list.firstname where list.firstname like value and list.classroom in ( select list.classroom group_by list.classroom order_by count ( list.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which classroom has the most students?",
        "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which classroom has the most students ?",
            "sql": "select list.classroom group_by list.classroom order_by count ( list.* ) desc limit_value"
        },
        {
            "utterance": "what grade is that classroom ?",
            "sql": "select list.grade group_by list.classroom order_by count ( list.* ) desc limit_value"
        },
        {
            "utterance": "What is the teacher 's last name ?",
            "sql": "select list.lastname group_by list.classroom order_by count ( list.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 7,
    "final": {
        "utterance": "For each grade 0 classroom, report the total number of students.",
        "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
    },
    "interaction": [
        {
            "utterance": "how many classrooms are available ?",
            "sql": "select count ( distinct list.classroom )"
        },
        {
            "utterance": "how many grades are available ?",
            "sql": "select count ( distinct list.grade )"
        },
        {
            "utterance": "yes | LastName or FirstName ? | lastname",
            "sql": "select count ( distinct list.lastname )"
        },
        {
            "utterance": "how many firstnames are available ?",
            "sql": "select count ( distinct list.firstname )"
        },
        {
            "utterance": "what was the car grade ?",
            "sql": "select list.grade where list.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "What students are n't taught by Otha Moyer ? | Did you want to return their full names ? | Yes please",
            "sql": "select distinct list.firstname , list.lastname except select list.firstname , list.lastname where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "Could you limit it to all first graders ?",
            "sql": "select distinct list.firstname , list.lastname where list.grade = value except select list.firstname , list.lastname where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "what is the average of grades ?",
            "sql": "select avg ( list.grade )"
        },
        {
            "utterance": "can you show me a list of teacchers first name ?",
            "sql": "select teachers.firstname"
        },
        {
            "utterance": "can you show me a list of teachers first name that starting with 'M ' ?",
            "sql": "select teachers.firstname where teachers.firstname like value"
        },
        {
            "utterance": "find all first-grade students who are not taught by otha moyer . | Do you mean First or Last names ? | first",
            "sql": "select distinct list.firstname where list.grade = value except select list.firstname , list.lastname where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "How many teachers in this table ?",
            "sql": "select count ( teachers.* )"
        },
        {
            "utterance": "Yes .",
            "sql": "select list.grade where list.firstname like value"
        },
        {
            "utterance": "Find the last name of Mr.STORMY",
            "sql": "select list.lastname where list.firstname like value"
        },
        {
            "utterance": "How many students in this table ?",
            "sql": "select count ( list.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of the teacher who teaches the largest number of students.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of the teacher who teaches the largest number of students .",
            "sql": "select teachers.firstname , teachers.lastname group_by teachers.firstname , teachers.lastname order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What grade do they teach ? | Here are the grades of the students taught by the teacher who teaches the largest number of students . | What is their class room ?",
            "sql": "select list.classroom group_by teachers.firstname , teachers.lastname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many students does KAWA GORDON teaches?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""
    },
    "interaction": [
        {
            "utterance": "How many students does KAWA GORDON teaches ?",
            "sql": "select count ( * ) where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "How many students does MIN MACROSTIE teaches ?",
            "sql": "select count ( * ) where teachers.firstname like value and teachers.lastname like value"
        },
        {
            "utterance": "What are the first and last names of the teachers that teach STORMY CHRISTENSEN ?",
            "sql": "select teachers.firstname , teachers.lastname where list.firstname like value and list.lastname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the last names of the teachers that teach fifth grade.",
        "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
    },
    "interaction": [
        {
            "utterance": "Can you tell me how many teachers teach fifth grade ?",
            "sql": "select count ( distinct teachers.lastname ) where list.grade = value"
        },
        {
            "utterance": "What is that teacher 's last name ?",
            "sql": "select distinct teachers.lastname where list.grade = value"
        },
        {
            "utterance": "What classroom does this teacher teach in ?",
            "sql": "select distinct teachers.classroom where list.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    "interaction": [
        {
            "utterance": "What are the duration 's of the longest and shortest track in milliseconds .",
            "sql": "select max ( track.milliseconds ) , min ( track.milliseconds )"
        },
        {
            "utterance": "What is the name of the longest track ?",
            "sql": "select track.name where track.milliseconds = ( select max ( track.milliseconds ) )"
        },
        {
            "utterance": "Who was the longest track written by ?",
            "sql": "select track.composer where track.milliseconds = ( select max ( track.milliseconds ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Hom many albums does the artist \"Metallica\" have?",
        "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
    },
    "interaction": [
        {
            "utterance": "how many artists do you have ?",
            "sql": "select count ( distinct artist.artistid )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select artist.name"
        },
        {
            "utterance": "how many albums does AC/DC have ?",
            "sql": "select count ( * ) where artist.name = value"
        },
        {
            "utterance": "And for Metallica ?",
            "sql": "select count ( * ) where artist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the album names, ids and the number of tracks for each album.",
        "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID"
    },
    "interaction": [
        {
            "utterance": "Tell me the artist id and album id for title Balls to the Wall ?",
            "sql": "select album.albumid , album.artistid where album.title = value"
        },
        {
            "utterance": "k. Who is the composer for For Those About To Rock ( We Salute You ) ?",
            "sql": "select distinct track.composer where album.title = value"
        },
        {
            "utterance": "k. Who is the composer for Balls to the Wall ?",
            "sql": "select distinct track.composer where album.title = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select album.title , track.albumid , count ( * ) group_by track.albumid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"
    },
    "interaction": [
        {
            "utterance": "List album titles for albums containing Reggae genre tracks . | Did you mean both contain 'Reggae ' and 'Rock ' genre tracks ? | yes",
            "sql": "select album.title where genre.name = value intersect select album.title where genre.name = value"
        },
        {
            "utterance": "List album titles for albums containing Rock genre tracks",
            "sql": "select album.title where genre.name = value intersect select album.title where genre.name = value"
        },
        {
            "utterance": "List album titles for albums containing Metal genre tracks",
            "sql": "select distinct album.title where genre.name = value"
        },
        {
            "utterance": "How many albums contain 'Metal ' genre tracks ?",
            "sql": "select count ( distinct album.title ) where genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the genre ID for Latin and Pop ?",
            "sql": "select genre.genreid where genre.name = value or genre.name = value"
        },
        {
            "utterance": "That was very quick , thank you very much : ) Then , could you please let me know the average duration ( milliseconds ) of Latin and Pop ?",
            "sql": "select avg ( track.milliseconds ) where genre.name = value or genre.name = value"
        },
        {
            "utterance": "That 's an amazingly precise number , thank you again . Then what about the average unit price of Latin and Pop ?",
            "sql": "select avg ( track.unitprice ) where genre.name = value or genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "State the email id of custormer id 1 ?",
            "sql": "select customer.email where customer.customerid = value"
        },
        {
            "utterance": "How many employees are from Calgary city ?",
            "sql": "select count ( employee.* ) where employee.city = value"
        },
        {
            "utterance": "Please show the employee first names and ids of employees who serve at least 10 customers ?",
            "sql": "select customer.firstname , customer.supportrepid group_by customer.supportrepid having count ( * ) > = value"
        },
        {
            "utterance": "State the title of employee id 2 ?",
            "sql": "select employee.title where employee.employeeid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many tracks belong to rock genre?",
        "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    "interaction": [
        {
            "utterance": "In the rock genre , how many tracks are there ?",
            "sql": "select count ( * ) where genre.name = value"
        },
        {
            "utterance": "What about jazz ?",
            "sql": "select count ( * ) where genre.name = value"
        },
        {
            "utterance": "Can you list the composer who wrote the most rock genre songs ?",
            "sql": "select track.composer where genre.name = value group_by track.composer order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you list all composers who wrote tracks with the letter B in their name ?",
            "sql": "select track.composer where track.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the title of all the albums of the artist \"AC/DC\".",
        "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""
    },
    "interaction": [
        {
            "utterance": "What is the title of AC/DC 's albums ?",
            "sql": "select album.title where artist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the average unit price of rock tracks?",
        "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    "interaction": [
        {
            "utterance": "What is the average unit price of Rock tracks ?",
            "sql": "select avg ( track.unitprice ) where genre.name = value"
        },
        {
            "utterance": "What 's the average milliseconds of the Rock Tracks ?",
            "sql": "select avg ( track.milliseconds ) where genre.name = value"
        },
        {
            "utterance": "and for the Jazz tracks ?",
            "sql": "select avg ( track.milliseconds ) where genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many artists do not have any album?",
        "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    "interaction": [
        {
            "utterance": "How many artists have album ?",
            "sql": "select count ( distinct album.artistid )"
        },
        {
            "utterance": "Find the album id of accept ? | The album ids of the artist named 'Accept ' are 2 and 3 . | How many artists in this table ?",
            "sql": "select count ( distinct artist.artistid ) where artist.name = value"
        },
        {
            "utterance": "How many albums in this table ? | did you mean the number of all the albums shown in the table ? | Yes .",
            "sql": "select count ( album.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""
    },
    "interaction": [
        {
            "utterance": "I want to know the invoice dates corresponding to customers",
            "sql": "select customer.firstname , customer.lastname , invoice.invoicedate"
        },
        {
            "utterance": "Could you please help me with the billing addresses of the named customers ?",
            "sql": "select customer.firstname , customer.lastname , invoice.billingaddress"
        },
        {
            "utterance": "Ok , I will also want to know the billing countries of the named customers",
            "sql": "select customer.firstname , customer.lastname , invoice.billingcountry"
        },
        {
            "utterance": "OK , I will like to know the billing city of the names customers please .",
            "sql": "select customer.firstname , customer.lastname , invoice.billingcity"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the title of all the albums of the artist \"AC/DC\".",
        "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""
    },
    "interaction": [
        {
            "utterance": "Find the titles of all the albums of the artist AC/DC ?",
            "sql": "select album.title where artist.name = value"
        },
        {
            "utterance": "Find the titles of all the albums of the artist Aerosmith please ?",
            "sql": "select album.title where artist.name = value"
        },
        {
            "utterance": "What are the titles of all the albums by artist id 4 ?",
            "sql": "select album.title where album.artistid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "Show me the title of album id 1 ?",
            "sql": "select album.title where album.albumid = value"
        },
        {
            "utterance": "Show me the name of artist with artist id 3 ?",
            "sql": "select artist.name where artist.artistid = value"
        },
        {
            "utterance": "Show me the names of all artist ?",
            "sql": "select artist.name"
        },
        {
            "utterance": "Show me the list of all id and names of all artists that have at least 3 albums in alphabetical order ?",
            "sql": "select artist.name , album.artistid group_by album.artistid having count ( * ) > = value order_by artist.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many customers have email that contains \"gmail.com\"?",
        "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customer.* )"
        },
        {
            "utterance": "What is the most popular company ?",
            "sql": "select customer.company group_by customer.company order_by count ( customer.* ) desc limit_value"
        },
        {
            "utterance": "How many customers have gmail emails ?",
            "sql": "select count ( customer.* ) where customer.email like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which artist does the album \"Balls to the Wall\" belong to?",
        "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""
    },
    "interaction": [
        {
            "utterance": "I am interested in learning who the artist is .",
            "sql": "select artist.name where album.title = value"
        },
        {
            "utterance": "That 's okay . What are some of Accept 's other albums ?",
            "sql": "select album.title where artist.name = value and album.title != value"
        },
        {
            "utterance": "That sounds good . What about the album `` For Those About To Rock , We Salute You '' ? Which artist produced that one ?",
            "sql": "select artist.name where album.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the least common media type in all tracks?",
        "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you tell me , which media type is the least common associated with all tracks ?",
            "sql": "select mediatype.name group_by track.mediatypeid order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Thank you ! Can you show me the total number of occurrences for Purchased AAC as the media type ?",
            "sql": "select mediatype.name , count ( * ) group_by track.mediatypeid order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of the most common genre in all tracks?",
        "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the name of the Track 2 ?",
            "sql": "select track.name where track.trackid = value"
        },
        {
            "utterance": "what is the unit price of the Fast as a shark ?",
            "sql": "select track.unitprice where track.name = value"
        },
        {
            "utterance": "Find the milliseconds of Track id 1 ?",
            "sql": "select track.milliseconds where track.trackid = value"
        },
        {
            "utterance": "how many genre in the list ?",
            "sql": "select count ( genre.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "How many employees serve at least 10 customers ?",
            "sql": "select count ( * ) group_by customer.supportrepid having count ( * ) > = value"
        },
        {
            "utterance": "What are the first names of employees that serve at least 10 customers ?",
            "sql": "select customer.firstname group_by customer.supportrepid having count ( * ) > = value"
        },
        {
            "utterance": "What is diego work title ? | is Diego the employee first name ? | Yes",
            "sql": "select customer.company where customer.firstname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the first name and last name employee helps the customer with first name Leonie?",
        "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""
    },
    "interaction": [
        {
            "utterance": "how many customers are there",
            "sql": "select count ( customer.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the address of all customers that live in Germany and have invoice.",
        "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
    },
    "interaction": [
        {
            "utterance": "how many customers live in germany and have invoice",
            "sql": "select count ( * ) where customer.country = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select customer.address where customer.country = value"
        },
        {
            "utterance": "include the first and last name of customers of this address in the table",
            "sql": "select customer.address , customer.firstname , customer.lastname where customer.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which artist has the most albums?",
        "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which artist has the most albums ?",
            "sql": "select artist.name group_by artist.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Which artist has the lowest albums ? | Did you mean which artist has the least number of albums ? | Yes , I mean it . which artist has the least number of albums ?",
            "sql": "select artist.name group_by artist.name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Can you tell me the artist ID number of the Iron Maiden ?",
            "sql": "select album.artistid group_by artist.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you tell me the artist ID number of the Aaron Copland & London Symphony Orchestra .",
            "sql": "select album.artistid group_by artist.name order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the first names of all customers that live in Brazil and have an invoice.",
        "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
    },
    "interaction": [
        {
            "utterance": "Can you show me the customer names that have an invoice ?",
            "sql": "select customer.firstname , customer.lastname where customer.customerid in ( select customer.customerid intersect select invoice.customerid )"
        },
        {
            "utterance": "Hmm , I want to know all the customer names that live in Brazil and have an invoice . | Here are the distinct first names of all the customer that live in Brazil and have an invoice . | Can you also list their customer ids ?",
            "sql": "select distinct customer.firstname , customer.customerid where customer.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 22,
    "final": {
        "utterance": "How many tracks are in the AAC audio file media type?",
        "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
    },
    "interaction": [
        {
            "utterance": "How many composers do you have recorded in the system ?",
            "sql": "select count ( distinct track.composer )"
        },
        {
            "utterance": "Have many MPEG media audio files are in the system ?",
            "sql": "select count ( * ) where mediatype.name = value"
        },
        {
            "utterance": "What is the highest recorded millisecond for a single track ?",
            "sql": "select max ( track.milliseconds )"
        },
        {
            "utterance": "What is the title name for the highest recorded single track ?",
            "sql": "select track.name order_by track.milliseconds desc limit_value"
        },
        {
            "utterance": "What is the Album Id for Occupation / Precipice ?",
            "sql": "select track.albumid where track.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"
    },
    "interaction": [
        {
            "utterance": "Filter the track table to show only those records with unit price bigger than 1",
            "sql": "select track.* where track.unitprice > value"
        },
        {
            "utterance": "Count the number of records in the previous table .",
            "sql": "select count ( track.* )"
        },
        {
            "utterance": "Calculate average price for all tracks",
            "sql": "select avg ( track.unitprice )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the names of all the tracks that contain the word \"you\".",
        "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
    },
    "interaction": [
        {
            "utterance": "what is the average of the milliseconds ?",
            "sql": "select avg ( track.milliseconds )"
        },
        {
            "utterance": "what is the average of the bytes ?",
            "sql": "select avg ( track.bytes )"
        },
        {
            "utterance": "what is the highest unit price ?",
            "sql": "select max ( track.unitprice )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the least common media type in all tracks?",
        "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the least common media type in all tracks",
            "sql": "select mediatype.name group_by track.mediatypeid order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How many different kinds of media types are there ?",
            "sql": "select count ( * ) ( select track.mediatypeid group_by track.mediatypeid )"
        },
        {
            "utterance": "What is the most common media type ?",
            "sql": "select mediatype.name group_by track.mediatypeid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many tracks are there ?",
            "sql": "select count ( track.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    "interaction": [
        {
            "utterance": "what are the durations of the longest tracts ?",
            "sql": "select max ( track.milliseconds )"
        },
        {
            "utterance": "what are the shortest tracks ?",
            "sql": "select min ( track.milliseconds )"
        },
        {
            "utterance": "How many composer are there ?",
            "sql": "select count ( track.composer )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\""
    },
    "interaction": [
        {
            "utterance": "Provide all the details of the song Tumi robe nirobe ?",
            "sql": "select song.* where song.song_name = value"
        },
        {
            "utterance": "What are the maximum and minimum resolution of songs whose duration in 3 minutes ?",
            "sql": "select max ( song.resolution ) , min ( song.resolution ) where files.duration like value"
        },
        {
            "utterance": "List the songs with size more than 4MB ?",
            "sql": "select * where files.file_size > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"
    },
    "interaction": [
        {
            "utterance": "What are the names of the artists from Bangladesh ?",
            "sql": "select artist.artist_name where artist.country = value"
        },
        {
            "utterance": "Which artists from Bangladesh have never received a rating higher that 7 ?",
            "sql": "select distinct artist.artist_name where artist.country = value except select distinct song.artist_name where song.rating > value"
        },
        {
            "utterance": "Can you add their genders into the table please ?",
            "sql": "select artist.artist_name , artist.gender where artist.artist_name in ( select distinct artist.artist_name where artist.country = value except select distinct song.artist_name where song.rating > value )"
        },
        {
            "utterance": "What are their preferred genres ?",
            "sql": "select artist.preferred_genre where artist.artist_name in ( select distinct artist.artist_name where artist.country = value except select distinct song.artist_name where song.rating > value )"
        },
        {
            "utterance": "What are the names of the songs they have sung ?",
            "sql": "select song.song_name where song.artist_name in ( select distinct artist.artist_name where artist.country = value except select distinct song.artist_name where song.rating > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"
    },
    "interaction": [
        {
            "utterance": "Give me the names of the English Artist",
            "sql": "select distinct song.artist_name where song.languages = value"
        },
        {
            "utterance": "List the names of the English Artist whose song 's rating is not 10",
            "sql": "select distinct song.artist_name where song.languages = value except select distinct song.artist_name where song.rating = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
    },
    "interaction": [
        {
            "utterance": "Can you show the artist name of f id 2 ?",
            "sql": "select files.artist_name where files.f_id = value"
        },
        {
            "utterance": "Can you show the ids of songs that are available in either mp4 format or have resolution above 720 ?",
            "sql": "select files.f_id where files.formats = value union select song.f_id where song.resolution > value"
        },
        {
            "utterance": "Can you the artist name of Song Tum robe nirobe ?",
            "sql": "select song.artist_name where song.song_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the id of the longest song?",
        "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many songs are there ?",
            "sql": "select count ( files.* )"
        },
        {
            "utterance": "Who sings the song with a length of 5minutes and 23 seconds ?",
            "sql": "select files.artist_name where files.duration = value"
        },
        {
            "utterance": "what 's the id of that song ?",
            "sql": "select files.f_id where files.duration = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names of the top 3 artists with the largest number of songs ?",
            "sql": "select artist.artist_name group_by song.artist_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What about the top 3 artists with the largest number of songs whose language is Bangla ?",
            "sql": "select artist.artist_name where song.languages = value group_by song.artist_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are their preferred genres ?",
            "sql": "select artist.preferred_genre where song.languages = value group_by song.artist_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Could you list the names of all artists that prefer the genre folk and speak the language Bangla ?",
            "sql": "select artist.artist_name where song.languages = value and artist.preferred_genre = value"
        },
        {
            "utterance": "How about the names of all artists that prefer the genre folk ?",
            "sql": "select artist.artist_name where artist.preferred_genre = value"
        },
        {
            "utterance": "How about the names of all artists that prefer the genre tagore ?",
            "sql": "select artist.artist_name where artist.preferred_genre = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the song that was released in the most recent year?",
        "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the newest song ?",
            "sql": "select song.song_name order_by song.releasedate desc limit_value"
        },
        {
            "utterance": "And the oldest song ?",
            "sql": "select song.song_name order_by song.releasedate limit_value"
        },
        {
            "utterance": "What are the names of the artists that released the oldest song on the list ?",
            "sql": "select song.artist_name order_by song.releasedate limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
    },
    "interaction": [
        {
            "utterance": "Find the distinct names of all songs that have a higher resolution than some songs in English .",
            "sql": "select distinct song.song_name where song.resolution > ( select min ( song.resolution ) where song.languages = value )"
        },
        {
            "utterance": "what is the total number of songs ?",
            "sql": "select count ( song.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the country of origin for the artist who made the least number of songs?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which artist made the most songs ? | did you want to return his/her name ? | Yes",
            "sql": "select song.artist_name group_by song.artist_name order_by count ( song.* ) desc limit_value"
        },
        {
            "utterance": "What about the name of artist with least number of songs ?",
            "sql": "select song.artist_name group_by song.artist_name order_by count ( song.* ) limit_value"
        },
        {
            "utterance": "Ok , then what is the country of origin of Enrique ?",
            "sql": "select artist.country where artist.artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"
    },
    "interaction": [
        {
            "utterance": "What 's the rating of all songs in English ?",
            "sql": "select song.rating where song.languages = value"
        },
        {
            "utterance": "What are the names of all the songs ?",
            "sql": "select song.song_name"
        },
        {
            "utterance": "Which of those have rating below that of all songs in English ?",
            "sql": "select song.song_name where song.rating < ( select min ( song.rating ) where song.languages = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of songs whose genre is modern or language is English.",
        "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "Can you show the artist name of song Tumi robe nirobe ?",
            "sql": "select song.artist_name where song.song_name = value"
        },
        {
            "utterance": "Can you show the rating of the song Tumi robe nirobe ?",
            "sql": "select song.rating where song.song_name = value"
        },
        {
            "utterance": "What is the genre of the song Tumi robe nirobe ?",
            "sql": "select song.genre_is where song.song_name = value"
        },
        {
            "utterance": "Can you show the names of songs whose genre is modern or language is English ?",
            "sql": "select song.song_name where song.genre_is = value or song.languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with the song name for the song with the lowest resolution ?",
            "sql": "select song.song_name order_by song.resolution limit_value"
        },
        {
            "utterance": "Thanks ! What is the name of the artist who produced the song with the lowest resolution ?",
            "sql": "select artist.artist_name order_by song.resolution limit_value"
        },
        {
            "utterance": "Thank you very much ! Can you please tell me what the gender of the artist is ?",
            "sql": "select artist.gender order_by song.resolution limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 12,
    "final": {
        "utterance": "List the file size and format for all songs that have resolution lower than 800.",
        "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"
    },
    "interaction": [
        {
            "utterance": "How many songs have a resolution below 800 ?",
            "sql": "select count ( song.song_name ) where song.resolution < value"
        },
        {
            "utterance": "What are the file sizes of those songs ?",
            "sql": "select files.file_size where song.resolution < value"
        },
        {
            "utterance": "What are the formats for the songs with a resolution below 800 ?",
            "sql": "select files.formats where song.resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the country of origin for the artist who made the least number of songs?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . how many countries of origin are represented by the artists ?",
            "sql": "select count ( artist.country )"
        },
        {
            "utterance": "and which artist has made the least number of songs ?",
            "sql": "select song.artist_name group_by song.artist_name order_by count ( song.* ) limit_value"
        },
        {
            "utterance": "OK. and what is that artist 's country of origin ? | Do you mean the country of the artist named Enrique ? | yes",
            "sql": "select artist.country where artist.artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Return the names of singers who are from UK and released an English song.",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "Hello there ! How are you doing tonight ! ? Can you provide me with a list of all of the artist names in this database ?",
            "sql": "select artist.artist_name"
        },
        {
            "utterance": "Thank you very much ! Can you filter that list to show only the artist_names who have song for which the country code is the UK ?",
            "sql": "select artist.artist_name where artist.country = value intersect select artist.artist_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the songs that have a lower rating than some song of the blues genre ?",
            "sql": "select song.song_name where song.rating < ( select max ( song.rating ) where song.genre_is = value )"
        },
        {
            "utterance": "What are the names of all the songs that have a higher rating than some song of the blues genre ?",
            "sql": "select song.song_name where song.rating > ( select max ( song.rating ) where song.genre_is = value )"
        },
        {
            "utterance": "What are the names and ratings of all songs of the blues genre ?",
            "sql": "select song.song_name , song.rating where song.genre_is = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"
    },
    "interaction": [
        {
            "utterance": "What are the resolutions of all songs with a rating lower than 8 ?",
            "sql": "select song.resolution where song.rating < value"
        },
        {
            "utterance": "What are the IDs and resolutions of all the songs with resolutions higher than those ?",
            "sql": "select song.f_id , song.resolution where song.resolution > ( select max ( song.resolution ) where song.rating < value )"
        },
        {
            "utterance": "What are the IDs and resolutions of all the songs with resolutions higher than or equal to 1080 ?",
            "sql": "select song.f_id , song.resolution where song.resolution > = value"
        },
        {
            "utterance": "What are the song names and ratings of those songs ?",
            "sql": "select song.song_name , song.rating where song.resolution > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"
    },
    "interaction": [
        {
            "utterance": "what are the shortest duration and lowest rating of songs grouped by genre and ordered by genre ?",
            "sql": "select min ( files.duration ) , min ( song.rating ) , song.genre_is group_by song.genre_is order_by song.genre_is"
        },
        {
            "utterance": "WHICH ARTISTS SUNG THE SONGS ?",
            "sql": "select song.artist_name"
        },
        {
            "utterance": "how many songs has Enrique produced ?",
            "sql": "select count ( song.* ) where song.artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the names and number of works of all artists who have at least one English songs.",
        "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "How many artists have recorded at least one song in English ?",
            "sql": "select count ( * ) ( select * where song.languages = value group_by song.artist_name having count ( * ) > = value )"
        },
        {
            "utterance": "What are the names of the artists ?",
            "sql": "select artist.artist_name where song.languages = value group_by song.artist_name having count ( * ) > = value"
        },
        {
            "utterance": "How many songs has Enrique recorded ?",
            "sql": "select count ( * ) where artist.artist_name = value"
        },
        {
            "utterance": "What about the other artist ?",
            "sql": "select count ( * ) where artist.artist_name = ( select artist.artist_name where song.languages = value and artist.artist_name != value group_by song.artist_name having count ( * ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
    },
    "interaction": [
        {
            "utterance": "how many artist are there in total ?",
            "sql": "select count ( artist.* )"
        },
        {
            "utterance": "How about the total number of songs ?",
            "sql": "select count ( song.* )"
        },
        {
            "utterance": "Can you list the songs ' names ?",
            "sql": "select song.song_name"
        },
        {
            "utterance": "Who was the singer for the song My love ?",
            "sql": "select song.artist_name where song.song_name = value"
        },
        {
            "utterance": "Where was the singer from ? | Do you mean Enrique ? | Yes",
            "sql": "select song.country where song.artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the names of artists who are Male and are from UK?",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
    },
    "interaction": [
        {
            "utterance": "Which are the male artists ?",
            "sql": "select artist.* where artist.gender = value"
        },
        {
            "utterance": "And which of them are from the UK ?",
            "sql": "select artist.artist_name where artist.country = value and artist.gender = value"
        },
        {
            "utterance": "Okay , and what genre does Michel prefer ?",
            "sql": "select artist.preferred_genre where artist.artist_name = value"
        },
        {
            "utterance": "Alright , and how many male artists who prefer pop are there in the entire world , according to the table ?",
            "sql": "select count ( artist.* ) where artist.preferred_genre = value and artist.gender = value"
        },
        {
            "utterance": "How many female artists prefer pop ?",
            "sql": "select count ( artist.* ) where artist.preferred_genre = value and artist.gender = value"
        },
        {
            "utterance": "Finally , what is the most preferred genre in the entire world ?",
            "sql": "select artist.preferred_genre group_by artist.preferred_genre order_by count ( artist.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the language that was used most often in songs with resolution above 500?",
        "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What language is used most often in songs ?",
            "sql": "select song.languages group_by song.languages order_by count ( song.* ) desc limit_value"
        },
        {
            "utterance": "And what is the range of resolution in songs ?",
            "sql": "select min ( song.resolution ) , max ( song.resolution )"
        },
        {
            "utterance": "What is the range of ratings for those songs ?",
            "sql": "select min ( song.rating ) , max ( song.rating )"
        },
        {
            "utterance": "What is the language most often used in songs with resolution below 500 ?",
            "sql": "select song.languages where song.resolution < value group_by song.languages order_by count ( song.* ) desc limit_value"
        },
        {
            "utterance": "And what language is most often used in songs with resolution above 500 ?",
            "sql": "select song.languages where song.resolution > value group_by song.languages order_by count ( song.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "Which songs are in mp3 format ?",
            "sql": "select song.song_name where files.formats = value"
        },
        {
            "utterance": "Of the which have resolution below 1000 ?",
            "sql": "select song.song_name where files.formats = value intersect select song.song_name where song.resolution < value"
        },
        {
            "utterance": "What is their actual resolution ?",
            "sql": "select song.song_name , song.resolution where song.song_name in ( select song.song_name where files.formats = value intersect select song.song_name where song.resolution < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the most popular file format?",
        "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many file formats are supported ?",
            "sql": "select count ( distinct files.formats )"
        },
        {
            "utterance": "How many songs are available in each format ?",
            "sql": "select files.formats , count ( files.* ) group_by files.formats"
        },
        {
            "utterance": "Is MP4 the most popular format ?",
            "sql": "select files.formats group_by files.formats order_by count ( files.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"
    },
    "interaction": [
        {
            "utterance": "what is the artist name of india",
            "sql": "select song.artist_name where song.country = value"
        },
        {
            "utterance": "what is the f id of bangala",
            "sql": "select song.f_id where song.languages = value"
        },
        {
            "utterance": "what is the rating of resolution 512",
            "sql": "select song.rating where song.resolution = value"
        },
        {
            "utterance": "what is the song name of tagore",
            "sql": "select song.song_name where song.genre_is = value"
        },
        {
            "utterance": "what is the song name of bangladesh",
            "sql": "select song.song_name where song.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
    },
    "interaction": [
        {
            "utterance": "Find the distinct names of all the songs that have a higher resolution than some songs in English , please ?",
            "sql": "select distinct song.song_name where song.resolution > ( select min ( song.resolution ) where song.languages = value )"
        },
        {
            "utterance": "What countries are those songs from ?",
            "sql": "select song.country where song.resolution > ( select min ( song.resolution ) where song.languages = value )"
        },
        {
            "utterance": "Can you add the songs ' names and resolutions to the table ?",
            "sql": "select song.country , song.song_name , song.resolution where song.resolution > ( select min ( song.resolution ) where song.languages = value )"
        },
        {
            "utterance": "What are the names of the top 3 rated songs ?",
            "sql": "select song.song_name order_by song.rating desc limit_value"
        },
        {
            "utterance": "Could you add the artists ' names to the table ?",
            "sql": "select song.song_name , song.artist_name order_by song.rating desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages"
    },
    "interaction": [
        {
            "utterance": "What are the maximum duration and resolution of songs grouped and ordered by languages ?",
            "sql": "select max ( files.duration ) , max ( song.resolution ) , song.languages group_by song.languages order_by song.languages"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select files.file_size , files.formats group_by song.languages order_by song.languages"
        },
        {
            "utterance": "What are the maximum duration and resolution of songs grouped and ordered by country ?",
            "sql": "select max ( files.duration ) , max ( song.resolution ) group_by song.country order_by song.country"
        },
        {
            "utterance": "What are the the file size and fomats of songs grouped and ordered by country for each file ?",
            "sql": "select files.file_size , files.formats group_by song.country order_by song.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 27,
    "final": {
        "utterance": "List the id, genre and artist name of English songs ordered by rating.",
        "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"
    },
    "interaction": [
        {
            "utterance": "how many artist_name in the song table",
            "sql": "select count ( song.* )"
        },
        {
            "utterance": "ok i want to highest rating in the song table",
            "sql": "select song.rating order_by song.rating desc limit_value"
        },
        {
            "utterance": "how many song_name in the song table",
            "sql": "select count ( song.* )"
        },
        {
            "utterance": "i want to highest resolution in the song table",
            "sql": "select song.resolution order_by song.resolution desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 28,
    "final": {
        "utterance": "How many songs have 4 minute duration?",
        "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
    },
    "interaction": [
        {
            "utterance": "What is the longest duration ?",
            "sql": "select files.duration order_by files.duration desc limit_value"
        },
        {
            "utterance": "What is the shortest duration ?",
            "sql": "select files.duration order_by files.duration limit_value"
        },
        {
            "utterance": "How many songs have a short duration less than 4 minutes ?",
            "sql": "select count ( files.* ) where files.duration < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Return the names of singers who are from UK and released an English song.",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "how artist are from India",
            "sql": "select count ( artist.* ) where artist.country = value"
        },
        {
            "utterance": "how many persons are from folk genre",
            "sql": "select count ( artist.* ) where artist.preferred_genre = value"
        },
        {
            "utterance": "how many artists are from Bangladesh",
            "sql": "select count ( artist.* ) where artist.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the names and number of works of all artists who have at least one English songs.",
        "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "I need to know the names of artists with at least one English Song",
            "sql": "select artist.artist_name where song.languages = value group_by song.artist_name having count ( * ) > = value"
        },
        {
            "utterance": "What is the country of origin of artists with at least one English song",
            "sql": "select artist.country where song.languages = value group_by artist.artist_name having count ( * ) > = value"
        },
        {
            "utterance": "What is the gender of artists with at least one English song ?",
            "sql": "select artist.gender where song.languages = value group_by artist.artist_name having count ( * ) > = value"
        },
        {
            "utterance": "What is the rating of artists with at least one English song ?",
            "sql": "select song.rating where song.languages = value group_by artist.artist_name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 31,
    "final": {
        "utterance": "List the name and gender for all artists who released songs in March.",
        "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
    },
    "interaction": [
        {
            "utterance": "How many artist are there ?",
            "sql": "select count ( artist.artist_name )"
        },
        {
            "utterance": "Can you list all songs that were released in March ? | Do you mean the songs name ? | Yes",
            "sql": "select song.song_name where song.releasedate like value"
        },
        {
            "utterance": "Can you include the artist names and their genders too ?",
            "sql": "select artist.artist_name , artist.gender , song.song_name where song.releasedate like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"
    },
    "interaction": [
        {
            "utterance": "What is the lowest duration of songs that have mp3 format and resolution below 800 ?",
            "sql": "select min ( files.duration ) where files.formats = value and song.resolution < value"
        },
        {
            "utterance": "What is the highest duration of songs that have mp3 format and resolution below 800 ?",
            "sql": "select max ( files.duration ) where files.formats = value and song.resolution < value"
        },
        {
            "utterance": "What is the average duration of songs that have mp3 format and resolution below 800 ?",
            "sql": "select avg ( files.duration ) where files.formats = value and song.resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\""
    },
    "interaction": [
        {
            "utterance": "can you how me a list of artists ?",
            "sql": "select artist.artist_name"
        },
        {
            "utterance": "can you show me their ratings ?",
            "sql": "select song.artist_name , song.rating"
        },
        {
            "utterance": "can you show me song 's language ?",
            "sql": "select song.song_name , song.languages"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "Return the names of songs for which the format is mp3 and resolution is below 1000 .",
            "sql": "select song.song_name where files.formats = value intersect select song.song_name where song.resolution < value"
        },
        {
            "utterance": "Please also show me names of songs for which the format is mp3 and resolution is above 1000 . | Do you mean the names of songs for which the format is mp3 ? | Yes",
            "sql": "select song.song_name where files.formats = value"
        },
        {
            "utterance": "What is the resolution for song name `` Just beat it '' ?",
            "sql": "select song.resolution where song.song_name = value"
        },
        {
            "utterance": "Please show me the names of songs for which the format is mp4 and resolution is below 1000 .",
            "sql": "select song.song_name where files.formats = value intersect select song.song_name where song.resolution < value"
        },
        {
            "utterance": "Can you show me the resolution for song name `` Aj ei Akash '' ?",
            "sql": "select song.resolution where song.song_name = value"
        },
        {
            "utterance": "Can you please show me the song name with highest resolution ?",
            "sql": "select song.song_name order_by song.resolution desc limit_value"
        },
        {
            "utterance": "And what was the resolution for this song name ?",
            "sql": "select song.resolution where song.song_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What is the id of the longest song?",
        "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the ID of the longest song , please ?",
            "sql": "select files.f_id order_by files.duration desc limit_value"
        },
        {
            "utterance": "What is the artist name of that song ?",
            "sql": "select files.artist_name order_by files.duration desc limit_value"
        },
        {
            "utterance": "What is the duration of that song ?",
            "sql": "select files.duration order_by files.duration desc limit_value"
        },
        {
            "utterance": "What about the shortest song ?",
            "sql": "select files.duration order_by files.duration limit_value"
        },
        {
            "utterance": "What is the average duration of all songs ?",
            "sql": "select avg ( files.duration )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "how many file ids ?",
            "sql": "select count ( distinct files.f_id )"
        },
        {
            "utterance": "what is country for Shrikanta ?",
            "sql": "select song.country where files.artist_name = value"
        },
        {
            "utterance": "who is highest rating ?",
            "sql": "select song.artist_name order_by song.rating desc limit_value"
        },
        {
            "utterance": "what is languages for Prity and genre ? | Do you mean the song with the artist name Prity ? | yes",
            "sql": "select song.languages , song.genre_is where song.artist_name = value"
        },
        {
            "utterance": "find the file size for Farida ?",
            "sql": "select files.file_size where files.artist_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"
    },
    "interaction": [
        {
            "utterance": "what is the duration of the longest song grouped by genre ?",
            "sql": "select max ( files.duration ) , song.genre_is group_by song.genre_is"
        },
        {
            "utterance": "How about the shortest ?",
            "sql": "select min ( files.duration ) , song.genre_is group_by song.genre_is"
        },
        {
            "utterance": "Can you order them by genre ?",
            "sql": "select min ( files.duration ) , song.genre_is group_by song.genre_is order_by song.genre_is"
        },
        {
            "utterance": "Can you also show me the lowest rating of songs for each genre ? | do you want to order them by genre as well ? | Yes please",
            "sql": "select min ( files.duration ) , min ( song.rating ) , song.genre_is group_by song.genre_is order_by song.genre_is"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 0,
    "final": {
        "utterance": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Please list each gender code with its corresponding amount of guests and sort it in descending order by that count ?",
            "sql": "select guests.gender_code , count ( guests.* ) group_by guests.gender_code order_by count ( guests.* ) desc"
        },
        {
            "utterance": "What are the full names of all the people with unknown genders ?",
            "sql": "select guests.guest_first_name , guests.guest_last_name where guests.gender_code = value"
        },
        {
            "utterance": "What were their birth dates ?",
            "sql": "select guests.date_of_birth where guests.gender_code = value"
        },
        {
            "utterance": "What are the birth dates of all guests with the letter M in their first or last name ?",
            "sql": "select guests.date_of_birth where guests.guest_first_name like value or guests.guest_last_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
        "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "What are the first names of all guest with apartment booking status `` Confirmed '' ?",
            "sql": "select guests.guest_first_name where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "And how about their last names ?",
            "sql": "select guests.guest_last_name where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "And what about guests with `` Provisional '' status ?",
            "sql": "select guests.guest_last_name where apartment_bookings.booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the facility codes of apartments with more than 4 bedrooms.",
        "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    "interaction": [
        {
            "utterance": "Can you list all of the apartments with more than 4 bedrooms ? | do you mean the apartment ids of apartments with more than 4 bedrooms ? | Yes , please ! I believe that 's the only discrete identifier of the apartments ( at least that I can see ) ...",
            "sql": "select apartments.apt_id where apartments.bedroom_count > value"
        },
        {
            "utterance": "Thank you ! Can you list the facility codes for each of those apartment IDs ( 3 4 6 11 12 13 15 ) ?",
            "sql": "select apartment_facilities.facility_code where apartments.bedroom_count > value"
        },
        {
            "utterance": "Can you please list the 'building id ' , 'apartment type code ' and 'apartment number ' for all apartment IDs with more than 4 bedrooms ?",
            "sql": "select apartments.building_id , apartments.apt_type_code , apartments.apt_number where apartments.bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 3,
    "final": {
        "utterance": "How many apartments do not have any facility?",
        "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
    },
    "interaction": [
        {
            "utterance": "How many apartments are there ?",
            "sql": "select count ( apartments.* )"
        },
        {
            "utterance": "How many different facilities are there ?",
            "sql": "select count ( apartment_facilities.* )"
        },
        {
            "utterance": "Can you list the different facilities ?",
            "sql": "select apartment_facilities.*"
        },
        {
            "utterance": "How many apartments have facilities ?",
            "sql": "select count ( apartments.* ) where apartments.apt_id in ( select apartment_facilities.apt_id )"
        },
        {
            "utterance": "How many apartments have no facilities ?",
            "sql": "select count ( apartments.* ) where apartments.apt_id not in ( select apartment_facilities.apt_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "Show me the addresses of the buildings .",
            "sql": "select apartment_buildings.building_address"
        },
        {
            "utterance": "Any of those have apartments with more than 1 bedrooms ? | Sorry , do you want me to list apartments with more than 1 bedrooms ? | Yes",
            "sql": "select apartment_buildings.building_address where apartments.bedroom_count > value"
        },
        {
            "utterance": "How about more than 2 bathrooms ?",
            "sql": "select apartment_buildings.building_address where apartments.bathroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What about the code with the least rooms ?",
            "sql": "select apartments.apt_type_code order_by apartments.room_count limit_value"
        },
        {
            "utterance": "What is the building ID with apartment Suite 645 ?",
            "sql": "select apartments.building_id where apartments.apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
    },
    "interaction": [
        {
            "utterance": "what is the building id for the apt number suite 645",
            "sql": "select apartments.building_id where apartments.apt_number = value"
        },
        {
            "utterance": "what is the bathroom count and bedroom count of the apartment number suite 645 ?",
            "sql": "select apartments.bathroom_count , apartments.bedroom_count where apartments.apt_number = value"
        },
        {
            "utterance": "what is the room count in the building 624 ?",
            "sql": "select apartments.room_count where apartments.building_id = value"
        },
        {
            "utterance": "what is minimum and maximum number of bathrooms and bedrooms of all the apartments ?",
            "sql": "select min ( apartments.bathroom_count ) , max ( apartments.bathroom_count ) , min ( apartments.bedroom_count ) , max ( apartments.bedroom_count )"
        },
        {
            "utterance": "what is the building_id of the apartment apt.908 ?",
            "sql": "select apartments.building_id where apartments.apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "how many apartments have bookings with status code `` confirmed '' ?",
            "sql": "select count ( * ) where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "show me the apartment type for the 7 apartments",
            "sql": "select apartments.apt_type_code where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "what are the apartment numbers for those 7 ?",
            "sql": "select distinct apartments.apt_number where apartment_bookings.booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the most common apartment type code.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many different types of apartments are there ?",
            "sql": "select count ( distinct apartments.apt_type_code )"
        },
        {
            "utterance": "what are they ?",
            "sql": "select distinct apartments.apt_type_code"
        },
        {
            "utterance": "Great ! how many apartments does each of them have ?",
            "sql": "select count ( apartments.* ) , apartments.apt_type_code group_by apartments.apt_type_code"
        },
        {
            "utterance": "could you please show their names as well ? | Do you mean the apartment type code ? | yes !",
            "sql": "select apartments.apt_type_code , count ( apartments.* ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "ok , which of them is the most common one ?",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by count ( apartments.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "What are the booking start and end dates of the apartments with more than 2 bedrooms ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.bedroom_count > value"
        },
        {
            "utterance": "What are the dates for apartment 585 ? | Did you mean the booking start and end dates of the apartments with id 585 ? | Yes",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.apt_number = value"
        },
        {
            "utterance": "Okay , what are the dates for the apartment in building 225 ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.building_id = value"
        },
        {
            "utterance": "What are the apartment numbers of all apartments with more than 2 bedrooms ?",
            "sql": "select apartments.apt_number where apartments.bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    "interaction": [
        {
            "utterance": "What is the booking status of the apartment with number `` Suite 634 '' ?",
            "sql": "select apartment_bookings.booking_status_code where apartments.apt_number = value"
        },
        {
            "utterance": "What is the bathroom count for `` Suite 643 '' ?",
            "sql": "select apartments.bathroom_count where apartments.apt_number = value"
        },
        {
            "utterance": "What is the apartment type code for `` Suite 643 '' ?",
            "sql": "select apartments.apt_type_code where apartments.apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the apartment number with the largest number of bedrooms.",
        "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the number of the apartment with the greatest number of bedrooms ?",
            "sql": "select apartments.apt_number order_by apartments.bedroom_count desc limit_value"
        },
        {
            "utterance": "What is the number of the apartment with the least number of bedrooms ?",
            "sql": "select apartments.apt_number order_by apartments.bedroom_count limit_value"
        },
        {
            "utterance": "What is the apartment type code of the apartment with the greatest number of bathrooms ?",
            "sql": "select apartments.apt_type_code order_by apartments.bathroom_count desc limit_value"
        },
        {
            "utterance": "How many rooms does that apartment have , and what is the number of that apartment ?",
            "sql": "select apartments.room_count , apartments.apt_number order_by apartments.bathroom_count desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "How many different apartment building are there ?",
            "sql": "select count ( distinct apartment_buildings.building_id )"
        },
        {
            "utterance": "How many of those apartment building are managed by Kyle ?",
            "sql": "select count ( * ) where apartment_buildings.building_manager = value"
        },
        {
            "utterance": "How many apartment type codes are there ?",
            "sql": "select count ( distinct apartments.apt_type_code )"
        },
        {
            "utterance": "Show the apartment types codes in buildings managed by Kyle ?",
            "sql": "select apartments.apt_type_code where apartment_buildings.building_manager = value"
        },
        {
            "utterance": "Show the apartment numbers in the buildings managed by Kyle .",
            "sql": "select apartments.apt_number where apartment_buildings.building_manager = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""
    },
    "interaction": [
        {
            "utterance": "how many rooms are available in the apartment with short name columbus square",
            "sql": "select sum ( apartments.room_count ) where apartment_buildings.building_short_name = value"
        },
        {
            "utterance": "how many bathrooms are there in these 2 rooms | Did you mean the number of bathrooms in the apartment with id is 2 ? | yes , thanks",
            "sql": "select apartments.bathroom_count where apartments.apt_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the building full names that contain the word \"court\"?",
        "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    "interaction": [
        {
            "utterance": "What are the building short name of building id 133 ?",
            "sql": "select apartment_buildings.building_short_name where apartment_buildings.building_id = value"
        },
        {
            "utterance": "Who is building manager of Mercedes House ?",
            "sql": "select apartment_buildings.building_manager where apartment_buildings.building_full_name = value"
        },
        {
            "utterance": "Find the building address of building manager Melyssa .",
            "sql": "select apartment_buildings.building_address where apartment_buildings.building_manager = value"
        },
        {
            "utterance": "What are the building full names that contain the word `` court '' ?",
            "sql": "select apartment_buildings.building_full_name where apartment_buildings.building_full_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many apartments are there ?",
            "sql": "select count ( apartments.* )"
        },
        {
            "utterance": "Which apartments has the largest number of total rooms ? | what attribute did you want me to return for the apartment with the largest number of total rooms ? the apartment type code ? | The apt ID first .",
            "sql": "select apartments.apt_id group_by apartments.apt_id order_by sum ( apartments.room_count ) desc limit_value"
        },
        {
            "utterance": "Now what is the apartment type code of that apartment .",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by sum ( apartments.room_count ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "Can you show me the numbers of the apartments ?",
            "sql": "select count ( apartments.* )"
        },
        {
            "utterance": "Of those apartments , which ones have more than 2 bedrooms ?",
            "sql": "select count ( * ) where apartments.bedroom_count > value"
        },
        {
            "utterance": "Can you provide the booking start dates and end dates , for all the apartments with more than 2 bedrooms ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many different Apartment Type Codes are there ?",
            "sql": "select count ( apartments.apt_type_code )"
        },
        {
            "utterance": "Can you provide me with the most common apartment type code among all of the apartments with at least 1 bathroom ?",
            "sql": "select apartments.apt_type_code where apartments.bathroom_count > = value group_by apartments.apt_type_code order_by count ( apartments.* ) desc limit_value"
        },
        {
            "utterance": "Can you list all apartment IDs with `` Flat '' as the apartment type ?",
            "sql": "select apartments.apt_id where apartments.apt_type_code = value"
        },
        {
            "utterance": "Thank you ! Can you update that list to include the building ID for each of those apartment IDs ?",
            "sql": "select apartments.building_id , apartments.apt_id where apartments.apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list the apartment type code for each entry ?",
            "sql": "select apartments.apt_type_code"
        },
        {
            "utterance": "Can you add to the table the room count for each entry ?",
            "sql": "select apartments.apt_type_code , apartments.room_count"
        },
        {
            "utterance": "Can you find the entries with the highest room count and only keep those in the table ? | And still return the apartment type code and the room count ? | Yes , only for those entries with the highest room count .",
            "sql": "select apartments.apt_type_code , apartments.room_count order_by apartments.room_count desc limit_value"
        },
        {
            "utterance": "Sorry , I think I misunderstood the question . Can you display only the apartment type codes again for each entry ?",
            "sql": "select apartments.apt_type_code"
        },
        {
            "utterance": "Can you add up the room counts for each distinct apartment type code and display those values along with their respective department type codes ?",
            "sql": "select apartments.apt_type_code , sum ( apartments.room_count ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "Amazing ! Can you do add up the bathroom counts and bedroom counts for the department type Flat and add those to the table ?",
            "sql": "select apartments.apt_type_code , sum ( apartments.room_count ) , sum ( apartments.bathroom_count ) , sum ( apartments.bedroom_count ) where apartments.apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "How many apartments in this table ?",
            "sql": "select count ( apartments.* )"
        },
        {
            "utterance": "How many flats in this table ? | Do you mean the number of apartments whose type code is Flat ? | Yes .",
            "sql": "select count ( apartments.* ) where apartments.apt_type_code = value"
        },
        {
            "utterance": "What is the number of apartments whose type code is studio ?",
            "sql": "select count ( apartments.* ) where apartments.apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 20,
    "final": {
        "utterance": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    "interaction": [
        {
            "utterance": "How many bathroom count those building 809 has ? | The total number of bathrooms building 809 has is NULL . | How about building 808 ?",
            "sql": "select sum ( apartments.bathroom_count ) where apartments.building_id = value"
        },
        {
            "utterance": "How about the total number of rooms it has ?",
            "sql": "select sum ( apartments.room_count ) where apartments.building_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""
    },
    "interaction": [
        {
            "utterance": "What building has a gym ? | Do you mean the building ids of buildings with apartments that have gyms ? | Yes please .",
            "sql": "select apartments.building_id where apartment_facilities.facility_code = value"
        },
        {
            "utterance": "How many bathrooms are there in those buildings ?",
            "sql": "select sum ( apartments.bathroom_count ) where apartment_facilities.facility_code = value"
        },
        {
            "utterance": "How many bedrooms are there in those buildings ?",
            "sql": "select sum ( apartments.bedroom_count ) where apartment_facilities.facility_code = value"
        },
        {
            "utterance": "What is the total number of rooms in those buildings ?",
            "sql": "select sum ( apartments.room_count ) where apartment_facilities.facility_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    "interaction": [
        {
            "utterance": "Please show me all the information about each apartment",
            "sql": "select apartments.*"
        },
        {
            "utterance": "Now just the info for Suite 634",
            "sql": "select * where apartments.apt_number = value"
        },
        {
            "utterance": "and now just show the booking status code for that suite",
            "sql": "select apartment_bookings.booking_status_code where apartments.apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the building full names that contain the word \"court\"?",
        "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    "interaction": [
        {
            "utterance": "Which buildings are in a studio ?",
            "sql": "select apartment_buildings.building_full_name where apartment_buildings.building_description = value"
        },
        {
            "utterance": "What are their managers ?",
            "sql": "select apartment_buildings.building_manager where apartment_buildings.building_description = value"
        },
        {
            "utterance": "Which of the building full names have the word `` court '' in it ?",
            "sql": "select apartment_buildings.building_full_name where apartment_buildings.building_full_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 24,
    "final": {
        "utterance": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "What dates are these apartments booked for ?",
            "sql": "select apartments.apt_number , apartment_bookings.booking_start_date , apartment_bookings.booking_end_date where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "How many of these apartments have 3 bedrooms ?",
            "sql": "select count ( apartments.* ) where apartments.apt_number in ( select distinct apartments.apt_number where apartment_bookings.booking_status_code = value ) and apartments.bedroom_count = value"
        },
        {
            "utterance": "How many bathrooms are in each of these apartments ?",
            "sql": "select apartments.bathroom_count where apartments.apt_number in ( select distinct apartments.apt_number where apartment_bookings.booking_status_code = value ) and apartments.bedroom_count = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
    },
    "interaction": [
        {
            "utterance": "How many rooms are in the apartment number suite 645 ?",
            "sql": "select count ( apartments.* ) where apartments.apt_number = value"
        },
        {
            "utterance": "What is the building id of apartment Apt 585 ?",
            "sql": "select apartments.building_id where apartments.apt_number = value"
        },
        {
            "utterance": "What is the minimum and maximum number of bathrooms of all the departments ?",
            "sql": "select min ( apartments.bathroom_count ) , max ( apartments.bathroom_count )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 26,
    "final": {
        "utterance": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""
    },
    "interaction": [
        {
            "utterance": "Hello . What are the IDs of guests with gender code Female ?",
            "sql": "select guests.guest_id where guests.gender_code = value"
        },
        {
            "utterance": "Show me the start dates of apartment bookings by these IDs please .",
            "sql": "select apartment_bookings.booking_start_date where guests.gender_code = value"
        },
        {
            "utterance": "Show me the start dates and end dates of apartment bookings by these IDs please .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_end_date where guests.gender_code = value"
        },
        {
            "utterance": "Can you give me the apartment ids for the same list ?",
            "sql": "select apartment_bookings.apt_id where guests.gender_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 27,
    "final": {
        "utterance": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    "interaction": [
        {
            "utterance": "Hi - can you please tell me the average room count of all Provisional bookings ?",
            "sql": "select avg ( apartments.room_count ) where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "Great - can you list all apartments with more than one bathroom and more than three bedrooms ?",
            "sql": "select apartments.* where apartments.bathroom_count > value and apartments.bedroom_count > value"
        },
        {
            "utterance": "Which apartment has the most bedrooms ?",
            "sql": "select apartments.* order_by apartments.bedroom_count desc limit_value"
        },
        {
            "utterance": "OK - what was the total number of bookings in 2016 ?",
            "sql": "select count ( apartment_bookings.* ) where apartment_bookings.booking_start_date like value"
        },
        {
            "utterance": "How many of those bookings were studio apartments ?",
            "sql": "select count ( * ) where apartment_bookings.booking_start_date like value and apartments.apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you show me the top 3 highest room counts ?",
            "sql": "select apartments.room_count order_by apartments.room_count desc limit_value"
        },
        {
            "utterance": "For each apartment , can you tell me the average of the bedroom count , bathroom count , and room count ? | Do you mean for each apartment type , find the average of the bedroom count , bathroom count , and room count ? | yes",
            "sql": "select apartments.apt_type_code , avg ( apartments.bathroom_count ) , avg ( apartments.bedroom_count ) , avg ( apartments.room_count ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "Can you tell me the average number of rooms for each apartment type code ?",
            "sql": "select apartments.apt_type_code , avg ( apartments.room_count ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "Can you sort them in descending order ?",
            "sql": "select apartments.apt_type_code , avg ( apartments.room_count ) group_by apartments.apt_type_code order_by avg ( apartments.room_count ) desc"
        },
        {
            "utterance": "Can you show me just the apartment type codes of the top 3 ?",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by avg ( apartments.room_count ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 29,
    "final": {
        "utterance": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the apartment type codes ?",
            "sql": "select apartments.apt_type_code"
        },
        {
            "utterance": "What are the Maximum rooms for each Apartment type code ?",
            "sql": "select apartments.apt_type_code , max ( apartments.room_count ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "What are the Minimum rooms for each Apartment type code ?",
            "sql": "select apartments.apt_type_code , min ( apartments.room_count ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "What is the Apartment type code of building id 808 ?",
            "sql": "select apartments.apt_type_code where apartments.building_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 30,
    "final": {
        "utterance": "Show the facility codes of apartments with more than 4 bedrooms.",
        "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    "interaction": [
        {
            "utterance": "What are the facility codes of all the apartments that have more than 4 bedrooms ?",
            "sql": "select apartment_facilities.facility_code where apartments.bedroom_count > value"
        },
        {
            "utterance": "What are the apartment numbers of those ?",
            "sql": "select apartments.apt_number where apartments.bedroom_count > value"
        },
        {
            "utterance": "How many bathrooms do each of those have ?",
            "sql": "select apartments.bathroom_count where apartments.bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the total grant amount of the organisations described as research?",
        "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'"
    },
    "interaction": [
        {
            "utterance": "What is the total grant amount of the organizations described as research ?",
            "sql": "select sum ( grants.grant_amount ) where organisation_types.organisation_type_description = value"
        },
        {
            "utterance": "What is the grant start date of the organizations described as research ?",
            "sql": "select grants.grant_start_date where organisation_types.organisation_type_description = value"
        },
        {
            "utterance": "Show me organization ids for organizations described as research",
            "sql": "select grants.organisation_id where organisation_types.organisation_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 1,
    "final": {
        "utterance": "Which document type is described with the prefix 'Initial'?",
        "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"
    },
    "interaction": [
        {
            "utterance": "Which of the document is described with the prefix initial ? | Document with type code APP is described with the prefix initial . | Whats is APP document description ?",
            "sql": "select document_types.document_description where document_types.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 2,
    "final": {
        "utterance": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"
    },
    "interaction": [
        {
            "utterance": "list the organisation type",
            "sql": "select organisation_types.organisation_type"
        },
        {
            "utterance": "how much grant amount in organisation id 10",
            "sql": "select count ( grants.grant_id ) where grants.organisation_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the result description of the project whose detail is 'sint'?",
        "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'"
    },
    "interaction": [
        {
            "utterance": "What are the result descriptions of the project whose detail is `` sint '' ?",
            "sql": "select research_outcomes.outcome_description where projects.project_details = value"
        },
        {
            "utterance": "What are the project details of all of those project ids ?",
            "sql": "select project_outcomes.project_id , projects.project_details where project_outcomes.outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the role description of the project staff involved in the most number of project outcomes ?",
            "sql": "select staff_roles.role_description group_by project_staff.staff_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show the staff ids of the project staff involved in the most number of project outcomes ?",
            "sql": "select project_staff.staff_id group_by project_staff.staff_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are the project ids that staff member worked on ?",
            "sql": "select project_staff.project_id where project_staff.staff_id = value"
        },
        {
            "utterance": "What are the date from and date to of that project ?",
            "sql": "select project_staff.date_from , project_staff.date_to where project_staff.project_id = value"
        },
        {
            "utterance": "What is the outcome code for that project ?",
            "sql": "select project_outcomes.outcome_code where project_outcomes.project_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 5,
    "final": {
        "utterance": "Which organisation type hires most research staff?",
        "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "tell me the staff details of staff id 1 ?",
            "sql": "select research_staff.staff_details where research_staff.staff_id = value"
        },
        {
            "utterance": "Tell me the organization type of organisation_id 1 ?",
            "sql": "select organisations.organisation_type where organisations.organisation_id = value"
        },
        {
            "utterance": "Which organisation type hires most research staff ?",
            "sql": "select organisations.organisation_type group_by organisations.organisation_type order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 6,
    "final": {
        "utterance": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"
    },
    "interaction": [
        {
            "utterance": "What is the send date of document Id 2 ?",
            "sql": "select documents.sent_date where documents.document_id = value"
        },
        {
            "utterance": "What is the organisation details of Id 3 ? | Do you mean the organisation id of grant id 3 ? | yes",
            "sql": "select grants.organisation_id where grants.grant_id = value"
        },
        {
            "utterance": "What is the grant end date of grant id 3 ?",
            "sql": "select grants.grant_end_date where grants.grant_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the organisation ids and details of the organisations which are involved in",
        "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000"
    },
    "interaction": [
        {
            "utterance": "What is the organisation ID of the organisation with grant amount of 4094.542 ? ?",
            "sql": "select grants.organisation_id where grants.grant_amount = value"
        },
        {
            "utterance": "What is its grant start date ?",
            "sql": "select grants.grant_start_date where grants.grant_amount = value"
        },
        {
            "utterance": "What about its end date ?",
            "sql": "select grants.grant_end_date where grants.grant_amount = value"
        },
        {
            "utterance": "What is the grant amount of the organisation with the id 14 ?",
            "sql": "select grants.grant_amount where grants.organisation_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 8,
    "final": {
        "utterance": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'"
    },
    "interaction": [
        {
            "utterance": "Which grants are described as 'regular ' ?",
            "sql": "select * where document_types.document_description = value"
        },
        {
            "utterance": "Which grants are described both 'regular ' and 'initial application ' ?",
            "sql": "select * where document_types.document_description = value intersect select * where document_types.document_description = value"
        },
        {
            "utterance": "Can you show me the start date for all these grants ?",
            "sql": "select grants.grant_start_date where document_types.document_description = value intersect select grants.grant_start_date where document_types.document_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 9,
    "final": {
        "utterance": "Which document type is described with the prefix 'Initial'?",
        "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"
    },
    "interaction": [
        {
            "utterance": "Can you list all document descriptions that contain the word `` Initial '' ?",
            "sql": "select document_types.document_description where document_types.document_description like value"
        },
        {
            "utterance": "Can you list the document type code associated with that document description ?",
            "sql": "select document_types.document_type_code where document_types.document_description like value"
        },
        {
            "utterance": "Are there any other document type codes associated with a description that contains the word `` initial '' ?",
            "sql": "select document_types.document_type_code where document_types.document_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 10,
    "final": {
        "utterance": "Which role is most common for the staff?",
        "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Which roll code on this list is the most common ?",
            "sql": "select project_staff.role_code group_by project_staff.role_code order_by count ( project_staff.* ) desc limit_value"
        },
        {
            "utterance": "Great ! Can you tell me how many instances of role code `` researcher '' there are ?",
            "sql": "select count ( project_staff.* ) where project_staff.role_code = value"
        },
        {
            "utterance": "Excellent ! Can you now list for me all of the staff IDs that have researcher as their role code ?",
            "sql": "select project_staff.staff_id where project_staff.role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 11,
    "final": {
        "utterance": "How many documents can one grant have at most? List the grant id and number.",
        "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What were the dates that APP sent their grants ?",
            "sql": "select documents.sent_date where documents.document_type_code = value"
        },
        {
            "utterance": "Ah . And how many grants can APP have total ?",
            "sql": "select count ( documents.grant_id ) where documents.document_type_code = value"
        },
        {
            "utterance": "No , I mean what is the maximum number of grants that APP can have ?",
            "sql": "select max ( documents.grant_id ) where documents.document_type_code = value"
        },
        {
            "utterance": "I see . Can you list the id and number for every grand that APP has ?",
            "sql": "select documents.grant_id where documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the organisation type description of the organisation detailed as 'quo'.",
        "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'"
    },
    "interaction": [
        {
            "utterance": "What type of organizations are there ?",
            "sql": "select organisation_types.organisation_type"
        },
        {
            "utterance": "And what is the organization ids detailed as `` quo '' ?",
            "sql": "select organisations.organisation_id where organisations.organisation_details = value"
        },
        {
            "utterance": "And what is this organization 's type ?",
            "sql": "select organisation_types.organisation_type where organisations.organisation_details = value"
        },
        {
            "utterance": "And what is the total number of RES organizations ?",
            "sql": "select count ( organisations.* ) where organisations.organisation_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 13,
    "final": {
        "utterance": "List the project details of the projects which did not hire any staff for a researcher role.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )"
    },
    "interaction": [
        {
            "utterance": "How many projects are there ?",
            "sql": "select count ( projects.* )"
        },
        {
            "utterance": "How many of those projects did not hire anyone for a researcher role ?",
            "sql": "select count ( projects.project_id ) where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        },
        {
            "utterance": "What are the details of those projects ?",
            "sql": "select projects.project_details where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the number of research staff in each organisation ?",
            "sql": "select research_staff.employer_organisation_id , count ( research_staff.* ) group_by research_staff.employer_organisation_id"
        },
        {
            "utterance": "What is the organisation type for each organisation ?",
            "sql": "select organisations.organisation_type"
        },
        {
            "utterance": "Who are the staff for the organisation with id 5 ? | Do you mean the id of the staffs for orginisation with id 5 ? | Yes , that would be fine .",
            "sql": "select research_staff.staff_id where research_staff.employer_organisation_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 15,
    "final": {
        "utterance": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which organization hired the most research staff ?",
            "sql": "select * group_by organisations.organisation_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you give me just the organization id ?",
            "sql": "select organisations.organisation_id group_by organisations.organisation_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "great , can you give me the organization type and detail too ?",
            "sql": "select organisations.organisation_id , organisations.organisation_type , organisations.organisation_details group_by organisations.organisation_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 16,
    "final": {
        "utterance": "Which projects have no outcome? List the project details.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )"
    },
    "interaction": [
        {
            "utterance": "Project details of project ID 1 ?",
            "sql": "select projects.project_details where projects.project_id = value"
        },
        {
            "utterance": "Which project have no outcome ? | so what would you want to know about the project have no outcome | List the project details of above ?",
            "sql": "select projects.project_details where projects.project_id not in ( select project_outcomes.project_id )"
        },
        {
            "utterance": "Organisation ID of project ID 2 ?",
            "sql": "select projects.organisation_id where projects.project_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 17,
    "final": {
        "utterance": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'"
    },
    "interaction": [
        {
            "utterance": "show the outcome code in the Table Name : Project Outcomes",
            "sql": "select distinct project_outcomes.outcome_code"
        },
        {
            "utterance": "Show the outcome description of the Table Name : Research Outcomes",
            "sql": "select research_outcomes.outcome_description"
        },
        {
            "utterance": "Show the project details of the Table Name : Projects",
            "sql": "select projects.project_details"
        },
        {
            "utterance": "Show the outcome details of the Table Name : Project Outcomes",
            "sql": "select project_outcomes.outcome_details"
        },
        {
            "utterance": "List the project details of the projects with the research outcome described with substring 'published ' .",
            "sql": "select projects.project_details where research_outcomes.outcome_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "For the documents with the description `` Regular '' , what are all of their response received dates ?",
            "sql": "select documents.response_received_date where document_types.document_description = value"
        },
        {
            "utterance": "What are the grant amounts for those ?",
            "sql": "select grants.grant_amount where document_types.document_description = value"
        },
        {
            "utterance": "Can you find the response received dates for all grants that were over 100 ?",
            "sql": "select documents.response_received_date where grants.grant_amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 19,
    "final": {
        "utterance": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details"
    },
    "interaction": [
        {
            "utterance": "Give me the details of the organizations described as `` Sponsor '' in alphabetical order",
            "sql": "select organisations.organisation_details where organisation_types.organisation_type_description = value order_by organisations.organisation_details"
        },
        {
            "utterance": "What about their IDs ?",
            "sql": "select organisations.organisation_id where organisation_types.organisation_type_description = value order_by organisations.organisation_details"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( organisations.organisation_id ) where organisation_types.organisation_type_description = value order_by organisations.organisation_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 20,
    "final": {
        "utterance": "List the project details of the projects launched by the organisation",
        "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )"
    },
    "interaction": [
        {
            "utterance": "Could you list the project details of the projects launched by the most popular organization ?",
            "sql": "select projects.project_details where projects.organisation_id in ( select projects.organisation_id group_by projects.organisation_id order_by count ( projects.* ) desc limit_value )"
        },
        {
            "utterance": "What are the ids of those ?",
            "sql": "select projects.project_id where projects.organisation_id in ( select projects.organisation_id group_by projects.organisation_id order_by count ( projects.* ) desc limit_value )"
        },
        {
            "utterance": "What are their organization ids ?",
            "sql": "select projects.organisation_id group_by projects.organisation_id order_by count ( projects.* ) desc limit_value"
        },
        {
            "utterance": "Can you tell me the project details of the lowest numbered project id ?",
            "sql": "select projects.project_details order_by projects.project_id limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 21,
    "final": {
        "utterance": "List the organisation id with the maximum outcome count, and the count.",
        "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "give me the organization id then",
            "sql": "select projects.organisation_id group_by projects.organisation_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "give me its project details .",
            "sql": "select projects.organisation_id , projects.project_details group_by projects.organisation_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the outcome code ? | Whose outcome code do you want ? | for `deleniti",
            "sql": "select project_outcomes.outcome_code where projects.project_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 22,
    "final": {
        "utterance": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'"
    },
    "interaction": [
        {
            "utterance": "how many projects has stuff worked as leaders total ?",
            "sql": "select count ( distinct project_staff.project_id ) where project_staff.role_code = value"
        },
        {
            "utterance": "How about the number of projects they worked before 1989-04-24 23:51:54 ' ? | The total number of distinct projects that have some project staffs worked as a leader and worked before 1989-04-24 23:51:54 ' is 2 | What are other detail about those projects ?",
            "sql": "select project_staff.other_details where project_staff.role_code = value and project_staff.date_from < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 23,
    "final": {
        "utterance": "List the project details of the projects which did not hire any staff for a researcher role.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )"
    },
    "interaction": [
        {
            "utterance": "List out projects which did not hire staff for researcher role ?",
            "sql": "select projects.project_id where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        },
        {
            "utterance": "what is the role of the project id 5 ?",
            "sql": "select project_staff.role_code where project_staff.project_id = value"
        },
        {
            "utterance": "Can you tell me the role of project id 1 ?",
            "sql": "select project_staff.role_code where project_staff.project_id = value"
        },
        {
            "utterance": "List out projects which has staff for researcher role ?",
            "sql": "select project_staff.project_id where project_staff.role_code = value"
        },
        {
            "utterance": "Can you tell me the organization id for the project id 1 ?",
            "sql": "select projects.organisation_id where projects.project_id = value"
        },
        {
            "utterance": "can you tell me the staff id of the project which did not have researcher role ?",
            "sql": "select project_staff.staff_id where project_staff.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        },
        {
            "utterance": "tell me project details about the project id 1 ?",
            "sql": "select projects.project_details where projects.project_id = value"
        },
        {
            "utterance": "List out total number of projects which has no staff for researcher role ?",
            "sql": "select count ( projects.* ) where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        },
        {
            "utterance": "List the project details of the projects which did not hire any staff for a researcher role ?",
            "sql": "select projects.project_details where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the last date of the staff leaving the projects?",
        "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many project staff there",
            "sql": "select count ( project_staff.* )"
        },
        {
            "utterance": "what is the date from of staff id 779.0",
            "sql": "select project_staff.date_from where project_staff.staff_id = value"
        },
        {
            "utterance": "what is the role code of staff id 674810.0",
            "sql": "select project_staff.role_code where project_staff.staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "What are the response received dates for the documents described as 'Regular ' ?",
            "sql": "select documents.response_received_date where document_types.document_description = value"
        },
        {
            "utterance": "What are the response received dates for the documents with a grant amount more than 100 ?",
            "sql": "select documents.response_received_date where grants.grant_amount > value"
        },
        {
            "utterance": "How many documents have the document description `` Initial Application '' ?",
            "sql": "select count ( * ) where document_types.document_description = value"
        },
        {
            "utterance": "Can you list all of the grant start dates of those documents please ?",
            "sql": "select grants.grant_start_date where document_types.document_description = value"
        },
        {
            "utterance": "What are the grant amounts of those ?",
            "sql": "select grants.grant_amount where document_types.document_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What projects are detailed as 'omnis ' ?",
            "sql": "select * where projects.project_details = value"
        },
        {
            "utterance": "How many of these have more than 2 outcomes ?",
            "sql": "select count ( * ) ( select projects.project_id where projects.project_details = value intersect select projects.project_id group_by projects.project_id having count ( * ) > value )"
        },
        {
            "utterance": "How many projects ( not labeled omnis ) have two or more outcomes ?",
            "sql": "select count ( projects.project_id ) group_by projects.project_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 27,
    "final": {
        "utterance": "When did the first staff for the projects started working?",
        "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many projects are there ?",
            "sql": "select count ( project_staff.project_id )"
        },
        {
            "utterance": "How many staff are there ?",
            "sql": "select count ( project_staff.staff_id )"
        },
        {
            "utterance": "What project has the most staff ?",
            "sql": "select project_staff.project_id group_by project_staff.project_id order_by count ( project_staff.staff_id ) desc limit_value"
        },
        {
            "utterance": "Which staff started the earliest ?",
            "sql": "select project_staff.staff_id order_by project_staff.date_from limit_value"
        },
        {
            "utterance": "When did they first start working on the projects ? | Do you mean the date when the staff with id 56.0 started the project ? | Yes .",
            "sql": "select project_staff.date_from where project_staff.staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the role description of the project staff involved in the most number of project outcomes",
            "sql": "select staff_roles.role_description group_by project_staff.staff_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show the role code of the project staff involved in the most number of project outcomes",
            "sql": "select staff_roles.role_code group_by project_staff.staff_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show me other details of the project staff involved in the most number of project outcomes",
            "sql": "select project_staff.other_details group_by project_staff.staff_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 29,
    "final": {
        "utterance": "Which project made the most number of outcomes? List the project details and the project id.",
        "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . can you tell me which product made the highest number of outcomes ? | What attributes of the product that made the highest number of outcomes would you like to know ? | I would like to know the most number of outcomes for all outcome codes",
            "sql": "select count ( project_outcomes.outcome_code ) group_by project_outcomes.outcome_code order_by count ( project_outcomes.outcome_code ) desc limit_value"
        },
        {
            "utterance": "can you give me the project ID ? | Sorry , what would you like the project id for ? | the project that had the highest number of outcomes",
            "sql": "select projects.project_id group_by projects.project_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "and can you please also give me the project details ?",
            "sql": "select projects.project_details , projects.project_id group_by projects.project_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 0,
    "final": {
        "utterance": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    "interaction": [
        {
            "utterance": "Can you show me all tracks which were opened after 2000 ? | Do you mean the names of all the tracks which were opened after 2000 ? | Yes .",
            "sql": "select track.name where track.year_opened > value"
        },
        {
            "utterance": "Hmm , I want to know the seatings for all the tracks opened after 2000 .",
            "sql": "select track.seating where track.year_opened > value"
        },
        {
            "utterance": "Please list the names and seatings for all the tracks opened after 2000 , ordered by seating .",
            "sql": "select track.name , track.seating where track.year_opened > value order_by track.seating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 1,
    "final": {
        "utterance": "List the race class with at least two races.",
        "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "can you show me names of races ?",
            "sql": "select race.name"
        },
        {
            "utterance": "what is the Mexico City 250 's date ?",
            "sql": "select race.date where race.name = value"
        },
        {
            "utterance": "can you show me class of race ?",
            "sql": "select race.class"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name, location and seating for the most recently opened track?",
        "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which was the most recently opened track ?",
            "sql": "select track.name order_by track.year_opened desc limit_value"
        },
        {
            "utterance": "What is the seating capacity for Chicagoland Speedway ?",
            "sql": "select track.seating where track.name = value"
        },
        {
            "utterance": "What is the location of the Chicagoland Speedway tract ?",
            "sql": "select track.location where track.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the race class with most number of races.",
        "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "give me the race class with the most number of races",
            "sql": "select race.class group_by race.class order_by count ( race.* ) desc limit_value"
        },
        {
            "utterance": "on what date is it ?",
            "sql": "select race.date where race.class = ( select race.class group_by race.class order_by count ( race.* ) desc limit_value )"
        },
        {
            "utterance": "list the race id",
            "sql": "select race.race_id where race.class = ( select race.class group_by race.class order_by count ( race.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all track names that have had no races.",
        "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"
    },
    "interaction": [
        {
            "utterance": "What are the names of those tracks ?",
            "sql": "select track.name where track.track_id not in ( select race.track_id )"
        },
        {
            "utterance": "Can you show me the location and year opened for these tracks ?",
            "sql": "select track.location , track.year_opened where track.track_id not in ( select race.track_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name of track with most number of races.",
        "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which track has the highest number of race ?",
            "sql": "select track.name group_by race.track_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "where is Auto Club Speedway located ?",
            "sql": "select track.location where track.name = value"
        },
        {
            "utterance": "where is Chicagoland Speedway located ?",
            "sql": "select track.location where track.name = value"
        },
        {
            "utterance": "how many seating does Chicagoland Speedway have ?",
            "sql": "select track.seating where track.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 6,
    "final": {
        "utterance": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    "interaction": [
        {
            "utterance": "Which tracks were opened after year 2000 ? | Here are the ids for tracks that were opened after year 2000 , including 2 and 6 . | What are their names ?",
            "sql": "select track.name where track.year_opened > value"
        },
        {
            "utterance": "And what are their seating capacity ?",
            "sql": "select track.name , track.seating where track.year_opened > value"
        },
        {
            "utterance": "Yes , what are their locations ?",
            "sql": "select track.name , track.location where track.year_opened > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name of track with most number of races.",
        "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "count the number of records for each track id | do you mean count the number of race ids for each track id ? | How about this -- list all track Ids",
            "sql": "select track.track_id"
        },
        {
            "utterance": "add a column for track name",
            "sql": "select track.track_id , track.name"
        },
        {
            "utterance": "add a column showing the total number of rows in the table race that contain each of the Track_IDs",
            "sql": "select track.track_id , track.name , count ( * ) group_by race.track_id"
        },
        {
            "utterance": "Filter the list to show only those rows with a number in the count column that is greater than 1",
            "sql": "select track.track_id , track.name , count ( * ) group_by race.track_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 0,
    "final": {
        "utterance": "List the name of film studio that have the most number of films.",
        "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hey there ! How 're you ! Can you provide me with a list of all of the different movie studios ?",
            "sql": "select distinct film.studio"
        },
        {
            "utterance": "Could you filter this list to show just the movie studio which has the largest number of movies ?",
            "sql": "select film.studio group_by film.studio order_by count ( film.* ) desc limit_value"
        },
        {
            "utterance": "Great ! Can you please provide me with the total number of films by 20th Century Fox ?",
            "sql": "select count ( film.* ) where film.studio = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""
    },
    "interaction": [
        {
            "utterance": "What is the average gross amount of money made in dollars ?",
            "sql": "select avg ( film.gross_in_dollar )"
        },
        {
            "utterance": "What films did Nicholas Meyer direct ?",
            "sql": "select film.title where film.director = value"
        },
        {
            "utterance": "What were those movies directed by Walter Hill ?",
            "sql": "select film.title where film.director = value"
        },
        {
            "utterance": "What studio produced that movie with name 48 Hrs ?",
            "sql": "select film.studio where film.title = value"
        },
        {
            "utterance": "What studio produced Star Trek II : The Wrath of Khan ?",
            "sql": "select film.studio where film.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the studios that have not produced films with director \"Walter Hill\".",
        "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""
    },
    "interaction": [
        {
            "utterance": "Who is the director of `` walter hill '' ? | do you mean which film is directed by the director of `` walter hill '' ? | yes .",
            "sql": "select film.title where film.director = value"
        },
        {
            "utterance": "Which studios have produced films with the director `` Walter Hill '' ?",
            "sql": "select film.studio where film.director = value"
        },
        {
            "utterance": "What about the ones that have n't ?",
            "sql": "select film.studio where film.director != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 3,
    "final": {
        "utterance": "List the title of films that do not have any market estimation.",
        "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
    },
    "interaction": [
        {
            "utterance": "Can you list the titles of the films without any market estimations ?",
            "sql": "select film.title where film.film_id not in ( select film_market_estimation.film_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the maximum and minimum number of cities in all markets.",
        "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"
    },
    "interaction": [
        {
            "utterance": "Find the number of cities in USA country ?",
            "sql": "select market.number_cities where market.country = value"
        },
        {
            "utterance": "How many country 's located in the world ?",
            "sql": "select count ( market.country )"
        },
        {
            "utterance": "What are the market id of china ?",
            "sql": "select market.market_id where market.country = value"
        },
        {
            "utterance": "What are the maximum and minimum number of cities in all markets .",
            "sql": "select max ( market.number_cities ) , min ( market.number_cities )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 5,
    "final": {
        "utterance": "List the title of films that do not have any market estimation.",
        "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
    },
    "interaction": [
        {
            "utterance": "How many films are there in total ?",
            "sql": "select count ( distinct film.title )"
        },
        {
            "utterance": "How many of those films do not have any market estimation ?",
            "sql": "select count ( film.title ) where film.film_id not in ( select film_market_estimation.film_id )"
        },
        {
            "utterance": "What about film IDs ? | Do you mean the film IDs of the 9 films that do not have market estimations ? | Yes , could you tell me those films ' IDs ?",
            "sql": "select film.film_id where film.film_id not in ( select film_market_estimation.film_id )"
        },
        {
            "utterance": "What are the titles of the films with those IDs ?",
            "sql": "select film.title where film.film_id in ( select film.film_id where film.film_id not in ( select film_market_estimation.film_id ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 6,
    "final": {
        "utterance": "List the studios which average gross is above 4500000.",
        "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000"
    },
    "interaction": [
        {
            "utterance": "Which studio has the highest gross ?",
            "sql": "select film.studio order_by film.gross_in_dollar desc limit_value"
        },
        {
            "utterance": "How many studios have average gross higher than 4500000",
            "sql": "select film.studio group_by film.studio having avg ( film.gross_in_dollar ) > = value"
        },
        {
            "utterance": "List them please",
            "sql": "select film.studio group_by film.studio having avg ( film.gross_in_dollar ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 7,
    "final": {
        "utterance": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC"
    },
    "interaction": [
        {
            "utterance": "please list the years of film market estimations in descending order .",
            "sql": "select film_market_estimation.year order_by film_market_estimation.year desc"
        },
        {
            "utterance": "please list the years of film market estimations from Japan .",
            "sql": "select film_market_estimation.year where market.country = value"
        },
        {
            "utterance": "please list the years of film market estimations when the market is in country `` Japan '' in descending order .",
            "sql": "select film_market_estimation.year where market.country = value order_by film_market_estimation.year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the distinct director of films with market estimation in the year of 1995.",
        "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995"
    },
    "interaction": [
        {
            "utterance": "Hello , which films where made in 1995 ?",
            "sql": "select * where film_market_estimation.year = value"
        },
        {
            "utterance": "Who was the distinct director of ET the Extra-Terrestrial ?",
            "sql": "select film.director where film.title = value"
        },
        {
            "utterance": "Can you show me Market estimation for the year 1995 ?",
            "sql": "select film_market_estimation.low_estimate , film_market_estimation.high_estimate where film_market_estimation.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the titles and directors of the films were never presented in China?",
        "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')"
    },
    "interaction": [
        {
            "utterance": "how many country participate in the market ?",
            "sql": "select count ( distinct market.country )"
        },
        {
            "utterance": "how many directors of the films never presented in china ?",
            "sql": "select count ( film.director ) where film.film_id not in ( select film.film_id where market.country = value )"
        },
        {
            "utterance": "how many titles were never presented in china ?",
            "sql": "select count ( film.title ) where film.film_id not in ( select film.film_id where market.country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the id of the product that was ordered the most often?",
        "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many order items there",
            "sql": "select count ( order_items.* )"
        },
        {
            "utterance": "how many order id from product id 7",
            "sql": "select count ( order_items.* ) where order_items.product_id = value"
        },
        {
            "utterance": "how many order id from order item id 2",
            "sql": "select count ( order_items.* ) where order_items.order_item_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 1,
    "final": {
        "utterance": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900"
    },
    "interaction": [
        {
            "utterance": "What are id and name of the products whose price is lower than 600 ?",
            "sql": "select products.product_id , products.product_name where products.product_price < value"
        },
        {
            "utterance": "What are id and name of the products whose price is higher than 900 ?",
            "sql": "select products.product_id , products.product_name where products.product_price > value"
        },
        {
            "utterance": "How many products have price lower than 600 or higher than 900 ?",
            "sql": "select count ( products.* ) where products.product_price < value or products.product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and address of the customers who have both New and Pending orders.",
        "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
    },
    "interaction": [
        {
            "utterance": "what is the name of the customer of customer code 401",
            "sql": "select customers.customer_name where customers.customer_code = value"
        },
        {
            "utterance": "what is address of the customer Ahmed ?",
            "sql": "select customers.customer_address where customers.customer_name = value"
        },
        {
            "utterance": "what is the address of the customer lukas ?",
            "sql": "select customers.customer_address where customers.customer_name = value"
        },
        {
            "utterance": "what is customer code of lukas ?",
            "sql": "select customers.customer_code where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 3,
    "final": {
        "utterance": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details"
    },
    "interaction": [
        {
            "utterance": "List the name of all suppliers in alphabetical order of their addresses .",
            "sql": "select suppliers.supplier_name order_by addresses.address_details"
        },
        {
            "utterance": "And their phone numbers ?",
            "sql": "select suppliers.supplier_phone order_by addresses.address_details"
        },
        {
            "utterance": "What states is Tesco located in ? | do you mean the address id or the address details ? | The address details .",
            "sql": "select addresses.address_details where suppliers.supplier_name = value"
        },
        {
            "utterance": "How about Lidl ?",
            "sql": "select addresses.address_details where suppliers.supplier_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the average amount purchased and value purchased for the supplier who supplies the most products.",
        "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are the average amount purchased and value purchased for the supplier who supplies the most products",
            "sql": "select avg ( product_suppliers.total_amount_purchased ) , avg ( product_suppliers.total_value_purchased ) where product_suppliers.supplier_id = ( select product_suppliers.supplier_id group_by product_suppliers.supplier_id order_by count ( product_suppliers.* ) desc limit_value )"
        },
        {
            "utterance": "How about for the supplier who supplies the least products ? | Did you want to get the supplier id who supplies the least products ? | I want the average amount purchased and value purchased for the supplier who supplies the least products",
            "sql": "select avg ( product_suppliers.total_amount_purchased ) , avg ( product_suppliers.total_value_purchased ) where product_suppliers.supplier_id = ( select product_suppliers.supplier_id group_by product_suppliers.supplier_id order_by count ( product_suppliers.* ) limit_value )"
        },
        {
            "utterance": "What is the supplier id who supplies the least products ?",
            "sql": "select distinct product_suppliers.supplier_id where product_suppliers.supplier_id = ( select product_suppliers.supplier_id group_by product_suppliers.supplier_id order_by count ( product_suppliers.* ) limit_value )"
        },
        {
            "utterance": "What is the total value purchased for supplier id 3",
            "sql": "select sum ( product_suppliers.total_value_purchased ) where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "What is the `` date supplied to '' of supplier id 3 ?",
            "sql": "select product_suppliers.date_supplied_to where product_suppliers.supplier_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"
    },
    "interaction": [
        {
            "utterance": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000",
            "sql": "select product_suppliers.supplier_id group_by product_suppliers.supplier_id having avg ( product_suppliers.total_amount_purchased ) > value or avg ( product_suppliers.total_amount_purchased ) < value"
        },
        {
            "utterance": "Which of those suppliers purchased less than 30000 ?",
            "sql": "select product_suppliers.supplier_id group_by product_suppliers.supplier_id having avg ( product_suppliers.total_amount_purchased ) < value"
        },
        {
            "utterance": "And how much was their average amount purchased for each product ?",
            "sql": "select product_suppliers.product_id , avg ( product_suppliers.total_amount_purchased ) group_by product_suppliers.product_id"
        },
        {
            "utterance": "What was their most recent date_supplied_to ?",
            "sql": "select product_suppliers.date_supplied_to order_by product_suppliers.date_supplied_to desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the id of the department with the least number of staff?",
        "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "who is the department manager ? | Do you want the ids of staffs who are department managers ? | yes",
            "sql": "select staff_department_assignments.staff_id where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "which department id has the least amount of staff ?",
            "sql": "select staff_department_assignments.department_id group_by staff_department_assignments.department_id order_by count ( staff_department_assignments.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id of the department with the least number of staff?",
        "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me id of all departments .",
            "sql": "select distinct staff_department_assignments.department_id"
        },
        {
            "utterance": "show me the number of staff of all departments .",
            "sql": "select staff_department_assignments.department_id , count ( staff_department_assignments.staff_id ) group_by staff_department_assignments.department_id order_by count ( staff_department_assignments.* )"
        },
        {
            "utterance": "show me the department with lowest staff",
            "sql": "select staff_department_assignments.department_id group_by staff_department_assignments.department_id order_by count ( staff_department_assignments.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
    },
    "interaction": [
        {
            "utterance": "What are the staff names with job title code Sales Person ?",
            "sql": "select staff.staff_name where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What are their genders ? | Would you like their names and their genders ? | Yes .",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value except select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What are the staff names and genders for people with job title code Sales Person ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "How about with job title code Clerical Staff ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "Which of the people with job title code Sales Person are not Clerical Staff ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value except select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and address of the customers who have both New and Pending orders.",
        "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you provide me with a list of all customer names and addresses ?",
            "sql": "select customers.customer_name , customers.customer_address"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 10,
    "final": {
        "utterance": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000"
    },
    "interaction": [
        {
            "utterance": "Which items were ordered four or more times ? | There is no item that was ordered four or more times | What is the id of products supplied more than 80000 ?",
            "sql": "select product_suppliers.product_id group_by product_suppliers.product_id having sum ( product_suppliers.total_amount_purchased ) > value"
        },
        {
            "utterance": "What is the latest date that orders were sent by supplier id 4 ? | Did you mean date of supplied from or to ? | Supplied to .",
            "sql": "select product_suppliers.date_supplied_to where product_suppliers.supplier_id = value order_by product_suppliers.date_supplied_to desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the product type whose average price is higher than the average price of all products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "What is the product type of the product whose average price is greater than the average price of all products ?",
            "sql": "select products.product_type_code group_by products.product_type_code having avg ( products.product_price ) > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "What is the average price of that product with type code Hardware ?",
            "sql": "select avg ( products.product_price ) where products.product_type_code = value"
        },
        {
            "utterance": "What is the average price of all products with the type code `` clothes '' ?",
            "sql": "select avg ( products.product_price ) where products.product_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 12,
    "final": {
        "utterance": "List the name of staff who has been assigned multiple jobs.",
        "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what is the date assigned to of the department managers ?",
            "sql": "select staff_department_assignments.date_assigned_to where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "list the name of staff who has been assigned multiple jobs ?",
            "sql": "select staff.staff_name group_by staff_department_assignments.staff_id having count ( * ) > value"
        },
        {
            "utterance": "what is the date assigned from sales person ?",
            "sql": "select staff_department_assignments.date_assigned_from where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names and ids of customers whose address contains TN?",
        "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\""
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all of the customer IDs and the corresponding customer names ?",
            "sql": "select customers.customer_name , customers.customer_id"
        },
        {
            "utterance": "Thanks ! Can you filter this list to show only the rows for customers who have an address in the state of TN ?",
            "sql": "select customers.customer_name , customers.customer_id where customers.customer_address like value"
        },
        {
            "utterance": "Great ! Can you provide me with the customer addresses for those two customers ?",
            "sql": "select customers.customer_address where customers.customer_address like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the id and name of the staff who has been assigned for the shortest period.",
        "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Details of staff id 1 ? | Do you mean the staff gender and staff name of staff id 1 ? | yes",
            "sql": "select staff.staff_gender , staff.staff_name where staff.staff_id = value"
        },
        {
            "utterance": "Give the id and name of the staff who has been assigned for the shortest period ?",
            "sql": "select staff.staff_id , staff.staff_name order_by staff_department_assignments.date_assigned_to - staff_department_assignments.date_assigned_from limit_value"
        },
        {
            "utterance": "job title code for staff id ? | Do you mean all the job title codes for all the staff ids ? | yes",
            "sql": "select staff_department_assignments.job_title_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
    },
    "interaction": [
        {
            "utterance": "Find the id of customers whose address contains WY state and do not use credit card for payment .",
            "sql": "select customers.customer_id where customers.customer_address like value and customers.payment_method_code != value"
        },
        {
            "utterance": "Can I have the customer 's name please ?",
            "sql": "select customers.customer_name where customers.customer_address like value and customers.payment_method_code != value"
        },
        {
            "utterance": "Please find the id and name of customers whose address contains WY state and use credit card for payment .",
            "sql": "select customers.customer_id , customers.customer_name where customers.customer_address like value and customers.payment_method_code != value"
        },
        {
            "utterance": "Hmm . Can you please give me his email address and phone ?",
            "sql": "select customers.customer_email , customers.customer_phone where customers.customer_address like value and customers.payment_method_code != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 16,
    "final": {
        "utterance": "For each product type, return the maximum and minimum price.",
        "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all the different product types ?",
            "sql": "select distinct products.product_type_code group_by products.product_type_code"
        },
        {
            "utterance": "Sweet ! Can you update this list to show what the maximum product price is for both Clothes and Hardware , and include the minimum product price for each ?",
            "sql": "select products.product_type_code , max ( products.product_price ) , min ( products.product_price ) group_by products.product_type_code"
        },
        {
            "utterance": "Cool ! Can you show me a list of all of the different product names ?",
            "sql": "select distinct products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 17,
    "final": {
        "utterance": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "Show me all products supplied by supplier id 2 . | Do you mean the product ID of all products supplied by supplier id 2 ? | Yes",
            "sql": "select product_suppliers.product_id where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "Which of the previous products are more expensive than the average price of all products ? | Do you mean to find the names of those products that are more expensive than the average price of all products ? | Only the names of those products supplied by supplier id 2 .",
            "sql": "select product_suppliers.product_id where product_suppliers.supplier_id = value and products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "How much does product ID 8 cost ?",
            "sql": "select products.product_price where products.product_id = value"
        },
        {
            "utterance": "And product ID 15 ?",
            "sql": "select products.product_price where products.product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 18,
    "final": {
        "utterance": "For each product type, return the maximum and minimum price.",
        "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "how many products on the table",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "what are all the products name on this table",
            "sql": "select products.product_name"
        },
        {
            "utterance": "what is the product price of red jeans",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "which product is highest price on the table | Which kinds of product information do you want ? | i want to the black jeans product price",
            "sql": "select products.product_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the largest and smallest customer codes?",
        "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "please list out the customers name",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "what is the highest customer code on the table",
            "sql": "select max ( customers.customer_code )"
        },
        {
            "utterance": "what is the address of Ahmed",
            "sql": "select customers.customer_address where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name of the most expensive hardware product.",
        "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you find the name of the most expensive hardware product please ?",
            "sql": "select products.product_name where products.product_type_code = value order_by products.product_price desc limit_value"
        },
        {
            "utterance": "What is its product price ?",
            "sql": "select products.product_price where products.product_type_code = value order_by products.product_price desc limit_value"
        },
        {
            "utterance": "What is the product name and price for the least expensive hardware product ?",
            "sql": "select products.product_name , products.product_price where products.product_type_code = value order_by products.product_price asc limit_value"
        },
        {
            "utterance": "What is the average price of all hardware products ?",
            "sql": "select avg ( products.product_price ) where products.product_type_code = value"
        },
        {
            "utterance": "What is the average price of all clothes products ?",
            "sql": "select avg ( products.product_price ) where products.product_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
    },
    "interaction": [
        {
            "utterance": "What is the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value except select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What 's the name and gender of the staff with the job of Sales Person ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What 's the name and gender of the staff who was never assigned to Clerical Staff .",
            "sql": "select staff.staff_name , staff.staff_gender except select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the id and name of the staff who has been assigned for the shortest period.",
        "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all staff names with their gender ...",
            "sql": "select staff.staff_name , staff.staff_gender"
        },
        {
            "utterance": "List all department id 's with their corresponding job title code .",
            "sql": "select staff_department_assignments.department_id , staff_department_assignments.job_title_code"
        },
        {
            "utterance": "How many staffs are working as Sales Person or Clerical Staff ?",
            "sql": "select count ( * ) where staff_department_assignments.job_title_code = value or staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "Find the id and name of the staff who has been assigned for the shortest period .",
            "sql": "select staff.staff_id , staff.staff_name order_by staff_department_assignments.date_assigned_to - staff_department_assignments.date_assigned_from limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 23,
    "final": {
        "utterance": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the products supplied by supplier id 3 , please ?",
            "sql": "select products.product_name where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "What are the product types of those ?",
            "sql": "select products.product_type_code where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "What are the prices of those ?",
            "sql": "select products.product_price where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "What are the prices of those ?",
            "sql": "select products.product_price where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "What supplier id carries the product name red jeans ?",
            "sql": "select product_suppliers.supplier_id where products.product_name = value"
        },
        {
            "utterance": "What is the total amount purchased of those ?",
            "sql": "select product_suppliers.supplier_id , product_suppliers.total_amount_purchased where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the id of the product that was ordered the most often?",
        "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What product id was ordered most often ?",
            "sql": "select order_items.product_id group_by order_items.product_id order_by count ( order_items.* ) desc limit_value"
        },
        {
            "utterance": "and the product ID that was ordered least often ?",
            "sql": "select order_items.product_id group_by order_items.product_id order_by count ( order_items.* ) limit_value"
        },
        {
            "utterance": "How many times was product id 2 ordered ?",
            "sql": "select count ( order_items.* ) group_by order_items.product_id having order_items.product_id = value"
        },
        {
            "utterance": "How many times was product id 13 ordered ?",
            "sql": "select count ( order_items.* ) group_by order_items.product_id having order_items.product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"
    },
    "interaction": [
        {
            "utterance": "Who placed order after having order cancelled ?",
            "sql": "select distinct customer_orders.customer_id where customer_orders.order_date > ( select min ( customer_orders.order_date ) where customer_orders.order_status_code = value )"
        },
        {
            "utterance": "What is the order status for order 3",
            "sql": "select customer_orders.order_status_code where customer_orders.order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the product id and product type of the cheapest product?",
        "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you please list the product which has the lowest value for product price ?",
            "sql": "select products.* order_by products.product_price limit_value"
        },
        {
            "utterance": "Can you list only the product id and the product type please ?",
            "sql": "select products.product_id , products.product_type_code order_by products.product_price limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the id and name of the department store that has both marketing and managing department?",
        "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""
    },
    "interaction": [
        {
            "utterance": "What is the id of the department store that has both marketing and managing department ?",
            "sql": "select department_stores.dept_store_id where departments.department_name = value intersect select department_stores.dept_store_id where departments.department_name = value"
        },
        {
            "utterance": "What is the name of the department store that has both marketing and managing department ?",
            "sql": "select department_stores.store_name where departments.department_name = value intersect select department_stores.store_name where departments.department_name = value"
        },
        {
            "utterance": "Can you show me all the id of the department store that has both marketing and managing department ?",
            "sql": "select department_stores.dept_store_id , department_stores.store_name where departments.department_name = value intersect select department_stores.dept_store_id , department_stores.store_name where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the name of the most expensive hardware product.",
        "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the most expensive hardware product ?",
            "sql": "select products.product_name where products.product_type_code = value order_by products.product_price desc limit_value"
        },
        {
            "utterance": "what is the product price ?",
            "sql": "select products.product_price where products.product_type_code = value order_by products.product_price desc limit_value"
        },
        {
            "utterance": "what is the product id for red jeans ?",
            "sql": "select products.product_id where products.product_name = value"
        },
        {
            "utterance": "what is the product type code for red jeans",
            "sql": "select distinct ( products.product_type_code ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "what product Id has the highest price ? | Do you mean the id of the product which has the highest price ? | yes",
            "sql": "select products.product_id order_by products.product_price desc limit_value"
        },
        {
            "utterance": "what is the product name ? | Do you mean the product name of the product which has the highest price ? | yes",
            "sql": "select products.product_name order_by products.product_price desc limit_value"
        },
        {
            "utterance": "what is the name of the product with the lowest price ?",
            "sql": "select products.product_name order_by products.product_price limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 30,
    "final": {
        "utterance": "How many department stores does the store chain South have?",
        "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
    },
    "interaction": [
        {
            "utterance": "How many department stores does the store chain South have ?",
            "sql": "select count ( * ) where department_store_chain.dept_store_chain_name = value"
        },
        {
            "utterance": "How many department stores does the store chain West have ?",
            "sql": "select count ( * ) where department_store_chain.dept_store_chain_name = value"
        },
        {
            "utterance": "What is the store address of the store chain East ?",
            "sql": "select department_stores.store_address where department_store_chain.dept_store_chain_name = value"
        },
        {
            "utterance": "What is the store phone of the store chain West ?",
            "sql": "select department_stores.store_phone where department_store_chain.dept_store_chain_name = value"
        },
        {
            "utterance": "What is the store email of the store chain South ?",
            "sql": "select department_stores.store_email where department_store_chain.dept_store_chain_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the highest and lowest prices of products , grouped by and alphabetically ordered by product type ?",
            "sql": "select max ( products.product_price ) , min ( products.product_price ) group_by products.product_type_code order_by products.product_type_code"
        },
        {
            "utterance": "What are the all product names",
            "sql": "select products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the phone numbers of all customers and suppliers.",
        "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"
    },
    "interaction": [
        {
            "utterance": "Can you show me the phone numbers of all customers ?",
            "sql": "select customers.customer_phone"
        },
        {
            "utterance": "Hmm , I also want to know the phone numbers of all suppliers please .",
            "sql": "select suppliers.supplier_phone"
        },
        {
            "utterance": "Please list the phone numbers of all customers and suppliers .",
            "sql": "select customers.customer_phone union select suppliers.supplier_phone"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 33,
    "final": {
        "utterance": "How many department stores does the store chain South have?",
        "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of the store name with dept store id 1 ? | Do you mean dept store chain name ? | yes",
            "sql": "select department_store_chain.dept_store_chain_name where department_store_chain.dept_store_chain_id = value"
        },
        {
            "utterance": "Show me the name of all department stores ? | Do you mean the store name ? | yes",
            "sql": "select department_stores.store_name"
        },
        {
            "utterance": "Show how many department stores does the store chain South have ?",
            "sql": "select count ( * ) where department_store_chain.dept_store_chain_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 34,
    "final": {
        "utterance": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')"
    },
    "interaction": [
        {
            "utterance": "What is the Job title code of department id 4 ?",
            "sql": "select staff_department_assignments.job_title_code where staff_department_assignments.department_id = value"
        },
        {
            "utterance": "What is the date assigned from and of the staff id 1 ?",
            "sql": "select staff_department_assignments.date_assigned_from where staff_department_assignments.staff_id = value"
        },
        {
            "utterance": "What is the department Id of sales person ?",
            "sql": "select distinct staff_department_assignments.department_id where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What is the date assigned to clerical staff ?",
            "sql": "select staff_department_assignments.date_assigned_to where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What is the date assigned from and date assigned to sales person ?",
            "sql": "select staff_department_assignments.date_assigned_from , staff_department_assignments.date_assigned_to where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 35,
    "final": {
        "utterance": "Return the name and gender of the staff who was assigned in 2016.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""
    },
    "interaction": [
        {
            "utterance": "how many departments are there",
            "sql": "select count ( distinct staff_department_assignments.department_id )"
        },
        {
            "utterance": "what is the jobe title code of department id 5",
            "sql": "select staff_department_assignments.job_title_code where staff_department_assignments.department_id = value"
        },
        {
            "utterance": "how many persons in department manger",
            "sql": "select count ( staff_department_assignments.* ) where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 36,
    "final": {
        "utterance": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "can you show a list of customer address ?",
            "sql": "select customers.customer_address"
        },
        {
            "utterance": "can you show a list of order date ?",
            "sql": "select customer_orders.order_date"
        },
        {
            "utterance": "can you show a list of customer phone ?",
            "sql": "select customers.customer_phone"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the ids of the top three products that were purchased in the largest amount?",
        "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Which products were purchased in the largest amount ? | 4 is the id of product that was purchased in the largest amount . | What about top 3 largest ?",
            "sql": "select product_suppliers.product_id order_by product_suppliers.total_amount_purchased desc limit_value"
        },
        {
            "utterance": "And what about the lowest 3 ?",
            "sql": "select product_suppliers.product_id order_by product_suppliers.total_amount_purchased asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 38,
    "final": {
        "utterance": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all Job Title Codes present on this list ?",
            "sql": "select staff_department_assignments.job_title_code"
        },
        {
            "utterance": "Great ! Can you please show me a list of Staff IDs for those who have the job_title_code of Department Manager ?",
            "sql": "select staff.staff_id where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "Great ! Now can you update this list to include the genders of all of these individuals ?",
            "sql": "select staff.staff_id , staff.staff_gender where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 39,
    "final": {
        "utterance": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What are the IDs of all the products supplied by supplier 2 ?",
            "sql": "select product_suppliers.product_id where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "What is the average price of these products ?",
            "sql": "select avg ( products.product_price ) where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "Show me the ID 's from the products from supplier number 2 that are more expensive than this average , please .",
            "sql": "select product_suppliers.product_id where product_suppliers.supplier_id = value and products.product_price > ( select avg ( products.product_price ) where product_suppliers.supplier_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"
    },
    "interaction": [
        {
            "utterance": "how many customer orders there",
            "sql": "select count ( customer_orders.* )"
        },
        {
            "utterance": "what is the customer id of order id 2",
            "sql": "select customer_orders.customer_id where customer_orders.order_id = value"
        },
        {
            "utterance": "what is the order date of order id 1",
            "sql": "select customer_orders.order_date where customer_orders.order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the ids of the two department store chains with the largest number of department stores?",
        "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "I want to know the store chains with the largest department stores",
            "sql": "select department_stores.dept_store_chain_id group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value"
        },
        {
            "utterance": "What about the ID of the department store chain that has the second largest number of department stores ?",
            "sql": "select department_stores.dept_store_chain_id group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value except select department_stores.dept_store_chain_id group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value"
        },
        {
            "utterance": "OK , do you have the names of the above stores ?",
            "sql": "select department_stores.store_name group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value"
        },
        {
            "utterance": "What about their store address ?",
            "sql": "select department_stores.store_address group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value"
        },
        {
            "utterance": "Kindly let me know the store emails of the above stores",
            "sql": "select department_stores.store_email group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the product type whose average price is higher than the average price of all products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "Find the product type whose average price is higher than the average price of all products .",
            "sql": "select products.product_type_code group_by products.product_type_code having avg ( products.product_price ) > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "What is the product name of that ?",
            "sql": "select products.product_name where products.product_type_code = ( select products.product_type_code group_by products.product_type_code having avg ( products.product_price ) > ( select avg ( products.product_price ) ) )"
        },
        {
            "utterance": "Find the product type whose average price is lower than the average price of all products .",
            "sql": "select products.product_type_code group_by products.product_type_code having avg ( products.product_price ) < ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "What are the product names ?",
            "sql": "select products.product_name where products.product_type_code = ( select products.product_type_code group_by products.product_type_code having avg ( products.product_price ) < ( select avg ( products.product_price ) ) )"
        },
        {
            "utterance": "What are the prices of them ?",
            "sql": "select products.product_price where products.product_type_code = ( select products.product_type_code group_by products.product_type_code having avg ( products.product_price ) < ( select avg ( products.product_price ) ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 43,
    "final": {
        "utterance": "What is the name and job title of the staff who was assigned the latest?",
        "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with a list of all Staff Department Assignments `` date assigned to '' values ?",
            "sql": "select staff_department_assignments.date_assigned_to"
        },
        {
            "utterance": "Thank you ! Now I realize that I should probably be asking for the date assigned from values ... Therefore , can you provide me with a list of all staff IDs and their corresponding `` date assigned from '' values ?",
            "sql": "select staff_department_assignments.staff_id , staff_department_assignments.date_assigned_from"
        },
        {
            "utterance": "Thank you for that ! Can you please filter this list to show only the row of the staff member who has the most recent date_assigned_from value ?",
            "sql": "select staff_department_assignments.staff_id , staff_department_assignments.date_assigned_from order_by staff_department_assignments.date_assigned_from desc limit_value"
        },
        {
            "utterance": "Thank you ! Could you please display the name and job title of this staff person ?",
            "sql": "select staff.staff_name , staff_department_assignments.job_title_code where staff_department_assignments.staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
    },
    "interaction": [
        {
            "utterance": "Hello , what is the name of the student with student id 1008 ? | The first and last name of the student with student id 1008 is Jandy Nelson . | What is her major ?",
            "sql": "select student.major where student.stuid = value"
        },
        {
            "utterance": "Apologies , I meant to ask his/her major ; what is the student 's sex ?",
            "sql": "select student.sex where student.stuid = value"
        },
        {
            "utterance": "How old is the student with student id 1008 ?",
            "sql": "select student.age where student.stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\""
    },
    "interaction": [
        {
            "utterance": "what is the location of Bootup Baltimore",
            "sql": "select club.clublocation where club.clubname = value"
        },
        {
            "utterance": "how many female students are presented on the table",
            "sql": "select count ( student.stuid ) where student.sex = value"
        },
        {
            "utterance": "what is the major of Tracy",
            "sql": "select student.major where student.fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the clubs having \"Davis Steven\" as a member.",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\""
    },
    "interaction": [
        {
            "utterance": "How many clubs do you have ?",
            "sql": "select count ( club.* )"
        },
        {
            "utterance": "How many members does each club have ?",
            "sql": "select member_of_club.clubid , count ( member_of_club.stuid ) group_by member_of_club.clubid"
        },
        {
            "utterance": "Finally , can you list the clubs that have `` Davis Steven '' as a member ?",
            "sql": "select member_of_club.clubid where student.lname = value and student.fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Retrieve the average age of members of the club \"Tennis Club\".",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""
    },
    "interaction": [
        {
            "utterance": "What are the average age of all the members of the tennis club",
            "sql": "select avg ( student.age ) where club.clubname = value"
        },
        {
            "utterance": "Give me the first names and last names of all the members of the tennis club",
            "sql": "select student.fname , student.lname where club.clubname = value"
        },
        {
            "utterance": "Can i have the city code of all members of the tennis club",
            "sql": "select student.city_code where club.clubname = value"
        },
        {
            "utterance": "Give me the position of the member in the tennis club",
            "sql": "select member_of_club.position where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which club has the most members majoring in \"600\"?",
        "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are majoring in `` 600 '' ?",
            "sql": "select count ( student.stuid ) where student.major = value"
        },
        {
            "utterance": "Can you show me only those students ?",
            "sql": "select student.stuid where student.major = value"
        },
        {
            "utterance": "Can you also show me what clubs they are in ?",
            "sql": "select club.clubname where student.major = value group_by club.clubname"
        },
        {
            "utterance": "How many students who are majoring in 600 are in each of those clubs ?",
            "sql": "select club.clubname , count ( * ) where student.major = value group_by club.clubname order_by count ( * )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the number of members of club \"Pen and Paper Gaming\".",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""
    },
    "interaction": [
        {
            "utterance": "Hi . How many different clubs are there in total ?",
            "sql": "select count ( club.* )"
        },
        {
            "utterance": "What are the names of the 4 clubs ?",
            "sql": "select club.clubname"
        },
        {
            "utterance": "Among the 4 clubs , how many members are there in total ?",
            "sql": "select count ( member_of_club.* )"
        },
        {
            "utterance": "Of the 4 members , how many of them are members of the club `` Pen and Paper Gaming '' ?",
            "sql": "select count ( * ) where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many clubs does the student named \"Eric Tai\" belong to?",
        "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
    },
    "interaction": [
        {
            "utterance": "Tell me the club description for club id 1 ?",
            "sql": "select club.clubdesc where club.clubid = value"
        },
        {
            "utterance": "Tell me the position for the student id 1001 ? | Do you mean the city code for students ? | yes",
            "sql": "select student.city_code where student.stuid = value"
        },
        {
            "utterance": "How many clubs does the student named 'Eric TAI ' belong to ?",
            "sql": "select count ( distinct club.clubname ) where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many different roles are there in the club \"Bootup Baltimore\"?",
        "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "Yes please",
            "sql": "select club.clubname group_by member_of_club.clubid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many members are in theat club ?",
            "sql": "select count ( * ) group_by member_of_club.clubid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many roles are in that club ?",
            "sql": "select count ( member_of_club.position ) where member_of_club.clubid = ( select member_of_club.clubid group_by member_of_club.clubid order_by count ( member_of_club.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\""
    },
    "interaction": [
        {
            "utterance": "Who are the members of Bootup Baltimore ? | Here are the first names and last names of members of Bootup Baltimore | What are there major 's ?",
            "sql": "select student.major where club.clubname = value"
        },
        {
            "utterance": "How many members are there total ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "Can you list all of the members ?",
            "sql": "select *"
        },
        {
            "utterance": "How many members are female ?",
            "sql": "select count ( * ) where student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "How many students are members of the club `` Bootup Baltimore '' ?",
            "sql": "select count ( * ) where club.clubname = value"
        },
        {
            "utterance": "Please provide the ages of the two members .",
            "sql": "select student.age where club.clubname = value"
        },
        {
            "utterance": "What is the average age of the two members of the club Bootup Baltimore ?",
            "sql": "select avg ( student.age ) where club.clubname = value"
        },
        {
            "utterance": "Could you please tell me who is President of the club Bootup Baltimore . | Do you want the first and last name of him ? | Yes , please provide first and last name of the President of the club Bootup Baltimore .",
            "sql": "select student.fname , student.lname where club.clubname = value and member_of_club.position = value"
        },
        {
            "utterance": "Thanks . Could you please tell me the Club Location ?",
            "sql": "select club.clublocation where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
    },
    "interaction": [
        {
            "utterance": "where is the location of club `` Hopkins Student Enterprises '' ?",
            "sql": "select club.clublocation where club.clubname = value"
        },
        {
            "utterance": "Show the first name of the `` CTO '' of club `` Hopkins Student Enterprises ''",
            "sql": "select student.fname where club.clubname = value and member_of_club.position = value"
        },
        {
            "utterance": "Who is the `` CTO '' of club `` Hopkins Student Enterprises '' ? show the first name and the last name .",
            "sql": "select student.fname , student.lname where club.clubname = value and member_of_club.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\""
    },
    "interaction": [
        {
            "utterance": "What is the average age of students ?",
            "sql": "select avg ( student.age )"
        },
        {
            "utterance": "And what is the average gender wise ? | sorry , i cant understand your question | What is the average age of students as per the `` Sex '' of the students ?",
            "sql": "select student.sex , avg ( student.age ) group_by student.sex"
        },
        {
            "utterance": "How many Students are below the age of 17 ?",
            "sql": "select count ( student.stuid ) where student.age < value"
        },
        {
            "utterance": "How many students have the same Fname ?",
            "sql": "select count ( student.stuid ) where student.fname in ( select student.fname group_by student.fname having count ( student.* ) > value )"
        },
        {
            "utterance": "How many clubs are located in city code `` AKW ''",
            "sql": "select count ( club.clubid ) where club.clublocation = value"
        },
        {
            "utterance": "and how many in city code `` HHH ''",
            "sql": "select count ( club.clubid ) where club.clublocation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the club that has the most female students.",
        "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the club id of stud 1001",
            "sql": "select member_of_club.clubid where member_of_club.stuid = value"
        },
        {
            "utterance": "what is the club name of AKW",
            "sql": "select club.clubname where club.clublocation = value"
        },
        {
            "utterance": "what is the position of club id 1 | What do you mean by the position of club id 1 | in the table member of club",
            "sql": "select member_of_club.position where member_of_club.clubid = value"
        },
        {
            "utterance": "what is the club name of HHH",
            "sql": "select club.clubname where club.clublocation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "what is last name of the members in club ?",
            "sql": "select student.lname"
        },
        {
            "utterance": "what is the first name of the student with last name smith ?",
            "sql": "select student.fname where student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "What is the average age of all of the members of the club called `` Bootup Baltimore '' ?",
            "sql": "select avg ( student.age ) where club.clubname = value"
        },
        {
            "utterance": "How many people with sex `` M '' and sex `` F '' are in that club ?",
            "sql": "select count ( * ) where club.clubname = value"
        },
        {
            "utterance": "Who is the president of that club ?",
            "sql": "select student.fname , student.lname where club.clubname = value and member_of_club.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many clubs does the student named \"Eric Tai\" belong to?",
        "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
    },
    "interaction": [
        {
            "utterance": "How many clubs does the student Eric Tai belong to ?",
            "sql": "select count ( distinct club.clubname ) where student.fname = value and student.lname = value"
        },
        {
            "utterance": "How many other students belong in 0 clubs ?",
            "sql": "select count ( student.* ) where student.stuid not in ( select student.stuid )"
        },
        {
            "utterance": "How many students belong to 1 club ?",
            "sql": "select count ( member_of_club.* ) ( select member_of_club.stuid group_by member_of_club.stuid having count ( member_of_club.* ) = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select student.lname , student.fname where student.stuid in ( select member_of_club.stuid group_by member_of_club.stuid having count ( member_of_club.* ) = value )"
        },
        {
            "utterance": "What are the club names of the clubs they belong to , please ?",
            "sql": "select club.clubname where club.clubid in ( select distinct member_of_club.clubid group_by member_of_club.stuid having count ( member_of_club.* ) = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which destination has least number of flights?",
        "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the origins , the destinations and the flight numbers ?",
            "sql": "select flight.origin , flight.destination , flight.flno group_by flight.destination"
        },
        {
            "utterance": "Hmm , I want to know just the destinations and the flight numbers please .",
            "sql": "select flight.destination , flight.flno group_by flight.destination"
        },
        {
            "utterance": "Please show me the destinations and the number of flights they have .",
            "sql": "select flight.destination , count ( flight.* ) group_by flight.destination"
        },
        {
            "utterance": "Which destination has the least number of flights ?",
            "sql": "select flight.destination , count ( flight.* ) group_by flight.destination order_by count ( flight.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "What are the names and distances of aircraft that have more than 5000 distance ?",
            "sql": "select aircraft.name where aircraft.distance > value"
        },
        {
            "utterance": "What are the names and distances of aircraft that have more than 5000 distance and there are at least 5 people who have its certificate ?",
            "sql": "select aircraft.name where aircraft.distance > value group_by certificate.aid order_by count ( * ) > = value"
        },
        {
            "utterance": "What is the employee ID of the employee who flew the longest distance ?",
            "sql": "select certificate.eid order_by aircraft.distance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is average and maximum salary of all employees.",
        "sql": "SELECT avg(salary) ,  max(salary) FROM Employee"
    },
    "interaction": [
        {
            "utterance": "What is average and maximum salary of all employees .",
            "sql": "select avg ( employee.salary ) , max ( employee.salary )"
        },
        {
            "utterance": "What name has the highest salary ?",
            "sql": "select employee.name order_by employee.salary desc limit_value"
        },
        {
            "utterance": "What is the employee id and salary of George Wright ?",
            "sql": "select employee.eid , employee.salary where employee.name = value"
        },
        {
            "utterance": "What is the name and employee id of the person with the lowest salary",
            "sql": "select employee.name , employee.eid order_by employee.salary limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 3,
    "final": {
        "utterance": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you display the salary and name of the employees ?",
            "sql": "select employee.salary , employee.name"
        },
        {
            "utterance": "What is the name of the employee who has the most number of aircraft certificates ?",
            "sql": "select employee.name group_by employee.eid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Hmm , can you just list his salary ?",
            "sql": "select employee.salary group_by employee.eid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show names for all aircrafts of which John Williams has certificates.",
        "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
    },
    "interaction": [
        {
            "utterance": "show names of all aircrafts ?",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "in which aircraft does John Williams have a certificate",
            "sql": "select aircraft.name where employee.name = value"
        },
        {
            "utterance": "give me the airline id to that",
            "sql": "select aircraft.aid where employee.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show names for all employees with salary more than the average.",
        "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
    },
    "interaction": [
        {
            "utterance": "Show names for all employees with a salary greater than average",
            "sql": "select employee.name where employee.salary > ( select avg ( employee.salary ) )"
        },
        {
            "utterance": "Great , could you tell me the average salary ?",
            "sql": "select avg ( employee.salary )"
        },
        {
            "utterance": "Could you show me a list of employees with a salary less than the average ?",
            "sql": "select employee.name where employee.salary < ( select avg ( employee.salary ) )"
        },
        {
            "utterance": "how many employees earn above the average salary ?",
            "sql": "select count ( employee.* ) where employee.salary > ( select avg ( employee.salary ) )"
        },
        {
            "utterance": "how many earn below the average ?",
            "sql": "select count ( employee.* ) where employee.salary < ( select avg ( employee.salary ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the flight number of flights with three lowest distances.",
        "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "can you show me average of the distances ?",
            "sql": "select avg ( flight.distance )"
        },
        {
            "utterance": "which one is the longest distance ?",
            "sql": "select max ( flight.distance )"
        },
        {
            "utterance": "what is the highest price ?",
            "sql": "select max ( flight.price )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "How many flights have an origin of Los Angeles ?",
            "sql": "select count ( flight.* ) where flight.origin = value"
        },
        {
            "utterance": "How many of those are going to Honolulu ?",
            "sql": "select count ( flight.* ) where flight.origin = value and flight.destination = value"
        },
        {
            "utterance": "What is their departure date and arrival date ?",
            "sql": "select flight.departure_date , flight.arrival_date where flight.origin = value and flight.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of employees with three lowest salaries.",
        "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "list the salaries in ascending order",
            "sql": "select employee.salary order_by employee.salary asc"
        },
        {
            "utterance": "show the least three salaries in the table",
            "sql": "select employee.salary order_by employee.salary asc limit_value"
        },
        {
            "utterance": "list the name of the employees with the lowest salaries",
            "sql": "select employee.name order_by employee.salary asc limit_value"
        },
        {
            "utterance": "what is the id of him ?",
            "sql": "select employee.eid order_by employee.salary asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name of aircraft which fewest people have its certificate.",
        "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "LIST THE NAME OF THE AIRCRAFTS",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "WHAT ARE THE NAMES OF AIRCRAFT WHICH FEWEST PEOPLE HAVE ITS CERTIFICATE",
            "sql": "select aircraft.name group_by certificate.aid order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "WHAT IS THE ID OF THE AIRCRAFT | Do you mean the aircraft id of the aircraft named Boeing 727 ? | YES",
            "sql": "select aircraft.aid where aircraft.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which destination has least number of flights?",
        "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many flights are arriving in Washington DC today ? | Sorry , what is the date you meant by today ? | I am sorry I meant on April/12/2005",
            "sql": "select count ( flight.* ) where flight.destination = value and flight.arrival_date like value"
        },
        {
            "utterance": "How many flights are arriving in Dallas ?",
            "sql": "select count ( flight.* ) where flight.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the salary and name of the employee who has the least number of certificates on aircrafts with distance more than 5000 ?",
            "sql": "select employee.salary , employee.name where aircraft.distance > value group_by employee.eid order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Okay . What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000 ?",
            "sql": "select employee.salary , employee.name where aircraft.distance > value group_by employee.eid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the salary and name of the employee who has the most number of certificates on aircraft with distance less than 5000 ?",
            "sql": "select employee.salary , employee.name where aircraft.distance < value group_by employee.eid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "What are the departure dates for all flights from Los Angeles to Honolulu ?",
            "sql": "select flight.departure_date where flight.origin = value and flight.destination = value"
        },
        {
            "utterance": "What are the arrival dates for all flights from Los Angeles to Honolulu ?",
            "sql": "select flight.arrival_date where flight.origin = value and flight.destination = value"
        },
        {
            "utterance": "What are the prices of those flights ?",
            "sql": "select flight.price where flight.origin = value and flight.destination = value"
        },
        {
            "utterance": "What about the flight numbers ?",
            "sql": "select flight.flno where flight.origin = value and flight.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the name of employees with three lowest salaries.",
        "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me what is the average salary ?",
            "sql": "select avg ( employee.salary )"
        },
        {
            "utterance": "What is the name of employees with three lowest salaries ?",
            "sql": "select employee.name order_by employee.salary asc limit_value"
        },
        {
            "utterance": "What is the highest salary in the company ?",
            "sql": "select max ( employee.salary )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show ids for all employees who don't have a certificate.",
        "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    "interaction": [
        {
            "utterance": "Which employees do n't have certificates ?",
            "sql": "select employee.eid except select certificate.eid"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select employee.name except select certificate.eid"
        },
        {
            "utterance": "How many employees do n't have certificates ?",
            "sql": "select count ( employee.* ) except select certificate.aid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all flight numbers with aircraft Airbus A340-300.",
        "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
    },
    "interaction": [
        {
            "utterance": "What are the IDs of the aircrafts with name Airbus A340-300 ?",
            "sql": "select distinct aircraft.aid where aircraft.name = value"
        },
        {
            "utterance": "What distance does aircraft ID fly ? | Do you mean aircraft id 3 ? And want me to return the sum of all the distances it flew ? | Yes please .",
            "sql": "select sum ( flight.distance ) where flight.aid = ( select distinct aircraft.aid where aircraft.name = value )"
        },
        {
            "utterance": "WHat flight numbers have that aid ?",
            "sql": "select flight.flno where aircraft.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the name of aircraft which fewest people have its certificate.",
        "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different aircrafts are there ? | Do you mean different names of aircrafts ? | Yes , how many different names .",
            "sql": "select count ( distinct aircraft.name )"
        },
        {
            "utterance": "Show me the name of the aircraft with the fewest people who have its certificate",
            "sql": "select aircraft.name group_by certificate.aid order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How many people have the 747-400 certificate ? | Do you mean the name of Boeing 747-400 in the Boeing 747-400 table ? | yes",
            "sql": "select count ( * ) where aircraft.name = value"
        },
        {
            "utterance": "how far is its distance ? | Did you mean the distance of Boeing 747-400 ? | Yes",
            "sql": "select aircraft.distance where aircraft.name = value"
        },
        {
            "utterance": "and the Boeing 737-800 ? | And what do you want to know about the Boeing 737-800 ? | What is the distance of the Boeing 737-800 ?",
            "sql": "select aircraft.distance where aircraft.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the id and name of the aircraft with the maximum distance.",
        "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the distance of the name Boeing 747-400 ? | did you mean the distance of the aircraft with the name Boeing 747-400 ? | yes",
            "sql": "select aircraft.distance where aircraft.name = value"
        },
        {
            "utterance": "What is the distance of the aircraft with the name Boeing 737-800 ?",
            "sql": "select aircraft.distance where aircraft.name = value"
        },
        {
            "utterance": "What is the name of the aircraft with distance 7120 ?",
            "sql": "select aircraft.name where aircraft.distance = value"
        },
        {
            "utterance": "What is the id of the aircraft with the maximum distance ?",
            "sql": "select aircraft.aid order_by aircraft.distance desc limit_value"
        },
        {
            "utterance": "Which is the aircraft that have the maximum distance ? | Did you mean the name of the aircraft ? | yes",
            "sql": "select aircraft.name order_by aircraft.distance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the average price for flights from Los Angeles to Honolulu.",
        "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "What is the average price for flights from Los Angeles to Honolulu",
            "sql": "select avg ( flight.price ) where flight.origin = value and flight.destination = value"
        },
        {
            "utterance": "What is the average price for flights from Los Angeles to Chicago",
            "sql": "select avg ( flight.price ) where flight.origin = value and flight.destination = value"
        },
        {
            "utterance": "What is the average price for flights from Los Angeles to Washington D.C .",
            "sql": "select avg ( flight.price ) where flight.origin = value and flight.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the aircraft name for the flight with number 99",
        "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
    },
    "interaction": [
        {
            "utterance": "what was the destination of flight 99 ?",
            "sql": "select flight.destination where flight.flno = value"
        },
        {
            "utterance": "How far did flight 99 fly ?",
            "sql": "select flight.distance where flight.flno = value"
        },
        {
            "utterance": "What was the name of the airplane from flight 99 ?",
            "sql": "select aircraft.name where flight.flno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which origin has most number of flights?",
        "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many origin are there ?",
            "sql": "select count ( distinct flight.origin )"
        },
        {
            "utterance": "How many flights are there ?",
            "sql": "select count ( flight.* )"
        },
        {
            "utterance": "Which origin has least number of flights ?",
            "sql": "select flight.origin group_by flight.origin order_by count ( flight.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
    },
    "interaction": [
        {
            "utterance": "Can you provide me with the names of the dorms that have both TV Lounge and Study Room as amenities ?",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value intersect select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "What is the Dorm ID of Dorm-plex 2000 ?",
            "sql": "select dorm.dormid where dorm.dorm_name = value"
        },
        {
            "utterance": "What is the student capacity of Dorm-plex 2000 ?",
            "sql": "select dorm.student_capacity where dorm.dorm_name = value"
        },
        {
            "utterance": "What genders can be residents of Dorm-plex 2000 ?",
            "sql": "select dorm.gender where dorm.dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the first name of students who are living in the Smith Hall.",
        "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'"
    },
    "interaction": [
        {
            "utterance": "What are the First names of students living in smith hall ?",
            "sql": "select student.fname where dorm.dorm_name = value"
        },
        {
            "utterance": "Last name of Tracy | Did you want the last name of the student with first name Tracy ? | Yes",
            "sql": "select student.lname where student.fname = value"
        },
        {
            "utterance": "What is the city code of student Tracy kim ?",
            "sql": "select student.city_code where student.fname = value and student.lname = value"
        },
        {
            "utterance": "What is the Student capacity of Smith Hall ?",
            "sql": "select dorm.student_capacity where dorm.dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the average age of students who are living in the dorm with the largest capacity.",
        "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
    },
    "interaction": [
        {
            "utterance": "Which dorm has the largest capacity ? | Hi do you need the dorm name or dorm id ? | dorm id , please .",
            "sql": "select dorm.dormid order_by dorm.student_capacity desc limit_value"
        },
        {
            "utterance": "How many students live there ?",
            "sql": "select count ( lives_in.stuid ) where dorm.student_capacity = ( select max ( dorm.student_capacity ) )"
        },
        {
            "utterance": "What is their average age ?",
            "sql": "select avg ( student.age ) where dorm.student_capacity = ( select max ( dorm.student_capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many female students (sex is F) whose age is below 25?",
        "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
    },
    "interaction": [
        {
            "utterance": "Please show me how many female students have the major 600",
            "sql": "select count ( student.* ) where student.sex = value and student.major = value"
        },
        {
            "utterance": "How many female students are there total ?",
            "sql": "select count ( student.* ) where student.sex = value"
        },
        {
            "utterance": "How many of these women are under 25 years old ?",
            "sql": "select count ( student.* ) where student.sex = value and student.age < value"
        },
        {
            "utterance": "Show me the ages of the 9 female students with ages under 25 years .",
            "sql": "select student.age where student.sex = value and student.age < value"
        },
        {
            "utterance": "Of all the students under 25 , how many are female ?",
            "sql": "select count ( student.* ) where student.sex = value and student.age < value"
        },
        {
            "utterance": "What are the names of the female students that are under 25 ?",
            "sql": "select student.fname , student.lname where student.sex = value and student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'"
    },
    "interaction": [
        {
            "utterance": "Oh , sorry . I meant to ask what dorm does the student with the last name of Smith live in ?",
            "sql": "select dorm.dorm_name where student.lname = value"
        },
        {
            "utterance": "What are the amenities of those dorms ?",
            "sql": "select dorm_amenity.amenity_name where student.lname = value"
        },
        {
            "utterance": "What are the amenities of the dorm that the student with the last name of Jones lives in ?",
            "sql": "select dorm_amenity.amenity_name where student.lname = value"
        },
        {
            "utterance": "What are the amenities of the dorm that the oldest student lives in ?",
            "sql": "select dorm_amenity.amenity_name where student.age = ( select max ( student.age ) )"
        },
        {
            "utterance": "What are the amenities of the dorm that has the most female students living in it ?",
            "sql": "select dorm_amenity.amenity_name where dorm.dormid = ( select dorm.dormid where student.sex = value group_by dorm.dormid order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "What are the amenities of the dorm that has the smallest student capacity ?",
            "sql": "select dorm_amenity.amenity_name where dorm.student_capacity = ( select min ( dorm.student_capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the number of students whose age is older than the average age for each gender.",
        "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "how many names or student in the table | Do you mean the LName or Fname ? | how many count in male or female in the student table",
            "sql": "select count ( student.* ) , student.sex group_by student.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the number of students for the cities where have more than one student.",
        "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show me the number of students of all cities | Do you mean the total count of students | Yes",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "Show me the count of students for each city",
            "sql": "select student.city_code , count ( student.* ) group_by student.city_code"
        },
        {
            "utterance": "Show me the count of students for the cities where have more than one student",
            "sql": "select student.city_code , count ( student.* ) group_by student.city_code having count ( student.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name and capacity of the dorm with least number of amenities.",
        "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what 's Smith Hall student capacity ?",
            "sql": "select distinct ( dorm.student_capacity ) where dorm.dorm_name = value"
        },
        {
            "utterance": "sorry meant least number of amenities",
            "sql": "select dorm.dorm_name group_by has_amenity.dormid order_by count ( * ) limit_value"
        },
        {
            "utterance": "what 's the name of the dorm with the highest amenities ?",
            "sql": "select dorm.dorm_name group_by has_amenity.dormid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "which of this dorm has student capacity of 355 ?",
            "sql": "select dorm.dorm_name where dorm.student_capacity = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
    },
    "interaction": [
        {
            "utterance": "How many students are living in the dorms ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "Do they all have all amenities ? | Did you mean whether all dorms have all amenities ? | Yes .",
            "sql": "select distinct has_amenity.dormid"
        },
        {
            "utterance": "How many dorms do not have a TV lounge ?",
            "sql": "select has_amenity.dormid where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "How many students are in those four dorms ?",
            "sql": "select count ( * ) where lives_in.dormid not in ( select has_amenity.dormid where dorm_amenity.amenity_name = value )"
        },
        {
            "utterance": "What are the first names of those nine students ?",
            "sql": "select student.fname where lives_in.dormid not in ( select has_amenity.dormid where dorm_amenity.amenity_name = value )"
        },
        {
            "utterance": "What are their ages ?",
            "sql": "select student.age where lives_in.dormid not in ( select has_amenity.dormid where dorm_amenity.amenity_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25"
    },
    "interaction": [
        {
            "utterance": "Who are the students that are between 20 and 25 years of age ? | Do you mean the last name or the first name of the students between 20 and 25 years of age ? | What are the first names of the students who are between 20 and 25 years of age ?",
            "sql": "select student.fname where student.age between value and value"
        },
        {
            "utterance": "what are the student names who are in PHL city and are between 20 and 25 years of age | First name or last name ? | first",
            "sql": "select student.fname where student.city_code = value and student.age between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of amenity that is most common in all dorms.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many amenities are offered in all dorms ?",
            "sql": "select count ( dorm_amenity.* )"
        },
        {
            "utterance": "Could you tell me the names of these amenities ?",
            "sql": "select dorm_amenity.amenity_name"
        },
        {
            "utterance": "What is the name of the most common amenity in all dorms ?",
            "sql": "select dorm_amenity.amenity_name group_by has_amenity.amenid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of dorms that do not have amenity TV Lounge.",
        "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"
    },
    "interaction": [
        {
            "utterance": "Can you show me the dorms with female only students ?",
            "sql": "select dorm.* where dorm.gender = value"
        },
        {
            "utterance": "okay , can you show me all the names of dorm with male only students ?",
            "sql": "select dorm.* where dorm.gender = value"
        },
        {
            "utterance": "what about the name of the dorms that are both male and female ?",
            "sql": "select dorm.* where dorm.gender = value or dorm.gender = value"
        },
        {
            "utterance": "show me the name of dorms that are no gender specific ?",
            "sql": "select dorm.dorm_name where dorm.gender = value"
        },
        {
            "utterance": "Show me all dorm names",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "Can you tell me which one of them do not have TV Lounge ?",
            "sql": "select dorm.dorm_name except select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "and which one DO have TV Lounge ?",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the average and oldest age for students with different sex.",
        "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "What is the average oldest students with different sex ? | Do you mean what is the average age of students ? | What is the average and oldest age for students with different sex ?",
            "sql": "select avg ( student.age ) , max ( student.age ) , student.sex group_by student.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name"
    },
    "interaction": [
        {
            "utterance": "What is the student_capacity of Smith Hall ? | Are you asking about the student capacity of the dorm named Smith Hall ? | Yes",
            "sql": "select dorm.student_capacity where dorm.dorm_name = value"
        },
        {
            "utterance": "How May female Dorm are there ?",
            "sql": "select count ( dorm.* ) where dorm.gender = value"
        },
        {
            "utterance": "What is the amenity_name of Dorm_amenity ? | Did you want all amenity names for dorms ? | Yes",
            "sql": "select dorm_amenity.amenity_name"
        },
        {
            "utterance": "List name of all amenities which Anonymous Donor Hall has , and sort the result in alphabetic order .",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value order_by dorm_amenity.amenity_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the first and last name of students whose age is younger than the average age.",
        "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"
    },
    "interaction": [
        {
            "utterance": "Show me the names of students | Do you mean full names of all the students ? | Yes",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "Show me the Age list of all students",
            "sql": "select student.age"
        },
        {
            "utterance": "Show me the first and last name of students whose age is younger than the average age",
            "sql": "select student.fname , student.lname where student.age < ( select avg ( student.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the average age of students living in each dorm and the name of dorm.",
        "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"
    },
    "interaction": [
        {
            "utterance": "How many students live in each dorm ?",
            "sql": "select count ( * ) , dorm.dorm_name group_by dorm.dorm_name"
        },
        {
            "utterance": "What is the average age of the students living in each dorm ?",
            "sql": "select avg ( student.age ) , dorm.dorm_name group_by dorm.dorm_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of dorms that do not have any amenity",
        "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"
    },
    "interaction": [
        {
            "utterance": "Please find the names of the dorms that do not have any amenities ?",
            "sql": "select dorm.dorm_name where dorm.dormid not in ( select has_amenity.dormid )"
        },
        {
            "utterance": "Which dorm has the highest student capacity ?",
            "sql": "select dorm.dorm_name order_by dorm.student_capacity desc limit_value"
        },
        {
            "utterance": "What about the lowest student capacity ?",
            "sql": "select dorm.dorm_name order_by dorm.student_capacity asc limit_value"
        },
        {
            "utterance": "What is the average student capacity of all dorms ?",
            "sql": "select avg ( dorm.student_capacity )"
        },
        {
            "utterance": "What is the dorm ID of the dorm with the lowest student capacity ?",
            "sql": "select dorm.dormid order_by dorm.student_capacity asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"
    },
    "interaction": [
        {
            "utterance": "How many female students ( sex is F ) live in BAL",
            "sql": "select count ( student.* ) where student.sex = value and student.city_code = value"
        },
        {
            "utterance": "What are their last names ?",
            "sql": "select student.lname where student.sex = value and student.city_code = value"
        },
        {
            "utterance": "Can you also show me the last names of any male students ( sex is M ) who are below the age of 20 ?",
            "sql": "select student.lname where student.sex = value and student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the name of amenity that is most common in all dorms.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "The most common amenity in all dorms is what ?",
            "sql": "select dorm_amenity.amenity_name group_by has_amenity.amenid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what 's Roof dorm id ?",
            "sql": "select has_amenity.dormid where has_amenity.amenid = ( select dorm_amenity.amenid group_by has_amenity.amenid order_by count ( has_amenity.* ) desc limit_value )"
        },
        {
            "utterance": "what is TV Lounge amenity id ?",
            "sql": "select dorm_amenity.amenid where dorm_amenity.amenity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the average age of students living in each dorm and the name of dorm.",
        "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you list the dorm names of the various different dorms ?",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "Thanks ! Can you show me the average age of the students living in each of these dorms ?",
            "sql": "select avg ( student.age ) , dorm.dorm_name group_by dorm.dorm_name"
        },
        {
            "utterance": "Thanks ! Now can you add to that list the student capacity of each of those dormitories ?",
            "sql": "select avg ( student.age ) , dorm.dorm_name , dorm.student_capacity group_by dorm.dorm_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 20,
    "final": {
        "utterance": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "What are the names of the students who live in the city with code HKG ? | Do you mean the full name | Yes please",
            "sql": "select student.fname , student.lname where student.city_code = value"
        },
        {
            "utterance": "Who are not living in that city with code HKG ?",
            "sql": "select student.fname , student.lname where student.city_code != value"
        },
        {
            "utterance": "What is the average age of those who do n't live in that city ?",
            "sql": "select avg ( student.age ) where student.city_code != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many female students (sex is F) whose age is below 25?",
        "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
    },
    "interaction": [
        {
            "utterance": "Please show me the information of all students who are under 25 years old",
            "sql": "select student.* where student.age < value"
        },
        {
            "utterance": "and of those , please now just show the female students",
            "sql": "select student.* where student.sex = value and student.age < value"
        },
        {
            "utterance": "Please return a count of how many there are left | I do n't understand . Do you mean the count of students not in the previous result ? | Only those in the previous results",
            "sql": "select count ( student.* ) where student.sex = value and student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Can you list the number of amenity ids associated with each distinct dorm id and display both of those results ( dorm id and number of amenity ids ) ?",
            "sql": "select dorm.dormid , count ( has_amenity.amenid ) group_by dorm.dormid"
        },
        {
            "utterance": "Wonderful , can you remove that information and instead display every student id that has a dorm id of 160 ?",
            "sql": "select student.stuid where lives_in.dormid = value"
        },
        {
            "utterance": "Can you show only the first names ?",
            "sql": "select student.fname where lives_in.dormid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the number of dorms and total capacity for each gender.",
        "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender"
    },
    "interaction": [
        {
            "utterance": "Could you give me the number of dorms for each gender ?",
            "sql": "select count ( dorm.* ) , dorm.gender group_by dorm.gender"
        },
        {
            "utterance": "What are the names of those dorms ?",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "What is the dorm name of the dorm with the smallest capacity ?",
            "sql": "select dorm.dorm_name order_by dorm.student_capacity desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the average age and number of male students (with sex M) from each city.",
        "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all the male students ( sex with M ) from each city ?",
            "sql": "select avg ( student.age ) , student.city_code where student.sex = value group_by student.city_code"
        },
        {
            "utterance": "What are the average number of all the male students ( sex with M ) from each city ?",
            "sql": "select count ( student.* ) , student.city_code where student.sex = value group_by student.city_code"
        },
        {
            "utterance": "What are the names of the students from ATL ? | Here are the first and last names of the student from ATL | What is his age ?",
            "sql": "select student.age where student.city_code = value"
        },
        {
            "utterance": "What is the average age of all the female students ( sex with F ) from each city ?",
            "sql": "select avg ( student.age ) , student.city_code where student.sex = value group_by student.city_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"
    },
    "interaction": [
        {
            "utterance": "what is the name of the dorms with capacity of greeter than 300",
            "sql": "select dorm.dorm_name where dorm.student_capacity > value"
        },
        {
            "utterance": "what are the dorm ids ?",
            "sql": "select dorm.dormid where dorm.student_capacity > value"
        },
        {
            "utterance": "whats the student capacity ?",
            "sql": "select dorm.student_capacity where dorm.student_capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name"
    },
    "interaction": [
        {
            "utterance": "Find the name of the amenities that Smith Hall dorm has .",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value"
        },
        {
            "utterance": "Order that by amenity name please ?",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value order_by dorm_amenity.amenity_name"
        },
        {
            "utterance": "What are the amenity id of those ?",
            "sql": "select has_amenity.amenid where dorm.dorm_name = value order_by dorm_amenity.amenity_name"
        },
        {
            "utterance": "What dorm id have the amenity id 901 ?",
            "sql": "select has_amenity.dormid where has_amenity.amenid = value"
        },
        {
            "utterance": "What dorm id have the amenity id 904 ?",
            "sql": "select has_amenity.dormid where has_amenity.amenid = value"
        },
        {
            "utterance": "What dorm id have the amenity id 922 ?",
            "sql": "select has_amenity.dormid where has_amenity.amenid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid"
    },
    "interaction": [
        {
            "utterance": "I need the number of amenities for the dorms that can accommodate more than 100 students | Are you asking for the number of distinct amenities for dorms whose student capacity is greater than 100 ? | yes",
            "sql": "select count ( distinct has_amenity.amenid ) , dorm.dormid where dorm.student_capacity > value group_by dorm.dormid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of female students (with F sex) living in Smith Hall",
        "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "How about the total number of dorms ?",
            "sql": "select count ( dorm.* )"
        },
        {
            "utterance": "Can you list their names ?",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "How many students live in Smith Hall ?",
            "sql": "select count ( * ) where dorm.dorm_name = value"
        },
        {
            "utterance": "How many of them are females ?",
            "sql": "select count ( * ) where dorm.dorm_name = value and student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the dorms ?",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "Which of those dorms have a TV Lounge ?",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "What dorms have no Study Room as an amenity ? | Do you mean among those with a TV Lounge ? | Yes .",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value except select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "And the gender that is housed ?",
            "sql": "select dorm.dorm_name , dorm.gender where dorm_amenity.amenity_name = value except select dorm.dorm_name , dorm.gender where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "Are there any other amenities that the dorm features ? | For this dorm ? Or for all dorms ? | For this dorm .",
            "sql": "select dorm.dorm_name , dorm_amenity.amenity_name where dorm.dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"
    },
    "interaction": [
        {
            "utterance": "list all job ids",
            "sql": "select distinct employees.job_id"
        },
        {
            "utterance": "what are the hire dates for all the jobs ?",
            "sql": "select employees.hire_date"
        },
        {
            "utterance": "list all the phone numbers",
            "sql": "select distinct employees.phone_number"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 1,
    "final": {
        "utterance": "display the average salary of employees for each department who gets a commission percentage.",
        "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
    },
    "interaction": [
        {
            "utterance": "Which departments get a commission percentage ?",
            "sql": "select employees.* where employees.commission_pct != value"
        },
        {
            "utterance": "How many employees in these departments get a commission percentage ?",
            "sql": "select count ( employees.* ) where employees.commission_pct != value"
        },
        {
            "utterance": "By department , display average salary of employees who get a commission percentage",
            "sql": "select employees.department_id , avg ( employees.salary ) where employees.commission_pct != value group_by employees.department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 2,
    "final": {
        "utterance": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.",
        "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all employee IDs and their corresponding salaries ?",
            "sql": "select employees.employee_id , employees.salary"
        },
        {
            "utterance": "Awesome ! That 's great ! Can you filter this list to show only the employee IDs and correpsonding salaries that are above the average salary ?",
            "sql": "select employees.employee_id , employees.salary where employees.salary > ( select avg ( employees.salary ) )"
        },
        {
            "utterance": "Great ! Now can you display this list to include both the first and last name corresponding to each employee ID ?",
            "sql": "select employees.employee_id , employees.first_name , employees.last_name , employees.salary where employees.salary > ( select avg ( employees.salary ) )"
        },
        {
            "utterance": "Thank you so much for that ! Can you filter this list to show only the rows in which the employee works in a department which has an employee with the letter J in their name ?",
            "sql": "select employees.employee_id , employees.first_name , employees.last_name , employees.salary where employees.salary > ( select avg ( employees.salary ) ) and employees.department_id in ( select employees.department_id where employees.first_name like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 3,
    "final": {
        "utterance": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    "interaction": [
        {
            "utterance": "Display the first name of all employees .",
            "sql": "select employees.first_name"
        },
        {
            "utterance": "Show the first name of all employees and their salary .",
            "sql": "select employees.first_name , employees.salary"
        },
        {
            "utterance": "Show the first name of all employees and their salary for employees whose first name does not contain the letter M .",
            "sql": "select employees.first_name , employees.salary where employees.first_name not like value"
        },
        {
            "utterance": "Show the first name of all employees and list their salary in descending order for employees whose first name does not contain the letter M .",
            "sql": "select employees.first_name , employees.salary where employees.first_name not like value order_by employees.salary desc"
        },
        {
            "utterance": "Out of these employees what is the phone number for the employee with the highest salary .",
            "sql": "select employees.phone_number where employees.first_name not like value order_by employees.salary desc limit_value"
        },
        {
            "utterance": "What is the email for the employee whose first name does not contain the letter M with the highest salary .",
            "sql": "select employees.email where employees.first_name not like value order_by employees.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )"
    },
    "interaction": [
        {
            "utterance": "How much is the salary for employee id 163 ?",
            "sql": "select employees.salary where employees.employee_id = value"
        },
        {
            "utterance": "What is employee id 163 full name ?",
            "sql": "select employees.first_name , employees.last_name where employees.employee_id = value"
        },
        {
            "utterance": "Show me the full name for the employees that get more salary then employee 163 ?",
            "sql": "select employees.first_name , employees.last_name where employees.salary > ( select employees.salary where employees.employee_id = value )"
        },
        {
            "utterance": "What department does employee 163 work under ?",
            "sql": "select employees.department_id where employees.employee_id = value"
        },
        {
            "utterance": "How many employee 's work for employee 's 163 department ?",
            "sql": "select count ( employees.* ) where employees.department_id = ( select employees.department_id where employees.employee_id = value )"
        },
        {
            "utterance": "Who is the head of this department ?",
            "sql": "select distinct employees.manager_id where employees.department_id = ( select employees.department_id where employees.employee_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 5,
    "final": {
        "utterance": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")"
    },
    "interaction": [
        {
            "utterance": "Show me all the employees in the same department as Clara . | Here is all the information of all the employees in the same department as the employee with a first name Clara . | Can you show me their hire dates ?",
            "sql": "select employees.hire_date where employees.department_id = ( select employees.department_id where employees.first_name = value )"
        },
        {
            "utterance": "What is their average salary ?",
            "sql": "select avg ( employees.salary ) where employees.department_id = ( select employees.department_id where employees.first_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 6,
    "final": {
        "utterance": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'"
    },
    "interaction": [
        {
            "utterance": "Can you show me the first and last names of all employees who work in any department located in London please ?",
            "sql": "select employees.first_name , employees.last_name where locations.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the first name and job id for all employees in the Finance department?",
        "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'"
    },
    "interaction": [
        {
            "utterance": "What is the department id for the Finance department ?",
            "sql": "select departments.department_id where departments.department_name = value"
        },
        {
            "utterance": "How many employees work in that department ?",
            "sql": "select count ( * ) where departments.department_name = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select employees.first_name where departments.department_name = value"
        },
        {
            "utterance": "What is the job id for each employee in the Finance department ?",
            "sql": "select employees.job_id where departments.department_name = value"
        },
        {
            "utterance": "What are their employee IDs ?",
            "sql": "select employees.employee_id where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 8,
    "final": {
        "utterance": "display all the information of those employees who did not have any job in the past.",
        "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
    },
    "interaction": [
        {
            "utterance": "List all employees ?",
            "sql": "select employees.first_name , employees.last_name"
        },
        {
            "utterance": "Of these employees , how many did not have a job in the past ?",
            "sql": "select count ( employees.* ) where employees.employee_id not in ( select job_history.employee_id )"
        },
        {
            "utterance": "Okay . How many had jobs in the past ?",
            "sql": "select count ( employees.* ) where employees.employee_id in ( select job_history.employee_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"
    },
    "interaction": [
        {
            "utterance": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments .",
            "sql": "select employees.first_name , employees.last_name , employees.department_id where employees.salary in ( select min ( employees.salary ) group_by employees.department_id )"
        },
        {
            "utterance": "Which of those has the highest salary ?",
            "sql": "select employees.first_name , employees.last_name , employees.department_id where employees.salary in ( select max ( employees.salary ) group_by employees.department_id )"
        },
        {
            "utterance": "Of the people who earn the smallest salary in each department , who has the highest salary ? | do you mean the first name and last name and department id for the people ? | yes",
            "sql": "select employees.first_name , employees.last_name order_by employees.salary desc limit_value"
        },
        {
            "utterance": "Give me their salary and their manager 's salary | do you mean the salary and manager 's salary of all people ? | Give me the name and salary of the highest paid employee and their manager",
            "sql": "select employees.first_name , employees.last_name , employees.salary , employees.manager_id order_by employees.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 10,
    "final": {
        "utterance": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
    },
    "interaction": [
        {
            "utterance": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50 .",
            "sql": "select employees.email where employees.commission_pct = value and employees.salary between value and value and employees.department_id = value"
        },
        {
            "utterance": "display the emails of the employees who have no commission percentage",
            "sql": "select employees.email where employees.commission_pct = value"
        },
        {
            "utterance": "display the emails of the employees who have a commission percentage | Did you mean the employees who have commission percentage more than 0 ? | yes",
            "sql": "select employees.email where employees.commission_pct > value"
        },
        {
            "utterance": "How many employees with salary above 12000 are there ?",
            "sql": "select count ( employees.* ) where employees.salary > value"
        },
        {
            "utterance": "List their names please | Did you mean their FIRST NAME and LAST NAME ? | yes",
            "sql": "select employees.first_name , employees.last_name where employees.salary > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 11,
    "final": {
        "utterance": "display the department name and number of employees in each of the department.",
        "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"
    },
    "interaction": [
        {
            "utterance": "create a table with a column for department id and a column for department name",
            "sql": "select departments.department_id , departments.department_name"
        },
        {
            "utterance": "Show the total number of employee ids for each department id",
            "sql": "select departments.department_id , count ( * ) where departments.department_id = employees.department_id group_by departments.department_id"
        },
        {
            "utterance": "Add a column with department name",
            "sql": "select departments.department_id , departments.department_name , count ( * ) where departments.department_id = employees.department_id group_by departments.department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 12,
    "final": {
        "utterance": "when is the hire date for those employees whose first name does not containing the letter M?",
        "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    "interaction": [
        {
            "utterance": "How many employees first names contain the letter M ?",
            "sql": "select count ( employees.* ) where employees.first_name like value"
        },
        {
            "utterance": "What are the names of those employees ? | Do you mean the first name and last name of those employees ? | Yes .",
            "sql": "select employees.first_name , employees.last_name where employees.first_name like value"
        },
        {
            "utterance": "How many employees first names do not contain the letter M ?",
            "sql": "select count ( employees.* ) where employees.first_name not like value"
        },
        {
            "utterance": "What are their full names ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name not like value"
        },
        {
            "utterance": "When were they hired ?",
            "sql": "select employees.hire_date where employees.first_name not like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
    },
    "interaction": [
        {
            "utterance": "Which department IDs have manager ids that are from 0-100 ?",
            "sql": "select departments.department_id where departments.manager_id > = value and departments.manager_id < = value"
        },
        {
            "utterance": "What about from 100 - 200 ?",
            "sql": "select departments.department_id where departments.manager_id > = value and departments.manager_id < = value"
        },
        {
            "utterance": "What are the employee ids who work in those departments ?",
            "sql": "select employees.employee_id where employees.department_id in ( select departments.department_id where departments.manager_id between value and value )"
        },
        {
            "utterance": "What about employees who do n't work with employees in those departments ?",
            "sql": "select employees.* where employees.department_id not in ( select departments.department_id where departments.manager_id between value and value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 14,
    "final": {
        "utterance": "display job title and average salary of employees.",
        "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"
    },
    "interaction": [
        {
            "utterance": "Which employee is the highest paid ?",
            "sql": "select employees.* order_by employees.salary desc limit_value"
        },
        {
            "utterance": "Which is the employee with the lowest pay ?",
            "sql": "select employees.* order_by employees.salary limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
    },
    "interaction": [
        {
            "utterance": "Could you please display the first and last names of all employees whose first names end in the letter `` m '' ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name like value"
        },
        {
            "utterance": "What are their hire dates ?",
            "sql": "select employees.first_name , employees.hire_date where employees.first_name like value"
        },
        {
            "utterance": "What commission pct do they get ?",
            "sql": "select employees.commission_pct where employees.first_name like value"
        },
        {
            "utterance": "What is the name of the person who gets the highest pct commission ?",
            "sql": "select employees.first_name , employees.last_name order_by employees.commission_pct desc limit_value"
        },
        {
            "utterance": "What is the hire date of the person who gets the lowest pct commission ?",
            "sql": "select employees.hire_date order_by employees.commission_pct asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 16,
    "final": {
        "utterance": "display the department id and the total salary for those departments which contains at least two employees.",
        "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "display the department id and the total salary for those departments which contains at least two employees .",
            "sql": "select employees.department_id , sum ( employees.salary ) group_by employees.department_id having count ( employees.* ) > = value"
        },
        {
            "utterance": "What are the first and last names of employees in department id 90 ?",
            "sql": "select employees.first_name , employees.last_name where employees.department_id = value"
        },
        {
            "utterance": "What department id is Steven King in ?",
            "sql": "select employees.department_id where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "What is Steven King 's Salary and Job id ?",
            "sql": "select employees.job_id , employees.salary where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "What is the highest salary and what employee id has it ?",
            "sql": "select employees.employee_id , employees.salary order_by employees.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 17,
    "final": {
        "utterance": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"
    },
    "interaction": [
        {
            "utterance": "HoW MANY employees have the letter z in their first name ?",
            "sql": "select count ( employees.* ) where employees.first_name like value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select employees.first_name where employees.first_name like value"
        },
        {
            "utterance": "What about their last names ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name like value"
        },
        {
            "utterance": "Can you also show their cities ?",
            "sql": "select employees.first_name , employees.last_name , locations.city where employees.first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 18,
    "final": {
        "utterance": "display the first and last name, department, city, and state province for each employee.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id"
    },
    "interaction": [
        {
            "utterance": "Could you please display the first name and last name of each employee ?",
            "sql": "select employees.first_name , employees.last_name"
        },
        {
            "utterance": "Could you add in their departments please ?",
            "sql": "select employees.first_name , employees.last_name , departments.department_name"
        },
        {
            "utterance": "Could you also list their cities and state provinces ?",
            "sql": "select employees.first_name , employees.last_name , departments.department_name , locations.city , locations.state_province"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 19,
    "final": {
        "utterance": "display those departments where more than ten employees work who got a commission percentage.",
        "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10"
    },
    "interaction": [
        {
            "utterance": "hi ! how many employees are there that get a commission percentage ?",
            "sql": "select count ( distinct employees.employee_id ) where employees.commission_pct > value"
        },
        {
            "utterance": "How many departments have more than ten employees who got a commission ?",
            "sql": "select count ( employees.* ) ( select employees.department_id group_by employees.department_id having count ( employees.commission_pct ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 20,
    "final": {
        "utterance": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )"
    },
    "interaction": [
        {
            "utterance": "Could you tell me how many employees have the job title PU_MAN ?",
            "sql": "select count ( employees.* ) where employees.job_id = value"
        },
        {
            "utterance": "What is the salary of that employee ?",
            "sql": "select employees.salary where employees.job_id = value"
        },
        {
            "utterance": "How many employees have a higher salary than that ?",
            "sql": "select count ( employees.* ) where employees.salary > ( select employees.salary where employees.job_id = value )"
        },
        {
            "utterance": "Tell me their employee numbers , first and last names , and job titles , please .",
            "sql": "select employees.employee_id , employees.first_name , employees.last_name , employees.job_id where employees.salary > ( select max ( employees.salary ) where employees.job_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 21,
    "final": {
        "utterance": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    "interaction": [
        {
            "utterance": "show me the first and last names of employees whose first name does not contain letter M",
            "sql": "select employees.first_name , employees.last_name where employees.first_name not like value"
        },
        {
            "utterance": "show me the full name , hire date , salary and department number of these employees",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date , employees.salary , employees.department_id where employees.first_name not like value"
        },
        {
            "utterance": "Set this result in ascending order of department number",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date , employees.salary , employees.department_id where employees.first_name not like value order_by employees.department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 22,
    "final": {
        "utterance": "display job title and average salary of employees.",
        "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"
    },
    "interaction": [
        {
            "utterance": "hi , what is the president min salary ?",
            "sql": "select jobs.min_salary where jobs.job_title = value"
        },
        {
            "utterance": "what is the president max salary ?",
            "sql": "select jobs.max_salary where jobs.job_title = value"
        },
        {
            "utterance": "what is name of employee id 100 ? | Did you mean the first name or last name of employee id 100 ? | first",
            "sql": "select employees.first_name where employees.employee_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the first and last name for those employees who works either in department 70 or 90?",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    "interaction": [
        {
            "utterance": "Hi what are the first and last name for those employees who works either in department 70 or 90 ?",
            "sql": "select employees.first_name , employees.last_name where employees.department_id = value or employees.department_id = value"
        },
        {
            "utterance": "What is steven king 's phone number",
            "sql": "select employees.phone_number where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "What is Steven King Employee ID number",
            "sql": "select employees.employee_id where employees.first_name = value and employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 24,
    "final": {
        "utterance": "display the department id and the total salary for those departments which contains at least two employees.",
        "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( employees.* )"
        },
        {
            "utterance": "what is the salary of the employee id 101",
            "sql": "select employees.salary where employees.employee_id = value"
        },
        {
            "utterance": "what is the phone number of 102",
            "sql": "select employees.phone_number where employees.employee_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 25,
    "final": {
        "utterance": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
    },
    "interaction": [
        {
            "utterance": "Everything , please . I can see it in the table there . It 's correct . Can you order it by salary in descending order ? | Do you mean the employees who have the letters D or S in their first names ? | In their first name , yes . Sorry . I misunderstood .",
            "sql": "select employees.* where employees.first_name like value or employees.first_name like value"
        },
        {
            "utterance": "Can you organize the list by salary in descending order ?",
            "sql": "select employees.* where employees.first_name like value or employees.first_name like value order_by employees.salary desc"
        },
        {
            "utterance": "Can you list the first and last names of employees who were hired after 1987 ?",
            "sql": "select employees.first_name , employees.last_name where employees.hire_date > value"
        },
        {
            "utterance": "What are their salaries ? Please order the table in ascending order by salary ,",
            "sql": "select employees.salary where employees.hire_date > value order_by employees.salary"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the first and last name for those employees who works either in department 70 or 90?",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    "interaction": [
        {
            "utterance": "What are the first and last name for those employees who works either in department 70 or 90 ?",
            "sql": "select employees.first_name , employees.last_name where employees.department_id = value or employees.department_id = value"
        },
        {
            "utterance": "Please show me the list of the department",
            "sql": "select distinct employees.department_id"
        },
        {
            "utterance": "Who make the highest salary on the department ?",
            "sql": "select employees.first_name , employees.last_name order_by employees.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 27,
    "final": {
        "utterance": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    "interaction": [
        {
            "utterance": "What are the employees whose first name does not containing the letter M ?",
            "sql": "select employees.first_name where employees.first_name not like value"
        },
        {
            "utterance": "Display the full name , hire date , salaer , and department member of the above results .",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date , employees.salary , employees.department_id where employees.first_name not like value"
        },
        {
            "utterance": "Sort the results in ascending order by department . number .",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date , employees.salary , employees.department_id where employees.first_name not like value order_by employees.department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 28,
    "final": {
        "utterance": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many total employees are on this list ?",
            "sql": "select count ( distinct employees.employee_id )"
        },
        {
            "utterance": "Very good ! Can display a list of all of the employees first names which contain a letter Z in their first name ? | which colums to return ? | Oh thanks ! You went ahead and added the last name and city ! Could you also add to this list which country each of these people live in ?",
            "sql": "select employees.first_name , employees.last_name , locations.city , locations.country_id where employees.first_name like value"
        },
        {
            "utterance": "Thanks ! That City and Country ID for Elizabeth is unusual ... Can you please show her street address and state province ?",
            "sql": "select employees.first_name , employees.last_name , locations.city , locations.country_id , locations.street_address , locations.state_province where employees.first_name like value and employees.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 29,
    "final": {
        "utterance": "display the employee id and salary of all employees who report to Payam (first name).",
        "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )"
    },
    "interaction": [
        {
            "utterance": "Display the employee ID and salary of all employees who report to payam ( First name )",
            "sql": "select employees.employee_id , employees.salary where employees.manager_id = ( select employees.employee_id where employees.first_name = value )"
        },
        {
            "utterance": "What is the highest salary ? who did earn it",
            "sql": "select employees.* order_by employees.salary desc limit_value"
        },
        {
            "utterance": "What is the lowest salary ? who did earn it",
            "sql": "select employees.* order_by employees.salary limit_value"
        },
        {
            "utterance": "What is the name of the following phone number 515.123.4569 ? Tell me Employer ID",
            "sql": "select employees.employee_id , employees.first_name , employees.last_name where employees.phone_number = value"
        },
        {
            "utterance": "Who is the senior employee and tell me first name ? Tell me the hire date | What do you mean by senior employee ? | What is the lowest hire date ? tell me the first name .",
            "sql": "select employees.first_name , employees.hire_date order_by employees.hire_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 30,
    "final": {
        "utterance": "display the department name and number of employees in each of the department.",
        "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"
    },
    "interaction": [
        {
            "utterance": "hi . show me the names of all of the departments",
            "sql": "select departments.department_name"
        },
        {
            "utterance": "can you please display only the department names with the number of employees in each one ?",
            "sql": "select departments.department_name , count ( * ) group_by departments.department_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 31,
    "final": {
        "utterance": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.",
        "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )"
    },
    "interaction": [
        {
            "utterance": "Display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN",
            "sql": "select employees.employee_id , employees.job_id where employees.salary < ( select min ( employees.salary ) where employees.job_id = value )"
        },
        {
            "utterance": "Show me salaries for those employees",
            "sql": "select employees.salary where employees.salary < ( select min ( employees.salary ) where employees.job_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "Which customers have ordered `` food '' ? | ok , did you want to just return their names ? | Yes . I just want to know the names of which customers have placed orders under the category `` food ''",
            "sql": "select customers.customer_name where products.product_name = value"
        },
        {
            "utterance": "Of the names listed in the table , which of them have an item status listed as `` cancel '' ?",
            "sql": "select customers.customer_name where order_items.order_item_status = value and products.product_name = value group_by customers.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "How many customers have cancelled orders ? | Do you mean the customers in the previous result ? | yes",
            "sql": "select count ( customers.customer_name ) where order_items.order_item_status = value and products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the customer who has the largest number of orders?",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many orders are there ?",
            "sql": "select count ( orders.* )"
        },
        {
            "utterance": "How many different customers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "What is the name of the customer who has the largest number of orders ?",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 2,
    "final": {
        "utterance": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
    },
    "interaction": [
        {
            "utterance": "Can you tell me which customers placed orders between 2009-01-01 and 2010-0101 ? | do you want the id or the name of the customer ? | The names",
            "sql": "select customers.customer_name where orders.date_order_placed > = value and orders.date_order_placed < = value"
        },
        {
            "utterance": "How many customers placed orders before George ?",
            "sql": "select count ( customers.customer_name ) where orders.date_order_placed < ( select orders.date_order_placed where customers.customer_name = value order_by orders.date_order_placed limit_value )"
        },
        {
            "utterance": "What is the status of George 's order ?",
            "sql": "select orders.order_status where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name of the customer who has the most orders?",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which customers placed an order",
            "sql": "select customers.* where customers.customer_id in ( select orders.customer_id )"
        },
        {
            "utterance": "who has the most orders ? | Do you want just the customer name ? | yes",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""
    },
    "interaction": [
        {
            "utterance": "Yes , from that list can I have it sorted by order ID ? | Did you mean in the Order table order by order id ? desc or asc ? | My apologies , I meant can I have list of orders which includes the product ids from the orders placed ?",
            "sql": "select orders.order_id , order_items.product_id"
        },
        {
            "utterance": "Yes , can I narrow the table based on the date order was placed ? | Did you mean you just want only date order placed ? | No . Is it possible to only receive results from orders placed from 1975-01-01 to 1976-01-01 ?",
            "sql": "select orders.order_id , order_items.product_id , orders.date_order_placed where orders.date_order_placed > = value and orders.date_order_placed < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the id of the order which is shipped most recently.",
        "sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)"
    },
    "interaction": [
        {
            "utterance": "Can I have the dates for all the shipments ?",
            "sql": "select shipments.shipment_date"
        },
        {
            "utterance": "Which of these dates occurred most recently ?",
            "sql": "select shipments.shipment_date order_by shipments.shipment_date desc limit_value"
        },
        {
            "utterance": "What is the shipment id for the shipment with this shipment date ?",
            "sql": "select shipments.shipment_id where shipments.shipment_date = ( select max ( shipments.shipment_date ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the customers who have at most two orders.",
        "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "How many customers have two orders or less",
            "sql": "select count ( * ) ( select customers.customer_name group_by customers.customer_id having count ( * ) < = value )"
        },
        {
            "utterance": "How many total customer are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "Of the customers with two orders or less , what are their names ?",
            "sql": "select customers.customer_name group_by customers.customer_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
    },
    "interaction": [
        {
            "utterance": "Can you show me the invoice numbers which are created before 1989-09-03 ?",
            "sql": "select invoices.invoice_number where invoices.invoice_date < value"
        },
        {
            "utterance": "What about the invoice numbers which are created after 2007-12-25 ?",
            "sql": "select invoices.invoice_number where invoices.invoice_date > value"
        },
        {
            "utterance": "Hmm , can you list the invoice numbers which are created before 1989-09-03 or after 2007-12-25 ?",
            "sql": "select invoices.invoice_number where invoices.invoice_date < value or invoices.invoice_date > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the customer id of the customer who has the most orders?",
        "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many total orders do we have ?",
            "sql": "select count ( orders.* )"
        },
        {
            "utterance": "What is the total number of customers ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "What are their customer id 's ?",
            "sql": "select customers.customer_id"
        },
        {
            "utterance": "What was the amount of orders for the customer that had that most orders ?",
            "sql": "select count ( * ) group_by customers.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Which customer had 3 orders ?",
            "sql": "select * group_by customers.customer_id having count ( * ) = value"
        },
        {
            "utterance": "What is the customer id for George ?",
            "sql": "select customers.customer_id where customers.customer_name = value"
        },
        {
            "utterance": "And for Jeramie ?",
            "sql": "select customers.customer_id where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the id of the most recent order?",
        "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the order status of the most recent order ?",
            "sql": "select orders.order_status order_by orders.date_order_placed desc limit_value"
        },
        {
            "utterance": "Can you just list the id of the most recent order ?",
            "sql": "select orders.order_id order_by orders.date_order_placed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of the customers who have at most two orders.",
        "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "what is the customer name of customer id 1",
            "sql": "select customers.customer_name where customers.customer_id = value"
        },
        {
            "utterance": "what is the customer name of customer id 2",
            "sql": "select customers.customer_name where customers.customer_id = value"
        },
        {
            "utterance": "what is the customer name of customer id 3",
            "sql": "select customers.customer_name where customers.customer_id = value"
        },
        {
            "utterance": "find the name of the customers who have at most two orders",
            "sql": "select customers.customer_name group_by customers.customer_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    "interaction": [
        {
            "utterance": "Hello ! How many customers have an order status of `` On Road '' ?",
            "sql": "select count ( * ) where orders.order_status = value"
        },
        {
            "utterance": "Great ! Of those 8 customers , how many also have the status of `` Shipped '' ?",
            "sql": "select count ( * ) ( select customers.customer_name where orders.order_status = value intersect select customers.customer_name where orders.order_status = value )"
        },
        {
            "utterance": "Can you please list the name of that 1 customer please ?",
            "sql": "select customers.customer_name where orders.order_status = value intersect select customers.customer_name where orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""
    },
    "interaction": [
        {
            "utterance": "Find the customer id of Savannah ?",
            "sql": "select customers.customer_id where customers.customer_name = value"
        },
        {
            "utterance": "Which date of order placed in Alberto ?",
            "sql": "select orders.date_order_placed where customers.customer_name = value"
        },
        {
            "utterance": "What are the customer details of order id 2 ?",
            "sql": "select customers.customer_details where customers.customer_id = value"
        },
        {
            "utterance": "Find the details of all distinct customers who have orders with status `` On Road '' .",
            "sql": "select distinct customers.customer_details where orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 13,
    "final": {
        "utterance": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many orders each customer have ?",
            "sql": "select orders.customer_id , count ( orders.* ) group_by orders.customer_id"
        },
        {
            "utterance": "Can you provide me with the list of id and status of orders of the customer named `` Jeramie '' ?",
            "sql": "select orders.order_id , orders.order_status where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 14,
    "final": {
        "utterance": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
    },
    "interaction": [
        {
            "utterance": "When was the order with the tracking number 3452 placed ? | Did you want the order id of the order with shipment tracking number 3452 ? | Okay , tell me the order ID of that tracking number .",
            "sql": "select orders.order_id where shipments.shipment_tracking_number = value"
        },
        {
            "utterance": "Thank you , what is the shipment date of order id 5 ?",
            "sql": "select shipments.shipment_date where shipments.order_id = value"
        },
        {
            "utterance": "What was the date when order id 5 was placed ?",
            "sql": "select orders.date_order_placed where orders.order_id = value"
        },
        {
            "utterance": "How about the order with invoice number 13 , when was that order placed ?",
            "sql": "select orders.date_order_placed where shipments.invoice_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 15,
    "final": {
        "utterance": "List the names of the customers who have once bought product \"food\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "What is the product ID for food ?",
            "sql": "select products.product_id where products.product_name = value"
        },
        {
            "utterance": "What are the order IDs that have those product IDs ?",
            "sql": "select order_items.order_id where products.product_id = order_items.product_id and products.product_name = value"
        },
        {
            "utterance": "What customer IDs have those order IDs ?",
            "sql": "select orders.customer_id where products.product_id = order_items.product_id and products.product_name = value and orders.order_id = order_items.order_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the placement date of the order whose invoice number is 10?",
        "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
    },
    "interaction": [
        {
            "utterance": "show a list of the invoice numbers",
            "sql": "select shipments.invoice_number"
        },
        {
            "utterance": "add a column for order id",
            "sql": "select shipments.invoice_number , shipments.order_id"
        },
        {
            "utterance": "show the date order placed for order id 9",
            "sql": "select orders.date_order_placed where orders.order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 17,
    "final": {
        "utterance": "List the names of the customers who have once bought product \"food\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "list out the customers name",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "show all the customer details",
            "sql": "select customers.customer_details"
        },
        {
            "utterance": "what is the order status of George",
            "sql": "select orders.order_status where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 18,
    "final": {
        "utterance": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
    },
    "interaction": [
        {
            "utterance": "List the name of all the distinct customers who have ordered with status `` packing ''",
            "sql": "select distinct customers.customer_name where orders.order_status = value"
        },
        {
            "utterance": "may i have the dates of their orders please ?",
            "sql": "select distinct orders.date_order_placed where orders.order_status = value"
        },
        {
            "utterance": "may i have the order ids please",
            "sql": "select orders.order_id where orders.order_status = value"
        },
        {
            "utterance": "may i have the customer ids please",
            "sql": "select orders.customer_id where orders.order_status = value"
        },
        {
            "utterance": "may i have the order ids please ? | Did you mean their order ids ? | yes",
            "sql": "select orders.order_id where orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 19,
    "final": {
        "utterance": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which customers made at least two orders ?",
            "sql": "select * , count ( * ) group_by customers.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "How many orders did George make ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        },
        {
            "utterance": "How many did Beulah make ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 20,
    "final": {
        "utterance": "List the name and count of each product in all orders.",
        "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
    },
    "interaction": [
        {
            "utterance": "how many products there",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "how many orders there",
            "sql": "select count ( orders.* )"
        },
        {
            "utterance": "what is the name of product id 1",
            "sql": "select products.product_name where products.product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the id of the order which has the most items?",
        "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many orders there",
            "sql": "select count ( orders.* )"
        },
        {
            "utterance": "what is the date order placed of order id 2",
            "sql": "select orders.date_order_placed where orders.order_id = value"
        },
        {
            "utterance": "how many order Items there",
            "sql": "select count ( order_items.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 22,
    "final": {
        "utterance": "what are the order id and customer id of the oldest order?",
        "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the ID of the oldest customer ?",
            "sql": "select orders.customer_id order_by orders.date_order_placed limit_value"
        },
        {
            "utterance": "what about the newest customer ?",
            "sql": "select orders.customer_id order_by orders.date_order_placed desc limit_value"
        },
        {
            "utterance": "What is the order status of the order for customer with ID 11",
            "sql": "select orders.order_status where orders.customer_id = value"
        },
        {
            "utterance": "What date did customer with ID 11 place an order ?",
            "sql": "select orders.date_order_placed where orders.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the average prices of all products from each manufacture, and list each company's name.",
        "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( products.price )"
        },
        {
            "utterance": "And what is the average price for each company ?",
            "sql": "select avg ( products.price ) , products.manufacturer group_by products.manufacturer"
        },
        {
            "utterance": "What are all companies names ?",
            "sql": "select manufacturers.name"
        },
        {
            "utterance": "And what are their headquarters ?",
            "sql": "select manufacturers.name , manufacturers.headquarter"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the founder of the company whose name begins with the letter 'S'.",
        "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "How many companies are there ?",
            "sql": "select count ( manufacturers.* )"
        },
        {
            "utterance": "What are their founder names ?",
            "sql": "select manufacturers.name"
        },
        {
            "utterance": "Show founder names that begin with letter `` S '' | Did you mean founder \u2018 s name that begin with letter 'S ' ? | yes",
            "sql": "select manufacturers.founder where manufacturers.founder like value"
        },
        {
            "utterance": "Ok , than show all companies headquarters",
            "sql": "select manufacturers.headquarter"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the founder of the company whose name begins with the letter 'S'.",
        "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please provide me with the name of the founder for Sony ?",
            "sql": "select manufacturers.founder where manufacturers.name = value"
        },
        {
            "utterance": "Thanks ! What city is the headquarters of Sony located in ?",
            "sql": "select manufacturers.headquarter where manufacturers.name = value"
        },
        {
            "utterance": "What was Sony 's revenue ?",
            "sql": "select manufacturers.revenue where manufacturers.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "What are the names of all companies whose revenue is smaller than the revenue of all companies based in Austin ?",
            "sql": "select manufacturers.name where manufacturers.revenue < ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        },
        {
            "utterance": "What are the companies ' revenues whose revenue is smaller than the revenue of all companies based in Austin ?",
            "sql": "select manufacturers.revenue where manufacturers.revenue < ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        },
        {
            "utterance": "What is the numerical value of those two companies ' revenues ?",
            "sql": "select manufacturers.name , manufacturers.revenue where manufacturers.revenue < ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        },
        {
            "utterance": "What are the names of all companies whose revenue is larger than the revenue of all companies based in Austin ?",
            "sql": "select manufacturers.name where manufacturers.revenue > ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        },
        {
            "utterance": "What are the numerical values of their revenues , please ?",
            "sql": "select manufacturers.name , manufacturers.revenue where manufacturers.revenue > ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
    },
    "interaction": [
        {
            "utterance": "how many names or products in the table | Do you mean the names of products in the products table | how many headquarter in the Manufacturers table",
            "sql": "select count ( manufacturers.headquarter )"
        },
        {
            "utterance": "how many revenue in the Manufacturers table | Do you mean the sum of revenue in the Manufacturers table | what highest price in the Products table",
            "sql": "select max ( products.price )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "Can you list all companies based in Austin and their revenues ?",
            "sql": "select manufacturers.name , manufacturers.revenue where manufacturers.headquarter = value"
        },
        {
            "utterance": "Can you list all companies whose revenue is less than 100 ?",
            "sql": "select manufacturers.name where manufacturers.revenue < value"
        },
        {
            "utterance": "Thanks ! What is the respective revenues of Hewlett-Packard and Winchester ?",
            "sql": "select manufacturers.name , manufacturers.revenue where manufacturers.revenue < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'"
    },
    "interaction": [
        {
            "utterance": "Who the founder of Sony ? | Did you mean the founder of the manufacturer named Sony ? | Yes",
            "sql": "select manufacturers.founder where manufacturers.name = value"
        },
        {
            "utterance": "Which company is headed by Austin city ? | Did you mean the name of manufacturers whose headquarters are Austin ? | Yes",
            "sql": "select manufacturers.name where manufacturers.headquarter = value"
        },
        {
            "utterance": "What are the revenue of manufacture name Hewlett-Packard ?",
            "sql": "select manufacturers.revenue where manufacturers.name = value"
        },
        {
            "utterance": "Find the number of manufactures that are based in Tokyo or Beijing .",
            "sql": "select count ( manufacturers.* ) where manufacturers.headquarter = value or manufacturers.headquarter = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the average, maximum and total revenues of all companies?",
        "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"
    },
    "interaction": [
        {
            "utterance": "what are the average revenues of all compaies ?",
            "sql": "select avg ( manufacturers.revenue )"
        },
        {
            "utterance": "what are the maximum revenues of all companies ?",
            "sql": "select max ( manufacturers.revenue )"
        },
        {
            "utterance": "what are the total revenues of all companies ?",
            "sql": "select sum ( manufacturers.revenue )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "List names of each manufacturer ?",
            "sql": "select manufacturers.name"
        },
        {
            "utterance": "Name of each manufacturer 's product ?",
            "sql": "select products.name , manufacturers.name"
        },
        {
            "utterance": "Price of each manufacturer 's product ?",
            "sql": "select products.price"
        },
        {
            "utterance": "Which product is the most expensive ?",
            "sql": "select products.name order_by products.price desc limit_value"
        },
        {
            "utterance": "Name of each manufacturer along with the name and price of its most expensive product ?",
            "sql": "select products.name , max ( products.price ) , manufacturers.name group_by manufacturers.name"
        },
        {
            "utterance": "What of their least expensive product ?",
            "sql": "select products.name , min ( products.price ) , manufacturers.name group_by manufacturers.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
    },
    "interaction": [
        {
            "utterance": "what is the average price among all products ?",
            "sql": "select avg ( products.price )"
        },
        {
            "utterance": "which products have a price higher than or equal to $ 150 ?",
            "sql": "select products.* where products.price > = value"
        },
        {
            "utterance": "what are the names of the manufacturers of those products ?",
            "sql": "select manufacturers.name where products.price > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
        "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of headquarters ?",
            "sql": "select manufacturers.headquarter"
        },
        {
            "utterance": "can you show me list of founders ?",
            "sql": "select manufacturers.founder"
        },
        {
            "utterance": "can you show me an average of revenue ?",
            "sql": "select avg ( manufacturers.revenue )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
        "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the manufacturer that has the highest revenue ?",
            "sql": "select manufacturers.name order_by manufacturers.revenue desc limit_value"
        },
        {
            "utterance": "What is the name of the manufacturer that has the third lowest revenue ?",
            "sql": "select manufacturers.name order_by manufacturers.revenue asc limit_value , value"
        },
        {
            "utterance": "Who is the founder of Creative Labs ?",
            "sql": "select manufacturers.founder where manufacturers.name = value"
        },
        {
            "utterance": "What is the average revenue of all manufacturers ?",
            "sql": "select avg ( manufacturers.revenue )"
        },
        {
            "utterance": "What is the name of the founder of the manufacturer that has the highest revenue ?",
            "sql": "select manufacturers.founder order_by manufacturers.revenue desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"
    },
    "interaction": [
        {
            "utterance": "Yes . Can you please provide the name in alphabetical order ?",
            "sql": "select products.name where products.price > = value order_by products.name asc"
        },
        {
            "utterance": "Thank you . Can you please provide the price of each of these items as well sorted by lowest price first ?",
            "sql": "select products.name , products.price where products.price > = value order_by products.price asc"
        },
        {
            "utterance": "Can you please also provide the manufacturer on these products ?",
            "sql": "select products.name , products.price , products.manufacturer where products.price > = value order_by products.price asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "What manufacturer has the highest revenue ?",
            "sql": "select manufacturers.name order_by manufacturers.revenue desc limit_value"
        },
        {
            "utterance": "Where is Iomega located ?",
            "sql": "select manufacturers.headquarter where manufacturers.name = value"
        },
        {
            "utterance": "What manufacturers on the list are located in Austin ?",
            "sql": "select manufacturers.name where manufacturers.headquarter = value"
        },
        {
            "utterance": "What is Creative labs revenue ?",
            "sql": "select manufacturers.revenue where manufacturers.name = value"
        },
        {
            "utterance": "How many companies have a revenue greater than 100.0 ?",
            "sql": "select count ( manufacturers.* ) where manufacturers.revenue > value"
        },
        {
            "utterance": "What is the total revue of those 3 companies ?",
            "sql": "select sum ( manufacturers.revenue ) where manufacturers.revenue > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find number of products which Sony does not make.",
        "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"
    },
    "interaction": [
        {
            "utterance": "What is the number of projects that Sony does n't manufacture ?",
            "sql": "select count ( distinct products.name ) where products.name not in ( select products.name where manufacturers.name = value )"
        },
        {
            "utterance": "What is the number of products that Creative Labs does manufacture ?",
            "sql": "select count ( distinct products.name ) where products.name in ( select products.name where manufacturers.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Select the name and price of the cheapest product.",
        "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . How many products are there ?",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "excellent . and how much is the cheapest priced product ?",
            "sql": "select min ( products.price )"
        },
        {
            "utterance": "and can you tell me the name of that product ?",
            "sql": "select products.name where products.price = ( select min ( products.price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Select the name and price of the cheapest product.",
        "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How much does the cheapest Hard drive go for ? | 240 is the price of the cheapest product whose name is Hard drive | and what of the cheapest memory ?",
            "sql": "select products.price where products.name = value order_by products.price limit_value"
        },
        {
            "utterance": "Who is the manufacturer of the zip drive ?",
            "sql": "select products.manufacturer where products.name = value"
        },
        {
            "utterance": "And who manufactures the Hard drive ?",
            "sql": "select products.manufacturer where products.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"
    },
    "interaction": [
        {
            "utterance": "where is the Headquarter of Sony ?",
            "sql": "select manufacturers.headquarter where manufacturers.name = value"
        },
        {
            "utterance": "how much is Creative Labs revenue ?",
            "sql": "select manufacturers.revenue where manufacturers.name = value"
        },
        {
            "utterance": "what is the name of the manufacturer whose headquarter is in Los Angeles ?",
            "sql": "select manufacturers.name where manufacturers.headquarter = value"
        },
        {
            "utterance": "which manufacturer has the least revenue ? | Did you mean to get the name of manufacturer has the least revenue | name the manufacturer with the least revenue",
            "sql": "select manufacturers.name order_by manufacturers.revenue limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the number of different products that are produced by companies at different headquarter cities.",
        "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"
    },
    "interaction": [
        {
            "utterance": "Can you show the Name of the Products of Code 1 ?",
            "sql": "select products.name where products.code = value"
        },
        {
            "utterance": "Can you show the Price of the Product Code 1 ?",
            "sql": "select products.price where products.code = value"
        },
        {
            "utterance": "Can you show the number of different products that are produced by companies at different headquarter cities ?",
            "sql": "select count ( distinct products.name ) , manufacturers.headquarter group_by manufacturers.headquarter"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 0,
    "final": {
        "utterance": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    "interaction": [
        {
            "utterance": "what are all games are presented on the table | What kind of infromation for the games do you want ? | i want to how many teams on the game",
            "sql": "select count ( distinct game.home_team )"
        },
        {
            "utterance": "which player are played in highest number of matches",
            "sql": "select injury_accident.player order_by injury_accident.number_of_matches desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 1,
    "final": {
        "utterance": "How many games has each stadium held?",
        "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there ?",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "How many games has each stadium held ?",
            "sql": "select stadium.id , count ( * ) group_by stadium.id"
        },
        {
            "utterance": "What is the total attendance of each stadium ?",
            "sql": "select stadium.id , sum ( stadium.total_attendance ) group_by stadium.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 2,
    "final": {
        "utterance": "How many games has each stadium held?",
        "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id"
    },
    "interaction": [
        {
            "utterance": "How many games has each stadium held ?",
            "sql": "select stadium.id , count ( * ) group_by stadium.id"
        },
        {
            "utterance": "So how many total games were there ?",
            "sql": "select count ( game.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum, minimum and average home games each stadium held?",
        "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium"
    },
    "interaction": [
        {
            "utterance": "what is the average attendance of Cowboys Stadium ?",
            "sql": "select stadium.average_attendance where stadium.name = value"
        },
        {
            "utterance": "give the total attendance Cowboys Stadium",
            "sql": "select stadium.total_attendance where stadium.name = value"
        },
        {
            "utterance": "what is the capacity percentage of New Meadowlands Stadium",
            "sql": "select stadium.capacity_percentage where stadium.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 4,
    "final": {
        "utterance": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'"
    },
    "interaction": [
        {
            "utterance": "how many game are there",
            "sql": "select count ( game.* )"
        },
        {
            "utterance": "What injury had maicon | Maicon had the injury Knee problem . | how may total attendance have fedexfield",
            "sql": "select stadium.total_attendance where stadium.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 5,
    "final": {
        "utterance": "Which stadium name contains the substring \"Bank\"?",
        "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""
    },
    "interaction": [
        {
            "utterance": "how many stadium are presented on the table",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "list out the stadium names",
            "sql": "select stadium.name"
        },
        {
            "utterance": "what is the average attendance of Cowboys Stadium",
            "sql": "select stadium.average_attendance where stadium.name = value"
        },
        {
            "utterance": "what is the capacity percentage of FedExField",
            "sql": "select stadium.capacity_percentage where stadium.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 6,
    "final": {
        "utterance": "How many games are free of injury accidents?",
        "sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"
    },
    "interaction": [
        {
            "utterance": "Hi ! May i ask how many total games were played ?",
            "sql": "select count ( game.* )"
        },
        {
            "utterance": "Okay . How many games were without injuries ?",
            "sql": "select count ( game.* ) where game.id not in ( select injury_accident.game_id )"
        },
        {
            "utterance": "How many were with injuries ?",
            "sql": "select count ( game.* ) where game.id in ( select injury_accident.game_id )"
        },
        {
            "utterance": "Okay that 's fine . Do you know the stadium ID for games without injuries ?",
            "sql": "select game.stadium_id where game.id not in ( select injury_accident.game_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the ids , scores , and dates of the games which caused at most two injury accidents ?",
            "sql": "select game.id , game.score , game.date group_by game.id having count ( * ) < = value"
        },
        {
            "utterance": "How many competitions in this table ? | Did you mean the number of different competitions ? | Yes .",
            "sql": "select count ( distinct game.competition )"
        },
        {
            "utterance": "How many number of different home teams ?",
            "sql": "select count ( distinct game.home_team )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 8,
    "final": {
        "utterance": "How many distinct kinds of injuries happened after season 2010?",
        "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010"
    },
    "interaction": [
        {
            "utterance": "After season 2010 how many different kinds of injuries were there ?",
            "sql": "select count ( distinct injury_accident.injury ) where game.season > value"
        },
        {
            "utterance": "What player received the injury ? | You mean all the players having injuries ? | What player received the Hamstring muscle strain in his left thigh ?",
            "sql": "select injury_accident.player where injury_accident.injury = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 9,
    "final": {
        "utterance": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    "interaction": [
        {
            "utterance": "How many injury accidents are there in total ?",
            "sql": "select count ( injury_accident.* )"
        },
        {
            "utterance": "Can you list them with the date of the game and the name of the player who got injured ?",
            "sql": "select game.date , injury_accident.player"
        },
        {
            "utterance": "Can you please also sort thw result by decending order of game seasons ?",
            "sql": "select game.date , injury_accident.player order_by game.season desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"
    },
    "interaction": [
        {
            "utterance": "What game id did the player Walter Samuel get injured during , please ?",
            "sql": "select injury_accident.game_id where injury_accident.player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 0,
    "final": {
        "utterance": "Find names of the document without any images.",
        "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id"
    },
    "interaction": [
        {
            "utterance": "Can you give me a list of documents that do n't have any images ? | Do you want document code ? | I 'd like both the document code and document name , please .",
            "sql": "select documents.document_name , documents.document_code except select documents.document_name , documents.document_code"
        },
        {
            "utterance": "That 's great . Can you tell me the total number of documents that do have images ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "What types of documents are these ?",
            "sql": "select documents.document_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the Document code for document type code Book ?",
            "sql": "select documents.document_code where documents.document_type_code = value"
        },
        {
            "utterance": "Show the name of the document that has been accessed the greatest number of times ?",
            "sql": "select documents.document_name order_by documents.access_count desc limit_value"
        },
        {
            "utterance": "Show the name of the documents and the count of how many times each has been accessed ?",
            "sql": "select documents.document_name , documents.access_count order_by documents.access_count desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 2,
    "final": {
        "utterance": "Find names of the document without any images.",
        "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many documents are there total ?",
            "sql": "select count ( documents.document_name )"
        },
        {
            "utterance": "Perfect , thanks for that . Now , how many documents do n't have images ?",
            "sql": "select count ( documents.* ) ( select documents.document_name except select documents.document_name )"
        },
        {
            "utterance": "Can you give me the names of those documents ?",
            "sql": "select documents.document_name except select documents.document_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the types of documents with more than 4 documents.",
        "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4"
    },
    "interaction": [
        {
            "utterance": "can you please list the document types with the count of document structure code ?",
            "sql": "select count ( documents.document_structure_code ) , documents.document_type_code group_by documents.document_type_code"
        },
        {
            "utterance": "can you filter out the results where count less than 4 and only show more than 4",
            "sql": "select count ( documents.document_structure_code ) , documents.document_type_code group_by documents.document_type_code having count ( documents.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 4,
    "final": {
        "utterance": "What document types have more than 2 corresponding documents?",
        "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What documents types have more than 2 corresponding documents ?",
            "sql": "select documents.document_type_code group_by documents.document_type_code having count ( documents.* ) > value"
        },
        {
            "utterance": "What is the document type for document name Learning English ?",
            "sql": "select documents.document_type_code where documents.document_name = value"
        },
        {
            "utterance": "What documents types have more than 2 corresponding documents ?",
            "sql": "select documents.document_type_code group_by documents.document_type_code having count ( documents.* ) > value"
        },
        {
            "utterance": "List all the document name ?",
            "sql": "select documents.document_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 5,
    "final": {
        "utterance": "List all the username and passwords of users with the most popular role.",
        "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi , can you list me the user name and the password of the most popular role user ?",
            "sql": "select users.user_name , users.password group_by users.role_code order_by count ( users.* ) desc limit_value"
        },
        {
            "utterance": "great , how many popular role users are ?",
            "sql": "select count ( users.* ) group_by users.role_code order_by count ( users.* ) desc limit_value"
        },
        {
            "utterance": "Can you list me all the username of users with the most popular role ?",
            "sql": "select users.user_name group_by users.role_code order_by count ( users.* ) desc limit_value"
        },
        {
            "utterance": "Ok , show me the username of an unpopular user .",
            "sql": "select users.user_name where users.user_name not in ( select users.user_name group_by users.role_code order_by count ( users.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me how many documents there are in total ?",
            "sql": "select count ( documents.* )"
        },
        {
            "utterance": "What 's the name of the document that was accessed the least amount of times ?",
            "sql": "select documents.document_name order_by documents.access_count asc limit_value"
        },
        {
            "utterance": "How about the name of the document that was accessed the most amount of times ?",
            "sql": "select documents.document_name order_by documents.access_count desc limit_value"
        },
        {
            "utterance": "How many times has that document been accessed ?",
            "sql": "select documents.access_count order_by documents.access_count desc limit_value"
        },
        {
            "utterance": "What type of document is that ?",
            "sql": "select documents.document_type_code order_by documents.access_count desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the total access count of all documents in the most popular document type.",
        "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the total access count of all documents in the most popular document type .",
            "sql": "select sum ( documents.access_count ) group_by documents.document_type_code order_by count ( documents.* ) desc limit_value"
        },
        {
            "utterance": "Show me the access count for books ?",
            "sql": "select documents.access_count where documents.document_type_code = value"
        },
        {
            "utterance": "How about in paper ?",
            "sql": "select documents.access_count where documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the document with the most number of sections?",
        "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many Document Sections on the table ?",
            "sql": "select count ( document_sections.* )"
        },
        {
            "utterance": "what are highest access count on the table ?",
            "sql": "select documents.access_count order_by documents.access_count desc limit_value"
        },
        {
            "utterance": "how many type of section title on the table ?",
            "sql": "select count ( distinct document_sections.section_title )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 9,
    "final": {
        "utterance": "What are all the section titles of the document named \"David CV\"?",
        "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\""
    },
    "interaction": [
        {
            "utterance": "How many section titles are there for the document `` David CV '' ?",
            "sql": "select count ( document_sections.section_title ) where documents.document_name = value"
        },
        {
            "utterance": "Please list the section titles for the document `` David CV ''",
            "sql": "select document_sections.section_title where documents.document_name = value"
        },
        {
            "utterance": "what is the section code for the section title `` after '' for the document `` David CV '' ?",
            "sql": "select document_sections.section_code where documents.document_name = value and document_sections.section_title = value"
        },
        {
            "utterance": "what is the document code for the section title `` after '' for the document `` David CV '' ?",
            "sql": "select document_sections.document_code where documents.document_name = value and document_sections.section_title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 10,
    "final": {
        "utterance": "List all the username and passwords of users with the most popular role.",
        "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which users have the most popular role ? | Do you mean the user name of the users who have the most popular role ? | Yes , can you list all the usernames and passwords of the users who have the most popular role ?",
            "sql": "select users.user_name , users.password group_by users.role_code order_by count ( users.* ) desc limit_value"
        },
        {
            "utterance": "Can you also tell me the role code ?",
            "sql": "select users.role_code group_by users.role_code order_by count ( users.* ) desc limit_value"
        },
        {
            "utterance": "How many times has this user logged in ?",
            "sql": "select users.user_login group_by users.role_code order_by count ( users.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the average access count of documents with the least popular structure.",
        "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all of the different document names and the associated access count for each of them ?",
            "sql": "select documents.document_name , documents.access_count"
        },
        {
            "utterance": "Wonderful ! Can you show me the associated structure code for each of those document names ?",
            "sql": "select documents.document_structure_code"
        },
        {
            "utterance": "Can you filter that list to show the document name and document structure code with the fewest document structure code entries , or in other words , the least popular structure ?",
            "sql": "select documents.document_name , documents.document_structure_code where documents.document_structure_code = ( select min ( documents.document_structure_code ) )"
        },
        {
            "utterance": "Very nice ! Finally , could you update this list to show the average access count for these two documents ?",
            "sql": "select avg ( documents.access_count ) where documents.document_structure_code = ( select min ( documents.document_structure_code ) ) group_by documents.document_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 12,
    "final": {
        "utterance": "List all the document names which contains \"CV\".",
        "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""
    },
    "interaction": [
        {
            "utterance": "Show me the documents | did you mean all the info of the documents ? | no , the name of the documents",
            "sql": "select documents.document_name"
        },
        {
            "utterance": "Show me the names containing cv",
            "sql": "select documents.document_name where documents.document_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the lowest and highest rating star?",
        "sql": "SELECT max(stars) ,  min(stars) FROM Rating"
    },
    "interaction": [
        {
            "utterance": "What is the lowest and highest rating star ?",
            "sql": "select max ( rating.stars ) , min ( rating.stars )"
        },
        {
            "utterance": "What is the movie id and rating date of the movie with 5 stars ?",
            "sql": "select rating.mid , rating.ratingdate where rating.stars = value"
        },
        {
            "utterance": "Now show me the movie id and rating dates of the movie with 2 stars ?",
            "sql": "select rating.mid , rating.ratingdate where rating.stars = value"
        },
        {
            "utterance": "What is the earliest rating date ?",
            "sql": "select rating.ratingdate where rating.ratingdate != value order_by rating.ratingdate limit_value"
        },
        {
            "utterance": "What is the most recent rating date ?",
            "sql": "select rating.ratingdate order_by rating.ratingdate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 1,
    "final": {
        "utterance": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    "interaction": [
        {
            "utterance": "Hello , how many ratings have the same reviewer and director name ?",
            "sql": "select count ( * ) where movie.director = reviewer.name"
        },
        {
            "utterance": "What is the reviewer name associated with that rating ?",
            "sql": "select distinct reviewer.name where movie.director = reviewer.name"
        },
        {
            "utterance": "What about the number of stars it received ?",
            "sql": "select distinct rating.stars where movie.director = reviewer.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name of the most recent movie?",
        "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "list the names of all movies",
            "sql": "select movie.title"
        },
        {
            "utterance": "list the year each movie was released",
            "sql": "select movie.title , movie.year"
        },
        {
            "utterance": "list the titles of all movies",
            "sql": "select movie.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the movie titles and average rating of the movies with the lowest average rating ?",
            "sql": "select movie.title , avg ( rating.stars ) group_by rating.mid order_by avg ( rating.stars ) limit_value"
        },
        {
            "utterance": "What year did the sound of music come out and who was the director ? | Do you mean the year of the movie whose title is The Sound of Music came out and the director of it ? | yes",
            "sql": "select movie.year , movie.director where movie.title = value"
        },
        {
            "utterance": "What movie title has the highest rating ? | Do you mean the title of the movie with the highest stars ? | Yes",
            "sql": "select movie.title group_by rating.mid order_by rating.stars desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the movie that is rated by most of times?",
        "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the highest rating star ?",
            "sql": "select max ( rating.stars )"
        },
        {
            "utterance": "what is the average of rating stars ?",
            "sql": "select avg ( rating.stars )"
        },
        {
            "utterance": "what is the first movie 's year ? | What do you mean by `` first '' ? Do you mean the earliest movie ? | yes",
            "sql": "select min ( movie.year )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the most recent movie?",
        "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "how many movies are there in total ?",
            "sql": "select count ( movie.* )"
        },
        {
            "utterance": "What year did the oldest movie come out ?",
            "sql": "select movie.year order_by movie.year limit_value"
        },
        {
            "utterance": "How about the most recent one ?",
            "sql": "select movie.year order_by movie.year desc limit_value"
        },
        {
            "utterance": "What 's the name of that movie ?",
            "sql": "select movie.title where movie.year = ( select max ( movie.year ) )"
        },
        {
            "utterance": "How about the name of the director ? | Do you mean the name of the director of Avatar ? | yes",
            "sql": "select movie.director where movie.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the ids of the movies that are not reviewed by Brittany Harris.",
        "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""
    },
    "interaction": [
        {
            "utterance": "How many movies altogether do you have ?",
            "sql": "select count ( distinct rating.mid )"
        },
        {
            "utterance": "What is the number of reviewers ?",
            "sql": "select count ( reviewer.* )"
        },
        {
            "utterance": "Can you tell me the ids of the movies not reviewed by Brittany Harris ?",
            "sql": "select rating.mid except select rating.mid where reviewer.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of reviewers who had given higher than 3 star ratings.",
        "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"
    },
    "interaction": [
        {
            "utterance": "what are the name of the reviewers ?",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "how many of them have given ratings higher than 3 ?",
            "sql": "select count ( reviewer.rid ) where rating.stars > value"
        },
        {
            "utterance": "can you tell me their names ?",
            "sql": "select reviewer.name where rating.stars > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the titles of all movies that have no ratings.",
        "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
    },
    "interaction": [
        {
            "utterance": "what is the name of the movie without any ratings ?",
            "sql": "select movie.title where movie.mid not in ( select rating.mid )"
        },
        {
            "utterance": "who is the director of star wars ?",
            "sql": "select movie.director where movie.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    "interaction": [
        {
            "utterance": "What are the names of the movies that was reviewed by brittany harris ?",
            "sql": "select distinct movie.title where reviewer.name = value"
        },
        {
            "utterance": "What are the names of movies made after 2000 ?",
            "sql": "select distinct movie.title where movie.year > value"
        },
        {
            "utterance": "How many rating stars did Avatar had ?",
            "sql": "select rating.stars where movie.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 10,
    "final": {
        "utterance": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
        "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all director names who have directed more than one movie ?",
            "sql": "select distinct movie.director where movie.title != movie.title"
        },
        {
            "utterance": "This is great ! Can you please update the list to show each of the films directed by each director and keep the director names in the list ?",
            "sql": "select movie.director , movie.title where movie.title != movie.title"
        },
        {
            "utterance": "Wonderful ! Can you please sort this list by the director name , and then sort by movie title ?",
            "sql": "select movie.title , movie.director where movie.title != movie.title order_by movie.director , movie.title"
        },
        {
            "utterance": "Excellent ! Would you be able to update that list to also include the year each film was released ?",
            "sql": "select movie.title , movie.director , movie.year where movie.title != movie.title order_by movie.director , movie.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"
    },
    "interaction": [
        {
            "utterance": "What are the names of the movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "Which are made before 1980 ?",
            "sql": "select movie.title where movie.year < value"
        },
        {
            "utterance": "From the list of all movies , which were directed by James Cameron ?",
            "sql": "select movie.title where movie.director = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which movie has the highest average rating ? | The title of the movie that has the highest average rating is Snow White | What is it 's rating ?",
            "sql": "select avg ( rating.stars ) group_by rating.mid order_by avg ( rating.stars ) desc limit_value"
        },
        {
            "utterance": "What is the average rating for all movies ?",
            "sql": "select movie.title , avg ( rating.stars ) group_by rating.mid"
        },
        {
            "utterance": "Which movie has the lowest rating ?",
            "sql": "select movie.title where rating.stars = ( select min ( rating.stars ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
        "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title"
    },
    "interaction": [
        {
            "utterance": "How many movies are in the list ?",
            "sql": "select count ( movie.* )"
        },
        {
            "utterance": "How many directors are on the list ?",
            "sql": "select count ( movie.director )"
        },
        {
            "utterance": "How many of the directors have more than 1 film ?",
            "sql": "select count ( distinct movie.director ) where movie.title != movie.title"
        },
        {
            "utterance": "What are the titles from those 2 directors ?",
            "sql": "select movie.title where movie.title != movie.title"
        },
        {
            "utterance": "What are the years each of these movies were produced ?",
            "sql": "select movie.year where movie.title != movie.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 14,
    "final": {
        "utterance": "find the ids of reviewers who did not give 4 star.",
        "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    "interaction": [
        {
            "utterance": "How many reviewers are there ?",
            "sql": "select count ( distinct rating.rid )"
        },
        {
            "utterance": "What are their id numbers ?",
            "sql": "select distinct rating.rid"
        },
        {
            "utterance": "What is the average rating of the reviewers ?",
            "sql": "select avg ( rating.stars )"
        },
        {
            "utterance": "How many raters gave reviews less than 4 stars ?",
            "sql": "select count ( distinct rating.rid ) where rating.stars < value"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select distinct rating.rid where rating.stars < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the average rating star for each movie that received at least 2 ratings.",
        "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many total movie ratings are there ?",
            "sql": "select count ( rating.* )"
        },
        {
            "utterance": "How many of those movies received less than 2 ratings ?",
            "sql": "select count ( rating.* ) ( select rating.* group_by rating.mid having count ( rating.* ) < value )"
        },
        {
            "utterance": "Of the 14 ratings , what was the highest rating ?",
            "sql": "select rating.stars order_by rating.stars desc limit_value"
        },
        {
            "utterance": "And the lowest ?",
            "sql": "select rating.stars order_by rating.stars asc limit_value"
        },
        {
            "utterance": "And the average ?",
            "sql": "select avg ( rating.stars ) order_by rating.stars asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
    },
    "interaction": [
        {
            "utterance": "Find the movie id of Gone with the Wind ?",
            "sql": "select movie.mid where movie.title = value"
        },
        {
            "utterance": "Which year Star Wars movie is released ?",
            "sql": "select movie.year where movie.title = value"
        },
        {
            "utterance": "Who is directed by The Sound of Music ?",
            "sql": "select movie.director where movie.title = value"
        },
        {
            "utterance": "What is the name of the movie produced after 2000 and directed by James Cameron ?",
            "sql": "select movie.title where movie.director = value and movie.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    "interaction": [
        {
            "utterance": "Find the names of all directors whose movies are rated by Sarah Martinez",
            "sql": "select distinct movie.director where reviewer.name = value"
        },
        {
            "utterance": "list the other directors against the movies they directed .",
            "sql": "select movie.director , movie.title where movie.director != value"
        },
        {
            "utterance": "what is the general ratings for those movies ?",
            "sql": "select movie.director , movie.title , rating.stars where movie.mid in ( select movie.mid where movie.director != value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the names and years of the movies that has the top 3 highest rating star?",
        "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you give me the names of the movies that has the top 3 highest rating star ?",
            "sql": "select movie.title order_by rating.stars desc limit_value"
        },
        {
            "utterance": "Can you show me the years of those movies as well ?",
            "sql": "select movie.title , movie.year order_by rating.stars desc limit_value"
        },
        {
            "utterance": "How about their directors ?",
            "sql": "select movie.title , movie.year , movie.director order_by rating.stars desc limit_value"
        },
        {
            "utterance": "Can you add rating stars too ?",
            "sql": "select movie.title , movie.year , movie.director , rating.stars order_by rating.stars desc limit_value"
        },
        {
            "utterance": "Can you please tell me the average stars as well ?",
            "sql": "select avg ( rating.stars )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of the directors who made exactly one movie?",
        "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "How many directors are there ?",
            "sql": "select count ( distinct movie.director )"
        },
        {
            "utterance": "How many of them only made one movie ?",
            "sql": "select count ( movie.* ) ( select movie.director group_by movie.director having count ( movie.* ) = value )"
        },
        {
            "utterance": "What are the names of those directors ?",
            "sql": "select movie.director group_by movie.director having count ( movie.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the average rating star for each reviewer?",
        "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "Show the names of all reviewers .",
            "sql": "select reviewer.name group_by reviewer.name"
        },
        {
            "utterance": "What is the average rating of each reviewer .",
            "sql": "select reviewer.name , avg ( rating.stars ) group_by reviewer.name"
        },
        {
            "utterance": "List the names of all reviewers based on their average rating in ascending order .",
            "sql": "select reviewer.name group_by reviewer.name order_by avg ( rating.stars ) asc"
        },
        {
            "utterance": "List all movie id associated with Brittany Harris .",
            "sql": "select rating.mid where reviewer.name = value"
        },
        {
            "utterance": "List all movie id associated with Brittany Harris and their rating date .",
            "sql": "select rating.mid , rating.ratingdate where reviewer.name = value"
        },
        {
            "utterance": "What is the average rating of all movies reviewed by Brittany Harris .",
            "sql": "select avg ( rating.stars ) where reviewer.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the average rating stars and title for the oldest movie?",
        "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "What are the ratingDate of mID 101 ?",
            "sql": "select rating.ratingdate where rating.mid = value"
        },
        {
            "utterance": "Find The releasing year of The Sound of Music .",
            "sql": "select movie.year where movie.title = value"
        },
        {
            "utterance": "Who is directed by Star Wars ? | Did you mean to ask for the name of the director who directed Star Wars ? | Yes",
            "sql": "select movie.director where movie.title = value"
        },
        {
            "utterance": "What is the average rating stars and title for the oldest movie ?",
            "sql": "select avg ( rating.stars ) , movie.title where movie.year = ( select min ( movie.year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"
    },
    "interaction": [
        {
            "utterance": "list out the movies on the table",
            "sql": "select movie.*"
        },
        {
            "utterance": "what is the director name of Star Wars",
            "sql": "select movie.director where movie.title = value"
        },
        {
            "utterance": "actually i mean which movie rating is high | Would you like the movie with the greatest number of rating stars ? | exactly",
            "sql": "select * order_by rating.stars desc limit_value"
        },
        {
            "utterance": "what is the year of Gone with the Wind",
            "sql": "select movie.year where movie.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 23,
    "final": {
        "utterance": "find the ids of reviewers who did not give 4 star.",
        "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    "interaction": [
        {
            "utterance": "ids of reviewers who did not give 4 star ?",
            "sql": "select rating.rid except select rating.rid where rating.stars = value"
        },
        {
            "utterance": "Stars for rID 201 ?",
            "sql": "select rating.stars where rating.rid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names and years of the movies that has the top 3 highest rating star?",
        "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Please show me the names and years of the movies that has the top 3 highest rating stars",
            "sql": "select movie.title , movie.year order_by rating.stars desc limit_value"
        },
        {
            "utterance": "Can you show me the director names together with the name and years ? | Did you mean the directors of the movies that have the top 3 highest rating stars ? | Yes , director names , movie names and years please .",
            "sql": "select movie.title , movie.year , movie.director order_by rating.stars desc limit_value"
        },
        {
            "utterance": "Please give me the same information for the movies that have the 3 lowest rating stars .",
            "sql": "select movie.title , movie.year , movie.director order_by rating.stars limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 0,
    "final": {
        "utterance": "Show times of elimination of wrestlers with days held more than 50.",
        "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"
    },
    "interaction": [
        {
            "utterance": "what are the elimination time of wrestlers",
            "sql": "select elimination.time"
        },
        {
            "utterance": "What are the names of the wrestlers and their elimination times ?",
            "sql": "select elimination.time , wrestler.name"
        },
        {
            "utterance": "What are the names of wresters and their elimination times whose days held is greater than 50 ?",
            "sql": "select wrestler.name , elimination.time where wrestler.days_held > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 1,
    "final": {
        "utterance": "List the time of elimination of the wrestlers with largest days held.",
        "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hi . can you tell me how many wrestlers were eliminated ?",
            "sql": "select count ( elimination.* )"
        },
        {
            "utterance": "can you list the elimination times of those with the largest days held ? | Again , there can only be one with the largest days held , would you like that one ? There are not multiple that can be `` largest '' | yes , please",
            "sql": "select elimination.time order_by wrestler.days_held desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 2,
    "final": {
        "utterance": "List the locations that are shared by more than two wrestlers.",
        "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "list the location that was share by more than two wrestler",
            "sql": "select wrestler.location group_by wrestler.location having count ( wrestler.* ) > value"
        },
        {
            "utterance": "which of them has the highest days held",
            "sql": "select wrestler.location group_by wrestler.location having count ( wrestler.* ) > value order_by wrestler.days_held desc limit_value"
        },
        {
            "utterance": "what are the name of the wrestler | Would you like to know the names of all wrestlers with location Tokyo , Japan ? | yes",
            "sql": "select wrestler.name where wrestler.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 3,
    "final": {
        "utterance": "Please show the most common reigns of wrestlers.",
        "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many wrestlers are there ?",
            "sql": "select count ( wrestler.* )"
        },
        {
            "utterance": "just locations",
            "sql": "select distinct wrestler.location"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select wrestler.wrestler_id"
        },
        {
            "utterance": "What are the most common reigns of wrestlers ?",
            "sql": "select wrestler.reign group_by wrestler.reign order_by count ( wrestler.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    "interaction": [
        {
            "utterance": "Show the teams that have wrestlers eliminated by `` Orton '' .",
            "sql": "select elimination.team where elimination.eliminated_by = value"
        },
        {
            "utterance": "Show me the teams that have wrestlers eliminated by `` Benjamin '' .",
            "sql": "select elimination.team where elimination.eliminated_by = value"
        },
        {
            "utterance": "What was the elimination move when the wrestlers in team Batista were eliminated by `` Benjamin '' .",
            "sql": "select elimination.elimination_move where elimination.eliminated_by = value and elimination.team = value"
        },
        {
            "utterance": "And what was the time duration in this case ?",
            "sql": "select elimination.time where elimination.eliminated_by = value and elimination.team = value"
        },
        {
            "utterance": "Show me the teams that have wrestlers eliminated by `` Punk '' .",
            "sql": "select elimination.team where elimination.eliminated_by = value"
        },
        {
            "utterance": "Hmmm . And what was the elimination move used ?",
            "sql": "select elimination.elimination_move where elimination.eliminated_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the wrestler with the fewest days held?",
        "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average number of days | did you mean the average days held by all wrestlers ? | yes",
            "sql": "select avg ( wrestler.days_held )"
        },
        {
            "utterance": "what is the name of the wrestler with the fewest days held",
            "sql": "select wrestler.name order_by wrestler.days_held limit_value"
        },
        {
            "utterance": "what is the name of the first wrestler id | did you mean the name of the wrestler with id 1 ? | first wrestler",
            "sql": "select wrestler.name where wrestler.wrestler_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 6,
    "final": {
        "utterance": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC"
    },
    "interaction": [
        {
            "utterance": "What are names of all the wrestlers ?",
            "sql": "select wrestler.name"
        },
        {
            "utterance": "And what about teams in elimination ?",
            "sql": "select elimination.team"
        },
        {
            "utterance": "Can I see a list with wrestler names and teams in elimination in descending order based on days held ?",
            "sql": "select wrestler.name , elimination.team order_by wrestler.days_held desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\""
    },
    "interaction": [
        {
            "utterance": "Show the times of elimination by `` Punk '' or `` Orton '' .",
            "sql": "select elimination.time where elimination.eliminated_by = value or elimination.eliminated_by = value"
        },
        {
            "utterance": "And by `` Benjamin '' ?",
            "sql": "select elimination.time where elimination.eliminated_by = value"
        },
        {
            "utterance": "What was the average elimination time of all teams ?",
            "sql": "select avg ( elimination.time )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "List the state and enrollment of all the colleges where any students got accepted in the tryout decision .",
            "sql": "select distinct college.state , college.enr where tryout.decision = value"
        },
        {
            "utterance": "What are the states and names of the colleges that all the goalies tried out for ?",
            "sql": "select distinct college.state , college.enr where tryout.ppos = value"
        },
        {
            "utterance": "What are the states and names of all colleges that did n't accept students in the tryout decision ?",
            "sql": "select college.state , college.enr where college.cname not in ( select distinct college.cname where tryout.decision = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'"
    },
    "interaction": [
        {
            "utterance": "Which colleges students played in the try out in striker position ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "And in which state is it located ?",
            "sql": "select college.state where tryout.ppos = value"
        },
        {
            "utterance": "How about it 's enrollment number ?",
            "sql": "select college.enr where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of states that have some college students playing in goalie and mid positions.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of player position ?",
            "sql": "select tryout.ppos"
        },
        {
            "utterance": "can you show me a list of college name ?",
            "sql": "select college.cname"
        },
        {
            "utterance": "what is the average of enrollments ?",
            "sql": "select avg ( college.enr )"
        },
        {
            "utterance": "what is the colleges ' states ?",
            "sql": "select college.state"
        },
        {
            "utterance": "find the names of states that have some collage plating in goalie and mid positions .",
            "sql": "select college.state where tryout.ppos = value intersect select college.state where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and hours of the students whose tryout decision is yes.",
        "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with a list of all of the player names ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Thank you for that ! Can you filter the list to show the names of only the players whose decision is `` yes '' ?",
            "sql": "select player.pname where tryout.decision = value"
        },
        {
            "utterance": "Perfect ! Can you update this list to show the college names associated with each of these 2 players ?",
            "sql": "select player.pname , tryout.cname where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "What is the name of the college whos size is bigger than 10000 ?",
            "sql": "select college.cname where college.enr > value"
        },
        {
            "utterance": "Which of those colleges are located in LA ?",
            "sql": "select college.* where college.enr > value and college.state = value"
        },
        {
            "utterance": "What is the enrollment of that college ?",
            "sql": "select college.enr where college.enr > value and college.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"
    },
    "interaction": [
        {
            "utterance": "Can you list all the colleges and their enrollments ?",
            "sql": "select college.cname , college.enr"
        },
        {
            "utterance": "Which college has the largest enrollment ?",
            "sql": "select college.cname where college.enr = ( select max ( college.enr ) )"
        },
        {
            "utterance": "Hmm , I also want to know which colleges have enrollments that are less than the largest size .",
            "sql": "select college.cname where college.enr < ( select max ( college.enr ) )"
        },
        {
            "utterance": "Can you list the states of those colleges ?",
            "sql": "select college.cname , college.state where college.enr < ( select max ( college.enr ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'"
    },
    "interaction": [
        {
            "utterance": "What are the names of the states that have some college students playing in the mid position but not the goalie position ?",
            "sql": "select college.state where tryout.ppos = value except select college.state where tryout.ppos = value"
        },
        {
            "utterance": "What about states that have some college students playing in the goalie position ?",
            "sql": "select college.state where tryout.ppos = value"
        },
        {
            "utterance": "What about in the striker position ?",
            "sql": "select college.state where tryout.ppos = value"
        },
        {
            "utterance": "What is the college name for that one ?",
            "sql": "select college.cname where tryout.ppos = value"
        },
        {
            "utterance": "Was there a decision on that position ?",
            "sql": "select tryout.decision where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Which colleges do the tryout players whose name starts with letter D go to?",
        "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"
    },
    "interaction": [
        {
            "utterance": "How many players have a yCard ?",
            "sql": "select count ( player.* ) where player.ycard = value"
        },
        {
            "utterance": "What is the average HS score of all players ?",
            "sql": "select avg ( player.hs )"
        },
        {
            "utterance": "Which player has the lowest HS score ?",
            "sql": "select player.pname order_by player.hs asc limit_value"
        },
        {
            "utterance": "What is the pID for Andrew ?",
            "sql": "select player.pid where player.pname = value"
        },
        {
            "utterance": "And for Blake ?",
            "sql": "select player.pid where player.pname = value"
        },
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( player.* )"
        },
        {
            "utterance": "What are there names ?",
            "sql": "select player.pname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the names of schools with the top 3 largest size?",
        "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the top 3 enrollment numbers among the schools ?",
            "sql": "select college.enr order_by college.enr desc limit_value"
        },
        {
            "utterance": "Hmm , I want to know the states of the schools with the top 3 largest size .",
            "sql": "select college.state order_by college.enr desc limit_value"
        },
        {
            "utterance": "Can you tell me the names of the schools with the top 3 largest size ?",
            "sql": "select college.cname order_by college.enr desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the total number of enrollment of schools that do not have any goalie player?",
        "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
    },
    "interaction": [
        {
            "utterance": "Which schools have goalie player ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "And which schools do n't have a goalie player ?",
            "sql": "select tryout.cname where tryout.ppos != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the colleges located in the state of LA ?",
            "sql": "select college.cname where college.state = value"
        },
        {
            "utterance": "Awesome ! Can you show me a list that contains both the colleges in LA and those located in AZ ?",
            "sql": "select college.cname where college.state = value or college.state = value"
        },
        {
            "utterance": "Sure ! What is the average enrollment of ASU and LSU ?",
            "sql": "select avg ( college.enr ) where college.cname = value or college.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Which position is most popular among players in the tryout?",
        "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which position is the most popular among players in the tryout ?",
            "sql": "select tryout.ppos group_by tryout.ppos order_by count ( tryout.* ) desc limit_value"
        },
        {
            "utterance": "What were the names of the colleges for that position ?",
            "sql": "select tryout.cname where tryout.ppos = ( select tryout.ppos group_by tryout.ppos order_by count ( tryout.* ) desc limit_value )"
        },
        {
            "utterance": "And what decisions resulted from those tryouts ?",
            "sql": "select tryout.decision where tryout.ppos = ( select tryout.ppos group_by tryout.ppos order_by count ( tryout.* ) desc limit_value )"
        },
        {
            "utterance": "Were there any other position in the try outs other than goalie position ?",
            "sql": "select tryout.ppos where tryout.ppos != value"
        },
        {
            "utterance": "Which colleges were those positions for ?",
            "sql": "select tryout.cname where tryout.ppos != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the state of the college which player Charles is attending.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"
    },
    "interaction": [
        {
            "utterance": "What is the player id for Charles ?",
            "sql": "select player.pid where player.pname = value"
        },
        {
            "utterance": "What the college Charles is attending ?",
            "sql": "select college.cname where player.pname = value"
        },
        {
            "utterance": "What is the state of the college OU ?",
            "sql": "select college.state where college.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the max, average and min training hours of all players.",
        "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player"
    },
    "interaction": [
        {
            "utterance": "What is the max training hours of all players , please ?",
            "sql": "select max ( player.hs )"
        },
        {
            "utterance": "What about the min ?",
            "sql": "select min ( player.hs )"
        },
        {
            "utterance": "How about the average ?",
            "sql": "select avg ( player.hs )"
        },
        {
            "utterance": "Who is the player with the lowest training hours ?",
            "sql": "select player.pname order_by player.hs limit_value"
        },
        {
            "utterance": "What about the highest training hours , please ?",
            "sql": "select player.pname order_by player.hs desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the average hours for the students whose tryout decision is no.",
        "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'"
    },
    "interaction": [
        {
            "utterance": "what is average of training hours ?",
            "sql": "select avg ( player.hs )"
        },
        {
            "utterance": "can you show me player names that starting with 'A ' ?",
            "sql": "select player.pname where player.pname like value"
        },
        {
            "utterance": "can you show me a list of college name ?",
            "sql": "select distinct tryout.cname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment .",
            "sql": "select college.cname where college.enr < value and college.state = value union select college.cname where college.enr > value and college.state = value"
        },
        {
            "utterance": "OK ! please give me the names of the colleges where enrollment is greater than 20000",
            "sql": "select college.cname where college.enr > value"
        },
        {
            "utterance": "Also give me the names of the colleges where enrollment is between 10000 and 20000 .",
            "sql": "select college.cname where college.enr < value and college.enr > value"
        },
        {
            "utterance": "Ok. Can you please tell me which college has the lowest enrollment .",
            "sql": "select college.cname order_by college.enr limit_value"
        },
        {
            "utterance": "And which college has the highest enrollment ?",
            "sql": "select college.cname order_by college.enr desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
        "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos"
    },
    "interaction": [
        {
            "utterance": "How many different positions are there ?",
            "sql": "select count ( distinct tryout.ppos )"
        },
        {
            "utterance": "How many students have more than 1000 hours of training ?",
            "sql": "select player.* where player.hs > value"
        },
        {
            "utterance": "How many hours of training has the student with the most hours completed ?",
            "sql": "select player.hs order_by player.hs desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 17,
    "final": {
        "utterance": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
    },
    "interaction": [
        {
            "utterance": "How many colleges have enrollment greater than 18000 ?",
            "sql": "select count ( college.* ) where college.enr > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select college.cname where college.enr > value"
        },
        {
            "utterance": "What is the enrollment for OU ?",
            "sql": "select college.enr where college.cname = value"
        },
        {
            "utterance": "And for LSU ? | Would you like to know the enrollment for the college named LSU ? | Yes I would .",
            "sql": "select college.enr where college.cname = value"
        },
        {
            "utterance": "In which state is LSU located ?",
            "sql": "select college.state where college.cname = value"
        },
        {
            "utterance": "And the state for OU ?",
            "sql": "select college.state where college.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 18,
    "final": {
        "utterance": "What is minimum hours of the students playing in different position?",
        "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos"
    },
    "interaction": [
        {
            "utterance": "how many hours does each player get to be active for ?",
            "sql": "select player.pid , player.hs"
        },
        {
            "utterance": "what position requires the least playing time ?",
            "sql": "select tryout.ppos group_by tryout.ppos order_by min ( player.hs ) limit_value"
        },
        {
            "utterance": "what is the the playing time of the mid player ?",
            "sql": "select min ( player.hs ) , tryout.ppos where tryout.ppos = value group_by tryout.ppos"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the max, average and min training hours of all players.",
        "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player"
    },
    "interaction": [
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( player.* )"
        },
        {
            "utterance": "What is the max of those players ? | what did you mean the max ? | Sorry , the max training hours of those players .",
            "sql": "select max ( player.hs )"
        },
        {
            "utterance": "And the min training hours of those players ?",
            "sql": "select min ( player.hs )"
        },
        {
            "utterance": "How about the average ?",
            "sql": "select avg ( player.hs )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many student in total participate in the tryout ?",
            "sql": "select count ( tryout.* )"
        },
        {
            "utterance": "For which colleges ?",
            "sql": "select count ( tryout.* ) , tryout.cname group_by tryout.cname"
        },
        {
            "utterance": "Can I see that list in a descending order based on student count ?",
            "sql": "select count ( tryout.* ) , tryout.cname group_by tryout.cname order_by count ( tryout.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the states where have some college students in tryout and their decisions are yes.",
        "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "I want to know the states and the college names which have some college students in tryout .",
            "sql": "select college.state , college.cname"
        },
        {
            "utterance": "Hmm , can you show me the college names with players whose decisions are yes ?",
            "sql": "select tryout.cname where tryout.decision = value"
        },
        {
            "utterance": "Can you list just the states which have college students in tryout and their decisions are yes ?",
            "sql": "select distinct college.state where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the state of the college which player Charles is attending.",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"
    },
    "interaction": [
        {
            "utterance": "find the state of the college which player Charles is attending",
            "sql": "select college.state where player.pname = value"
        },
        {
            "utterance": "OK , List out the all player id and college name",
            "sql": "select college.cname , player.pid"
        },
        {
            "utterance": "find the training hours of the player Charles",
            "sql": "select player.hs where player.pname = value"
        },
        {
            "utterance": "ok , list out all college name",
            "sql": "select college.cname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 23,
    "final": {
        "utterance": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
    },
    "interaction": [
        {
            "utterance": "list the name of college in az ?",
            "sql": "select college.cname where college.state = value"
        },
        {
            "utterance": "list the name of the colleges whose enrollment is lesser than 18000 sorted by the college 's name ?",
            "sql": "select college.cname where college.enr > value order_by college.cname"
        },
        {
            "utterance": "which college enrollment is 22000 ?",
            "sql": "select college.cname where college.enr = value"
        },
        {
            "utterance": "list the name of the colleges whose enrollment is greater than 12000 sorted by the college 's name and state ?",
            "sql": "select college.cname where college.enr > value order_by college.cname , college.state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"
    },
    "interaction": [
        {
            "utterance": "Can you list all the names of the students who have the position of striker ?",
            "sql": "select player.pname where tryout.ppos = value"
        },
        {
            "utterance": "Can you also list the tryout decision they got please ?",
            "sql": "select player.pname , tryout.decision where tryout.ppos = value"
        },
        {
            "utterance": "What are the names and positions of all players who got a no for their tryout decision ?",
            "sql": "select player.pname , tryout.ppos where tryout.decision = value"
        },
        {
            "utterance": "What are the names and college names of all players who have over 700 training hours ?",
            "sql": "select player.pname , tryout.cname where player.hs > value"
        },
        {
            "utterance": "Can you add their positions into the table please ?",
            "sql": "select player.pname , tryout.cname , tryout.ppos where player.hs > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name of the tryout players who are from the college with largest size.",
        "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "hi . can you tell me how many players are from OU College ?",
            "sql": "select count ( * ) where tryout.cname = value"
        },
        {
            "utterance": "and can you tell me if OU is the college with the largest size ?",
            "sql": "select college.cname order_by college.enr desc limit_value"
        },
        {
            "utterance": "and what is the name of that tryout player from OU ?",
            "sql": "select player.pname where tryout.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name and college of students whose decisions are yes in the tryout.",
        "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "find the name and college of students whose player position are goalie in the tryout",
            "sql": "select player.pname , tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "find the training hours for the player id 10001",
            "sql": "select player.hs where player.pid = value"
        },
        {
            "utterance": "find the college name for the player id 10001",
            "sql": "select tryout.cname where tryout.pid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
        "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')"
    },
    "interaction": [
        {
            "utterance": "hello there ! Can you please provide me with a list of all college names ?",
            "sql": "select college.cname"
        },
        {
            "utterance": "Thank you for that ! Can you show me the names of all colleges with an enrollment value that is greater than the total enrollment of all of the colleges in the state of FL ?",
            "sql": "select college.cname"
        },
        {
            "utterance": "Excellent ! Can you update this list to show me the enrollment quantity associated with each college ?",
            "sql": "select college.cname , college.enr where college.enr > ( select max ( college.enr ) where college.state = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 28,
    "final": {
        "utterance": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')"
    },
    "interaction": [
        {
            "utterance": "How many states that have some college students playing in the mid position ?",
            "sql": "select count ( * ) ( select college.state where tryout.ppos = value )"
        },
        {
            "utterance": "How many states that have some college students not playing in the goalie position ?",
            "sql": "select count ( * ) ( select college.state where tryout.ppos != value )"
        },
        {
            "utterance": "Find college names with students playing in the goalie position",
            "sql": "select tryout.cname where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 29,
    "final": {
        "utterance": "What is minimum hours of the students playing in different position?",
        "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos"
    },
    "interaction": [
        {
            "utterance": "How many hours does a goalie need to play to meet the minimum ?",
            "sql": "select min ( player.hs ) group_by tryout.ppos"
        },
        {
            "utterance": "How many hours does a striker need to play to meet the minimum ?",
            "sql": "select min ( player.hs ) group_by tryout.ppos"
        },
        {
            "utterance": "How many hours does a mid need to play to meet the minimum ?",
            "sql": "select min ( player.hs ) where tryout.ppos = value group_by tryout.ppos"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the players whose names contain letter 'a'.",
        "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the player id of each player with the letter 'a ' in their name ?",
            "sql": "select player.pid where player.pname like value"
        },
        {
            "utterance": "How many of those players have a yes card ?",
            "sql": "select count ( player.* ) where player.pname like value and player.ycard = value"
        },
        {
            "utterance": "What are those players ' names ?",
            "sql": "select distinct player.pname where player.pname like value and player.ycard = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 31,
    "final": {
        "utterance": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
        "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"
    },
    "interaction": [
        {
            "utterance": "What are the enrollments of all colleges in the state of FL ?",
            "sql": "select sum ( college.enr ) where college.state = value"
        },
        {
            "utterance": "What are the names of all colleges that have an enrollment greater than at least one of the colleges in FL ?",
            "sql": "select distinct college.cname where college.enr > ( select min ( college.enr ) where college.state = value )"
        },
        {
            "utterance": "What are the names of all colleges that have an enrollment greater than at least one of the colleges in OK ?",
            "sql": "select distinct college.cname where college.enr > ( select min ( college.enr ) where college.state = value )"
        },
        {
            "utterance": "How about the names of all colleges that have an enrollment less than at least one of the colleges in OK ?",
            "sql": "select distinct college.cname where college.enr < ( select max ( college.enr ) where college.state = value )"
        },
        {
            "utterance": "What are the names of all colleges that have an enrollment less than at least one of the colleges in FL ?",
            "sql": "select distinct college.cname where college.enr < ( select max ( college.enr ) where college.state = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "what are the college names of the students whose tryout decision is yes",
            "sql": "select tryout.cname where tryout.decision = value"
        },
        {
            "utterance": "what is the average and maximum hours for these students",
            "sql": "select avg ( player.hs ) , max ( player.hs ) where tryout.decision = value"
        },
        {
            "utterance": "add the player id and college names in the same list",
            "sql": "select avg ( player.hs ) , max ( player.hs ) , player.pid , tryout.cname where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
        "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)"
    },
    "interaction": [
        {
            "utterance": "What is the average enrollment ?",
            "sql": "select avg ( college.enr )"
        },
        {
            "utterance": "Now please list all colleges that have enrollment higher than the average . | LSU , OU , and FSU have enrollment higher than the average . | Please list the states where LSU , OU , and FSU are located .",
            "sql": "select distinct college.state where college.enr > ( select avg ( college.enr ) )"
        },
        {
            "utterance": "How many total states are in the table ?",
            "sql": "select count ( distinct college.state ) where college.enr > ( select avg ( college.enr ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 0,
    "final": {
        "utterance": "How many distinct characteristic names does the product \"cumin\" have?",
        "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "How many distinct characteristic names does the product `` cumin '' have ?",
            "sql": "select count ( distinct characteristics.characteristic_name ) where products.product_name = value"
        },
        {
            "utterance": "How many distinct characteristic names does the product `` basil '' have ?",
            "sql": "select count ( distinct characteristics.characteristic_name ) where products.product_name = value"
        },
        {
            "utterance": "Sure thing ! Whats the typical selling price of cumin ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 1,
    "final": {
        "utterance": "How many characteristics does the product named \"sesame\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "How many characteristics does the product named `` sesame '' have ?",
            "sql": "select count ( * ) where products.product_name = value"
        },
        {
            "utterance": "What are the characteristic ids of those ? Sorry !",
            "sql": "select product_characteristics.characteristic_id where products.product_name = value"
        },
        {
            "utterance": "What is sesame 's typical selling price ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        },
        {
            "utterance": "What the most common characteristic id ?",
            "sql": "select product_characteristics.characteristic_id group_by product_characteristics.characteristic_id order_by count ( product_characteristics.* ) desc limit_value"
        },
        {
            "utterance": "What is the least common product category code ?",
            "sql": "select products.product_category_code group_by products.product_category_code order_by count ( products.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""
    },
    "interaction": [
        {
            "utterance": "hi , List out the all color description",
            "sql": "select ref_colors.color_description"
        },
        {
            "utterance": "list out the color code for all the product name",
            "sql": "select products.color_code , products.product_name"
        },
        {
            "utterance": "list out the typical selling price for all product name",
            "sql": "select products.typical_selling_price , products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 3,
    "final": {
        "utterance": "List all the characteristic names and data types of product \"cumin\".",
        "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\""
    },
    "interaction": [
        {
            "utterance": "what are the characteristic names of `` Cumin '' ?",
            "sql": "select characteristics.characteristic_name where products.product_name = value"
        },
        {
            "utterance": "`` Cumin '' data types",
            "sql": "select characteristics.characteristic_data_type where products.product_name = value"
        },
        {
            "utterance": "what is the product id of `` cumin '' ?",
            "sql": "select products.product_id where products.product_name = value"
        },
        {
            "utterance": "what is the product_category_code for product id 1 ?",
            "sql": "select products.product_category_code where products.product_id = value"
        },
        {
            "utterance": "what is the typical_selling_price of product id 1 ?",
            "sql": "select products.typical_selling_price where products.product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 4,
    "final": {
        "utterance": "How many colors are never used by any product?",
        "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"
    },
    "interaction": [
        {
            "utterance": "how many colors are in list in the description ?",
            "sql": "select count ( ref_colors.* )"
        },
        {
            "utterance": "Find the product list of the product name ?",
            "sql": "select products.product_name"
        },
        {
            "utterance": "Find the color of the product id 2 ?",
            "sql": "select ref_colors.color_description where products.product_id = value"
        },
        {
            "utterance": "how many herbs in the product category code ?",
            "sql": "select count ( products.* ) where products.product_category_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""
    },
    "interaction": [
        {
            "utterance": "Can you list the color code that has a color description of 'white ' ?",
            "sql": "select ref_colors.color_code where ref_colors.color_description = value"
        },
        {
            "utterance": "Can you list all product ids and their associated product category codes that have a color code value of 2 ?",
            "sql": "select products.product_id , products.product_category_code where products.color_code = value"
        },
        {
            "utterance": "Sure , can you add to the table the unit of measure values for the product category codes of Spices and Herbs ?",
            "sql": "select ref_product_categories.unit_of_measure where ref_product_categories.product_category_code = value or ref_product_categories.product_category_code = value"
        },
        {
            "utterance": "Please delete that information and only show the product name for the product with a product id of 2 .",
            "sql": "select products.product_name where products.product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the color description of the product with name \"catnip\"?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""
    },
    "interaction": [
        {
            "utterance": "Can you show me all the product names , codes and ids ? | Do you mean the product names , color codes and ids ? | Yes please .",
            "sql": "select products.product_name , products.color_code , products.product_id"
        },
        {
            "utterance": "I want to know the the product names and their color descriptions .",
            "sql": "select products.product_name , ref_colors.color_description"
        },
        {
            "utterance": "Hmm , can you tell me the color description of the product with the name \u201c catnip \u201d ?",
            "sql": "select ref_colors.color_description where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the characteristic name used by most number of the products?",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you please show me name of the products ?",
            "sql": "select distinct products.product_name"
        },
        {
            "utterance": "Can you please show me the characteristic name used by least number of products ?",
            "sql": "select characteristics.characteristic_name group_by characteristics.characteristic_name order_by count ( * ) limit_value"
        },
        {
            "utterance": "Can you please show me the characteristic name used by most number of products ?",
            "sql": "select characteristics.characteristic_name group_by characteristics.characteristic_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""
    },
    "interaction": [
        {
            "utterance": "what are the names of the products with category `` Herbs ''",
            "sql": "select products.product_name where products.product_category_code = value"
        },
        {
            "utterance": "what are the color descriptions for the products ? | Do you want both the names and the color descriptions ? | yes",
            "sql": "select products.product_name , ref_colors.color_description where products.product_category_code = value"
        },
        {
            "utterance": "list down all the product ids",
            "sql": "select products.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 9,
    "final": {
        "utterance": "How many products have the characteristic named \"hot\"?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""
    },
    "interaction": [
        {
            "utterance": "how many products are there",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "what is the product name of color code 2",
            "sql": "select products.product_name where products.color_code = value"
        },
        {
            "utterance": "what is the characteristic data type of characteristic id 1",
            "sql": "select characteristics.characteristic_data_type where characteristics.characteristic_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the description of the color for most products?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the color code of basil ?",
            "sql": "select products.color_code where products.product_name = value"
        },
        {
            "utterance": "what is the color with least products ?",
            "sql": "select ref_colors.color_description group_by ref_colors.color_description order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "what is the name of the product with color code 4 ?",
            "sql": "select products.product_name where products.color_code = value"
        },
        {
            "utterance": "What is the typical selling price of product paper ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 11,
    "final": {
        "utterance": "How many characteristics does the product named \"laurel\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
    },
    "interaction": [
        {
            "utterance": "What is the product category of `` laurel '' ? | Did you mean the product category of the product named `` laurel '' ? | yes",
            "sql": "select products.product_category_code where products.product_name = value"
        },
        {
            "utterance": "And how many characteristics does this product have ?",
            "sql": "select count ( * ) where products.product_name = value"
        },
        {
            "utterance": "Than what is it 's typical selling price ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 12,
    "final": {
        "utterance": "How many products have the characteristic named \"hot\"?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""
    },
    "interaction": [
        {
            "utterance": "How many products have the characteristic named `` hot ''",
            "sql": "select count ( * ) where characteristics.characteristic_name = value"
        },
        {
            "utterance": "what is the name of the product with the characteristic `` hot '' ?",
            "sql": "select products.product_name where characteristics.characteristic_name = value"
        },
        {
            "utterance": "what is the selling price of lotus ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 13,
    "final": {
        "utterance": "List the all the distinct names of the products with the characteristic name 'warm'.",
        "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
    },
    "interaction": [
        {
            "utterance": "how many distinct names of the products have characteristc name warm ?",
            "sql": "select count ( distinct products.product_name ) where characteristics.characteristic_name = value"
        },
        {
            "utterance": "Which distinct name is that ?",
            "sql": "select distinct products.product_name where characteristics.characteristic_name = value"
        },
        {
            "utterance": "What is the name of a spice with buying price of 352447.2874677 ?",
            "sql": "select products.product_name where products.typical_buying_price = value"
        },
        {
            "utterance": "What is its color code ?",
            "sql": "select products.color_code where products.typical_buying_price = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the color code and description of the product named \"chervil\"?",
        "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "What is the product description for this product ?",
            "sql": "select products.product_description where products.product_name = value"
        },
        {
            "utterance": "Also , what is the color code ?",
            "sql": "select products.color_code , ref_colors.color_description where products.product_name = value"
        },
        {
            "utterance": "Great , what is the typical product price for this product ?",
            "sql": "select products.typical_buying_price where products.product_name = value"
        },
        {
            "utterance": "No worries , are there any other product details that I should know about ?",
            "sql": "select products.other_product_details where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 15,
    "final": {
        "utterance": "How many characteristics does the product named \"sesame\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "what are the characteristics of the product name 'sesame ' ?",
            "sql": "select product_characteristics.characteristic_id where products.product_name = value"
        },
        {
            "utterance": "how many characteristics does the product name 'sesame ' have ?",
            "sql": "select count ( * ) where products.product_name = value"
        },
        {
            "utterance": "what is the product category code for product name 'sesame '",
            "sql": "select products.product_category_code where products.product_name = value"
        },
        {
            "utterance": "what is the product characteristic value for product name 'sesame '",
            "sql": "select product_characteristics.product_characteristic_value where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the unit of measurement and product category code of product named \"chervil\".",
        "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "How many different product categories are there ?",
            "sql": "select distinct products.product_category_code"
        },
        {
            "utterance": "What units of measurement are used ? | can you give more information about you question ? | What unit of measurement is used for seeds category ?",
            "sql": "select ref_product_categories.unit_of_measure where ref_product_categories.product_category_code = value"
        },
        {
            "utterance": "What is the measurement used for chervil ?",
            "sql": "select ref_product_categories.unit_of_measure where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the number of characteristics that the product \"flax\" has.",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""
    },
    "interaction": [
        {
            "utterance": "How many products do you have ?",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "Find the number of characteristics that the product `` caraway '' has .",
            "sql": "select count ( * ) where products.product_name = value"
        },
        {
            "utterance": "Finally , can you provide the number of characteristics of the product with the name `` flax '' ?",
            "sql": "select count ( * ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000"
    },
    "interaction": [
        {
            "utterance": "Show the name of the product with product id 1 ?",
            "sql": "select products.product_name where products.product_id = value"
        },
        {
            "utterance": "show the number of products with category Spices ?",
            "sql": "select count ( products.* ) where products.product_category_code = value"
        },
        {
            "utterance": "Show the number of products with category Spices and typically sold above 1000 ?",
            "sql": "select count ( products.* ) where products.product_category_code = value and products.typical_buying_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 19,
    "final": {
        "utterance": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""
    },
    "interaction": [
        {
            "utterance": "Can you please list all the characteristics of the product named sesame ?",
            "sql": "select characteristics.characteristic_name where products.product_name = value"
        },
        {
            "utterance": "Can you please list all the characteristics of the product named sesame with the type code `` Grade '' ?",
            "sql": "select characteristics.characteristic_name where products.product_name = value and characteristics.characteristic_type_code = value"
        },
        {
            "utterance": "What is the characteristic name of the product with the highest typical selling price ?",
            "sql": "select characteristics.characteristic_name order_by products.typical_selling_price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the category descriptions of the products whose descriptions include letter 't'.",
        "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'"
    },
    "interaction": [
        {
            "utterance": "Which product descriptions contain the letter t ?",
            "sql": "select products.product_name where products.product_description like value"
        },
        {
            "utterance": "What are their prices ? | Do you mean typical buying price or typical selling price ? | Buying price .",
            "sql": "select products.typical_buying_price where products.product_description like value"
        },
        {
            "utterance": "What is the average buying price ?",
            "sql": "select avg ( products.typical_buying_price ) where products.product_description like value"
        },
        {
            "utterance": "Which of those products does not have a buying price ?",
            "sql": "select products.product_name where products.product_description like value and products.typical_buying_price = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 21,
    "final": {
        "utterance": "List all the product names with the color description \"white\".",
        "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list all of the product names that have the color description of `` white '' ?",
            "sql": "select products.product_name where ref_colors.color_description = value"
        },
        {
            "utterance": "Thank you for that ! Can you update this list to show the typical selling price for each ?",
            "sql": "select products.product_name , products.typical_selling_price where ref_colors.color_description = value"
        },
        {
            "utterance": "Thank you ! Can you tell me what the average typical selling price is of all of the product types ? | do you mean the average typical selling price of all product category code ? | Yes ! Can you provide me with the average typical selling price of all product category code ?",
            "sql": "select products.product_category_code , avg ( products.typical_buying_price ) group_by products.product_category_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the products with the color description `` red '' ?",
            "sql": "select products.product_name where ref_colors.color_description = value"
        },
        {
            "utterance": "What are the names of the products that have the characteristic name `` fast '' ?",
            "sql": "select products.product_name where characteristics.characteristic_name = value"
        },
        {
            "utterance": "What are the names of the products that have the characteristic name `` fast '' and the color description `` red '' ?",
            "sql": "select products.product_name where ref_colors.color_description = value and characteristics.characteristic_name = value"
        },
        {
            "utterance": "What about products with the characteristic name `` slow '' ?",
            "sql": "select products.product_name where characteristics.characteristic_name = value"
        },
        {
            "utterance": "What are the color descriptions of those ?",
            "sql": "select ref_colors.color_description where characteristics.characteristic_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the color code and description of the product named \"chervil\"?",
        "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "what is the color code of product name `` chervil '' ?",
            "sql": "select products.color_code where products.product_name = value"
        },
        {
            "utterance": "what is the color description of it ?",
            "sql": "select ref_colors.color_description where products.product_name = value"
        },
        {
            "utterance": "What is the product id of it ?",
            "sql": "select products.product_id where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 24,
    "final": {
        "utterance": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the products with the category `` Herbs '' please ?",
            "sql": "select products.product_name where products.product_category_code = value"
        },
        {
            "utterance": "What are their color descriptions ?",
            "sql": "select products.product_name , ref_colors.color_description where products.product_category_code = value"
        },
        {
            "utterance": "What are their product descriptions ?",
            "sql": "select products.product_name , ref_colors.color_description , products.product_description where products.product_category_code = value"
        },
        {
            "utterance": "What are their typical selling prices ?",
            "sql": "select products.typical_selling_price where products.product_category_code = value"
        },
        {
            "utterance": "What is the average typical buying price ?",
            "sql": "select avg ( products.typical_buying_price ) where products.product_category_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the color description of the product with name \"catnip\"?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""
    },
    "interaction": [
        {
            "utterance": "What is the color description of the product with the name `` catnip '' ?",
            "sql": "select ref_colors.color_description where products.product_name = value"
        },
        {
            "utterance": "What are the product names of all products with the color description red ?",
            "sql": "select products.product_name where ref_colors.color_description = value"
        },
        {
            "utterance": "Could you add in the typical buying price of each of those please ? | The price of basil is 503.8431967 . The price of sesame is 1284268.0659 and price of caraway is 24493 | What are the product descriptions of all products with the color description green ?",
            "sql": "select products.product_description where ref_colors.color_description = value"
        },
        {
            "utterance": "Can you add into the table their product names , please ?",
            "sql": "select products.product_name , products.product_description where ref_colors.color_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the unit of measurement and product category code of product named \"chervil\".",
        "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please show me a list of all of the product names and their associated product IDs ?",
            "sql": "select products.product_id , products.product_name"
        },
        {
            "utterance": "Thank you very much ! Can you filter this list to show only the item with the product id of 11 , and show me the associated product category code ?",
            "sql": "select products.product_id , products.product_name , products.product_category_code where products.product_id = value"
        },
        {
            "utterance": "Thank you very much ! Can you update this to display the product category code , product category description , and unit of measure ?",
            "sql": "select ref_product_categories.product_category_code , ref_product_categories.product_category_description , ref_product_categories.unit_of_measure where products.product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the name of the product with the color description 'yellow'?",
        "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'"
    },
    "interaction": [
        {
            "utterance": "how many ref colors are on the table",
            "sql": "select count ( distinct ref_colors.color_description )"
        },
        {
            "utterance": "list out the product names",
            "sql": "select products.product_name"
        },
        {
            "utterance": "what is typical selling price of cumin",
            "sql": "select products.typical_selling_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Who is the friend of Zach with longest year relationship?",
        "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "How long is the longest relationship ?",
            "sql": "select max ( personfriend.year )"
        },
        {
            "utterance": "What is the name of that person ?",
            "sql": "select personfriend.name where personfriend.year = ( select max ( personfriend.year ) )"
        },
        {
            "utterance": "Who is his friend ?",
            "sql": "select personfriend.friend where personfriend.name = value and personfriend.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the person who has friends with age above 40 and under age 30?",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
    },
    "interaction": [
        {
            "utterance": "Can you list the person names and their friends ?",
            "sql": "select personfriend.name , personfriend.friend"
        },
        {
            "utterance": "Hmm , I want to know which friends are above 40 years old or below 30 years old . | do you mean the name of the person who has friends with age above 40 and under age 30 ? | I want to know the ages of the friends first , please .",
            "sql": "select personfriend.friend , person.age"
        },
        {
            "utterance": "Please tell me the names of the person who has friends with age above 40 and under age 30 .",
            "sql": "select person.name where personfriend.friend in ( select person.name where person.age > value ) intersect select person.name where personfriend.friend in ( select person.name where person.age < value )"
        },
        {
            "utterance": "How about the names of different persons who have friends with age above 40 and under age 30 ?",
            "sql": "select person.name where personfriend.friend in ( select person.name where person.age > value ) union select person.name where personfriend.friend in ( select person.name where person.age < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Who are the friends of Bob?",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "how many female persons are in the table",
            "sql": "select count ( person.* ) where person.gender = value"
        },
        {
            "utterance": "please tell me alice friend name",
            "sql": "select personfriend.friend where person.name = value"
        },
        {
            "utterance": "what is the age of bob",
            "sql": "select person.age where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the age of the friend of Zach with longest year relationship?",
        "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "How many friends does Zach have ?",
            "sql": "select count ( personfriend.friend ) where personfriend.name = value"
        },
        {
            "utterance": "How long has zach been friends with each of them ?",
            "sql": "select personfriend.name , personfriend.friend , personfriend.year where personfriend.name = value"
        },
        {
            "utterance": "What are the ages of Zach 's friends ?",
            "sql": "select personfriend.name , personfriend.friend , personfriend.year , person.age where personfriend.name = value"
        },
        {
            "utterance": "Which person has zach been friends with the longest ?",
            "sql": "select person.age where personfriend.name = value and personfriend.year = ( select max ( personfriend.year ) where personfriend.name = value )"
        },
        {
            "utterance": "What does dan do for work ?",
            "sql": "select person.job where person.name = value"
        },
        {
            "utterance": "How old is dan ?",
            "sql": "select person.age where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the age of the friend of Zach with longest year relationship?",
        "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "which friend of zachs has the longest year relationship ?",
            "sql": "select person.name where personfriend.name = value and personfriend.year = ( select max ( personfriend.year ) where personfriend.name = value )"
        },
        {
            "utterance": "how old is dan ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "what city does Zach live ?",
            "sql": "select person.city where person.name = value"
        },
        {
            "utterance": "what age is zach ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "what is zach 's job ?",
            "sql": "select person.job where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the persons who are friends with Alice ?",
            "sql": "select person.name where personfriend.friend = value"
        },
        {
            "utterance": "Okay , could you show me Zach 's job ?",
            "sql": "select person.job where person.name = value"
        },
        {
            "utterance": "How old is Zach ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "How many years has Zach been friends with Alice ?",
            "sql": "select personfriend.year where personfriend.friend = value and personfriend.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name and age of all males in order of their age.",
        "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "how many person there",
            "sql": "select count ( person.* )"
        },
        {
            "utterance": "what is the age of Bob",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "what is the city of Alice",
            "sql": "select person.city where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name and age of all males in order of their age.",
        "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "what is the name of all males ?",
            "sql": "select person.name where person.gender = value"
        },
        {
            "utterance": "what is the age of Bob ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "who is a doctor ?",
            "sql": "select person.name where person.job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 8,
    "final": {
        "utterance": "How many people whose age is greater 30 and job is engineer?",
        "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"
    },
    "interaction": [
        {
            "utterance": "How many persons are on the list ?",
            "sql": "select count ( person.* )"
        },
        {
            "utterance": "Who is the least aged person on the list ?",
            "sql": "select person.name order_by person.age limit_value"
        },
        {
            "utterance": "How many people whose age is greater 30 and job is engineer ?",
            "sql": "select count ( person.* ) where person.age > value and person.job = value"
        },
        {
            "utterance": "How many female people are on the list ?",
            "sql": "select count ( person.* ) where person.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Who has a friend that is from new york city?",
        "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'"
    },
    "interaction": [
        {
            "utterance": "Show me the names | Do you mean the name of all the person ? | name of all the persons",
            "sql": "select person.name"
        },
        {
            "utterance": "show me the name of persons | The names of persons are Alice , Bob , Dan and Zach | Who has a friend from New York ?",
            "sql": "select personfriend.name where person.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the female friends of Alice.",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"
    },
    "interaction": [
        {
            "utterance": "Hello , could you find how many friends Alice has ?",
            "sql": "select count ( personfriend.* ) where personfriend.name = value"
        },
        {
            "utterance": "What is the name of Alice 's friend ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "What are the names of Bob 's friends ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "Is Zach also a male ?",
            "sql": "select person.gender where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of persons who are friends with Bob.",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "can you please tell me if Alice is friends with Bob ?",
            "sql": "select person.name where personfriend.friend = value"
        },
        {
            "utterance": "great . and who are Zach 's friends ?",
            "sql": "select * where personfriend.friend = value"
        },
        {
            "utterance": "and can you tell me , besides Alice and Zach , is there anyone else who is friends with Bob ?",
            "sql": "select person.name where personfriend.friend = value and person.name != value and person.name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the male friend of Alice whose job is a doctor?",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me in witch city does Alice live ?",
            "sql": "select person.city where person.name = value"
        },
        {
            "utterance": "Great , how many males friends does she have ?",
            "sql": "select count ( * ) where personfriend.name = value and person.gender = value"
        },
        {
            "utterance": "What job does he have ?",
            "sql": "select person.job where personfriend.name = value and person.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the female friends of Alice.",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest person ? | What attributes do you want for this person , name or something else ? | name",
            "sql": "select person.name order_by person.age desc limit_value"
        },
        {
            "utterance": "How many friends does Alice have ?",
            "sql": "select count ( personfriend.friend ) where personfriend.name = value"
        },
        {
            "utterance": "How many of those are women ?",
            "sql": "select count ( personfriend.friend ) where personfriend.name = value and person.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Who is the person that has no friend?",
        "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend"
    },
    "interaction": [
        {
            "utterance": "Who is the person that has no friend ?",
            "sql": "select person.name except select personfriend.name"
        },
        {
            "utterance": "What is the job occupation of Zach ?",
            "sql": "select person.job where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 15,
    "final": {
        "utterance": "What is average age of male for different job title?",
        "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all males ?",
            "sql": "select avg ( person.age ) where person.gender = value"
        },
        {
            "utterance": "What are all the jobs of males ?",
            "sql": "select person.job where person.gender = value"
        },
        {
            "utterance": "What are the average ages of male engineers and male doctors ?",
            "sql": "select avg ( person.age ) , person.job where person.gender = value group_by person.job"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of the person who has friends with age above 40 but not under age 30?",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
    },
    "interaction": [
        {
            "utterance": "Hi , how many people have friends with ages above 40 ?",
            "sql": "select count ( person.* ) where personfriend.friend in ( select person.name where person.age > value )"
        },
        {
            "utterance": "Great . What is that person 's name ?",
            "sql": "select person.name where personfriend.friend in ( select person.name where person.age > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 17,
    "final": {
        "utterance": "How many people whose age is greater 30 and job is engineer?",
        "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"
    },
    "interaction": [
        {
            "utterance": "How old is the student ? | Which student are you referring to ? | A better question is , how many students are there ?",
            "sql": "select count ( person.* ) where person.job = value"
        },
        {
            "utterance": "What about the number of people with occupations ? | By occupations , do you mean people who are not students ? | Yes",
            "sql": "select count ( person.* ) where person.job != value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select person.name where person.job != value"
        },
        {
            "utterance": "And the names of the people who are not students ?",
            "sql": "select person.name where person.job != value"
        },
        {
            "utterance": "I need to know how many people there are whose age is greater than 30 and job is an engineer .",
            "sql": "select count ( person.* ) where person.age > value and person.job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 18,
    "final": {
        "utterance": "Who is the youngest male?",
        "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )"
    },
    "interaction": [
        {
            "utterance": "Who is the youngest male ?",
            "sql": "select person.name where person.gender = value and person.age = ( select min ( person.age ) where person.gender = value )"
        },
        {
            "utterance": "What is his age ?",
            "sql": "select person.age where person.gender = value and person.age = ( select min ( person.age ) where person.gender = value )"
        },
        {
            "utterance": "What is his job ?",
            "sql": "select person.job where person.gender = value and person.age = ( select min ( person.age ) where person.gender = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the person who has exactly one friend.",
        "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "What is the name that only has one friend pairing ?",
            "sql": "select personfriend.name group_by personfriend.name having count ( personfriend.* ) = value"
        },
        {
            "utterance": "How many times does Alice show up in the friend column ?",
            "sql": "select count ( personfriend.* ) where personfriend.friend = value"
        },
        {
            "utterance": "How many times does Bob show up in the friend column ?",
            "sql": "select count ( personfriend.* ) where personfriend.friend = value"
        },
        {
            "utterance": "who is Bob 's friend ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "who is Zach 's friend ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "How many names are in the name column ?",
            "sql": "select count ( distinct personfriend.name )"
        },
        {
            "utterance": "how many names are in the friends column ?",
            "sql": "select count ( distinct personfriend.friend )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the number of people whose age is greater than all engineers.",
        "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
    },
    "interaction": [
        {
            "utterance": "find the average age",
            "sql": "select avg ( person.age )"
        },
        {
            "utterance": "how many are female",
            "sql": "select count ( person.* ) where person.gender = value"
        },
        {
            "utterance": "find the number of people whose age is greater than all engineers",
            "sql": "select count ( person.* ) where person.age > ( select max ( person.age ) where person.job = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of Dan or Alice.",
        "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "who are Dan 's friends ?",
            "sql": "select distinct person.name where personfriend.friend = value"
        },
        {
            "utterance": "what is Dan 's friend 's name and age ?",
            "sql": "select distinct person.name , person.age where personfriend.friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Who has friends that are younger than the average age?",
        "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)"
    },
    "interaction": [
        {
            "utterance": "What is Zach age ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "Who is the doctor works ? | Do you mean whose job is `` doctor '' ? | Yes",
            "sql": "select person.name where person.job = value"
        },
        {
            "utterance": "Who is in the town of new york ?",
            "sql": "select person.name where person.city = value"
        },
        {
            "utterance": "Who has friends that are younger than the average age ?",
            "sql": "select distinct personfriend.name where person.age < ( select avg ( person.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 23,
    "final": {
        "utterance": "Find Alice's friends of friends.",
        "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me who the friends of Alice 's friends are ?",
            "sql": "select distinct personfriend.name where person.name = value and personfriend.name != value"
        },
        {
            "utterance": "What city does Zach live in ?",
            "sql": "select person.city where person.name = value"
        },
        {
            "utterance": "What are the names of everyone else who lives in Austin ?",
            "sql": "select person.name where person.city = value"
        },
        {
            "utterance": "Who are Zach 's friends ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "What are their jobs ?",
            "sql": "select person.name , person.job where person.name in ( select personfriend.friend where personfriend.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the total number of people who has no friend living in the city of Austin.",
        "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "How many people are from Austin ?",
            "sql": "select count ( person.* ) where person.city = value"
        },
        {
            "utterance": "How many friends do Alice and Bob have combined ?",
            "sql": "select count ( personfriend.* ) where personfriend.name = value or personfriend.name = value"
        },
        {
            "utterance": "Okay , so who has a friend in Austin ?",
            "sql": "select personfriend.name where personfriend.friend in ( select person.name where person.city = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Who are the friends of Bob?",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "How many people are in New York City ?",
            "sql": "select count ( person.* ) where person.city = value"
        },
        {
            "utterance": "How many friends does Bob have ?",
            "sql": "select count ( * ) ( select personfriend.friend where person.name = value )"
        },
        {
            "utterance": "What is Bob 's friend 's name ?",
            "sql": "select personfriend.friend where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of persons who are friends with Bob.",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( person.* ) where person.job = value"
        },
        {
            "utterance": "How many persons are there ?",
            "sql": "select count ( person.* )"
        },
        {
            "utterance": "How many friends are there ?",
            "sql": "select count ( distinct personfriend.friend )"
        },
        {
            "utterance": "How many of them are friends with Bob ?",
            "sql": "select count ( * ) where personfriend.friend = value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select person.name where personfriend.friend = value"
        },
        {
            "utterance": "Who is Bob 's friend ?",
            "sql": "select person.name where personfriend.friend = value"
        },
        {
            "utterance": "What person has Zach as a friend ?",
            "sql": "select person.name where personfriend.friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the total number of people who has no friend living in the city of Austin.",
        "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "What is the total number of people who has no friend living in the city of Austin ?",
            "sql": "select count ( distinct personfriend.name ) where personfriend.friend not in ( select person.name where person.city = value )"
        },
        {
            "utterance": "What about in New York City ?",
            "sql": "select count ( distinct personfriend.name ) where personfriend.friend not in ( select person.name where person.city = value )"
        },
        {
            "utterance": "What about Salt Lake City ?",
            "sql": "select count ( distinct personfriend.name ) where personfriend.friend not in ( select person.name where person.city = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct personfriend.name where personfriend.friend not in ( select person.name where person.city = value )"
        },
        {
            "utterance": "What are the names of the people with no friends in New York City ?",
            "sql": "select distinct personfriend.name where personfriend.friend not in ( select person.name where person.city = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the name of the person who has no student friends.",
        "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'"
    },
    "interaction": [
        {
            "utterance": "is there any person who has no student friends",
            "sql": "select person.* except select person.* where person.job = value"
        },
        {
            "utterance": "is there any person friend for this persons",
            "sql": "select person.name except select personfriend.name where person.job = value intersect select personfriend.name"
        },
        {
            "utterance": "ok , list the name of the person who has no student friend in ascending order",
            "sql": "select person.name except select personfriend.name order_by person.name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Who is the oldest person whose job is student?",
        "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with a list of all of the names of people on this list ?",
            "sql": "select person.name"
        },
        {
            "utterance": "Thank you for that ! Can you update the list with the job of each person as well ? | Would you like me to show you the names of all persons and also their corresponding job ? | Yes please !",
            "sql": "select person.name , person.job"
        },
        {
            "utterance": "Can you filter this list to show only the students ? | Would you like me to show you a list of names and corresponding jobs for people whose job is student ? | Yes please !",
            "sql": "select person.name , person.job where person.job = value"
        },
        {
            "utterance": "Alright ! Can you filter that list to show only the individual who is the oldest ?",
            "sql": "select person.name , person.job where person.job = value order_by person.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "What is Alice friend name ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "How old is Alice friend ?",
            "sql": "select person.age where personfriend.name = ( select personfriend.friend where personfriend.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 31,
    "final": {
        "utterance": "How old is the doctor named Zach?",
        "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'"
    },
    "interaction": [
        {
            "utterance": "What city does Alice live in ?",
            "sql": "select person.city where person.name = value"
        },
        {
            "utterance": "What gender is Alice ?",
            "sql": "select person.gender where person.name = value"
        },
        {
            "utterance": "What job does Bob do ?",
            "sql": "select person.job where person.name = value"
        },
        {
            "utterance": "How old is Bob ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "Where does he live ?",
            "sql": "select person.city where person.name = value"
        },
        {
            "utterance": "How many males are there ?",
            "sql": "select count ( person.* ) where person.gender = value"
        },
        {
            "utterance": "How about Salt Lake City ? | Would you like a list of the names of all the people who live in Salt Lake City ? | Who is the oldest person ?",
            "sql": "select person.name order_by person.age desc limit_value"
        },
        {
            "utterance": "How old is the doctor named Zach ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "How many male engineers are there ?",
            "sql": "select count ( person.* ) where person.gender = value and person.job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 32,
    "final": {
        "utterance": "How many friends does Dan have?",
        "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
    },
    "interaction": [
        {
            "utterance": "In which city do Dan friends reside",
            "sql": "select person.city where person.name = value"
        },
        {
            "utterance": "Give me the full details of Zach",
            "sql": "select person.* where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the number of people who is under 40 for each gender.",
        "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"
    },
    "interaction": [
        {
            "utterance": "How many females are under age 40 ?",
            "sql": "select count ( person.* ) where person.gender = value and person.age < value"
        },
        {
            "utterance": "How many males do we have data for ?",
            "sql": "select count ( person.* ) where person.gender = value"
        },
        {
            "utterance": "And how many of them are under age 40 ?",
            "sql": "select count ( person.* ) where person.age < value and person.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "Find the name and age of the person who is a friend of both Dan and Alice .",
            "sql": "select person.name , person.age where personfriend.friend = value intersect select person.name , person.age where personfriend.friend = value"
        },
        {
            "utterance": "Find the name and age of the person who is a friend of both Dan and Zach",
            "sql": "select person.name , person.age where personfriend.friend = value intersect select person.name , person.age where personfriend.friend = value"
        },
        {
            "utterance": "Find the name and age of the person who is a friend of both Dan and Bob .",
            "sql": "select person.name , person.age where personfriend.friend = value intersect select person.name , person.age where personfriend.friend = value"
        },
        {
            "utterance": "Find the name and age of the person who is a friend of both Bob and Zach .",
            "sql": "select person.name , person.age where personfriend.friend = value intersect select person.name , person.age where personfriend.friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 0,
    "final": {
        "utterance": "Which head's name has the substring 'Ha'? List the id and name.",
        "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
    },
    "interaction": [
        {
            "utterance": "Which head 's name has the substring 'Ha ' ? List the id and name",
            "sql": "select head.head_id , head.name where head.name like value"
        },
        {
            "utterance": "Who is head id 1 ?",
            "sql": "select head.name where head.head_id = value"
        },
        {
            "utterance": "What is Tiger woods 's born state",
            "sql": "select head.born_state where head.name = value"
        },
        {
            "utterance": "what is Tiger woods 's age",
            "sql": "select head.age where head.name = value"
        },
        {
            "utterance": "who is the oldest head",
            "sql": "select head.* order_by head.age desc limit_value"
        },
        {
            "utterance": "how many heads from Alabama ?",
            "sql": "select count ( head.* ) where head.born_state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the distinct ages of the heads who are acting?",
        "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "How many heads are temporary acting ?",
            "sql": "select count ( management.* ) where management.temporary_acting = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select head.name where management.temporary_acting = value"
        },
        {
            "utterance": "What are their distinct ages ?",
            "sql": "select distinct head.age where management.temporary_acting = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 2,
    "final": {
        "utterance": "In which year were most departments established?",
        "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! How are you ? Can you please provide me with a list of all department IDs , department names , and their respective years of creation ?",
            "sql": "select department.department_id , department.name , department.creation"
        },
        {
            "utterance": "Excellent ! Can you filter this list to include only the rows that contain the most common ( most frequently occurring ) year of creation ?",
            "sql": "select department.department_id , department.name , department.creation where department.creation = ( select department.creation group_by department.creation order_by count ( department.* ) desc limit_value )"
        },
        {
            "utterance": "Perfect ! Can you tell me what is the total combined budget of these two departments ?",
            "sql": "select sum ( department.budget_in_billions ) where department.creation = ( select department.creation group_by department.creation order_by count ( department.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 3,
    "final": {
        "utterance": "Which head's name has the substring 'Ha'? List the id and name.",
        "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
    },
    "interaction": [
        {
            "utterance": "tell me the name of head id 1",
            "sql": "select head.name where head.head_id = value"
        },
        {
            "utterance": "Tell me the born state and age for head id 3",
            "sql": "select head.born_state , head.age where head.head_id = value"
        },
        {
            "utterance": "Which head 's name has the substring 'Ha ' ? List the id and name .",
            "sql": "select head.head_id , head.name where head.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the maximum and minimum budget of the departments?",
        "sql": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department"
    },
    "interaction": [
        {
            "utterance": "how many departments are there ?",
            "sql": "select count ( department.* )"
        },
        {
            "utterance": "how many employees are there in Department ID 2",
            "sql": "select department.num_employees where department.department_id = value"
        },
        {
            "utterance": "what is the name of Department ID 3",
            "sql": "select department.name where department.department_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'"
    },
    "interaction": [
        {
            "utterance": "where is Sergio Garc\u00eda born",
            "sql": "select head.born_state where head.name = value"
        },
        {
            "utterance": "what is the highest head id in the management",
            "sql": "select max ( head.head_id )"
        },
        {
            "utterance": "give me the age of all the people in the mangement",
            "sql": "select head.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "Show me the departments managed by heads whose temporary acting value is 'Yes ' , please | The table shows the ids of departments managed by heads whose temporary acting value is 'Yes ' . | Great , could you tell me the name and number of employees within those departments ?",
            "sql": "select department.name , department.num_employees where management.temporary_acting = value"
        },
        {
            "utterance": "Awesome , could you show me the budget of those departments ?",
            "sql": "select department.budget_in_billions where management.temporary_acting = value"
        },
        {
            "utterance": "Could you tell me when those departments were founded , and display the name next to each founding year ?",
            "sql": "select department.creation , department.name where management.temporary_acting = value"
        },
        {
            "utterance": "Could you tell me how many departments have a head whose temporary acting value is 'no ' ?",
            "sql": "select count ( management.* ) where management.temporary_acting = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "What are the departments managed by heads whose temporary acting value is `` yes '' ? | The following table shows the names of departments managed by heads whose temporary acting value is `` yes '' . | Show me the name and number of employees for the Treasury department .",
            "sql": "select department.name , department.num_employees where department.name = value"
        },
        {
            "utterance": "Show me the number of employees for the Homeland Security department .",
            "sql": "select department.name , department.num_employees where department.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 8,
    "final": {
        "utterance": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which department has more than 1 head at a time ? List the ID , Name and the number of heads .",
            "sql": "select department.department_id , department.name , count ( * ) group_by department.department_id having count ( * ) > value"
        },
        {
            "utterance": "Which Department has the most number of employee ? tell me the rank and creation year .",
            "sql": "select department.ranking , department.creation where department.num_employees = ( select max ( department.num_employees ) )"
        },
        {
            "utterance": "Which Department has the least number of employee ? tell me the rank and creation year .",
            "sql": "select department.ranking , department.creation where department.num_employees = ( select min ( department.num_employees ) )"
        },
        {
            "utterance": "Which Department has the highest Budget value ? tell me the rank and creation year .",
            "sql": "select department.ranking , department.creation where department.budget_in_billions = ( select max ( department.budget_in_billions ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 9,
    "final": {
        "utterance": "In which year were most departments established?",
        "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "In which year were most departments established ?",
            "sql": "select department.creation group_by department.creation order_by count ( department.* ) desc limit_value"
        },
        {
            "utterance": "How many different departments were created in 1789 ?",
            "sql": "select count ( department.* ) group_by department.creation order_by count ( department.* ) desc limit_value"
        },
        {
            "utterance": "What are the names of those two departments ?",
            "sql": "select department.name group_by department.creation order_by count ( department.* ) desc limit_value"
        },
        {
            "utterance": "How many employees does the Treasury Department have ?",
            "sql": "select department.num_employees where department.name = value"
        },
        {
            "utterance": "What is the budget in billions of the Treasury Department ?",
            "sql": "select department.budget_in_billions where department.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 10,
    "final": {
        "utterance": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'"
    },
    "interaction": [
        {
            "utterance": "Can you list the states where the secretaries of the Treasury department were born ?",
            "sql": "select head.born_state where department.name = value"
        },
        {
            "utterance": "Can you list the states where the secretaries of the Homeland Security department were born ?",
            "sql": "select head.born_state where department.name = value"
        },
        {
            "utterance": "What departments employ more than 100,000 employees ?",
            "sql": "select department.* where department.num_employees > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the role code with the largest number of employees?",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me which role code has the largest number of employees associated with it ?",
            "sql": "select employees.role_code group_by employees.role_code order_by count ( employees.* ) desc limit_value"
        },
        {
            "utterance": "Great ! Can you tell me how many employees have ED as their Role_code ?",
            "sql": "select count ( employees.* ) where employees.role_code = value"
        },
        {
            "utterance": "Excellent ! Would you be able to provide me with a list of the names and genders of those 7 employees ?",
            "sql": "select employees.employee_name , employees.gender_mfu where employees.role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the role code with the largest number of employees?",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( employees.* )"
        },
        {
            "utterance": "Which of the role codes has the most employees ?",
            "sql": "select employees.role_code group_by employees.role_code order_by count ( employees.* ) desc limit_value"
        },
        {
            "utterance": "How many employees does role code ED have ?",
            "sql": "select count ( employees.* ) where employees.role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the role code with the least employees.",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me the name of an HR employee ?",
            "sql": "select employees.employee_name where employees.role_code = value"
        },
        {
            "utterance": "Great , can you show the role code with the last employees ? | Did you mean the employee with the largest id ? | yes",
            "sql": "select employees.role_code order_by employees.employee_id desc limit_value"
        },
        {
            "utterance": "and the role code with the least employees ?",
            "sql": "select employees.role_code group_by employees.role_code order_by count ( employees.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the ids of all employees who don't destroy any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Would you please show me the ids of all employees who do n't destroy any documents ?",
            "sql": "select employees.employee_id except select documents_to_be_destroyed.destroyed_by_employee_id"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select employees.employee_name except select documents_to_be_destroyed.destroyed_by_employee_id"
        },
        {
            "utterance": "Would you please show me the ids of all employees who do destroy any documents ?",
            "sql": "select employees.employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 4,
    "final": {
        "utterance": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\""
    },
    "interaction": [
        {
            "utterance": "How many documents are named `` Robin CV '' ?",
            "sql": "select count ( all_documents.* ) where all_documents.document_name = value"
        },
        {
            "utterance": "What is the document id of that document ?",
            "sql": "select all_documents.document_id where all_documents.document_name = value"
        },
        {
            "utterance": "What is the date in location from for this document ?",
            "sql": "select document_locations.date_in_location_from where all_documents.document_name = value"
        },
        {
            "utterance": "What is the date in location to date ?",
            "sql": "select document_locations.date_in_locaton_to where all_documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the ids of all employees who don't destroy any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Which employees did not destroy any documents ? | Do you want the ids of all the employees who did not destroy any documents ? | Yes . Show the IDs of all employees who did n't destroy any documents please .",
            "sql": "select employees.employee_id except select documents_to_be_destroyed.destroyed_by_employee_id"
        },
        {
            "utterance": "Thank you . What are their names ?",
            "sql": "select employees.employee_name where employees.employee_id in ( select employees.employee_id except select documents_to_be_destroyed.destroyed_by_employee_id )"
        },
        {
            "utterance": "Thank you . What are their roles ?",
            "sql": "select employees.role_code where employees.employee_id in ( select employees.employee_id except select documents_to_be_destroyed.destroyed_by_employee_id )"
        },
        {
            "utterance": "Yes . What is their date of birth ?",
            "sql": "select employees.date_of_birth where employees.employee_id in ( select employees.employee_id except select documents_to_be_destroyed.destroyed_by_employee_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the ids of the employees who don't authorize destruction for any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( employees.employee_id )"
        },
        {
            "utterance": "How many employee have the ability to authorize the destruction of documents ?",
            "sql": "select count ( documents_to_be_destroyed.destruction_authorised_by_employee_id )"
        },
        {
            "utterance": "What are the ids of those particular employees ?",
            "sql": "select documents_to_be_destroyed.destruction_authorised_by_employee_id"
        },
        {
            "utterance": "Now how many employees ca n't authorize the destruction of documents .",
            "sql": "select sum ( employees.employee_id ) except select documents_to_be_destroyed.destruction_authorised_by_employee_id"
        },
        {
            "utterance": "May I have the ids of those employees who cant authorize the destruction of documents ?",
            "sql": "select employees.employee_id except select documents_to_be_destroyed.destruction_authorised_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the location code with the most documents?",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the location code with the most documents ?",
            "sql": "select document_locations.location_code group_by document_locations.location_code order_by count ( document_locations.* ) desc limit_value"
        },
        {
            "utterance": "Can you also tell me how many documents are there for that location ? | Do you mean the number of documents in the location with code x ? | Yes , please .",
            "sql": "select count ( document_locations.* ) where document_locations.location_code = value"
        },
        {
            "utterance": "How about the location code with the least documents ?",
            "sql": "select document_locations.location_code group_by document_locations.location_code order_by count ( document_locations.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of employees with role name Editor.",
        "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""
    },
    "interaction": [
        {
            "utterance": "How many employees have the role name Editor ?",
            "sql": "select employees.employee_name where roles.role_name = value"
        },
        {
            "utterance": "Can you list their names in this chat box ?",
            "sql": "select employees.employee_name where roles.role_name = value"
        },
        {
            "utterance": "How many have a DOB after 1978 ?",
            "sql": "select count ( * ) where roles.role_name = value and employees.date_of_birth > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( employees.* )"
        },
        {
            "utterance": "what is the planned destruction date of document ID 11",
            "sql": "select documents_to_be_destroyed.planned_destruction_date where documents_to_be_destroyed.document_id = value"
        },
        {
            "utterance": "what is the employee name of employee ID 30",
            "sql": "select employees.employee_name where employees.employee_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\""
    },
    "interaction": [
        {
            "utterance": "How about for all employees with the role name `` Human Resource '' ?",
            "sql": "select employees.employee_id where roles.role_name = value"
        },
        {
            "utterance": "What is that employee 's name ?",
            "sql": "select employees.employee_name where roles.role_name = value"
        },
        {
            "utterance": "What is the name of the employee whose role name is Manager ?",
            "sql": "select employees.employee_name where roles.role_name = value"
        },
        {
            "utterance": "What is the name of the employee whose role name is Human Resources ?",
            "sql": "select employees.employee_name where roles.role_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the location code with the most documents?",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the location code that has the largest number of documents ?",
            "sql": "select document_locations.location_code group_by document_locations.location_code order_by count ( document_locations.* ) desc limit_value"
        },
        {
            "utterance": "What about the least number of documents ?",
            "sql": "select document_locations.location_code group_by document_locations.location_code order_by count ( document_locations.* ) asc limit_value"
        },
        {
            "utterance": "How about date in location from , then ?",
            "sql": "select document_locations.location_code order_by document_locations.date_in_location_from desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of employees with role name Editor.",
        "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""
    },
    "interaction": [
        {
            "utterance": "Show the names of employees with role name Editor .",
            "sql": "select employees.employee_name where roles.role_name = value"
        },
        {
            "utterance": "Show the names of roles with role code..",
            "sql": "select roles.role_code , roles.role_name"
        },
        {
            "utterance": "Show the id of employees with role Role_Code",
            "sql": "select employees.employee_id , employees.role_code"
        },
        {
            "utterance": "Show the Role_Code of roles with Role_Description .",
            "sql": "select roles.role_code , roles.role_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the location codes with at least 3 documents.",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "What are the location codes of all the documents ?",
            "sql": "select distinct document_locations.location_code"
        },
        {
            "utterance": "What are the document id of all the location code ? | Do you mean you wan na see the whole document ids or see the document id and its location codes at the same time . | Whole document ids",
            "sql": "select distinct document_locations.document_id"
        },
        {
            "utterance": "What is the date in location from of document id 81 ?",
            "sql": "select document_locations.date_in_location_from where document_locations.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the role name and role description for employee called Ebba?",
        "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\""
    },
    "interaction": [
        {
            "utterance": "how many employees are there ?",
            "sql": "select count ( employees.* )"
        },
        {
            "utterance": "show their names please .",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "what is the date of birth of the employee named Ebba ?",
            "sql": "select employees.date_of_birth where employees.employee_name = value"
        },
        {
            "utterance": "ok , what are her role name and description ?",
            "sql": "select roles.role_name , roles.role_description where employees.employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the location name and code with the least documents.",
        "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of location name ?",
            "sql": "select ref_locations.location_name"
        },
        {
            "utterance": "can you show me a list of date in location to ? | Do you mean list of `` date in location to '' from the document locations table ? | yes",
            "sql": "select document_locations.date_in_locaton_to"
        },
        {
            "utterance": "show the location name and code with the least documents .",
            "sql": "select ref_locations.location_name , document_locations.location_code group_by document_locations.location_code order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the total saving balance for each account name.",
        "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "What is the savings balance for Wang ?",
            "sql": "select sum ( savings.balance ) where accounts.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    "interaction": [
        {
            "utterance": "what is the savings balance of id 1 ? | Did you mean the saving balance of the customer with id 1 ? | yes",
            "sql": "select savings.balance where savings.custid = value"
        },
        {
            "utterance": "what is the total checking and saving balance of all accounts ?",
            "sql": "select checking.balance + savings.balance"
        },
        {
            "utterance": "what is the sorted list of total checking and savings balance by ascending order ?",
            "sql": "select checking.balance + savings.balance order_by checking.balance + savings.balance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
    },
    "interaction": [
        {
            "utterance": "What is the average savings account balance ?",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "Which accounts with checking accounts have savings account balances higher than the average savings balance ?",
            "sql": "select accounts.name where accounts.name in ( select accounts.name where savings.balance > ( select avg ( savings.balance ) ) )"
        },
        {
            "utterance": "What is its checking account balance ?",
            "sql": "select checking.balance where accounts.name in ( select accounts.name where savings.balance > ( select avg ( savings.balance ) ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
    },
    "interaction": [
        {
            "utterance": "How many balance of customer id 1 ? | Do you want the saving balance of the customer with id 1 ? | Yes",
            "sql": "select savings.balance where savings.custid = value"
        },
        {
            "utterance": "Find the savings balance of Wang ?",
            "sql": "select savings.balance where accounts.name = value"
        },
        {
            "utterance": "What are the accountant name of customer id 3 ?",
            "sql": "select accounts.name where accounts.custid = value"
        },
        {
            "utterance": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance .",
            "sql": "select checking.balance where accounts.name in ( select accounts.name where savings.balance > ( select avg ( savings.balance ) ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know what is the average savings balance of all customers ?",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "Awesome , thank you . Then could you please show me the ID of the customers who have higher balance than this average ?",
            "sql": "select savings.custid where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "oh that 's a bit surprising , maybe this person is elevating the average a lot . Thank you , then could you please show me this customer 's balance on both CHECKING and SAVINGS table ?",
            "sql": "select checking.balance , savings.balance where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "That 's great , thank you . Then could you please let me know what is the sum of those two accounts ?",
            "sql": "select checking.balance + savings.balance where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "Thank you . Then could you please let me know what would be the difference between the balances of the two accounts ?",
            "sql": "select savings.balance - checking.balance where savings.balance > ( select avg ( savings.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
    },
    "interaction": [
        {
            "utterance": "Whose savings balance is lower than their checking balance ?",
            "sql": "select accounts.name where savings.balance < checking.balance"
        },
        {
            "utterance": "What is the total balance of `` Weeks '' Checking and savings .",
            "sql": "select savings.balance + checking.balance where accounts.name = value"
        },
        {
            "utterance": "Also , what is their customer ID ? | Weeks 's id ? | yes , Weeks ' ID , please .",
            "sql": "select accounts.custid where accounts.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the saving balance of the account with the highest checking balance.",
        "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the saving balance of the account with the highest checking balance .",
            "sql": "select savings.balance order_by checking.balance desc limit_value"
        },
        {
            "utterance": "And how about the lowest ?",
            "sql": "select savings.balance order_by checking.balance limit_value"
        },
        {
            "utterance": "Checking balance of Customer id 3",
            "sql": "select checking.balance where checking.custid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
        "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'"
    },
    "interaction": [
        {
            "utterance": "what is the highest saving balance ?",
            "sql": "select max ( savings.balance )"
        },
        {
            "utterance": "what is the lowest saving balance ?",
            "sql": "select min ( savings.balance )"
        },
        {
            "utterance": "can you show me a list of accounts name ?",
            "sql": "select accounts.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest saving balance.",
        "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the number of customers ?",
            "sql": "select count ( distinct accounts.custid )"
        },
        {
            "utterance": "how about the number of checking accounts ?",
            "sql": "select count ( checking.* )"
        },
        {
            "utterance": "what 's the lowest balance of a savings account ?",
            "sql": "select min ( savings.balance )"
        },
        {
            "utterance": "who owns that account ?",
            "sql": "select savings.custid order_by savings.balance limit_value"
        },
        {
            "utterance": "what 's the checking balance of that person ?",
            "sql": "select checking.balance order_by savings.balance limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the average checking balance of all checking accounts ?",
            "sql": "select avg ( checking.balance )"
        },
        {
            "utterance": "Hmm , I also want to know the average savings balance of all savings accounts .",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "Can you list the names of accounts whose checking balance is above the average checking balance , but savings balance is below the average savings balance ?",
            "sql": "select accounts.name where checking.balance > ( select avg ( checking.balance ) ) intersect select accounts.name where savings.balance < ( select avg ( savings.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest saving balance.",
        "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you display a list of all of the Savings Account customer IDs and the associated balances ?",
            "sql": "select savings.custid , savings.balance"
        },
        {
            "utterance": "Thanks ! Can you also update that list to show the checking balance for each customer ?",
            "sql": "select checking.balance"
        },
        {
            "utterance": "Okay ! Can you show me the customer name that is associate with the lowest savings account balance ?",
            "sql": "select accounts.name order_by savings.balance limit_value"
        },
        {
            "utterance": "Alright ! Can you now show me his checking account balance ?",
            "sql": "select checking.balance where accounts.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    "interaction": [
        {
            "utterance": "yes | Please clarify which one do you need | I need the Checking balance",
            "sql": "select checking.balance where checking.custid = value"
        },
        {
            "utterance": "what is the name of the custid 2 in Table name : ACCOUNTS",
            "sql": "select accounts.name where accounts.custid = value"
        },
        {
            "utterance": "what is the saving Balance Amount of the custid 2",
            "sql": "select savings.balance where savings.custid = value"
        },
        {
            "utterance": "Finding the checking balance and saving balance in the Brown 's account",
            "sql": "select checking.balance , savings.balance where accounts.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    "interaction": [
        {
            "utterance": "FIND THE all CHECKING BALANCE OF ALL ACCOUNTS",
            "sql": "select checking.balance"
        },
        {
            "utterance": "FIND THE SAVING BALANCE OF ALL ACCOUNTS",
            "sql": "select savings.balance"
        },
        {
            "utterance": "SORT ALL THE TOTAL BALANCE OF CHECKING AND SAVING ACCOUNT IN ASCENDING ORDER",
            "sql": "select checking.balance + savings.balance order_by checking.balance + savings.balance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest savings balance.",
        "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the customer name with the highest bank balance ? | Do you mean his savings balance ? | yes savings balance ?",
            "sql": "select accounts.name order_by savings.balance desc limit_value"
        },
        {
            "utterance": "What is his customer id ?",
            "sql": "select accounts.custid order_by savings.balance desc limit_value"
        },
        {
            "utterance": "What is the customer ID with lowest saving balance ?",
            "sql": "select savings.custid order_by savings.balance asc limit_value"
        },
        {
            "utterance": "How many customers have a minimum balance of atleast 30 , 000 ? | Do you mean the saving balance or the checking balance or the sum of the two ? | I want saving balance .",
            "sql": "select count ( savings.* ) where savings.balance > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of account that has the lowest total checking and saving balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of account that has the lowest total checking and saving balance .",
            "sql": "select accounts.name order_by checking.balance + savings.balance limit_value"
        },
        {
            "utterance": "Ok ! . Can you please give me the names of the accounts where the checking balance is more than 3000",
            "sql": "select accounts.name where checking.balance > value"
        },
        {
            "utterance": "Give me the names of the accounts where the savings balance is more than 20000",
            "sql": "select accounts.name where savings.balance > value"
        },
        {
            "utterance": "What is the highest balance in the savings account ?",
            "sql": "select savings.balance order_by savings.balance desc limit_value"
        },
        {
            "utterance": "Hmmm . Please tell me what is the lowest balance in the savings account .",
            "sql": "select min ( savings.balance )"
        },
        {
            "utterance": "Can you also give me the lowest and the highest balance for checking account .",
            "sql": "select max ( checking.balance ) , min ( checking.balance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the number of checking accounts for each account name.",
        "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "I need to know the number of checking accounts for each account name .",
            "sql": "select count ( * ) , accounts.name group_by accounts.name"
        },
        {
            "utterance": "What is the highest account balance of customers with checking accounts ?",
            "sql": "select max ( checking.balance )"
        },
        {
            "utterance": "What about the lowest account balance with customers with checking accounts ?",
            "sql": "select min ( checking.balance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the saving balance of the account with the highest checking balance.",
        "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of checking balance ?",
            "sql": "select checking.*"
        },
        {
            "utterance": "can you show me a list of saving balance ?",
            "sql": "select savings.*"
        },
        {
            "utterance": "can you show me a list of ACCOUNTS name ?",
            "sql": "select accounts.*"
        },
        {
            "utterance": "find the saving balance of the account with the highest checking balance ?",
            "sql": "select savings.balance order_by checking.balance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many accounts have a savings balance above the average savings balance?",
        "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "how many accounts have a savings balance above the average savings balance ?",
            "sql": "select count ( savings.* ) where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "what was my savings amount balance ? | Sorry , what is your customer id ? | 1339",
            "sql": "select savings.* where savings.custid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the total saving balance for each account name.",
        "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "What is the highest balance ?",
            "sql": "select max ( savings.balance )"
        },
        {
            "utterance": "How about the lowest ?",
            "sql": "select min ( savings.balance )"
        },
        {
            "utterance": "List all the people with accounts",
            "sql": "select accounts.name"
        },
        {
            "utterance": "And how much money does each one have saved ?",
            "sql": "select sum ( savings.balance ) , accounts.name group_by accounts.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the names and total checking and savings account balances ?",
            "sql": "select accounts.name , checking.balance + savings.balance"
        },
        {
            "utterance": "I want to know the average savings balance of all accounts .",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "Hmm , can you list the names of customers whose savings account balances are higher than the average savings balance ?",
            "sql": "select accounts.name where savings.balance > ( select avg ( savings.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me the names on all accounts in the bank ?",
            "sql": "select accounts.name"
        },
        {
            "utterance": "What are the checking and savings balances on those accounts ? Could you please sort them by their total balances in descending order ?",
            "sql": "select checking.balance , savings.balance order_by checking.balance + savings.balance desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Find the name of the top 3 accounts with the highest saving balance sorted by savings balance in descending order .",
            "sql": "select accounts.name order_by savings.balance desc limit_value"
        },
        {
            "utterance": "Can you add in their customer IDs to the table please ?",
            "sql": "select accounts.name , savings.custid order_by savings.balance desc limit_value"
        },
        {
            "utterance": "What is the average balance of all accounts ?",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "What is the name on the account with the lowest balance ? | The name of the account with the lowest saving balance is Weeks | What is the name on the account with the third highest saving balance ?",
            "sql": "select accounts.name order_by savings.balance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
    },
    "interaction": [
        {
            "utterance": "Which nations have hosts older than 45 ?",
            "sql": "select distinct host.nationality where host.age > value"
        },
        {
            "utterance": "Which nations have hosts younger than 35 ?",
            "sql": "select distinct host.nationality where host.age < value"
        },
        {
            "utterance": "Which nation has hosts both older than 45 and younger than 35 ?",
            "sql": "select host.nationality where host.age > value intersect select host.nationality where host.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the host names for parties with number of hosts greater than 20.",
        "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"
    },
    "interaction": [
        {
            "utterance": "What are the names of the hosts that held parties with more than 20 hosts ?",
            "sql": "select host.name where party.number_of_hosts > value"
        },
        {
            "utterance": "What are the names of the hosts that held parties with the least number of hosts ?",
            "sql": "select host.name order_by party.number_of_hosts asc limit_value"
        },
        {
            "utterance": "What is the location of the party with the oldest host ?",
            "sql": "select party.location order_by host.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the themes of parties and the names of the party hosts.",
        "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    "interaction": [
        {
            "utterance": "Can you list the themes of the parties with the names of the party hosts ?",
            "sql": "select party.party_theme , host.name"
        },
        {
            "utterance": "What are the nationalities of the party hosts ?",
            "sql": "select host.nationality"
        },
        {
            "utterance": "Who was the host of the earliest party listed ? | The host of the earliest party listed is the host with id 7 . | What was their name ?",
            "sql": "select host.name order_by party.first_year limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the themes of parties and the names of the party hosts.",
        "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    "interaction": [
        {
            "utterance": "Show me a list of party themes",
            "sql": "select party.party_theme"
        },
        {
            "utterance": "Can you show me the corresponding party id and host id to each theme ?",
            "sql": "select party_host.party_id , party_host.host_id , party.party_theme"
        },
        {
            "utterance": "Can you add host names to that table ?",
            "sql": "select host.name , party_host.party_id , party_host.host_id , party.party_theme"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name and the nationality of the oldest host.",
        "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "whats the average age of the hosts ?",
            "sql": "select avg ( host.age )"
        },
        {
            "utterance": "and how many of those 8 hosts are younger than 40 ?",
            "sql": "select count ( host.* ) where host.nationality = value and host.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\""
    },
    "interaction": [
        {
            "utterance": "What are some parties with theme `` Spring '' ?",
            "sql": "select party.* where party.party_theme = value"
        },
        {
            "utterance": "What are the first year and last year of the parties with theme `` Teqnology ''",
            "sql": "select party.first_year , party.last_year where party.party_theme = value"
        },
        {
            "utterance": "OK , can you show me the first year and last year of parties with theme of both `` Spring '' and `` Teqnology '' ?",
            "sql": "select party.first_year , party.last_year where party.party_theme = value or party.party_theme = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the locations of parties with hosts older than 50.",
        "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
    },
    "interaction": [
        {
            "utterance": "which locations of parties have hosts older than 50 ?",
            "sql": "select party.location where host.age > value"
        },
        {
            "utterance": "How many hosts does party theme spring have ?",
            "sql": "select party.number_of_hosts where party.party_theme = value"
        },
        {
            "utterance": "How many parties are hosted in Hemkade 48 Zaandam ?",
            "sql": "select count ( party.* ) where party.location = value"
        },
        {
            "utterance": "How many hosts have the nationality united states ?",
            "sql": "select count ( host.* ) where host.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the most common nationality of hosts.",
        "sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average age",
            "sql": "select avg ( host.age )"
        },
        {
            "utterance": "who is the youngest",
            "sql": "select host.name order_by host.age limit_value"
        },
        {
            "utterance": "show the most common nationality of hosts",
            "sql": "select host.nationality group_by host.nationality order_by count ( host.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the location of the party with the most hosts?",
        "sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the locations available ?",
            "sql": "select party.location"
        },
        {
            "utterance": "what locations of the party have the most hosts ?",
            "sql": "select party.location order_by party.number_of_hosts desc limit_value"
        },
        {
            "utterance": "list the party themes available",
            "sql": "select party.party_theme"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
    },
    "interaction": [
        {
            "utterance": "What is the location of the Id no-1 ?",
            "sql": "select party.location where party.party_id = value"
        },
        {
            "utterance": "how many host in the id no_3 ?",
            "sql": "select party.number_of_hosts where party.party_id = value"
        },
        {
            "utterance": "what is the age of the host id 3 ?",
            "sql": "select host.age where host.host_id = value"
        },
        {
            "utterance": "which nationality of host id no-3 ?",
            "sql": "select host.nationality where host.host_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "What is the total number of staff members ?",
            "sql": "select count ( staff.* )"
        },
        {
            "utterance": "What is the last name of the staff member with the first name `` Janessa '' ?",
            "sql": "select staff.last_name where staff.first_name = value"
        },
        {
            "utterance": "What is the birthday of the staff member with the first and last name as Janessa and Sawayn ?",
            "sql": "select staff.date_of_birth where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 1,
    "final": {
        "utterance": "Which city does has most number of customers?",
        "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which city has most number of customers ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many customers does it have ?",
            "sql": "select count ( * ) group_by addresses.city order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Give me the names of those customers",
            "sql": "select customers.first_name , customers.last_name where addresses.city = ( select addresses.city group_by addresses.city order_by count ( * ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the first name of the staff who did not give any lesson?",
        "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id"
    },
    "interaction": [
        {
            "utterance": "How many people are in the staff ?",
            "sql": "select count ( staff.* )"
        },
        {
            "utterance": "How many of these people cancelled their lesson ?",
            "sql": "select count ( distinct staff.staff_id ) where lessons.lesson_status_code = value"
        },
        {
            "utterance": "What is the first name of these people ?",
            "sql": "select staff.first_name where lessons.lesson_status_code = value group_by staff.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "How many people are named Janessa ? | Do you mean the number of people whose first name is Janessa ? | Yes",
            "sql": "select count ( * ) where staff.first_name = value"
        },
        {
            "utterance": "What is the Zip Code where Janessa Lived ? | Do you mean the zip postcode in the address where Janessa lived ? | Yes",
            "sql": "select addresses.zip_postcode where staff.first_name = value"
        },
        {
            "utterance": "and Camylle ? | Do you mean the zip postcode in the area where the person with first name Camylle lived ? | Yes",
            "sql": "select addresses.zip_postcode where staff.first_name = value"
        },
        {
            "utterance": "What is the zip postcode where Kaitlin lived ? | Do you mean the zip postcode in the ares where the staff with first name Kaitlin lived ? | Yes",
            "sql": "select addresses.zip_postcode where staff.first_name = value"
        },
        {
            "utterance": "What is Kaitlin 's last name ? | Do you mean the last name of the staff whose first name is Kaitlin ? | Yes",
            "sql": "select staff.last_name where staff.first_name = value"
        },
        {
            "utterance": "and Janessa ? | Do you mean the last name of the staff whose first name is Janessa ? | Yes",
            "sql": "select staff.last_name where staff.first_name = value"
        },
        {
            "utterance": "What is the zip postcode where staff named Janessa Sawayn lived ? | Do you mean the zip code of staff with first name Janessa and last name Sawayn lived ? | Yes",
            "sql": "select addresses.zip_postcode where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 4,
    "final": {
        "utterance": "Which city lives most of staffs? List the city name and number of staffs.",
        "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What state or province has the most staff living in it ?",
            "sql": "select addresses.state_province_county group_by addresses.state_province_county order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the number of staff living in Georgia ?",
            "sql": "select count ( * ) group_by addresses.state_province_county order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What city in Georgia has the most staff living in it ?",
            "sql": "select addresses.city where addresses.state_province_county = value group_by addresses.city order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the number of staff living in Port Melyssa and what are their names ? | first name or last name ? | both please",
            "sql": "select staff.first_name , staff.last_name where addresses.city = value"
        },
        {
            "utterance": "What are all their birthdays ?",
            "sql": "select staff.date_of_birth where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 5,
    "final": {
        "utterance": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"
    },
    "interaction": [
        {
            "utterance": "How long is the total lesson time took by customer with first name Rylan and last name Goodwin ?",
            "sql": "select sum ( lessons.lesson_time ) where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What 's the status of the lesson by the customer with first name Rylan and last name Goodwin",
            "sql": "select lessons.lesson_status_code where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What 's the customer id of the customer with first name Rylan and last name Goodwin ?",
            "sql": "select customers.customer_id where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 6,
    "final": {
        "utterance": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customers.customer_id )"
        },
        {
            "utterance": "please tell me Clara phone number",
            "sql": "select customers.phone_number where customers.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""
    },
    "interaction": [
        {
            "utterance": "What is the status code of the customer with the last name Kohler or first name Marina ?",
            "sql": "select customers.customer_status_code where customers.first_name = value or customers.last_name = value"
        },
        {
            "utterance": "What is the mobile phone number of the customer with the last name Kohler or first name Marina ?",
            "sql": "select customers.phone_number where customers.first_name = value or customers.last_name = value"
        },
        {
            "utterance": "How about their email addresses ?",
            "sql": "select customers.email_address where customers.first_name = value or customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 8,
    "final": {
        "utterance": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
        "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you provide me with the country and state province county information for the staff member named Janessa Sawayn ? | Are you referring to the staff member having first name Janessa and last name Sawayn ? | Yes , that is correct !",
            "sql": "select addresses.country , addresses.state_province_county where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 9,
    "final": {
        "utterance": "How many lesson does customer with first name Ray took?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of lesson date ?",
            "sql": "select lessons.lesson_date"
        },
        {
            "utterance": "what is the average of lesson time ?",
            "sql": "select avg ( lessons.lesson_time )"
        },
        {
            "utterance": "what is the highest price ?",
            "sql": "select lessons.price order_by lessons.price desc limit_value"
        },
        {
            "utterance": "how many lessons does customer with first name ray took ?",
            "sql": "select count ( * ) where customers.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 10,
    "final": {
        "utterance": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "how many address are presented on the table",
            "sql": "select count ( addresses.* )"
        },
        {
            "utterance": "list out the staff first name on the table",
            "sql": "select staff.first_name"
        },
        {
            "utterance": "what is the city of Janessa",
            "sql": "select addresses.city where staff.first_name = value"
        },
        {
            "utterance": "exactly",
            "sql": "select * where staff.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 11,
    "final": {
        "utterance": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"
    },
    "interaction": [
        {
            "utterance": "What are the lessons thought by jenessa",
            "sql": "select lessons.lesson_id where staff.first_name = value"
        },
        {
            "utterance": "yes i need details",
            "sql": "select lessons.* where lessons.lesson_id = value"
        },
        {
            "utterance": "What was the lesson date",
            "sql": "select lessons.lesson_date where lessons.lesson_id = value"
        },
        {
            "utterance": "What was the lesson timing",
            "sql": "select lessons.lesson_time where lessons.lesson_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 12,
    "final": {
        "utterance": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "how many Lessons there",
            "sql": "select count ( lessons.* )"
        },
        {
            "utterance": "what is the nickname of staff id 3",
            "sql": "select staff.nickname where staff.staff_id = value"
        },
        {
            "utterance": "what is the middle name if staff with id 2",
            "sql": "select staff.middle_name where staff.staff_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 13,
    "final": {
        "utterance": "List the states which have between 2 to 4 staffs living there.",
        "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"
    },
    "interaction": [
        {
            "utterance": "Which state have more than 2 staff members living there ?",
            "sql": "select addresses.state_province_county group_by addresses.state_province_county having count ( * ) > value"
        },
        {
            "utterance": "Of those 2 states , which ones have less than 4 staff members living there ?",
            "sql": "select addresses.state_province_county group_by addresses.state_province_county having count ( * ) > value and count ( * ) < value"
        },
        {
            "utterance": "Precisely how many staff members live in Connecticut ?",
            "sql": "select count ( * ) where addresses.state_province_county = value"
        },
        {
            "utterance": "Can you list the first names of these 3 staff members ?",
            "sql": "select staff.first_name where addresses.state_province_county = value"
        },
        {
            "utterance": "Can you provide me with the nickname of Janessa ?",
            "sql": "select staff.nickname where staff.first_name = value"
        },
        {
            "utterance": "Of the 3 staff members living in Connecticut , can you tell me which one joined the staff first ?",
            "sql": "select staff.first_name where addresses.state_province_county = value order_by staff.date_joined_staff asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the vehicle id and staff id for all lesson id 's ...",
            "sql": "select vehicles.vehicle_id , lessons.staff_id"
        },
        {
            "utterance": "What is the vehicle details of vehicle id 1 and 2 ?",
            "sql": "select vehicles.vehicle_details where vehicles.vehicle_id = value or vehicles.vehicle_id = value"
        },
        {
            "utterance": "What is the price of vehicle id 2 ?",
            "sql": "select lessons.price where lessons.vehicle_id = value"
        },
        {
            "utterance": "What is the id and detail of the vehicle used in lessons for most of the times ?",
            "sql": "select vehicles.vehicle_id , vehicles.vehicle_details group_by vehicles.vehicle_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 15,
    "final": {
        "utterance": "Which city does has most number of customers?",
        "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which city has the most number of customers ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Which city has the least number of customers ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) limit_value"
        },
        {
            "utterance": "What is the most common city of all customers with the customer status code `` Bad Customer '' ? | What do you mean by saying the most common city ? | The city name that appears the most",
            "sql": "select addresses.city where customers.customer_status_code = value group_by addresses.city order_by count ( * ) limit_value"
        },
        {
            "utterance": "What is the country of Ericamouth ?",
            "sql": "select addresses.country where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 16,
    "final": {
        "utterance": "Find out the first name and last name of staff lived in city Damianfort.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"
    },
    "interaction": [
        {
            "utterance": "Can you display the address id associated with the city of Damianfort ?",
            "sql": "select addresses.address_id where addresses.city = value"
        },
        {
            "utterance": "Can you display all staff ids that contain a staff address id of 14 ?",
            "sql": "select staff.staff_id where staff.staff_address_id = value"
        },
        {
            "utterance": "Can you display the first and last names associated with those staff ids ?",
            "sql": "select staff.staff_id , staff.first_name , staff.last_name where staff.staff_address_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 17,
    "final": {
        "utterance": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
    },
    "interaction": [
        {
            "utterance": "Can you list all of the staff first names please ?",
            "sql": "select staff.first_name"
        },
        {
            "utterance": "Can you filter that list to show only the staff with the letter 'a ' in their names ?",
            "sql": "select staff.first_name where staff.first_name like value"
        },
        {
            "utterance": "Thank you ! Can you list how many lessons each of those individuals taught ?",
            "sql": "select count ( * ) , staff.first_name where staff.first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 18,
    "final": {
        "utterance": "How many lesson does customer with first name Ray took?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
    },
    "interaction": [
        {
            "utterance": "Hello , how many customers are there ?",
            "sql": "select count ( customers.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 19,
    "final": {
        "utterance": "Which last names are both used by customers and by staff?",
        "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of nicknames ?",
            "sql": "select staff.nickname"
        },
        {
            "utterance": "who is the first joined staff ? | Which information do you want to know about the first joined staff ? | can you show me a list of date joined staff ?",
            "sql": "select staff.date_joined_staff"
        },
        {
            "utterance": "can you shoe me customers ' phone numbers ? | Do you mean cell mobile phone number or phone number ? | phone number",
            "sql": "select customers.phone_number"
        },
        {
            "utterance": "which last names are both used by customers and by staff ?",
            "sql": "select customers.last_name intersect select staff.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 20,
    "final": {
        "utterance": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"
    },
    "interaction": [
        {
            "utterance": "What is the date the customer with first name Carole and last Name Bernhard become a customer ?",
            "sql": "select customers.date_became_customer where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What is the amount outstanding for this customer ?",
            "sql": "select customers.amount_outstanding where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What is the customer status code for this customer ?",
            "sql": "select customers.customer_status_code where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What is the date the customer with last name Bernhard become a customer ?",
            "sql": "select customers.date_became_customer where customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 21,
    "final": {
        "utterance": "Which last names are both used by customers and by staff?",
        "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
    },
    "interaction": [
        {
            "utterance": "Which last names are both used by customers and staff ?",
            "sql": "select customers.last_name intersect select staff.last_name"
        },
        {
            "utterance": "What is the most common first name of staff ?",
            "sql": "select staff.first_name group_by staff.first_name order_by count ( staff.* ) desc limit_value"
        },
        {
            "utterance": "What 's the most common last name of staff ?",
            "sql": "select staff.last_name group_by staff.first_name order_by count ( staff.* ) desc limit_value"
        },
        {
            "utterance": "What are the first names of the customers with the last name Mertz ?",
            "sql": "select staff.first_name where staff.last_name = value"
        },
        {
            "utterance": "What about the staff ?",
            "sql": "select staff.first_name where staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 22,
    "final": {
        "utterance": "List first name and last name of customers lived in city Lockmanfurt.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"
    },
    "interaction": [
        {
            "utterance": "Can you list the address id of all customers who lived in Lockmanfurt ?",
            "sql": "select addresses.address_id where addresses.city = value"
        },
        {
            "utterance": "Can you list all other related information for Sigrid Schmeler ?",
            "sql": "select customers.* where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 23,
    "final": {
        "utterance": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"
    },
    "interaction": [
        {
            "utterance": "How many lessons taken by customer with first name as Ryan and last name as Goodwin were completed ?",
            "sql": "select count ( * ) where customers.first_name = value and customers.last_name = value and lessons.lesson_status_code = value"
        },
        {
            "utterance": "What customer status code does Ryan Goodwin have ?",
            "sql": "select customers.customer_status_code where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What is Ryan Goodwin 's date of birth ?",
            "sql": "select customers.date_of_birth where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the authors who have submissions to more than one workshop.",
        "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1"
    },
    "interaction": [
        {
            "utterance": "list the authors have submissions",
            "sql": "select submission.author"
        },
        {
            "utterance": "show me the list of authors who have submissions to workshop .",
            "sql": "select distinct submission.author"
        },
        {
            "utterance": "list the authors who have submissions to more than one workshop .",
            "sql": "select submission.author group_by submission.author having count ( distinct acceptance.workshop_id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\""
    },
    "interaction": [
        {
            "utterance": "May I have a list of authors ?",
            "sql": "select submission.author"
        },
        {
            "utterance": "Can you give me a list of all authors from Florida , or Temple ? | Do you mean the authors whose college is Florida or Temple ? | Yes I did .",
            "sql": "select submission.author where submission.college = value or submission.college = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 2,
    "final": {
        "utterance": "List the authors who do not have submission to any workshop.",
        "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)"
    },
    "interaction": [
        {
            "utterance": "how many acceptance are presented on the table",
            "sql": "select count ( acceptance.* )"
        },
        {
            "utterance": "what is highest score of submission",
            "sql": "select submission.scores order_by submission.scores desc limit_value"
        },
        {
            "utterance": "list out the authors",
            "sql": "select submission.author"
        },
        {
            "utterance": "what is the college of Steve Niehaus",
            "sql": "select submission.college where submission.author = value"
        },
        {
            "utterance": "list the authors who do not have submission to any workshop",
            "sql": "select submission.author where submission.submission_id not in ( select acceptance.submission_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 3,
    "final": {
        "utterance": "Show each author and the number of workshops they submitted to.",
        "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author"
    },
    "interaction": [
        {
            "utterance": "How many author are in the workshop altogether",
            "sql": "select count ( distinct submission.author )"
        },
        {
            "utterance": "Give me the names of all the authors .",
            "sql": "select distinct submission.author"
        },
        {
            "utterance": "How many workshops did each author submitted to",
            "sql": "select submission.author , count ( distinct acceptance.workshop_id ) group_by submission.author"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
        "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005"
    },
    "interaction": [
        {
            "utterance": "Show the country of appelations Alexander Valley ?",
            "sql": "select appellations.county where appellations.appelation = value"
        },
        {
            "utterance": "Show the maximum price of wins from the appelations in central Coast area and produced before thebyear of 2005 ?",
            "sql": "select max ( wine.price ) where appellations.area = value and wine.year < value"
        },
        {
            "utterance": "Show the country of appelations Amador County ?",
            "sql": "select appellations.county where appellations.appelation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"
    },
    "interaction": [
        {
            "utterance": "out of those show me prices higher than 30 | The names of all wines that have prices both higher than some wines from John Anthony winery and higher than 30 are shown in the table | One last question . out of those show me cases higher than 300",
            "sql": "select distinct wine.name where wine.price > ( select min ( wine.price ) where wine.winery = value ) and wine.price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"
    },
    "interaction": [
        {
            "utterance": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery .",
            "sql": "select distinct wine.name where wine.price > ( select min ( wine.price ) where wine.winery = value )"
        },
        {
            "utterance": "Find the price of all wines that have prices higher than some wines from John Anthony winery .",
            "sql": "select wine.price where wine.price > ( select min ( wine.price ) where wine.winery = value )"
        },
        {
            "utterance": "Find the score of all wines that have prices higher than some wines from John Anthony winery .",
            "sql": "select wine.score where wine.price > ( select min ( wine.price ) where wine.winery = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you please show me the list of all appellations those produce wine after 2008 ?",
            "sql": "select wine.appelation where wine.year > value"
        },
        {
            "utterance": "That 's a big list , thank you . Then could you please exclude Central Coast area from them ?",
            "sql": "select wine.appelation where wine.year > value except select appellations.appelation where appellations.area = value"
        },
        {
            "utterance": "That 's great , thank you . Could you please show me the list of states where these appellations are located at ?",
            "sql": "select appellations.state where appellations.appelation in ( select wine.appelation where wine.year > value except select appellations.appelation where appellations.area = value )"
        },
        {
            "utterance": "Oh.. actually somewhat expected that . Thank you , then could you please let me know the average price of all wines ?",
            "sql": "select avg ( wine.price )"
        },
        {
            "utterance": "Then could you please show me the list of wines those are more expensive than the average ?",
            "sql": "select wine.* where wine.price > ( select avg ( wine.price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the most expensive wine made in the year 2006 ?",
            "sql": "select wine.* where wine.year = value order_by wine.price desc limit_value"
        },
        {
            "utterance": "Great , can you show me all wines that have a higher price than the one currently in the table ?",
            "sql": "select wine.* where wine.price > ( select max ( wine.price ) where wine.year = value )"
        },
        {
            "utterance": "Can you show only the name ?",
            "sql": "select wine.name where wine.price > ( select max ( wine.price ) where wine.year = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the average price and score of wines grouped by appelation?",
        "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation"
    },
    "interaction": [
        {
            "utterance": "Which is the most expensive wine ?",
            "sql": "select wine.* order_by wine.price desc limit_value"
        },
        {
            "utterance": "From which year is it ?",
            "sql": "select wine.year order_by wine.price desc limit_value"
        },
        {
            "utterance": "What is the appelation of Giana | What is Giana ? | Sorry Giana is the name of wine",
            "sql": "select wine.appelation where wine.name = value"
        },
        {
            "utterance": "Which wine has a score of 91 ?",
            "sql": "select wine.* where wine.score = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Please show me the type of grape available at Old Kraft Vineyard | The type of grape in the wine with a name of Old Kraft Vineyard is Zinfandel . | What are other wineries that also have Zinfandel ?",
            "sql": "select wine.winery where wine.grape = value"
        },
        {
            "utterance": "Can you give me the top three wineries with the most white wines ?",
            "sql": "select wine.winery where grapes.color = value group_by wine.winery order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Which of these have the most white wines ?",
            "sql": "select wine.winery where grapes.color = value group_by wine.winery order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""
    },
    "interaction": [
        {
            "utterance": "Which appelation produces the most expensive wine ?",
            "sql": "select appellations.appelation where wine.price = ( select max ( wine.price ) )"
        },
        {
            "utterance": "How much is the most expensive wine produced in Sonoma County ?",
            "sql": "select max ( wine.price ) where appellations.county = value"
        },
        {
            "utterance": "How many wines are produced in Sonoma County ?",
            "sql": "select count ( * ) where appellations.county = value"
        },
        {
            "utterance": "What is the price of the least expensive wine produced in Sonoma County ?",
            "sql": "select min ( wine.price ) where appellations.county = value"
        },
        {
            "utterance": "What is the median price of wines produced in Sonoma County ? | Did you mean the average price of wines produced in Sonoma County ? | Yes , what is the average price of wines produced in Sonoma County ?",
            "sql": "select avg ( wine.price ) where appellations.county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"
    },
    "interaction": [
        {
            "utterance": "Which wine has the highest price ?",
            "sql": "select wine.* order_by wine.price desc limit_value"
        },
        {
            "utterance": "Which wine has the highest score ?",
            "sql": "select wine.* order_by wine.score desc limit_value"
        },
        {
            "utterance": "Which wine has the most cases available ?",
            "sql": "select wine.* order_by wine.cases desc limit_value"
        },
        {
            "utterance": "How about winery with the least cases ?",
            "sql": "select wine.winery order_by wine.cases asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names and scores of wines that are made of white color grapes?",
        "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""
    },
    "interaction": [
        {
            "utterance": "Which kinds of grapes are white ?",
            "sql": "select grapes.grape where grapes.color = value"
        },
        {
            "utterance": "List all the wines that use color white grapes . | What kinds of attributes of wines do you want ? | List wines made with white grapes .",
            "sql": "select * where grapes.color = value"
        },
        {
            "utterance": "Excellent . What is their average score ?",
            "sql": "select avg ( wine.score ) where grapes.color = value"
        },
        {
            "utterance": "What is the average score of wines not made with white grapes ?",
            "sql": "select avg ( wine.score ) where grapes.color != value"
        },
        {
            "utterance": "List only the names and scores of wines made with white grapes .",
            "sql": "select wine.name , wine.score where grapes.color = value"
        },
        {
            "utterance": "What is the maximum , minimum , and average price of these wines ?",
            "sql": "select max ( wine.price ) , min ( wine.price ) , avg ( wine.price ) where grapes.color = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 10,
    "final": {
        "utterance": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
    },
    "interaction": [
        {
            "utterance": "What grapes have a score higher than 93 ?",
            "sql": "select distinct wine.grape where wine.score > value"
        },
        {
            "utterance": "What are the appellations whose score is higher than 93 ?",
            "sql": "select distinct wine.appelation where wine.score > value"
        },
        {
            "utterance": "What are the names of wines whose score is higher than 93 ?",
            "sql": "select wine.name where wine.score > value"
        },
        {
            "utterance": "Can you please list the grapes , appellations , and names of wines whose score is higher than 93 ?",
            "sql": "select wine.grape , wine.appelation , wine.name where wine.score > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"
    },
    "interaction": [
        {
            "utterance": "Please show me the names of wines by Brander winery .",
            "sql": "select wine.name where wine.winery = value"
        },
        {
            "utterance": "Hmm , can you add the production years ?",
            "sql": "select wine.name , wine.year where wine.winery = value"
        },
        {
            "utterance": "What are the names of wines whose production year are before the year of all wines by Brander winery ?",
            "sql": "select wine.name where wine.year < ( select min ( wine.year ) where wine.winery = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you find the appellations that produce wines after the year of 2008 but not in Central Coast area .",
            "sql": "select wine.appelation where wine.year > value except select appellations.appelation where appellations.area = value"
        },
        {
            "utterance": "How many produce in the sierra foothills ? | Did you want the number of appelations that produce wine in the Sierra Foothills ? | yes",
            "sql": "select count ( appellations.* ) where appellations.area = value"
        },
        {
            "utterance": "How many appellations produce wine in Napa Valley ?",
            "sql": "select count ( appellations.* ) where appellations.county = value"
        },
        {
            "utterance": "How many appellations produce wine in St. Helena ?",
            "sql": "select count ( wine.* ) where wine.appelation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the color of the grape whose wine products has the highest average price?",
        "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all wine products ?",
            "sql": "select avg ( wine.price )"
        },
        {
            "utterance": "Which wine product has the highest price ?",
            "sql": "select wine.* where wine.price = ( select max ( wine.price ) )"
        },
        {
            "utterance": "Which wine products have the highest average price ? | Do you mean which grape whose wine products has the highest average price ? | Yes , Which grapes are in the wine products that have the highest average price ?",
            "sql": "select grapes.grape group_by wine.grape order_by avg ( wine.price ) desc limit_value"
        },
        {
            "utterance": "What is the average price of the products that Roussanne is in ?",
            "sql": "select avg ( wine.price ) group_by wine.grape order_by avg ( wine.price ) desc limit_value"
        },
        {
            "utterance": "What color of grape is Roussanne ?",
            "sql": "select grapes.color where grapes.grape = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the maximum price and score of wines in each year?",
        "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR"
    },
    "interaction": [
        {
            "utterance": "hello , what are the maximum price and score of wines in each year ?",
            "sql": "select max ( wine.price ) , max ( wine.score ) , wine.year group_by wine.year"
        },
        {
            "utterance": "yes | Did you mean the No in the wine table which is best liked ? | yes that is what i meant",
            "sql": "select wine.no order_by wine.score desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"
    },
    "interaction": [
        {
            "utterance": "Which wines were produced before 2000 ?",
            "sql": "select distinct wine.name where wine.year < value"
        },
        {
            "utterance": "What is the most common year of production ?",
            "sql": "select wine.year group_by wine.year order_by count ( wine.* ) desc limit_value"
        },
        {
            "utterance": "Which wines were produced in 2007 ?",
            "sql": "select wine.winery where wine.year = value"
        },
        {
            "utterance": "What about the ones after the year 2010 ?",
            "sql": "select distinct wine.name where wine.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the average price of wines that are not produced from Sonoma county.",
        "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"
    },
    "interaction": [
        {
            "utterance": "what is the average price of wine not produced in Sanoma county",
            "sql": "select avg ( wine.price ) where appellations.county != value"
        },
        {
            "utterance": "list all wineries available .",
            "sql": "select distinct wine.winery"
        },
        {
            "utterance": "list the all their prices",
            "sql": "select distinct wine.winery , wine.price"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)"
    },
    "interaction": [
        {
            "utterance": "Show me all the wine names made in the year 2006 .",
            "sql": "select wine.name where wine.year = value"
        },
        {
            "utterance": "Show me their prices .",
            "sql": "select wine.price where wine.year = value"
        },
        {
            "utterance": "What is the maximum of these prices ?",
            "sql": "select max ( wine.price ) where wine.year = value"
        },
        {
            "utterance": "Show me all the wine names that have a price higher than 200 .",
            "sql": "select wine.name where wine.price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"
    },
    "interaction": [
        {
            "utterance": "Show the color of Barbera Grape ?",
            "sql": "select grapes.color where grapes.grape = value"
        },
        {
            "utterance": "Show the grape which scores higher than 90 ?",
            "sql": "select distinct wine.grape where wine.score > value"
        },
        {
            "utterance": "Show the grape whose white color grapes are used to produce wines ?",
            "sql": "select distinct grapes.grape where grapes.color = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"
    },
    "interaction": [
        {
            "utterance": "Which wines are made of Red color grapes ? | Here are the wine names for wine made of Red color grapes . | Out of them which have prices higher than 50 ?",
            "sql": "select wine.name where grapes.color = value and wine.price > value"
        },
        {
            "utterance": "And where are they located ?",
            "sql": "select wine.state where grapes.color = value and wine.price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"
    },
    "interaction": [
        {
            "utterance": "Which wine uses Cabernet Franc grapes",
            "sql": "select wine.name where grapes.grape = value"
        },
        {
            "utterance": "What are the wines that have prices higher than 50 ?",
            "sql": "select * where wine.price > value"
        },
        {
            "utterance": "What grapes are red color ?",
            "sql": "select grapes.grape where grapes.color = value"
        },
        {
            "utterance": "Among the wines that have prices higher than 50 , which ones use red color grapes ?",
            "sql": "select wine.name where grapes.color = value and wine.price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the wineries that have at least four wines.",
        "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4"
    },
    "interaction": [
        {
            "utterance": "give me the name of the wineries",
            "sql": "select wine.winery"
        },
        {
            "utterance": "how many wineries have at least 4 wines ?",
            "sql": "select count ( wine.* ) ( select wine.winery group_by wine.winery having count ( wine.* ) > = value )"
        },
        {
            "utterance": "can you tell me the names of those wineries ?",
            "sql": "select wine.winery group_by wine.winery having count ( wine.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the color of the grape whose wine products has the highest average price?",
        "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the grape whose wine products had the highest average price ?",
            "sql": "select grapes.grape group_by wine.grape order_by avg ( wine.price ) desc limit_value"
        },
        {
            "utterance": "What is the color of that grape ?",
            "sql": "select grapes.color group_by wine.grape order_by avg ( wine.price ) desc limit_value"
        },
        {
            "utterance": "What is the color of the grape whose wine products had the lowest average price ?",
            "sql": "select grapes.color group_by wine.grape order_by avg ( wine.price ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
    },
    "interaction": [
        {
            "utterance": "List the grape of the wines whose score is higher than 93 ordered by Name .",
            "sql": "select wine.grape , wine.appelation , wine.name where wine.score > value order_by wine.name"
        },
        {
            "utterance": "Show me the winery they are from",
            "sql": "select distinct wine.appelation where wine.score > value"
        },
        {
            "utterance": "Which states are they from ?",
            "sql": "select distinct wine.state where wine.score > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the speeds of the longest roller coaster?",
        "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many length of park Kemah Boardwalk ? | Did you mean to ask for the length of the park with name Kemah Boardwalk ? | Yes",
            "sql": "select roller_coaster.length where roller_coaster.park = value"
        },
        {
            "utterance": "Find the status of Happy Valley .",
            "sql": "select roller_coaster.status where roller_coaster.park = value"
        },
        {
            "utterance": "What are the country id of Hades 360 ?",
            "sql": "select roller_coaster.country_id where roller_coaster.name = value"
        },
        {
            "utterance": "What are the speeds of the longest roller coaster ?",
            "sql": "select roller_coaster.speed order_by roller_coaster.length desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of countries that have more than one roller coaster.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many countries have roller coaster ?",
            "sql": "select count ( distinct country.name )"
        },
        {
            "utterance": "How many countries have more than one roller coaster ?",
            "sql": "select count ( * ) ( select country.name group_by country.name having count ( * ) > value )"
        },
        {
            "utterance": "Show the names of the countries that have more than one roller coaster .",
            "sql": "select country.name group_by country.name having count ( * ) > value"
        },
        {
            "utterance": "Show the number of roller coasters of Australia and Finland .",
            "sql": "select country.name , count ( * ) group_by country.name having count ( * ) > value"
        },
        {
            "utterance": "Show the names of roller coasters of Australia and Finland in separate table",
            "sql": "select roller_coaster.name where country.name = value or country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of countries that have more than one roller coaster.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many country there",
            "sql": "select count ( country.* )"
        },
        {
            "utterance": "what is the languages of Finland",
            "sql": "select country.languages where country.name = value"
        },
        {
            "utterance": "what is the speed of Dauling Dragon",
            "sql": "select roller_coaster.speed where roller_coaster.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name and population of the country that has the highest roller coaster.",
        "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the height of the highest roller coaster ?",
            "sql": "select max ( roller_coaster.height )"
        },
        {
            "utterance": "Which park is this roller coaster located at ?",
            "sql": "select roller_coaster.park where roller_coaster.height = ( select max ( roller_coaster.height ) )"
        },
        {
            "utterance": "What is the name of the country that has the highest roller coaster ?",
            "sql": "select country.name where roller_coaster.height = ( select max ( roller_coaster.height ) )"
        },
        {
            "utterance": "Hmm , I also want to know the population of this country .",
            "sql": "select country.name , country.population where roller_coaster.height = ( select max ( roller_coaster.height ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100"
    },
    "interaction": [
        {
            "utterance": "Which roller coasters are longer than 3300 ?",
            "sql": "select roller_coaster.roller_coaster_id where roller_coaster.length > value"
        },
        {
            "utterance": "Which of them are higher than 100 ? | Do you mean among all roller costers or among the those longer than 3300 ? | Among those longer than 3300",
            "sql": "select roller_coaster.roller_coaster_id where roller_coaster.length > value and roller_coaster.height > value"
        },
        {
            "utterance": "And what are their status ?",
            "sql": "select roller_coaster.roller_coaster_id , roller_coaster.status where roller_coaster.length > value and roller_coaster.height > value"
        },
        {
            "utterance": "Yes , what is their speed ?",
            "sql": "select roller_coaster.roller_coaster_id , roller_coaster.status , roller_coaster.speed where roller_coaster.length > value and roller_coaster.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 5,
    "final": {
        "utterance": "How many countries do not have an roller coaster longer than 3000?",
        "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"
    },
    "interaction": [
        {
            "utterance": "HOW MANY COUNTRIES DO NOT HAVE AN ROLLER COASTER LONGER THAN 3000 ?",
            "sql": "select count ( country.* ) where country.country_id not in ( select roller_coaster.country_id where roller_coaster.length > value )"
        },
        {
            "utterance": "WHICH COUNTRY HAVE A ROLLER COASTER LONGER THAN 5000",
            "sql": "select country.name where roller_coaster.length > value"
        },
        {
            "utterance": "WHAT IS THE HIGHEST LENGTH OF ROLL COASTER",
            "sql": "select max ( roller_coaster.length )"
        },
        {
            "utterance": "WHICH PARK HAS HIGHEST SPEED OF ROLL COASTER",
            "sql": "select roller_coaster.park order_by roller_coaster.speed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 6,
    "final": {
        "utterance": "List the status shared by more than two roller coaster.",
        "sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Hi I was wondering if you could tell me what the fastest roller coaster is ?",
            "sql": "select roller_coaster.name order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "cool can you tell me what that roller coaster 's height is too ?",
            "sql": "select roller_coaster.height order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "great - do you know what its status is ?",
            "sql": "select roller_coaster.status order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "can you tell me the status that is shared by more than two roller coasters ?",
            "sql": "select roller_coaster.status group_by roller_coaster.status having count ( roller_coaster.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of countries and the average speed of roller coasters from each country.",
        "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"
    },
    "interaction": [
        {
            "utterance": "Hi ! How are you ? Can you show me a list of all of the country names ?",
            "sql": "select country.name"
        },
        {
            "utterance": "Great ! Can you update this list to include the average roller coaster speed for each of these three countries ?",
            "sql": "select country.name , avg ( roller_coaster.speed ) group_by country.name"
        },
        {
            "utterance": "Thank you for that ! Would you be able to show me the roller coaster names associated with just Sweden ?",
            "sql": "select roller_coaster.name where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of countries and the average speed of roller coasters from each country.",
        "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"
    },
    "interaction": [
        {
            "utterance": "How fast are roller coasters in Austria ?",
            "sql": "select roller_coaster.speed where country.name = value"
        },
        {
            "utterance": "When did the fastest roller coaster in Austria open ?",
            "sql": "select roller_coaster.opened where country.name = value order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "What is the name of the fastest roller coaster in Austria ?",
            "sql": "select roller_coaster.name where country.name = value order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "What park in Austria has the fastest roller coaster ?",
            "sql": "select roller_coaster.park where country.name = value order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "What is the height of the fastest roller coaster in Austria ?",
            "sql": "select roller_coaster.height where country.name = value order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "What is the length of the fastest roller coaster in Austria ?",
            "sql": "select roller_coaster.length where country.name = value order_by roller_coaster.speed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 9,
    "final": {
        "utterance": "How many countries do not have an roller coaster longer than 3000?",
        "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"
    },
    "interaction": [
        {
            "utterance": "what is the highest length of coaster",
            "sql": "select max ( roller_coaster.length )"
        },
        {
            "utterance": "which roller coaster are top speed",
            "sql": "select roller_coaster.* order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "what is the height of Boardwalk Bullet",
            "sql": "select roller_coaster.height where roller_coaster.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the country names, area and population which has both roller coasters with speed higher",
        "sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55"
    },
    "interaction": [
        {
            "utterance": "what is the country name ? | what did you want to konw the country name ? give more info about this question | what are the country names which has both roller coasters with speed higher than 60 and roller coasters with speed lower than 55 ?",
            "sql": "select country.name where roller_coaster.speed > value intersect select country.name where roller_coaster.speed < value"
        },
        {
            "utterance": "what are the country id ? | Did you mean country id which has both roller coasters with speed higher than 60 and roller coasters with speed lower than 55 ? | Yes !",
            "sql": "select country.country_id where roller_coaster.speed > value intersect select country.country_id where roller_coaster.speed < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 0,
    "final": {
        "utterance": "Show headquarters with at least two companies in the banking industry.",
        "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Please show me the headquarters with at least two companies in the banking industry ?",
            "sql": "select company.headquarters where company.main_industry = value group_by company.headquarters having count ( company.* ) > = value"
        },
        {
            "utterance": "What companies are in the banking industry ?",
            "sql": "select company.company where company.main_industry = value"
        },
        {
            "utterance": "Where are those companies ' headquarters located ?",
            "sql": "select company.company , company.headquarters where company.main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
    },
    "interaction": [
        {
            "utterance": "Hi can you show me all the headquarters of a company in backing industry ? | Do you mean banking , not backing ? | Sorry , yes banking !",
            "sql": "select company.headquarters where company.main_industry = value"
        },
        {
            "utterance": "Thank you ! Can you now tell me the all the headquarters of a company in Oil and gas ?",
            "sql": "select company.headquarters where company.main_industry = value"
        },
        {
            "utterance": "Great , what about all the headquarters with both a company in oil and gas and a company in banking ?",
            "sql": "select company.headquarters where company.main_industry = value intersect select company.headquarters where company.main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all locations and the number of gas stations in each location ordered by the count.",
        "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "Show all locations and the number of gas stations in each location ordered by the count , please ?",
            "sql": "select gas_station.location , count ( gas_station.* ) group_by gas_station.location order_by count ( gas_station.* )"
        },
        {
            "utterance": "What is the name of the location that has more than one gas station ?",
            "sql": "select gas_station.location group_by gas_station.location having count ( gas_station.* ) > value"
        },
        {
            "utterance": "What year was more than one gas station opened in ?",
            "sql": "select gas_station.open_year group_by gas_station.open_year having count ( gas_station.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all headquarters without a company in banking industry.",
        "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"
    },
    "interaction": [
        {
            "utterance": "what is the average of market value ?",
            "sql": "select avg ( company.market_value )"
        },
        {
            "utterance": "what is the average of assets billion ?",
            "sql": "select avg ( company.assets_billion )"
        },
        {
            "utterance": "what is companies headquarters ?",
            "sql": "select company.headquarters"
        },
        {
            "utterance": "show all headquarters without a company in banking industry .",
            "sql": "select company.headquarters except select company.headquarters where company.main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"
    },
    "interaction": [
        {
            "utterance": "What is the average market value",
            "sql": "select avg ( company.market_value )"
        },
        {
            "utterance": "Which location is most profitable ? | What do you mean by location ? We have different companies in different countries . | Which company is the most profitable ?",
            "sql": "select company.company order_by company.assets_billion desc limit_value"
        },
        {
            "utterance": "What is the average sales of the companies ranked 1 , 2 and 3 ?",
            "sql": "select avg ( company.sales_billion ) where company.rank = value or company.rank = value or company.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 5,
    "final": {
        "utterance": "List the main industry with highest total market value and its number of companies.",
        "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the profits billion of Company ExonMobil ?",
            "sql": "select company.profits_billion where company.company = value"
        },
        {
            "utterance": "What is the name of the company which has market value 213.7 ?",
            "sql": "select company.company where company.market_value = value"
        },
        {
            "utterance": "Where is the headquarters of the company general electric ?",
            "sql": "select company.headquarters where company.company = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 6,
    "final": {
        "utterance": "Show company name and main industry without a gas station.",
        "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    "interaction": [
        {
            "utterance": "Show the name of the company with company id 1 ?",
            "sql": "select company.company where company.company_id = value"
        },
        {
            "utterance": "Show all company name and main industry with gas station ?",
            "sql": "select company.company , company.main_industry where company.company_id in ( select station_company.company_id )"
        },
        {
            "utterance": "Show all company name and main industry without a gas station ?",
            "sql": "select company.company , company.main_industry where company.company_id not in ( select station_company.company_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 7,
    "final": {
        "utterance": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"
    },
    "interaction": [
        {
            "utterance": "find the rank , company names , market values of the companies in the banking industry order by their sales and profits in billion .",
            "sql": "select company.rank , company.company , company.market_value where company.main_industry = value order_by company.sales_billion , company.profits_billion"
        },
        {
            "utterance": "Which company has the biggest market value in billion ?",
            "sql": "select company.company order_by company.market_value limit_value"
        },
        {
            "utterance": "what is BP 's market value ?",
            "sql": "select company.market_value where company.company = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 8,
    "final": {
        "utterance": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts .",
            "sql": "select gas_station.location , gas_station.representative_name order_by company.assets_billion desc limit_value"
        },
        {
            "utterance": "What is the representative name of Newport Rd ?",
            "sql": "select gas_station.representative_name where gas_station.location = value"
        },
        {
            "utterance": "Find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts .",
            "sql": "select gas_station.location , gas_station.representative_name order_by company.assets_billion desc limit_value"
        },
        {
            "utterance": "What gas station is the oldest one based on open year | Which kind of information about this gas station do you want ? | Which gas station location is the oldest based on its open year .",
            "sql": "select gas_station.location order_by gas_station.open_year limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the manager name with most number of gas stations opened after 2000.",
        "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many gas stations opened after 2000 ?",
            "sql": "select count ( gas_station.* ) where gas_station.open_year > value"
        },
        {
            "utterance": "What 's the name of the manager that opened the most gas stations after 2000 ?",
            "sql": "select gas_station.manager_name where gas_station.open_year > value group_by gas_station.manager_name order_by count ( gas_station.* ) desc limit_value"
        },
        {
            "utterance": "What are the locations of those ?",
            "sql": "select gas_station.location where gas_station.manager_name = ( select gas_station.manager_name where gas_station.open_year > value group_by gas_station.manager_name order_by count ( gas_station.* ) desc limit_value )"
        },
        {
            "utterance": "What are the vice manager names of those locations ?",
            "sql": "select gas_station.location , gas_station.vice_manager_name where gas_station.manager_name = ( select gas_station.manager_name where gas_station.open_year > value group_by gas_station.manager_name order_by count ( gas_station.* ) desc limit_value )"
        },
        {
            "utterance": "What years did those open ?",
            "sql": "select gas_station.location , gas_station.open_year where gas_station.manager_name = ( select gas_station.manager_name where gas_station.open_year > value group_by gas_station.manager_name order_by count ( gas_station.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who has made the minimum amount of payment in one claim ?",
            "sql": "select customers.customer_details where claim_headers.amount_piad = ( select min ( claim_headers.amount_piad ) )"
        },
        {
            "utterance": "What is the amount claimed for this customer ?",
            "sql": "select claim_headers.amount_claimed where claim_headers.amount_piad = ( select min ( claim_headers.amount_piad ) )"
        },
        {
            "utterance": "Can you also give me the name of the customer who has made the maximum amount of payment in one claim ?",
            "sql": "select customers.customer_details where claim_headers.amount_piad = ( select max ( claim_headers.amount_piad ) )"
        },
        {
            "utterance": "Hmmm . Can you please give me the claimed amount for this customer",
            "sql": "select claim_headers.amount_claimed where claim_headers.amount_piad = ( select max ( claim_headers.amount_piad ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the total amount claimed in the most recently created document.",
        "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Show me all the claims that are documents .",
            "sql": "select claim_headers.claim_header_id where claims_documents.document_type_code = value"
        },
        {
            "utterance": "Which of these claims is most recently created ?",
            "sql": "select claim_headers.claim_header_id where claims_documents.document_type_code = value order_by claims_documents.created_date limit_value"
        },
        {
            "utterance": "What is the amount claimed for this claim ?",
            "sql": "select claim_headers.amount_claimed where claims_documents.created_date = ( select claims_documents.created_date order_by claims_documents.created_date limit_value )"
        },
        {
            "utterance": "Please give me the sum of these amounts .",
            "sql": "select sum ( claim_headers.amount_claimed ) where claims_documents.created_date = ( select claims_documents.created_date order_by claims_documents.created_date limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of customers who have no policies associated.",
        "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Hi , can I see the list of customers ?",
            "sql": "select customers.*"
        },
        {
            "utterance": "What customers have a policy ?",
            "sql": "select *"
        },
        {
            "utterance": "What customers do n't have a policy ?",
            "sql": "select customers.* except select customers.*"
        },
        {
            "utterance": "When did they get a policy ? | Who are they ? | When did the policy holders get their policy ?",
            "sql": "select policies.start_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name of the claim processing stage that most of the claims are on?",
        "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many claim stage ids in this table ?",
            "sql": "select count ( claims_processing_stages.claim_stage_id )"
        },
        {
            "utterance": "How many different staff ids in this table ?",
            "sql": "select count ( distinct claims_processing.staff_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total amount claimed in the most recently created document.",
        "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "how many claim headers on the table",
            "sql": "select count ( claim_headers.* )"
        },
        {
            "utterance": "what is the highest amount claimed on the claim headers",
            "sql": "select max ( claim_headers.amount_claimed )"
        },
        {
            "utterance": "what is the least paid amount on the table",
            "sql": "select min ( claim_headers.amount_piad )"
        },
        {
            "utterance": "what is the date of settlement on Overtime Meal Subsidy | Did you want the date of settlement of claim headers with a type code Overtime Meal Subsidy ? | exactly",
            "sql": "select claim_headers.date_of_settlement where claim_headers.claim_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 5,
    "final": {
        "utterance": "Which type of policy is most frequently used? Give me the policy type code.",
        "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the policy ids , customer ids and policy type codes of all policies ?",
            "sql": "select policies.policy_id , policies.customer_id , policies.policy_type_code"
        },
        {
            "utterance": "Can you list the policy type codes of all the policies used ?",
            "sql": "select policies.policy_type_code"
        },
        {
            "utterance": "Which type of policy is most frequently used ? Can you give me the policy type code ?",
            "sql": "select policies.policy_type_code group_by policies.policy_type_code order_by count ( policies.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 6,
    "final": {
        "utterance": "Which customer is associated with the latest policy?",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"
    },
    "interaction": [
        {
            "utterance": "What is the customer ID who is associated with the latest policy ?",
            "sql": "select customers.customer_id where policies.start_date = ( select max ( policies.start_date ) )"
        },
        {
            "utterance": "what is the name of the customer associated with customer ID 263 ?",
            "sql": "select customers.customer_details where customers.customer_id = value"
        },
        {
            "utterance": "What is the policy type code of customer with ID 334 ?",
            "sql": "select policies.policy_type_code where policies.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of customers whose name contains \"Diana\".",
        "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many of them have `` Diana '' anywhere in their name ?",
            "sql": "select count ( customers.customer_details ) where customers.customer_details like value"
        },
        {
            "utterance": "What is her full name ?",
            "sql": "select customers.customer_details where customers.customer_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the total and average amount paid in claim headers.",
        "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me the total amount paid in claim headers ?",
            "sql": "select sum ( claim_headers.amount_piad )"
        },
        {
            "utterance": "Could you please tell me the average amount paid in claim headers ?",
            "sql": "select avg ( claim_headers.amount_piad )"
        },
        {
            "utterance": "Could you please tell me the total amount claimed ?",
            "sql": "select sum ( claim_headers.amount_claimed )"
        },
        {
            "utterance": "What is the date of the largest amount claimed ?",
            "sql": "select claim_headers.date_of_claim order_by claim_headers.amount_claimed desc limit_value"
        },
        {
            "utterance": "What is the date of the smallest amount paid ?",
            "sql": "select claim_headers.date_of_claim order_by claim_headers.amount_claimed limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 9,
    "final": {
        "utterance": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What is Dayana Robel policy id ?",
            "sql": "select policies.policy_id where customers.customer_details = value"
        },
        {
            "utterance": "And what are policy type code associated with this id ?",
            "sql": "select policies.policy_type_code where customers.customer_details = value"
        },
        {
            "utterance": "On which date did this policy start ?",
            "sql": "select policies.start_date where customers.customer_details = value"
        },
        {
            "utterance": "And on which date did it end ?",
            "sql": "select policies.end_date where customers.customer_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of the customers who have an deputy policy.",
        "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""
    },
    "interaction": [
        {
            "utterance": "Who does have a deputy policy ?",
            "sql": "select distinct customers.customer_details where policies.policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of the claim processing stage that most of the claims are on?",
        "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the name of the claim processing stage that most of the claims are on",
            "sql": "select claims_processing_stages.claim_status_name group_by claims_processing.claim_stage_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "include claim stage id in the table | Do you wan na see all the claim stage ids ? | yes please",
            "sql": "select distinct claims_processing.claim_stage_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the customer that has been involved in the most policies.",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who was involved in the most policies , please ?",
            "sql": "select customers.customer_details group_by customers.customer_details order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is her customer id ?",
            "sql": "select customers.customer_id , customers.customer_details group_by customers.customer_details order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are her customer details , please ?",
            "sql": "select customers.customer_id , customers.customer_details group_by customers.customer_details order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is her policy type code ?",
            "sql": "select policies.policy_type_code where policies.customer_id = value"
        },
        {
            "utterance": "What is her start date for each of those ?",
            "sql": "select policies.policy_type_code , policies.start_date where policies.customer_id = value"
        },
        {
            "utterance": "How about the end date , please ?",
            "sql": "select policies.policy_type_code , policies.start_date , policies.end_date where policies.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the names of all the customers and staff members.",
        "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    "interaction": [
        {
            "utterance": "how many staffs are on the table",
            "sql": "select count ( staff.staff_id )"
        },
        {
            "utterance": "how many members are on the table ? | do you mean the customers ? | how many customers are on the table ?",
            "sql": "select count ( customers.customer_id )"
        },
        {
            "utterance": "Find the names for all the customers and staff members",
            "sql": "select customers.customer_details union select staff.staff_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the customer that has been involved in the most policies.",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who has been involved in most policies ?",
            "sql": "select customers.customer_details group_by customers.customer_details order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is her ID ?",
            "sql": "select customers.customer_id group_by customers.customer_details order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many policies has she been involved in ?",
            "sql": "select count ( * ) group_by customers.customer_details order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of customers whose name contains \"Diana\".",
        "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    "interaction": [
        {
            "utterance": "How many customer ids are on the list ?",
            "sql": "select count ( distinct customers.customer_id )"
        },
        {
            "utterance": "Find the details of customers which contain `` Diana '' ?",
            "sql": "select customers.* where customers.customer_details like value"
        },
        {
            "utterance": "State the customer details of customer id 263 ?",
            "sql": "select customers.customer_details where customers.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the names of all the customers and staff members.",
        "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    "interaction": [
        {
            "utterance": "Can you list the details of all the customers please ?",
            "sql": "select customers.customer_details"
        },
        {
            "utterance": "Can you list the names of all the customers who have the letter `` B '' in their name , please ? | The details of the customers with a letter `` B '' in their customer details are listed . | Can you list the details and IDs of all the staff in a table , please ?",
            "sql": "select staff.staff_id , staff.staff_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of customers who have no policies associated.",
        "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the customers ? | Did you mean customer details in the table ? | Yes",
            "sql": "select customers.customer_details"
        },
        {
            "utterance": "Show the ID of the customers without policies",
            "sql": "select customers.customer_id except select customers.customer_details"
        },
        {
            "utterance": "What are the customer details with those customers",
            "sql": "select customers.customer_details except select customers.customer_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 18,
    "final": {
        "utterance": "Find all the policy types that are used by more than 2 customers.",
        "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "what is the name of the policy types used by more than 2 customers ?",
            "sql": "select policies.policy_type_code group_by policies.policy_type_code having count ( policies.* ) > value"
        },
        {
            "utterance": "what is the start date of Jurisdiction ?",
            "sql": "select policies.start_date where policies.policy_type_code = value"
        },
        {
            "utterance": "what is the end date of Deputy ?",
            "sql": "select policies.end_date where policies.policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all customer ids and their associated policy type codes ?",
            "sql": "select customers.customer_id , policies.policy_type_code"
        },
        {
            "utterance": "Great ! Can you update this list to include the customer details values for each customer_ID ?",
            "sql": "select customers.customer_id , policies.policy_type_code , customers.customer_details"
        },
        {
            "utterance": "Awesome ! Can you filter this list to show only the customer IDs and customer names associated with either a deputy policy or an uninformed policy ?",
            "sql": "select customers.customer_id , customers.customer_details where policies.policy_type_code = value or policies.policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"
    },
    "interaction": [
        {
            "utterance": "How many master customer ID numbers are there ?",
            "sql": "select count ( customer_master_index.master_customer_id )"
        },
        {
            "utterance": "What are the master index IDs for all except whose detail includes Schmidt , Kertzmann and Lubowitz ?",
            "sql": "select customer_master_index.master_customer_id where customer_master_index.cmi_details != ( value )"
        },
        {
            "utterance": "What are their cmi cross reference IDs ?",
            "sql": "select customer_master_index.master_customer_id , cmi_cross_references.cmi_cross_ref_id where customer_master_index.cmi_details not in ( value )"
        },
        {
            "utterance": "What are their respective source system codes ?",
            "sql": "select customer_master_index.master_customer_id , cmi_cross_references.cmi_cross_ref_id , cmi_cross_references.source_system_code where customer_master_index.cmi_details != ( value )"
        },
        {
            "utterance": "What are the renters arrears tax IDs associated with them ?",
            "sql": "select rent_arrears.council_tax_id where customer_master_index.cmi_details != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "sql": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "Can you list all the cmi cross reference id on here",
            "sql": "select cmi_cross_references.cmi_cross_ref_id"
        },
        {
            "utterance": "can i have the master customer id",
            "sql": "select cmi_cross_references.master_customer_id"
        },
        {
            "utterance": "What Are the source system code of CMI_Cross_References",
            "sql": "select cmi_cross_references.source_system_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 2,
    "final": {
        "utterance": "Which cmi cross reference id is not related to any parking taxes?",
        "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines"
    },
    "interaction": [
        {
            "utterance": "Show me the list of cmi cross reference ids please !",
            "sql": "select cmi_cross_references.cmi_cross_ref_id"
        },
        {
            "utterance": "Which of those cmi cross reference ids are related to parking taxes ?",
            "sql": "select cmi_cross_references.cmi_cross_ref_id"
        },
        {
            "utterance": "What about cmi cross reference ids that not related ?",
            "sql": "select cmi_cross_references.cmi_cross_ref_id where cmi_cross_references.cmi_cross_ref_id not in ( select cmi_cross_references.cmi_cross_ref_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "sql": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"
    },
    "interaction": [
        {
            "utterance": "What is the tax source system code for benefits and overpayments ?",
            "sql": "select cmi_cross_references.source_system_code"
        },
        {
            "utterance": "List benefit ID , please .",
            "sql": "select cmi_cross_references.source_system_code , benefits_overpayments.council_tax_id"
        },
        {
            "utterance": "Order them by benefit ID , Please .",
            "sql": "select cmi_cross_references.source_system_code , benefits_overpayments.council_tax_id order_by benefits_overpayments.council_tax_id"
        },
        {
            "utterance": "Ok , can you show me the list of the source system codes ?",
            "sql": "select cmi_cross_references.source_system_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'"
    },
    "interaction": [
        {
            "utterance": "How are you ! Can you provide me with a list of all of the master customer ids and corresponding cmi details ?",
            "sql": "select customer_master_index.master_customer_id , customer_master_index.cmi_details"
        },
        {
            "utterance": "This is great ! Can you update this list to also show the corresponding cmi cross reference ids for each line of this list ?",
            "sql": "select customer_master_index.master_customer_id , customer_master_index.cmi_details , cmi_cross_references.cmi_cross_ref_id"
        },
        {
            "utterance": "Can you filter this list so that the only rows that are displayed are those containing `` Gottlieb , Becker and Wyman '' ?",
            "sql": "select customer_master_index.master_customer_id , customer_master_index.cmi_details , cmi_cross_references.cmi_cross_ref_id where customer_master_index.cmi_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 5,
    "final": {
        "utterance": "Which distinct source system code includes the substring 'en'?",
        "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'"
    },
    "interaction": [
        {
            "utterance": "What source system code includes the sub string 'en ' ?",
            "sql": "select distinct cmi_cross_references.source_system_code where cmi_cross_references.source_system_code like value"
        },
        {
            "utterance": "What are the other sub strings , that do not contain 'en ' ?",
            "sql": "select distinct cmi_cross_references.source_system_code where cmi_cross_references.source_system_code not like value"
        },
        {
            "utterance": "what is the ID for electoral code ? | which columns return ? | What is the master id please .",
            "sql": "select cmi_cross_references.master_customer_id where cmi_cross_references.source_system_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 0,
    "final": {
        "utterance": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5"
    },
    "interaction": [
        {
            "utterance": "Could you please find the products with the max page size as `` A4 '' ?",
            "sql": "select product.product where product.max_page_size = value"
        },
        {
            "utterance": "Could you please find the products with the pages per minute color smaller than 5 ?",
            "sql": "select product.product where product.pages_per_minute_color < value"
        },
        {
            "utterance": "Could you please find the products with the max page size as `` A4 '' and with the pages per minute color smaller than 5 ?",
            "sql": "select product.product where product.max_page_size = value and product.pages_per_minute_color < value"
        },
        {
            "utterance": "What are the interfaces of those products ?",
            "sql": "select product.product , product.interface where product.max_page_size = value and product.pages_per_minute_color < value"
        },
        {
            "utterance": "What are the dimensions of those products ?",
            "sql": "select product.product , product.dimensions where product.max_page_size = value and product.pages_per_minute_color < value"
        },
        {
            "utterance": "Could you please find the products with the pages per minute color larger than 5 ?",
            "sql": "select product.product where product.pages_per_minute_color > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the products that are not using the most frequently-used max page size.",
        "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "what is the dimenson of Plustek MobileOffice D28 Corporate ?",
            "sql": "select product.dimensions where product.product = value"
        },
        {
            "utterance": "how many pages per minute colored in Xerox Travel Scanner 100 ?",
            "sql": "select product.pages_per_minute_color where product.product = value"
        },
        {
            "utterance": "what is the max page size can be used in Plustek MobileOffice D28 Corporate ?",
            "sql": "select product.max_page_size where product.product = value"
        },
        {
            "utterance": "what is the dpi of Fujitsu fi-6130 A4 Series Scanner ?",
            "sql": "select product.dpi where product.product = value"
        },
        {
            "utterance": "which product coloured the highest pages in a minute ?",
            "sql": "select product.product , product.pages_per_minute_color order_by product.pages_per_minute_color desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 2,
    "final": {
        "utterance": "Find all the stores in the district with the most population.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Find all stores in the Attock district | Do you want the id or the name of these stores ? | The name",
            "sql": "select store.store_name where district.district_name = value"
        },
        {
            "utterance": "Find all the store names in the district with the lowest population .",
            "sql": "select store.store_name where district.district_id = ( select district.district_id order_by district.city_population asc limit_value )"
        },
        {
            "utterance": "Find all the store names in the district with the highest population .",
            "sql": "select store.store_name where district.district_id = ( select district.district_id order_by district.city_population desc limit_value )"
        },
        {
            "utterance": "What is the city area of the district with the highest population .",
            "sql": "select district.city_area order_by district.city_population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the total population of the districts where the area is bigger than the average city area.",
        "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)"
    },
    "interaction": [
        {
            "utterance": "What are the names of each district ?",
            "sql": "select district.district_name"
        },
        {
            "utterance": "What are the total population of the districts whose area is larger than the average city area ?",
            "sql": "select sum ( district.city_population ) where district.city_area > ( select avg ( district.city_area ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total population of the top 3 districts with the largest area.",
        "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you tell me what is the sum total of the populations of the three districts with the largest area ?",
            "sql": "select sum ( district.city_population ) order_by district.city_area desc limit_value"
        },
        {
            "utterance": "Excellent ! Can you tell me the district name associated with the largest population ?",
            "sql": "select district.district_name where district.city_population = ( select max ( district.city_population ) )"
        },
        {
            "utterance": "Wonderful ! Can you show me the city 's population total and the city 's area ?",
            "sql": "select district.city_population , district.city_area where district.city_population = ( select max ( district.city_population ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of all stores in Khanewal District.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""
    },
    "interaction": [
        {
            "utterance": "What is the district name for district id 15 ?",
            "sql": "select district.district_name where district.district_id = value"
        },
        {
            "utterance": "What is the district name for District id 11 ?",
            "sql": "select district.district_name where district.district_id = value"
        },
        {
            "utterance": "How many store are located in district 15 ?",
            "sql": "select count ( * ) where district.district_id = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select store.store_name where district.district_id = value"
        },
        {
            "utterance": "What is the name of the store in district 11 ?",
            "sql": "select store.store_name where district.district_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of districts where have both city mall and village store type stores.",
        "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\""
    },
    "interaction": [
        {
            "utterance": "what are the districts that have city mall .",
            "sql": "select district.district_name where store.type = value"
        },
        {
            "utterance": "what are the names of the districts where both city mall and village store type stores .",
            "sql": "select district.district_name where store.type = value intersect select district.district_name where store.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 7,
    "final": {
        "utterance": "Which district has the least area?",
        "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average of city populations ?",
            "sql": "select avg ( district.city_population )"
        },
        {
            "utterance": "what is the highest city population ?",
            "sql": "select max ( district.city_population )"
        },
        {
            "utterance": "which district has the least area ?",
            "sql": "select district.district_name order_by district.city_area asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the products that are not using the most frequently-used max page size.",
        "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What page size do those products use ?",
            "sql": "select product.max_page_size where product.max_page_size != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of all stores in Khanewal District.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all store IDs along with the associated store names ?",
            "sql": "select store.store_id , store.store_name"
        },
        {
            "utterance": "Thanks for that ! Can you filter this list to show only the Store ID and Store Name for stores with a district name of Khanewal District ?",
            "sql": "select store.store_id , store.store_name where district.district_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 10,
    "final": {
        "utterance": "Which district has the largest population?",
        "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which district has the largest population ?",
            "sql": "select district.district_name order_by district.city_population desc limit_value"
        },
        {
            "utterance": "What is its headquartered city ?",
            "sql": "select district.headquartered_city order_by district.city_population desc limit_value"
        },
        {
            "utterance": "What is that city 's area ?",
            "sql": "select district.city_area order_by district.city_population desc limit_value"
        },
        {
            "utterance": "How many cities have a population over 500,000 ?",
            "sql": "select count ( district.* ) where district.city_population > value"
        },
        {
            "utterance": "What are the names of those cities ?",
            "sql": "select district.headquartered_city where district.city_population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the number of stores in each city.",
        "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"
    },
    "interaction": [
        {
            "utterance": "how many store are presented on the table",
            "sql": "select count ( store.* )"
        },
        {
            "utterance": "list out the store name",
            "sql": "select store.store_name"
        },
        {
            "utterance": "what is the city population of Attock District",
            "sql": "select district.city_population where district.headquartered_city = value"
        },
        {
            "utterance": "what is the area size of Neguac",
            "sql": "select store.area_size where store.store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 12,
    "final": {
        "utterance": "Which city is the headquarter of the store named \"Blackville\" in?",
        "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""
    },
    "interaction": [
        {
            "utterance": "Please list the headquarters of the store that is called Blackville ?",
            "sql": "select district.headquartered_city where store.store_name = value"
        },
        {
            "utterance": "What is the population of that city ?",
            "sql": "select district.city_population where store.store_name = value"
        },
        {
            "utterance": "What is the name of the store in the city with the greatest population ?",
            "sql": "select store.store_name order_by district.city_population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 13,
    "final": {
        "utterance": "Which district has the largest population?",
        "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many district there",
            "sql": "select count ( district.* )"
        },
        {
            "utterance": "what is the city area of Bahawalnagar District",
            "sql": "select district.city_area where district.district_name = value"
        },
        {
            "utterance": "what is the City Population of Attock District",
            "sql": "select district.city_population where district.district_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the details of the lots which are not used in any transactions?",
        "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id"
    },
    "interaction": [
        {
            "utterance": "What are all of the lots ?",
            "sql": "select lots.*"
        },
        {
            "utterance": "Which lots are not used in any transactions ? | do you mean the id of lots or the details of lot | The id of the lots please .",
            "sql": "select lots.lot_id except select lots.lot_id"
        },
        {
            "utterance": "What are the details of the lots which are n't used in any transactions ?",
            "sql": "select lots.lot_details except select lots.lot_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000"
    },
    "interaction": [
        {
            "utterance": "when did the transactions that were less that 3000 occur ?",
            "sql": "select transactions.date_of_transaction where transactions.amount_of_transaction < value"
        },
        {
            "utterance": "which transactions were sales ?",
            "sql": "select transactions.transaction_id where transactions.transaction_type_code = value"
        },
        {
            "utterance": "ok i see the transactions of the sales . and then what are the ones that were purchases ?",
            "sql": "select transactions.transaction_id where transactions.transaction_type_code = value"
        },
        {
            "utterance": "what investors were involved with those transactions that were under 3000 ?",
            "sql": "select transactions.investor_id where transactions.amount_of_transaction < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the average share count of transactions each each investor, ordered by average share count.",
        "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)"
    },
    "interaction": [
        {
            "utterance": "Could you please show me the average share count of transactions of each investor ?",
            "sql": "select transactions.investor_id , avg ( transactions.share_count ) group_by transactions.investor_id"
        },
        {
            "utterance": "Could you order those by average share count , please ?",
            "sql": "select transactions.investor_id , avg ( transactions.share_count ) group_by transactions.investor_id order_by avg ( transactions.share_count )"
        },
        {
            "utterance": "What are the dates of those transactions ?",
            "sql": "select transactions.date_of_transaction"
        },
        {
            "utterance": "What about just the ones with the transaction type code SALE ?",
            "sql": "select transactions.date_of_transaction where transactions.transaction_type_code = value"
        },
        {
            "utterance": "What about transactions with type code PUR ?",
            "sql": "select transactions.date_of_transaction where transactions.transaction_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100"
    },
    "interaction": [
        {
            "utterance": "Can you show the dates of transactions with at least 100 share count ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count > = value"
        },
        {
            "utterance": "Hmm , I want to know the dates of transactions with amount bigger than 100 please .",
            "sql": "select transactions.date_of_transaction where transactions.amount_of_transaction > value"
        },
        {
            "utterance": "Can you list the dates of transactions for all of them ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count > = value or transactions.amount_of_transaction > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the maximum and minimum share count of different transaction types.",
        "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
    },
    "interaction": [
        {
            "utterance": "What is the maximum share count of all of the different transaction type codes ?",
            "sql": "select transactions.transaction_type_code , max ( transactions.share_count ) group_by transactions.transaction_type_code"
        },
        {
            "utterance": "What is the minimum share count of the transaction type code PUR ?",
            "sql": "select transactions.share_count where transactions.transaction_type_code = value and transactions.share_count != value order_by transactions.share_count limit_value"
        },
        {
            "utterance": "What is the share count of transaction id 2 ?",
            "sql": "select transactions.share_count where transactions.transaction_id = value"
        },
        {
            "utterance": "What is the lowest share count ?",
            "sql": "select transactions.share_count where transactions.share_count != value order_by transactions.share_count limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 5,
    "final": {
        "utterance": "Show details of all investors if they make any transaction with share count greater than 100.",
        "sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100"
    },
    "interaction": [
        {
            "utterance": "Show details of all investors that made transactions with sgare greater than 100 ?",
            "sql": "select investors.investor_details where transactions.share_count > value"
        },
        {
            "utterance": "What is the transaction id of all investors that made transactions with sgare greater than 100 ?",
            "sql": "select transactions.transaction_id where transactions.share_count > value"
        },
        {
            "utterance": "What is the transaction type code of transaction id 2 ?",
            "sql": "select transactions.transaction_type_code where transactions.transaction_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50"
    },
    "interaction": [
        {
            "utterance": "How many transactions share a count smaller than 50 ?",
            "sql": "select count ( transactions.* ) where transactions.share_count < value"
        },
        {
            "utterance": "What lots are associate with those transactions with a count smaller than 50 ? | Do you mean all the information about lots or some specific attributes ? | What are all of the details about the lots ?",
            "sql": "select lots.lot_details where transactions.share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50"
    },
    "interaction": [
        {
            "utterance": "How many transactions have the type code PUR ?",
            "sql": "select count ( transactions.* ) where transactions.transaction_type_code = value"
        },
        {
            "utterance": "How many transactions have a share count larger than 50 ?",
            "sql": "select count ( transactions.* ) where transactions.share_count > value"
        },
        {
            "utterance": "What is the least amount of transactions that have both a type code of PUR and a share count larger than 50 ?",
            "sql": "select min ( transactions.amount_of_transaction ) where transactions.transaction_type_code = value and transactions.share_count > value"
        },
        {
            "utterance": "How many transactions have the type code PUR and a share count larger than 50 ?",
            "sql": "select count ( transactions.* ) where transactions.transaction_type_code = value and transactions.share_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10"
    },
    "interaction": [
        {
            "utterance": "Would you show the transaction type descriptions if the share count is smaller than 10 ?",
            "sql": "select ref_transaction_types.transaction_type_description where transactions.share_count < value"
        },
        {
            "utterance": "What are the dates of those ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count < value"
        },
        {
            "utterance": "What were the amounts of those transactions ?",
            "sql": "select transactions.amount_of_transaction where transactions.share_count < value"
        },
        {
            "utterance": "Would you show the transaction type descriptions if the share count is equal to or larger than 10 ?",
            "sql": "select ref_transaction_types.transaction_type_description where transactions.share_count > = value"
        },
        {
            "utterance": "What were the dates of those transactions ? | Do you mean the transactions with share count equal to or larger than 10 ? | Yes please , if you do n't mind ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the maximum and minimum share count of different transaction types.",
        "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
    },
    "interaction": [
        {
            "utterance": "what are the sale ?",
            "sql": "select transactions.*"
        },
        {
            "utterance": "How many purchase in this above the table",
            "sql": "select count ( transactions.* )"
        },
        {
            "utterance": "what is the purchase investor Id ?",
            "sql": "select transactions.investor_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the transaction type code that occurs the most frequently.",
        "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the transaction type code that occurs most often ?",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) desc limit_value"
        },
        {
            "utterance": "What is the transaction type code that occurs least often ?",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) limit_value"
        },
        {
            "utterance": "What is the average of all transactions ? | The average of all transactions is 11198167.237771427 | What is the average of all transactions with the transaction type code `` PUR '' ?",
            "sql": "select avg ( transactions.amount_of_transaction ) where transactions.transaction_type_code = value"
        },
        {
            "utterance": "What is the average of all transactions with the transaction type code `` SALE '' ?",
            "sql": "select avg ( transactions.amount_of_transaction ) where transactions.transaction_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id"
    },
    "interaction": [
        {
            "utterance": "what is the transaction type code for the investor with id 18",
            "sql": "select transactions.transaction_type_code where transactions.investor_id = value"
        },
        {
            "utterance": "How much is the amount of transaction for transaction with id 3",
            "sql": "select transactions.amount_of_transaction where transactions.transaction_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000"
    },
    "interaction": [
        {
            "utterance": "Show the date of transaction where share count is larger than 100",
            "sql": "select transactions.date_of_transaction where transactions.share_count > value"
        },
        {
            "utterance": "What are the transaction IDs of those results ?",
            "sql": "select transactions.transaction_id where transactions.share_count > value"
        },
        {
            "utterance": "Show date of transaction where amount of transaction larger than 1000",
            "sql": "select transactions.date_of_transaction where transactions.amount_of_transaction > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the id and details for the investors who have the top 3 number of transactions.",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Could you show me the IDs for the investors who have the top 3 number of transactions ?",
            "sql": "select transactions.investor_id group_by transactions.investor_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Could you add in the investor details to the table please ?",
            "sql": "select transactions.investor_id , investors.investor_details group_by transactions.investor_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Could you show me the IDs for the investors who have the bottom 3 number of transactions ?",
            "sql": "select transactions.investor_id group_by transactions.investor_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "What are the investor ID and details for the investor who had the earliest transaction date ?",
            "sql": "select transactions.investor_id , investors.investor_details group_by transactions.investor_id order_by transactions.date_of_transaction asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the ids of the investors who have at least two transactions.",
        "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many investors are there ?",
            "sql": "select count ( investors.* )"
        },
        {
            "utterance": "How many investors have at least two transactions ?",
            "sql": "select count ( * ) ( select transactions.investor_id group_by transactions.investor_id having count ( * ) > = value )"
        },
        {
            "utterance": "Show me their Ids .",
            "sql": "select transactions.investor_id group_by transactions.investor_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10"
    },
    "interaction": [
        {
            "utterance": "hi ! How many transactions have greater than 10 share count ?",
            "sql": "select count ( transactions.* ) where transactions.share_count > value"
        },
        {
            "utterance": "What are their transaction type descriptions ?",
            "sql": "select ref_transaction_types.transaction_type_description where transactions.share_count < value"
        },
        {
            "utterance": "What about their date ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\""
    },
    "interaction": [
        {
            "utterance": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is `` PUR '' ?",
            "sql": "select lots.lot_details where transactions.share_count > value and transactions.transaction_type_code = value"
        },
        {
            "utterance": "Which has the highest amount of transaction ?",
            "sql": "select lots.lot_details where transactions.share_count > value and transactions.transaction_type_code = value order_by transactions.amount_of_transaction desc limit_value"
        },
        {
            "utterance": "what was the date of that transaction ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count > value and transactions.transaction_type_code = value order_by transactions.amount_of_transaction desc limit_value"
        },
        {
            "utterance": "What transaction type code did that have ?",
            "sql": "select transactions.transaction_type_code where transactions.share_count > value and transactions.transaction_type_code = value order_by transactions.amount_of_transaction desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 17,
    "final": {
        "utterance": "Return the lot details of lots that belong to investors with details \"l\"?",
        "sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\""
    },
    "interaction": [
        {
            "utterance": "Can you show me a list of all of the lots that belong to category 'i ' within the 'lot details ' column ?",
            "sql": "select lots.* where lots.lot_details = value"
        },
        {
            "utterance": "My apologies ! I mean ask for `` l '' or lower-case L ... Therefore , can you list the lots that belong to category `` l '' in the 'lot details ' column ?",
            "sql": "select lots.* where lots.lot_details = value"
        },
        {
            "utterance": "Oh sorry ! I am all mixed up ! Third time 's a charm ! Can you provide me with the lot details for all lots that belong to investors which belong to the 'investor id ' category of `` l '' ?",
            "sql": "select lots.lot_details where investors.investor_details = value"
        },
        {
            "utterance": "Excellent ! Can you list the investor IDs that correspond to each of these lot_details ?",
            "sql": "select investors.investor_id , lots.lot_details where investors.investor_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what is transactions type code ? | Did you want all of the transactions type code ? | yes",
            "sql": "select distinct transactions.transaction_type_code"
        },
        {
            "utterance": "what is the share count ?",
            "sql": "select distinct transactions.share_count"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)"
    },
    "interaction": [
        {
            "utterance": "What is the overall average amount of transactions ?",
            "sql": "select avg ( transactions.amount_of_transaction )"
        },
        {
            "utterance": "How about average amount of transaction for different lots ?",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) group_by transactions_lots.lot_id"
        },
        {
            "utterance": "Which lot has the highest average transaction amount ?",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) group_by transactions_lots.lot_id order_by avg ( transactions.amount_of_transaction ) desc limit_value"
        },
        {
            "utterance": "What about the lowest average ?",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) group_by transactions_lots.lot_id order_by avg ( transactions.amount_of_transaction ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the details of all sales and purchases?",
        "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases"
    },
    "interaction": [
        {
            "utterance": "list all the sales details",
            "sql": "select sales.sales_details"
        },
        {
            "utterance": "list the details of the purchases",
            "sql": "select purchases.purchase_details"
        },
        {
            "utterance": "prepare a table with both the sales and purchase details",
            "sql": "select sales.sales_details union select purchases.purchase_details"
        },
        {
            "utterance": "include sales and purchase id in the list",
            "sql": "select sales.sales_transaction_id , sales.sales_details union select purchases.purchase_transaction_id , purchases.purchase_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the details of the lots which are not used in any transactions?",
        "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id"
    },
    "interaction": [
        {
            "utterance": "what are the details of the lots which are not used in any transactions ?",
            "sql": "select lots.lot_details except select lots.lot_details"
        },
        {
            "utterance": "what is the transaction id of lot id 11",
            "sql": "select transactions_lots.transaction_id where transactions_lots.lot_id = value"
        },
        {
            "utterance": "what is the investor id of transaction id 3 ?",
            "sql": "select lots.investor_id where transactions_lots.transaction_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the transaction type code that occurs the fewest times.",
        "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of transaction type code ?",
            "sql": "select transactions.transaction_type_code"
        },
        {
            "utterance": "what is the average of amount of transaction ?",
            "sql": "select avg ( transactions.amount_of_transaction )"
        },
        {
            "utterance": "can you show me a list of share count ?",
            "sql": "select transactions.share_count"
        },
        {
            "utterance": "show the transaction type code that occurs the fewest times .",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100"
    },
    "interaction": [
        {
            "utterance": "Can you list the share counts for all transactions ?",
            "sql": "select transactions.share_count"
        },
        {
            "utterance": "Can you add to the table the amount of transaction associated with each share count ?",
            "sql": "select transactions.share_count , transactions.amount_of_transaction"
        },
        {
            "utterance": "Can you filter the table to only include transactions with share counts that are at least 100 , or with amounts bigger than 100 ?",
            "sql": "select transactions.share_count , transactions.amount_of_transaction where transactions.share_count > = value or transactions.amount_of_transaction > = value"
        },
        {
            "utterance": "Can you add to the table the dates of those transactions ?",
            "sql": "select transactions.date_of_transaction , transactions.share_count , transactions.amount_of_transaction where transactions.share_count > = value or transactions.amount_of_transaction > = value"
        },
        {
            "utterance": "Can you filter the table to only include the dates ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count > = value or transactions.amount_of_transaction > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50"
    },
    "interaction": [
        {
            "utterance": "What are the lot details associated with these lot ids ?",
            "sql": "select lots.lot_id , lots.lot_details where transactions.share_count < value"
        },
        {
            "utterance": "How many lots have share count smaller than 50 ?",
            "sql": "select count ( lots.lot_id ) where transactions.share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000"
    },
    "interaction": [
        {
            "utterance": "What are the dates of transactions with amount smaller than 3000 ?",
            "sql": "select transactions.date_of_transaction where transactions.amount_of_transaction < value"
        },
        {
            "utterance": "What are the transaction ids of those ? | Here is the table of the transaction ids of transcation with an amount smaller than 3000 . For example , they are 2 , 4 , 5 | What are the transaction type codes of those ?",
            "sql": "select transactions.transaction_type_code where transactions.amount_of_transaction < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\""
    },
    "interaction": [
        {
            "utterance": "Who are the delegates on the Appropriations committee ?",
            "sql": "select election.delegate where election.committee = value"
        },
        {
            "utterance": "What counties are they from ?",
            "sql": "select county.county_name where county.county_id = election.district and election.committee = value"
        },
        {
            "utterance": "What districts are they from ?",
            "sql": "select election.district where election.committee = value"
        },
        {
            "utterance": "What are the populations of the counties they come from , please ?",
            "sql": "select county.population where county.county_id = election.district and election.committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""
    },
    "interaction": [
        {
            "utterance": "How many parties in this table ?",
            "sql": "select count ( distinct party.party )"
        },
        {
            "utterance": "Peter Vallone in which party ?",
            "sql": "select party.party where party.governor = value"
        },
        {
            "utterance": "How many elections in this table ?",
            "sql": "select count ( election.* )"
        },
        {
            "utterance": "Carl McCall in which party ?",
            "sql": "select party.party where party.governor = value"
        },
        {
            "utterance": "What are the names of parties that have both delegates on `` Appropriations '' ?",
            "sql": "select party.party where election.committee = value intersect select party.party where election.committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 2,
    "final": {
        "utterance": "Which delegates are from counties with population smaller than 100000?",
        "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"
    },
    "interaction": [
        {
            "utterance": "Which delegates are from countries with population smaller than 100000 ?",
            "sql": "select election.delegate where county.population < value"
        },
        {
            "utterance": "Can you give the name of the countries with population smaller than 100000 ?",
            "sql": "select county.county_name where county.population < value"
        },
        {
            "utterance": "What is the number of counties with population greater than 100000 ?",
            "sql": "select count ( county.county_name ) where county.population > value"
        },
        {
            "utterance": "Can you give me the name of the counties with population between 50000 and 100000 ?",
            "sql": "select county.county_name where county.population < value and county.population > value"
        },
        {
            "utterance": "What are the committee names for the counties with population smaller than 100000 ?",
            "sql": "select election.committee where county.population < value"
        },
        {
            "utterance": "What are the committee names for the counties with population between 50000-100000 ?",
            "sql": "select election.committee where county.population < value and county.population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name of the party that has at least two records.",
        "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many parties are there ?",
            "sql": "select count ( party.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select party.party"
        },
        {
            "utterance": "Is there any party that has at least two records ?",
            "sql": "select party.party group_by party.party having count ( party.* ) > value"
        },
        {
            "utterance": "Yes , can you show me all the attorney generals from democratic party ?",
            "sql": "select party.attorney_general where party.party = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name of the party that has at least two records.",
        "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many parties have at least two records ?",
            "sql": "select count ( party.* ) ( select party.party group_by party.party having count ( party.* ) > = value )"
        },
        {
            "utterance": "What are those parties ?",
            "sql": "select party.party group_by party.party having count ( party.* ) > = value"
        },
        {
            "utterance": "Who are the comptroller of those individuals ?",
            "sql": "select party.comptroller where party.us_senate in ( select party.us_senate where party.party in ( select party.party group_by party.party having count ( party.* ) > = value ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 5,
    "final": {
        "utterance": "Which committees have delegates from both democratic party and liberal party?",
        "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    "interaction": [
        {
            "utterance": "Which committees have delegates from the democratic party ?",
            "sql": "select election.committee where party.party = value"
        },
        {
            "utterance": "Which committees have delegates from the liberal party ?",
            "sql": "select election.committee where party.party = value"
        },
        {
            "utterance": "Which committees have delegates from both parties , please ?",
            "sql": "select election.committee where party.party = value intersect select election.committee where party.party = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 6,
    "final": {
        "utterance": "Return the maximum and minimum population among all counties.",
        "sql": "SELECT max(Population) ,  min(Population) FROM county"
    },
    "interaction": [
        {
            "utterance": "What is the average population across the counties ?",
            "sql": "select avg ( county.population )"
        },
        {
            "utterance": "Which county 's population is lowest ?",
            "sql": "select county.county_name order_by county.population asc limit_value"
        },
        {
            "utterance": "What county has the highest population ?",
            "sql": "select county.county_name order_by county.population desc limit_value"
        },
        {
            "utterance": "And what is its zip code ?",
            "sql": "select county.zip_code order_by county.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of counties that have at least two delegates.",
        "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Could you list the names of all counties in ascending alphabetical order ?",
            "sql": "select county.county_name order_by county.county_name"
        },
        {
            "utterance": "How many delegates do each of these counties have ?",
            "sql": "select county.county_name , count ( * ) group_by county.county_id"
        },
        {
            "utterance": "Could you only show the counties that have at least two delegates ?",
            "sql": "select county.county_name group_by county.county_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 8,
    "final": {
        "utterance": "How many distinct delegates are from counties with population larger than 50000?",
        "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"
    },
    "interaction": [
        {
            "utterance": "What is the zip code of county id of 2",
            "sql": "select county.zip_code where county.county_id = value"
        },
        {
            "utterance": "how much population of zip code D21 ?",
            "sql": "select county.population where county.zip_code = value"
        },
        {
            "utterance": "what is the county name zip code D02 ?",
            "sql": "select county.county_name where county.zip_code = value"
        },
        {
            "utterance": "what is election id of district 2 ?",
            "sql": "select election.election_id where election.district = value"
        },
        {
            "utterance": "how many distinct delegates are from counties with population larger than 50000",
            "sql": "select count ( distinct election.delegate ) where county.population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 9,
    "final": {
        "utterance": "Return the maximum and minimum population among all counties.",
        "sql": "SELECT max(Population) ,  min(Population) FROM county"
    },
    "interaction": [
        {
            "utterance": "how many zip codes in the county table",
            "sql": "select count ( county.zip_code )"
        },
        {
            "utterance": "how many county id in the county table",
            "sql": "select count ( county.county_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 10,
    "final": {
        "utterance": "Return all the committees that have delegates from Democratic party.",
        "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\""
    },
    "interaction": [
        {
            "utterance": "Return all the committees that have delegates from Democratic Party .",
            "sql": "select election.committee where party.party = value"
        },
        {
            "utterance": "Hmm . Please return all the committees that have delegates from Liberal party .",
            "sql": "select election.committee where party.party = value"
        },
        {
            "utterance": "Please give me all the delegates 's names from Liberal party in Appropriations committee",
            "sql": "select election.delegate where party.party = value and election.committee = value"
        },
        {
            "utterance": "Can you also give me all the delegate 's name from Liberal party in Economic Matters committee .",
            "sql": "select election.delegate where party.party = value and election.committee = value"
        },
        {
            "utterance": "Can you please give the delegates name from Democratic Party in economic matters committee ?",
            "sql": "select election.delegate where party.party = value and election.committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the name of the party that has the most delegates.",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the Lieutenant Governor name for the year 1998 ?",
            "sql": "select party.lieutenant_governor where party.year = value"
        },
        {
            "utterance": "Who is the Delegate for the election id 1 ?",
            "sql": "select election.delegate where election.election_id = value"
        },
        {
            "utterance": "Show the name of the party that has the most delegates ?",
            "sql": "select party.party group_by election.party order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the name of the county with the biggest population.",
        "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Yes , what 's the name of the county with the biggest population ?",
            "sql": "select county.county_name order_by county.population desc limit_value"
        },
        {
            "utterance": "And the name with the smallest population ?",
            "sql": "select county.county_name order_by county.population asc limit_value"
        },
        {
            "utterance": "What is the population of Baltimore County ?",
            "sql": "select county.population where county.county_name = value"
        },
        {
            "utterance": "What is its zip code ?",
            "sql": "select county.zip_code where county.county_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of phones that are not on any market.",
        "sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)"
    },
    "interaction": [
        {
            "utterance": "How many different markets are there ?",
            "sql": "select count ( distinct phone_market.market_id )"
        },
        {
            "utterance": "How many different phones are there ?",
            "sql": "select count ( distinct phone.name )"
        },
        {
            "utterance": "Which phone is sold in the most different markets ?",
            "sql": "select phone.name group_by phone.phone_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many phones are not available in any markets ?",
            "sql": "select count ( phone.name ) where phone.phone_id not in ( select phone_market.phone_id )"
        },
        {
            "utterance": "What is the name of that phone ?",
            "sql": "select phone.name where phone.phone_id not in ( select phone_market.phone_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking"
    },
    "interaction": [
        {
            "utterance": "Show the names of phones and the districts of markets they are on , in ascending order of the ranking of the market .",
            "sql": "select phone.name , market.district order_by market.ranking"
        },
        {
            "utterance": "Which carriers are active in Alberta ?",
            "sql": "select phone.carrier where market.district = value"
        },
        {
            "utterance": "Where else is TMobile active ?",
            "sql": "select market.district where phone.carrier = value and market.district != value"
        },
        {
            "utterance": "Which phones does TMobile support ?",
            "sql": "select phone.name where phone.carrier = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 2,
    "final": {
        "utterance": "For each phone, show its names and total number of stocks.",
        "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "State the phone name which has the least price on the list ?",
            "sql": "select phone.name order_by phone.price asc limit_value"
        },
        {
            "utterance": "Which phone id has the highest stock on the list ?",
            "sql": "select phone_market.phone_id order_by phone_market.num_of_stock desc limit_value"
        },
        {
            "utterance": "For each phone , show its names and total number of stocks ?",
            "sql": "select phone.name , sum ( phone_market.num_of_stock ) group_by phone.name"
        },
        {
            "utterance": "State the name of the Carrier of Iphone 6s ?",
            "sql": "select phone.carrier where phone.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of phones and the districts of markets they are on.",
        "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    "interaction": [
        {
            "utterance": "Can you list all market ids and the names of the districts associated with them ?",
            "sql": "select market.market_id , market.district"
        },
        {
            "utterance": "Can you add to the table the phone ids from the table phone market that are associated with each market id ?",
            "sql": "select market.market_id , market.district , phone_market.phone_id"
        },
        {
            "utterance": "Can you add to the table the name of the phones associated with each of the phone ids ?",
            "sql": "select market.market_id , market.district , phone_market.phone_id , phone.name"
        },
        {
            "utterance": "Can you sort the table by phone id , but still retain all information within the table ?",
            "sql": "select market.market_id , market.district , phone_market.phone_id , phone.name order_by phone_market.phone_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC"
    },
    "interaction": [
        {
            "utterance": "Could you give me the names of all phones ?",
            "sql": "select distinct ( phone.name )"
        },
        {
            "utterance": "How about only the phones with more than 2000 units in stock ?",
            "sql": "select phone.name group_by phone.name having sum ( phone_market.num_of_stock ) > value"
        },
        {
            "utterance": "Great ! Can you put them in descending order of total number of stock ?",
            "sql": "select phone.name group_by phone.name having sum ( phone_market.num_of_stock ) > value order_by sum ( phone_market.num_of_stock ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "sql": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64"
    },
    "interaction": [
        {
            "utterance": "Can you show me the carriers that have phones with memories smaller than 32 ?",
            "sql": "select phone.carrier where phone.memory_in_g < value"
        },
        {
            "utterance": "Can you show me the carriers that have phones with memories bigger than 64 ?",
            "sql": "select phone.carrier where phone.memory_in_g > value"
        },
        {
            "utterance": "Can you show me the carriers that have phones with memories smaller than 32 and bigger than 64 ?",
            "sql": "select phone.carrier where phone.memory_in_g < value intersect select phone.carrier where phone.memory_in_g > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "sql": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\""
    },
    "interaction": [
        {
            "utterance": "Can you show me the total number of phones ?",
            "sql": "select count ( phone.* )"
        },
        {
            "utterance": "how about the total number of different carriers ?",
            "sql": "select count ( distinct phone.carrier )"
        },
        {
            "utterance": "Can you list the phones with carrier either Sprint or TMobile ?",
            "sql": "select phone.phone_id where phone.carrier = value or phone.carrier = value"
        },
        {
            "utterance": "Can you please include their names ?",
            "sql": "select phone.phone_id , phone.name where phone.carrier = value or phone.carrier = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of all the donors except those whose donation amount less than 9.",
        "sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9"
    },
    "interaction": [
        {
            "utterance": "Hello , can you provide me with the names of the donors ?",
            "sql": "select endowment.donator_name"
        },
        {
            "utterance": "How many donors were there total ?",
            "sql": "select count ( distinct endowment.donator_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of the school with the smallest enrollment.",
        "sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the name of the school with the highest enrollment ?",
            "sql": "select school.school_name order_by school.enrollment desc limit_value"
        },
        {
            "utterance": "Which school is the top enrollment ?",
            "sql": "select school.school_name order_by school.enrollment desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 2,
    "final": {
        "utterance": "How many donors have endowment for school named \"Glenn\"?",
        "sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\""
    },
    "interaction": [
        {
            "utterance": "How many schools are in Walkerton ?",
            "sql": "select count ( school.* ) where school.location = value"
        },
        {
            "utterance": "How many donors have endowment for the school named Glenn ?",
            "sql": "select count ( distinct endowment.donator_name ) where school.school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which donators have a donation amount above 8.5 ?",
            "sql": "select endowment.donator_name where endowment.amount > value"
        },
        {
            "utterance": "Which school ids have at least two of those donators ?",
            "sql": "select school.school_id where endowment.amount > value group_by endowment.school_id having count ( * ) > value"
        },
        {
            "utterance": "What are the schools names ?",
            "sql": "select school.school_name where endowment.amount > value group_by endowment.school_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 4,
    "final": {
        "utterance": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
        "sql": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted"
    },
    "interaction": [
        {
            "utterance": "What location of school name Bremen ?",
            "sql": "select school.location where school.school_name = value"
        },
        {
            "utterance": "How many enrollment of school id 2 ?",
            "sql": "select school.enrollment where school.school_id = value"
        },
        {
            "utterance": "How many invested in the school with mascot Falcons ?",
            "sql": "select budget.invested where school.mascot = value"
        },
        {
            "utterance": "List the name , IHSAA Football Class , and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003 , in the order of percent of total invested budget and total budgeted budget .",
            "sql": "select school.school_name , school.mascot , school.ihsaa_football_class where budget.budgeted > value or budget.year < value order_by budget.total_budget_percent_invested , budget.total_budget_percent_budgeted"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10"
    },
    "interaction": [
        {
            "utterance": "Show the names of schools",
            "sql": "select school.school_name"
        },
        {
            "utterance": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10",
            "sql": "select school.school_name group_by school.school_name having sum ( budget.budgeted ) > value or sum ( endowment.amount ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 6,
    "final": {
        "utterance": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "sql": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"
    },
    "interaction": [
        {
            "utterance": "List each donator name and the amount of endowment in descending order of the amount of endorsement .",
            "sql": "select endowment.donator_name , sum ( endowment.amount ) group_by endowment.donator_name order_by sum ( endowment.amount ) desc"
        },
        {
            "utterance": "which donator has the highest endowment ? | Did you mean endowment id ? | which donator has the highest amount of endowment ?",
            "sql": "select endowment.donator_name , sum ( endowment.amount ) group_by endowment.donator_name order_by sum ( endowment.amount ) desc limit_value"
        },
        {
            "utterance": "which donator has the lowest endowment amount ?",
            "sql": "select endowment.donator_name , sum ( endowment.amount ) group_by endowment.donator_name order_by sum ( endowment.amount ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of the schools without any endowment.",
        "sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)"
    },
    "interaction": [
        {
            "utterance": "what is the location of School id 1",
            "sql": "select school.location where school.school_id = value"
        },
        {
            "utterance": "What is the amount for donator name Distrito Nacional ?",
            "sql": "select endowment.amount where endowment.donator_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the average, maximum, minimum enrollment of all schools.",
        "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"
    },
    "interaction": [
        {
            "utterance": "how many school are presented on the table",
            "sql": "select count ( school.* )"
        },
        {
            "utterance": "list out the school name",
            "sql": "select school.school_name"
        },
        {
            "utterance": "what is the location of bremen",
            "sql": "select school.location where school.school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the mascots for schools with enrollments above the average?",
        "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
    },
    "interaction": [
        {
            "utterance": "yes , i want to know about the mascots for schools . | What about the mascot for schools do you want to know ? | I want to know that what are the mascots for schools with enrollments above the average ?",
            "sql": "select school.mascot where school.enrollment > ( select avg ( school.enrollment ) )"
        },
        {
            "utterance": "but i want above average list only .",
            "sql": "select school.mascot where school.enrollment > ( select avg ( school.enrollment ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the average, maximum, minimum enrollment of all schools.",
        "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"
    },
    "interaction": [
        {
            "utterance": "Can you show me the average enrollment of all schools ?",
            "sql": "select avg ( school.enrollment )"
        },
        {
            "utterance": "Can you show me the maximum enrollment of all schools ?",
            "sql": "select max ( school.enrollment )"
        },
        {
            "utterance": "Can you show me the minimum enrollment of all schools ?",
            "sql": "select min ( school.enrollment )"
        },
        {
            "utterance": "What is the name of the school with the maximum enrollment ?",
            "sql": "select school.school_name order_by school.enrollment desc limit_value"
        },
        {
            "utterance": "What is the name of the school with the minimum enrollment ?",
            "sql": "select school.school_name order_by school.enrollment limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 11,
    "final": {
        "utterance": "List the amount and donor name for the largest amount of donation.",
        "sql": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the amount for the largest donation",
            "sql": "select endowment.amount order_by endowment.amount desc limit_value"
        },
        {
            "utterance": "list the name for the largest amount of donation",
            "sql": "select endowment.donator_name order_by endowment.amount desc limit_value"
        },
        {
            "utterance": "what is the name for the smallest amount of donation",
            "sql": "select endowment.donator_name order_by endowment.amount asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the mascots for schools with enrollments above the average?",
        "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
    },
    "interaction": [
        {
            "utterance": "WHAT ARE THE MASCOTS FOR THE SCHOOLS ENROLLMENTS ABOVE THE AVERAGE",
            "sql": "select school.mascot where school.enrollment > ( select avg ( school.enrollment ) )"
        },
        {
            "utterance": "TELL ME THE LOCATION OF GLENN | Do you mean the location of the school named `` Glenn '' ? | YES",
            "sql": "select school.location where school.school_name = value"
        },
        {
            "utterance": "TELL ME THE ENROLLMENT OF CULVER COMMUNITY",
            "sql": "select school.enrollment where school.school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""
    },
    "interaction": [
        {
            "utterance": "What is the venue of the competition `` 1994 FIFA World cup qualification '' hosted by `` Hangzou '' ?",
            "sql": "select match.venue where city.city = value and match.competition = value"
        },
        {
            "utterance": "ok. What is the venue of the competition `` 1994 FIFA World Cup qualification '' hosted by `` Nanjing '' ( Jiangsu ) '' ?",
            "sql": "select match.venue where city.city = value and match.competition = value"
        },
        {
            "utterance": "What is the GDP of the city Shanghai in the table ?",
            "sql": "select city.gdp where city.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 1,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Could you list all the cities in ascending alphabetical order ?",
            "sql": "select city.city order_by city.city asc"
        },
        {
            "utterance": "Which cities were once host cities ?",
            "sql": "select city.city"
        },
        {
            "utterance": "Which cities had a higher temperature in Feb than in Jun or were a host city ?",
            "sql": "select city.city where temperature.feb > temperature.jun union select city.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 2,
    "final": {
        "utterance": "what is the GDP of the city with the largest population.",
        "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the largest population among the cities ?",
            "sql": "select city.regional_population order_by city.regional_population desc limit_value"
        },
        {
            "utterance": "Hmm , I want to know the name of the city with this population .",
            "sql": "select city.city order_by city.regional_population desc limit_value"
        },
        {
            "utterance": "What is the GDP of Shanghai ?",
            "sql": "select city.gdp where city.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 3,
    "final": {
        "utterance": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000"
    },
    "interaction": [
        {
            "utterance": "How many cities have a regional population over 8000000 ?",
            "sql": "select count ( city.city ) where city.regional_population > value"
        },
        {
            "utterance": "How many cities have a population under 5000000 ?",
            "sql": "select count ( city.city ) where city.regional_population < value"
        },
        {
            "utterance": "What are the names of those cities ?",
            "sql": "select city.city where city.regional_population < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Which cities have served as host cities ? | Do you want the names of the cities who served as host cities ? | Yes .",
            "sql": "select distinct city.city"
        },
        {
            "utterance": "Which of these host cities has a lower temperature in March than July .",
            "sql": "select city.city where temperature.mar < temperature.jul intersect select city.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 5,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Tell me Regional Population and GDP for City ID 2 ?",
            "sql": "select city.regional_population , city.gdp where city.city_id = value"
        },
        {
            "utterance": "Tell me temperature for City ID 2 for Jan , Apr and Oct",
            "sql": "select temperature.jan , temperature.apr , temperature.oct where temperature.city_id = value"
        },
        {
            "utterance": "high value of temperature ... | I mean how high is high ? You can say temperature higher than a certain number . | Higher than 21",
            "sql": "select city.city where temperature.mar > value"
        },
        {
            "utterance": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities ?",
            "sql": "select city.city where temperature.mar < temperature.jul intersect select city.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 6,
    "final": {
        "utterance": "Which three cities have the largest regional population?",
        "sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you tell me which three cities have the highest regional populations , and list the population totals too ?",
            "sql": "select city.city , city.regional_population order_by city.regional_population desc limit_value"
        },
        {
            "utterance": "Great ! And what is the average GDP among all of the cities ?",
            "sql": "select avg ( city.gdp )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the GDP and population of the city that already served as a host more than once?",
        "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the city that already served as host more than once ? | The names in English or Hanzi ? | English , please .",
            "sql": "select city.city group_by hosting_city.host_city having count ( * ) > value"
        },
        {
            "utterance": "What is the GDP and population of Nanjing \uff08Jiangsu\uff09 ?",
            "sql": "select distinct city.gdp , city.regional_population where city.city = value"
        },
        {
            "utterance": "What is the name of the city in English and Hanzi that hosted in 2011 ?",
            "sql": "select city.city , city.hanzi where hosting_city.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 8,
    "final": {
        "utterance": "What is id of the city that hosted events in the most recent year?",
        "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello , can you tell me which city hosted events in the most recent year ? | Which attribute of the city do you want ? | How about , what is the most recent year ?",
            "sql": "select hosting_city.year order_by hosting_city.year desc limit_value"
        },
        {
            "utterance": "What was the match id in 2013 ?",
            "sql": "select hosting_city.match_id where hosting_city.year = value"
        },
        {
            "utterance": "What is the city id that is associated with match id 6 in 2013 ?",
            "sql": "select hosting_city.host_city where hosting_city.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the host year of city \"Taizhou ( Zhejiang )\"?",
        "sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\""
    },
    "interaction": [
        {
            "utterance": "How many regional population of match id 1 ?",
            "sql": "select city.regional_population where hosting_city.match_id = value"
        },
        {
            "utterance": "Find the gdp of host city 2 .",
            "sql": "select city.gdp where city.city_id = value"
        },
        {
            "utterance": "Ok , What are the hanyu pinyin of Nanjing ( Jiangsu ) ?",
            "sql": "select city.hanyu_pinyin where city.city = value"
        },
        {
            "utterance": "What is the host year of city `` Taizhou ( Zhejiang ) '' ?",
            "sql": "select hosting_city.year where city.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 10,
    "final": {
        "utterance": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct"
    },
    "interaction": [
        {
            "utterance": "What cities had the lowest temperature in March ? | what did you want to get ? city ID or city name\uff1f | City name please .",
            "sql": "select city.city order_by temperature.mar limit_value"
        },
        {
            "utterance": "What was the name of the city whose temperature in March was lower than that in July ?",
            "sql": "select city.city where temperature.mar < temperature.jul"
        },
        {
            "utterance": "What was the name of the city whose temperature in March was higher than that in October ?",
            "sql": "select city.city where temperature.mar > temperature.oct"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the cities which were once a host city after 2010?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"
    },
    "interaction": [
        {
            "utterance": "Find the cities which were once a host city after 2009 ?",
            "sql": "select city.city where hosting_city.year > value"
        },
        {
            "utterance": "How many cities in this table ?",
            "sql": "select count ( distinct city.city )"
        },
        {
            "utterance": "Find average GDP of this table ?",
            "sql": "select avg ( city.gdp )"
        },
        {
            "utterance": "Most GDP in this table ? | Do you mean the max GDP | Yes .",
            "sql": "select max ( city.gdp )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 12,
    "final": {
        "utterance": "Which city has the highest temperature in February?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many city there",
            "sql": "select count ( distinct city.city )"
        },
        {
            "utterance": "how many regional population in Hangzhou city",
            "sql": "select city.regional_population where city.city = value"
        },
        {
            "utterance": "what is the city id of Nanjing",
            "sql": "select city.city_id where city.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 13,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Which cities are host cities ?",
            "sql": "select city.city"
        },
        {
            "utterance": "Okay , which cities have not hosted ?",
            "sql": "select city.city where city.city_id not in ( select hosting_city.host_city )"
        },
        {
            "utterance": "Great ! Out of those cities , which ones have temperatures lower in March compared to their December temperature ?",
            "sql": "select city.city where temperature.mar < temperature.dec except select city.city"
        },
        {
            "utterance": "Fantastic ! Between Hangzhou and Nantong , which city has the cooler weather ? | Did you mean what time to compare the weather ? | Oh , sorry ! Yes , which city has the lowest temperature in March ?",
            "sql": "select temperature.mar , city.city where city.city = value or city.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 0,
    "final": {
        "utterance": "For each building, show the name of the building and the number of institutions in it.",
        "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all building names ?",
            "sql": "select building.name"
        },
        {
            "utterance": "Great ! Can you update the list to show the number of different institutions in each building ?",
            "sql": "select building.name , count ( * ) group_by building.building_id"
        },
        {
            "utterance": "Thanks ! I would be fine just know which is the tallest building . | Do you mean you want to know the name of the tallest building ? Or anything else ? | Yes ! I want to know the name of the tallest building please .",
            "sql": "select building.name order_by building.height_feet desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 1,
    "final": {
        "utterance": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "sql": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE"
    },
    "interaction": [
        {
            "utterance": "Can you list all the institution types with the number of institutions of each type ?",
            "sql": "select institution.type , count ( institution.* ) group_by institution.type"
        },
        {
            "utterance": "Could you also show me the total enrollment for each type of institution ?",
            "sql": "select institution.type , count ( institution.* ) , sum ( institution.enrollment ) group_by institution.type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 2,
    "final": {
        "utterance": "For each building, show the name of the building and the number of institutions in it.",
        "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
    },
    "interaction": [
        {
            "utterance": "what are the names of the institution and building here",
            "sql": "select building.name , institution.institution group_by building.building_id"
        },
        {
            "utterance": "In what year was Ave Maria University created and where is the current location",
            "sql": "select institution.founded , institution.location where institution.institution = value"
        },
        {
            "utterance": "How many enrollement does Dakota State University have",
            "sql": "select institution.enrollment where institution.institution = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the average, maximum, and minimum number of floors for all buildings?",
        "sql": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building"
    },
    "interaction": [
        {
            "utterance": "show the maximum number of floors for all buildings ?",
            "sql": "select max ( building.floors )"
        },
        {
            "utterance": "Show me the name of the building with building id 1 ?",
            "sql": "select building.name where building.building_id = value"
        },
        {
            "utterance": "Show me the name of the building with 12 floors ?",
            "sql": "select building.name where building.floors = value"
        },
        {
            "utterance": "Show me the average and minimum number of floors for all buildings ?",
            "sql": "select avg ( building.floors ) , min ( building.floors )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 4,
    "final": {
        "utterance": "Show institution names along with the number of proteins for each institution.",
        "sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
    },
    "interaction": [
        {
            "utterance": "Show institution names along with the number of proteins for each institution",
            "sql": "select institution.institution , count ( * ) group_by institution.institution_id"
        },
        {
            "utterance": "What proteins are associated with Lindenwood University-Belleville ?",
            "sql": "select protein.protein_name where institution.institution = value"
        },
        {
            "utterance": "Between Centromeric protein E , putative and conserved hypothetical protein , which has the highest divergence from human lineage ?",
            "sql": "select protein.divergence_from_human_lineage where protein.protein_name = value or protein.protein_name = value"
        },
        {
            "utterance": "What is the accession number for Centromeric protein E ?",
            "sql": "select protein.accession_number where protein.protein_name = value"
        },
        {
            "utterance": "What is the sequence identity to human protein value associated with accession number XP_002429877.1",
            "sql": "select protein.sequence_identity_to_human_protein where protein.accession_number = value"
        },
        {
            "utterance": "Which protein has the highest sequence identity to human protein value ?",
            "sql": "select protein.protein_name order_by protein.sequence_identity_to_human_protein desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of buildings except for those having an institution founded in 2003.",
        "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003"
    },
    "interaction": [
        {
            "utterance": "What buildings were founded in 2003 ?",
            "sql": "select institution.institution where institution.founded = value"
        },
        {
            "utterance": "what are the names of the buildings with institutions founded after 2003 ?",
            "sql": "select building.name where institution.founded > value"
        },
        {
            "utterance": "what are the names of the buildings with institutions founded before 2003 ?",
            "sql": "select building.name where institution.founded < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the institution type with the largest number of institutions.",
        "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the institute type with lowest number of institutions",
            "sql": "select institution.type group_by institution.type order_by count ( institution.* ) limit_value"
        },
        {
            "utterance": "show the institute type with highest number of institutions",
            "sql": "select institution.type group_by institution.type order_by count ( institution.* ) desc limit_value"
        },
        {
            "utterance": "which university is founded first",
            "sql": "select institution.institution order_by institution.founded limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of buildings except for those having an institution founded in 2003.",
        "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003"
    },
    "interaction": [
        {
            "utterance": "which team performed in Ave Maria university ?",
            "sql": "select institution.team where institution.institution = value"
        },
        {
            "utterance": "How many number of floors are in Tampa City Hall ?",
            "sql": "select building.floors where building.name = value"
        },
        {
            "utterance": "How can i reach at Tampa city Hall can you send me the address ?",
            "sql": "select building.street_address where building.name = value"
        },
        {
            "utterance": "which type of university is Ave Maria University ?",
            "sql": "select institution.type where institution.institution = value"
        },
        {
            "utterance": "where is Dakota State University situated ? | Did you mean the location or the street address of its building ? | yes , location of Dakota state University ?",
            "sql": "select institution.location where institution.institution = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of buildings that do not have any institution.",
        "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
    },
    "interaction": [
        {
            "utterance": "How many institutions in this table ?",
            "sql": "select count ( institution.* )"
        },
        {
            "utterance": "How many buildings in this table ?",
            "sql": "select count ( building.* )"
        },
        {
            "utterance": "How many type of institutions in this table ? | There are 3 different types of institutions in the table . | How many different teams in this institution table ?",
            "sql": "select count ( distinct institution.team )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name of buildings that do not have any institution.",
        "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
    },
    "interaction": [
        {
            "utterance": "Show the names of all the buildings .",
            "sql": "select building.name"
        },
        {
            "utterance": "Show the names of all buildings that have an institution .",
            "sql": "select building.name where building.building_id in ( select institution.building_id )"
        },
        {
            "utterance": "Show the number of floors for each of the buildings that have an institution .",
            "sql": "select building.floors where building.building_id in ( select institution.building_id )"
        },
        {
            "utterance": "Show the name of buildings that do not have an institution .",
            "sql": "select building.name where building.building_id not in ( select institution.building_id )"
        },
        {
            "utterance": "What is the street address of the Bank of America Tower .",
            "sql": "select building.street_address where building.name = value"
        },
        {
            "utterance": "List the buildings that have an institution and their street address .",
            "sql": "select building.name , building.street_address where building.building_id in ( select institution.building_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the institution type with the largest number of institutions.",
        "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which institution type has the largest number of institutions ?",
            "sql": "select institution.type group_by institution.type order_by count ( institution.* ) desc limit_value"
        },
        {
            "utterance": "Which institution type has the smallest number of institutions ?",
            "sql": "select institution.type group_by institution.type order_by count ( institution.* ) asc limit_value"
        },
        {
            "utterance": "What is the average number of institutions ? | Average number of institutions over what ? | What is the institution type with the largest number of institutions ?",
            "sql": "select institution.type group_by institution.type order_by count ( institution.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 11,
    "final": {
        "utterance": "Show institution names along with the number of proteins for each institution.",
        "sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
    },
    "interaction": [
        {
            "utterance": "what are the names of the institutions ?",
            "sql": "select institution.institution"
        },
        {
            "utterance": "what is the number of proteins for each institution ?",
            "sql": "select institution.institution , count ( * ) group_by institution.institution_id"
        },
        {
            "utterance": "what location is each institution in ?",
            "sql": "select institution.institution , institution.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the first names of all instructors who have taught some course and the course description.",
        "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code"
    },
    "interaction": [
        {
            "utterance": "Hello , what courses are currently being taught ?",
            "sql": "select course.*"
        },
        {
            "utterance": "Can you please show which instructors are teaching those courses ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Can you please show me the current courses being taught with the last name of the instructor teaching them ?",
            "sql": "select employee.emp_lname , course.crs_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "What is the average GPA of all students ?",
            "sql": "select avg ( student.stu_gpa )"
        },
        {
            "utterance": "What is the average GPA of all students enrolled in the course that has the code ACCT-211 ?",
            "sql": "select avg ( student.stu_gpa ) where class.crs_code = value"
        },
        {
            "utterance": "What are the grades of all the students in that course ?",
            "sql": "select enroll.enroll_grade where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the first names of the professors who do not teach a class.",
        "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( employee.* )"
        },
        {
            "utterance": "what is the employee DOB of employee no 101",
            "sql": "select employee.emp_dob where employee.emp_num = value"
        },
        {
            "utterance": "how many class is there",
            "sql": "select count ( class.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which school has the smallest amount of professors?",
        "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the school code of emp num 114",
            "sql": "select department.school_code where department.emp_num = value"
        },
        {
            "utterance": "what is the school code of fine arts",
            "sql": "select department.school_code where department.dept_name = value"
        },
        {
            "utterance": "what is the dept address of accounting",
            "sql": "select department.dept_address where department.dept_name = value"
        },
        {
            "utterance": "what is the prof extension of hist",
            "sql": "select professor.prof_extension where professor.dept_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the info of students whose GPA is below 3 ?",
            "sql": "select student.* where student.stu_gpa < value"
        },
        {
            "utterance": "how about those whose GPA is greater than 3 ?",
            "sql": "select student.* where student.stu_gpa > value"
        },
        {
            "utterance": "Who is the youngest ? | Did you mean the youngest students whose GPA is higher than 3 ? | Yes , please .",
            "sql": "select student.* where student.stu_gpa > value order_by student.stu_dob desc limit_value"
        },
        {
            "utterance": "please just show the first , last name , and gpa .",
            "sql": "select student.stu_fname , student.stu_lname , student.stu_gpa where student.stu_gpa > value order_by student.stu_dob desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the first name of each student enrolled in class ACCT-211?",
        "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "What is the first name of each student entrolled in class ACCT-211 ?",
            "sql": "select student.stu_fname where class.crs_code = value"
        },
        {
            "utterance": "How many class sections ?",
            "sql": "select count ( distinct class.class_section )"
        },
        {
            "utterance": "What is the class time of ACCT-211 ? | There are multiple class times for ACCT-211 , would you like all of them ? | Yes",
            "sql": "select class.class_time where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many courses are offered by the Computer Info. Systems department?",
        "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""
    },
    "interaction": [
        {
            "utterance": "list all department code and department name",
            "sql": "select department.dept_code , department.dept_name"
        },
        {
            "utterance": "Sorry , I meant to show me all the course codes where department code is `` CIS ''",
            "sql": "select course.crs_code where department.dept_code = value"
        },
        {
            "utterance": "can I get a count of these courses where department code is `` CIS '' ?",
            "sql": "select count ( * ) where department.dept_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "how many students enrolled for the accounting department",
            "sql": "select count ( * ) where department.dept_name = value"
        },
        {
            "utterance": "what is the school code for accounting ?",
            "sql": "select department.school_code where department.dept_name = value"
        },
        {
            "utterance": "what is the emplotyee number for accounting ?",
            "sql": "select department.emp_num where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.",
        "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'"
    },
    "interaction": [
        {
            "utterance": "How many departments do you have ?",
            "sql": "select count ( department.* )"
        },
        {
            "utterance": "What are the first names of professors in the history department ?",
            "sql": "select employee.emp_fname where professor.dept_code = value"
        },
        {
            "utterance": "What are the offices of these professors ?",
            "sql": "select professor.prof_office where professor.dept_code = value"
        },
        {
            "utterance": "Can you tell me the first name and office of the professor in the history department who has a Ph.D. degree ?",
            "sql": "select employee.emp_fname , professor.prof_office where professor.dept_code = value and professor.prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
        "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'"
    },
    "interaction": [
        {
            "utterance": "what is employee number of james ? | Is James a first name or last name ? | first name",
            "sql": "select employee.emp_num where employee.emp_fname = value"
        },
        {
            "utterance": "please show me the DOB OF EMPLOYEE WHO HAS THIS AS HIS FIRST NAME | Do you mean the first name `` James '' ? | yeah",
            "sql": "select employee.emp_dob where employee.emp_fname = value"
        },
        {
            "utterance": "SHOW ME THE hire date OF THE EMPLOYEE WHO HAS THE FIRST NAME AS JAMES",
            "sql": "select employee.emp_hiredate where employee.emp_fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the first and last name of the professor in biology department?",
        "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\""
    },
    "interaction": [
        {
            "utterance": "what is the first and last name of the profesor in biology department ?",
            "sql": "select employee.emp_fname , employee.emp_lname where department.dept_name = value"
        },
        {
            "utterance": "how many employee in table ?",
            "sql": "select count ( employee.* )"
        },
        {
            "utterance": "what is the highest professor extension in the table ?",
            "sql": "select max ( professor.prof_extension )"
        },
        {
            "utterance": "what is least employee number in the table ?",
            "sql": "select min ( employee.emp_num )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"
    },
    "interaction": [
        {
            "utterance": "Can you Please list all departments ?",
            "sql": "select department.dept_name"
        },
        {
            "utterance": "Thank You . Can you provide the department code for each of these ?",
            "sql": "select distinct ( department.dept_code )"
        },
        {
            "utterance": "Thank you . Can you provide the names of students taking classes in CIS ?",
            "sql": "select student.stu_fname , student.stu_lname where department.dept_name = value"
        },
        {
            "utterance": "Just the First name ?",
            "sql": "select student.stu_fname where department.dept_name = value"
        },
        {
            "utterance": "Which one of these students also has a class in ACCT ?",
            "sql": "select student.stu_fname where department.dept_name = value intersect select student.stu_fname where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many students enrolled in class ACCT-211?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "may i know the class room for the class section 1 | ok , so which column info do you want to return for these classes ? | i want to know the class room column",
            "sql": "select class.class_room where class.class_section = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many professors who are from either Accounting or Biology department?",
        "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'"
    },
    "interaction": [
        {
            "utterance": "How many professors in this table ?",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "How many department names in this table ?",
            "sql": "select count ( distinct department.dept_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the count and code of the job has most employees.",
        "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the amount and code of the job with the most employees ?",
            "sql": "select employee.emp_jobcode , count ( employee.* ) group_by employee.emp_jobcode order_by count ( employee.* ) desc limit_value"
        },
        {
            "utterance": "And the hire dates of those 22 employees ?",
            "sql": "select employee.emp_hiredate where employee.emp_jobcode in ( select employee.emp_jobcode group_by employee.emp_jobcode order_by count ( employee.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many students enrolled in class ACCT-211?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many students are enrolled in the class with the course code of ACCT-211 ?",
            "sql": "select count ( * ) where class.crs_code = value"
        },
        {
            "utterance": "Excellent ! Can you show the class time and class room for ACCt-211 ?",
            "sql": "select class.class_time , class.class_room where class.crs_code = value"
        },
        {
            "utterance": "Thank you ! I thought there might be more to that table ... Can you provide me with a list of all of the different course codes ?",
            "sql": "select distinct class.crs_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find names of all students who took some course and got A or C.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"
    },
    "interaction": [
        {
            "utterance": "How many students took any course ? | Did you mean how many students there are ? | Yes , sorry !",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "How many students got an A ?",
            "sql": "select count ( student.stu_fname ) where enroll.enroll_grade = value"
        },
        {
            "utterance": "or a C ? | You want the students just with grade `` C '' or including `` A '' | Who got either an A or a C ?",
            "sql": "select count ( student.stu_fname ) where enroll.enroll_grade = value or enroll.enroll_grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the number of classes in each school.",
        "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code"
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( distinct department.school_code )"
        },
        {
            "utterance": "What classes did each school offer ?",
            "sql": "select * , department.school_code group_by department.school_code"
        },
        {
            "utterance": "What is the number of classes offered by each school ?",
            "sql": "select count ( * ) , department.school_code group_by department.school_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many professors who has a either Ph.D. or MA degree?",
        "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'"
    },
    "interaction": [
        {
            "utterance": "How many professors have either a Ph.D. or a MA degree ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value or professor.prof_high_degree = value"
        },
        {
            "utterance": "Show me employee number for professors with a Ph.D. degree",
            "sql": "select professor.emp_num where professor.prof_high_degree = value"
        },
        {
            "utterance": "Show me professor office for professors with a MA degree",
            "sql": "select professor.prof_office where professor.prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name of the department that has the largest number of students enrolled?",
        "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the department that has the largest number of students enrolled ?",
            "sql": "select department.dept_name group_by course.dept_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What 's that department 's address ?",
            "sql": "select department.dept_address group_by course.dept_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about employee number ?",
            "sql": "select department.emp_num group_by course.dept_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all students who are taking classes from the accounting department ?",
            "sql": "select student.stu_fname where department.dept_name = value"
        },
        {
            "utterance": "What are the first names of all students who are taking classes from the Computer Info . Systems department ?",
            "sql": "select student.stu_fname where department.dept_name = value"
        },
        {
            "utterance": "What are the first names of all students who are taking classes from both the accounting department and the Computer Info . Systems department ?",
            "sql": "select student.stu_fname where department.dept_name = value intersect select student.stu_fname where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find names of all students who took some course and got A or C.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"
    },
    "interaction": [
        {
            "utterance": "Could you please find all the names of the students who took some course and got an A ?",
            "sql": "select student.stu_fname , student.stu_lname where enroll.enroll_grade = value"
        },
        {
            "utterance": "Could you please find all the names of the students who took some course and got a C ?",
            "sql": "select student.stu_fname , student.stu_lname where enroll.enroll_grade = value"
        },
        {
            "utterance": "What are their student numbers ?",
            "sql": "select student.stu_num where enroll.enroll_grade = value"
        },
        {
            "utterance": "What are the class codes for the students who took some course and got a C ?",
            "sql": "select enroll.class_code where enroll.enroll_grade = value"
        },
        {
            "utterance": "What are the student class and gpa of each of those students ?",
            "sql": "select student.stu_class , student.stu_gpa where enroll.enroll_grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Hello Can you provide me with a list of all of the different department names ?",
            "sql": "select department.dept_name"
        },
        {
            "utterance": "That 's great ! Now can you update this list to include the total number of students for each department ?",
            "sql": "select department.dept_name , count ( * ) group_by student.dept_code"
        },
        {
            "utterance": "Can you update this list to show the Department Name , Department Address , and number of students for the 3 departments with the highest number of students ?",
            "sql": "select department.dept_name , department.dept_address , count ( * ) group_by student.dept_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 23,
    "final": {
        "utterance": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "How many students are enrolled in any type of accounting course ? | Do you mean the course taught by some professor from the accounting department ? | Yes",
            "sql": "select count ( * ) where department.dept_name = value"
        },
        {
            "utterance": "And what are their student numbers ?",
            "sql": "select enroll.stu_num where department.dept_name = value"
        },
        {
            "utterance": "And what about the course code that they are enrolled in ?",
            "sql": "select course.crs_code where department.dept_name = value"
        },
        {
            "utterance": "Yes , what is the class time ? | Do you want to know all class time ? | NO , only for ACCT-211",
            "sql": "select class.class_time where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
    },
    "interaction": [
        {
            "utterance": "Could you find the names of all the departments , please ?",
            "sql": "select department.dept_name"
        },
        {
            "utterance": "What about classes with the course description `` Statistics '' ?",
            "sql": "select course.* where course.crs_description like value"
        },
        {
            "utterance": "What department name offers that course description ?",
            "sql": "select department.dept_name where course.crs_description like value"
        },
        {
            "utterance": "How many course credits are each of those worth ?",
            "sql": "select course.crs_credit where course.crs_code in ( select course.crs_code where department.dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find names of all students who took some course and the course description.",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code"
    },
    "interaction": [
        {
            "utterance": "How many students in this table ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "Find name of all students ? | Do you mean First or Last name of the students ? | Find the average student GPA ?",
            "sql": "select avg ( student.stu_gpa )"
        },
        {
            "utterance": "Find top enroll grade ?",
            "sql": "select enroll.enroll_grade order_by enroll.enroll_grade asc limit_value"
        },
        {
            "utterance": "Find the names of all students who took some course and the course description ?",
            "sql": "select student.stu_fname , student.stu_lname , course.crs_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many classes are professor whose last name is Graztevski has?",
        "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'"
    },
    "interaction": [
        {
            "utterance": "Hello . How many classes are there ?",
            "sql": "select count ( class.* )"
        },
        {
            "utterance": "How many different professors are there ?",
            "sql": "select count ( distinct employee.emp_num ) where employee.emp_jobcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"
    },
    "interaction": [
        {
            "utterance": "Can you list all the schools that have less than 5 different departments ? | BUS is the school code for schools with less than 5 different departments . | Can you list the number of departments with school code BUS ?",
            "sql": "select count ( distinct department.dept_name ) where department.school_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me class code for class room BUS311 ?",
            "sql": "select class.class_code where class.class_room = value"
        },
        {
            "utterance": "Tell me professor employee number for course code ACCT-211 ?",
            "sql": "select class.prof_num where class.crs_code = value"
        },
        {
            "utterance": "Tell me the class time for class section 3 ?",
            "sql": "select class.class_time where class.class_section = value"
        },
        {
            "utterance": "Find the number of classes offered for all class rooms that held at least 2 classes ?",
            "sql": "select count ( class.* ) , class.class_room group_by class.class_room having count ( class.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the number of professors in accounting department.",
        "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""
    },
    "interaction": [
        {
            "utterance": "How many professors in the school ?",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "And what about the accounting department ?",
            "sql": "select count ( * ) where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many courses are offered by the Computer Info. Systems department?",
        "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""
    },
    "interaction": [
        {
            "utterance": "How many courses does the Computer Info . Systems department offer ?",
            "sql": "select count ( * ) where department.dept_name = value"
        },
        {
            "utterance": "What are the descriptions of those courses ?",
            "sql": "select course.crs_description where department.dept_name = value"
        },
        {
            "utterance": "How many courses does the Biology department offer ?",
            "sql": "select count ( * ) where department.dept_name = value"
        },
        {
            "utterance": "What about the Accounting department ?",
            "sql": "select count ( * ) where department.dept_name = value"
        },
        {
            "utterance": "What are the course credits of those courses ?",
            "sql": "select course.crs_credit where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the name and address of the department that has the highest number of students.",
        "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi - Can you tell me which department has the most students ?",
            "sql": "select department.dept_name group_by student.dept_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many students are in the Accounting department ?",
            "sql": "select count ( * ) group_by student.dept_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Please tell me the address of the Accounting department .",
            "sql": "select department.dept_address where department.dept_name = value"
        },
        {
            "utterance": "Great - can you tell me the names of students in the Accounting department with a GPA above 3.0 ?",
            "sql": "select student.stu_fname , student.stu_lname where department.dept_name = value and student.stu_gpa > value"
        },
        {
            "utterance": "What is the total number of transfer students in all departments ?",
            "sql": "select sum ( student.stu_transfer )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"
    },
    "interaction": [
        {
            "utterance": "Can you list all schools with less than 5 different departments ?",
            "sql": "select department.school_code group_by department.school_code having count ( distinct department.dept_name ) < value"
        },
        {
            "utterance": "Can you list all the departments with the school code BUS ?",
            "sql": "select department.* where department.school_code = value"
        },
        {
            "utterance": "Thanks , can you just show the number of different departments in the table ?",
            "sql": "select count ( distinct department.dept_name ) , department.school_code group_by department.school_code having count ( distinct department.dept_name ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"
    },
    "interaction": [
        {
            "utterance": "how many instructors have taught ACCT-211 ?",
            "sql": "select count ( distinct class.prof_num ) where class.crs_code = value"
        },
        {
            "utterance": "can you tell me their first names and offices , please ?",
            "sql": "select employee.emp_fname , professor.prof_office where class.crs_code = value"
        },
        {
            "utterance": "excellent . can you also give me the course description for ACCT-211 ?",
            "sql": "select course.crs_description where course.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the number of professors with a Ph.D. degree in each department.",
        "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "Yes , hi , I 'd like to know how many professors are in the history department ?",
            "sql": "select count ( professor.* ) where professor.dept_code = value"
        },
        {
            "utterance": "Do both of them have doctorates ?",
            "sql": "select count ( professor.* ) where professor.dept_code = value and professor.prof_high_degree = value"
        },
        {
            "utterance": "How many departments are there total ?",
            "sql": "select count ( distinct professor.dept_code )"
        },
        {
            "utterance": "Is English one of them ?",
            "sql": "select distinct professor.dept_code where professor.dept_code = value"
        },
        {
            "utterance": "Do any of the English professors have a PhD ?",
            "sql": "select count ( professor.* ) where professor.dept_code = value and professor.prof_high_degree = value"
        },
        {
            "utterance": "Can you tell me where the history Doctorate 's office is ?",
            "sql": "select professor.prof_office where professor.dept_code = value and professor.prof_high_degree = value"
        },
        {
            "utterance": "What is the total number professors with doctorates employed by the 11 departments ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value"
        },
        {
            "utterance": "Of those 18 , how many doctorates are employed by the accounting department ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value and professor.dept_code = value"
        },
        {
            "utterance": "Can you tell me where their offices are ?",
            "sql": "select professor.prof_office where professor.prof_high_degree = value and professor.dept_code = value"
        },
        {
            "utterance": "Can you tell me the extension for the professor in office KLR229D , please ?",
            "sql": "select professor.prof_extension where professor.prof_high_degree = value and professor.dept_code = value and professor.prof_office = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"
    },
    "interaction": [
        {
            "utterance": "Can you please give me the names of all of the professors sorted in alphabetical order of their first name ? | Do you want to first name of all the professors , or last name or both ? | Both , please",
            "sql": "select employee.emp_fname , employee.emp_lname order_by employee.emp_fname"
        },
        {
            "utterance": "Where are their offices , if you do n't mind ?",
            "sql": "select professor.prof_office order_by employee.emp_fname"
        },
        {
            "utterance": "What are all of their professor high degree ?",
            "sql": "select professor.prof_high_degree"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
    },
    "interaction": [
        {
            "utterance": "How many different courses are there ?",
            "sql": "select count ( distinct course.crs_code )"
        },
        {
            "utterance": "How many departments are there ?",
            "sql": "select count ( department.dept_code )"
        },
        {
            "utterance": "What is the course code for the class named Statistics ? | Do you mean the course code for the course whose description is Statistics ? | yes .",
            "sql": "select course.crs_code where course.crs_description = value"
        },
        {
            "utterance": "Can you show me a list of all the course descriptions ?",
            "sql": "select course.crs_description"
        },
        {
            "utterance": "Can you tell me the course code for the class with the Intro . to Statistics description ?",
            "sql": "select course.crs_code where course.crs_description = value"
        },
        {
            "utterance": "What is the name of the department that course is in ? | Do you mean the name of the department which the course named 'Intro . to Statistics ' is in ? | yes .",
            "sql": "select department.dept_name where course.crs_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "what is the enroll grade of 324257",
            "sql": "select enroll.enroll_grade where enroll.stu_num = value"
        },
        {
            "utterance": "how many class there",
            "sql": "select count ( class.* )"
        },
        {
            "utterance": "how many students there",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "what is the dept-code of student number 324257",
            "sql": "select student.dept_code where student.stu_num = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the name of department where has the smallest number of professors?",
        "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "which department has the most professors ?",
            "sql": "select * group_by professor.dept_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What about the smallest ?",
            "sql": "select * group_by professor.dept_code order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 39,
    "final": {
        "utterance": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "What is the school code for the accounting department ?",
            "sql": "select department.school_code where department.dept_name = value"
        },
        {
            "utterance": "What is the accounting department 's address ?",
            "sql": "select department.dept_address where department.dept_name = value"
        },
        {
            "utterance": "Where is the professor of accounting 's office ?",
            "sql": "select professor.prof_office where department.dept_name = value"
        },
        {
            "utterance": "What degree does the professor of account hold ?",
            "sql": "select professor.prof_high_degree where department.dept_name = value"
        },
        {
            "utterance": "Where is the classroom located ?",
            "sql": "select class.class_room where class.crs_code = value and class.class_time like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"
    },
    "interaction": [
        {
            "utterance": "how many employees there",
            "sql": "select count ( employee.* )"
        },
        {
            "utterance": "how many English professors there",
            "sql": "select count ( professor.* ) where professor.dept_code = value"
        },
        {
            "utterance": "what is the prof high degree of department HIST",
            "sql": "select professor.prof_high_degree where professor.dept_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 41,
    "final": {
        "utterance": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "How many professors are there in total ?",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "What are the names of the departments they teach classes for ?",
            "sql": "select distinct department.dept_name"
        },
        {
            "utterance": "How many of the 22 professors are part of the Accounting department ?",
            "sql": "select count ( professor.* ) where professor.dept_code = value"
        },
        {
            "utterance": "How many of those 3 are currently teaching courses ?",
            "sql": "select count ( distinct professor.emp_num ) where professor.dept_code = value"
        },
        {
            "utterance": "Could you tell me the number of them that are teaching in a physical class room instead of through online classes ?",
            "sql": "select count ( distinct professor.emp_num ) where professor.dept_code = value"
        },
        {
            "utterance": "What are their first names and the class rooms where they teach ?",
            "sql": "select employee.emp_fname , class.class_room where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the last name and hire date of the professor who is in office DRE 102.",
        "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'"
    },
    "interaction": [
        {
            "utterance": "Who is the professor in the office DRE 102 ? | Do you want their first name , last name , or initial ? | last name and hire date please .",
            "sql": "select employee.emp_lname , employee.emp_hiredate where professor.prof_office = value"
        },
        {
            "utterance": "Thanks . What are those professors ' degree ?",
            "sql": "select employee.emp_lname , professor.prof_high_degree where professor.prof_office = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 43,
    "final": {
        "utterance": "Find the number of professors with a Ph.D. degree in each department.",
        "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "how many professors there",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "how many English professors there",
            "sql": "select count ( professor.* ) where professor.dept_code = value"
        },
        {
            "utterance": "what is the department code of 103 | Do you mean the department code of professor with emp number 103 ? | yes sir",
            "sql": "select professor.dept_code where professor.emp_num = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What are the first names and date of birth of professors teaching course ACCT-211?",
        "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\""
    },
    "interaction": [
        {
            "utterance": "First names of the proffesors teaching course ACCT-211 ?",
            "sql": "select distinct employee.emp_fname where class.crs_code = value"
        },
        {
            "utterance": "what are their birth dates ?",
            "sql": "select distinct employee.emp_dob where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 45,
    "final": {
        "utterance": "How many professors who has a either Ph.D. or MA degree?",
        "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'"
    },
    "interaction": [
        {
            "utterance": "I 'd like to know how many professors have a Ph.D. or MA ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value or professor.prof_high_degree = value"
        },
        {
            "utterance": "How many of them are Ph.D. degrees ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 46,
    "final": {
        "utterance": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "How many students number in this table ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "How many class rooms in this table ?",
            "sql": "select count ( class.class_room )"
        },
        {
            "utterance": "Find the average gpa of the students ?",
            "sql": "select avg ( student.stu_gpa )"
        },
        {
            "utterance": "What is last name of William ?",
            "sql": "select student.stu_lname where student.stu_fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 47,
    "final": {
        "utterance": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"
    },
    "interaction": [
        {
            "utterance": "what instructors teach courses ? | Do you mean the first names of instructors who teach courses ? | Yes , the first names of all instructors who teach courses ,",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Great . I need to know which first name of the instructor goes with each class and class description .",
            "sql": "select employee.emp_fname , course.crs_description"
        },
        {
            "utterance": "great , I also need to know the first name of each instructor with the course name , and where their office is located .",
            "sql": "select employee.emp_fname , professor.prof_office , course.crs_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 48,
    "final": {
        "utterance": "Which school has the smallest amount of professors?",
        "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( department.school_code )"
        },
        {
            "utterance": "How many professors are there in total ?",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "Which school has the most professors ?",
            "sql": "select department.school_code group_by department.school_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about the school with the least amount of professors ?",
            "sql": "select department.school_code group_by department.school_code order_by count ( * ) limit_value"
        },
        {
            "utterance": "What departments does this school have ?",
            "sql": "select department.dept_name where department.school_code in ( select department.school_code group_by department.school_code order_by count ( department.* ) limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 49,
    "final": {
        "utterance": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
        "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "How many have a Ph.D. degree ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value"
        },
        {
            "utterance": "Yes",
            "sql": "select department.dept_name where professor.prof_high_degree = value group_by professor.dept_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 50,
    "final": {
        "utterance": "What is the first and last name of the oldest employee?",
        "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the first name of the oldest employee ?",
            "sql": "select employee.emp_fname order_by employee.emp_dob limit_value"
        },
        {
            "utterance": "What is his last name ?",
            "sql": "select employee.emp_lname order_by employee.emp_dob limit_value"
        },
        {
            "utterance": "What was his employee hire date ?",
            "sql": "select employee.emp_hiredate order_by employee.emp_dob limit_value"
        },
        {
            "utterance": "What was his date of birth ?",
            "sql": "select employee.emp_dob order_by employee.emp_dob limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 51,
    "final": {
        "utterance": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the first name and last name of the youngest student whose GPA is above 3 ?",
            "sql": "select student.stu_fname , student.stu_lname where student.stu_gpa > value order_by student.stu_dob desc limit_value"
        },
        {
            "utterance": "What is her GPA ?",
            "sql": "select student.stu_gpa where student.stu_gpa > value order_by student.stu_dob desc limit_value"
        },
        {
            "utterance": "What are the full name and GPA of the oldest student whose GPA is below 3 ?",
            "sql": "select student.stu_fname , student.stu_lname , student.stu_gpa where student.stu_gpa < value order_by student.stu_dob asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 52,
    "final": {
        "utterance": "What is the last name and office of the professor from the history department?",
        "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "Thank you . What are the office extensions numbers of professor Donelly and Blalock please ?",
            "sql": "select department.dept_extension where employee.emp_lname = value or employee.emp_lname = value"
        },
        {
            "utterance": "Thank you ! Can you please confirm the school code of the History Department ?",
            "sql": "select department.school_code where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of active from date ?",
            "sql": "select customer_contact_channels.active_from_date"
        },
        {
            "utterance": "can you show me a list of active to date ?",
            "sql": "select customer_contact_channels.active_to_date"
        },
        {
            "utterance": "which one the first active to date ?",
            "sql": "select customer_contact_channels.* order_by customer_contact_channels.active_to_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
    },
    "interaction": [
        {
            "utterance": "show me the customer name of the order that have the status `` cancelled ''",
            "sql": "select customers.customer_name where customer_orders.order_status = value"
        },
        {
            "utterance": "name the customer which have 15 as customer id ?",
            "sql": "select customers.customer_name where customers.customer_id = value"
        },
        {
            "utterance": "find the customer name of the order that have status `` delivered ''",
            "sql": "select customers.customer_name , customer_orders.order_date where customer_orders.order_status = value"
        },
        {
            "utterance": "find the customer date of the orders that have the status '' delivered '' | did you mean the order date ? | yes",
            "sql": "select customer_orders.order_date where customer_orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 2,
    "final": {
        "utterance": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "Please show me all customers and their contact channels | Do you want the names of customers or id ? | names please",
            "sql": "select distinct customers.customer_name , customer_contact_channels.channel_code"
        },
        {
            "utterance": "please show just those customers who 's channel code was email",
            "sql": "select distinct customers.customer_name where customer_contact_channels.channel_code = value"
        },
        {
            "utterance": "Please list just Tillman Ernsers contact channel",
            "sql": "select distinct customer_contact_channels.channel_code where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "What is the customer name of customer id 9 ?",
            "sql": "select customers.customer_name where customers.customer_id = value"
        },
        {
            "utterance": "Find the payment method of Tillman Ernser .",
            "sql": "select customers.payment_method where customers.customer_name = value"
        },
        {
            "utterance": "What are the contact number of customer id 3 ?",
            "sql": "select customer_contact_channels.contact_number where customer_contact_channels.customer_id = value"
        },
        {
            "utterance": "What is the `` active to date '' of the latest contact channel used by `` Tillman Ernser '' ?",
            "sql": "select max ( customer_contact_channels.active_to_date ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the payment method of the customer that has purchased the least quantity of items?",
        "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What was the least quantity of items purchased ? | do you mean the id of product or the id of order ? | ID of the order please .",
            "sql": "select order_items.order_id order_by order_items.order_quantity limit_value"
        },
        {
            "utterance": "What is the payment method of the order with an id of 11 ?",
            "sql": "select customers.payment_method where customer_orders.order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name and active date of the customer that use email as the contact channel.",
        "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"
    },
    "interaction": [
        {
            "utterance": "List the names of all the customers that use email as a contact channel .",
            "sql": "select customers.customer_name where customer_contact_channels.channel_code = value"
        },
        {
            "utterance": "List the names of all the customers that use email as a contact channel and the date they became a member .",
            "sql": "select customers.customer_name , customers.date_became_customer where customer_contact_channels.channel_code = value"
        },
        {
            "utterance": "Find the name and active to date of the customers that use email as the contact channel .",
            "sql": "select customers.customer_name , customer_contact_channels.active_to_date where customer_contact_channels.channel_code = value"
        },
        {
            "utterance": "What is the payment method of Devin Mills .",
            "sql": "select distinct customers.payment_method where customers.customer_name = value"
        },
        {
            "utterance": "What is the customer id of Devin Mills .",
            "sql": "select distinct customers.customer_id where customers.customer_name = value"
        },
        {
            "utterance": "List the names of all the customers with the same payment method as Devin Mills .",
            "sql": "select distinct customers.customer_name where customers.payment_method = ( select distinct customers.payment_method where customers.customer_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 6,
    "final": {
        "utterance": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""
    },
    "interaction": [
        {
            "utterance": "what is the country of zip postcode 416 ?",
            "sql": "select addresses.country where addresses.zip_postcode = value"
        },
        {
            "utterance": "what is the city of south california",
            "sql": "select addresses.city where addresses.state_province_county = value"
        },
        {
            "utterance": "what is the address content of colorando ?",
            "sql": "select addresses.address_content where addresses.state_province_county = value"
        },
        {
            "utterance": "what is the city of new jersey",
            "sql": "select addresses.city where addresses.state_province_county = value"
        },
        {
            "utterance": "list the city of country USA ?",
            "sql": "select addresses.city where addresses.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the payment method of the customer that has purchased the least quantity of items?",
        "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What kind of payment methods are there ? | Do you mean the number of payment kinds ? | yes",
            "sql": "select count ( distinct customers.payment_method )"
        },
        {
            "utterance": "And can you show me how many customers there are ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "Can you show me the name of the customer who purchased the least quantity of items ?",
            "sql": "select customers.customer_name group_by customers.customer_name order_by sum ( order_items.order_quantity ) limit_value"
        },
        {
            "utterance": "What payment method did that customer use ?",
            "sql": "select customers.payment_method group_by customers.customer_name order_by sum ( order_items.order_quantity ) limit_value"
        },
        {
            "utterance": "How many items did that customer buy ?",
            "sql": "select sum ( order_items.order_quantity ) group_by customers.customer_name order_by sum ( order_items.order_quantity ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the customer that has purchased the most items?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which customer bought the most items ? | Do you want the name of the customer ? | That would be lovely .",
            "sql": "select customers.customer_name group_by customers.customer_name order_by sum ( order_items.order_quantity ) desc limit_value"
        },
        {
            "utterance": "How many did he purchase ?",
            "sql": "select sum ( order_items.order_quantity ) group_by customers.customer_name order_by sum ( order_items.order_quantity ) desc limit_value"
        },
        {
            "utterance": "How did he pay ?",
            "sql": "select customers.payment_method group_by customers.customer_name order_by sum ( order_items.order_quantity ) desc limit_value"
        },
        {
            "utterance": "When did he become a customer ?",
            "sql": "select customers.date_became_customer group_by customers.customer_name order_by sum ( order_items.order_quantity ) desc limit_value"
        },
        {
            "utterance": "How many became customers before that ?",
            "sql": "select count ( customers.* ) where customers.date_became_customer < ( select customers.date_became_customer group_by customers.customer_name order_by sum ( order_items.order_quantity ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the name of the customer that made the order with the largest quantity?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
    },
    "interaction": [
        {
            "utterance": "how many Customers are there",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "how may customer payment cash method",
            "sql": "select count ( customers.* ) where customers.payment_method = value"
        },
        {
            "utterance": "what is the name of customer id 2",
            "sql": "select customers.customer_name where customers.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
    },
    "interaction": [
        {
            "utterance": "What is the total number of products ?",
            "sql": "select sum ( order_items.order_quantity )"
        },
        {
            "utterance": "What is the total number of products that are in orders with status `` Delivered '' ?",
            "sql": "select sum ( order_items.order_quantity ) where customer_orders.order_status = value"
        },
        {
            "utterance": "What is the total number of products that are in orders with status `` Cancelled '' ?",
            "sql": "select sum ( order_items.order_quantity ) where customer_orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
    },
    "interaction": [
        {
            "utterance": "List the order cancelled customer id from the table ?",
            "sql": "select customer_orders.order_id , customer_orders.customer_id where customer_orders.order_status = value"
        },
        {
            "utterance": "Which order id has the least quantity on the list ?",
            "sql": "select order_items.order_id order_by order_items.order_quantity limit_value"
        },
        {
            "utterance": "How many customer ids has the `` delivered '' status on the list ?",
            "sql": "select count ( customer_orders.customer_id ) where customer_orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of customers who are living in Colorado?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\""
    },
    "interaction": [
        {
            "utterance": "Hello There ! Can you provide me with a list of all customer names ?",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Thank you for that ! Can you filter that list to show only the customers living in Colorado ?",
            "sql": "select customers.customer_name where addresses.state_province_county = value"
        },
        {
            "utterance": "Great ! Can you update this list to show their address content , city , and zip code ?",
            "sql": "select customers.customer_name , addresses.address_content , addresses.city , addresses.zip_postcode where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names of customers using the most popular payment method?",
        "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you provide me with a list of all of the customer names and their corresponding payment methods ?",
            "sql": "select customers.customer_name , customers.payment_method"
        },
        {
            "utterance": "Thank you for that ! Can you tell me what the most popular payment method is ?",
            "sql": "select customers.payment_method group_by customers.payment_method order_by count ( customers.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
    },
    "interaction": [
        {
            "utterance": "FIND THE CUSTOMER NAME AND DATE OF THE ORDERS THAT HAVE THE STATUS `` DELIVERED ''",
            "sql": "select customers.customer_name , customer_orders.order_date where customer_orders.order_status = value"
        },
        {
            "utterance": "WHAT ARE THE CUSTOMER ID FOR ALL THE CUSTOMERS WHOSE ORDERS WERE CANCELLED ?",
            "sql": "select distinct customer_orders.customer_id where customer_orders.order_status = value"
        },
        {
            "utterance": "what are the names of the customers whose customer details are null ?",
            "sql": "select distinct customers.customer_name where customer_orders.order_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the state and country of all cities with post code starting with 4.",
        "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""
    },
    "interaction": [
        {
            "utterance": "Find the state and country of all cities with post code starting with 4 .",
            "sql": "select addresses.state_province_county , addresses.country where addresses.zip_postcode like value"
        },
        {
            "utterance": "What are the cities in Colorado that have post codes starting with 4 .",
            "sql": "select addresses.city where addresses.zip_postcode like value and addresses.state_province_county = value"
        },
        {
            "utterance": "How about cities in Texas that have post codes starting with 4 ?",
            "sql": "select addresses.city where addresses.zip_postcode like value and addresses.state_province_county = value"
        },
        {
            "utterance": "How many cities in total with post code starting with 4 ?",
            "sql": "select count ( distinct addresses.city ) where addresses.zip_postcode like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""
    },
    "interaction": [
        {
            "utterance": "list the canceled product customer id ?",
            "sql": "select order_items.product_id where customer_orders.order_status = value"
        },
        {
            "utterance": "which is the order date of customer id 5 ?",
            "sql": "select customer_orders.order_date where customer_orders.customer_id = value"
        },
        {
            "utterance": "what the average order quantity for all the order items ?",
            "sql": "select avg ( order_items.order_quantity )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 17,
    "final": {
        "utterance": "List the countries having more than 4 addresses listed.",
        "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4"
    },
    "interaction": [
        {
            "utterance": "List the countries having more than 4 addresses listed .",
            "sql": "select addresses.country group_by addresses.country having count ( addresses.address_id ) > value"
        },
        {
            "utterance": "What is zip postcode of the lucasville city ?",
            "sql": "select addresses.zip_postcode where addresses.city = value"
        },
        {
            "utterance": "Final question is How many Address ids in the table ?",
            "sql": "select count ( addresses.address_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 18,
    "final": {
        "utterance": "Who made the latest order?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi who made the latest order ?",
            "sql": "select customers.customer_name order_by customer_orders.order_date desc limit_value"
        },
        {
            "utterance": "How many people canceled their orders",
            "sql": "select count ( distinct customer_orders.customer_id ) where customer_orders.order_status = value"
        },
        {
            "utterance": "How many times has Eunice Morar placed an order",
            "sql": "select count ( * ) where customers.customer_name = value"
        },
        {
            "utterance": "How did Eunic Morar pay ?",
            "sql": "select customers.payment_method where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 19,
    "final": {
        "utterance": "Which city has the most customers living in?",
        "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "In which city are the most customers living in ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What about the city with least customers ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) limit_value"
        },
        {
            "utterance": "And in which state is it located ?",
            "sql": "select addresses.state_province_county group_by addresses.city order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the name of the customer that made the order with the largest quantity?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
    },
    "interaction": [
        {
            "utterance": "Could you tell me the name of the customer that made the order that had the largest quantity of items in it ?",
            "sql": "select customers.customer_name where order_items.order_quantity = ( select max ( order_items.order_quantity ) )"
        },
        {
            "utterance": "What dates did they become customers ?",
            "sql": "select customers.customer_name , customers.date_became_customer where order_items.order_quantity = ( select max ( order_items.order_quantity ) )"
        },
        {
            "utterance": "Can you list the names of all customers who cancelled at least one order as well as the order dates of those cancelled orders ?",
            "sql": "select customers.customer_name , customer_orders.order_date where customer_orders.order_status = value"
        },
        {
            "utterance": "What are the order quantities and dates for all orders that were paid for with cash ?",
            "sql": "select order_items.order_quantity , customer_orders.order_date where customers.payment_method = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 21,
    "final": {
        "utterance": "How many types of products have Rodrick Heaney bought in total?",
        "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
    },
    "interaction": [
        {
            "utterance": "how many types of products have rodrick heaney bought in total ?",
            "sql": "select count ( distinct order_items.product_id ) where customers.customer_name = value"
        },
        {
            "utterance": "which person had order high amount of products | What attributes do you want to know about the customer who ordered the highest amount of products ? | I want everything about it .",
            "sql": "select * group_by customer_orders.customer_id order_by sum ( order_items.order_quantity ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the name of all customers whose name contains \"Alex\".",
        "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""
    },
    "interaction": [
        {
            "utterance": "how many customers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "show all their names .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "please order them in alphabetical order .",
            "sql": "select customers.customer_name order_by customers.customer_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 23,
    "final": {
        "utterance": "Which payment method is used by most customers?",
        "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know the payment methods available",
            "sql": "select distinct customers.payment_method"
        },
        {
            "utterance": "How many customers use credit credit card as a means of payment ?",
            "sql": "select count ( customers.* ) where customers.payment_method = value"
        },
        {
            "utterance": "What about Cash ?",
            "sql": "select count ( customers.* ) where customers.payment_method = value"
        },
        {
            "utterance": "And Cheque ?",
            "sql": "select count ( customers.* ) where customers.payment_method = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 24,
    "final": {
        "utterance": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "What payment method did Dr. Julia Wuckert MD use ?",
            "sql": "select customers.payment_method where customers.customer_name = value"
        },
        {
            "utterance": "How many customers used credit cards ? ?",
            "sql": "select count ( customers.customer_id ) where customers.payment_method = value"
        },
        {
            "utterance": "From when did Rodrick Heaney became a customer ?",
            "sql": "select customer_contact_channels.active_from_date where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 25,
    "final": {
        "utterance": "Which product has been ordered most number of times?",
        "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you give me a list of all products ?",
            "sql": "select products.*"
        },
        {
            "utterance": "Could you order them by order quantity ? | From small to large ? | large to small",
            "sql": "select * group_by order_items.product_id order_by sum ( order_items.order_quantity ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the names of customers who never placed an order.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all the customers who never placed a single order ?",
            "sql": "select customers.customer_name except select customers.customer_name"
        },
        {
            "utterance": "What date did they each become customers ?",
            "sql": "select customers.date_became_customer where customers.customer_name in ( select customers.customer_name except select customers.customer_name )"
        },
        {
            "utterance": "What are the names of the customers who cancelled their orders ?",
            "sql": "select distinct customers.customer_name where customer_orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the list of cities that no customer is living in.",
        "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the addresses with cities ? | Did you mean the address content ? | Yes , and also the cities .",
            "sql": "select addresses.address_content , addresses.city"
        },
        {
            "utterance": "Hmm , I want to know the cities with customers living in .",
            "sql": "select addresses.city where addresses.city in ( select distinct addresses.city )"
        },
        {
            "utterance": "Hmm , please list the cities that no customer is living in .",
            "sql": "select addresses.city where addresses.city not in ( select distinct addresses.city )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 28,
    "final": {
        "utterance": "Which product has been ordered most number of times?",
        "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Please tell me the product names and ids . | Did you mean all the product details and ids ? | Yes please .",
            "sql": "select products.product_details , products.product_id"
        },
        {
            "utterance": "Hmm , I want to know the product names and the order quantities . | Did you mean the product details as product names ? | Yes .",
            "sql": "select products.product_details , order_items.order_quantity"
        },
        {
            "utterance": "Can you tell which product has been ordered the most number of times ?",
            "sql": "select products.product_details group_by order_items.product_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the address content of the customer named \"Maudie Kertzmann\"?",
        "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\""
    },
    "interaction": [
        {
            "utterance": "what are the different type of payement method ?",
            "sql": "select distinct customers.payment_method"
        },
        {
            "utterance": "what are the different address type ?",
            "sql": "select distinct customer_addresses.address_type"
        },
        {
            "utterance": "which city in Dr. Julia Wuckert MD ? | What you mean ? | how many customer id ?",
            "sql": "select count ( customers.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 30,
    "final": {
        "utterance": "List all the contact channel codes that were used less than 5 times.",
        "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5"
    },
    "interaction": [
        {
            "utterance": "Which contact codes were used for less than 5 minutes ?",
            "sql": "select customer_contact_channels.channel_code group_by customer_contact_channels.channel_code having count ( customer_contact_channels.customer_id ) < value"
        },
        {
            "utterance": "What are their contact numbers ?",
            "sql": "select customer_contact_channels.channel_code , customer_contact_channels.contact_number group_by customer_contact_channels.channel_code having count ( customer_contact_channels.customer_id ) < value"
        },
        {
            "utterance": "What was their activation dates ? | do you want the active_from_date or active_to_date or both of them ? | Both of them",
            "sql": "select customer_contact_channels.channel_code , customer_contact_channels.active_from_date , customer_contact_channels.active_to_date group_by customer_contact_channels.channel_code having count ( customer_contact_channels.customer_id ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the state and country of all cities with post code starting with 4.",
        "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""
    },
    "interaction": [
        {
            "utterance": "Find the state of all cities with post code starting with 4 .",
            "sql": "select addresses.state_province_county where addresses.zip_postcode like value"
        },
        {
            "utterance": "Find the country of all cities with post code starting with 4 .",
            "sql": "select addresses.country where addresses.zip_postcode like value"
        },
        {
            "utterance": "List all the post codes starting with 4 .",
            "sql": "select addresses.zip_postcode where addresses.zip_postcode like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 0,
    "final": {
        "utterance": "For each station, return its longitude and the average duration of trips that started from the station.",
        "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
    },
    "interaction": [
        {
            "utterance": "What are the dock count of San Jose Diridon Caltrain Station ?",
            "sql": "select station.dock_count where station.name = value"
        },
        {
            "utterance": "What are the bike id of zip code 94041 ?",
            "sql": "select trip.bike_id where trip.zip_code = value"
        },
        {
            "utterance": "How many dock stations are there in San Jose ? | Do you mean the total dock counts of all stations in city San Jose ? | Yes",
            "sql": "select sum ( station.dock_count ) where station.city = value"
        },
        {
            "utterance": "For each station , return its longitude and the average duration of trips that started from the station .",
            "sql": "select station.name , station.long , avg ( trip.duration ) group_by station.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
        "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    "interaction": [
        {
            "utterance": "what is the zip code of the highest number of trips taken | What do you mean by `` highest number of trips taken '' ? | i would like to know the zip code of trips taken above 200 with humidity below 70",
            "sql": "select weather.zip_code group_by weather.zip_code having avg ( weather.mean_humidity ) < value intersect select trip.zip_code group_by trip.zip_code having count ( trip.* ) > = value"
        },
        {
            "utterance": "what end station name has the least amount of trips taken but still above 100 trips",
            "sql": "select trip.end_station_name group_by trip.zip_code having count ( trip.* ) > = value order_by count ( trip.* ) asc limit_value"
        },
        {
            "utterance": "the zip code 94107 what is the humidity ?",
            "sql": "select ( weather.mean_humidity ) where weather.zip_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the name, latitude, and city of the station with the lowest latitude?",
        "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of station with lowest lattitude ?",
            "sql": "select station.name order_by station.lat limit_value"
        },
        {
            "utterance": "What is the latitude of the station with the lowest latitude ?",
            "sql": "select station.lat order_by station.lat limit_value"
        },
        {
            "utterance": "Which city is san jose diridon caltrain station located ?",
            "sql": "select station.city where station.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Return the unique name for stations that have ever had 7 bikes available.",
        "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
    },
    "interaction": [
        {
            "utterance": "how many stations are presented on the table",
            "sql": "select distinct count ( station.* )"
        },
        {
            "utterance": "list out the station names",
            "sql": "select distinct station.name"
        },
        {
            "utterance": "what is the city of San Jose Civic Center",
            "sql": "select station.city where station.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me the start station and end station for the trips with the three oldest id.",
        "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "how many trip are presented on the table",
            "sql": "select count ( trip.* )"
        },
        {
            "utterance": "show all the start station name",
            "sql": "select trip.start_station_name"
        },
        {
            "utterance": "what is the start date of Howard at 2nd | Do you mean its start station is Howard at 2nd ? | exactly",
            "sql": "select trip.start_date where trip.start_station_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the total and maximum duration of trips with bike id 636?",
        "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
    },
    "interaction": [
        {
            "utterance": "what is the total duration of trips with bike id 636 ?",
            "sql": "select sum ( trip.duration ) where trip.bike_id = value"
        },
        {
            "utterance": "ok , what is the maximum duration of trip with bike id 636 ?",
            "sql": "select max ( trip.duration ) where trip.bike_id = value"
        },
        {
            "utterance": "ok , what is the maximum duration of trip with bike id 454 ?",
            "sql": "select max ( trip.duration ) where trip.bike_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    "interaction": [
        {
            "utterance": "Good morning , could you please let me know the IDs of the stations those are located in San Francisco ?",
            "sql": "select station.id where station.city = value"
        },
        {
            "utterance": "That 's a big list , thank you . Then could you please let me know which of these stations has more than 10 bikes available ?",
            "sql": "select station.id where station.city = value intersect select status.station_id group_by status.station_id having status.bikes_available > value"
        },
        {
            "utterance": "That was fast , thank you again : ) Could you please let me know which station is located in the highest latitude ?",
            "sql": "select station.name order_by station.lat desc limit_value"
        },
        {
            "utterance": "Awesome , then could you please let me know the installation date of the station ?",
            "sql": "select station.installation_date order_by station.lat desc limit_value"
        },
        {
            "utterance": "Wow that 's a lot . Thank you again , this will be my last question : ) Could you please let me know the ID of the station which has the biggest number of docks available among these 61 stations ?",
            "sql": "select station.id where station.installation_date < value order_by station.dock_count desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me how many trips there have been , starting from August ?",
            "sql": "select count ( trip.* ) where trip.start_date like value"
        },
        {
            "utterance": "oh wow that 's a lot ! and how many stations have those started from ?",
            "sql": "select count ( distinct trip.start_station_name ) where trip.start_date like value"
        },
        {
            "utterance": "how many trips started from there ?",
            "sql": "select count ( trip.* ) where trip.start_station_name = ( select trip.start_station_name where trip.start_date like value group_by trip.start_station_name order_by count ( trip.* ) desc limit_value )"
        },
        {
            "utterance": "Could you tell me the ID and name of the San Francisco station ?",
            "sql": "select distinct trip.start_station_name , trip.start_station_id where trip.start_station_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 8,
    "final": {
        "utterance": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
    },
    "interaction": [
        {
            "utterance": "What is the latitude of each station , please ?",
            "sql": "select station.name , station.lat"
        },
        {
            "utterance": "What are the minimum durations of all trips that end in those stations ?",
            "sql": "select station.name , station.lat , min ( trip.duration ) group_by trip.end_station_id"
        },
        {
            "utterance": "What dates were all the stations installed ?",
            "sql": "select station.name , station.installation_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the ids and names of stations from which at least 200 trips started.",
        "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
    },
    "interaction": [
        {
            "utterance": "Show me the start station id for all trips .",
            "sql": "select trip.start_station_id"
        },
        {
            "utterance": "How many of these occur at least 200 times ?",
            "sql": "select count ( distinct trip.start_station_id ) where trip.start_station_id in ( select trip.start_station_id group_by trip.start_station_name having count ( trip.* ) > = value )"
        },
        {
            "utterance": "Show me the ids and names of these stations .",
            "sql": "select trip.start_station_id , trip.start_station_name group_by trip.start_station_name having count ( trip.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the average latitude and longitude of stations located in San Jose city?",
        "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
    },
    "interaction": [
        {
            "utterance": "What is the average latitude of stations located in San Jose city ?",
            "sql": "select avg ( station.lat ) where station.city = value"
        },
        {
            "utterance": "What is the average longitude of stations located in San Jose city ?",
            "sql": "select avg ( station.long ) where station.city = value"
        },
        {
            "utterance": "What are the installation dates for all stations in San Jose city ?",
            "sql": "select station.installation_date where station.city = value"
        },
        {
            "utterance": "What are the names of each of those ?",
            "sql": "select station.name , station.installation_date where station.city = value"
        },
        {
            "utterance": "What are the dock counts of each of those ?",
            "sql": "select station.name , station.dock_count where station.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
    },
    "interaction": [
        {
            "utterance": "What is the station name for the id 's 1 and 2 ?",
            "sql": "select station.name , station.id where station.id = value or station.id = value"
        },
        {
            "utterance": "Which station has dock count higher than 15 ... | Would you like to know the station name or all the information ? | What are the ids of station that have latitude above 37.4 and never had bike availability below 7 ?",
            "sql": "select station.id where station.lat > value except select status.station_id group_by status.station_id having min ( status.bikes_available ) < value"
        },
        {
            "utterance": "Tell me the installation date for the station id 4 ?",
            "sql": "select station.installation_date where station.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
    },
    "interaction": [
        {
            "utterance": "how many statuses are there",
            "sql": "select count ( status.* )"
        },
        {
            "utterance": "what is the city of San Jose Civic Center",
            "sql": "select station.city where station.name = value"
        },
        {
            "utterance": "how many stations there",
            "sql": "select count ( station.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    "interaction": [
        {
            "utterance": "How many trips lasted at least that long ? | Do you mean the number of trips whose duration is longer than the average duration of trips in zip code 94103 ? | yes",
            "sql": "select count ( trip.* ) where trip.duration > = ( select avg ( trip.duration ) where trip.zip_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the city of the station from which the shortest trip started ? | trip can not be described by distance | what is the latitude of San Jose Diridon Caltrain Station ?",
            "sql": "select distinct station.lat where station.name = value"
        },
        {
            "utterance": "what is the longitude of Santa Clara at Almaden ?",
            "sql": "select distinct station.long where station.name = value"
        },
        {
            "utterance": "what is the latitude of San Jose Civic Center ?",
            "sql": "select distinct station.lat where station.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
    },
    "interaction": [
        {
            "utterance": "how many trips started from howard and ended at san fransisco",
            "sql": "select count ( * ) where station.city = value and station.city = value"
        },
        {
            "utterance": "how many trips started from south van ness and ended at san fransisco",
            "sql": "select count ( * ) where station.city = value and station.city = value"
        },
        {
            "utterance": "how many trips started from mountain view city and ended in palo alto city",
            "sql": "select count ( * ) where station.city = value and station.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
    },
    "interaction": [
        {
            "utterance": "show me the names and ids of all stations",
            "sql": "select station.name , station.id"
        },
        {
            "utterance": "How many stations had more than 14 bikes available on average or were installed in december ?",
            "sql": "select count ( station.* ) ( select station.name group_by status.station_id having avg ( status.bikes_available ) > value union select station.name where station.installation_date like value )"
        },
        {
            "utterance": "show me the name and ids of these stations",
            "sql": "select station.name , station.id group_by status.station_id having avg ( status.bikes_available ) > value union select station.name , station.id where station.installation_date like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    "interaction": [
        {
            "utterance": "How many stations have an average bike availability above 10 ?",
            "sql": "select count ( * ) ( select * group_by status.station_id having avg ( status.bikes_available ) > value )"
        },
        {
            "utterance": "How many of those are not in San Jose City ?",
            "sql": "select count ( station.* ) ( select station.name group_by status.station_id having avg ( status.bikes_available ) > value except select station.name where station.city = value )"
        },
        {
            "utterance": "What are the names of those stations ?",
            "sql": "select station.name group_by status.station_id having avg ( status.bikes_available ) > value except select station.name where station.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Which bike traveled the most often in zip code 94002?",
        "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! How are you ? Could you please provide me with a list of all trip IDs for the zip code 94002 ?",
            "sql": "select trip.id where trip.zip_code = value"
        },
        {
            "utterance": "Great ! Can you tell me which bike id has the most trips within the area with the zipcode 94002 ?",
            "sql": "select trip.bike_id where trip.zip_code = value group_by trip.bike_id order_by count ( trip.* ) desc limit_value"
        },
        {
            "utterance": "Excellent ! Can you tell me what the total number of trips is , within zip code 94002 , for bike 252 ?",
            "sql": "select count ( trip.* ) where trip.zip_code = value and trip.bike_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Count the number of trips that did not end in San Francisco city.",
        "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\""
    },
    "interaction": [
        {
            "utterance": "Where do the trips end ?",
            "sql": "select distinct station.city"
        },
        {
            "utterance": "How many trips are there ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "How many of these end in San Francisco ?",
            "sql": "select count ( * ) where station.city = value"
        },
        {
            "utterance": "How many end somewhere else ?",
            "sql": "select count ( * ) where station.city != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the id of the trip that has the shortest duration?",
        "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the start date and start station id for id 900504 ?",
            "sql": "select trip.start_date , trip.start_station_name where trip.id = value"
        },
        {
            "utterance": "Tell me the zip code for bike id 454 and 574 ?",
            "sql": "select distinct trip.zip_code , trip.bike_id where trip.bike_id = value or trip.bike_id = value"
        },
        {
            "utterance": "What is the id of the trip that has the shortest duration ?",
            "sql": "select trip.id order_by trip.duration limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    "interaction": [
        {
            "utterance": "What are the station ids for San Francisco ? | Do you mean the city San Francisco ? | Yes .",
            "sql": "select station.id where station.city = value"
        },
        {
            "utterance": "Which of these have bikes ?",
            "sql": "select station.id where station.city = value intersect select status.station_id where status.bikes_available > value"
        },
        {
            "utterance": "Which of these have an average bike availability above 10 ?",
            "sql": "select station.id where station.city = value intersect select status.station_id group_by status.station_id having avg ( status.bikes_available ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all publishers which do not have a book in 1989.",
        "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show a list of all publishers who did not publish any books in 1989 ?",
            "sql": "select book_club.publisher except select book_club.publisher where book_club.year = value"
        },
        {
            "utterance": "Thank you ! Can you show me a list of all of the book titles published by Alyson ?",
            "sql": "select book_club.book_title where book_club.publisher = value"
        },
        {
            "utterance": "Thanks ! Can you update that list to show the years that those 3 books were published and what category they fall under ?",
            "sql": "select book_club.book_title , book_club.year , book_club.category where book_club.publisher = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 1,
    "final": {
        "utterance": "List categories that have at least two books after year 1989.",
        "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Are there any other categories ? | Do you mean the other category has books after year 1989 ? Gay SF/F is the only one category has books after year 1989 | Yes , that 's what I meant . How many books does Gay SF/F have after 1989 ?",
            "sql": "select count ( book_club.* ) where book_club.category = value and book_club.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 2,
    "final": {
        "utterance": "List all company names with a book published by Alyson.",
        "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"
    },
    "interaction": [
        {
            "utterance": "how manty editors are there ?",
            "sql": "select count ( book_club.author_or_editor )"
        },
        {
            "utterance": "how about the total number of companies ?",
            "sql": "select count ( culture_company.* )"
        },
        {
            "utterance": "which company did Alyson published a book for ?",
            "sql": "select culture_company.company_name where book_club.publisher = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 3,
    "final": {
        "utterance": "Show publishers with a book published in 1989 and a book in 1990.",
        "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990"
    },
    "interaction": [
        {
            "utterance": "Could you please show me the publishers with a book published in 1989 ?",
            "sql": "select book_club.publisher where book_club.year = value"
        },
        {
            "utterance": "Could you please show me the publishers with a book published in 1990 ?",
            "sql": "select book_club.publisher where book_club.year = value"
        },
        {
            "utterance": "Which publishers published books in 1989 and 1990 ?",
            "sql": "select book_club.publisher where book_club.year = value intersect select book_club.publisher where book_club.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the publisher with most number of books?",
        "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the publisher with most number of books ?",
            "sql": "select book_club.publisher group_by book_club.publisher order_by count ( book_club.* ) desc limit_value"
        },
        {
            "utterance": "Who is the author of Unicorn Mountain ?",
            "sql": "select book_club.author_or_editor where book_club.book_title = value"
        },
        {
            "utterance": "Who is the author of Death Takes the Stage ?",
            "sql": "select book_club.author_or_editor where book_club.book_title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you now just show the director and movie title for the highest grossing movie for the year 2000 or earlier . One result please",
            "sql": "select movie.title , movie.director where movie.year < = value order_by movie.gross_worldwide desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"
    },
    "interaction": [
        {
            "utterance": "What is the average for all movies ? | average what ? | Sorry , the average budget for all movies ?",
            "sql": "select avg ( movie.budget_million )"
        },
        {
            "utterance": "Okay . What is the average budget for all movies before 2000 ?",
            "sql": "select avg ( movie.budget_million ) where movie.year < value"
        },
        {
            "utterance": "Finally , what is the average budget , the maximum budget , and the minimum budget for all movies before 2000 ?",
            "sql": "select avg ( movie.budget_million ) , max ( movie.budget_million ) , min ( movie.budget_million ) where movie.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"
    },
    "interaction": [
        {
            "utterance": "HOW MANY DIRECTORE IN MOVIE TABLE ? List them .",
            "sql": "select distinct movie.director group_by movie.director"
        },
        {
            "utterance": "WHAT IS THE BUDGET OF THE BOONDOCK SAINTS ?",
            "sql": "select movie.budget_million where movie.title = value"
        },
        {
            "utterance": "WHAT IS THE BIGGEST BUDGET OF MOVIE TABLE ?",
            "sql": "select movie.budget_million order_by movie.budget_million desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of the medicine that can interact with two or more enzymes ?",
            "sql": "select medicine.id , medicine.name group_by medicine.id having count ( * ) > = value"
        },
        {
            "utterance": "How many enzymes can Aripiprazole interact with ?",
            "sql": "select count ( distinct medicine_enzyme_interaction.enzyme_id ) where medicine.name = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select count ( distinct medicine_enzyme_interaction.enzyme_id ) where medicine.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
    },
    "interaction": [
        {
            "utterance": "can you tell me all the enzymes that work in the cytosol ?",
            "sql": "select enzyme.name where enzyme.location = value"
        },
        {
            "utterance": "which of those enzymes is in the medicine with the name Aripiprazole ?",
            "sql": "select enzyme.name where medicine.name = value and enzyme.location = value"
        },
        {
            "utterance": "are there any other enzymes that are not in the cytosol that have the name Aripiprazole ?",
            "sql": "select enzyme.name where medicine.name = value and enzyme.location != value"
        },
        {
            "utterance": "and can you tell me what the interaction type is for ALA synthase ?",
            "sql": "select distinct ( medicine_enzyme_interaction.interaction_type ) where enzyme.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "What 're the names of the enzymes in the medicine `` Amisulpride '' ?",
            "sql": "select enzyme.name where medicine.name = value"
        },
        {
            "utterance": "What 're the names of the enzymes in the medicine `` Amisulpride '' that can serve as an inhibitor ?",
            "sql": "select enzyme.name where medicine.name = value and medicine_enzyme_interaction.interaction_type = value"
        },
        {
            "utterance": "What are the names of all enzymes that can serve as inhibitors ?",
            "sql": "select distinct ( enzyme.name ) where medicine_enzyme_interaction.interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list the different interaction types for me ?",
            "sql": "select distinct medicine_enzyme_interaction.interaction_type"
        },
        {
            "utterance": "Great ! Can you provide me with the name , location , and product for each enzyme that is associated with the `` inhibitor '' interaction type ?",
            "sql": "select distinct enzyme.name , enzyme.location , enzyme.product where medicine_enzyme_interaction.interaction_type = value"
        },
        {
            "utterance": "Great ! Can you update this list to show the chromosome associated with each enzyme on this list ?",
            "sql": "select distinct enzyme.name , enzyme.location , enzyme.product , enzyme.chromosome where medicine_enzyme_interaction.interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "what are the location of the enzymes ?",
            "sql": "select distinct enzyme.location"
        },
        {
            "utterance": "i mean chromosome value ? | You mean PBG deaminase ? | yes",
            "sql": "select enzyme.chromosome where enzyme.name = value"
        },
        {
            "utterance": "Find the product name of the ALA synthase ?",
            "sql": "select enzyme.product where enzyme.name = value"
        },
        {
            "utterance": "Find the enzyme name of medicine id 3 ?",
            "sql": "select distinct enzyme.name where medicine_enzyme_interaction.medicine_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.",
        "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'"
    },
    "interaction": [
        {
            "utterance": "What are medicine names and trade names ?",
            "sql": "select medicine.name , medicine.trade_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the interaction types between enzymes and medicine ?",
            "sql": "select distinct medicine_enzyme_interaction.interaction_type"
        },
        {
            "utterance": "What is the most common interaction type between enzymes and medicine ?",
            "sql": "select medicine_enzyme_interaction.interaction_type group_by medicine_enzyme_interaction.interaction_type order_by count ( medicine_enzyme_interaction.* ) desc limit_value"
        },
        {
            "utterance": "How many types are available ?",
            "sql": "select count ( distinct medicine_enzyme_interaction.interaction_type )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 7,
    "final": {
        "utterance": "How many enzymes do not have any interactions?",
        "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    "interaction": [
        {
            "utterance": "How many enzymes are there ?",
            "sql": "select count ( enzyme.* )"
        },
        {
            "utterance": "How many have interactions with medicines ?",
            "sql": "select count ( distinct medicine_enzyme_interaction.enzyme_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 8,
    "final": {
        "utterance": "Which enzyme names have the substring \"ALA\"?",
        "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
    },
    "interaction": [
        {
            "utterance": "Which enzyme names have the substring `` PBG '' ?",
            "sql": "select enzyme.name where enzyme.name like value"
        },
        {
            "utterance": "What is the product name of ALA synthase ?",
            "sql": "select enzyme.product where enzyme.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 9,
    "final": {
        "utterance": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
    },
    "interaction": [
        {
            "utterance": "Show me the medicine name which can interact as 'inhibitor ' ?",
            "sql": "select medicine.name where medicine_enzyme_interaction.interaction_type = value"
        },
        {
            "utterance": "Show me the medicine name which can interact as 'activitor ' with enzymes ?",
            "sql": "select medicine.name where medicine_enzyme_interaction.interaction_type = value"
        },
        {
            "utterance": "Show me the name of the medicines that are present in both the tables ?",
            "sql": "select medicine.name where medicine_enzyme_interaction.interaction_type = value intersect select medicine.name where medicine_enzyme_interaction.interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the interaction type of ALA synthase ?",
            "sql": "select medicine_enzyme_interaction.interaction_type where enzyme.name = value"
        },
        {
            "utterance": "Find the product of enzyme id 1 ?",
            "sql": "select enzyme.product where enzyme.id = value"
        },
        {
            "utterance": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator ' ?",
            "sql": "select enzyme.id , enzyme.name where medicine_enzyme_interaction.interaction_type = value group_by enzyme.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 11,
    "final": {
        "utterance": "How many enzymes do not have any interactions?",
        "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    "interaction": [
        {
            "utterance": "How many enzymes do not have any interactions ?",
            "sql": "select count ( enzyme.* ) where enzyme.id not in ( select medicine_enzyme_interaction.enzyme_id )"
        },
        {
            "utterance": "List enzyme names in alphabetical order",
            "sql": "select enzyme.name order_by enzyme.name"
        },
        {
            "utterance": "Give me enzymes with interaction type `` inhibitor ''",
            "sql": "select distinct enzyme.name where medicine_enzyme_interaction.interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id of users who are followed by Mary or Susan.",
        "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""
    },
    "interaction": [
        {
            "utterance": "hi . I would like to know how many users are followed by Mary ?",
            "sql": "select count ( follows.f1 ) where user_profiles.name = value"
        },
        {
            "utterance": "and how many are followed by Susan ?",
            "sql": "select count ( follows.f1 ) where user_profiles.name = value"
        },
        {
            "utterance": "can you tell me the Id of these users ?",
            "sql": "select follows.f1 where user_profiles.name = value"
        },
        {
            "utterance": "and the user id followed by Mary ?",
            "sql": "select follows.f1 where user_profiles.name = value or user_profiles.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the average number of followers for the users who had some tweets.",
        "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
    },
    "interaction": [
        {
            "utterance": "Which users had some tweets ?",
            "sql": "select user_profiles.name where user_profiles.uid in ( select tweets.uid )"
        },
        {
            "utterance": "Can you find me the average number of followers for these users ?",
            "sql": "select avg ( user_profiles.followers ) where user_profiles.uid in ( select tweets.uid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of 5 users followed by the largest number of other users.",
        "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "List the names of 5 users followed by the largest number of other users .",
            "sql": "select user_profiles.name order_by user_profiles.followers desc limit_value"
        },
        {
            "utterance": "What is the email and followers of Iron Man ?",
            "sql": "select user_profiles.email , user_profiles.followers where user_profiles.name = value"
        },
        {
            "utterance": "What name has the highest followers ?",
            "sql": "select user_profiles.name order_by user_profiles.followers desc limit_value"
        },
        {
            "utterance": "How many followers does Tyler Swift have ?",
            "sql": "select user_profiles.followers where user_profiles.name = value"
        },
        {
            "utterance": "What is the email and partition id of Tyler Swift ?",
            "sql": "select user_profiles.email , user_profiles.partitionid where user_profiles.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the maximum and total number of followers of all users.",
        "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
    },
    "interaction": [
        {
            "utterance": "Can you list the uids and names of all users ?",
            "sql": "select user_profiles.uid , user_profiles.name"
        },
        {
            "utterance": "Hmm , I want to know the number of followers of each user .",
            "sql": "select user_profiles.name , user_profiles.followers"
        },
        {
            "utterance": "What is the maximum number of followers of all users ?",
            "sql": "select max ( user_profiles.followers )"
        },
        {
            "utterance": "What is the total number of followers of all users ?",
            "sql": "select sum ( user_profiles.followers )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the average number of followers for the users who had some tweets.",
        "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
    },
    "interaction": [
        {
            "utterance": "how many tweets there",
            "sql": "select count ( tweets.* )"
        },
        {
            "utterance": "what is email id of Mary | Did you mean what is the email of Mary or uid or her ? | yes user profiles email id of mary",
            "sql": "select user_profiles.email where user_profiles.name = value"
        },
        {
            "utterance": "how many followers in Iron Man",
            "sql": "select user_profiles.followers where user_profiles.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of each user and number of tweets tweeted by each of them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"
    },
    "interaction": [
        {
            "utterance": "How many tweets in this table ?",
            "sql": "select count ( tweets.* )"
        },
        {
            "utterance": "How many user profiles in this table ?",
            "sql": "select count ( user_profiles.* )"
        },
        {
            "utterance": "What is the email id of Iron Man ?",
            "sql": "select user_profiles.email where user_profiles.name = value"
        },
        {
            "utterance": "What is the text tweet of Iron Man ?",
            "sql": "select tweets.text where user_profiles.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the id of users who are followed by Mary or Susan.",
        "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""
    },
    "interaction": [
        {
            "utterance": "How many users are followed by Mary ?",
            "sql": "select count ( * ) where user_profiles.name = value"
        },
        {
            "utterance": "What about by Susan ?",
            "sql": "select count ( * ) where user_profiles.name = value"
        },
        {
            "utterance": "What is the id for those users ? | Do you mean users followed by only Mary , or only Susan , or by either ? | I mean the users followed by either .",
            "sql": "select follows.f1 where user_profiles.name = value or user_profiles.name = value"
        },
        {
            "utterance": "What are the names of those users ?",
            "sql": "select user_profiles.uid , user_profiles.name where user_profiles.uid in ( select follows.f1 where user_profiles.name = value or user_profiles.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the user who has the largest number of followers.",
        "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the total number of followers for all users ?",
            "sql": "select sum ( user_profiles.followers )"
        },
        {
            "utterance": "What are the lowest number of followers ?",
            "sql": "select min ( user_profiles.followers )"
        },
        {
            "utterance": "Yes , please .",
            "sql": "select user_profiles.name where user_profiles.followers = ( select max ( user_profiles.followers ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the average number of followers for the users who do not have any tweet.",
        "sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
    },
    "interaction": [
        {
            "utterance": "Hi , I was wondering how many users do not have tweets ?",
            "sql": "select count ( user_profiles.* ) where user_profiles.uid not in ( select tweets.uid )"
        },
        {
            "utterance": "Great , what is the average number of followers for everyone in the data set ?",
            "sql": "select avg ( user_profiles.followers )"
        },
        {
            "utterance": "Okay , and what about the average followers for those who do have tweets ?",
            "sql": "select avg ( user_profiles.followers ) where user_profiles.uid in ( select tweets.uid )"
        },
        {
            "utterance": "And what was the average followers for those who do not have any tweets ?",
            "sql": "select avg ( user_profiles.followers ) where user_profiles.uid not in ( select tweets.uid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id of users who are followed by Mary and Susan.",
        "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\""
    },
    "interaction": [
        {
            "utterance": "what is the users ' name ?",
            "sql": "select user_profiles.name"
        },
        {
            "utterance": "which one has the most followers ?",
            "sql": "select user_profiles.name order_by user_profiles.followers desc limit_value"
        },
        {
            "utterance": "what is her email ?",
            "sql": "select user_profiles.email order_by user_profiles.followers desc limit_value"
        },
        {
            "utterance": "find the id of users who are followed by mary and susan .",
            "sql": "select follows.f1 where user_profiles.name = value intersect select follows.f1 where user_profiles.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and partition id for users who tweeted less than twice.",
        "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "What is the name of uid 1 ?",
            "sql": "select user_profiles.name where user_profiles.uid = value"
        },
        {
            "utterance": "How many followers does Mary have ?",
            "sql": "select user_profiles.followers where user_profiles.name = value"
        },
        {
            "utterance": "Find the name and partition id for users who tweeted less than twice ?",
            "sql": "select user_profiles.partitionid , user_profiles.name where user_profiles.uid = tweets.uid group_by tweets.uid having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the individuals in the table ?",
            "sql": "select user_profiles.name"
        },
        {
            "utterance": "How many followers does Celine Dion have ?",
            "sql": "select user_profiles.followers where user_profiles.name = value"
        },
        {
            "utterance": "How about Tyler Swift ?",
            "sql": "select user_profiles.followers where user_profiles.name = value"
        },
        {
            "utterance": "What is Tyler Swift 's email ?",
            "sql": "select user_profiles.email where user_profiles.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of each user and number of tweets tweeted by each of them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"
    },
    "interaction": [
        {
            "utterance": "show me the name of the users .",
            "sql": "select user_profiles.name"
        },
        {
            "utterance": "show me the tweets tweeted by them . | do you want to show all the info of the tweets ? | yes",
            "sql": "select *"
        },
        {
            "utterance": "show me the number of tweets of each user",
            "sql": "select user_profiles.name , count ( * ) group_by tweets.uid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Return the text of tweets about the topic 'intern'.",
        "sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    "interaction": [
        {
            "utterance": "How many tweets are on the topic intern",
            "sql": "select count ( tweets.* ) where tweets.text like value"
        },
        {
            "utterance": "which tweet has the newest creation date ?",
            "sql": "select tweets.* order_by tweets.createdate desc limit_value"
        },
        {
            "utterance": "what about the oldest tweet ?",
            "sql": "select tweets.* order_by tweets.createdate limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
    },
    "interaction": [
        {
            "utterance": "Find the email of the user whose name contains the word `` Swift ''",
            "sql": "select user_profiles.email where user_profiles.name like value"
        },
        {
            "utterance": "What is his name ?",
            "sql": "select user_profiles.name where user_profiles.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of users who have more than one tweet.",
        "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you show all user ids that have more than 1 tweet ?",
            "sql": "select user_profiles.uid group_by tweets.uid having count ( * ) > value"
        },
        {
            "utterance": "Thanks , can you show the names associated with those user ids ?",
            "sql": "select user_profiles.name group_by tweets.uid having count ( * ) > value"
        },
        {
            "utterance": "Can you list the names in alphabetical order from top to bottom ?",
            "sql": "select user_profiles.name group_by tweets.uid having count ( * ) > value order_by user_profiles.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is his tweeter account ? | can you give more details ? who is `` he '' | The user who tweeted more than once",
            "sql": "select * group_by tweets.uid having count ( * ) > value"
        },
        {
            "utterance": "What are his tweets ? | do you mean the text of tweets | Yes",
            "sql": "select user_profiles.name , tweets.text group_by tweets.uid having count ( * ) > value"
        },
        {
            "utterance": "How many tweets did Iron man tweet ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "What about Celine ?",
            "sql": "select count ( * )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of users who have more than one tweet.",
        "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show me all the users .",
            "sql": "select user_profiles.name"
        },
        {
            "utterance": "Which of these users have more than one tweet ?",
            "sql": "select user_profiles.name group_by tweets.uid having count ( * ) > value"
        },
        {
            "utterance": "Show me the number of tweets for each of these users .",
            "sql": "select user_profiles.name , count ( * ) group_by tweets.uid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the maximum and total number of followers of all users.",
        "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me how many users there are ?",
            "sql": "select count ( user_profiles.* )"
        },
        {
            "utterance": "Which user has the most followers ?",
            "sql": "select user_profiles.name order_by user_profiles.followers desc limit_value"
        },
        {
            "utterance": "And how many followers does Tyler have ? | Tyler Swift has 99999998 followers | That 's 99999998 followers out of how many total followers for all users ?",
            "sql": "select sum ( user_profiles.followers )"
        },
        {
            "utterance": "Can you please also provide the number of followers for the remaining users ?",
            "sql": "select user_profiles.followers where user_profiles.name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the nurse has the most appointments?",
        "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the nurse who has the most appointments ?",
            "sql": "select nurse.name group_by nurse.employeeid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is her employee ID ?",
            "sql": "select nurse.employeeid group_by nurse.employeeid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "List all nurses names in alphabetical order",
            "sql": "select nurse.name order_by nurse.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which department has the largest number of employees?",
        "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the departments ?",
            "sql": "select department.name"
        },
        {
            "utterance": "How many employees are in the General Medicine department ?",
            "sql": "select department.head where department.name = value"
        },
        {
            "utterance": "Please show which departments have greater than 4 employees",
            "sql": "select department.name where department.head > value"
        },
        {
            "utterance": "Which of these has the largest number of employees ?",
            "sql": "select department.name order_by department.head desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'"
    },
    "interaction": [
        {
            "utterance": "Find the name of Physicians who are affiliate with surgery or Psychiatry department .",
            "sql": "select physician.name where department.name = value or department.name = value"
        },
        {
            "utterance": "What is the Physician name of the following Employee ID ? tell me the SSN . | Sorry what employee IDs are you talking about ? | Sorry for my mistake . What is the Physician name of the following Employee ID 2 ? tell me the SSN .",
            "sql": "select physician.name , physician.ssn where physician.employeeid = value"
        },
        {
            "utterance": "What is the Physician name of the following Position Staff Internist ? tell me the SSN , and Employee ID , | Do you want the name , SSN , and employee ID ? | yes",
            "sql": "select physician.name , physician.ssn , physician.employeeid where physician.position = value"
        },
        {
            "utterance": "which department has most number of head ? tell me department ID ,",
            "sql": "select department.departmentid order_by department.head desc limit_value"
        },
        {
            "utterance": "which department has least number of head ? tell me department ID , And department name ?",
            "sql": "select department.departmentid , department.name order_by department.head limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the highest cost, lowest cost and average cost of procedures?",
        "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures"
    },
    "interaction": [
        {
            "utterance": "Which procedure has the highest cost ? | Do you mean the name of the procedure that has the highest cost ? | Yes . What is the name of the procedure that has the highest cost ?",
            "sql": "select procedures.name order_by procedures.cost desc limit_value"
        },
        {
            "utterance": "What is the name of the procedure that has the lowest cost ?",
            "sql": "select procedures.name order_by procedures.cost asc limit_value"
        },
        {
            "utterance": "What are the highest cost , lowest cost and average cost of procedures ?",
            "sql": "select max ( procedures.cost ) , min ( procedures.cost ) , avg ( procedures.cost )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 4,
    "final": {
        "utterance": "what is the name and position of the head whose department has least number of employees?",
        "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which department has the least number of employees ?",
            "sql": "select * group_by department.departmentid order_by count ( department.departmentid ) limit_value"
        },
        {
            "utterance": "What is the name of the department head of General Medicine ?",
            "sql": "select physician.name where department.name = value"
        },
        {
            "utterance": "Thank you ! What is Percival Cox 's position ?",
            "sql": "select physician.position where physician.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
    },
    "interaction": [
        {
            "utterance": "Could you please find all the procedures that cost more than 1000 ?",
            "sql": "select procedures.* where procedures.cost > value"
        },
        {
            "utterance": "Could you please find all the procedure that Jon Wen was trained in ?",
            "sql": "select * where physician.name = value"
        },
        {
            "utterance": "What are the names of the procedures that cost more than 1000 and are procedures John Wen was trained in ?",
            "sql": "select procedures.name where procedures.cost > value intersect select procedures.name where physician.name = value"
        },
        {
            "utterance": "When do all of John Wen 's certifications expire ?",
            "sql": "select trained_in.certificationexpires where physician.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\""
    },
    "interaction": [
        {
            "utterance": "What are the names and positions of all physicians who prescribed brand X medications ?",
            "sql": "select distinct physician.name , physician.position where medication.brand = value"
        },
        {
            "utterance": "What were the dates he prescribed those medications ?",
            "sql": "select distinct prescribes.date where medication.brand = value"
        },
        {
            "utterance": "What was the dose of that medication ?",
            "sql": "select prescribes.dose where medication.brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the physician who prescribed the highest dose?",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list the highest dose prescribed for any medication ? | What information do you want for the prescriptions ? Do you want all information or just the dose amount ? | I wanted the name of the physician that prescribed the highest dose , but I believe you 've already provided that information ?",
            "sql": "select physician.name order_by prescribes.dose desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of patients who are not using the medication of Procrastin-X.",
        "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )"
    },
    "interaction": [
        {
            "utterance": "What is is the number of patients who are not using Procrastin-X ?",
            "sql": "select count ( patient.* ) where patient.ssn not in ( select prescribes.patient where medication.name = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select patient.name where patient.ssn not in ( select prescribes.patient where medication.name = value )"
        },
        {
            "utterance": "And what is their address ?",
            "sql": "select patient.address where patient.ssn not in ( select prescribes.patient where medication.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the employee id of the head whose department has the least number of employees?",
        "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which department has the least number of employees ?",
            "sql": "select department.* group_by department.departmentid order_by count ( department.* ) limit_value"
        },
        {
            "utterance": "What is the head of that department ?",
            "sql": "select department.head group_by department.departmentid order_by count ( department.departmentid ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which department has the largest number of employees?",
        "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what are the departments ? | Do you want the names of all department ? | yes",
            "sql": "select department.name"
        },
        {
            "utterance": "which department has the most employees ?",
            "sql": "select department.name group_by department.departmentid order_by count ( department.departmentid ) desc limit_value"
        },
        {
            "utterance": "how many employees does Psychiatry have ?",
            "sql": "select department.head where department.name = value"
        },
        {
            "utterance": "how many employees does surgery have ?",
            "sql": "select department.head where department.name = value"
        },
        {
            "utterance": "what about general medicine ?",
            "sql": "select department.head where department.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111"
    },
    "interaction": [
        {
            "utterance": "find the names of all patients who have an undergoing treatment and are staying in room 111",
            "sql": "select distinct patient.name where stay.room = value"
        },
        {
            "utterance": "find the name of the patient who have an insurance id 68476213",
            "sql": "select patient.name where patient.insuranceid = value"
        },
        {
            "utterance": "find the name of physician who have seen the patient 100000001",
            "sql": "select distinct undergoes.physician where undergoes.patient = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the patient who most recently stayed in room 111.",
        "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many patients in this table ?",
            "sql": "select count ( stay.patient )"
        },
        {
            "utterance": "Find the patient who most recently stayed in room 112 ?",
            "sql": "select stay.patient where stay.room = value order_by stay.staystart desc limit_value"
        },
        {
            "utterance": "How many rooms in this table ?",
            "sql": "select count ( distinct stay.room )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of medication used on the patient who stays in room 111?",
        "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"
    },
    "interaction": [
        {
            "utterance": "How many patients are there ?",
            "sql": "select count ( patient.* )"
        },
        {
            "utterance": "Can you show me the name of the patient who stays in room 111 ?",
            "sql": "select patient.name where stay.room = value"
        },
        {
            "utterance": "Can you show me the insurance id of the patient who stays in room 111 ?",
            "sql": "select patient.insuranceid where stay.room = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the physician who was trained in the most expensive procedure?",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most expensive procedure ? | Do you mean the name of the procedure with the highest cost ? | Yes .",
            "sql": "select procedures.name order_by procedures.cost desc limit_value"
        },
        {
            "utterance": "How many physicians are trained in Complete Walletectomy ?",
            "sql": "select count ( * ) where procedures.name = value"
        },
        {
            "utterance": "What is that physician 's name ?",
            "sql": "select physician.name where procedures.name = value"
        },
        {
            "utterance": "When were they trained in that procedure ? | Do you mean the certification date and the expired date of the procedure named Complete Walletectomy ? | The certification date .",
            "sql": "select trained_in.certificationdate where procedures.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 15,
    "final": {
        "utterance": "what are name and phone number of patients who had more than one appointment?",
        "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the patients who had more than one appointment ?",
            "sql": "select patient.name group_by appointment.patient having count ( * ) > value"
        },
        {
            "utterance": "What are their phone numbers , please ?",
            "sql": "select patient.phone group_by appointment.patient having count ( * ) > value"
        },
        {
            "utterance": "What are the pcp 's of those patients ?",
            "sql": "select patient.pcp group_by appointment.patient having count ( * ) > value"
        },
        {
            "utterance": "What are the names of the patients who only had one appointment ?",
            "sql": "select patient.name group_by appointment.patient having count ( * ) = value"
        },
        {
            "utterance": "When did his appointment start and end ?",
            "sql": "select appointment.start , appointment.end group_by appointment.patient having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the number of rooms for different block code?",
        "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"
    },
    "interaction": [
        {
            "utterance": "What are the number of rooms for block code 1 ?",
            "sql": "select count ( * ) where block.blockcode = value"
        },
        {
            "utterance": "What are the room numbers for Block Code 1 ?",
            "sql": "select room.roomnumber where block.blockcode = value"
        },
        {
            "utterance": "What is the block code for room 201 ?",
            "sql": "select block.blockcode where room.roomnumber = value"
        },
        {
            "utterance": "What is the room type for room 101 ?",
            "sql": "select room.roomtype where room.roomnumber = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of procedures which physician John Wen was trained in.",
        "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
    },
    "interaction": [
        {
            "utterance": "how many physicians are presented on the table",
            "sql": "select count ( physician.* )"
        },
        {
            "utterance": "show all the procedures on the table | Did you want all the procedure names ? | exactly",
            "sql": "select procedures.name"
        },
        {
            "utterance": "what is the position of John Dorian",
            "sql": "select physician.position where physician.name = value"
        },
        {
            "utterance": "what is the cost of Reverse Rhinopodoplasty",
            "sql": "select procedures.cost where procedures.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 18,
    "final": {
        "utterance": "List the names of departments where some physicians are primarily affiliated with.",
        "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"
    },
    "interaction": [
        {
            "utterance": "what departments are some physicians primarily affiliated with ?",
            "sql": "select distinct department.name where affiliated_with.primaryaffiliation = value"
        },
        {
            "utterance": "what is the department id for surgery ?",
            "sql": "select department.departmentid where department.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the number of rooms for different block code?",
        "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"
    },
    "interaction": [
        {
            "utterance": "Can you show me how many rooms are there in total ?",
            "sql": "select count ( room.* )"
        },
        {
            "utterance": "How about the total number of block codes ?",
            "sql": "select count ( distinct room.blockcode )"
        },
        {
            "utterance": "Can you list them by the number of rooms in decending order ? | Do you mean roomnumber ? | Yes",
            "sql": "select room.blockcode order_by room.roomnumber desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name of medication used on the patient who stays in room 111?",
        "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"
    },
    "interaction": [
        {
            "utterance": "I 'm looking for a patient . | What feature do you want ? | I want to know their room number .",
            "sql": "select stay.room"
        },
        {
            "utterance": "What is the patient 's name in room 111 ?",
            "sql": "select patient.name where stay.patient = patient.ssn and stay.room = value"
        },
        {
            "utterance": "What is the name and dose of the medication ?",
            "sql": "select distinct medication.name , prescribes.dose where patient.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid"
    },
    "interaction": [
        {
            "utterance": "I would like to know the names of all the physicians",
            "sql": "select physician.name"
        },
        {
            "utterance": "wonderful , looks like nine total . approximately how many patients do each of them take care of ? | Would you like to know average patients corresponding to each physician ? | if you could please share the average total patient per physician the would be helpful .",
            "sql": "select physician.name , count ( * ) group_by physician.employeeid"
        },
        {
            "utterance": "which of the physicians have zero patients ?",
            "sql": "select physician.name where physician.name not in ( select physician.name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 22,
    "final": {
        "utterance": "what are name and phone number of patients who had more than one appointment?",
        "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hello ! How are you ! Can you provide me with a list of all patient names ?",
            "sql": "select patient.name"
        },
        {
            "utterance": "Thank you so much ! Can you filter this list to show only the patients who had more than one appointment ?",
            "sql": "select patient.name group_by appointment.patient having count ( * ) > value"
        },
        {
            "utterance": "Great ! Can you update this list to include the phone number of each of these patients ?",
            "sql": "select patient.name , patient.phone group_by appointment.patient having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the name of the patient who made the most recent appointment?",
        "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What was the start date of the most recent appointment ?",
            "sql": "select appointment.start order_by appointment.start asc limit_value"
        },
        {
            "utterance": "What is the patient associated with the appointment on 2008-04-24 10:00 ?",
            "sql": "select appointment.patient where appointment.start = value"
        },
        {
            "utterance": "Can you list the patient IDs associated with appointment IDs 93216548 and 86213939 ?",
            "sql": "select appointment.patient where appointment.appointmentid = value or appointment.appointmentid = value"
        },
        {
            "utterance": "Can you list the names associated with those patient ID 100000004 and 100000002 ?",
            "sql": "select distinct ( patient.name ) where appointment.patient = value or appointment.patient = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the name of the patient who made the most recent appointment?",
        "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "When was the most recent appointment ? | do you want the most recent start or end of appointment | Start",
            "sql": "select appointment.appointmentid order_by appointment.start desc limit_value"
        },
        {
            "utterance": "What is the patient id of that appointment ?",
            "sql": "select appointment.patient order_by appointment.start desc limit_value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select patient.name order_by appointment.start desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the names of the physician who prescribed the highest dose?",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the physicians ?",
            "sql": "select physician.name"
        },
        {
            "utterance": "Show me the ssn of the physician named John Dorian ?",
            "sql": "select physician.ssn where physician.name = value"
        },
        {
            "utterance": "Show me the name of the physician with employee id 2 ?",
            "sql": "select physician.name where physician.employeeid = value"
        },
        {
            "utterance": "Show me the names of the physician who prescribed the highest dose ?",
            "sql": "select physician.name order_by prescribes.dose desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of physicians whose position title contains the word 'senior'.",
        "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
    },
    "interaction": [
        {
            "utterance": "How many physicians are there in total ?",
            "sql": "select count ( physician.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select physician.name"
        },
        {
            "utterance": "Which of their position titles contain the word senior in it ?",
            "sql": "select physician.position where physician.position like value"
        },
        {
            "utterance": "What is the name of that physician who has the Senior Attending Physician title ?",
            "sql": "select physician.name where physician.position like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the names of procedures which physician John Wen was trained in.",
        "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
    },
    "interaction": [
        {
            "utterance": "What procedures is John Wen trained in ? | Do you mean the name of the procedure that John Wen is trained in ? | Yes .",
            "sql": "select procedures.name where physician.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the id of the appointment with the most recent start date?",
        "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id of the appointment with the most recent start date ?",
            "sql": "select appointment.appointmentid order_by appointment.start desc limit_value"
        },
        {
            "utterance": "What was the end time of that appointment ?",
            "sql": "select appointment.end order_by appointment.start desc limit_value"
        },
        {
            "utterance": "Who was the prep nurse of that appointment ?",
            "sql": "select appointment.prepnurse order_by appointment.start desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the patient who has the most recent undergoing treatment?",
        "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the patient order by the date they underwent treatment . Recent first .",
            "sql": "select undergoes.patient order_by undergoes.dateundergoes desc"
        },
        {
            "utterance": "Only show the first result .",
            "sql": "select undergoes.patient order_by undergoes.dateundergoes desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 0,
    "final": {
        "utterance": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list all the unique fault log entry ids ?",
            "sql": "select distinct fault_log.fault_log_entry_id"
        },
        {
            "utterance": "Can you count the number of unique part fault ids that belong to each unique fault log entry id , and then add those values to the table ?",
            "sql": "select fault_log_parts.fault_log_entry_id , count ( fault_log_parts.* ) group_by fault_log_parts.fault_log_entry_id"
        },
        {
            "utterance": "Amazing , can you display only the entry with a fault log id of 1 as well as the description and record time for that entry with a fault log id of 1 ?",
            "sql": "select count ( * ) , * , fault_log.fault_description , fault_log.fault_log_entry_datetime where fault_log.fault_log_entry_id = value group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 1,
    "final": {
        "utterance": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which engineer made the least number of visits ? | Here are the id , first , and last names of the engineer who has the least number of visits . | how many visits did each engineer have ?",
            "sql": "select count ( * ) , maintenance_engineers.engineer_id group_by maintenance_engineers.engineer_id"
        },
        {
            "utterance": "can you list the engineer id , first name , and last name of the engineer who had the least number of visits ?",
            "sql": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name , count ( * ) group_by maintenance_engineers.engineer_id order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 2,
    "final": {
        "utterance": "Which kind of part has the least number of faults? List the part name.",
        "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which part has the least faults ?",
            "sql": "select parts.part_name group_by parts.part_name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How many faults does the middle have ?",
            "sql": "select parts.part_name , count ( * ) where parts.part_name = value"
        },
        {
            "utterance": "What faults does the middle have ?",
            "sql": "select part_faults.fault_short_name where part_faults.part_id in ( select part_faults.part_id group_by parts.part_name order_by count ( part_faults.* ) asc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 3,
    "final": {
        "utterance": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "sql": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the skill code for skill id 1 , 2 and 3 ?",
            "sql": "select skills.skill_id , skills.skill_code where skills.skill_id = value or skills.skill_id = value or skills.skill_id = value"
        },
        {
            "utterance": "How many ids are in part_fault_id ... Tell me total number",
            "sql": "select count ( distinct skills_required_to_fix.part_fault_id )"
        },
        {
            "utterance": "What is the skill description for skill id 3 ?",
            "sql": "select skills.skill_description where skills.skill_id = value"
        },
        {
            "utterance": "Which skill is used in fixing the most number of faults ? List the skill id and description",
            "sql": "select skills.skill_id , skills.skill_description group_by skills.skill_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 4,
    "final": {
        "utterance": "Which parts have more than 2 faults? Show the part name and id.",
        "sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many parts have more than 2 faults ?",
            "sql": "select count ( * ) ( select parts.part_name , parts.part_id group_by parts.part_id having count ( * ) > value )"
        },
        {
            "utterance": "What are the parts with more than 2 faults ? | Here are the names of the parts with more than 2 faults | What are the name 's and id 's of the parts with more than 2 faults ?",
            "sql": "select parts.part_name , parts.part_id group_by parts.part_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 5,
    "final": {
        "utterance": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name"
    },
    "interaction": [
        {
            "utterance": "what is the fault status of engineer visit id 1 ?",
            "sql": "select engineer_visits.fault_status where engineer_visits.engineer_visit_id = value"
        },
        {
            "utterance": "what is fault status of engineer id 8 ?",
            "sql": "select engineer_visits.fault_status where engineer_visits.engineer_id = value"
        },
        {
            "utterance": "what about the other visit details of engineer id 8 ?",
            "sql": "select engineer_visits.other_visit_details where engineer_visits.engineer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 6,
    "final": {
        "utterance": "Which gender makes up the majority of the staff?",
        "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which gender makes up the majority of the staff ?",
            "sql": "select staff.gender group_by staff.gender order_by count ( staff.* ) desc limit_value"
        },
        {
            "utterance": "how many staff are gender 1 ?",
            "sql": "select count ( staff.* ) where staff.gender = value"
        },
        {
            "utterance": "how many staff are not gender 1 ?",
            "sql": "select count ( staff.* ) where staff.gender != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 7,
    "final": {
        "utterance": "Which assets did not incur any fault log? List the asset model.",
        "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)"
    },
    "interaction": [
        {
            "utterance": "Can you list the asset ids , the fault log entry ids and the fault descriptions ?",
            "sql": "select fault_log.asset_id , fault_log.fault_log_entry_id , fault_log.fault_description"
        },
        {
            "utterance": "Hmm , I want to know the asset ids that did not incur any fault log .",
            "sql": "select assets.asset_id where assets.asset_id not in ( select fault_log.asset_id )"
        },
        {
            "utterance": "Please just list the asset model of those assets .",
            "sql": "select assets.asset_model where assets.asset_id not in ( select fault_log.asset_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 8,
    "final": {
        "utterance": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many fault logs are there in total ?",
            "sql": "select count ( fault_log.fault_log_entry_id )"
        },
        {
            "utterance": "How many of those fault logs had faulty parts ?",
            "sql": "select count ( fault_log.* ) ( select fault_log.fault_log_entry_id where fault_log.fault_log_entry_id in ( select fault_log_parts.fault_log_entry_id ) )"
        },
        {
            "utterance": "What was the fault log ID with the least number of faulty parts ?",
            "sql": "select fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "What was its description ?",
            "sql": "select fault_log.fault_log_entry_id , fault_log.fault_description group_by fault_log.fault_log_entry_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "What was the fault log ID with the most number of faulty parts ?",
            "sql": "select fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What was its description ?",
            "sql": "select fault_log.fault_log_entry_id , fault_log.fault_description group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about the record time ?",
            "sql": "select fault_log.fault_log_entry_id , fault_log.fault_description , fault_log.fault_log_entry_datetime group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 9,
    "final": {
        "utterance": "List all every engineer's first name, last name, details and coresponding skill description.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
    },
    "interaction": [
        {
            "utterance": "What are the engineers first names ? | Do you mean the first name of all the engineers ? | Yes please",
            "sql": "select maintenance_engineers.first_name"
        },
        {
            "utterance": "I want to know all the engineers corresponding skill description ? | Do you mean the corresponding skill description for all the engineers ? | Yes please",
            "sql": "select skills.skill_description"
        },
        {
            "utterance": "What are the details for all the engineers ? | Do you mean the other details for all the engineers ? | Yes please",
            "sql": "select maintenance_engineers.other_details"
        },
        {
            "utterance": "Lastly , i will like to know the last name of all the engineers ?",
            "sql": "select maintenance_engineers.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 10,
    "final": {
        "utterance": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show ID and first and last name of Engineer who has visited the most times .",
            "sql": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name group_by maintenance_engineers.engineer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the fault status of Engineer with the first name Etha ?",
            "sql": "select engineer_visits.fault_status where maintenance_engineers.first_name = value"
        },
        {
            "utterance": "What is the visit start DateTime of Engineer with the first name Etha ?",
            "sql": "select engineer_visits.visit_start_datetime where maintenance_engineers.first_name = value"
        },
        {
            "utterance": "What is the visit end datetime of Engineer with the first name Etha ?",
            "sql": "select engineer_visits.visit_end_datetime where maintenance_engineers.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 11,
    "final": {
        "utterance": "When was the first asset acquired?",
        "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What assets have been aquired ? | What kind of information about the assets do you want me to return ? | Can you tell me the date each asset was aquired ?",
            "sql": "select assets.asset_acquired_date"
        },
        {
            "utterance": "Now i would like to know what the earliest date is ?",
            "sql": "select assets.asset_acquired_date order_by assets.asset_acquired_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 12,
    "final": {
        "utterance": "Which part has the least chargeable amount? List the part id and amount.",
        "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the chargeable amount for part id 1 ?",
            "sql": "select parts.chargeable_amount where parts.part_id = value"
        },
        {
            "utterance": "Tell me the part name of the part id 3 ?",
            "sql": "select parts.part_name where parts.part_id = value"
        },
        {
            "utterance": "Tell me the part name of the part id 2 ?",
            "sql": "select parts.part_name where parts.part_id = value"
        },
        {
            "utterance": "Which part has the least chargeable amount ? List the part id and amount .",
            "sql": "select parts.part_id , parts.chargeable_amount order_by parts.chargeable_amount asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 13,
    "final": {
        "utterance": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "sql": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many engineer visits are required at most for a single fault log ? List the number and the log entry id .",
            "sql": "select count ( * ) , fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the engineer visit id of that fault log entry id ?",
            "sql": "select engineer_visits.engineer_visit_id where engineer_visits.fault_log_entry_id = ( select fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "What is the contact staff id for that ?",
            "sql": "select engineer_visits.contact_staff_id where engineer_visits.fault_log_entry_id = ( select fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "What is the fault status of that ?",
            "sql": "select engineer_visits.fault_status where engineer_visits.fault_log_entry_id = ( select fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "What 's the fault description for that ?",
            "sql": "select fault_log.fault_description group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Tell me what the other fault details for that are , please ?",
            "sql": "select fault_log.other_fault_details group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 14,
    "final": {
        "utterance": "How many assets does each third party company supply? List the count and the company id.",
        "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id"
    },
    "interaction": [
        {
            "utterance": "How many assets does each third party company supply ? | Here is the result table of third-party companies and the number of ASSETS they held . For EXAMPLE , COMPANY 1 HELD 1 ASSET . | How many total assets are there ?",
            "sql": "select count ( assets.* )"
        },
        {
            "utterance": "How many third party companies are there ?",
            "sql": "select count ( third_party_companies.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 15,
    "final": {
        "utterance": "Which part fault requires the most number of skills to fix? List part id and name.",
        "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest number of skills needed to fix a part fault ? | what did you want to get about the highest number of skills needed to fix a part fault | What is the name of the part that requires the most amount of skills to fix ?",
            "sql": "select parts.part_name group_by parts.part_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many skills does it need ?",
            "sql": "select count ( * ) group_by parts.part_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 16,
    "final": {
        "utterance": "How many assets can each parts be used in? List the part name and the number.",
        "sql": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name"
    },
    "interaction": [
        {
            "utterance": "How many assets can each part be used in ? | Here is the result table of the part names and the number of assets that each of them can use . For example , the middle part can use 5 assets . | what is the part ID 's for these ?",
            "sql": "select parts.part_id group_by parts.part_name"
        },
        {
            "utterance": "and the chargeable amount for these ?",
            "sql": "select parts.chargeable_amount group_by parts.part_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 17,
    "final": {
        "utterance": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "How many assets have fault logs ?",
            "sql": "select count ( * ) ( select * group_by assets.asset_id having count ( * ) > = value )"
        },
        {
            "utterance": "How many of those 9 assets have 2 parts ?",
            "sql": "select count ( * ) ( select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) = value intersect select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) > = value )"
        },
        {
            "utterance": "Out of those 2 which has less than 2 fault logs ?",
            "sql": "select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) = value intersect select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 18,
    "final": {
        "utterance": "Which part has the least chargeable amount? List the part id and amount.",
        "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi ! Can you show me a list of all of the product part names ?",
            "sql": "select parts.part_name"
        },
        {
            "utterance": "Can you now show me the list of all part IDs ?",
            "sql": "select parts.part_id"
        },
        {
            "utterance": "Thanks ! Can you please list the part id and the corresponding price of the part with the lowest chargeable amount ? | We do n't have price . Do you mean want the part ids and corresponding chargeable amount of the part with the lowest chargeable amount ? | I 'm sorry , yes that is what I meant . The one with the lower chargeable amount !",
            "sql": "select parts.part_id , parts.chargeable_amount order_by parts.chargeable_amount asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 19,
    "final": {
        "utterance": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi ! Which engineer has visited the most times ? | What information about the engineer you want ? | Which engineer id has visited the most ?",
            "sql": "select maintenance_engineers.engineer_id group_by maintenance_engineers.engineer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is that engineer 's full name , please ?",
            "sql": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name group_by maintenance_engineers.engineer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are all of her visit start datetimes and visit end datetimes ?",
            "sql": "select engineer_visits.visit_start_datetime , engineer_visits.visit_end_datetime where engineer_visits.engineer_id = ( select maintenance_engineers.engineer_id group_by maintenance_engineers.engineer_id order_by count ( engineer_visits.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 20,
    "final": {
        "utterance": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "can you show me companies name ?",
            "sql": "select third_party_companies.company_name"
        },
        {
            "utterance": "can you show me Dooley and Sons 's address ?",
            "sql": "select third_party_companies.company_address where third_party_companies.company_name = value"
        },
        {
            "utterance": "what is the engineer 's first name that starting with 'E ' ?",
            "sql": "select maintenance_engineers.first_name where maintenance_engineers.first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 21,
    "final": {
        "utterance": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"
    },
    "interaction": [
        {
            "utterance": "What are all the contract ids",
            "sql": "select maintenance_contracts.maintenance_contract_id"
        },
        {
            "utterance": "Can I also get the numbers of assets for each of these contracts",
            "sql": "select maintenance_contracts.maintenance_contract_id , assets.asset_id"
        },
        {
            "utterance": "What I meant was the asset counts for each of these contracts",
            "sql": "select count ( * ) , maintenance_contracts.maintenance_contract_id group_by maintenance_contracts.maintenance_contract_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 22,
    "final": {
        "utterance": "Which company started the earliest the maintenance contract? Show the company name.",
        "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the date of the earliest contract ?",
            "sql": "select maintenance_contracts.contract_start_date order_by maintenance_contracts.contract_start_date asc limit_value"
        },
        {
            "utterance": "and which contract id is associated with that contract",
            "sql": "select maintenance_contracts.maintenance_contract_id order_by maintenance_contracts.contract_start_date asc limit_value"
        },
        {
            "utterance": "and what is the company name associated with ID 9 ?",
            "sql": "select third_party_companies.company_name where maintenance_contracts.maintenance_contract_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 23,
    "final": {
        "utterance": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "Which assets have 2 parts and have less than 2 fault logs ? List the asset id and detail .",
            "sql": "select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) = value intersect select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) < value"
        },
        {
            "utterance": "What is the asset make and asset model for asset id 2 ?",
            "sql": "select assets.asset_make , assets.asset_model where assets.asset_id = value"
        },
        {
            "utterance": "What are the asset acquired date and asset disposed date for asset id 2 ?",
            "sql": "select assets.asset_acquired_date , assets.asset_disposed_date where assets.asset_id = value"
        },
        {
            "utterance": "How many other asset details are there labeled in Bad condition ?",
            "sql": "select count ( assets.* ) where assets.other_asset_details = value"
        },
        {
            "utterance": "What is the maintenance contract id and supplier company id for asset id 2 ?",
            "sql": "select assets.maintenance_contract_id , assets.supplier_company_id where assets.asset_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 24,
    "final": {
        "utterance": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "sql": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
    },
    "interaction": [
        {
            "utterance": "how many skills are presented on the table",
            "sql": "select count ( skills.* )"
        },
        {
            "utterance": "show all the skill descriptions .",
            "sql": "select skills.skill_description"
        },
        {
            "utterance": "list out the fault short names",
            "sql": "select part_faults.fault_short_name"
        },
        {
            "utterance": "what is the skill code of Mechanical",
            "sql": "select skills.skill_code where skills.skill_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 25,
    "final": {
        "utterance": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "sql": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id"
    },
    "interaction": [
        {
            "utterance": "Have many engineers that were contacted by each manager ?",
            "sql": "select count ( maintenance_engineers.first_name )"
        },
        {
            "utterance": "Thank you . Can you please tell me the name of the engineer that was contacted by each manager ? | Of course . First or Last name ? | First and Last name , please .",
            "sql": "select maintenance_engineers.first_name , maintenance_engineers.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 26,
    "final": {
        "utterance": "Which gender makes up the majority of the staff?",
        "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many people are in the staff ?",
            "sql": "select count ( staff.* )"
        },
        {
            "utterance": "Great , what is the most common name ?",
            "sql": "select staff.staff_name group_by staff.staff_name order_by count ( staff.* ) desc limit_value"
        },
        {
            "utterance": "What about gender ?",
            "sql": "select staff.gender group_by staff.gender order_by count ( staff.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of tracks which are in both Movies and music playlists.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "How many trucks are in both movies and musical playlists . | Did you mean to ask for the number of tracks in both movies and music playlists ? | yes",
            "sql": "select count ( * ) ( select tracks.name where playlists.name = value intersect select tracks.name where playlists.name = value )"
        },
        {
            "utterance": "who composed For Those About To Rock ( We Salute You ) ?",
            "sql": "select tracks.composer where tracks.name = value"
        },
        {
            "utterance": "How long is it ?",
            "sql": "select tracks.milliseconds where tracks.name = value"
        },
        {
            "utterance": "Who wrote Fast As a Shark",
            "sql": "select tracks.composer where tracks.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of all tracks in the playlists of Movies.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    "interaction": [
        {
            "utterance": "What are the names of the playlists ? Available is defined as able to be used or obtained ; at someone 's disposal",
            "sql": "select playlists.name"
        },
        {
            "utterance": "How many tracks are in the playlist `` movies '' ?",
            "sql": "select count ( * ) where playlists.name = value"
        },
        {
            "utterance": "Please list the name ( s ) of the tracks in the playlist `` Movies '' .",
            "sql": "select tracks.name where playlists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many customers does Steve Johnson support?",
        "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the employees ? | Do you want first name or last name ? | First name please .",
            "sql": "select employees.first_name"
        },
        {
            "utterance": "How about their last names ?",
            "sql": "select employees.last_name"
        },
        {
            "utterance": "How many last names start with the letter J ?",
            "sql": "select count ( employees.* ) where employees.last_name like value"
        },
        {
            "utterance": "What is that person 's first name ?",
            "sql": "select employees.first_name where employees.last_name like value"
        },
        {
            "utterance": "Who are the customers that Steve supports ? | This is the information for all the customers that Steve Johnson supports | How many customers does he support ?",
            "sql": "select count ( * ) where employees.first_name = value and employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of tracks which are in both Movies and music playlists.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "How many tracks in this table ?",
            "sql": "select count ( tracks.* )"
        },
        {
            "utterance": "How many playlists in this table ?",
            "sql": "select count ( playlists.id )"
        },
        {
            "utterance": "Find average unit price ?",
            "sql": "select avg ( tracks.unit_price )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the customers first and last name of 10 least expensive invoices.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "Display the 10 least expensive invoices | Would you like a list of the id 's of these invoices ? | No .",
            "sql": "select invoices.invoice_date order_by invoices.total limit_value"
        },
        {
            "utterance": "Please list the first and last names of each customer on this list .",
            "sql": "select customers.first_name , customers.last_name order_by invoices.total limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List title of albums have the number of tracks greater than 10.",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
    },
    "interaction": [
        {
            "utterance": "May I know the album names and ids , and the number of tracks they have ?",
            "sql": "select albums.title , albums.id , count ( albums.id ) group_by albums.id"
        },
        {
            "utterance": "Hmm , can you list the album names and the artist ids ?",
            "sql": "select albums.title , albums.artist_id"
        },
        {
            "utterance": "Can you also list the title of albums that have the number of tracks greater than 10 ?",
            "sql": "select albums.title group_by albums.id having count ( albums.id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What country does Roberto Almeida live?",
        "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    "interaction": [
        {
            "utterance": "How many countries are our customers located in ?",
            "sql": "select count ( distinct customers.country )"
        },
        {
            "utterance": "How many customers do we have with the last name Almeida ?",
            "sql": "select count ( customers.* ) where customers.last_name = value"
        },
        {
            "utterance": "Show me the country where Roberto Almeida is located",
            "sql": "select customers.country where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is title of album which track Balls to the Wall belongs to?",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"
    },
    "interaction": [
        {
            "utterance": "What is title of album which track Balls to the Wall belong to ?",
            "sql": "select albums.title where tracks.name = value"
        },
        {
            "utterance": "Hmmm . What is title of album which track Fast as a Shark belong to ?",
            "sql": "select albums.title where tracks.name = value"
        },
        {
            "utterance": "What is title of album which track For Those About To Rock ( We Salute You ) belong to ?",
            "sql": "select albums.title where tracks.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Eduardo Martins is a customer at which company?",
        "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
    },
    "interaction": [
        {
            "utterance": "Check whether Mr. Eduardo Martin is a customer or not ? | Great . Which is the first name ? | Eduardo .",
            "sql": "select customers.* where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Of which company is Mr. Eduardo Martins a customer ?",
            "sql": "select customers.company where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "In which city is the company 'Woodstock Discos ' located ?",
            "sql": "select customers.city where customers.company = value"
        },
        {
            "utterance": "what is the contact number of 'Woodstock discos ' company ? | The phone of the customer of the company 'Woodstock Discos ' is +55 ( 11 ) 3033-5446 . | What is the contact number of Mr. Eduardo Martins ?",
            "sql": "select customers.phone where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the title, phone and hire date of Nancy Edwards?",
        "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "What is the title , phone and hire date of Nancy Edwards ?",
            "sql": "select employees.title , employees.phone , employees.hire_date where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "what is the total number of employees ?",
            "sql": "select count ( employees.* )"
        },
        {
            "utterance": "what is the first name of gentral manager ? | I can not find `` gentral manager '' in the table . Did you mean general manager ? | yes that is the general manager ?",
            "sql": "select employees.first_name where employees.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many employees have the job title Manager ?",
            "sql": "select count ( employees.* ) where employees.title like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 11,
    "final": {
        "utterance": "find the full name of employees who report to Nancy Edwards?",
        "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "How many employees report to Nancy Edwards ?",
            "sql": "select count ( employees.* ) where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "What are their names ? | The table shows the first and last names of the employees who report to Nancy Edward . | Who does not report to Nancy Edwards ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name != value and employees.last_name != value"
        },
        {
            "utterance": "Who does Nancy Edwards report to ? | The first and last names of the employee whom Nancy Edwards reports to is Andrew Adams . | Who does Andrew Adams report to ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Who else reports to Andrew Adams ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name = value and employees.last_name = value and employees.first_name != value and employees.last_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 12,
    "final": {
        "utterance": "List total amount of  invoice from Chicago, IL.",
        "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    "interaction": [
        {
            "utterance": "Show the billing address with the highest amount of invoice ?",
            "sql": "select invoices.billing_address order_by invoices.total desc limit_value"
        },
        {
            "utterance": "Show the total amount of invoice from chicago , IL ?",
            "sql": "select sum ( invoices.total ) where invoices.billing_city = value and invoices.billing_state = value"
        },
        {
            "utterance": "Show the billing country with the total amount of invoice 3.96 ?",
            "sql": "select invoices.billing_country where invoices.total = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "what is the billing address of germany",
            "sql": "select invoices.billing_address where invoices.billing_country = value"
        },
        {
            "utterance": "what is the invoice date of customer id 2",
            "sql": "select invoices.invoice_date where invoices.customer_id = value"
        },
        {
            "utterance": "what is the billing city of norway",
            "sql": "select distinct ( invoices.billing_city ) where invoices.billing_country = value"
        },
        {
            "utterance": "what is the last name of state sp",
            "sql": "select customers.last_name where customers.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 14,
    "final": {
        "utterance": "How many orders does Lucas Mancini has?",
        "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "what are all the companies on the table | Do you mean the companies that customers work ? | exactly",
            "sql": "select customers.company where customers.company != value"
        },
        {
            "utterance": "actually i mean highest total amount",
            "sql": "select invoices.total order_by invoices.total desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 15,
    "final": {
        "utterance": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"
    },
    "interaction": [
        {
            "utterance": "What tracks belong to genre Rock ?",
            "sql": "select * where genres.name = value"
        },
        {
            "utterance": "What are the names of tracks that are Rock or MPEG media type ?",
            "sql": "select tracks.name where genres.name = value or media_types.name = value"
        },
        {
            "utterance": "What are the names of tracks that belong to the genre Rock and are media type MPEG audio file ?",
            "sql": "select tracks.name where genres.name = value or media_types.name = value"
        },
        {
            "utterance": "How many distinct media types are Rock genre ?",
            "sql": "select count ( distinct tracks.media_type_id ) where genres.name = value"
        },
        {
            "utterance": "What is the most common media type for the Rock genre ?",
            "sql": "select * where genres.name = value group_by media_types.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the full name of employee who supported the most number of customers.",
        "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the employee that supported the most number of customers ?",
            "sql": "select employees.first_name , employees.last_name group_by employees.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is their id ?",
            "sql": "select employees.id group_by employees.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is their address ?",
            "sql": "select employees.address group_by employees.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many albums does Billy Cobham has?",
        "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    "interaction": [
        {
            "utterance": "Show the albums of Billy Cobham .",
            "sql": "select * where artists.name = value"
        },
        {
            "utterance": "Count the albums of Billy Colham .",
            "sql": "select count ( * ) where artists.name = value"
        },
        {
            "utterance": "Name of the album .",
            "sql": "select albums.title where artists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "What are all the tracks ?",
            "sql": "select tracks.*"
        },
        {
            "utterance": "Which tracks are on the Movies Playlist ?",
            "sql": "select tracks.name where playlists.name = value"
        },
        {
            "utterance": "Which tracks are not in the music playlist ?",
            "sql": "select tracks.name where playlists.name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 19,
    "final": {
        "utterance": "List name of all tracks in Balls to the Wall.",
        "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
    },
    "interaction": [
        {
            "utterance": "what is the id of balls to the walls",
            "sql": "select distinct tracks.id where albums.title = value"
        },
        {
            "utterance": "what is the name of all tracks in balls to wall",
            "sql": "select tracks.name where albums.title = value"
        },
        {
            "utterance": "name the composer of balls to wall",
            "sql": "select distinct tracks.composer where albums.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 20,
    "final": {
        "utterance": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
    },
    "interaction": [
        {
            "utterance": "What are the names of the 8 countries with the greatest gross invoice size ? | Can you give details about the countries ? Do you mean billing country ? | Yes",
            "sql": "select invoices.billing_country group_by invoices.billing_country order_by sum ( invoices.total ) desc limit_value"
        },
        {
            "utterance": "Can you tell me which billing city has the letter `` O '' in its name please ?",
            "sql": "select invoices.billing_city where invoices.billing_city like value"
        },
        {
            "utterance": "Can you tell me the billing addresses located in the billing city Boston ?",
            "sql": "select distinct invoices.billing_address where invoices.billing_city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "Find me the 5 customers who most recently purchased something . | What information about the customer do you need ? | I need the first name and last name please",
            "sql": "select customers.first_name , customers.last_name order_by invoices.invoice_date desc limit_value"
        },
        {
            "utterance": "How about their cities and states ?",
            "sql": "select customers.first_name , customers.last_name , customers.city , customers.state order_by invoices.invoice_date desc limit_value"
        },
        {
            "utterance": "Can you also give me the countries ?",
            "sql": "select customers.first_name , customers.last_name , customers.city , customers.state , customers.country order_by invoices.invoice_date desc limit_value"
        },
        {
            "utterance": "How about their e-mail addresses ?",
            "sql": "select customers.email order_by invoices.invoice_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 22,
    "final": {
        "utterance": "List title of albums have the number of tracks greater than 10.",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
    },
    "interaction": [
        {
            "utterance": "How many albums are there",
            "sql": "select count ( albums.* )"
        },
        {
            "utterance": "How many have fewer than ten tracks ?",
            "sql": "select count ( * ) ( select count ( * ) group_by albums.id having count ( albums.id ) < value )"
        },
        {
            "utterance": "How many albums are there other than those ?",
            "sql": "select count ( * ) ( select * group_by albums.id having count ( albums.id ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List all tracks bought by customer Daan Peeters.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    "interaction": [
        {
            "utterance": "what is the billing address of germany | Billing address is associated with each customer , not country . Please clarify your question . | what is the address of state sp",
            "sql": "select customers.address where customers.state = value"
        },
        {
            "utterance": "what is the country of support rep id 5",
            "sql": "select customers.country where customers.support_rep_id = value"
        },
        {
            "utterance": "what is the name of album id 3",
            "sql": "select tracks.name where tracks.album_id = value"
        },
        {
            "utterance": "what is the unit price of track id 6",
            "sql": "select tracks.unit_price where tracks.id = value"
        },
        {
            "utterance": "what is the composer of genre id 1",
            "sql": "select tracks.composer where tracks.genre_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 24,
    "final": {
        "utterance": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "What are the top 5 genres ? | Do you mean sort by the id number ? | Yes please",
            "sql": "select genres.id , genres.name order_by genres.id desc limit_value"
        },
        {
            "utterance": "Could you please provide the total tracks on each top 5 genres by number of tracks ?",
            "sql": "select genres.id , count ( * ) group_by genres.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Do you have the best composer of each top 5 genre by number of tracks ?",
            "sql": "select genres.id , tracks.composer group_by genres.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Overall , do you have the best ranked composer ? | I do not quite understand what you mean . Do you mean rank by milliseconds ? | Yes please .",
            "sql": "select tracks.composer order_by tracks.milliseconds"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is employee Nancy Edwards's phone number?",
        "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "What is employee named Nancy Andrews phone number ?",
            "sql": "select employees.phone where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "OK. What is it for Nancy Edwards ?",
            "sql": "select employees.phone where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Great ! And her fax number ?",
            "sql": "select employees.fax where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Okay . What is her job title ?",
            "sql": "select employees.title where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "How many employees have that job title ?",
            "sql": "select count ( employees.* ) where employees.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the total amount of money spent by Lucas Mancini?",
        "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    "interaction": [
        {
            "utterance": "Can you tell me how many different purchases Lucas Mancini has made ?",
            "sql": "select count ( * ) where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Great ! How much total money has Lucas Mancini spent in total ?",
            "sql": "select sum ( invoices.total ) where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What was the most recent associated invoice date for Lucas Mancini ?",
            "sql": "select invoices.invoice_date where customers.first_name = value and customers.last_name = value order_by invoices.invoice_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 27,
    "final": {
        "utterance": "List the number of invoices from the US, grouped by state.",
        "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"
    },
    "interaction": [
        {
            "utterance": "How many invoices are from the US ?",
            "sql": "select count ( invoices.* ) where invoices.billing_country = value"
        },
        {
            "utterance": "Could you list them grouped by state ?",
            "sql": "select invoices.billing_state , count ( invoices.* ) where invoices.billing_country = value group_by invoices.billing_state"
        },
        {
            "utterance": "Could you list the number of invoices grouped by country ?",
            "sql": "select invoices.billing_country , count ( invoices.* ) group_by invoices.billing_country"
        },
        {
            "utterance": "Can you list the number of invoices from the US grouped by billing city ?",
            "sql": "select invoices.billing_city , count ( invoices.* ) where invoices.billing_country = value group_by invoices.billing_city"
        },
        {
            "utterance": "Can you list the number of invoices from all countries except the US grouped by billing city ?",
            "sql": "select invoices.billing_city , count ( invoices.* ) where invoices.billing_country != value group_by invoices.billing_city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Eduardo Martins is a customer at which company?",
        "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
    },
    "interaction": [
        {
            "utterance": "What is country of origin of Eduardo Martins ? | The country of the customer Eduardo Martins is Brazil . | Of which company is he a customer of ?",
            "sql": "select customers.company where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "And what is his phone number ?",
            "sql": "select customers.phone where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is Astrid Gruber's email and phone number?",
        "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
    },
    "interaction": [
        {
            "utterance": "Address of Lu\u00eds K\u00f6hler ? | Is Lu\u00eds K\u00f6hler full name ? | Yes",
            "sql": "select customers.address where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Provide address of ID 1 ?",
            "sql": "select customers.address where customers.id = value"
        },
        {
            "utterance": "Provide email and phone number of Astrid Gruber 's ?",
            "sql": "select customers.email , customers.phone where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Postal code of ID 3 ?",
            "sql": "select customers.postal_code where customers.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 30,
    "final": {
        "utterance": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "What are the average invoice sizes of each country ?",
            "sql": "select invoices.billing_country , avg ( invoices.total ) group_by invoices.billing_country"
        },
        {
            "utterance": "What was the country that had the highest invoice size ?",
            "sql": "select invoices.billing_country order_by invoices.total desc limit_value"
        },
        {
            "utterance": "What are the top 10 countries with the highest invoice size along with their amount ?",
            "sql": "select invoices.billing_country , invoices.total order_by invoices.total desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "how many orders are there",
            "sql": "select count ( invoices.* )"
        },
        {
            "utterance": "find the ten customers with the most total orders",
            "sql": "select * group_by customers.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "how many orders do each of them have ?",
            "sql": "select count ( * ) group_by customers.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "how many customers are there",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "how many customers have 7 or more orders",
            "sql": "select count ( * ) ( select * group_by customers.id having count ( * ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 32,
    "final": {
        "utterance": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "Please show me a list of the top 5 countries by number of invoices . List country name .",
            "sql": "select invoices.billing_country group_by invoices.billing_country order_by count ( invoices.* ) desc limit_value"
        },
        {
            "utterance": "OK ! Can you also show me the number of invoices for these 5 countries .",
            "sql": "select invoices.billing_country , count ( invoices.* ) group_by invoices.billing_country order_by count ( invoices.* ) desc limit_value"
        },
        {
            "utterance": "May I also see the names of bottom 5 countries by number of invoices . Please show me country names and number of invoices .",
            "sql": "select invoices.billing_country , count ( invoices.* ) group_by invoices.billing_country order_by count ( invoices.* ) limit_value"
        },
        {
            "utterance": "Can you show me the postal codes for these countries .",
            "sql": "select invoices.billing_country , invoices.billing_postal_code group_by invoices.billing_country order_by count ( invoices.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the name of tracks whose genre is Rock?",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    "interaction": [
        {
            "utterance": "How many tracks are in the Rock genre ?",
            "sql": "select count ( tracks.id ) where genres.name = value"
        },
        {
            "utterance": "Show me the name of tracks in the Rock genre .",
            "sql": "select tracks.name where genres.name = value"
        },
        {
            "utterance": "What is the average unit price for tracks in the Rock genre ?",
            "sql": "select avg ( tracks.unit_price ) where genres.name = value"
        },
        {
            "utterance": "How many tracks are in the Jazz genre ?",
            "sql": "select count ( tracks.name ) where genres.name = value"
        },
        {
            "utterance": "How many milliseconds is the Rock genre track Balls to the Wall ?",
            "sql": "select tracks.milliseconds where genres.name = value and tracks.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 34,
    "final": {
        "utterance": "List the name of albums that are released by aritist whose name has 'Led'",
        "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"
    },
    "interaction": [
        {
            "utterance": "How many released albums are there ?",
            "sql": "select count ( albums.* )"
        },
        {
            "utterance": "How many artists have released albums ?",
            "sql": "select count ( artists.* ) where artists.id in ( select albums.artist_id )"
        },
        {
            "utterance": "how many albums are released by artist with 'Led ' in their name ?",
            "sql": "select count ( * ) where artists.name like value"
        },
        {
            "utterance": "Show me the names of those albums",
            "sql": "select albums.title where artists.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 35,
    "final": {
        "utterance": "List the name of all tracks in the playlists of Movies.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    "interaction": [
        {
            "utterance": "Can you please list the names of all tracks in the playlists of Movies ?",
            "sql": "select tracks.name where playlists.name = value"
        },
        {
            "utterance": "What is the ID of Movies ?",
            "sql": "select playlists.id where playlists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the number of employees whose title is IT Staff from each city?",
        "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "How many employees are IT Staff ?",
            "sql": "select count ( employees.* ) where employees.title = value"
        },
        {
            "utterance": "How many are in Calgary ?",
            "sql": "select count ( employees.* ) where employees.title = value and employees.city = value"
        },
        {
            "utterance": "how about in Edmonton ?",
            "sql": "select count ( employees.* ) where employees.title = value and employees.city = value"
        },
        {
            "utterance": "What city are the 2 employees in ? | You mean the 2 employees with title `` IT Staff '' ? | yes , the two employees with the title of IT Staff .",
            "sql": "select distinct employees.city where employees.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the address of employee Nancy Edwards?",
        "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "What are the addresses of the employees ? | Do you mean all of the employees ? | Yes",
            "sql": "select employees.address"
        },
        {
            "utterance": "Which cities are they from ?",
            "sql": "select employees.city"
        },
        {
            "utterance": "What are their emails ?",
            "sql": "select employees.email"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What country does Roberto Almeida live?",
        "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    "interaction": [
        {
            "utterance": "What county does Roberto Almeida live in ?",
            "sql": "select customers.country where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What state does he live in ?",
            "sql": "select customers.state where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What is his address , please ?",
            "sql": "select customers.address where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What company does he work for ?",
            "sql": "select customers.company where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What are the names of the other people who work for that company ?",
            "sql": "select customers.first_name , customers.last_name where customers.company = value and customers.first_name != value and customers.last_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 39,
    "final": {
        "utterance": "List total amount of  invoice from Chicago, IL.",
        "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    "interaction": [
        {
            "utterance": "How many invoices in this table ?",
            "sql": "select count ( invoices.* )"
        },
        {
            "utterance": "List total amount of invoice from Germany ?",
            "sql": "select sum ( invoices.total ) where invoices.billing_country = value"
        },
        {
            "utterance": "List total amount of invoices from Norway ?",
            "sql": "select sum ( invoices.total ) where invoices.billing_country = value"
        },
        {
            "utterance": "How many billing countries in this invoice ? | Do you mean the types of billing countries in this invoice | Yes .",
            "sql": "select count ( distinct invoices.billing_country )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 40,
    "final": {
        "utterance": "List the state in the US with the most invoices.",
        "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Hello . Can you give me the state in the US with most invoices ?",
            "sql": "select invoices.billing_state where invoices.billing_country = value group_by invoices.billing_state order_by count ( invoices.* ) desc limit_value"
        },
        {
            "utterance": "Can you give me the billing cities for these invoices ? | here are the billing cities of the invoices from the state in the USA with the most invoices | How about postal codes for these invoices ?",
            "sql": "select distinct invoices.billing_postal_code where invoices.billing_state = ( select invoices.billing_state where invoices.billing_country = value group_by invoices.billing_state order_by count ( invoices.* ) desc limit_value )"
        },
        {
            "utterance": "Can you give me the billing dates as well ? | do you mean the date of invoice ? | Yes , date of invoice please",
            "sql": "select distinct invoices.invoice_date where invoices.billing_state = ( select invoices.billing_state where invoices.billing_country = value group_by invoices.billing_state order_by count ( invoices.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 41,
    "final": {
        "utterance": "List all tracks bought by customer Daan Peeters.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    "interaction": [
        {
            "utterance": "List all tracks bought by customer Daan Peeters",
            "sql": "select tracks.name where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "How many milliseconds does each of those tracks have ?",
            "sql": "select tracks.id , tracks.milliseconds group_by tracks.id"
        },
        {
            "utterance": "Show me the price for each of those tracks | Do you mean unit price ? | Yes",
            "sql": "select tracks.unit_price"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Find number of tracks in each genre?",
        "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"
    },
    "interaction": [
        {
            "utterance": "how many album id",
            "sql": "select count ( distinct tracks.album_id )"
        },
        {
            "utterance": "how many genre id",
            "sql": "select count ( distinct tracks.genre_id )"
        },
        {
            "utterance": "ok , let show me the average unit price of all genre id",
            "sql": "select tracks.genre_id , avg ( tracks.unit_price ) group_by tracks.genre_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the manager's first name, last name and id who won the most manager award?",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "HOW MANY ON THE TABLE | did you mean HOW MANY player ON THE TABLE ? | YES EXACTLY",
            "sql": "select count ( distinct player.player_id )"
        },
        {
            "utterance": "WHAT IS BIRTH YEAR of aardsda01",
            "sql": "select player.birth_year where player.player_id = value"
        },
        {
            "utterance": "WHAT ARE THE MANAGER 'S FIRST NAME LAST NAME AND ID WHO WON THE MOST MANAGER AWARD",
            "sql": "select player.name_first , player.name_last , manager_award.player_id group_by manager_award.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';"
    },
    "interaction": [
        {
            "utterance": "Show the team_id with highest rank ?",
            "sql": "select team.team_id order_by team.rank asc limit_value"
        },
        {
            "utterance": "Show the maximum scores of the team Boston Red Stockings when the team won in postseason ?",
            "sql": "select max ( postseason.wins ) where team.name = value"
        },
        {
            "utterance": "Show the year of postseason with equal wins and loses ?",
            "sql": "select postseason.year where postseason.wins = postseason.losses"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which cities have 2 to 4 parks?",
        "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"
    },
    "interaction": [
        {
            "utterance": "Which cities have 2 to 4 parks ?",
            "sql": "select park.city group_by park.city having count ( park.* ) between value and value"
        },
        {
            "utterance": "How many parks are in Atlanta ?",
            "sql": "select count ( park.* ) where park.city = value"
        },
        {
            "utterance": "Which cities have exactly 4 parks ?",
            "sql": "select park.city group_by park.city having count ( park.* ) = value"
        },
        {
            "utterance": "Which cities have exactly 3 parks ?",
            "sql": "select park.city group_by park.city having count ( park.* ) = value"
        },
        {
            "utterance": "Which cities have exactly 2 parks ?",
            "sql": "select park.city group_by park.city having count ( park.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are first and last names of players participating in all star game in 1998?",
        "sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998"
    },
    "interaction": [
        {
            "utterance": "hi , can you tell me the first and last name for the player with player ID : gomezle01 ?",
            "sql": "select player.name_first , player.name_last where player.player_id = value"
        },
        {
            "utterance": "yes . What is the player 's first and last name for player ID : ferreri01 ?",
            "sql": "select player.name_first , player.name_last where player.player_id = value"
        },
        {
            "utterance": "in addition to Rick Ferrell , Lefty Gomez , and player ID gehrilo01 , can you tell me the first and last names of the other players participating in 1998 all star game ?",
            "sql": "select player.name_first , player.name_last where all_star.year = value and player.name_first != value or player.name_last != value intersect select player.name_first , player.name_last where all_star.year = value and player.name_first != value or player.name_last != value intersect select player.name_first , player.name_last where all_star.year = value and player.player_id != value"
        },
        {
            "utterance": "great . what is the player with player ID gehrilo01 first and last name ?",
            "sql": "select player.name_first , player.name_last where player.player_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 4,
    "final": {
        "utterance": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;"
    },
    "interaction": [
        {
            "utterance": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total ?",
            "sql": "select sum ( home_game.games ) where team.name = value and home_game.year between value and value"
        },
        {
            "utterance": "What is the one of the best team ? | Do you mean the team with the most number of wins ? | yes",
            "sql": "select team.name group_by home_game.team_id order_by sum ( team.w ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the total salary paid by team Boston Red Stockings in 2010?",
        "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"
    },
    "interaction": [
        {
            "utterance": "What is the team id for Boston Red Stockings ?",
            "sql": "select distinct ( team.team_id ) where team.name = value"
        },
        {
            "utterance": "Yes please .",
            "sql": "select salary.player_id where team.name = value"
        },
        {
            "utterance": "Can you calculate the total salary paid by team Boston Red Stockings in 2010 ?",
            "sql": "select sum ( salary.salary ) where team.name = value and salary.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the manager's first name, last name and id who won the most manager award?",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Who won the most manager award ? | Do you mean the first name of the person who won the most manager award ? | Yes , and tell me the last name and the id of that person as well .",
            "sql": "select player.name_first , player.name_last , manager_award.player_id group_by manager_award.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 7,
    "final": {
        "utterance": "In 2014, what are the id and rank of the team that has the largest average number of attendance?",
        "sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the attendance of the team_id CH1 ?",
            "sql": "select home_game.attendance where home_game.team_id = value"
        },
        {
            "utterance": "Show me the id of the team that has the largest average number of attendance in 2014 ?",
            "sql": "select team.team_id where home_game.year = value group_by home_game.team_id order_by avg ( home_game.attendance ) desc limit_value"
        },
        {
            "utterance": "Show me the team_id with attendance 3000 ?",
            "sql": "select home_game.team_id where home_game.attendance = value"
        },
        {
            "utterance": "Show me the rank of the team that has the largest average number of attendance ?",
            "sql": "select team.rank group_by home_game.team_id order_by avg ( home_game.attendance ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which 3 players won the most player awards? List their full name and id.",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "What are the ids of 3 players that won the most awards ?",
            "sql": "select player.player_id group_by player.player_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you show me the names and ids for this list ? | The result shows the full names and ids of 3 players that won the most awards . | What are the city , state and country for these players ?",
            "sql": "select player.birth_city , player.birth_state , player.birth_country group_by player.player_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you also show me the birth dates ?",
            "sql": "select player.birth_year , player.birth_month , player.birth_day group_by player.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';"
    },
    "interaction": [
        {
            "utterance": "What is the the birth country of player-ids ? | Do you mean the birth country of all players ? | yes",
            "sql": "select player.birth_country"
        },
        {
            "utterance": "What is the birth state of player aardsda01 ?",
            "sql": "select player.birth_state where player.player_id = value"
        },
        {
            "utterance": "What about birth city ?",
            "sql": "select player.birth_city where player.player_id = value"
        },
        {
            "utterance": "and for aaronto01 ? | You mean the birth city for the player with ID aaronto01 ? | yes",
            "sql": "select player.birth_city where player.player_id = value"
        },
        {
            "utterance": "How many players in the USA have a batter value R ?",
            "sql": "select count ( player.* ) where player.birth_country = value and player.bats = value"
        },
        {
            "utterance": "How many with a value R that are dead , died in the USA ?",
            "sql": "select count ( player.* ) where player.birth_country = value and player.bats = value and player.death_year < value and player.death_country = value"
        },
        {
            "utterance": "How many with a value R died after the year 2000 ?",
            "sql": "select count ( player.* ) where player.bats = value and player.death_year > value"
        },
        {
            "utterance": "What about born after the year 1980 ?",
            "sql": "select count ( player.* ) where player.bats = value and player.birth_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 10,
    "final": {
        "utterance": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
    },
    "interaction": [
        {
            "utterance": "Which player has the highest salary on the list ?",
            "sql": "select salary.player_id order_by salary.salary desc limit_value"
        },
        {
            "utterance": "How many players has the birth country in USA ?",
            "sql": "select count ( player.player_id ) where player.birth_country = value"
        },
        {
            "utterance": "State the team id which has the highest rank in the list ?",
            "sql": "select team.team_id order_by team.rank limit_value"
        },
        {
            "utterance": "List player 's first name and last name who received salary from team Washington Nationals in both 2005 and 2007 ?",
            "sql": "select player.name_first , player.name_last where salary.year = value and team.name = value intersect select player.name_first , player.name_last where salary.year = value and team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many games were played in city Atlanta in 2000?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"
    },
    "interaction": [
        {
            "utterance": "can you count the number of of games played in atlanta in 2000",
            "sql": "select count ( * ) where home_game.year = value and park.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "sql": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which team had the most players in the all star games ?",
            "sql": "select all_star.* group_by all_star.team_id order_by count ( all_star.* ) desc limit_value"
        },
        {
            "utterance": "WHich player has the most all star games played ?",
            "sql": "select * group_by player.player_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is his id ?",
            "sql": "select player.player_id group_by player.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 13,
    "final": {
        "utterance": "what is the full name and id of the college with the largest number of baseball players?",
        "sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the full name and id of the college with the largest number of baseball players ?",
            "sql": "select college.name_full , college.college_id group_by college.college_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "And how many players go there ?",
            "sql": "select count ( distinct player_college.player_id ) where player_college.college_id = ( select college.college_id group_by college.college_id order_by count ( player_college.* ) desc limit_value )"
        },
        {
            "utterance": "And where is that college located ?",
            "sql": "select college.city , college.state , college.country group_by college.college_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "And what year did the largest number of baseball players attend that college ?",
            "sql": "select player_college.year where player_college.college_id = ( select college.college_id group_by college.college_id order_by count ( player_college.* ) desc limit_value ) group_by player_college.college_id order_by player_college.year desc limit_value"
        },
        {
            "utterance": "How many baseball players attended that college in 2018 ?",
            "sql": "select count ( player_college.player_id ) where player_college.year = value and player_college.college_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 14,
    "final": {
        "utterance": "How many players were in the team Boston Red Stockings in 2000?",
        "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "Show me the salary of team id ATL ?",
            "sql": "select salary.salary where salary.team_id = value"
        },
        {
            "utterance": "Show me the league id of player id bedrost01 ?",
            "sql": "select distinct salary.league_id where salary.player_id = value"
        },
        {
            "utterance": "Show me the player id with salary 545000 ?",
            "sql": "select distinct salary.player_id where salary.salary = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 15,
    "final": {
        "utterance": "List the 3 highest salaries of the players in 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "List the 3 highest salaries of the players in 2001 ?",
            "sql": "select salary.salary where salary.year = value order_by salary.salary desc limit_value"
        },
        {
            "utterance": "List the 3 highest salaries of players on ATL in 2001 .",
            "sql": "select salary.salary where salary.year = value and salary.team_id = value order_by salary.salary desc limit_value"
        },
        {
            "utterance": "List the 3 highest salaries of players in the NL in 2001 .",
            "sql": "select salary.salary where salary.year = value and salary.league_id = value order_by salary.salary desc limit_value"
        },
        {
            "utterance": "List the 3 highest salaries of players in the AL in 2001",
            "sql": "select salary.salary where salary.year = value and salary.league_id = value order_by salary.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 16,
    "final": {
        "utterance": "In which year did the least people enter hall of fame?",
        "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the player IDs in the database ?",
            "sql": "select hall_of_fame.player_id"
        },
        {
            "utterance": "Can you update this list to indicate whether or not these players were inducted into the hall of fame ?",
            "sql": "select hall_of_fame.player_id , hall_of_fame.inducted"
        },
        {
            "utterance": "Thank you for that ! Of all of the years , which year had the fewest players entering the hall of fame ?",
            "sql": "select hall_of_fame.yearid group_by hall_of_fame.yearid order_by count ( hall_of_fame.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What were all the salary values of players in 2010 and 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001"
    },
    "interaction": [
        {
            "utterance": "What were all the salary values of players in 2010 and 2001 ?",
            "sql": "select salary.salary where salary.year = value union select salary.salary where salary.year = value"
        },
        {
            "utterance": "What was the average salary of players in 2010 ?",
            "sql": "select avg ( salary.salary ) where salary.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Which team had the least number of attendances in home games in 1980?",
        "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Yes | Sorry . I mean which game OR the sum of attendance of a team in its home game | The sum of attendance of a team in its home game",
            "sql": "select team.name group_by home_game.team_id order_by sum ( home_game.attendance ) asc limit_value"
        },
        {
            "utterance": "What was the actual attendance in number ? | What do you mean by actual attendance | The attendance in home games for Altoona Mountain City",
            "sql": "select sum ( home_game.attendance ) group_by home_game.team_id order_by sum ( home_game.attendance ) asc limit_value"
        },
        {
            "utterance": "Which team had the highest number of attendance ?",
            "sql": "select team.name group_by home_game.team_id order_by sum ( home_game.attendance ) desc limit_value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select sum ( home_game.attendance ) group_by home_game.team_id order_by sum ( home_game.attendance ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 19,
    "final": {
        "utterance": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me how many games were in 1885 ? | Did you also requre the `` ties '' is '1 ' | how many games had ties ?",
            "sql": "select count ( postseason.* ) where postseason.ties = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 20,
    "final": {
        "utterance": "How many games were played in park \"Columbia Park\" in 1907?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"
    },
    "interaction": [
        {
            "utterance": "how many park there",
            "sql": "select count ( park.* )"
        },
        {
            "utterance": "what is the city of Riverside Park",
            "sql": "select park.city where park.park_name = value"
        },
        {
            "utterance": "what is the park name of Anaheim city | Angel Stadium of Anaheim is the name of the park in city Anaheim . | what is the state of Columbia Park",
            "sql": "select park.state where park.park_name = value"
        },
        {
            "utterance": "how many home game there",
            "sql": "select count ( home_game.* )"
        },
        {
            "utterance": "how many games in 1871 | Do you mean the number of home games in year 1871 ? | yes sir",
            "sql": "select count ( home_game.* ) where home_game.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the name and id of the team offering the lowest average salary?",
        "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what is the average salary for all teams ?",
            "sql": "select avg ( salary.salary )"
        },
        {
            "utterance": "ok , which team offering the highest salary ? | OK , do you want me to show the team name or id ? Also , are you asking about average salary ? | please give me the name . Yes !",
            "sql": "select team.name group_by team.team_id order_by avg ( salary.salary ) desc limit_value"
        },
        {
            "utterance": "Great ! How about the lowest salary ?",
            "sql": "select team.name group_by team.team_id order_by avg ( salary.salary ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Which 3 players won the most player awards? List their full name and id.",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "hey , which 3 players won the most player awards ? list their full name and id",
            "sql": "select player.name_first , player.name_last , player.player_id group_by player.player_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "yes , the youngest .",
            "sql": "select player.name_first , player.name_last where player.player_id in ( select player.player_id group_by player.player_id order_by count ( player.* ) desc limit_value ) order_by player.birth_year , player.birth_month , player.birth_day desc limit_value"
        },
        {
            "utterance": "which teams did the three play for ?",
            "sql": "select player.player_id , player_award.league_id group_by player.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List the names of states that have more than 2 parks.",
        "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;"
    },
    "interaction": [
        {
            "utterance": "What are the names of some public parks in the United States ?",
            "sql": "select park.park_name where park.country = value"
        },
        {
            "utterance": "Thank you . Which states have at least two parks in them ?",
            "sql": "select park.state group_by park.state having count ( park.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 24,
    "final": {
        "utterance": "List three countries which are the origins of the least players.",
        "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "WHICH COUNTRIES HAS THE ORIGINS OF THE LEAST PLAYERS",
            "sql": "select player.birth_country group_by player.birth_country order_by count ( player.* ) asc limit_value"
        },
        {
            "utterance": "LIST ALL THE COUNTRIES WITH ORIGINS OF LEAST PLAYERS | Is n't it the same question as the last one ? | NO , LIST THREE COUNTRIES WHICH ARE THE ORIGINS OF THE LEAST PLAYERS",
            "sql": "select player.birth_country group_by player.birth_country order_by count ( player.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
    },
    "interaction": [
        {
            "utterance": "what is the total home game attandance in 1871 ?",
            "sql": "select sum ( home_game.attendance ) where home_game.year = value"
        },
        {
            "utterance": "how many games played by BS1 ?",
            "sql": "select count ( home_game.* ) where home_game.team_id = value"
        },
        {
            "utterance": "WHAT IS THE RANK OF TEAM BS1 ? IN TEAM TABLE ?",
            "sql": "select team.rank where team.team_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"
    },
    "interaction": [
        {
            "utterance": "what is the average salary of Boston Red Stockings ?",
            "sql": "select avg ( salary.salary ) where team.name = value"
        },
        {
            "utterance": "what is the league id of Boston Red Stocking ?",
            "sql": "select team.league_id where team.name = value"
        },
        {
            "utterance": "what is their rank ? | do you mean all their ranks in every year ? | yes",
            "sql": "select team.year , team.rank where team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What were all the salary values of players in 2010 and 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001"
    },
    "interaction": [
        {
            "utterance": "what is the salary of 1985 ?",
            "sql": "select salary.salary where salary.year = value"
        },
        {
            "utterance": "who is get the high salary ? | Do you mean the id of the player who gets the highest salary ? | Yes .",
            "sql": "select salary.player_id order_by salary.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 28,
    "final": {
        "utterance": "How many players were in the team Boston Red Stockings in 2000?",
        "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "How many players are on a team ? | Which team are you referring to ? | The Boston Red Stockings .",
            "sql": "select count ( * ) where team.name = value"
        },
        {
            "utterance": "How many in the year 2000 ?",
            "sql": "select count ( * ) where team.name = value and salary.year = value"
        },
        {
            "utterance": "What was the total salary of those players ?",
            "sql": "select sum ( salary.salary ) where team.name = value and salary.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
    },
    "interaction": [
        {
            "utterance": "What is the total home game attendance of all teams from 2000 to 2010 ?",
            "sql": "select sum ( home_game.attendance ) where home_game.year between value and value"
        },
        {
            "utterance": "What about for just the team Boston Red Stockings ?",
            "sql": "select sum ( home_game.attendance ) where team.name = value and home_game.year between value and value"
        },
        {
            "utterance": "What 's the average total home game attendance for the Cleveland Forest Citys for all years ?",
            "sql": "select avg ( home_game.attendance ) where team.name = value"
        },
        {
            "utterance": "What about for the Chicago White Stockings ?",
            "sql": "select avg ( home_game.attendance ) where team.name = value"
        },
        {
            "utterance": "What is the name of the team with the earliest home game date , and what is that date ?",
            "sql": "select team.name , home_game.span_first order_by home_game.span_first limit_value"
        },
        {
            "utterance": "What about the latest date ?",
            "sql": "select team.name , home_game.span_first order_by home_game.span_first desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 30,
    "final": {
        "utterance": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
    },
    "interaction": [
        {
            "utterance": "Show me the name of players ?",
            "sql": "select player.name_first , player.name_last , player.name_given"
        },
        {
            "utterance": "Show me the name of person who received salary from team Washington nationals ?",
            "sql": "select player.name_first , player.name_last , player.name_given where salary.year = value and team.name = value"
        },
        {
            "utterance": "Show me the names of players who received salary in both 2005 and 2007 ?",
            "sql": "select player.name_first , player.name_last where salary.year = value or salary.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the name and id of the team offering the lowest average salary?",
        "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what team pays the lowest average salary ?",
            "sql": "select * group_by team.team_id order_by avg ( salary.salary ) asc limit_value"
        },
        {
            "utterance": "thanks..how about one last one ... what is median salary across all teams ?",
            "sql": "select avg ( salary.salary )"
        },
        {
            "utterance": "ok , how many teams are the total in this data range ? | What data range are you referring to ? | Team salaries",
            "sql": "select count ( distinct salary.team_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the name and id of the team with the most victories in 2008 postseason?",
        "sql": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "how many postseason on the table",
            "sql": "select count ( postseason.* )"
        },
        {
            "utterance": "which postseason are highest wins | Would you like all information for the entry in postseason with the highest value for wins ? | exactly",
            "sql": "select postseason.* order_by postseason.wins desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 33,
    "final": {
        "utterance": "In which year did the least people enter hall of fame?",
        "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "list the year id in which the least people enter hall of fame",
            "sql": "select hall_of_fame.yearid group_by hall_of_fame.yearid order_by count ( hall_of_fame.* ) asc limit_value"
        },
        {
            "utterance": "what is the catogery of the particular year id | Do you mean of the year id 1944 ? | yes , what is the category mentioned for the year id 1944",
            "sql": "select hall_of_fame.category where hall_of_fame.yearid = value"
        },
        {
            "utterance": "list the number of votes for this category",
            "sql": "select sum ( hall_of_fame.votes ) where hall_of_fame.category = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
        "sql": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"
    },
    "interaction": [
        {
            "utterance": "what is the number of wins the team Boston Red Stockings got in the postseasons each year in history ?",
            "sql": "select count ( * ) , postseason.year where team.name = value group_by postseason.year"
        },
        {
            "utterance": "ok , list out the all team id winner",
            "sql": "select postseason.team_id_winner"
        },
        {
            "utterance": "ok , list out the all team id loser",
            "sql": "select postseason.team_id_loser"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Which park had most attendances in 2008?",
        "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the Open Year of the Riverside Park ?",
            "sql": "select home_game.year where park.park_name = value"
        },
        {
            "utterance": "What is a park in Anaheim ?",
            "sql": "select park.park_name where park.city = value"
        },
        {
            "utterance": "How many people attendance for Columbia Park ? | Did you mean the sum of the attendance for the Columbia Park for all the years ? | Yes",
            "sql": "select sum ( home_game.attendance ) where park.park_name = value"
        },
        {
            "utterance": "Which park had most attendances in 2008 ?",
            "sql": "select park.park_name where home_game.year = value order_by home_game.attendance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 36,
    "final": {
        "utterance": "How many games were played in park \"Columbia Park\" in 1907?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"
    },
    "interaction": [
        {
            "utterance": "How many games were played at Columbia Park ?",
            "sql": "select count ( * ) where park.park_name = value"
        },
        {
            "utterance": "How many games were played in 1907 ?",
            "sql": "select count ( * ) where home_game.year = value"
        },
        {
            "utterance": "Out of those games , how many of them were played in Columbia Park ? | Did you mean how many games were played in park `` Columbia Park '' in 1907 | Yes please .",
            "sql": "select count ( * ) where home_game.year = value and park.park_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the average height of the players from the college named 'Yale University'?",
        "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';"
    },
    "interaction": [
        {
            "utterance": "What is the average height of all players ?",
            "sql": "select avg ( player.height )"
        },
        {
            "utterance": "What is the average height of all players from the college `` Yale University '' ?",
            "sql": "select avg ( player.height ) where college.name_full = value"
        },
        {
            "utterance": "What is the average weight of all players ?",
            "sql": "select avg ( player.weight )"
        },
        {
            "utterance": "What is the player id of the heaviest player ?",
            "sql": "select player.player_id order_by player.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the average height of the players from the college named 'Yale University'?",
        "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';"
    },
    "interaction": [
        {
            "utterance": "Show me the all student 's names from the college named 'Yale University ' | Do you mean the given names of all the students from the college named 'Yale University ' ? | Yes",
            "sql": "select player.name_given where college.name_full = value"
        },
        {
            "utterance": "Show me the height list of the student players from this university | Do you mean the height of the players from the college named 'Yale University ' ? | yes",
            "sql": "select player.height where college.name_full = value"
        },
        {
            "utterance": "Show me the average height of the student players from the college named 'Yale University '",
            "sql": "select avg ( player.height ) where college.name_full = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 0,
    "final": {
        "utterance": "How many credit cards does customer Blanche Huels have?",
        "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
    },
    "interaction": [
        {
            "utterance": "Can you list the customer names and ids who have credit cards ?",
            "sql": "select customers_cards.customer_id , customers.customer_first_name , customers.customer_last_name where customers_cards.card_type_code = value"
        },
        {
            "utterance": "I want to know the customer names and how many credit cards they have ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name , count ( * ) where customers_cards.card_type_code = value group_by customers_cards.customer_id"
        },
        {
            "utterance": "How many credit cards does Blanche Huels have ?",
            "sql": "select count ( * ) where customers.customer_first_name = value and customers.customer_last_name = value and customers_cards.card_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the customer first, last name and id with least number of accounts.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many customers have accounts ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "What is the customer first , last name and id with the most number of accounts ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name , accounts.customer_id group_by accounts.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the customer first , last name and id with the least number of accounts ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name , accounts.customer_id group_by accounts.customer_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 2,
    "final": {
        "utterance": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "how many accounts on the table",
            "sql": "select count ( accounts.* )"
        },
        {
            "utterance": "list out the customers first name",
            "sql": "select customers.customer_first_name"
        },
        {
            "utterance": "what is the address of Aniyah | Did you mean to ask for the address of the customer with first name Aniyah ? | exactly",
            "sql": "select customers.customer_address where customers.customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the customer ids and firstname without a credit card.",
        "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""
    },
    "interaction": [
        {
            "utterance": "show the customer ids and first names without a credit card",
            "sql": "select customers.customer_id , customers.customer_first_name except select customers_cards.customer_id , customers.customer_first_name where customers_cards.card_type_code = value"
        },
        {
            "utterance": "show the customer ids , first name and last name without a Debit card",
            "sql": "select customers.customer_id , customers.customer_first_name , customers.customer_last_name except select customers_cards.customer_id , customers.customer_first_name , customers.customer_last_name where customers_cards.card_type_code = value"
        },
        {
            "utterance": "show the customer ids , first name and last name with card type and number | Do you mean card type code ? | show the customer ids and card number",
            "sql": "select customers_cards.customer_id , customers_cards.card_number"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the card type codes and the number of transactions.",
        "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
    },
    "interaction": [
        {
            "utterance": "how many customers cards there",
            "sql": "select count ( customers_cards.* )"
        },
        {
            "utterance": "how many credit cards there",
            "sql": "select count ( customers_cards.* ) where customers_cards.card_type_code = value"
        },
        {
            "utterance": "how many debit cards there",
            "sql": "select count ( customers_cards.* ) where customers_cards.card_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the first names and last names of customers without any account.",
        "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "What are the first and last names of all customers who do n't have an account ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name except select customers.customer_first_name , customers.customer_last_name"
        },
        {
            "utterance": "Can you list the addresses of all customers that have VIP as their other account details ?",
            "sql": "select customers.customer_address where accounts.other_account_details = value"
        },
        {
            "utterance": "COuld you list the account names of all customers with the letter G or A in their first or last names ?",
            "sql": "select accounts.account_name where customers.customer_first_name like value or customers.customer_first_name like value or customers.customer_last_name like value or customers.customer_last_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the number of all customers without an account.",
        "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    "interaction": [
        {
            "utterance": "show the number of all customers without an account",
            "sql": "select count ( customers.* ) where customers.customer_id not in ( select accounts.customer_id )"
        },
        {
            "utterance": "can you show their name ? | Do you want their first and last names ? | first name",
            "sql": "select customers.customer_first_name where customers.customer_id not in ( select accounts.customer_id )"
        },
        {
            "utterance": "what is Armani 's customer address ? | Do you mean the address of the customer with a first name Armani ? | yes",
            "sql": "select customers.customer_address where customers.customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 7,
    "final": {
        "utterance": "Show id, first and last names for all customers with at least two cards.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what is the name of customer id 1 ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name where customers.customer_id = value"
        },
        {
            "utterance": "what type of card is used by customer id 6 ?",
            "sql": "select customers_cards.card_type_code where customers_cards.customer_id = value"
        },
        {
            "utterance": "what is the address of customer id 2 ?",
            "sql": "select customers.customer_address where customers.customer_id = value"
        },
        {
            "utterance": "Show id , first and last names for all customers with at least two cards ?",
            "sql": "select customers_cards.customer_id , customers.customer_first_name , customers.customer_last_name group_by customers_cards.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the card type code with most number of cards?",
        "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the card type with the most number of cards ?",
            "sql": "select customers_cards.card_type_code group_by customers_cards.card_type_code order_by count ( customers_cards.* ) desc limit_value"
        },
        {
            "utterance": "And the one with the least number of cards ?",
            "sql": "select customers_cards.card_type_code group_by customers_cards.card_type_code order_by count ( customers_cards.* ) limit_value"
        },
        {
            "utterance": "How many cards are credit cards ?",
            "sql": "select count ( customers_cards.* ) where customers_cards.card_type_code = value"
        },
        {
            "utterance": "How many customers have credit cards ?",
            "sql": "select count ( customers_cards.* ) where customers_cards.card_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the customer id with most number of cards, and how many does he have?",
        "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Okay . Sorry about that . Can you please list all of the customer IDs for which the customer has more than one card ?",
            "sql": "select customers_cards.customer_id group_by customers_cards.customer_id having count ( customers_cards.* ) > value"
        },
        {
            "utterance": "Can you please update that list to show the total number of cards that each of these customers has ?",
            "sql": "select customers_cards.customer_id , count ( customers_cards.* ) group_by customers_cards.customer_id having count ( customers_cards.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 10,
    "final": {
        "utterance": "Show id, first and last names for all customers with at least two cards.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Could you please list the first and last names of all the customers that have at least two cards ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name group_by customers_cards.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "Please add their IDs into the table ?",
            "sql": "select customers_cards.customer_id , customers.customer_first_name , customers.customer_last_name group_by customers_cards.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the addresses of all the customers with credit cards ?",
            "sql": "select customers.customer_address where customers_cards.card_type_code = value"
        },
        {
            "utterance": "What is the email of the customer that has the credit card with the earliest date valid from ?",
            "sql": "select customers.customer_email where customers_cards.date_valid_from = ( select min ( customers_cards.date_valid_from ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the average and total transaction amount?",
        "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
    },
    "interaction": [
        {
            "utterance": "What is the average transaction amount ?",
            "sql": "select avg ( financial_transactions.transaction_amount )"
        },
        {
            "utterance": "What is the total transaction amount ?",
            "sql": "select sum ( financial_transactions.transaction_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 12,
    "final": {
        "utterance": "Show card type codes with at least 5 cards.",
        "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "Show card types with at least 5 cards ?",
            "sql": "select customers_cards.card_type_code group_by customers_cards.card_type_code having count ( customers_cards.* ) > = value"
        },
        {
            "utterance": "What are their ids ? | Do you mean card ids for all cards ? | yes",
            "sql": "select customers_cards.card_id"
        },
        {
            "utterance": "What card type did customer number 14 use ?",
            "sql": "select customers_cards.card_type_code where customers_cards.customer_id = value"
        },
        {
            "utterance": "How about customer number 6 ?",
            "sql": "select customers_cards.card_type_code where customers_cards.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the customer id with most number of cards, and how many does he have?",
        "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many on the customers cards table | Do you mean the amount of customer cards ? | yes exactly",
            "sql": "select count ( customers_cards.* )"
        },
        {
            "utterance": "what is the 4560596484842 of customer id | The customer_id is 14 | what is the customer id with most number of cards , and how many does he have ?",
            "sql": "select customers_cards.customer_id , count ( customers_cards.* ) group_by customers_cards.customer_id order_by count ( customers_cards.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 14,
    "final": {
        "utterance": "How many cards does customer Art Turcotte have?",
        "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "list out the customers first name",
            "sql": "select customers.customer_first_name"
        },
        {
            "utterance": "what is the card number of Aniyah | Do you mean the customer with first name Aniyah | exactly",
            "sql": "select customers_cards.card_number where customers.customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 15,
    "final": {
        "utterance": "How many cards does customer Art Turcotte have?",
        "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "What is his customer id ?",
            "sql": "select customers.customer_id where customers.customer_first_name = value and customers.customer_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which game type has most number of games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the Gtype of the GameID 1 ?",
            "sql": "select video_games.gtype where video_games.gameid = value"
        },
        {
            "utterance": "What is the GameID of the GName RNG Stone ?",
            "sql": "select video_games.gtype where video_games.gameid = value"
        },
        {
            "utterance": "Tell me the GName of the GType Role-playing game ?",
            "sql": "select video_games.gname where video_games.gtype = value"
        },
        {
            "utterance": "Which game type has most number of games ?",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the first name and last name of the student who have most number of sports?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are playing multiple sports ?",
            "sql": "select count ( sportsinfo.* ) ( select sportsinfo.* group_by sportsinfo.stuid having count ( sportsinfo.* ) > value )"
        },
        {
            "utterance": "What are the names of the two students who are playing multiple sports ?",
            "sql": "select student.fname , student.lname group_by sportsinfo.stuid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all advisors who have at least two students.",
        "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "can you please show me all the advisors ?",
            "sql": "select student.advisor"
        },
        {
            "utterance": "show me all advisors who does not have at least two students ?",
            "sql": "select student.advisor group_by student.advisor having count ( student.* ) < value"
        },
        {
            "utterance": "which advisors have at least two students ?",
            "sql": "select student.advisor group_by student.advisor having count ( student.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Show total hours per week and number of games played for student David Shieber.",
        "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\""
    },
    "interaction": [
        {
            "utterance": "How many hours per week did David Shieber play ? | Do you mean the total hours per week did David Shieber play ? ( He can play different sports ) | Yes , total hours",
            "sql": "select sum ( sportsinfo.hoursperweek ) where student.fname = value and student.lname = value"
        },
        {
            "utterance": "What are the total number of games he played ?",
            "sql": "select sum ( sportsinfo.gamesplayed ) where student.fname = value and student.lname = value"
        },
        {
            "utterance": "What are the first and last names of the student who played the most total hours per week ?",
            "sql": "select student.fname , student.lname where student.stuid = ( select sportsinfo.stuid group_by sportsinfo.stuid order_by sum ( sportsinfo.hoursperweek ) desc limit_value )"
        },
        {
            "utterance": "How many total games did she play ?",
            "sql": "select sum ( sportsinfo.gamesplayed ) group_by sportsinfo.stuid order_by sum ( sportsinfo.hoursperweek ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all game names played by at least 1000 hours.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000"
    },
    "interaction": [
        {
            "utterance": "What are the names of all games that were played for at least 1000 hours ?",
            "sql": "select video_games.gname group_by plays_games.gameid having sum ( plays_games.hours_played ) > = value"
        },
        {
            "utterance": "What are the names of all games that were played for less than 1000 hours ?",
            "sql": "select video_games.gname group_by plays_games.gameid having sum ( plays_games.hours_played ) < value"
        },
        {
            "utterance": "What are the average hours played for each game type ?",
            "sql": "select video_games.gtype , avg ( plays_games.hours_played ) group_by video_games.gtype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show student ids who don't have any sports.",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo"
    },
    "interaction": [
        {
            "utterance": "Can you show me the student names with ids ?",
            "sql": "select student.stuid , student.lname , student.fname"
        },
        {
            "utterance": "Hmm , can you list the student ids with sports played ?",
            "sql": "select sportsinfo.stuid , sportsinfo.sportname"
        },
        {
            "utterance": "I want to know the student names and ids who don \u2019 t play any sports .",
            "sql": "select student.stuid , student.lname , student.fname where student.stuid not in ( select sportsinfo.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the game name that has most number of hours played.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What game had the most hours played ?",
            "sql": "select video_games.gname group_by plays_games.gameid order_by sum ( plays_games.hours_played ) desc limit_value"
        },
        {
            "utterance": "Who played the most hours of Works of Widenius ?",
            "sql": "select plays_games.stuid where video_games.gname = value order_by plays_games.hours_played desc limit_value"
        },
        {
            "utterance": "How many students play Works of Widenius ?",
            "sql": "select count ( distinct plays_games.stuid ) where video_games.gname = value"
        },
        {
            "utterance": "What game type is Works of Widenius ?",
            "sql": "select video_games.gtype where video_games.gname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show total hours per week and number of games played for students under 20.",
        "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20"
    },
    "interaction": [
        {
            "utterance": "What are the number of games played for students under the age of 20 ?",
            "sql": "select sum ( sportsinfo.gamesplayed ) where student.age < value"
        },
        {
            "utterance": "What are the total hours per week students under the age of 20 played games ?",
            "sql": "select sum ( sportsinfo.hoursperweek ) where student.age < value"
        },
        {
            "utterance": "What is the most common sport name those students played ?",
            "sql": "select sportsinfo.sportname , count ( sportsinfo.* ) where sportsinfo.stuid in ( select student.stuid where student.age < value ) group_by sportsinfo.sportname order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which game type has most number of games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list all the game type",
            "sql": "select video_games.gtype"
        },
        {
            "utterance": "list the name of a shooting game . | Do you mean `` First-person shooter '' games ? | yes i mean `` first-person shooter '' game ?",
            "sql": "select video_games.gname where video_games.gtype = value"
        },
        {
            "utterance": "which game type has least number of games ?",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* ) asc limit_value"
        },
        {
            "utterance": "Which game type has most number of games ?",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Show student ids who are female and play football.",
        "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""
    },
    "interaction": [
        {
            "utterance": "show student ids who are female and play football",
            "sql": "select student.stuid where student.sex = value intersect select sportsinfo.stuid where sportsinfo.sportname = value"
        },
        {
            "utterance": "what is the name of the student with the id 1002 | Would you like first name and last name of the student with student id 1002 ? | yes",
            "sql": "select student.fname , student.lname where student.stuid = value"
        },
        {
            "utterance": "what is the first name and last name of the student with the student id 1003",
            "sql": "select student.fname , student.lname where student.stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the game name that has most number of hours played.",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the game name that has most number of hours played .",
            "sql": "select video_games.gname group_by plays_games.gameid order_by sum ( plays_games.hours_played ) desc limit_value"
        },
        {
            "utterance": "Show the game that least number of hours played .",
            "sql": "select video_games.gname group_by plays_games.gameid order_by sum ( plays_games.hours_played ) asc limit_value"
        },
        {
            "utterance": "how many student played the game ? | Would you like to know how many entries in the plays games table correspond to The Vanishing of Eric Calder ? | yes",
            "sql": "select count ( * ) where video_games.gname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Show ids of students who play video game and play sports.",
        "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"
    },
    "interaction": [
        {
            "utterance": "Please show me the ids of the students who play video games and play sports ?",
            "sql": "select sportsinfo.stuid intersect select plays_games.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show last names for all student who are on scholarship.",
        "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "How many students are on scholarship ?",
            "sql": "select count ( * ) where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What are the last names for those students ?",
            "sql": "select student.lname where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.fname where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What are their majors ?",
            "sql": "select student.major where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What sport name do they play ?",
            "sql": "select sportsinfo.sportname where sportsinfo.onscholarship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many games are played for all football games by students on scholarship?",
        "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "list number of games played by students",
            "sql": "select sum ( sportsinfo.gamesplayed )"
        },
        {
            "utterance": "how many of those are played by students on scholarship ?",
            "sql": "select sum ( sportsinfo.gamesplayed ) where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "list all the names of the sports available",
            "sql": "select distinct sportsinfo.sportname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show student ids who are female and play football.",
        "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""
    },
    "interaction": [
        {
            "utterance": "which students are female ? | Do you want the ids of students who are female ? | yes",
            "sql": "select student.stuid where student.sex = value"
        },
        {
            "utterance": "now give me the student ids of people who play football",
            "sql": "select sportsinfo.stuid where sportsinfo.sportname = value"
        },
        {
            "utterance": "show me the ids of the students that are both female and play football",
            "sql": "select student.stuid where student.sex = value intersect select sportsinfo.stuid where sportsinfo.sportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10"
    },
    "interaction": [
        {
            "utterance": "Show all student IDs with more than a total of 10 hours per week on all sports played please .",
            "sql": "select sportsinfo.stuid group_by sportsinfo.stuid having sum ( sportsinfo.hoursperweek ) > value"
        },
        {
            "utterance": "Which of those were just football ?",
            "sql": "select sportsinfo.stuid where sportsinfo.sportname = value"
        },
        {
            "utterance": "What 's the average hours per week all students played football ?",
            "sql": "select avg ( sportsinfo.hoursperweek ) where sportsinfo.sportname = value"
        },
        {
            "utterance": "What 's the average hours per week all students played athletics ?",
            "sql": "select avg ( sportsinfo.hoursperweek )"
        },
        {
            "utterance": "What are all sports names ?",
            "sql": "select distinct sportsinfo.sportname"
        },
        {
            "utterance": "What 's the average hours per week all students played Lacrosse ?",
            "sql": "select avg ( sportsinfo.hoursperweek ) where sportsinfo.sportname = value"
        },
        {
            "utterance": "What are the student IDs of those students ?",
            "sql": "select sportsinfo.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Show ids of students who play video game and play sports.",
        "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"
    },
    "interaction": [
        {
            "utterance": "Which students play video games ?",
            "sql": "select distinct plays_games.stuid"
        },
        {
            "utterance": "How about students who play sports ?",
            "sql": "select distinct sportsinfo.stuid"
        },
        {
            "utterance": "Show ids of students who play video games and sports ?",
            "sql": "select sportsinfo.stuid intersect select plays_games.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Show all game names played by Linda Smith",
        "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\""
    },
    "interaction": [
        {
            "utterance": "Which game names were played by Linda Smith ?",
            "sql": "select video_games.gname where student.lname = value and student.fname = value"
        },
        {
            "utterance": "What is the Gtype of RGN Stone ?",
            "sql": "select video_games.gtype where video_games.gname = value"
        },
        {
            "utterance": "What is the city code of Student Shiela Jones ?",
            "sql": "select student.city_code where student.lname = value and student.fname = value"
        },
        {
            "utterance": "How many Hours Played do The Vanishing of Eric Calde hasr ?",
            "sql": "select plays_games.hours_played where video_games.gname = value"
        },
        {
            "utterance": "What are the Student names who have played Gname The Vanishing of Eric Calder .",
            "sql": "select student.fname , student.lname where video_games.gname = value"
        },
        {
            "utterance": "What is the total Hours Played of all Students ?",
            "sql": "select sum ( plays_games.hours_played )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the last and first name of students who are playing Football or Lacrosse.",
        "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""
    },
    "interaction": [
        {
            "utterance": "How many students play football ?",
            "sql": "select count ( * ) where sportsinfo.sportname = value"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select student.lname , student.fname where sportsinfo.sportname = value"
        },
        {
            "utterance": "How many students play Lacrosse ?",
            "sql": "select count ( * ) where sportsinfo.sportname = value"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select student.lname , student.fname where sportsinfo.sportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.",
        "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")"
    },
    "interaction": [
        {
            "utterance": "Age and sex of Smith Linda ? | The age and sex of the student whose last name is Smith and first name is Linda are 18 and F respectively . | What type of game is 'The Vanishing of Eric Calder ' ?",
            "sql": "select video_games.gtype where video_games.gname = value"
        },
        {
            "utterance": "Give the hours played by Kim Tracy ?",
            "sql": "select plays_games.hours_played where student.lname = value and student.fname = value"
        },
        {
            "utterance": "City code of Jones Shiela ? | Do you mean the city code of the student whose first name is Shiela and last name is Jones ? | Yes",
            "sql": "select student.city_code where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which game type has least number of games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many game types do you have ?",
            "sql": "select count ( distinct video_games.gtype )"
        },
        {
            "utterance": "What is the average number of games in all game types ?",
            "sql": "select video_games.gtype , count ( video_games.* ) group_by video_games.gtype"
        },
        {
            "utterance": "Finally , which game type has the least number of games ?",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Show all student IDs with the number of sports and total number of games played",
        "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID"
    },
    "interaction": [
        {
            "utterance": "Could you please show me all the student IDs with the number of sports ?",
            "sql": "select sportsinfo.stuid , count ( sportsinfo.* ) group_by sportsinfo.stuid"
        },
        {
            "utterance": "Could you add the total number of games played to that table please ?",
            "sql": "select sportsinfo.stuid , count ( sportsinfo.* ) , sum ( sportsinfo.gamesplayed ) group_by sportsinfo.stuid"
        },
        {
            "utterance": "How many students are on scholarships ?",
            "sql": "select count ( distinct sportsinfo.stuid ) where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What is the most common sports name ?",
            "sql": "select sportsinfo.sportname group_by sportsinfo.sportname order_by count ( sportsinfo.* ) desc limit_value"
        },
        {
            "utterance": "What is the name of the sport the student with the most hours per week played ?",
            "sql": "select sportsinfo.sportname order_by sportsinfo.hoursperweek desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the average, minimum, and maximum age for different majors.",
        "sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major"
    },
    "interaction": [
        {
            "utterance": "what is the lname of linda",
            "sql": "select student.lname where student.fname = value"
        },
        {
            "utterance": "what is the age of linda",
            "sql": "select student.age where student.fname = value"
        },
        {
            "utterance": "what is the age of kim",
            "sql": "select student.age where student.lname = value"
        },
        {
            "utterance": "what is the sex of age 18",
            "sql": "select distinct student.sex where student.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Which sport has most number of students on scholarship?",
        "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many SportName on scholarship ?",
            "sql": "select count ( distinct sportsinfo.sportname ) where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What are these 7 different sports that have student on scholarship ?",
            "sql": "select distinct sportsinfo.sportname where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "which sport has most number of students on scholarship ?",
            "sql": "select sportsinfo.sportname where sportsinfo.onscholarship = value group_by sportsinfo.sportname order_by count ( sportsinfo.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 0,
    "final": {
        "utterance": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";"
    },
    "interaction": [
        {
            "utterance": "how many screen mode there",
            "sql": "select count ( screen_mode.* )"
        },
        {
            "utterance": "how many phone there",
            "sql": "select count ( phone.* )"
        },
        {
            "utterance": "what is the company name of XPERIA T , XPERIA J",
            "sql": "select phone.company_name where phone.hardware_model_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the average ram mib size of the chip models that are never used by any phone.",
        "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)"
    },
    "interaction": [
        {
            "utterance": "Find the average ram mib size of the chip models that are never used by any phone",
            "sql": "select avg ( chip_model.ram_mib ) where chip_model.model_name not in ( select phone.chip_model )"
        },
        {
            "utterance": "How many chips is that which are never used by any phone ?",
            "sql": "select count ( chip_model.* ) where chip_model.model_name not in ( select phone.chip_model )"
        },
        {
            "utterance": "Give me all their model names and ram mib",
            "sql": "select chip_model.model_name , chip_model.ram_mib where chip_model.model_name not in ( select phone.chip_model )"
        },
        {
            "utterance": "How many chips used by phones have a ram mib higher or equal to 64",
            "sql": "select count ( chip_model.* ) where chip_model.model_name in ( select phone.chip_model ) and chip_model.ram_mib > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the maximum, minimum and average number of used kb in screen mode.",
        "sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;"
    },
    "interaction": [
        {
            "utterance": "Can you list the maximum number of used kb in screen mode ?",
            "sql": "select max ( screen_mode.used_kb )"
        },
        {
            "utterance": "How about the minimum too ?",
            "sql": "select min ( screen_mode.used_kb )"
        },
        {
            "utterance": "Could you get me the average as well , please ?",
            "sql": "select avg ( screen_mode.used_kb )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    "interaction": [
        {
            "utterance": "How large is the ROM ? | What do you mean by ROM ? | When the `` Nokia Corporation '' company produces phones , what is the average ROM size implemented into a certain phone .",
            "sql": "select chip_model.rom_mib where phone.company_name = value order_by chip_model.rom_mib desc limit_value"
        },
        {
            "utterance": "What is the smallest ROM size of any phone made by company Nokia ?",
            "sql": "select chip_model.rom_mib where phone.company_name = value order_by chip_model.rom_mib limit_value"
        },
        {
            "utterance": "What is the average ROM size of a phone made by company Nokia ?",
            "sql": "select avg ( chip_model.rom_mib ) where phone.company_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the name of the company that produced more than one phone model.",
        "sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;"
    },
    "interaction": [
        {
            "utterance": "List the name of the company that produces more than one phone model .",
            "sql": "select phone.company_name group_by phone.company_name having count ( phone.* ) > value"
        },
        {
            "utterance": "Hmmm . Please list the name of the company that produces only one phone model .",
            "sql": "select phone.company_name group_by phone.company_name having count ( phone.* ) = value"
        },
        {
            "utterance": "Ok. Can you show me the models produced by Nokia Corporation ?",
            "sql": "select phone.hardware_model_name where phone.company_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'"
    },
    "interaction": [
        {
            "utterance": "How many phones are on the list ?",
            "sql": "select count ( phone.* )"
        },
        {
            "utterance": "How many different chip models are there ?",
            "sql": "select count ( chip_model.* )"
        },
        {
            "utterance": "How many chip models are not being used in phones with full accreditation ?",
            "sql": "select chip_model.model_name except select phone.chip_model where phone.accreditation_type = value"
        },
        {
            "utterance": "What are the names of the chip models not used in full accreditation phones ?",
            "sql": "select chip_model.model_name except select phone.chip_model where phone.accreditation_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'"
    },
    "interaction": [
        {
            "utterance": "what are all the pixels are presented on the table",
            "sql": "select screen_mode.pixels"
        },
        {
            "utterance": "how many screen modes on the table",
            "sql": "select count ( screen_mode.* )"
        },
        {
            "utterance": "which phone has the highest screen mode on the table",
            "sql": "select phone.* where phone.screen_mode = ( select max ( phone.screen_mode ) )"
        },
        {
            "utterance": "list out the chip models on the table",
            "sql": "select phone.chip_model"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "sql": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';"
    },
    "interaction": [
        {
            "utterance": "how many phones are presented on the table | Did you mean to ask for the number of entries in the table phone ? | exactly",
            "sql": "select count ( phone.* )"
        },
        {
            "utterance": "list out the company name",
            "sql": "select phone.company_name"
        },
        {
            "utterance": "list the hardware model name",
            "sql": "select phone.hardware_model_name"
        },
        {
            "utterance": "what is the chip model of XPERIA T , XPERIA J",
            "sql": "select phone.chip_model where phone.hardware_model_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the accreditation level that more than 3 phones use.",
        "sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "Tell me the chip model which has screen mode greater than 2.0 ? And also tell me the company name of that ...",
            "sql": "select phone.chip_model , phone.company_name where phone.screen_mode > value"
        },
        {
            "utterance": "Find the accreditation level that more than 3 phones use .",
            "sql": "select phone.accreditation_level group_by phone.accreditation_level having count ( phone.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 9,
    "final": {
        "utterance": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";"
    },
    "interaction": [
        {
            "utterance": "What is the hardware model name for the phones that were produced by `` Nokia Corporation '' but whose screen mode type is not Text ?",
            "sql": "select distinct phone.hardware_model_name where phone.company_name = value and screen_mode.type != value"
        },
        {
            "utterance": "What are the pixels of those ?",
            "sql": "select distinct screen_mode.pixels where phone.company_name = value and screen_mode.type != value"
        },
        {
            "utterance": "What are the char cells of those ?",
            "sql": "select distinct screen_mode.char_cells where phone.company_name = value and screen_mode.type != value"
        },
        {
            "utterance": "What are the used kb of those ?",
            "sql": "select distinct screen_mode.used_kb where phone.company_name = value and screen_mode.type != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the names of the swimmers who have no record.",
        "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
    },
    "interaction": [
        {
            "utterance": "How many swimmers are there with record ?",
            "sql": "select count ( distinct record.swimmer_id )"
        },
        {
            "utterance": "How about swimmers with no record ?",
            "sql": "select count ( swimmer.* ) where swimmer.id not in ( select record.swimmer_id )"
        },
        {
            "utterance": "What their names ?",
            "sql": "select swimmer.name where swimmer.id not in ( select record.swimmer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the event that happened in the most recent year?",
        "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list all events that happened in 2018 ?",
            "sql": "select event.name where event.year = value"
        },
        {
            "utterance": "Can you list all the events that happened within the last 5 years ?",
            "sql": "select event.name where event.year > = value"
        },
        {
            "utterance": "Can you sort the list to only include the most recent event ?",
            "sql": "select event.name order_by event.year desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all the swimmers who have won more than once ?",
            "sql": "select swimmer.name where record.result = value group_by record.swimmer_id having count ( * ) > value"
        },
        {
            "utterance": "What are their nationalities ?",
            "sql": "select swimmer.nationality where record.result = value group_by record.swimmer_id having count ( * ) > value"
        },
        {
            "utterance": "Can you list the names and nationalities of the swimmers who have never won ?",
            "sql": "select swimmer.name , swimmer.nationality where record.result = value except select swimmer.name , swimmer.nationality where record.result = value group_by record.swimmer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 3,
    "final": {
        "utterance": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000"
    },
    "interaction": [
        {
            "utterance": "Hello , are there any countries that have two or more stadiums ?",
            "sql": "select stadium.country group_by stadium.country having count ( stadium.* ) > = value"
        },
        {
            "utterance": "What countries have a stadium with a copacity greather than 60000 ?",
            "sql": "select distinct stadium.country where stadium.capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 4,
    "final": {
        "utterance": "List countries that have more than one swimmer.",
        "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List the countries more than two swimmer ?",
            "sql": "select swimmer.nationality group_by swimmer.nationality having count ( swimmer.* ) > value"
        },
        {
            "utterance": "what is the name of swimmer with id 5 ?",
            "sql": "select swimmer.name where swimmer.id = value"
        },
        {
            "utterance": "whats is nationality of the craif colbertaldo ?",
            "sql": "select swimmer.nationality where swimmer.name = value"
        },
        {
            "utterance": "how many swimmer in the list ?",
            "sql": "select count ( swimmer.id )"
        },
        {
            "utterance": "what is the name of the swimmer id 4 ?",
            "sql": "select swimmer.name where swimmer.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of stadiums that some Australian swimmers have been to.",
        "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'"
    },
    "interaction": [
        {
            "utterance": "What are the names of stadiums that some Australian swimmers have been to ?",
            "sql": "select stadium.name where swimmer.nationality = value"
        },
        {
            "utterance": "Who were the Australian swimmers ?",
            "sql": "select swimmer.name where swimmer.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of stadiums that the most swimmers have been to.",
        "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the names of stadiums that the least swimmers have been to ?",
            "sql": "select stadium.name group_by event.stadium_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many events in this table ?",
            "sql": "select count ( event.name )"
        },
        {
            "utterance": "How many stadiums in this table ?",
            "sql": "select count ( stadium.name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the swimmer who has at least 2 records.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the swimmer names and their times ?",
            "sql": "select swimmer.name , swimmer.time"
        },
        {
            "utterance": "Hmm , I also want to know their record times and the related events .",
            "sql": "select swimmer.time , record.event_id"
        },
        {
            "utterance": "Please tell me the name of the swimmer who has at least 2 records .",
            "sql": "select swimmer.name group_by record.swimmer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the stadium which held the most events?",
        "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many names in the event table",
            "sql": "select count ( event.name )"
        },
        {
            "utterance": "how many capacity in the stadium table",
            "sql": "select count ( distinct stadium.capacity )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of the swimmer who has the most records.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the swimmer who has the greatest number of records ?",
            "sql": "select swimmer.name group_by record.swimmer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What about the least number of records ?",
            "sql": "select swimmer.name group_by record.swimmer_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "What are the nationalities of swimmers `` Grant Hackett '' and `` Craig Stevens '' ?",
            "sql": "select swimmer.nationality where swimmer.name = value or swimmer.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'"
    },
    "interaction": [
        {
            "utterance": "Can you find me the names of all the swimmers who have `` win '' results in the record ?",
            "sql": "select swimmer.name where record.result = value"
        },
        {
            "utterance": "Can you find me the names of all the swimmers who have `` loss '' results in the record ?",
            "sql": "select swimmer.name where record.result = value"
        },
        {
            "utterance": "Can you find me the names of all the swimmers who have both `` win '' and `` loss '' results in the record ?",
            "sql": "select swimmer.name where record.result = value intersect select swimmer.name where record.result = value"
        },
        {
            "utterance": "What are these three swimmers ' nationalities ?",
            "sql": "select swimmer.name , swimmer.nationality where record.result = value intersect select swimmer.name , swimmer.nationality where record.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 11,
    "final": {
        "utterance": "Which country has at most 3 stadiums listed?",
        "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3"
    },
    "interaction": [
        {
            "utterance": "What countries own stadiums ?",
            "sql": "select stadium.country group_by stadium.country having count ( stadium.* ) > = value"
        },
        {
            "utterance": "how many cities have stadiums ?",
            "sql": "select count ( distinct stadium.city )"
        },
        {
            "utterance": "What country has at max 3 stadiums ?",
            "sql": "select stadium.country group_by stadium.country having count ( stadium.* ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)"
    },
    "interaction": [
        {
            "utterance": "hi . what is the average capacity of the stadiums ?",
            "sql": "select avg ( stadium.capacity )"
        },
        {
            "utterance": "and how many stadiums are there whose capacity is smaller than the average capacity ?",
            "sql": "select count ( stadium.* ) where stadium.capacity < ( select avg ( stadium.capacity ) )"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select stadium.name where stadium.capacity < ( select avg ( stadium.capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the stadium that has the maximum capacity.",
        "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the stadium with the maximum capacity",
            "sql": "select stadium.name order_by stadium.capacity desc limit_value"
        },
        {
            "utterance": "in what city is Nou Mestalla",
            "sql": "select stadium.city where stadium.name = value"
        },
        {
            "utterance": "what country is Nou Mestalla in ?",
            "sql": "select stadium.country where stadium.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 14,
    "final": {
        "utterance": "Which countries do not have a stadium that was opened after 2006?",
        "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006"
    },
    "interaction": [
        {
            "utterance": "what is the name of the countries that do not have a stadium that was opened after 2006 ?",
            "sql": "select stadium.country except select stadium.country where stadium.opening_year > value"
        },
        {
            "utterance": "what is the capacity for England ? | You mean the stadium in England ? | yes",
            "sql": "select stadium.capacity where stadium.country = value"
        },
        {
            "utterance": "in what city is the stadium in England ?",
            "sql": "select stadium.city where stadium.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of aircrafts and that did not win any match.",
        "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)"
    },
    "interaction": [
        {
            "utterance": "Which aircraft did not win any match ? | What information do you want about the aircrafts ? Their names , their ids , or all their information ? | Their names .",
            "sql": "select aircraft.aircraft where aircraft.aircraft_id not in ( select match.winning_aircraft )"
        },
        {
            "utterance": "Which pilot won the most matches ?",
            "sql": "select match.winning_pilot group_by match.winning_pilot order_by count ( match.* ) desc limit_value"
        },
        {
            "utterance": "Which aircraft won the most matches ?",
            "sql": "select match.winning_aircraft group_by match.winning_aircraft order_by count ( match.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 1,
    "final": {
        "utterance": "what is the name and age of the youngest winning pilot?",
        "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "In which country Swan River ' Perth located ?",
            "sql": "select match.country where match.location = value"
        },
        {
            "utterance": "How old is Mr. Cristian Halvorson II ?",
            "sql": "select pilot.age where pilot.name = value"
        },
        {
            "utterance": "In which country Mina ' Zayid , Abu Dhabi located ?",
            "sql": "select match.country where match.location = value"
        },
        {
            "utterance": "what is the name and age of the oldest winning pilot",
            "sql": "select pilot.name , pilot.age order_by pilot.age desc limit_value"
        },
        {
            "utterance": "where is Flamengo Beach , Rio de Janeiro situated ? | did you want to return its country ? | where its located ?",
            "sql": "select match.country where match.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of aircrafts and that won matches at least twice.",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the names of the aircraft ?",
            "sql": "select aircraft.aircraft"
        },
        {
            "utterance": "And which of those aircraft won a match ?",
            "sql": "select aircraft.aircraft"
        },
        {
            "utterance": "How many have won at least two matches ?",
            "sql": "select aircraft.aircraft group_by match.winning_aircraft having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 3,
    "final": {
        "utterance": "what is the name and age of the youngest winning pilot?",
        "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the Location and Country of the Round 1 ?",
            "sql": "select match.location , match.country where match.round = value"
        },
        {
            "utterance": "What is the pilot id of Prof. Zackery Collins ?",
            "sql": "select pilot.pilot_id where pilot.name = value"
        },
        {
            "utterance": "What is the name and age of the youngest winning pilot ...",
            "sql": "select pilot.name , pilot.age order_by pilot.age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
    },
    "interaction": [
        {
            "utterance": "What are the total number of domestic passengers of airports that contain the word `` London '' ?",
            "sql": "select sum ( airport.domestic_passengers ) where airport.airport_name like value"
        },
        {
            "utterance": "What about with a name like 'Heathrow ' ?",
            "sql": "select sum ( airport.domestic_passengers ) where airport.airport_name like value"
        },
        {
            "utterance": "what about international passengers ?",
            "sql": "select sum ( airport.international_passengers ) where airport.airport_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all information on the airport that has the largest number of international passengers.",
        "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which Airport has the largest number of international passengers ?",
            "sql": "select airport.airport_name order_by airport.international_passengers desc limit_value"
        },
        {
            "utterance": "How many international passengers in that airport ?",
            "sql": "select airport.international_passengers order_by airport.international_passengers desc limit_value"
        },
        {
            "utterance": "Show all information on that airport",
            "sql": "select airport.* order_by airport.international_passengers desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 6,
    "final": {
        "utterance": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    "interaction": [
        {
            "utterance": "please show the name of all the aircrafts .",
            "sql": "select aircraft.aircraft"
        },
        {
            "utterance": "please show the description of the Aircraft Robinson R-22",
            "sql": "select aircraft.description where aircraft.aircraft = value"
        },
        {
            "utterance": "Please show the names of aircrafts associated with airport with name `` London Gatwick '' .",
            "sql": "select aircraft.aircraft where airport.airport_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
    },
    "interaction": [
        {
            "utterance": "How many total domestic passengers were there ?",
            "sql": "select sum ( airport.domestic_passengers )"
        },
        {
            "utterance": "What about international passengers ?",
            "sql": "select sum ( airport.international_passengers )"
        },
        {
            "utterance": "Which airport had the most domestic passengers ?",
            "sql": "select airport.airport_name order_by airport.domestic_passengers desc limit_value"
        },
        {
            "utterance": "What are the total number of Domestic Passengers of airports that contain the word `` London . ''",
            "sql": "select sum ( airport.domestic_passengers ) where airport.airport_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all information on the airport that has the largest number of international passengers.",
        "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Number of international passengers per airport ? | Did you want the names of airports and their number of international passengers ? | Yes please .",
            "sql": "select airport.airport_name , airport.international_passengers"
        },
        {
            "utterance": "Which of these has the largest number of intentional passengers ?",
            "sql": "select airport.airport_name order_by airport.international_passengers desc limit_value"
        },
        {
            "utterance": "Ok. Can you show all the information for London Heathrow airport ?",
            "sql": "select airport.* where airport.airport_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the maximum and minimum number of transit passengers of all aiports.",
        "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport"
    },
    "interaction": [
        {
            "utterance": "What are the maximum number of transit passengers of all airports ?",
            "sql": "select max ( airport.transit_passengers )"
        },
        {
            "utterance": "What are the minimum number of transit passengers of all airports ?",
            "sql": "select min ( airport.transit_passengers )"
        },
        {
            "utterance": "What is the average of all domestic passengers ?",
            "sql": "select avg ( airport.domestic_passengers )"
        },
        {
            "utterance": "What airport name has the highest amount of international passengers ?",
            "sql": "select airport.airport_name order_by airport.international_passengers desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 10,
    "final": {
        "utterance": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "The column `` winning_pilot `` in Table : `` MATCH '' refers to column `` pilot_id '' in Table : `` pilot '' | Did you mean that you want to get Pilot Id ? | Yes",
            "sql": "select distinct pilot.pilot_id"
        },
        {
            "utterance": "find the name and age of the pilot who has won the most number of times among the pilot who are younger than 30",
            "sql": "select pilot.name , pilot.age where pilot.age < value group_by match.winning_pilot order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    "interaction": [
        {
            "utterance": "plese list me about airports | Do you mean the airport ids of all the airports ? | Yes , I just needs the name of aircrafts in airports",
            "sql": "select aircraft.aircraft"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 0,
    "final": {
        "utterance": "How many registed students do each course have? List course name and the number of their registered students?",
        "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
    },
    "interaction": [
        {
            "utterance": "Could you please list each course 's name and the number of its registered students ?",
            "sql": "select courses.course_name , count ( * ) group_by student_course_registrations.course_id"
        },
        {
            "utterance": "What are the student ids of all students who registered for statistics ?",
            "sql": "select student_course_registrations.student_id where courses.course_name = value"
        },
        {
            "utterance": "What are their student details , please ?",
            "sql": "select students.student_details where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the id of students who registered courses or attended courses?",
        "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    "interaction": [
        {
            "utterance": "Please list all IDs of students who have registered courses",
            "sql": "select student_course_registrations.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 2,
    "final": {
        "utterance": "How many students attend course English?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    "interaction": [
        {
            "utterance": "What is the Course Id for English",
            "sql": "select courses.course_id where courses.course_name = value"
        },
        {
            "utterance": "how many different student ids are there ?",
            "sql": "select count ( distinct student_course_attendance.student_id )"
        },
        {
            "utterance": "How many students enrolled in Course ID 302 ?",
            "sql": "select count ( * ) where student_course_attendance.course_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the id of courses which are registered or attended by student whose id is 121?",
        "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
    },
    "interaction": [
        {
            "utterance": "how many courses did the student with id 121 register for ?",
            "sql": "select count ( student_course_registrations.course_id ) where student_course_registrations.student_id = value"
        },
        {
            "utterance": "And how many courses did the student attend ?",
            "sql": "select count ( student_course_attendance.* ) where student_course_attendance.student_id = value"
        },
        {
            "utterance": "show me the id of courses registered or attended by student whose id is 121",
            "sql": "select student_course_registrations.course_id where student_course_registrations.student_id = value union select student_course_attendance.course_id where student_course_attendance.student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 4,
    "final": {
        "utterance": "What is detail of the student who most recently registered course?",
        "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many course id in the table ?",
            "sql": "select count ( distinct student_course_registrations.course_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 5,
    "final": {
        "utterance": "Find id of the candidate who most recently accessed the course?",
        "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "yes | Here are all the candidates ' ids who got assessed . | which of those most recently had an assessment ?",
            "sql": "select candidate_assessments.candidate_id order_by candidate_assessments.assessment_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 6,
    "final": {
        "utterance": "which course has most number of registered students?",
        "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "whats the course id of statistics",
            "sql": "select courses.course_id where courses.course_name = value"
        },
        {
            "utterance": "whats the course description of french",
            "sql": "select courses.course_description where courses.course_name = value"
        },
        {
            "utterance": "which course has most number of registered students ?",
            "sql": "select courses.course_name group_by courses.course_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 7,
    "final": {
        "utterance": "How many courses do the student whose id is 171 attend?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( distinct student_course_attendance.student_id )"
        },
        {
            "utterance": "And the amount of courses ?",
            "sql": "select count ( distinct courses.course_id )"
        },
        {
            "utterance": "And how many courses did student 171 take ?",
            "sql": "select count ( * ) where student_course_attendance.student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 8,
    "final": {
        "utterance": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
    },
    "interaction": [
        {
            "utterance": "Hello , how are you ! Can you provide me with a list of all of the email addresses in this database ?",
            "sql": "select people.email_address"
        },
        {
            "utterance": "Perfect ! Can you update the list to include all of the candidate IDs in addition to these email addresses ?",
            "sql": "select candidates.candidate_id , people.email_address"
        },
        {
            "utterance": "Can you filter this list to show only the row that contains the email address of stanley.monahan @ example.org ?",
            "sql": "select candidates.candidate_id , people.email_address where people.email_address = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 9,
    "final": {
        "utterance": "How many students attend course English?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    "interaction": [
        {
            "utterance": "tell me course name for course id 301 and 302 ?",
            "sql": "select courses.course_name where courses.course_id = value or courses.course_id = value"
        },
        {
            "utterance": "Tell me the date of attendance for the student id 111 and 121 ?",
            "sql": "select student_course_attendance.date_of_attendance where student_course_attendance.student_id = value or student_course_attendance.student_id = value"
        },
        {
            "utterance": "How many students attend course English ?",
            "sql": "select count ( * ) where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 10,
    "final": {
        "utterance": "what is id of students who registered some courses but the least number of courses in these students?",
        "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( student_course_registrations.student_id )"
        },
        {
            "utterance": "what about courses ?",
            "sql": "select count ( student_course_registrations.course_id )"
        },
        {
            "utterance": "how many students registered for just one course",
            "sql": "select count ( student_course_registrations.* ) ( select student_course_registrations.student_id group_by student_course_registrations.student_id having count ( student_course_registrations.* ) = value )"
        },
        {
            "utterance": "what are their ids ?",
            "sql": "select student_course_registrations.student_id group_by student_course_registrations.student_id having count ( student_course_registrations.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 11,
    "final": {
        "utterance": "Find distinct cities of address of students?",
        "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the student names and their associated addresses and cities ? | Hi . The following table is a list of all the student name details and their associated addresses line 1 and cities . | Thank you ! Can you filter the list to show just the rows that correspond with the 3 most recent `` date from '' values ?",
            "sql": "select students.student_details , addresses.city , addresses.line_1 order_by people_addresses.date_from desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the id of the student who most recently registered course 301?",
        "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the id of the students who registered for course 301 ?",
            "sql": "select student_course_attendance.student_id where student_course_attendance.course_id = value"
        },
        {
            "utterance": "Which one of them registered the earliest ?",
            "sql": "select student_course_attendance.student_id where student_course_attendance.course_id = value order_by student_course_attendance.date_of_attendance limit_value"
        },
        {
            "utterance": "Which one registered most recently for that course ?",
            "sql": "select student_course_attendance.student_id where student_course_attendance.course_id = value order_by student_course_attendance.date_of_attendance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 13,
    "final": {
        "utterance": "List the id of students who registered some courses and the number of their registered courses?",
        "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! How many students are there in total ?",
            "sql": "select count ( students.* )"
        },
        {
            "utterance": "Great ! Can you list the ids of these students , and filter the list by only the students who are registered for one or more courses ?",
            "sql": "select distinct students.student_id"
        },
        {
            "utterance": "Awesome ! Can you also add to this list the number of registered courses for each of these students ?",
            "sql": "select students.student_id , count ( * ) group_by students.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    "interaction": [
        {
            "utterance": "What is the name of candidate id 111 ?",
            "sql": "select people.first_name , people.middle_name , people.last_name where candidates.candidate_id = value"
        },
        {
            "utterance": "What is the email address of login id zops ?",
            "sql": "select people.email_address where people.login_name = value"
        },
        {
            "utterance": "What is the assessment date of candidate id 121 ?",
            "sql": "select candidate_assessments.assessment_date where candidate_assessments.candidate_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 15,
    "final": {
        "utterance": "What are all info of students who registered courses but not attended courses?",
        "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    "interaction": [
        {
            "utterance": "Which students did n't attend courses ?",
            "sql": "select student_course_registrations.* where student_course_registrations.student_id not in ( select student_course_attendance.student_id )"
        },
        {
            "utterance": "How about student that did attend courses ?",
            "sql": "select student_course_registrations.* where student_course_registrations.student_id in ( select student_course_attendance.student_id )"
        },
        {
            "utterance": "On what date did the courses start ? | Do you mean the registration date of students or the date of attendance of students ? | Registration date",
            "sql": "select student_course_registrations.registration_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 16,
    "final": {
        "utterance": "List the id of students who attended  statistics courses in the order of attendance date.",
        "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
    },
    "interaction": [
        {
            "utterance": "what is the course id of English course ?",
            "sql": "select courses.course_id where courses.course_name = value"
        },
        {
            "utterance": "name the student ids who attend the statastic course ? in order of attendance date",
            "sql": "select student_course_attendance.student_id where courses.course_name = value order_by student_course_attendance.date_of_attendance"
        },
        {
            "utterance": "what is the date of attendance of the student is 121 ? | the date of attendance of the student with id 121 is 2012-04-09 11:44:34 . | which student id attend english and french both course ?",
            "sql": "select student_course_attendance.student_id where courses.course_name = value intersect select student_course_attendance.student_id where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    "interaction": [
        {
            "utterance": "how many authorship there",
            "sql": "select count ( authors.* )"
        },
        {
            "utterance": "what is the country of University of Oxford",
            "sql": "select inst.country where inst.name = value"
        },
        {
            "utterance": "what is the title of paper ID 200",
            "sql": "select papers.title where papers.paperid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which paper's title contains the word \"Database\"?",
        "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    "interaction": [
        {
            "utterance": "how many papers are presented on the table",
            "sql": "select count ( papers.* )"
        },
        {
            "utterance": "please list out the paper id",
            "sql": "select papers.paperid"
        },
        {
            "utterance": "how many title are presented on the table",
            "sql": "select count ( papers.title )"
        },
        {
            "utterance": "please list out the titles on the table",
            "sql": "select papers.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".",
        "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\""
    },
    "interaction": [
        {
            "utterance": "yes | What information do you want to know about the author ? The ID , first , or last name ? | first and last name",
            "sql": "select authors.fname , authors.lname where papers.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
        "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    "interaction": [
        {
            "utterance": "What are the paper id of Gibbons ?",
            "sql": "select distinct authorship.paperid where authors.lname = value"
        },
        {
            "utterance": "Who studied at Norterstein University ? | did You mean list the name of authors who belong to the institution `` Northeastern University '' | Yes",
            "sql": "select distinct authors.fname , authors.lname where inst.name = value"
        },
        {
            "utterance": "What are the auth id of Ralf ?",
            "sql": "select authors.authid where authors.fname = value"
        },
        {
            "utterance": "Which authors belong to the institution `` Google '' ? Show the first names and last names ?",
            "sql": "select distinct authors.fname , authors.lname where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    "interaction": [
        {
            "utterance": "Hi ! What is the name of the institution that `` Mathias Blume '' is associated with ?",
            "sql": "select distinct inst.name where authors.fname = value and authors.lname = value"
        },
        {
            "utterance": "How many papers does Mathias Blume have authorship of ?",
            "sql": "select count ( authorship.authid ) where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which institution does \"Katsuhiro Ueno\" belong to?",
        "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""
    },
    "interaction": [
        {
            "utterance": "What institution does `` Katsuhiro Ueno '' belong to ?",
            "sql": "select distinct inst.name where authors.fname = value and authors.lname = value"
        },
        {
            "utterance": "What is Katsuhiro Ueno 's author ID ?",
            "sql": "select authors.authid where authors.fname = value and authors.lname = value"
        },
        {
            "utterance": "Okay . What country is Tohoku University located in ?",
            "sql": "select inst.country where inst.name = value"
        },
        {
            "utterance": "What is Tohoku University 's institution ID ?",
            "sql": "select inst.instid where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the organization that has published the largest number of papers.",
        "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the organization that has published the largest number of papers ?",
            "sql": "select inst.name group_by inst.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the Country code for University of Oxford ?",
            "sql": "select inst.country where inst.name = value"
        },
        {
            "utterance": "What is the instID code for University of Oxford ?",
            "sql": "select inst.instid where inst.name = value"
        },
        {
            "utterance": "What is the paperID code for University of Oxford ?",
            "sql": "select distinct papers.paperid where inst.name = value"
        },
        {
            "utterance": "What is the Title of paperID 200 ?",
            "sql": "select papers.title where papers.paperid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the papers published under the institution \"Indiana University\"?",
        "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    "interaction": [
        {
            "utterance": "what is the name of the papers publishes by Indiana University",
            "sql": "select distinct papers.title where inst.name = value"
        },
        {
            "utterance": "what is the paper id ?",
            "sql": "select papers.paperid where papers.title = ( select distinct papers.title where inst.name = value )"
        },
        {
            "utterance": "what is the author count ?",
            "sql": "select count ( authorship.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the organization that has published the largest number of papers.",
        "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the organization that published the greatest number of papers ?",
            "sql": "select inst.name group_by inst.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of the organization that published the least number of papers ?",
            "sql": "select inst.name group_by inst.name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "What are the titles of all the papers Google published ?",
            "sql": "select papers.title where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\""
    },
    "interaction": [
        {
            "utterance": "Which papers were published in an institution in the `` USA '' please ?",
            "sql": "select papers.title where inst.country = value"
        },
        {
            "utterance": "Can you please tell me which ones of those have `` Turon '' as their second author ?",
            "sql": "select papers.title where inst.country = value and authorship.authorder = value and authors.lname = value"
        },
        {
            "utterance": "What is Turon 's author id ?",
            "sql": "select authors.authid where authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the papers published under the institution \"Indiana University\"?",
        "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all paper IDs and paper titles that correspond to `` Indiana University '' ?",
            "sql": "select distinct papers.title , papers.paperid where inst.name = value"
        },
        {
            "utterance": "Great ! Can you please list all of the author Ids that are associated with that paper title ?",
            "sql": "select distinct authorship.authid where papers.title = ( select distinct papers.title where inst.name = value )"
        },
        {
            "utterance": "Great ! Can you tell me what the total number of papers are for each of these author IDs ? ... in other words , how many papers have each of these authors published ?",
            "sql": "select authorship.authid , count ( authorship.* ) group_by authorship.authid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Retrieve the title of the paper that has the largest number of authors.",
        "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    "interaction": [
        {
            "utterance": "What is the title of the paper that has the largest number of authors ?",
            "sql": "select papers.title where authorship.authorder = ( select max ( authorship.authorder ) )"
        },
        {
            "utterance": "How many authors are there ?",
            "sql": "select count ( distinct authorship.authid )"
        },
        {
            "utterance": "What is the title of the paper that has the smallest number of authors ?",
            "sql": "select papers.title where authorship.authorder = ( select min ( authorship.authorder ) )"
        },
        {
            "utterance": "What is the average number of authors for all titles ?",
            "sql": "select authorship.paperid , avg ( authorship.authorder ) group_by authorship.paperid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Retrieve the country that has published the most papers.",
        "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which country published the least papers ?",
            "sql": "select inst.country group_by inst.country order_by count ( * ) limit_value"
        },
        {
            "utterance": "How about country with most papers ?",
            "sql": "select inst.country group_by inst.country order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many papers did it publish ?",
            "sql": "select count ( papers.paperid ) group_by inst.country order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Retrieve the title of the paper that has the largest number of authors.",
        "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    "interaction": [
        {
            "utterance": "What are the titles of the papers ?",
            "sql": "select papers.title"
        },
        {
            "utterance": "Which titles have more than one author ?",
            "sql": "select papers.title where authorship.authorder > value"
        },
        {
            "utterance": "Which title has the most authors ?",
            "sql": "select papers.title where authorship.authorder = ( select max ( authorship.authorder ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""
    },
    "interaction": [
        {
            "utterance": "can you give me the last names of the authors ?",
            "sql": "select authors.lname"
        },
        {
            "utterance": "who authored the paper Binders Unbound ? | What information do you want about the author of the paper Binders Unbound ? | i want their names",
            "sql": "select authors.fname , authors.lname where papers.title = value"
        },
        {
            "utterance": "can you just show me their last names ?",
            "sql": "select authors.lname where papers.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find all the papers published by \"Aaron Turon\".",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    "interaction": [
        {
            "utterance": "Please find all the papers published by `` Aaron Turon '' ?",
            "sql": "select papers.title where authors.fname = value and authors.lname = value"
        },
        {
            "utterance": "Please find all the papers published by `` Ralf Hinze '' ?",
            "sql": "select papers.title where authors.fname = value and authors.lname = value"
        },
        {
            "utterance": "Can you add the paper IDs of those to the table please ?",
            "sql": "select papers.title , papers.paperid where authors.fname = value and authors.lname = value"
        },
        {
            "utterance": "What is the name of the author who wrote the most papers ? | Do you mean the fname or lname ? | Both please",
            "sql": "select authors.lname , authors.fname group_by authors.authid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are the lname and fname of all authors that wrote exactly 1 paper ?",
            "sql": "select authors.lname , authors.fname group_by authors.authid having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Retrieve the country that has published the most papers.",
        "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "retrieve the country that has published the least papers ?",
            "sql": "select inst.country group_by inst.country order_by count ( * ) limit_value"
        },
        {
            "utterance": "retrieve the country that has published the most papers ?",
            "sql": "select inst.country group_by inst.country order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is count of most papers which is USA has published ?",
            "sql": "select inst.country , count ( * ) where inst.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many papers are published by the institution \"Tokohu University\"?",
        "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
    },
    "interaction": [
        {
            "utterance": "What is the number of papers published by Tokohu University",
            "sql": "select count ( distinct papers.title ) where inst.name = value"
        },
        {
            "utterance": "What about the numbers of papers published by University of Oxford ?",
            "sql": "select count ( distinct papers.title ) where inst.name = value"
        },
        {
            "utterance": "Do you have a comparison of how many papers were published by each institution ?",
            "sql": "select inst.name , count ( distinct papers.title ) group_by inst.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of the First and Last names of all authors with the last name of `` Ohori '' ?",
            "sql": "select authors.fname , authors.lname where authors.lname = value"
        },
        {
            "utterance": "Thank you so much ! Can you please provide me with Atsushi Ohori 's author ID ?",
            "sql": "select authors.authid where authors.lname = value and authors.fname = value"
        },
        {
            "utterance": "Can you please provide me with a list of all paper IDs that are associated with author ID 57 ?",
            "sql": "select authorship.paperid where authorship.authid = value"
        },
        {
            "utterance": "Thank you ! Can you provide me with the paper title of PaperID 204 ?",
            "sql": "select papers.title where papers.paperid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id and location of circuits that belong to France or Belgium?",
        "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
    },
    "interaction": [
        {
            "utterance": "Hello , how many circuits belong to France ?",
            "sql": "select count ( circuits.* ) where circuits.country = value"
        },
        {
            "utterance": "Can you please provide their circuit IDs ?",
            "sql": "select circuits.circuitid where circuits.country = value"
        },
        {
            "utterance": "Can you also include the location of these circuits ?",
            "sql": "select circuits.circuitid , circuits.location where circuits.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
    },
    "interaction": [
        {
            "utterance": "Can you provide me with a list of all of the names of the races ?",
            "sql": "select races.name"
        },
        {
            "utterance": "Which of these races are held after 12:00:00 ?",
            "sql": "select races.name where races.time > value"
        },
        {
            "utterance": "Can you list the races that are held before 09:00:00 ?",
            "sql": "select races.name where races.time < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
    },
    "interaction": [
        {
            "utterance": "Hi , What are the unique names of races that are held in Spain ?",
            "sql": "select distinct races.name where circuits.country = value"
        },
        {
            "utterance": "Where is the European Grand Prix held ? | Do you want to return the location , country or latitude and longitude ? | Country please .",
            "sql": "select distinct circuits.country where races.name = value"
        },
        {
            "utterance": "What year was the last European Grand Prix held in Spain ?",
            "sql": "select races.year where circuits.country = value order_by races.year desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
    },
    "interaction": [
        {
            "utterance": "what are race circuits in Spain",
            "sql": "select circuits.name where circuits.country = value"
        },
        {
            "utterance": "races held after 2017",
            "sql": "select races.name where races.year > value"
        },
        {
            "utterance": "races held after 2017 in spain circuits",
            "sql": "select races.name where circuits.country = value and races.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "What are the drivers ' last names who had 11 pit stops and participated in more than 5 race results ?",
            "sql": "select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) = value intersect select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) > value"
        },
        {
            "utterance": "What are the drivers ' last names who had 11 pit stops ?",
            "sql": "select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) = value"
        },
        {
            "utterance": "What are the race ids that the driver with the surname Nakajima was in ?",
            "sql": "select results.raceid where drivers.surname = value"
        },
        {
            "utterance": "How many wins does that driver have ?",
            "sql": "select count ( * ) where drivers.surname = value and results.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "What are the driver 's names ?",
            "sql": "select drivers.forename , drivers.surname"
        },
        {
            "utterance": "How many of them participated in more than 5 races ?",
            "sql": "select count ( * ) ( select ( drivers.driverid ) group_by drivers.driverid having count ( * ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Find the id , forename and number of races of all drivers who have at least participated in two races ?",
            "sql": "select drivers.driverid , drivers.forename , count ( * ) group_by drivers.driverid having count ( * ) > = value"
        },
        {
            "utterance": "What is the driver reference and nationality of Fernando ? | Do you mean the driver reference and nationality of the driver whose forename is Fernando ? | Yes",
            "sql": "select drivers.driverref , drivers.nationality where drivers.forename = value"
        },
        {
            "utterance": "What position and how many wins does the forename Fernando have ? | Do you mean the position of the driver with forename Fernando when he ranked 1 and the number of times that he ranked 1 ? | yes",
            "sql": "select results.position , count ( * ) where drivers.forename = value and results.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id and last name of the driver who participated in the most races after 2010?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id and last name of the driver who participated in the most races after 2010 ?",
            "sql": "select drivers.driverid , drivers.surname where races.year > value group_by drivers.driverid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the id of the driver who participated in the least races after 2010 ?",
            "sql": "select drivers.driverid where races.year > value group_by drivers.driverid order_by count ( * ) limit_value"
        },
        {
            "utterance": "Hmm . Can you also give me his last name .",
            "sql": "select drivers.surname where races.year > value group_by drivers.driverid order_by count ( * ) limit_value"
        },
        {
            "utterance": "Okay . How many races did he participate in ?",
            "sql": "select count ( * ) where races.year > value group_by drivers.driverid order_by count ( * ) limit_value"
        },
        {
            "utterance": "How many races did Hamilton participate in after 2010 ?",
            "sql": "select count ( * ) where races.year > value and drivers.surname = value group_by drivers.driverid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the forename and surname of the driver who has the smallest laptime?",
        "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you give me a list of all of the forenames and surnames of the various drivers ?",
            "sql": "select drivers.forename , drivers.surname"
        },
        {
            "utterance": "Great ! Can you filter this list to show just the forename and surname of the driver who has the smallest lap time ?",
            "sql": "select drivers.forename , drivers.surname order_by laptimes.milliseconds limit_value"
        },
        {
            "utterance": "Perfect ! Can you tell me what the nationality or country of origin of Lewis and Hamilton is ?",
            "sql": "select drivers.nationality where drivers.forename = value and drivers.surname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id and surname of the driver who participated the most number of races?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many drivers are there , total ?",
            "sql": "select count ( drivers.* )"
        },
        {
            "utterance": "of these total drivers , how many countries are represented ?",
            "sql": "select count ( distinct drivers.nationality )"
        },
        {
            "utterance": "and of those 41 countries , which one has the most drivers ?",
            "sql": "select drivers.nationality group_by drivers.nationality order_by count ( drivers.* ) desc limit_value"
        },
        {
            "utterance": "please give me the name of the driver",
            "sql": "select drivers.forename , drivers.surname where drivers.nationality = value order_by results.fastestlapspeed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    "interaction": [
        {
            "utterance": "Hi , how many years has the Monaco Grand Prix been held ? | Would you like the number of distinct years found for races ? | yes please !",
            "sql": "select count ( distinct races.year )"
        },
        {
            "utterance": "okay great - can you tell me the maximum fastest lap speed during this race ?",
            "sql": "select max ( results.fastestlapspeed ) where races.year = value and races.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the id and family name of the driver who has the longest laptime?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name id of the person with the longest laptime ? | Do you mean driver id ? | yes",
            "sql": "select drivers.driverid order_by laptimes.milliseconds desc limit_value"
        },
        {
            "utterance": "what is the date of birth ?",
            "sql": "select drivers.driverid , drivers.dob order_by laptimes.milliseconds desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the name of the race held most recently?",
        "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many races has there been ?",
            "sql": "select count ( races.* )"
        },
        {
            "utterance": "When was the oldest one ? | Did you mean the date | Yes",
            "sql": "select races.date order_by races.date limit_value"
        },
        {
            "utterance": "How about the most recent one ? | Did you just want to know the recent date ? | Yes",
            "sql": "select races.date order_by races.date desc limit_value"
        },
        {
            "utterance": "Actually , can you also give me the name of that race ?",
            "sql": "select races.name , races.date order_by races.date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the name and date of the most recent race?",
        "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list the forename of all races",
            "sql": "select races.name"
        },
        {
            "utterance": "what is the forename of the race that occurred most recently ?",
            "sql": "select races.name , races.date order_by races.date desc limit_value"
        },
        {
            "utterance": "what is its code ? | Do you mean circuit id ? | yes",
            "sql": "select races.name , races.circuitid order_by races.date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"
    },
    "interaction": [
        {
            "utterance": "How many drivers have participated in 30 or fewer races ?",
            "sql": "select count ( * ) ( select drivers.driverid group_by drivers.driverid having count ( * ) < = value )"
        },
        {
            "utterance": "What are the ID 's of those drivers ?",
            "sql": "select drivers.driverid group_by drivers.driverid having count ( * ) < = value"
        },
        {
            "utterance": "How many races did each of these drivers participate in ?",
            "sql": "select drivers.driverid , count ( * ) group_by drivers.driverid"
        },
        {
            "utterance": "How many of those drivers placed in the top 3 of any race ?",
            "sql": "select drivers.driverid group_by drivers.driverid having results.rank < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "Hello , how many drivers are there in total ?",
            "sql": "select count ( drivers.* )"
        },
        {
            "utterance": "Perfect , how many drivers had 11 pit stops and participated in more than 5 total races ?",
            "sql": "select count ( * ) ( select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) = value intersect select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) > value )"
        },
        {
            "utterance": "Okay , which driver had the most amount of pit stops ?",
            "sql": "select drivers.driverid group_by drivers.driverid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
        "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list driver iDs for all drivers that had first position in laptime at least twice ?",
            "sql": "select drivers.driverid where laptimes.position = value group_by drivers.driverid having count ( * ) > = value"
        },
        {
            "utterance": "Can you list all driver IDs ?",
            "sql": "select drivers.driverid"
        },
        {
            "utterance": "Can you add to the table the forenames and surnames associated with each driver id ?",
            "sql": "select drivers.driverid , drivers.forename , drivers.surname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50"
    },
    "interaction": [
        {
            "utterance": "Hi , can you please tell me what is the ID of the station whose maximum precipitation is higher than 50 ?",
            "sql": "select station.id group_by weekly_weather.station_id having max ( weekly_weather.precipitation ) > value"
        },
        {
            "utterance": "thank you , could you please also let me know their names and local authorities ?",
            "sql": "select station.id , station.network_name , station.local_authority group_by weekly_weather.station_id having max ( weekly_weather.precipitation ) > value"
        },
        {
            "utterance": "that was quick , thank you again . then could you please let me know if there is any station which has less than 10 maximum precipitation ?",
            "sql": "select station.id group_by weekly_weather.station_id having max ( weekly_weather.precipitation ) < value"
        },
        {
            "utterance": "seems like everybody will have some rain here.. then could you please let me know what is the lowest precipitation we have on the table ?",
            "sql": "select min ( weekly_weather.precipitation )"
        },
        {
            "utterance": "could you please let me know the ID of the stations with 10 precipitation ?",
            "sql": "select station.id where weekly_weather.precipitation = value"
        },
        {
            "utterance": "what would be the name of the station ?",
            "sql": "select station.id , station.network_name where weekly_weather.precipitation = value"
        },
        {
            "utterance": "Then my last inquiry , could you please let me know Amersham 's high temperature and wind speed on Friday ?",
            "sql": "select weekly_weather.high_temperature , weekly_weather.wind_speed_mph where weekly_weather.day_of_week = value and station.network_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the origins from which more than 1 train starts.",
        "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many origin in the train table",
            "sql": "select count ( distinct train.origin )"
        },
        {
            "utterance": "what highest time in the train table",
            "sql": "select train.time order_by train.time desc limit_value"
        },
        {
            "utterance": "how many train number in the train table",
            "sql": "select count ( train.train_number )"
        },
        {
            "utterance": "how many interval in the trail table",
            "sql": "select count ( train.interval )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 2,
    "final": {
        "utterance": "How many trains have 'Express' in their names?",
        "sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\""
    },
    "interaction": [
        {
            "utterance": "how many trains have express in their names ?",
            "sql": "select count ( train.* ) where train.name like value"
        },
        {
            "utterance": "what is the destination for Ananthapuri Express ?",
            "sql": "select train.destination where train.name = value"
        },
        {
            "utterance": "give me the train number",
            "sql": "select train.train_number where train.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of the train whose route runs through greatest number of stations.",
        "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I need to know which train route passes through the most stations , please .",
            "sql": "select train.name group_by route.train_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many stations does this train run through ?",
            "sql": "select count ( * ) group_by route.train_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are the names of those stations ?",
            "sql": "select route.station_id group_by route.train_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME"
    },
    "interaction": [
        {
            "utterance": "Give me the times of all trains that go to Chennai",
            "sql": "select train.time where train.destination = value"
        },
        {
            "utterance": "Show me the numbers of all trains that go to Chennai",
            "sql": "select count ( train.* ) where train.destination = value"
        },
        {
            "utterance": "Show me the train number of all trains that go to Chennai",
            "sql": "select train.train_number where train.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 5,
    "final": {
        "utterance": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME"
    },
    "interaction": [
        {
            "utterance": "What are the times of trains that go to chennai ?",
            "sql": "select train.time where train.destination = value"
        },
        {
            "utterance": "What are the trains names that go to chennai ?",
            "sql": "select train.name where train.destination = value"
        },
        {
            "utterance": "What is the origin of Ananthapuri express ?",
            "sql": "select train.origin where train.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 6,
    "final": {
        "utterance": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "sql": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\""
    },
    "interaction": [
        {
            "utterance": "hi , what is the maximum low temperature at Amersham station ?",
            "sql": "select max ( weekly_weather.low_temperature ) where station.network_name = value"
        },
        {
            "utterance": "on what day was it ? | Did you mean the day of week in weekly weather table | Yes , in what say was the maximum low temperature in Amersham station .",
            "sql": "select weekly_weather.day_of_week where station.network_name = value order_by weekly_weather.low_temperature desc limit_value"
        },
        {
            "utterance": "Can you tell me what is the average precipitation at the Amersham station ?",
            "sql": "select avg ( weekly_weather.precipitation ) where station.network_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 7,
    "final": {
        "utterance": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "sql": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all train names for trains that are associated with the local authority of Chiltern ?",
            "sql": "select distinct train.name where station.local_authority = value"
        },
        {
            "utterance": "That 's great ! Can you update that list to also include all of the arrival times for the trains that have Chiltern listed as their station 's local authority ?",
            "sql": "select train.name , train.time where station.local_authority = value"
        },
        {
            "utterance": "Great ! Finally , can you update this list to also include The train ID and train number for each ?",
            "sql": "select train.name , train.time , train.train_number , route.train_id where station.local_authority = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of trains for each station, as well as the station network name and services.",
        "sql": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"
    },
    "interaction": [
        {
            "utterance": "How many trains are there per station ?",
            "sql": "select route.station_id , count ( * ) group_by route.station_id"
        },
        {
            "utterance": "What are the station network names ?",
            "sql": "select station.network_name"
        },
        {
            "utterance": "What services do they offer ?",
            "sql": "select station.services"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id and local authority of the station with has the highest average high temperature.",
        "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which station has the highest average high temperature ? | Which attributes of this station do you want ? | The station name .",
            "sql": "select station.network_name group_by weekly_weather.station_id order_by avg ( weekly_weather.high_temperature ) desc limit_value"
        },
        {
            "utterance": "What is Charleywood 's ID ?",
            "sql": "select station.id where station.network_name = value"
        },
        {
            "utterance": "What is the local authority of Chorleywood , ID 10 ?",
            "sql": "select station.local_authority where station.network_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the number of trains for each station, as well as the station network name and services.",
        "sql": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"
    },
    "interaction": [
        {
            "utterance": "* I have left the chat *",
            "sql": "select count ( * ) group_by route.station_id"
        },
        {
            "utterance": "what are the station network name and services for these station",
            "sql": "select station.network_name , station.services group_by route.station_id"
        },
        {
            "utterance": "include station id in the list",
            "sql": "select station.network_name , station.services , route.station_id group_by route.station_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 11,
    "final": {
        "utterance": "show the lowest low temperature and highest wind speed in miles per hour.",
        "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather"
    },
    "interaction": [
        {
            "utterance": "Show all the low temperatures .",
            "sql": "select weekly_weather.low_temperature"
        },
        {
            "utterance": "Show the highest low temperature .",
            "sql": "select max ( weekly_weather.low_temperature )"
        },
        {
            "utterance": "Show all the wind speeds in miles per hour .",
            "sql": "select weekly_weather.wind_speed_mph"
        },
        {
            "utterance": "List all the winds speeds in ascending order .",
            "sql": "select weekly_weather.wind_speed_mph order_by weekly_weather.wind_speed_mph"
        },
        {
            "utterance": "Show the lowest low temperature and the highest wind speed in miles per hour .",
            "sql": "select min ( weekly_weather.wind_speed_mph ) , max ( weekly_weather.wind_speed_mph ) order_by weekly_weather.wind_speed_mph"
        },
        {
            "utterance": "What day of the week has the lowest low temperature .",
            "sql": "select weekly_weather.day_of_week , min ( weekly_weather.wind_speed_mph ) order_by weekly_weather.wind_speed_mph"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the id and details of the customers who have at least 3 events?",
        "sql": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "What is the id of the customer with at least 3 events ?",
            "sql": "select ( customers.customer_id ) group_by customers.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the details for the customer with at least 3 events ?",
            "sql": "select customers.customer_details group_by customers.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"
    },
    "interaction": [
        {
            "utterance": "how many Services there",
            "sql": "select count ( services.* )"
        },
        {
            "utterance": "what is the Check of service_id | Do you mean the service_id of all services with service_type_code `` Check '' ? | ok",
            "sql": "select services.service_id where services.service_type_code = value"
        },
        {
            "utterance": "how many Organizations there",
            "sql": "select count ( organizations.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"
    },
    "interaction": [
        {
            "utterance": "I 'm looking for the things with Close status before 2017-06-19 02:59:21 | Do you want things that satisfy both criteria or at least at of them ? And do you want the ids or other ? | I want the number of things in a close status",
            "sql": "select count ( distinct timed_status_of_things.thing_id ) where timed_status_of_things.status_of_thing_code = value"
        },
        {
            "utterance": "of those things which are closed before 2017-06-19 02:59:21 | Do you still want the number of them ? | Yes",
            "sql": "select count ( distinct timed_status_of_things.thing_id ) where timed_status_of_things.status_of_thing_code = value and timed_status_of_things.date_and_date < value"
        },
        {
            "utterance": "What type of thing are all five of those ?",
            "sql": "select distinct things.type_of_thing_code where timed_status_of_things.status_of_thing_code = value and timed_status_of_things.date_and_date < value"
        },
        {
            "utterance": "What is the distinct ID of elctronics or Commen ?",
            "sql": "select distinct things.thing_id where things.type_of_thing_code = value or things.type_of_thing_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 3,
    "final": {
        "utterance": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'"
    },
    "interaction": [
        {
            "utterance": "How many distinct locations have the things with service detail 'Unsatisfied ' been located in ?",
            "sql": "select count ( distinct timed_locations_of_things.location_code ) where things.service_details = value"
        },
        {
            "utterance": "How many type of thing code includes 'Electronics ' ? | Do you mean how many things include type of thing code 'Electronics ' ? | Yes",
            "sql": "select count ( distinct things.thing_id ) where things.type_of_thing_code = value"
        },
        {
            "utterance": "What are the service details of thing id 2 ?",
            "sql": "select things.service_details where things.thing_id = value"
        },
        {
            "utterance": "What is the service type code of thing id 2 ?",
            "sql": "select things.service_type_code where things.thing_id = value"
        },
        {
            "utterance": "What is the location code of thing id 10 and the date and time ?",
            "sql": "select timed_locations_of_things.location_code , timed_locations_of_things.date_and_time where timed_locations_of_things.thing_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 4,
    "final": {
        "utterance": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "sql": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many services has each resident requested",
            "sql": "select residents.resident_id , count ( * ) group_by residents.resident_id"
        },
        {
            "utterance": "List the resident_id , details , and the count in descending order of the count",
            "sql": "select residents.resident_id , residents.other_details , count ( * ) group_by residents.resident_id order_by count ( * ) desc"
        },
        {
            "utterance": "Tell me the count of total number of residents",
            "sql": "select count ( residents.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"
    },
    "interaction": [
        {
            "utterance": "What organization id Denesik and Sons Party ?",
            "sql": "select organizations.organization_id where organizations.organization_details = value"
        },
        {
            "utterance": "What are the service type code of service id 10 ?",
            "sql": "select services.service_type_code where services.service_id = value"
        },
        {
            "utterance": "What organization details of service id 11 ?",
            "sql": "select organizations.organization_details where services.service_id = value"
        },
        {
            "utterance": "What is the distinct service type that are provided by the organization which has detail 'Denesik and Sons Party ' ?",
            "sql": "select distinct services.service_type_code where organizations.organization_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 6,
    "final": {
        "utterance": "Which organizations are not a parent organization of others? List the organization id.",
        "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations"
    },
    "interaction": [
        {
            "utterance": "How many organizations are there ?",
            "sql": "select count ( organizations.organization_id )"
        },
        {
            "utterance": "How many of those organizations are parent organizations ?",
            "sql": "select organizations.organization_id where organizations.organization_id in ( select organizations.parent_organization_id )"
        },
        {
            "utterance": "Could you tell me how many organizations are not parent organizations of others ?",
            "sql": "select count ( organizations.organization_id ) where organizations.organization_id not in ( select organizations.parent_organization_id )"
        },
        {
            "utterance": "What is the full name of that organization ?",
            "sql": "select organizations.organization_id except select organizations.parent_organization_id"
        },
        {
            "utterance": "What about its organization ID ?",
            "sql": "select organizations.organization_id except select organizations.parent_organization_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 7,
    "final": {
        "utterance": "Which events have the number of notes between one and three? List the event id and the property id.",
        "sql": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3"
    },
    "interaction": [
        {
            "utterance": "Which events only have 1 note ?",
            "sql": "select customer_events.customer_event_id group_by customer_events.customer_event_id having count ( * ) = value"
        },
        {
            "utterance": "What about events that have 2 or 3 notes as well ? Can you add those to the list .",
            "sql": "select customer_events.customer_event_id group_by customer_events.customer_event_id having count ( * ) between value and value"
        },
        {
            "utterance": "Can you show all the events that have one , two or three notes with their property ids ?",
            "sql": "select customer_events.customer_event_id , customer_events.property_id group_by customer_events.customer_event_id having count ( * ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 8,
    "final": {
        "utterance": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "sql": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many services has each resident requested ?",
            "sql": "select residents.resident_id , count ( * ) group_by residents.resident_id order_by count ( * ) desc"
        },
        {
            "utterance": "Can you list them in descending order ?",
            "sql": "select residents.resident_id , count ( * ) group_by residents.resident_id order_by count ( * ) desc"
        },
        {
            "utterance": "Can you list the residents by the count of services in descending order by count of services ? | Do you just want the resident ids ? | The resident_id and count of services",
            "sql": "select residents.resident_id , count ( * ) group_by residents.resident_id order_by count ( * ) desc"
        },
        {
            "utterance": "Can you add the resident other detail to the results ?",
            "sql": "select residents.resident_id , residents.other_details , count ( * ) group_by residents.resident_id order_by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"
    },
    "interaction": [
        {
            "utterance": "What is their distinct id and type ?",
            "sql": "select distinct things.thing_id , things.type_of_thing_code where timed_status_of_things.status_of_thing_code = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select distinct things.thing_id , things.type_of_thing_code where timed_status_of_things.status_of_thing_code = value and timed_status_of_things.date_and_date < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 10,
    "final": {
        "utterance": "How many residents does each property have? List property id and resident count.",
        "sql": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id"
    },
    "interaction": [
        {
            "utterance": "how many residents does each property have ? list property id",
            "sql": "select properties.property_id , count ( * ) group_by properties.property_id"
        },
        {
            "utterance": "find the property type code and address for the property id 24",
            "sql": "select properties.property_type_code , properties.property_address where properties.property_id = value"
        },
        {
            "utterance": "find the date moved in for the resident id 6",
            "sql": "select residents.date_moved_in where residents.resident_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the founded year of the newest non public school.",
        "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please show me a list of all of the school names for all schools that are not of the Public affiliation ?",
            "sql": "select university.school where university.affiliation != value"
        },
        {
            "utterance": "Great ! Can you update that list to include the year that the school was founded ?",
            "sql": "select university.school , university.founded where university.affiliation != value"
        },
        {
            "utterance": "Nice ! Can you show me a list of the names of all of the schools ?",
            "sql": "select university.school"
        },
        {
            "utterance": "Wonderful ! Finally , can you update this list to show the affiliation type of each of these schools ?",
            "sql": "select university.school , university.affiliation"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the total and minimum enrollment of all schools?",
        "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university"
    },
    "interaction": [
        {
            "utterance": "Can you show me a list of colleges that have an enrollment of 15,000 or higher ? | Do you want the names of the schools that have an enrollment of 15000 or higher ? | Can you provide the name and the location of the schools that have an enrollment of 15,000 or higher ?",
            "sql": "select university.school , university.location where university.enrollment > value"
        },
        {
            "utterance": "What conference are these schools in ?",
            "sql": "select university.primary_conference where university.school in ( select university.school where university.enrollment > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the schools that were either founded after 1850 or public.",
        "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    "interaction": [
        {
            "utterance": "Hi , when was the University of Delaware founded ?",
            "sql": "select university.founded where university.school = value"
        },
        {
            "utterance": "and Lebanon Valley College ?",
            "sql": "select university.founded where university.school = value"
        },
        {
            "utterance": "What is University of Rhode Island 's affiliation ?",
            "sql": "select university.affiliation where university.school = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the founded year of the newest non public school.",
        "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you tell me how many school have an affiliation type that is not public ?",
            "sql": "select count ( university.* ) where university.affiliation != value"
        },
        {
            "utterance": "Can you please tell me the name of that school and the enrollment ?",
            "sql": "select university.school , university.enrollment where university.affiliation != value"
        },
        {
            "utterance": "What year was that school founded ?",
            "sql": "select university.founded where university.affiliation != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation"
    },
    "interaction": [
        {
            "utterance": "I want to know the number of public universities",
            "sql": "select count ( university.* ) where university.affiliation = value"
        },
        {
            "utterance": "I want to know the number of public universities with over 20000 enrollment size .",
            "sql": "select count ( university.* ) where university.affiliation = value and university.enrollment > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the schools that were either founded after 1850 or public.",
        "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    "interaction": [
        {
            "utterance": "What is the Primary conference of Lebanon Valley College ?",
            "sql": "select university.primary_conference where university.school = value"
        },
        {
            "utterance": "What is the nickname of University of Rhode Island ?",
            "sql": "select university.nickname where university.school = value"
        },
        {
            "utterance": "What is the location of Fightin ' Blue Hens ?",
            "sql": "select university.location where university.nickname = value"
        },
        {
            "utterance": "Find the school that was either founded after 1850 or public .",
            "sql": "select university.school where university.founded > value or university.affiliation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the enrollment and primary_conference of the oldest college.",
        "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which is the oldest college in the table",
            "sql": "select university.school order_by university.founded limit_value"
        },
        {
            "utterance": "what is the enrollment of the conference | The enrollment of the oldest college is 19067.0 . | list the enrollment and primary-conference of the oldest college",
            "sql": "select university.enrollment , university.primary_conference order_by university.founded limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the location and all games score of the school that has Clemson as its team name.",
        "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    "interaction": [
        {
            "utterance": "what location are the clemson teams ?",
            "sql": "select university.location where basketball_match.team_name = value"
        },
        {
            "utterance": "what scores were Clemson 's home games ?",
            "sql": "select basketball_match.all_home where basketball_match.team_name = value"
        },
        {
            "utterance": "How about the road game scores for Clemson ?",
            "sql": "select basketball_match.all_road where basketball_match.team_name = value"
        },
        {
            "utterance": "What about all games score for the Clemson school ?",
            "sql": "select basketball_match.all_games where basketball_match.team_name = value"
        },
        {
            "utterance": "How about for the Duke school ?",
            "sql": "select basketball_match.all_games where basketball_match.team_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the highest acc percent score in the competition?",
        "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the acc percent of each team ?",
            "sql": "select basketball_match.team_id , basketball_match.acc_percent"
        },
        {
            "utterance": "can you tell me what the lowest acc percent score is ?",
            "sql": "select basketball_match.acc_percent order_by basketball_match.acc_percent limit_value"
        },
        {
            "utterance": "what 's the highest acc percent score ?",
            "sql": "select basketball_match.acc_percent order_by basketball_match.acc_percent desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 9,
    "final": {
        "utterance": "Find how many school locations have the word 'NY'.",
        "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    "interaction": [
        {
            "utterance": "Show me the location details",
            "sql": "select university.location"
        },
        {
            "utterance": "Show me the details of the schools",
            "sql": "select university.school"
        },
        {
            "utterance": "Show me how many school locations have the word 'NY '",
            "sql": "select count ( university.* ) where university.location like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 10,
    "final": {
        "utterance": "How many schools do not participate in the basketball match?",
        "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
    },
    "interaction": [
        {
            "utterance": "What is the name of the school that participated in the basketball match ?",
            "sql": "select university.school where university.school_id not in ( select basketball_match.school_id )"
        },
        {
            "utterance": "When was university of Rhode island founded ?",
            "sql": "select university.founded where university.school = value"
        },
        {
            "utterance": "What is the afflilation of university of rhode island ?",
            "sql": "select university.affiliation where university.school = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many schools are there ?",
            "sql": "select count ( university.* )"
        },
        {
            "utterance": "Which school has the highest acc percent score ?",
            "sql": "select university.school order_by basketball_match.acc_percent desc limit_value"
        },
        {
            "utterance": "How about the lowest ?",
            "sql": "select university.school order_by basketball_match.acc_percent limit_value"
        },
        {
            "utterance": "What 's its primary conference ?",
            "sql": "select university.primary_conference order_by basketball_match.acc_percent limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 12,
    "final": {
        "utterance": "When was the school with the largest enrollment founded?",
        "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me the top 3 school with the largest enrollment ?",
            "sql": "select university.* order_by university.enrollment desc limit_value"
        },
        {
            "utterance": "Can you filter that list to show only the school with the largest enrollment ?",
            "sql": "select university.* order_by university.enrollment desc limit_value"
        },
        {
            "utterance": "Thank you ! What athletic conference is Rutgers University in ?",
            "sql": "select university.primary_conference where university.school = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 13,
    "final": {
        "utterance": "When was the school with the largest enrollment founded?",
        "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which school has the largest enrollment ?",
            "sql": "select university.school order_by university.enrollment desc limit_value"
        },
        {
            "utterance": "When was the school founded ?",
            "sql": "select university.founded order_by university.enrollment desc limit_value"
        },
        {
            "utterance": "Where is it located ?",
            "sql": "select university.location order_by university.enrollment desc limit_value"
        },
        {
            "utterance": "How many are enrolled ?",
            "sql": "select university.enrollment order_by university.enrollment desc limit_value"
        },
        {
            "utterance": "What is the school 's nickname ?",
            "sql": "select university.nickname order_by university.enrollment desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
    },
    "interaction": [
        {
            "utterance": "Yes please",
            "sql": "select sum ( university.enrollment )"
        },
        {
            "utterance": "How about the total number of enrollments for just colleges that were founded after the year 1850 ?",
            "sql": "select sum ( university.enrollment ) where university.founded > value"
        },
        {
            "utterance": "How about the total number of enrollments for just colleges that were founded after the year 1850 for each type of affiliation ?",
            "sql": "select university.affiliation , sum ( university.enrollment ) where university.founded > value group_by university.affiliation"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me which school is founded most recently ?",
            "sql": "select university.* order_by university.founded desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of representatives that have not participated in elections listed here.",
        "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
    },
    "interaction": [
        {
            "utterance": "please show me the names of all of the representatives",
            "sql": "select representative.name"
        },
        {
            "utterance": "Now show narrow down the list to just those who have not been involved in an election",
            "sql": "select representative.name where representative.representative_id not in ( select election.representative_id )"
        },
        {
            "utterance": "now show those representatives and what party they are a member of",
            "sql": "select representative.name , representative.party where representative.representative_id not in ( select election.representative_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 1,
    "final": {
        "utterance": "What parties have at least three representatives?",
        "sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "what is the average lifespan of the representatives",
            "sql": "select avg ( representative.lifespan )"
        },
        {
            "utterance": "what parties have at least two representatives",
            "sql": "select representative.party group_by representative.party having count ( representative.* ) > = value"
        },
        {
            "utterance": "what parties have at least three representatives",
            "sql": "select representative.party group_by representative.party having count ( representative.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the life spans of representatives from New York state or Indiana state?",
        "sql": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\""
    },
    "interaction": [
        {
            "utterance": "list the life spans of all representatives",
            "sql": "select representative.lifespan"
        },
        {
            "utterance": "what are the life spans of representatives from New York ?",
            "sql": "select representative.lifespan where representative.state = value"
        },
        {
            "utterance": "what are the life spans of representatives from Indiana ?",
            "sql": "select representative.lifespan where representative.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the party of the representative that has the smallest number of votes.",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many representatives are republicans ?",
            "sql": "select count ( representative.* ) where representative.party = value"
        },
        {
            "utterance": "And democrats ?",
            "sql": "select count ( representative.* ) where representative.party = value"
        },
        {
            "utterance": "WHich representative has the lowest votes ?",
            "sql": "select election.representative_id order_by election.votes asc limit_value"
        },
        {
            "utterance": "What party is this representative in ?",
            "sql": "select representative.party where representative.representative_id = ( select election.representative_id order_by election.votes asc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 4,
    "final": {
        "utterance": "What states have at least two representatives?",
        "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which states have two or more representatives ?",
            "sql": "select representative.state group_by representative.state having count ( representative.* ) > = value"
        },
        {
            "utterance": "What are the names of the representatives from those states ?",
            "sql": "select representative.name where representative.state in ( select representative.state group_by representative.state having count ( representative.* ) > = value )"
        },
        {
            "utterance": "What parties do they belong to ?",
            "sql": "select representative.party where representative.state in ( select representative.state group_by representative.state having count ( representative.* ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the minimum and maximum vote percents of elections?",
        "sql": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election"
    },
    "interaction": [
        {
            "utterance": "what is the minimum vote percent of elections ?",
            "sql": "select min ( election.vote_percent )"
        },
        {
            "utterance": "what is the maximum vote percent of elections ?",
            "sql": "select max ( election.vote_percent )"
        },
        {
            "utterance": "Which election had the most votes ?",
            "sql": "select election.election_id where election.votes = ( select max ( election.votes ) )"
        },
        {
            "utterance": "Which election had the least votes ?",
            "sql": "select election.election_id where election.votes = ( select min ( election.votes ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of representatives in descending order of votes?",
        "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of representatives in descending order of votes please ?",
            "sql": "select representative.name order_by election.votes desc"
        },
        {
            "utterance": "What are their parties ?",
            "sql": "select representative.name , representative.party order_by election.votes desc"
        },
        {
            "utterance": "What states are they from , please ?",
            "sql": "select representative.name , representative.state order_by election.votes desc"
        },
        {
            "utterance": "What are their vote percents ?",
            "sql": "select representative.name , election.vote_percent order_by election.votes desc"
        },
        {
            "utterance": "What about their dates ?",
            "sql": "select representative.name , election.date order_by election.votes desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the countries that have managers of age above 50 or below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46"
    },
    "interaction": [
        {
            "utterance": "Hi , can you please tell me which country has a manager of age above 50 ?",
            "sql": "select manager.country where manager.age > value"
        },
        {
            "utterance": "what about the countries with manager of age below 46 ?",
            "sql": "select manager.country where manager.age < value"
        },
        {
            "utterance": "can you please tell me how many managers Scotland has ?",
            "sql": "select count ( manager.* ) where manager.country = value"
        },
        {
            "utterance": "what about other countries ?",
            "sql": "select count ( manager.* ) , manager.country where manager.country != value group_by manager.country"
        },
        {
            "utterance": "how many level 5 managers does United States have ?",
            "sql": "select count ( manager.* ) where manager.country = value and manager.level = value"
        },
        {
            "utterance": "and can you please tell me their names ?",
            "sql": "select manager.name where manager.country = value and manager.level = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the countries that have managers of age above 50 or below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46"
    },
    "interaction": [
        {
            "utterance": "Show the countries that have managers of age above 50 or below 46 ?",
            "sql": "select manager.country where manager.age > value or manager.age < value"
        },
        {
            "utterance": "What is the least aged Manager 's name on the list ?",
            "sql": "select manager.name order_by manager.age limit_value"
        },
        {
            "utterance": "How many managers are from United States on the list ?",
            "sql": "select count ( manager.* ) where manager.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 2,
    "final": {
        "utterance": "List the object number of railways that do not have any trains.",
        "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
    },
    "interaction": [
        {
            "utterance": "Which railways do not have trains ? | Did you mean the object number of railways that do not have any train ? | Yes",
            "sql": "select railway.objectnumber where railway.railway_id not in ( select train.railway_id )"
        },
        {
            "utterance": "and ones that do ?",
            "sql": "select railway.objectnumber where railway.railway_id in ( select train.railway_id )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select railway.railway where railway.railway_id in ( select train.railway_id )"
        },
        {
            "utterance": "and the names of the railways with no trains ?",
            "sql": "select railway.railway where railway.railway_id not in ( select train.railway_id )"
        },
        {
            "utterance": "when were they built ?",
            "sql": "select railway.built where railway.railway_id not in ( select train.railway_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 3,
    "final": {
        "utterance": "Show id and location of railways that are associated with more than one train.",
        "sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many railway there",
            "sql": "select count ( railway.* )"
        },
        {
            "utterance": "what is the train number of sewagram exp",
            "sql": "select train.train_num where train.name = value"
        },
        {
            "utterance": "what is the location of mr",
            "sql": "select railway.location where railway.railway = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the oldest manager?",
        "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the name of the oldest manager please ?",
            "sql": "select manager.name order_by manager.age desc limit_value"
        },
        {
            "utterance": "What is the name of the manager with the earliest working year ?",
            "sql": "select manager.name order_by manager.working_year_starts asc limit_value"
        },
        {
            "utterance": "Can you list the names of all managers with the highest level ?",
            "sql": "select manager.name where manager.level = ( select max ( manager.level ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the most common builder of railways.",
        "sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , Can you tell me the most common builder of railways ?",
            "sql": "select railway.builder group_by railway.builder order_by count ( railway.* ) desc limit_value"
        },
        {
            "utterance": "Can you tell me the last railways this builder has build ?",
            "sql": "select railway.railway group_by railway.builder having railway.builder = value order_by railway.built desc limit_value"
        },
        {
            "utterance": "In what year was GWRSn build ?",
            "sql": "select railway.built group_by railway.builder having railway.builder = value order_by railway.built desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 6,
    "final": {
        "utterance": "List the object number of railways that do not have any trains.",
        "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
    },
    "interaction": [
        {
            "utterance": "which object railways that do not have any trains ? | Do you mean the object number ? | yes , I apologize . Which object number railways that do not have any trains ?",
            "sql": "select railway.objectnumber where railway.railway_id not in ( select train.railway_id )"
        },
        {
            "utterance": "which one is located in New York . | Do you mean York ? | sorry , yes .",
            "sql": "select railway.objectnumber where railway.railway_id not in ( select train.railway_id ) and railway.location = value"
        },
        {
            "utterance": "which object numbers do have trains ?",
            "sql": "select railway.objectnumber where railway.railway_id in ( select train.railway_id )"
        },
        {
            "utterance": "who is the builder of Object Number 1975-7006 ?",
            "sql": "select railway.builder where railway.objectnumber = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the oldest manager?",
        "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you find the name and age of the oldest manager ?",
            "sql": "select manager.name , manager.age order_by manager.age desc limit_value"
        },
        {
            "utterance": "What year did Todd Hamilton start working ?",
            "sql": "select manager.working_year_starts where manager.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46"
    },
    "interaction": [
        {
            "utterance": "Please show the countries that have both managers of age above 50 , and managers of age below 46",
            "sql": "select manager.country where manager.age > value intersect select manager.country where manager.age < value"
        },
        {
            "utterance": "Please show me the names of all those managers",
            "sql": "select manager.name"
        },
        {
            "utterance": "Please show me the age of the youngest and oldest managers",
            "sql": "select min ( manager.age ) , max ( manager.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the locations that have more than one railways.",
        "sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of the locations that have two or more railways ?",
            "sql": "select railway.location group_by railway.location having count ( railway.* ) > = value"
        },
        {
            "utterance": "When were those built ?",
            "sql": "select railway.built group_by railway.location having count ( railway.* ) > = value"
        },
        {
            "utterance": "What is the location of the most recently built railway ?",
            "sql": "select railway.location order_by railway.built desc limit_value"
        },
        {
            "utterance": "Who is the builder of the railway built earliest ?",
            "sql": "select railway.builder order_by railway.built asc limit_value"
        },
        {
            "utterance": "When was that railway built ?",
            "sql": "select railway.built order_by railway.built asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the id and builder of the railway that are associated with the most trains.",
        "sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which builder has the least trains ?",
            "sql": "select railway.builder group_by train.railway_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the builder with the most trains ?",
            "sql": "select railway.builder group_by train.railway_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is his id ?",
            "sql": "select railway.railway_id group_by train.railway_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name and phone of the customer without any mailshot.",
        "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)"
    },
    "interaction": [
        {
            "utterance": "what form of payment method did customer ID 1 Use ?",
            "sql": "select customers.payment_method where customers.customer_id = value"
        },
        {
            "utterance": "what is customer Wendell address ? | Do you mean the customer address of Wendell | what is the customer address of Wendell ?",
            "sql": "select customers.customer_address where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "sql": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "Can you please provide me with a list of all customer names and phone numbers ?",
            "sql": "select customers.customer_name , customers.customer_phone"
        },
        {
            "utterance": "Can you filter that list of customers to show only those who have 'No Response ' as their outcome code ?",
            "sql": "select customers.customer_name , customers.customer_phone where mailshot_customers.outcome_code = value"
        },
        {
            "utterance": "Can you please provide me with the phone number and email addresses of these five customers ?",
            "sql": "select customers.customer_phone , customers.customer_email where mailshot_customers.outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of customers who have the most mailshots.",
        "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the highest number of mailshots for the customers ?",
            "sql": "select count ( * ) group_by mailshot_customers.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What about the highest mailshot id number ?",
            "sql": "select mailshot_customers.mailshot_id group_by mailshot_customers.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the customer id for that mailshot id ?",
            "sql": "select mailshot_customers.customer_id group_by mailshot_customers.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many mailshots does customer id 1 have ?",
            "sql": "select count ( mailshot_customers.* ) where mailshot_customers.customer_id = value"
        },
        {
            "utterance": "What is the name of customer id 1 ?",
            "sql": "select customers.customer_name where customers.customer_id = value"
        },
        {
            "utterance": "What is the amount of mailshots that Wendell has ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "What are names of customers who have both mailshots in `` order '' outcome ? | Do you want the names of customers who have mailshot with an outcome code `` Order '' ? | Yes",
            "sql": "select customers.customer_name where mailshot_customers.outcome_code = value"
        },
        {
            "utterance": "What are the payment methods of those customers ?",
            "sql": "select customers.payment_method where mailshot_customers.outcome_code = value"
        },
        {
            "utterance": "Show me names and payment methods of customers who have mailshot with an outcome code `` No Response ''",
            "sql": "select customers.customer_name , customers.payment_method where mailshot_customers.outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "what are the names of the payment method of customers who have both mailshot in 'Order ' outcome and mailshot in 'No response ' outcome .",
            "sql": "select customers.customer_name , customers.payment_method where mailshot_customers.outcome_code = value intersect select customers.customer_name , customers.payment_method where mailshot_customers.outcome_code = value"
        },
        {
            "utterance": "How many customers pay by Credit card ?",
            "sql": "select count ( customers.* ) where customers.payment_method = value"
        },
        {
            "utterance": "which customers pay with debit card ?",
            "sql": "select customers.* where customers.payment_method = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'"
    },
    "interaction": [
        {
            "utterance": "Show the shipping charge and customer id for customer orders with order status `` Cancelled ''",
            "sql": "select customer_orders.order_shipping_charges , customer_orders.customer_id where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Show the shipping charge and customer id for customer orders with order status `` Paid ''",
            "sql": "select customer_orders.order_shipping_charges , customer_orders.customer_id where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Show the shipping method code for customer orders with order status `` Paid ''",
            "sql": "select customer_orders.shipping_method_code where customer_orders.order_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the number of employees of each gender whose salary is lower than 50000.",
        "sql": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "Yes . Can you tell me the number of employees ?",
            "sql": "select count ( employee.* )"
        },
        {
            "utterance": "Thank you . Can you tell me how many of them are males ?",
            "sql": "select count ( employee.* ) where employee.sex = value"
        },
        {
            "utterance": "Can you also tell me how many employees have a salary lower than 50000 ?",
            "sql": "select count ( employee.* ) where employee.salary < value"
        },
        {
            "utterance": "Ok.How many male employees have a salary lower than 50000 ?",
            "sql": "select count ( employee.* ) where employee.salary < value and employee.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of departments that are located in Houston.",
        "sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'"
    },
    "interaction": [
        {
            "utterance": "Show me all the departments",
            "sql": "select department.*"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which campus was opened between 1935 and 1939?",
        "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    "interaction": [
        {
            "utterance": "What campuses were opened between 1935 and 1939 ?",
            "sql": "select campuses.campus where campuses.year > = value and campuses.year < = value"
        },
        {
            "utterance": "What campuses were opened after that ? | Do you mean opened after 1939 ? | Yes , please",
            "sql": "select campuses.campus where campuses.year > value"
        },
        {
            "utterance": "How many total campuses were opened ?",
            "sql": "select count ( campuses.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which university is in Los Angeles county and opened after 1950?",
        "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"
    },
    "interaction": [
        {
            "utterance": "Which universities are in Los Angeles county and opened after 1950 ?",
            "sql": "select campuses.campus where campuses.county = value and campuses.year > value"
        },
        {
            "utterance": "What about before 1950 ?",
            "sql": "select campuses.campus where campuses.county = value and campuses.year < value"
        },
        {
            "utterance": "What are the years they opened ?",
            "sql": "select campuses.year where campuses.county = value and campuses.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which year did any college confer the most amount of degrees ?",
            "sql": "select degrees.year order_by degrees.degrees desc limit_value"
        },
        {
            "utterance": "How about the year before that ? | Did you mean which college conferred the most number of degrees in 2003 ? | Yes",
            "sql": "select campuses.campus where degrees.year = value order_by degrees.degrees desc limit_value"
        },
        {
            "utterance": "How many faculty were at California State University-Channel Islands , in the year of 2002 ?",
            "sql": "select faculty.faculty where faculty.year = value and campuses.campus = value"
        },
        {
            "utterance": "How about for California State University-chico ? | Do you mean in the year 2002 ? | Yes",
            "sql": "select faculty.faculty where faculty.year = value and campuses.campus = value"
        },
        {
            "utterance": "How about for the year 1965 ?",
            "sql": "select distinct campuses.location where campuses.year = value and campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"
    },
    "interaction": [
        {
            "utterance": "What are the degrees conferred in `` San Francisco State University '' ?",
            "sql": "select degrees.degrees where campuses.campus = value"
        },
        {
            "utterance": "What are the degrees conferred in `` San Francisco State University '' in 2001 ?",
            "sql": "select degrees.degrees where campuses.campus = value and degrees.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "please list out the campus | which column do you want to list ? | first column",
            "sql": "select campuses.id"
        },
        {
            "utterance": "what is the highest campus fees",
            "sql": "select csu_fees.campusfee order_by csu_fees.campusfee desc limit_value"
        },
        {
            "utterance": "what is the year of California State University-Bakersfield",
            "sql": "select campuses.year where campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "How many degrees did `` San Jose State University '' confer in 2000 ?",
            "sql": "select degrees.degrees where campuses.campus = value and degrees.year = value"
        },
        {
            "utterance": "What about for campus id 5 ?",
            "sql": "select sum ( degrees.degrees ) where degrees.campus = value"
        },
        {
            "utterance": "What is the name of that campus ?",
            "sql": "select distinct campuses.campus where degrees.campus = value"
        },
        {
            "utterance": "What is the name of campus with id 19 ?",
            "sql": "select distinct campuses.campus where degrees.campus = value"
        },
        {
            "utterance": "How many degrees did `` San Jose State University '' confer in 2001 ?",
            "sql": "select sum ( degrees.degrees ) where campuses.campus = value and degrees.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996"
    },
    "interaction": [
        {
            "utterance": "Hello . What universities are in San Francisco ? | Would you like to know the names of all campuses located in San Francisco ? | That would be great !",
            "sql": "select campuses.campus where campuses.location = value"
        },
        {
            "utterance": "Okay . What was the fee of San Francisco State University in 1996 ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value and csu_fees.year = value"
        },
        {
            "utterance": "And which campus had a fee of 2258 in 1996 ?",
            "sql": "select campuses.campus where csu_fees.year = value and csu_fees.campusfee = value"
        },
        {
            "utterance": "Interesting ! What county is that in ?",
            "sql": "select campuses.county where csu_fees.year = value and csu_fees.campusfee = value"
        },
        {
            "utterance": "And what county is San Francisco State University in ?",
            "sql": "select campuses.county where campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 7,
    "final": {
        "utterance": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004"
    },
    "interaction": [
        {
            "utterance": "how many campuses are presented on the table",
            "sql": "select count ( campuses.* )"
        },
        {
            "utterance": "list out the campuses name",
            "sql": "select campuses.campus"
        },
        {
            "utterance": "what is the location of California State University-Bakersfield",
            "sql": "select campuses.location where campuses.campus = value"
        },
        {
            "utterance": "what is the county of California State University-Chico",
            "sql": "select campuses.county where campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 8,
    "final": {
        "utterance": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me campuses years ?",
            "sql": "select campuses.year"
        },
        {
            "utterance": "can you show me campuses county ?",
            "sql": "select campuses.county"
        },
        {
            "utterance": "can you show me a list of degrees ?",
            "sql": "select degrees.*"
        },
        {
            "utterance": "how many faculty lines are there in the university that conferred the least number of degrees in year 2001 ?",
            "sql": "select faculty.faculty where faculty.year = value order_by degrees.degrees limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
        "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")"
    },
    "interaction": [
        {
            "utterance": "Which California State University is located in Kern County ?",
            "sql": "select campuses.campus where campuses.campus like value and campuses.county = value"
        },
        {
            "utterance": "What year was California State University-Chico started ?",
            "sql": "select campuses.year where campuses.campus = value"
        },
        {
            "utterance": "Which campus has the smallest faculty",
            "sql": "select campuses.campus where faculty.faculty = ( select min ( faculty.faculty ) )"
        },
        {
            "utterance": "Which campus was started in 2002 ?",
            "sql": "select campuses.campus where campuses.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 10,
    "final": {
        "utterance": "For each Orange county campus, report the number of degrees granted after 2000.",
        "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    "interaction": [
        {
            "utterance": "hi I was wondering how many counties you have information for ?",
            "sql": "select count ( distinct campuses.county )"
        },
        {
            "utterance": "how many schools are in Orange county ?",
            "sql": "select count ( * ) where campuses.county = value"
        },
        {
            "utterance": "can you tell me how many degrees have been granted for each Orange county campus since the year 2000 ?",
            "sql": "select campuses.campus , sum ( degrees.degrees ) where campuses.county = value and degrees.year > = value group_by campuses.campus"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Which campus was opened between 1935 and 1939?",
        "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    "interaction": [
        {
            "utterance": "How many campuses opened between 1935 and 1939 ?",
            "sql": "select count ( campuses.campus ) where campuses.year > = value and campuses.year < = value"
        },
        {
            "utterance": "Which county is the campus in ?",
            "sql": "select campuses.county where campuses.year > = value and campuses.year < = value"
        },
        {
            "utterance": "What is the full name of that campus ?",
            "sql": "select campuses.campus where campuses.year > = value and campuses.year < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"
    },
    "interaction": [
        {
            "utterance": "Find the id of year 1956 ? | do you mean the id of the campus that is opened in 1956 ? | Yes",
            "sql": "select campuses.id where campuses.year = value"
        },
        {
            "utterance": "How many TotalEnrollment of Campus California State University-Channel Islands ?",
            "sql": "select enrollments.totalenrollment_ay where campuses.campus = value"
        },
        {
            "utterance": "What are the country of FTE_AY 178 ?",
            "sql": "select campuses.county where enrollments.fte_ay = value"
        },
        {
            "utterance": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956 ?",
            "sql": "select campuses.campus where enrollments.year = value and enrollments.totalenrollment_ay > value and enrollments.fte_ay > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Which year has the most degrees conferred?",
        "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the years for which there is data ?",
            "sql": "select distinct degrees.year"
        },
        {
            "utterance": "Thank you ! Can you update this list to include how many degrees were conferred each year ?",
            "sql": "select sum ( degrees.degrees ) , degrees.year group_by degrees.year"
        },
        {
            "utterance": "Thanks ! Lastly , ( I am about to run out of time ) can you filter that list to show me which year had the most degrees conferred ?",
            "sql": "select degrees.year group_by degrees.year order_by sum ( degrees.degrees ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "Find the campus fee of `` San Jose State University '' in year 2000 .",
            "sql": "select csu_fees.campusfee where campuses.campus = value and csu_fees.year = value"
        },
        {
            "utterance": "What is the campus id of San Jose State University ?",
            "sql": "select campuses.id where campuses.campus = value"
        },
        {
            "utterance": "What is the campus fee of that ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value"
        },
        {
            "utterance": "What year is that for ?",
            "sql": "select csu_fees.year where campuses.campus = value"
        },
        {
            "utterance": "What county is San Jose State University in ?",
            "sql": "select campuses.county where campuses.campus = value"
        },
        {
            "utterance": "What is the location of that university ?",
            "sql": "select campuses.location where campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which campus has the most faculties in year 2003?",
        "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "ID 1 is for which Campus ?",
            "sql": "select campuses.campus where campuses.id = value"
        },
        {
            "utterance": "which campus has the fewest faculties in year 2003 ?",
            "sql": "select campuses.campus where faculty.year = value order_by faculty.faculty limit_value"
        },
        {
            "utterance": "which campus has the most faculties in year 2003 ?",
            "sql": "select campuses.campus where faculty.year = value order_by faculty.faculty desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
    },
    "interaction": [
        {
            "utterance": "Please tell me the number of undergraduates from each campus in the year 2004",
            "sql": "select campuses.campus , sum ( discipline_enrollments.graduate ) where discipline_enrollments.year = value group_by campuses.campus"
        },
        {
            "utterance": "please show the undergrads total from each campus",
            "sql": "select campuses.campus , sum ( discipline_enrollments.undergraduate ) group_by campuses.campus"
        },
        {
            "utterance": "now please show just the total of graduates from San Francisco State University in 2004",
            "sql": "select sum ( discipline_enrollments.graduate ) where discipline_enrollments.year = value and campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 17,
    "final": {
        "utterance": "For each Orange county campus, report the number of degrees granted after 2000.",
        "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    "interaction": [
        {
            "utterance": "For each Orange county campus , report the number of degrees granted after 2000 .",
            "sql": "select campuses.campus , sum ( degrees.degrees ) where campuses.county = value and degrees.year > = value group_by campuses.campus"
        },
        {
            "utterance": "which year has the highest number of degrees ?",
            "sql": "select degrees.year order_by degrees.degrees desc limit_value"
        },
        {
            "utterance": "which location in 2004 ? | do you mean campus ? | which campus has the highest number of degrees ?",
            "sql": "select campuses.campus where degrees.degrees = ( select max ( degrees.degrees ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 0,
    "final": {
        "utterance": "which countries have more than 2 airports?",
        "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "list out the airport names",
            "sql": "select airport.name"
        },
        {
            "utterance": "how many airports on this table",
            "sql": "select count ( distinct airport.name )"
        },
        {
            "utterance": "what is the country of Akureyri Airport",
            "sql": "select airport.country where airport.name = value"
        },
        {
            "utterance": "what is the city of Schiphol Airport",
            "sql": "select airport.city where airport.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 1,
    "final": {
        "utterance": "How many companies operates airlines in each airport?",
        "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id"
    },
    "interaction": [
        {
            "utterance": "How many airports are there ?",
            "sql": "select count ( airport.* )"
        },
        {
            "utterance": "How many total companies are there ?",
            "sql": "select count ( operate_company.* )"
        },
        {
            "utterance": "How many companies operate airlines in each airport ? | Do you want the result by airport id , or airport name or all airport information ? | I would like the results by airport id , please .",
            "sql": "select airport.id , count ( * ) group_by airport.id"
        },
        {
            "utterance": "How many airports are in the United States ?",
            "sql": "select count ( airport.* ) where airport.country = value"
        },
        {
            "utterance": "How many companies operate in airports in the United States ?",
            "sql": "select count ( distinct operate_company.id ) where airport.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'"
    },
    "interaction": [
        {
            "utterance": "where is the location of the conference ? | What conference ? | Do you know any name of the pilot that provides cargo ?",
            "sql": "select flight.pilot where operate_company.principal_activities = value"
        },
        {
            "utterance": "Ok. Do you know any name of the pilot that provides a company `` catering services '' activities ?",
            "sql": "select flight.pilot where operate_company.principal_activities = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the pilots who flew a flight in the United States ?",
            "sql": "select distinct flight.pilot where airport.country = value"
        },
        {
            "utterance": "What are the names of all the pilots who flew a flight in the Billund Airport ?",
            "sql": "select distinct flight.pilot where airport.name = value"
        },
        {
            "utterance": "Can you list the names and velocities of all pilots who flew out of Ted Stevens Airport ?",
            "sql": "select flight.pilot , flight.velocity where airport.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200"
    },
    "interaction": [
        {
            "utterance": "Which flight has the least velocity in the list ? | What info do you want about that flight ? id ? date ? number ? or something else ? | I want the number",
            "sql": "select flight.vehicle_flight_number order_by flight.velocity limit_value"
        },
        {
            "utterance": "State the principal activities of Air Hong Kong ?",
            "sql": "select distinct operate_company.principal_activities where operate_company.name = value"
        },
        {
            "utterance": "What are the distinct types of the companies that have operated any flights with velocity less than 200 ?",
            "sql": "select distinct operate_company.type where flight.velocity < value"
        },
        {
            "utterance": "State the type of air china in the list ?",
            "sql": "select operate_company.type where operate_company.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the most common company type, and how many are there?",
        "sql": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common type ?",
            "sql": "select operate_company.type group_by operate_company.type order_by count ( operate_company.* ) desc limit_value"
        },
        {
            "utterance": "And how many companies are there with this type ?",
            "sql": "select count ( distinct operate_company.name ) where operate_company.type = value"
        },
        {
            "utterance": "And how about the least common type of company ?",
            "sql": "select operate_company.type group_by operate_company.type order_by count ( operate_company.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 6,
    "final": {
        "utterance": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );"
    },
    "interaction": [
        {
            "utterance": "How many airports has pilot Thompson driven an aircraft ?",
            "sql": "select count ( airport.* ) where airport.id in ( select flight.airport_id where flight.pilot = value )"
        },
        {
            "utterance": "How many airports had Thompson driven by August 1963 ?",
            "sql": "select count ( * ) where flight.pilot = value and flight.date > value"
        },
        {
            "utterance": "What is the flight number of the aircraft Thompson drove in March 1 , 1963",
            "sql": "select flight.vehicle_flight_number where flight.pilot = value and flight.date = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 7,
    "final": {
        "utterance": "which pilot is in charge of the most number of flights?",
        "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are pilots names ?",
            "sql": "select distinct flight.pilot"
        },
        {
            "utterance": "Which pilot is in charge of most number of flights ?",
            "sql": "select flight.pilot group_by flight.pilot order_by count ( flight.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 8,
    "final": {
        "utterance": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );"
    },
    "interaction": [
        {
            "utterance": "how many flights have pilot Thompson flown ?",
            "sql": "select count ( flight.* ) where flight.pilot = value"
        },
        {
            "utterance": "What are the names of those airports ?",
            "sql": "select airport.name where airport.id not in ( select flight.airport_id where flight.pilot = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the id, name and IATA code of the airport that had most number of flights?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the date of first flight ?",
            "sql": "select flight.date order_by flight.date limit_value"
        },
        {
            "utterance": "who is the first flight 's pilot ?",
            "sql": "select flight.pilot order_by flight.date limit_value"
        },
        {
            "utterance": "what is the average of altitude ?",
            "sql": "select avg ( flight.altitude )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the ids and names of the companies that operated more than one flight?",
        "sql": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hi , which companies have operated more than one flight ?",
            "sql": "select * group_by operate_company.id having count ( * ) > value"
        },
        {
            "utterance": "Great , can you show me the top 3 companies that have operated the most flights ?",
            "sql": "select * group_by operate_company.id order_by count ( * ) limit_value"
        },
        {
            "utterance": "Which type of principal activity , cargo airline or airline , operates the most flights ?",
            "sql": "select operate_company.principal_activities group_by operate_company.principal_activities order_by count ( * ) limit_value"
        },
        {
            "utterance": "What are the top 3 companies operating the most cargo flights ?",
            "sql": "select * where operate_company.principal_activities = value group_by operate_company.name order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "sql": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest average monthly rental of all the students ?",
            "sql": "select student_addresses.monthly_rental group_by student_addresses.student_id order_by avg ( student_addresses.monthly_rental ) desc limit_value"
        },
        {
            "utterance": "Hmm , can you tell me the addresses that have the highest average monthly rental ?",
            "sql": "select students.address_id group_by student_addresses.student_id order_by avg ( student_addresses.monthly_rental ) desc limit_value"
        },
        {
            "utterance": "What are the id and first name of the student whose addresses have the highest average monthly rental ?",
            "sql": "select student_addresses.student_id , students.first_name group_by student_addresses.student_id order_by avg ( student_addresses.monthly_rental ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "sql": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the teacher id of detention id 1",
            "sql": "select detention.teacher_id where detention.detention_id = value"
        },
        {
            "utterance": "when does the datetime detention end | What did you mean by the datetime detention end ? Do you want a list of all the datetime detention end or a specific one ? | for detention id 1",
            "sql": "select detention.datetime_detention_end where detention.detention_id = value"
        },
        {
            "utterance": "what is the middle name of teacher id 1 ?",
            "sql": "select teachers.middle_name where teachers.teacher_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the monthly rentals of student addresses in Texas state?",
        "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""
    },
    "interaction": [
        {
            "utterance": "What are the monthly rentals of student ?",
            "sql": "select student_addresses.monthly_rental"
        },
        {
            "utterance": "what are the total number of student addresses in Texas state ?",
            "sql": "select count ( student_addresses.student_id ) where addresses.state_province_county = value"
        },
        {
            "utterance": "what are the monthly rentals of student addresses in Texas state ?",
            "sql": "select student_addresses.monthly_rental where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the monthly rentals of student addresses in Texas state?",
        "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""
    },
    "interaction": [
        {
            "utterance": "What is the address of address id 3 ?",
            "sql": "select addresses.* where addresses.address_id = value"
        },
        {
            "utterance": "How much does the rental cost for address id 3 ?",
            "sql": "select student_addresses.monthly_rental where student_addresses.address_id = value"
        },
        {
            "utterance": "What is the cost for address id 1 ?",
            "sql": "select student_addresses.monthly_rental where student_addresses.address_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the id and city of the student address with the highest average monthly rental.",
        "sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest average monthly rental ? | what do you mean by `` highest average monthly rental '' | sorry , highest monthly rental",
            "sql": "select max ( student_addresses.monthly_rental )"
        },
        {
            "utterance": "What is the address ID of that rental ?",
            "sql": "select student_addresses.address_id order_by student_addresses.monthly_rental desc limit_value"
        },
        {
            "utterance": "What is the city of that address ?",
            "sql": "select addresses.city order_by student_addresses.monthly_rental desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the code and description of the least frequent detention type ?",
        "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the detention type code for the detention with id 1 ?",
            "sql": "select detention.detention_type_code where detention.detention_id = value"
        },
        {
            "utterance": "Show the code and description of the least frequent detention type ?",
            "sql": "select detention.detention_type_code , ref_detention_type.detention_type_description group_by detention.detention_type_code order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Show the code and description of the most frequent detention type ?",
            "sql": "select detention.detention_type_code , ref_detention_type.detention_type_description group_by detention.detention_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\""
    },
    "interaction": [
        {
            "utterance": "hi , how many teachers have addresses with zip code `` 918 ''",
            "sql": "select count ( * ) where addresses.zip_postcode = value"
        },
        {
            "utterance": "can you tell me who that teacher is ? | The teacher is Alvis Macer Schultz | and what is that teacher 's email address ?",
            "sql": "select teachers.email_address where addresses.zip_postcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the first names of teachers whose email address contains the word \"man\".",
        "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'"
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE EMAIL ADDRESS OF LYLA WILSON MEDHURST ?",
            "sql": "select teachers.email_address where teachers.first_name = value and teachers.middle_name = value and teachers.last_name = value"
        },
        {
            "utterance": "WHAT IS THE ADDRESS ID OF SID TREMAYNE BRAKUS ?",
            "sql": "select teachers.email_address where teachers.first_name = value and teachers.middle_name = value and teachers.last_name = value"
        },
        {
            "utterance": "WHAT IS THE CELL MOBILE NUMBER OF TRYSTAN ALEXANE SCHUSTER ?",
            "sql": "select teachers.cell_mobile_number where teachers.first_name = value and teachers.middle_name = value and teachers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\""
    },
    "interaction": [
        {
            "utterance": "What are the dates of assessment notes for students with first name 'Fanny ' ?",
            "sql": "select assessment_notes.date_of_notes where students.first_name = value"
        },
        {
            "utterance": "Could you tell me the dates students with first name 'Fanny ' left the university ?",
            "sql": "select students.date_left_university where students.first_name = value"
        },
        {
            "utterance": "What are the cell mobile numbers of students with the first name 'Fanny ' ?",
            "sql": "select students.cell_mobile_number where students.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""
    },
    "interaction": [
        {
            "utterance": "Can you find me student with first name `` Emma '' ? | What do you want to know about that student ? | Student id",
            "sql": "select students.student_id where students.first_name = value"
        },
        {
            "utterance": "What is the last name for that student ?",
            "sql": "select students.last_name where students.first_name = value"
        },
        {
            "utterance": "What is her email ?",
            "sql": "select students.email_address where students.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 10,
    "final": {
        "utterance": "How many students are not involved in any behavior incident?",
        "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )"
    },
    "interaction": [
        {
            "utterance": "How many students are in the class",
            "sql": "select count ( students.* )"
        },
        {
            "utterance": "What are the student id 1 's incident type code ?",
            "sql": "select behavior_incident.incident_type_code where behavior_incident.student_id = value"
        },
        {
            "utterance": "what are the recommendations are given to student ?",
            "sql": "select behavior_incident.recommendations"
        },
        {
            "utterance": "what is the mobile number of student id 1 ?",
            "sql": "select students.cell_mobile_number where students.student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the id and last name of the student that has the most behavior incidents?",
        "sql": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How Many Students have Behavior Incident reports with recommendations ?",
            "sql": "select count ( * ) ( select * group_by behavior_incident.student_id )"
        },
        {
            "utterance": "How many of those Recommendations required the students to leave the university ?",
            "sql": "select count ( * ) ( select * where behavior_incident.recommendations = value group_by behavior_incident.student_id )"
        },
        {
            "utterance": "What was the students last name and ID that had the most behavior incidents ?",
            "sql": "select behavior_incident.student_id , students.last_name group_by behavior_incident.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the id and zip code of the address with the highest monthly rental?",
        "sql": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Add a column for monthly rental to the table Addresses | i can not understand your question , can you give more information ? thanks | What 's the highest monthly rental in the table Student Addresses ?",
            "sql": "select student_addresses.monthly_rental order_by student_addresses.monthly_rental desc limit_value"
        },
        {
            "utterance": "And what is the zip postcode of the address with monthly rental 1297.807 ?",
            "sql": "select addresses.zip_postcode where student_addresses.monthly_rental = value"
        },
        {
            "utterance": "And can you also tell me the line 1 value from the table Addresses for the same property ?",
            "sql": "select addresses.line_1 where student_addresses.monthly_rental = value"
        },
        {
            "utterance": "Hmmm ... can you also please tell me the address id for this same property ?",
            "sql": "select addresses.address_id where student_addresses.monthly_rental = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\""
    },
    "interaction": [
        {
            "utterance": "Find the start and end dates of behavior incidents of students with last name `` Rohan '' ?",
            "sql": "select behavior_incident.date_incident_start , behavior_incident.date_incident_end where students.last_name = value"
        },
        {
            "utterance": "Find the start and end dates of behavior incidents of students with last name `` Bergnaum '' ?",
            "sql": "select behavior_incident.date_incident_start , behavior_incident.date_incident_end where students.last_name = value"
        },
        {
            "utterance": "Find the start and end dates of behavior incidents of students with last name `` Hansen '' ?",
            "sql": "select students.last_name where students.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\""
    },
    "interaction": [
        {
            "utterance": "what 's the zip code of Lyla address of where she lives ?",
            "sql": "select addresses.zip_postcode where teachers.first_name = value"
        },
        {
            "utterance": "where is the city where Lyla stays ?",
            "sql": "select addresses.city where teachers.first_name = value"
        },
        {
            "utterance": "what 's Lyla last name ?",
            "sql": "select teachers.last_name where teachers.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""
    },
    "interaction": [
        {
            "utterance": "What are the emails of the students with the first name Emma ?",
            "sql": "select students.email_address where students.first_name = value"
        },
        {
            "utterance": "What about last name Rohan ? | The emails of the students with the last name Rohan is derrick.jenkins @ example.com | What is that person 's student id ?",
            "sql": "select students.student_id where students.last_name = value"
        },
        {
            "utterance": "What is the name of the student with id 4 ? | Here are the first , middle , and last name of the student with id 4 . | What is their email address ?",
            "sql": "select students.email_address where students.student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the last names of teachers who are not involved in any detention.",
        "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id"
    },
    "interaction": [
        {
            "utterance": "How many detentions are there ?",
            "sql": "select distinct count ( detention.* )"
        },
        {
            "utterance": "How many teachers are not involved in any of them ?",
            "sql": "select count ( teachers.* ) ( select teachers.last_name except select teachers.last_name )"
        },
        {
            "utterance": "What are the last names of those teachers ?",
            "sql": "select teachers.last_name except select teachers.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you provide a count of assessment notes by teacher id ?",
            "sql": "select assessment_notes.teacher_id , count ( * ) group_by assessment_notes.teacher_id"
        },
        {
            "utterance": "For that table , can you sort by descending count ?",
            "sql": "select assessment_notes.teacher_id , count ( * ) group_by assessment_notes.teacher_id order_by count ( * ) desc"
        },
        {
            "utterance": "Can you left join the Assessment Notes table with the Teachers table on teacher_id ?",
            "sql": "select *"
        },
        {
            "utterance": "For the earlier table with sorted counts , can you give me the first name associted with each teacher_id ?",
            "sql": "select teachers.first_name , assessment_notes.teacher_id , count ( * ) group_by assessment_notes.teacher_id order_by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the last names of teachers who are not involved in any detention.",
        "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( teachers.teacher_id )"
        },
        {
            "utterance": "How many of them involve in detention ?",
            "sql": "select count ( distinct detention.teacher_id )"
        },
        {
            "utterance": "Can you show me a list of teachers that are not involve in detention ?",
            "sql": "select teachers.last_name except select teachers.last_name"
        },
        {
            "utterance": "Can you also include their id ?",
            "sql": "select teachers.last_name , teachers.teacher_id except select teachers.last_name , teachers.teacher_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 19,
    "final": {
        "utterance": "How many students are not involved in any behavior incident?",
        "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )"
    },
    "interaction": [
        {
            "utterance": "How many student are involved in any kind of accident ?",
            "sql": "select count ( students.* ) where students.student_id in ( select behavior_incident.student_id )"
        },
        {
            "utterance": "How about student not involved in any kind of incident ?",
            "sql": "select count ( students.* ) where students.student_id not in ( select behavior_incident.student_id )"
        },
        {
            "utterance": "And what are their names ?",
            "sql": "select students.first_name , students.middle_name , students.last_name where students.student_id not in ( select behavior_incident.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\""
    },
    "interaction": [
        {
            "utterance": "Find the start date of behavior incidents of students with the last name `` Fahey '' ?",
            "sql": "select behavior_incident.date_incident_start where students.last_name = value"
        },
        {
            "utterance": "Find the incident type code of behavior incidents of students with the last name `` Fahey '' ?",
            "sql": "select behavior_incident.incident_type_code where students.last_name = value"
        },
        {
            "utterance": "What is the date left university of the student with the last name `` Fahey '' ?",
            "sql": "select students.date_left_university where students.last_name = value"
        },
        {
            "utterance": "How many students have the incident type code `` VIOLENCE '' ?",
            "sql": "select count ( behavior_incident.* ) where behavior_incident.incident_type_code = value"
        },
        {
            "utterance": "What are the names of the students that have the incident type code `` VIOLENCE '' ? | Do you mean last name or first name ? | Both , please .",
            "sql": "select students.first_name , students.last_name where behavior_incident.incident_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the first names and last names of students with address in Wisconsin state?",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\""
    },
    "interaction": [
        {
            "utterance": "how many students are living in each state province county ?",
            "sql": "select count ( * ) , addresses.state_province_county group_by addresses.state_province_county"
        },
        {
            "utterance": "show me the first and last names of students in Wisconsin .",
            "sql": "select students.first_name , students.last_name where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
    },
    "interaction": [
        {
            "utterance": "Which browsers are compatible with firefox ?",
            "sql": "select browser.name where web_client_accelerator.name = value"
        },
        {
            "utterance": "WHat about with Fasterfox ?",
            "sql": "select browser.name where web_client_accelerator.name = value"
        },
        {
            "utterance": "Which browsers are compatible with CACHebox ?",
            "sql": "select browser.name where web_client_accelerator.name = value"
        },
        {
            "utterance": "Which browsers are compatible with both ?",
            "sql": "select browser.name where web_client_accelerator.name = value intersect select browser.name where web_client_accelerator.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many accelerators on the table",
            "sql": "select count ( web_client_accelerator.* )"
        },
        {
            "utterance": "what is the connection of CACHEbox",
            "sql": "select web_client_accelerator.connection where web_client_accelerator.name = value"
        },
        {
            "utterance": "please list out the operating system | Can you please clarify which operating system do you need ? | list out the all operating system on client accelerator",
            "sql": "select web_client_accelerator.operating_system"
        },
        {
            "utterance": "what are all the client accelerators on the table",
            "sql": "select web_client_accelerator.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what are the ids and names of the web accelerators that are compatible with two or more browsers ?",
            "sql": "select web_client_accelerator.id , web_client_accelerator.name group_by web_client_accelerator.id having count ( * ) > = value"
        },
        {
            "utterance": "how many browser id ?",
            "sql": "select count ( distinct accelerator_compatible_browser.browser_id )"
        },
        {
            "utterance": "what are using CProxy in Operating system ?",
            "sql": "select web_client_accelerator.operating_system where web_client_accelerator.name = value"
        },
        {
            "utterance": "who is using Appliance ( Linux ) Operating system ? | Do you want the name of the accelerator ? | yes",
            "sql": "select web_client_accelerator.name where web_client_accelerator.operating_system = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 3,
    "final": {
        "utterance": "How many accelerators are not compatible with the browsers listed ?",
        "sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );"
    },
    "interaction": [
        {
            "utterance": "how many accelerators are there ?",
            "sql": "select count ( web_client_accelerator.* )"
        },
        {
            "utterance": "what accelerators are not compatible with the browsers ?",
            "sql": "select web_client_accelerator.* where web_client_accelerator.id not in ( select accelerator_compatible_browser.accelerator_id )"
        },
        {
            "utterance": "can you tell me how many accelerators are not compatible ?",
            "sql": "select count ( web_client_accelerator.* ) where web_client_accelerator.id not in ( select accelerator_compatible_browser.accelerator_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 4,
    "final": {
        "utterance": "Which accelerator name contains substring \"Opera\"?",
        "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    "interaction": [
        {
            "utterance": "Which accelerator did the client user have ? | Do you mean the name of the accelerator that the client named user has ? | Yes",
            "sql": "select web_client_accelerator.name where web_client_accelerator.client = value"
        },
        {
            "utterance": "Which one of this contains a substring called Opera ? | Do you mean the name of the accelerators whose name contains a substring called `` Opera '' and that the client named user has ? | Yes",
            "sql": "select web_client_accelerator.name where web_client_accelerator.client = value and web_client_accelerator.name like value"
        },
        {
            "utterance": "Which operating system did the client End user , ISP have ?",
            "sql": "select web_client_accelerator.operating_system where web_client_accelerator.client = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998"
    },
    "interaction": [
        {
            "utterance": "WHAT ARE THE BROWSERS LISTED IN THE TABLE",
            "sql": "select browser.name"
        },
        {
            "utterance": "WHICH BROWSER IS COMPATIBLE WITH ACCELERATOR 'CPROXY ' AFTER YEAR 1998",
            "sql": "select browser.name where web_client_accelerator.name = value and accelerator_compatible_browser.compatible_since_year > value"
        },
        {
            "utterance": "WHAT IS THE BROWSER ID OF OPERA",
            "sql": "select browser.id where browser.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the maximum, minimum and average market share of the listed browsers?",
        "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser"
    },
    "interaction": [
        {
            "utterance": "What is the maximum market share of the browsers ?",
            "sql": "select max ( browser.market_share )"
        },
        {
            "utterance": "What is the minimum market share of all browsers ?",
            "sql": "select min ( browser.market_share )"
        },
        {
            "utterance": "What is the average market share of all browsers ?",
            "sql": "select avg ( browser.market_share )"
        },
        {
            "utterance": "Can you list the names of all browsers that have market shares above the average ?",
            "sql": "select browser.name where browser.market_share > ( select avg ( browser.market_share ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the maximum, minimum and average market share of the listed browsers?",
        "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser"
    },
    "interaction": [
        {
            "utterance": "What is the market share of Internet explorer",
            "sql": "select browser.market_share where browser.name = value"
        },
        {
            "utterance": "What about Firefox 's Market share",
            "sql": "select browser.market_share where browser.name = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select browser.market_share where browser.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
    },
    "interaction": [
        {
            "utterance": "Names of browsers that are compartable with cachebox ?",
            "sql": "select browser.name where web_client_accelerator.name = value"
        },
        {
            "utterance": "Names of browsers that are compartable with fasterfox ?",
            "sql": "select browser.name where web_client_accelerator.name = value"
        },
        {
            "utterance": "What is firefox market ahare ?",
            "sql": "select browser.market_share where browser.name = value"
        },
        {
            "utterance": "Tell me the market share of safari ?",
            "sql": "select browser.market_share where browser.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'"
    },
    "interaction": [
        {
            "utterance": "which operating system has a connection of Broadband , Satellite , Wireless , Fiber , DSL ?",
            "sql": "select web_client_accelerator.operating_system where web_client_accelerator.connection = value"
        },
        {
            "utterance": "What is the market share of Safari ?",
            "sql": "select browser.market_share where browser.name = value"
        },
        {
            "utterance": "Since which year has CProxy been compatible ?",
            "sql": "select accelerator_compatible_browser.compatible_since_year where web_client_accelerator.name = value"
        },
        {
            "utterance": "What is the total number of browsers are available ?",
            "sql": "select count ( browser.* )"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select browser.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "sql": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the Id of the browser that is compatible with most web accelerators ?",
            "sql": "select browser.id group_by browser.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of browser with id 1 ?",
            "sql": "select browser.name where browser.id = value"
        },
        {
            "utterance": "What is the name of the browser with the second largest market share ?",
            "sql": "select browser.name order_by browser.market_share limit_value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select browser.name order_by accelerator_compatible_browser.compatible_since_year asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 11,
    "final": {
        "utterance": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "sql": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the names of all compatible browsers and accelerators ?",
            "sql": "select browser.name , web_client_accelerator.name"
        },
        {
            "utterance": "Can you also show their compatible years ?",
            "sql": "select browser.name , web_client_accelerator.name , accelerator_compatible_browser.compatible_since_year"
        },
        {
            "utterance": "Hmm , can you list the names of all compatible browsers and accelerators in the descending order of compatible year ?",
            "sql": "select browser.name , web_client_accelerator.name order_by accelerator_compatible_browser.compatible_since_year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 12,
    "final": {
        "utterance": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;"
    },
    "interaction": [
        {
            "utterance": "What distinct accelerator names are compatible with Firefox .",
            "sql": "select distinct web_client_accelerator.name where browser.name = value"
        },
        {
            "utterance": "What distinct accelerator names are compatible with the browsers that have a market share higher than 15 .",
            "sql": "select distinct web_client_accelerator.name where browser.market_share > value"
        },
        {
            "utterance": "What distinct accelerator names have been compatible since at least 1996 .",
            "sql": "select distinct web_client_accelerator.name where accelerator_compatible_browser.compatible_since_year > = value"
        },
        {
            "utterance": "Out of these accelerators which are compatible with browsers that have a market share higher than 25 .",
            "sql": "select distinct web_client_accelerator.name where accelerator_compatible_browser.compatible_since_year > = value and browser.market_share > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of clubs that do not have any players.",
        "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all clubs ?",
            "sql": "select club.name"
        },
        {
            "utterance": "Show me the name of the club that has the id number 3 ?",
            "sql": "select club.name where club.club_id = value"
        },
        {
            "utterance": "Show me the region of the club BK Slide ?",
            "sql": "select club.region where club.name = value"
        },
        {
            "utterance": "Show me the names of the clubs that do not have any players ?",
            "sql": "select club.name where club.club_id not in ( select player.club_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 1,
    "final": {
        "utterance": "List the most common type of competition.",
        "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHich country had the most competitions ?",
            "sql": "select competition.country group_by competition.country order_by count ( competition.* ) desc limit_value"
        },
        {
            "utterance": "What year did most competitions occur ?",
            "sql": "select competition.year group_by competition.year order_by count ( competition.* ) desc limit_value"
        },
        {
            "utterance": "What about the most common type ?",
            "sql": "select competition.competition_type group_by competition.competition_type order_by count ( competition.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of clubs that have players with position \"Right Wing\".",
        "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\""
    },
    "interaction": [
        {
            "utterance": "How many clubs have players with the position `` Right Wing '' ?",
            "sql": "select count ( * ) where player.position = value"
        },
        {
            "utterance": "How many total players are there ?",
            "sql": "select count ( player.* )"
        },
        {
            "utterance": "Can you list all the players ?",
            "sql": "select player.*"
        },
        {
            "utterance": "How many positions are there in total ?",
            "sql": "select count ( distinct player.position )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of clubs that do not have any players.",
        "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the club names and ids ?",
            "sql": "select club.name , club.club_id"
        },
        {
            "utterance": "Hmm , I want to know the player ids , names and their club ids .",
            "sql": "select player.player_id , player.name , player.club_id"
        },
        {
            "utterance": "Please list the names of those clubs that do not have any players .",
            "sql": "select club.name where club.club_id not in ( select player.club_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 4,
    "final": {
        "utterance": "what are the name of players who get more than the average points.",
        "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"
    },
    "interaction": [
        {
            "utterance": "What are the names of players who get more than the average points ?",
            "sql": "select player.name where player.points > ( select avg ( player.points ) )"
        },
        {
            "utterance": "Give me the name of player with the most points",
            "sql": "select player.name where player.points = ( select max ( player.points ) )"
        },
        {
            "utterance": "Which players scored highest ? Give me names | Do you mean the names of player with the most points ? | Yes",
            "sql": "select player.name where player.points = ( select max ( player.points ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average points of players from club with name \"AIB\".",
        "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\""
    },
    "interaction": [
        {
            "utterance": "What year did the IFG Club form ?",
            "sql": "select club.start_year where club.name = value"
        },
        {
            "utterance": "And the club with the name `` AIB ''",
            "sql": "select distinct club.start_year where club.name = value"
        },
        {
            "utterance": "What is the position of the player `` Michael Platt '' ?",
            "sql": "select player.position where player.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the countries that have never participated in any competition with Friendly type.",
        "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"
    },
    "interaction": [
        {
            "utterance": "Find the countries that have never participated in any competition with Friendly type",
            "sql": "select competition.country except select competition.country where competition.competition_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 7,
    "final": {
        "utterance": "List the types of competition that have at most five competitions of that type.",
        "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5"
    },
    "interaction": [
        {
            "utterance": "Show me all the types of competitions ?",
            "sql": "select distinct ( competition.competition_type )"
        },
        {
            "utterance": "show me the types of competition that have atleast five competition of that type",
            "sql": "select competition.competition_type group_by competition.competition_type having count ( competition.* ) > = value"
        },
        {
            "utterance": "show me the types of competition that has at most competitions of that type",
            "sql": "select competition.competition_type group_by competition.competition_type having count ( competition.* ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 8,
    "final": {
        "utterance": "which country did participated in the most number of Tournament competitions?",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the country that participated in the greatest number of tournaments ?",
            "sql": "select competition.country where competition.competition_type = value group_by competition.country order_by count ( competition.* ) desc limit_value"
        },
        {
            "utterance": "What about the name of the country that participated in the least number of tournaments ?",
            "sql": "select competition.country where competition.competition_type = value group_by competition.country order_by count ( competition.* ) asc limit_value"
        },
        {
            "utterance": "What were the competition types of all the competitions Russia participated in ?",
            "sql": "select competition.competition_type where competition.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 9,
    "final": {
        "utterance": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20"
    },
    "interaction": [
        {
            "utterance": "Who scored more than 20 points ?",
            "sql": "select player.* where player.points > value"
        },
        {
            "utterance": "And what positions did those players play ?",
            "sql": "select player.position where player.points > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select player.name where player.points > value"
        },
        {
            "utterance": "And who scored the highest points out of them ?",
            "sql": "select player.name where player.points = ( select max ( player.points ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 10,
    "final": {
        "utterance": "which countries did participated in both Friendly and Tournament type competitions.",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'"
    },
    "interaction": [
        {
            "utterance": "what are the name of the countries who have participated in both the friendly and tournament type competitions",
            "sql": "select competition.country where competition.competition_type = value intersect select competition.country where competition.competition_type = value"
        },
        {
            "utterance": "what is the competition id of the country | Can you clarify ? The competition id is not unique to a country . | list all the competition id for russia",
            "sql": "select competition.competition_id where competition.country = value"
        },
        {
            "utterance": "include the year in the table",
            "sql": "select competition.competition_id , competition.year where competition.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the countries that have never participated in any competition with Friendly type.",
        "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"
    },
    "interaction": [
        {
            "utterance": "What countries have not participated in any competition with Friendly type ?",
            "sql": "select competition.country except select competition.country where competition.competition_type = value"
        },
        {
            "utterance": "How many countries have not participated in competitions with friendly types ?",
            "sql": "select count ( competition.* ) ( select competition.country except select competition.country where competition.competition_type = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of journalists that have reported more than one event.",
        "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the total number of journalists ?",
            "sql": "select count ( journalist.* )"
        },
        {
            "utterance": "How many journalists have worked for more than 5 years ?",
            "sql": "select count ( journalist.* ) where journalist.years_working > value"
        },
        {
            "utterance": "What is the name of the journalist who has worked longest ?",
            "sql": "select journalist.name order_by journalist.years_working desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of journalists and the names of the events they reported in ascending order",
        "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me all the names of the journalists ?",
            "sql": "select journalist.name"
        },
        {
            "utterance": "What are the names of the events they reported ?",
            "sql": "select journalist.name , event.name"
        },
        {
            "utterance": "Could you please organize those in ascending order ?",
            "sql": "select journalist.name , event.name order_by event.event_attendance asc"
        },
        {
            "utterance": "What work type do those journalists do ?",
            "sql": "select journalist.name , news_report.work_type"
        },
        {
            "utterance": "How many years have they each been working , please ?",
            "sql": "select journalist.name , journalist.years_working"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 2,
    "final": {
        "utterance": "what are the average and maximum attendances of all events?",
        "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event"
    },
    "interaction": [
        {
            "utterance": "What is the average attendance of all events ?",
            "sql": "select avg ( event.event_attendance )"
        },
        {
            "utterance": "What is the maximum attendance of all events ?",
            "sql": "select max ( event.event_attendance )"
        },
        {
            "utterance": "What is the minimum attendance of all events ?",
            "sql": "select min ( event.event_attendance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of journalists from \"England\" or \"Wales\".",
        "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\""
    },
    "interaction": [
        {
            "utterance": "show me the journalists from England | Do you want their names ? | Yes , I do",
            "sql": "select journalist.name where journalist.nationality = value"
        },
        {
            "utterance": "and from Wales too",
            "sql": "select journalist.name where journalist.nationality = value or journalist.nationality = value"
        },
        {
            "utterance": "How many journalists are from England or Wales ?",
            "sql": "select count ( journalist.* ) where journalist.nationality = value or journalist.nationality = value"
        },
        {
            "utterance": "Can you show me their names ?",
            "sql": "select journalist.name where journalist.nationality = value or journalist.nationality = value"
        },
        {
            "utterance": "How many journalists from England have worked for over an year ?",
            "sql": "select count ( journalist.* ) where journalist.nationality = value and journalist.years_working > value"
        },
        {
            "utterance": "What about Wales ?",
            "sql": "select count ( journalist.* ) where journalist.nationality = value and journalist.years_working > value"
        },
        {
            "utterance": "Can you show me the names of those journalists ? | Do you mean the journalists from Wales and England who have worked for over a year ? | Yes",
            "sql": "select journalist.name where journalist.nationality = value and journalist.years_working > value union select journalist.name where journalist.nationality = value and journalist.years_working > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the average age and experience working length of journalists working on different role type.",
        "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    "interaction": [
        {
            "utterance": "how many journalist there",
            "sql": "select count ( journalist.* )"
        },
        {
            "utterance": "what is the Nationality of Herbert Swindells",
            "sql": "select journalist.nationality where journalist.name = value"
        },
        {
            "utterance": "what is the age of George Gilchrist",
            "sql": "select journalist.age where journalist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of journalists and the dates of the events they reported.",
        "sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID"
    },
    "interaction": [
        {
            "utterance": "Show me the names of journalists",
            "sql": "select journalist.name"
        },
        {
            "utterance": "Show me the events they reported | which columuns to return | date",
            "sql": "select event.event_id , event.date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of journalists and the number of events they reported.",
        "sql": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name"
    },
    "interaction": [
        {
            "utterance": "Can you please list the names of the journalists in a table with the number of events they each reported ?",
            "sql": "select journalist.name , count ( * ) group_by journalist.name"
        },
        {
            "utterance": "Can you add their ages and nationalities to the table please ?",
            "sql": "select journalist.name , journalist.age , journalist.nationality , count ( * ) group_by journalist.name"
        },
        {
            "utterance": "What is the name of the event that the oldest journalist reported on ?",
            "sql": "select journalist.name , event.name where journalist.age = ( select max ( journalist.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of journalists and the names of the events they reported in ascending order",
        "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
    },
    "interaction": [
        {
            "utterance": "Hmm , interesting . What is the nationality of Jackie Waring ? | Do you mean the journalist Jackie Waring ? | Yes .",
            "sql": "select journalist.nationality where journalist.name = value"
        },
        {
            "utterance": "What other Journalists have England as their nationality ?",
            "sql": "select journalist.* where journalist.name != value and journalist.nationality = value"
        },
        {
            "utterance": "How old is Herbert Swindells ?",
            "sql": "select journalist.age where journalist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the nationality of the journalist with the largest number of years working?",
        "sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , what journalist had worked the most amount of years ?",
            "sql": "select journalist.journalist_id order_by journalist.years_working desc limit_value"
        },
        {
            "utterance": "Which journalist has worked the 2nd most amount of years ?",
            "sql": "select journalist.journalist_id where journalist.journalist_id not in ( select journalist.journalist_id order_by journalist.years_working desc limit_value ) order_by journalist.years_working desc limit_value"
        },
        {
            "utterance": "Thank you , for the journalist with the ID of 4 , what is his name ?",
            "sql": "select journalist.name where journalist.journalist_id = value"
        },
        {
            "utterance": "Wonderful ! What is her nationality ?",
            "sql": "select journalist.nationality where journalist.journalist_id = value"
        },
        {
            "utterance": "Thank you ! That 's all I needed , but I 'm also curious , how many journalists are from England ?",
            "sql": "select count ( journalist.journalist_id ) where journalist.nationality = value"
        },
        {
            "utterance": "Which one has the least amount of years worked ?",
            "sql": "select journalist.journalist_id where journalist.nationality = value order_by journalist.years_working limit_value"
        },
        {
            "utterance": "Awesome , Im almost done , but can you tell me overall who worked the least amount of years as well ?",
            "sql": "select journalist.journalist_id order_by journalist.years_working limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of journalists from \"England\" or \"Wales\".",
        "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\""
    },
    "interaction": [
        {
            "utterance": "how many journalist there",
            "sql": "select count ( journalist.* )"
        },
        {
            "utterance": "what is the name of journalist ID 2",
            "sql": "select journalist.name where journalist.journalist_id = value"
        },
        {
            "utterance": "what is the nationality of journalist ID 1",
            "sql": "select journalist.nationality where journalist.journalist_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "sql": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3"
    },
    "interaction": [
        {
            "utterance": "Show the journalists with more than 10 years of working .",
            "sql": "select journalist.* where journalist.years_working > value"
        },
        {
            "utterance": "Show the name of journalists with more than 10 years of working and less than 3 years of working .",
            "sql": "select journalist.name where journalist.years_working > value and journalist.years_working < value"
        },
        {
            "utterance": "List the nations that have journalists with more than 10 years of working and journalists with less than 3 years of working .",
            "sql": "select journalist.nationality where journalist.years_working > value intersect select journalist.nationality where journalist.years_working < value"
        },
        {
            "utterance": "What is the average years of working for journalists from England .",
            "sql": "select avg ( journalist.years_working ) where journalist.nationality = value"
        },
        {
            "utterance": "List the names of all journalists from England .",
            "sql": "select journalist.name where journalist.nationality = value"
        },
        {
            "utterance": "What is the average age for all journalists from England .",
            "sql": "select avg ( journalist.age ) where journalist.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 11,
    "final": {
        "utterance": "List the event venues and names that have the top 2 most number of people attended.",
        "sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( event.* )"
        },
        {
            "utterance": "Can you list the ids of them by the numer of people attended ? | Do you want to list them in ascending order or descending order ? | Descending please",
            "sql": "select event.event_id order_by event.event_attendance desc"
        },
        {
            "utterance": "Can you please also include their names and the number of peole attended ?",
            "sql": "select event.event_id , event.event_attendance , event.name order_by event.event_attendance desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008"
    },
    "interaction": [
        {
            "utterance": "how many locations have shops that opened before 2008 ?",
            "sql": "select count ( shop.location ) where shop.open_year = value"
        },
        {
            "utterance": "how many shops opened later than 2012 ?",
            "sql": "select count ( shop.location ) where shop.open_year > value"
        },
        {
            "utterance": "can you show the locations for those stores ?",
            "sql": "select shop.location where shop.open_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 1,
    "final": {
        "utterance": "Show names of shops that have more than one kind of device in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what are the shops ? | Do you want the names of all the shops ? | yes",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "now show me the shop which have devices in stock",
            "sql": "select shop.shop_name group_by stock.shop_id"
        },
        {
            "utterance": "now show me the shops that have more than one device in stock",
            "sql": "select shop.shop_name group_by stock.shop_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 2,
    "final": {
        "utterance": "List the software platform shared by the greatest number of devices.",
        "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the software platform shared by the greatest number of devices .",
            "sql": "select device.software_platform group_by device.software_platform order_by count ( device.* ) desc limit_value"
        },
        {
            "utterance": "How many devices from the list use the Android platform ?",
            "sql": "select count ( device.* ) where device.software_platform = value"
        },
        {
            "utterance": "And how many devices from the list use the iOS platform ?",
            "sql": "select count ( device.* ) where device.software_platform = value"
        },
        {
            "utterance": "Could you please list the devices that use the Android platform ?",
            "sql": "select device.device where device.software_platform = value"
        },
        {
            "utterance": "How many different carriers are there on the list ?",
            "sql": "select count ( distinct device.carrier )"
        },
        {
            "utterance": "What is the carrier for the Samsung device ?",
            "sql": "select device.carrier where device.device = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name of the shop that has the most kind of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many devices are in stock at Dinas Device ?",
            "sql": "select count ( stock.device_id ) where shop.shop_name = value"
        },
        {
            "utterance": "How many devices are at Best Buy ?",
            "sql": "select count ( stock.device_id ) where shop.shop_name = value"
        },
        {
            "utterance": "Show me the name of the shop that has the most devices in stock ?",
            "sql": "select shop.shop_name group_by stock.shop_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Where are they located ?",
            "sql": "select shop.shop_name , shop.location group_by stock.shop_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name of the shop that have the largest quantity of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the shop names ?",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "Beautiful ! Can you update this list to include the stock quantity for all of these shops ?",
            "sql": "select shop.shop_name , stock.quantity"
        },
        {
            "utterance": "Can you filter this list to show the name of the shop that has the largest quantity of stock , and please also display the quantity of stock ?",
            "sql": "select shop.shop_name , stock.quantity group_by stock.shop_id order_by sum ( stock.quantity ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name of the shop that have the largest quantity of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHICH SHOP HAS THE LARGEST QUANTITY OF DEVICES IN STOCK",
            "sql": "select shop.shop_name group_by stock.shop_id order_by sum ( stock.quantity ) desc limit_value"
        },
        {
            "utterance": "WHAT IS THE LOCATION OF THIS SHOP",
            "sql": "select shop.location group_by stock.shop_id order_by sum ( stock.quantity ) desc limit_value"
        },
        {
            "utterance": "WHAT IS THE SHOP ID | Do you mean the shop id for the shop that has the largest quantity of devices in stock ? | YES",
            "sql": "select shop.shop_id group_by stock.shop_id order_by sum ( stock.quantity ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008"
    },
    "interaction": [
        {
            "utterance": "Show me the open year of all shops in numerical order .",
            "sql": "select shop.open_year order_by shop.open_year"
        },
        {
            "utterance": "Show the locations shared by shops .",
            "sql": "select shop.location group_by shop.location having count ( shop.* ) > value"
        },
        {
            "utterance": "Show the shops with open year later than 2012 and open year before 2008 .",
            "sql": "select shop.shop_name where shop.open_year > value or shop.open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\""
    },
    "interaction": [
        {
            "utterance": "What are the enrollment dates of all the tests that have result `` Pass '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment where student_tests_taken.test_result = value"
        },
        {
            "utterance": "What are the student IDs of students who passed the test ?",
            "sql": "select student_course_enrolment.student_id where student_tests_taken.test_result = value"
        },
        {
            "utterance": "How many students passed the test ?",
            "sql": "select count ( student_course_enrolment.student_id ) where student_tests_taken.test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the student ID and personal name of the student with at least two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "find the student id and personal name of the student whose course id is 2",
            "sql": "select student_course_enrolment.student_id , students.personal_name where student_course_enrolment.course_id = value"
        },
        {
            "utterance": "show the date of registration for the student id 1",
            "sql": "select students.date_of_registration where students.student_id = value"
        },
        {
            "utterance": "show the login name and password for registration id 2",
            "sql": "select students.login_name , students.password where student_course_enrolment.registration_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the common login name of course authors and students.",
        "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
    },
    "interaction": [
        {
            "utterance": "How many different student logins are there ?",
            "sql": "select count ( distinct students.login_name )"
        },
        {
            "utterance": "how many different author logins are there ?",
            "sql": "select count ( distinct course_authors_and_tutors.login_name )"
        },
        {
            "utterance": "How many login names are in both authors and students ?",
            "sql": "select course_authors_and_tutors.login_name intersect select students.login_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the completion dates of all the tests that have result \"Fail\"?",
        "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""
    },
    "interaction": [
        {
            "utterance": "What is the latest test completion date ?",
            "sql": "select student_course_enrolment.date_of_completion order_by student_course_enrolment.date_of_completion desc limit_value"
        },
        {
            "utterance": "How many students have taken tests ?",
            "sql": "select count ( distinct student_course_enrolment.student_id )"
        },
        {
            "utterance": "How many students failed tests ?",
            "sql": "select count ( distinct student_course_enrolment.student_id ) where student_tests_taken.test_result = value"
        },
        {
            "utterance": "When did these failures occur ?",
            "sql": "select student_course_enrolment.date_of_completion where student_tests_taken.test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
        "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of login name ?",
            "sql": "select students.login_name"
        },
        {
            "utterance": "can you show me a list of password ?",
            "sql": "select students.password"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many courses are taught ?",
            "sql": "select count ( courses.* )"
        },
        {
            "utterance": "How many different course authors are there ?",
            "sql": "select count ( distinct course_authors_and_tutors.author_id )"
        },
        {
            "utterance": "What is the name of the author who teaches the most courses ? | Which kinds of names do you prefer ? | personal name",
            "sql": "select course_authors_and_tutors.personal_name group_by courses.author_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the family name ?",
            "sql": "select course_authors_and_tutors.family_name group_by courses.author_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the author id ?",
            "sql": "select courses.author_id group_by courses.author_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the student ID and personal name of the student with at least two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What is the highest number of enrollments any student has ?",
            "sql": "select count ( * ) group_by student_course_enrolment.student_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many students have 5 enrollments ?",
            "sql": "select count ( * ) ( select * group_by student_course_enrolment.student_id having count ( * ) = value )"
        },
        {
            "utterance": "What is that student 's registration ID ?",
            "sql": "select student_course_enrolment.registration_id group_by student_course_enrolment.student_id having count ( * ) = value"
        },
        {
            "utterance": "Can you give me the student ID of registration ID 19 ?",
            "sql": "select student_course_enrolment.student_id where student_course_enrolment.registration_id = value"
        },
        {
            "utterance": "What is the personal name of student ID 15 ?",
            "sql": "select students.personal_name where students.student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
        "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"
    },
    "interaction": [
        {
            "utterance": "How many courses are there in Computer Science ?",
            "sql": "select count ( * ) where subjects.subject_name = value"
        },
        {
            "utterance": "Great , and how many courses are there in Arts ?",
            "sql": "select count ( * ) where subjects.subject_name = value"
        },
        {
            "utterance": "Wonderful . And how many courses in Language ?",
            "sql": "select count ( * ) where subjects.subject_name = value"
        },
        {
            "utterance": "Great , can you sort a list of Computer Science , Arts , and Language by the number of courses , in ascending order ?",
            "sql": "select subjects.subject_name group_by courses.subject_id order_by count ( * ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 8,
    "final": {
        "utterance": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""
    },
    "interaction": [
        {
            "utterance": "How many students have the family name `` Zieme '' ?",
            "sql": "select count ( students.student_id ) where students.family_name = value"
        },
        {
            "utterance": "What is that student 's personal name ?",
            "sql": "select students.personal_name where students.family_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the student ID and middle name for all the students with at most two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the IDs and middle names of all students who have no more than 2 enrollments ?",
            "sql": "select student_course_enrolment.student_id , students.middle_name group_by student_course_enrolment.student_id having count ( * ) < = value"
        },
        {
            "utterance": "What are the dates of enrollment and completion for each of those students ? Please list it in the table .",
            "sql": "select student_course_enrolment.date_of_enrolment , student_course_enrolment.date_of_completion group_by student_course_enrolment.student_id having count ( * ) < = value"
        },
        {
            "utterance": "What is the full name of the student with the latest date of completion ?",
            "sql": "select students.personal_name , students.middle_name , students.family_name order_by student_course_enrolment.date_of_completion desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of the course that has the most student enrollment?",
        "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the course that has the most student enrollment ?",
            "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many students are enrolled in French ?",
            "sql": "select count ( * ) where courses.course_name = value"
        },
        {
            "utterance": "What is the name of the course that has the least student enrollment ?",
            "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) limit_value"
        },
        {
            "utterance": "How many students are enrolled in Chinese Painting ?",
            "sql": "select count ( * ) where courses.course_name = value"
        },
        {
            "utterance": "What is this student 's name ? | There no info about the name of the student . How about the id of the student ? | What is the ID of this student ?",
            "sql": "select student_course_enrolment.student_id where courses.course_name = value"
        },
        {
            "utterance": "What other classes is this student taking ?",
            "sql": "select distinct courses.course_name where student_course_enrolment.student_id = value and courses.course_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of each course and the corresponding number of student enrollment?",
        "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the courses",
            "sql": "select courses.course_name"
        },
        {
            "utterance": "Yes please",
            "sql": "select courses.course_name , count ( * ) group_by courses.course_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the student ID and login name of the student with the most course enrollments",
        "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest number of enrollments ? | do you mean the highest number of course enrollments of student ? | yes",
            "sql": "select count ( * ) group_by student_course_enrolment.student_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the student ID with the most course enrollments",
            "sql": "select student_course_enrolment.student_id group_by student_course_enrolment.student_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the login name of the student with the most course enrollments ?",
            "sql": "select students.login_name group_by student_course_enrolment.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 13,
    "final": {
        "utterance": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""
    },
    "interaction": [
        {
            "utterance": "LIST THE DATES OF ENROLLMENT AND COMPLETION OF THE STUDENT WITH PERSONAL NAME `` KARSON '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment , student_course_enrolment.date_of_completion where students.personal_name = value"
        },
        {
            "utterance": "List the name of all students ?",
            "sql": "select students.personal_name , students.middle_name , students.family_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the common login name of course authors and students.",
        "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
    },
    "interaction": [
        {
            "utterance": "How many login names are there ? | Did you mean the login names for all students ? | How many login names are there for the students ?",
            "sql": "select count ( distinct students.login_name )"
        },
        {
            "utterance": "What login name is the same for students and course authors ?",
            "sql": "select course_authors_and_tutors.login_name intersect select students.login_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
        "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the course authors who teach the course with the name `` operating system '' or `` data structure '' please ? | do you want to return their personal , middle , and family names ? | All of those , please ?",
            "sql": "select course_authors_and_tutors.personal_name , course_authors_and_tutors.middle_name , course_authors_and_tutors.family_name where courses.course_name = value or courses.course_name = value"
        },
        {
            "utterance": "What are their login names ?",
            "sql": "select course_authors_and_tutors.login_name where courses.course_name = value or courses.course_name = value"
        },
        {
            "utterance": "What are the full names of the course authors who teach the course with the name `` advanced database '' please ?",
            "sql": "select course_authors_and_tutors.personal_name , course_authors_and_tutors.middle_name , course_authors_and_tutors.family_name where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "List the author ids listed more than once in the courses",
            "sql": "select courses.author_id group_by courses.author_id having count ( courses.author_id ) > value"
        },
        {
            "utterance": "Find the addresses and author IDs of the course authors that teach at least two courses .",
            "sql": "select course_authors_and_tutors.address_line_1 , courses.author_id group_by courses.author_id having count ( * ) > = value"
        },
        {
            "utterance": "How about those who teaches at least one course ?",
            "sql": "select course_authors_and_tutors.address_line_1 , courses.author_id group_by courses.author_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the date of enrollment of the course named \"Spanish\"?",
        "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""
    },
    "interaction": [
        {
            "utterance": "What is the date of enrollment of the course named `` Spanish '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment where courses.course_name = value"
        },
        {
            "utterance": "What is the date of enrollment in the course named `` database '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment where courses.course_name = value"
        },
        {
            "utterance": "What is the date of enrollment in the course named `` advanced database '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment where courses.course_name = value"
        },
        {
            "utterance": "What is the date of enrollment in the course named `` operating system '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment where courses.course_name = value"
        },
        {
            "utterance": "What is the date of completion in the course named `` advanced database ? ''",
            "sql": "select student_course_enrolment.date_of_completion where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id"
    },
    "interaction": [
        {
            "utterance": "what are the subjects available ?",
            "sql": "select subjects.subject_name"
        },
        {
            "utterance": "list the author ids",
            "sql": "select courses.author_id"
        },
        {
            "utterance": "list the course ids available",
            "sql": "select courses.course_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 19,
    "final": {
        "utterance": "List each test result and its count in descending order of count.",
        "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many failed the exam ?",
            "sql": "select count ( student_tests_taken.* ) where student_tests_taken.test_result = value"
        },
        {
            "utterance": "And what about passed ?",
            "sql": "select count ( student_tests_taken.* ) where student_tests_taken.test_result = value"
        },
        {
            "utterance": "Can you list each test result and it 's count in descending order based on count ?",
            "sql": "select student_tests_taken.test_result , count ( student_tests_taken.* ) group_by student_tests_taken.test_result order_by count ( student_tests_taken.* ) desc"
        },
        {
            "utterance": "Yes , what are ids of all passed exams ?",
            "sql": "select student_tests_taken.registration_id where student_tests_taken.test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the login name of the course author that teaches the course with name \"advanced database\".",
        "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""
    },
    "interaction": [
        {
            "utterance": "Can you please provide the names of all courses ?",
            "sql": "select courses.course_name"
        },
        {
            "utterance": "Can you please provide the author id for the author that teaches the Advanced Database course ?",
            "sql": "select courses.author_id where courses.course_name = value"
        },
        {
            "utterance": "And what is the full name of the teacher with author id 6 ?",
            "sql": "select course_authors_and_tutors.personal_name , course_authors_and_tutors.middle_name , course_authors_and_tutors.family_name where course_authors_and_tutors.author_id = value"
        },
        {
            "utterance": "And the login name for Adolf Keira Rohan ?",
            "sql": "select course_authors_and_tutors.login_name where course_authors_and_tutors.personal_name like value and course_authors_and_tutors.middle_name like value and course_authors_and_tutors.family_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names of the city with the top 5 white percentages.",
        "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "how many cities are there ?",
            "sql": "select count ( city.* )"
        },
        {
            "utterance": "which city has most hispanic population ?",
            "sql": "select city.name order_by city.hispanic desc limit_value"
        },
        {
            "utterance": "what about black ?",
            "sql": "select city.name order_by city.black desc limit_value"
        },
        {
            "utterance": "what about white ?",
            "sql": "select city.name order_by city.white desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name of cities in the county that has the largest number of police officers.",
        "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "show the names of cities",
            "sql": "select city.name"
        },
        {
            "utterance": "list out the names",
            "sql": "select city.name"
        },
        {
            "utterance": "what is the population of Abbotsford",
            "sql": "select county_public_safety.population where county_public_safety.name = value"
        },
        {
            "utterance": "what is the crime rate of Campbell River",
            "sql": "select county_public_safety.crime_rate where county_public_safety.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the number of cities in counties that have a population more than 20000.",
        "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all of the cities including city IDs and city names ?",
            "sql": "select city.city_id , city.name"
        },
        {
            "utterance": "Oh , I am sorry about that . Can you please show me a list of all of the cities located in counties that for which the county has a population over 20,000 ?",
            "sql": "select city.name where city.county_id in ( select county_public_safety.county_id where county_public_safety.population > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of counties that do not have any cities.",
        "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
    },
    "interaction": [
        {
            "utterance": "Okay ! Can you provide me with a list of all of the city names and which counties they belong to ?",
            "sql": "select city.name , county_public_safety.name"
        },
        {
            "utterance": "Thank you very much ! Can you filter this list to show only the cities in the country with the largest population ?",
            "sql": "select city.name , county_public_safety.name order_by county_public_safety.population desc limit_value"
        },
        {
            "utterance": "Thank you ! Can you update this filtered list to show the total population of this county ?",
            "sql": "select county_public_safety.population order_by county_public_safety.population desc limit_value"
        },
        {
            "utterance": "Awesome ! Finally , can you show me the number of residents per officer for this county ?",
            "sql": "select county_public_safety.residents_per_officer order_by county_public_safety.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the police force shared by counties with location on the east and west.",
        "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""
    },
    "interaction": [
        {
            "utterance": "What is the police force of counties on the east side ?",
            "sql": "select county_public_safety.police_force where county_public_safety.location = value"
        },
        {
            "utterance": "What is the police force of counties on the west side ?",
            "sql": "select county_public_safety.police_force where county_public_safety.location = value"
        },
        {
            "utterance": "What is the police force shared by county on both sides ?",
            "sql": "select county_public_safety.police_force where county_public_safety.location = value intersect select county_public_safety.police_force where county_public_safety.location = value"
        },
        {
            "utterance": "How many police officers are in the police force shared by county on both sides ?",
            "sql": "select count ( county_public_safety.* ) ( select county_public_safety.police_force where county_public_safety.location = value intersect select county_public_safety.police_force where county_public_safety.location = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name of cities in the county that has the largest number of police officers.",
        "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Show the name of cities in the county that has the largest number of police officers .",
            "sql": "select city.name where city.county_id = ( select county_public_safety.county_id order_by county_public_safety.police_officers desc limit_value )"
        },
        {
            "utterance": "How many police officers are in Albonito ? | Do you mean 'Aibonito ' not 'Albonito ' ? | Yes Aibonito , my mistake",
            "sql": "select county_public_safety.police_officers where county_public_safety.county_id = ( select city.county_id where city.name = value )"
        },
        {
            "utterance": "What is the population of Aibonito ?",
            "sql": "select county_public_safety.population where county_public_safety.county_id = ( select city.county_id where city.name = value )"
        },
        {
            "utterance": "What is the crime rate in Aibonito ?",
            "sql": "select county_public_safety.crime_rate where county_public_safety.county_id = ( select city.county_id where city.name = value )"
        },
        {
            "utterance": "How many residents per officer are there in Aibonito ?",
            "sql": "select county_public_safety.residents_per_officer where county_public_safety.county_id = ( select city.county_id where city.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the minimum and maximum crime rate of counties?",
        "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"
    },
    "interaction": [
        {
            "utterance": "How many counties are there ?",
            "sql": "select count ( county_public_safety.* )"
        },
        {
            "utterance": "Which county has the lowest crime rate ? | Would you like the county name corresponding to the lowest crime rate ? | yes",
            "sql": "select county_public_safety.name order_by county_public_safety.crime_rate asc limit_value"
        },
        {
            "utterance": "which county has the highest crime rate ?",
            "sql": "select county_public_safety.name order_by county_public_safety.crime_rate desc limit_value"
        },
        {
            "utterance": "list together , the crime rate for Central Saanich and Campbell River counties | Would you like me to list the crime rates for counties with the name Central Saanich or Campbell River ? | yes",
            "sql": "select county_public_safety.name , county_public_safety.crime_rate where county_public_safety.name = value or county_public_safety.name = value"
        },
        {
            "utterance": "please list by crime rate in ascending order | Would you like the crime rates for all counties in ascending order of crime rate ? | no , just for the 2 counties from the previous query",
            "sql": "select county_public_safety.name , county_public_safety.crime_rate where county_public_safety.name = value or county_public_safety.name = value order_by county_public_safety.crime_rate asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the crime rate of counties with a city having white percentage more than 90.",
        "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"
    },
    "interaction": [
        {
            "utterance": "what the highest population in the county public safety table",
            "sql": "select max ( county_public_safety.population )"
        },
        {
            "utterance": "how many locations in the county public safety table",
            "sql": "select count ( county_public_safety.location )"
        },
        {
            "utterance": "what are the highest crime rate in the county public safety table",
            "sql": "select county_public_safety.crime_rate order_by county_public_safety.crime_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 8,
    "final": {
        "utterance": "List the name of the county with the largest population.",
        "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Could you please get me the name of the county with the largest population ?",
            "sql": "select county_public_safety.name order_by county_public_safety.population desc limit_value"
        },
        {
            "utterance": "How many police officers are there in that county ?",
            "sql": "select county_public_safety.police_officers order_by county_public_safety.population desc limit_value"
        },
        {
            "utterance": "What counties have more police officers than that ? | do you want to return their names ? | Yes , please .",
            "sql": "select county_public_safety.name where county_public_safety.police_officers > ( select county_public_safety.police_officers order_by county_public_safety.population desc limit_value )"
        },
        {
            "utterance": "Which county has the lowest amount of police officers ?",
            "sql": "select county_public_safety.name order_by county_public_safety.population limit_value"
        },
        {
            "utterance": "How many police officers are in that county ?",
            "sql": "select county_public_safety.police_officers order_by county_public_safety.police_officers limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the location shared by most counties?",
        "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many customer list ? | Do you want the number of documents in the list ? | No , and what is the location shared by the least counties ?",
            "sql": "select county_public_safety.location group_by county_public_safety.location order_by count ( county_public_safety.* ) limit_value"
        },
        {
            "utterance": "Find the crime rate of the county named `` Burnaby '' ?",
            "sql": "select county_public_safety.crime_rate where county_public_safety.name = value"
        },
        {
            "utterance": "Find the location of the campbell river ?",
            "sql": "select county_public_safety.location where county_public_safety.name = value"
        },
        {
            "utterance": "which police force assigned the country id 2 ?",
            "sql": "select county_public_safety.police_officers where county_public_safety.county_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 0,
    "final": {
        "utterance": "List the nominees that have been nominated more than two musicals.",
        "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Give me the list of nominees that has been nominated multiple times for musicals",
            "sql": "select musical.nominee group_by musical.nominee having count ( musical.* ) > value"
        },
        {
            "utterance": "And what musicals were they nominated for ?",
            "sql": "select musical.name group_by musical.nominee having count ( musical.* ) > value"
        },
        {
            "utterance": "What year ( s ) were they nominated in ?",
            "sql": "select musical.year group_by musical.nominee having count ( musical.* ) > value"
        },
        {
            "utterance": "Who else was also nominated in 1986 ?",
            "sql": "select distinct musical.nominee where musical.year = value and musical.nominee != value"
        },
        {
            "utterance": "What musicals were they nominated for ?",
            "sql": "select musical.name where musical.year = value and musical.nominee = value"
        },
        {
            "utterance": "And in what categories were those nominations ?",
            "sql": "select musical.name , musical.category where musical.year = value and musical.nominee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the duration of the oldest actor?",
        "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the duration of the oldest actor ?",
            "sql": "select actor.duration order_by actor.age desc limit_value"
        },
        {
            "utterance": "What is the character of Tom Oliver ?",
            "sql": "select actor.character where actor.name = value"
        },
        {
            "utterance": "Please List out the Actors name ?",
            "sql": "select actor.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
    },
    "interaction": [
        {
            "utterance": "Which nominees have nominated musicals for `` Tony Award '' ?",
            "sql": "select distinct musical.nominee where musical.award = value"
        },
        {
            "utterance": "Which nominees have nominated musicals for `` Drama Desk Award '' ?",
            "sql": "select distinct musical.nominee where musical.award = value"
        },
        {
            "utterance": "Which of these have nominated musicals for both `` Tony Award '' and `` Drama Desk Award '' ?",
            "sql": "select musical.nominee where musical.award = value intersect select musical.nominee where musical.award = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 3,
    "final": {
        "utterance": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
    },
    "interaction": [
        {
            "utterance": "What 1986 movie was nominated for a Tony Award for Best Book of a Musical ?",
            "sql": "select musical.name where musical.year = value and musical.category = value and musical.result = value"
        },
        {
            "utterance": "How many actors appeared in it ?",
            "sql": "select count ( actor.name ) where musical.year = value and musical.category = value and musical.result = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select actor.name where musical.year = value and musical.category = value and musical.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
    },
    "interaction": [
        {
            "utterance": "Can you list the awards of the musical nominee `` Bob Fosse '' ?",
            "sql": "select distinct musical.award where musical.nominee = value"
        },
        {
            "utterance": "Can you list the awards of the musical nominee `` Cleavant Derricks '' ?",
            "sql": "select distinct musical.award where musical.nominee = value"
        },
        {
            "utterance": "What categories did Cleavant Derricks win for ?",
            "sql": "select musical.category where musical.nominee = value and musical.result = value"
        },
        {
            "utterance": "What categories were Cleavant Derrick nominated for ?",
            "sql": "select musical.category where musical.nominee = value and musical.result = value"
        },
        {
            "utterance": "What categories did Bob Fosse win in ?",
            "sql": "select musical.category where musical.nominee = value and musical.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the nominee who has been nominated the greatest number of times.",
        "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many times has Bob Fosse been nominated ?",
            "sql": "select count ( musical.* ) where musical.nominee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 6,
    "final": {
        "utterance": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
    },
    "interaction": [
        {
            "utterance": "Which musician has the most number of actors who have appeared in the musicals ? | Did you want the name of the musical ? | Yes",
            "sql": "select musical.name group_by actor.musical_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "From which year is it ?",
            "sql": "select musical.year group_by actor.musical_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the musical id of Lou Carpenter ?",
            "sql": "select musical.musical_id where actor.character = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names of musicals which have at least three actors.",
        "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "which musical ids showed up at least three times in the actor table ?",
            "sql": "select musical.musical_id group_by actor.musical_id having count ( * ) > = value"
        },
        {
            "utterance": "What year is that musical with id 6 ?",
            "sql": "select distinct ( musical.year ) where musical.musical_id = value"
        },
        {
            "utterance": "And what 's the name for that musical with ID 6 ?",
            "sql": "select distinct ( musical.name ) where musical.musical_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 8,
    "final": {
        "utterance": "Show names of musicals which have at least three actors.",
        "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "list the names of the musicals with more than three actors",
            "sql": "select musical.name group_by actor.musical_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 0,
    "final": {
        "utterance": "Which address do not have any member with the black membership card?",
        "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    "interaction": [
        {
            "utterance": "what is the average level of membership ?",
            "sql": "select avg ( member.level_of_membership )"
        },
        {
            "utterance": "How many membership cards are black ?",
            "sql": "select count ( member.* ) where member.membership_card = value"
        },
        {
            "utterance": "what 's the average time of purchase for white membership card ?",
            "sql": "select avg ( member.time_of_purchase ) where member.membership_card = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select member.name where member.membership_card = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "sql": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'"
    },
    "interaction": [
        {
            "utterance": "how many membership cards ? | There are 2 different membership cards . | what is age of Ashby Lazale",
            "sql": "select member.age where member.name = value"
        },
        {
            "utterance": "how many time of purchase in ashby lazale",
            "sql": "select member.time_of_purchase where member.name = value"
        },
        {
            "utterance": "Level of membership Breton , Robert",
            "sql": "select member.level_of_membership where member.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 2,
    "final": {
        "utterance": "Which address has both members younger than 30 and members older than 40?",
        "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"
    },
    "interaction": [
        {
            "utterance": "What is the membership card of Breton , Robert ?",
            "sql": "select member.membership_card where member.name = value"
        },
        {
            "utterance": "What is the age of Breton , Robert ?",
            "sql": "select member.age where member.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the id and address of the shops which have a happy hour in May?",
        "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'"
    },
    "interaction": [
        {
            "utterance": "Which store has the most staff ? | Do you want to get the shop ID which has the most staff ? | yes , please",
            "sql": "select shop.shop_id order_by shop.num_of_staff desc limit_value"
        },
        {
            "utterance": "Which shop has a happy hour in may ? | Do you want to get shop ID or another attribute ? | shop id",
            "sql": "select shop.shop_id where happy_hour.month = value"
        },
        {
            "utterance": "Can you also show me their addresses ? | Here are the addresses of shops that have happy hours in may | Can you show me them with their corresponding shop ids ?",
            "sql": "select shop.address , shop.shop_id where happy_hour.month = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 4,
    "final": {
        "utterance": "Which months have more than 2 happy hours?",
        "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "whats he average number of staffs in charge",
            "sql": "select avg ( happy_hour.num_of_shaff_in_charge )"
        },
        {
            "utterance": "how many months in total",
            "sql": "select count ( distinct happy_hour.month )"
        },
        {
            "utterance": "which months have more than 2 happy hours",
            "sql": "select happy_hour.month group_by happy_hour.month having count ( happy_hour.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the average score and average staff number of all shops?",
        "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
    },
    "interaction": [
        {
            "utterance": "How many shops have a score of above 37 ?",
            "sql": "select count ( shop.* ) where shop.score > value"
        },
        {
            "utterance": "Which shop has the lowest number of staff ? | The shop with ID 1 has the lowest number of staff . | What is the average number of workers for all the shops ?",
            "sql": "select avg ( shop.num_of_staff )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the ids and names of members who are under age 30 or with black membership card.",
        "sql": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30"
    },
    "interaction": [
        {
            "utterance": "Find the ids and names of members who are under age 30",
            "sql": "select member.name , member.member_id where member.age < value"
        },
        {
            "utterance": "Please find the ids and names of members with black membership card .",
            "sql": "select member.name , member.member_id where member.membership_card = value"
        },
        {
            "utterance": "Hmmm . Can you also show me the ids and names of members who are over age 30 ?",
            "sql": "select member.name , member.member_id where member.membership_card = value or member.age > value"
        },
        {
            "utterance": "How many of these members have a black membership card ?",
            "sql": "select count ( member.* ) where member.membership_card = value or member.age > value"
        },
        {
            "utterance": "Can you please show me their names ?",
            "sql": "select member.name where member.membership_card = value or member.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 7,
    "final": {
        "utterance": "Which month has the most happy hours?",
        "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I 'd like to know how many staff are in charge in June ?",
            "sql": "select happy_hour.num_of_shaff_in_charge where happy_hour.month = value"
        },
        {
            "utterance": "How many places offer happy hour ?",
            "sql": "select count ( distinct happy_hour.shop_id )"
        },
        {
            "utterance": "Which of those 5 distinct shops have the most happy hours ? | Shop id 1 has the most happy hours | Can you tell me which shop ID offers the least happy hours ?",
            "sql": "select happy_hour.shop_id group_by happy_hour.shop_id order_by count ( happy_hour.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 8,
    "final": {
        "utterance": "Which address has both members younger than 30 and members older than 40?",
        "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"
    },
    "interaction": [
        {
            "utterance": "Which address has members younger than 30 ?",
            "sql": "select member.address where member.age < value"
        },
        {
            "utterance": "Which address has members older than 40 ?",
            "sql": "select member.address where member.age > value"
        },
        {
            "utterance": "Which address has members younger than 30 and older than 40 ?",
            "sql": "select member.address where member.age < value intersect select member.address where member.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the average score and average staff number of all shops?",
        "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
    },
    "interaction": [
        {
            "utterance": "What are the average score and average staff number of all shops ?",
            "sql": "select avg ( shop.num_of_staff ) , avg ( shop.score )"
        },
        {
            "utterance": "Which shop has the highest score ?",
            "sql": "select shop.* order_by shop.score desc limit_value"
        },
        {
            "utterance": "How many shops have more staff than shop 10 ?",
            "sql": "select count ( shop.* ) where shop.num_of_staff > ( select shop.num_of_staff where shop.shop_id = value )"
        },
        {
            "utterance": "And are there any other shops on the same street ? | What street are you referring to ? | The street shop 10 is on .",
            "sql": "select shop.* where shop.address = ( select shop.address where shop.shop_id = value ) and shop.shop_id != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 0,
    "final": {
        "utterance": "Which kind of policy type was chosen by the most customers?",
        "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many policy types are there ?",
            "sql": "select count ( distinct customer_policies.policy_type_code )"
        },
        {
            "utterance": "what are those types ?",
            "sql": "select customer_policies.policy_type_code group_by customer_policies.policy_type_code"
        },
        {
            "utterance": "how many times has a customer chosen car | There are 4 times that a customer chose a policy with type code car . | how about life ?",
            "sql": "select count ( customer_policies.* ) where customer_policies.policy_type_code = value"
        },
        {
            "utterance": "what about for each of the last two policies ?",
            "sql": "select count ( customer_policies.* ) , customer_policies.policy_type_code group_by customer_policies.policy_type_code having customer_policies.policy_type_code = value or customer_policies.policy_type_code = value"
        },
        {
            "utterance": "Which of those has the highest count of customers ?",
            "sql": "select customer_policies.policy_type_code group_by customer_policies.policy_type_code order_by count ( customer_policies.* ) desc limit_value"
        },
        {
            "utterance": "And which has least ?",
            "sql": "select customer_policies.policy_type_code group_by customer_policies.policy_type_code order_by count ( customer_policies.* ) limit_value"
        },
        {
            "utterance": "Which policy had the most , again ?",
            "sql": "select customer_policies.policy_type_code group_by customer_policies.policy_type_code order_by count ( customer_policies.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the most popular payment method?",
        "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! From this database , what is the most popular payment method ?",
            "sql": "select payments.payment_method_code group_by payments.payment_method_code order_by count ( payments.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 2,
    "final": {
        "utterance": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"
    },
    "interaction": [
        {
            "utterance": "tell me how many settlements each claim responds to | Did you mean to ask for the claim id and number of settlements that each claim responds to ? | list the claim ids",
            "sql": "select claims.claim_id"
        },
        {
            "utterance": "list all the amounts claimed",
            "sql": "select claims.amount_claimed"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 3,
    "final": {
        "utterance": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
        "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "What date was the claim made ?",
            "sql": "select claims.date_claim_made"
        },
        {
            "utterance": "Looking at the claim for 2018-06-14 what date was it settled ?",
            "sql": "select claims.date_claim_settled where claims.date_claim_made = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 4,
    "final": {
        "utterance": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
        "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what 's the policy id for claim id 143 ?",
            "sql": "select claims.policy_id where claims.claim_id = value"
        },
        {
            "utterance": "What 's the most recent claim date ?",
            "sql": "select claims.date_claim_settled order_by claims.date_claim_settled desc limit_value"
        },
        {
            "utterance": "what was the amount claimed ? | On this day ? | yes",
            "sql": "select claims.amount_claimed where claims.date_claim_settled = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 5,
    "final": {
        "utterance": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"
    },
    "interaction": [
        {
            "utterance": "Hello , I was wondering how many claims are made ?",
            "sql": "select count ( claims.* )"
        },
        {
            "utterance": "About how many settlements does each claim correspond to ?",
            "sql": "select claims.claim_id , count ( * ) group_by claims.claim_id"
        },
        {
            "utterance": "No problem , what is the average amount of days for a claim to be settled ?",
            "sql": "select avg ( claims.date_claim_settled - claims.date_claim_made )"
        },
        {
            "utterance": "Claim number 801 had 4 settlements , what was the largest one ? | Do you mean largest in terms of the amount claimed or amount settled ? | Yes , both .",
            "sql": "select settlements.settlement_id , settlements.amount_claimed , settlements.amount_settled where claims.claim_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 6,
    "final": {
        "utterance": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "hi I was wondering how many policies Ellsworth Paucek has ?",
            "sql": "select count ( * ) where customers.customer_details = value"
        },
        {
            "utterance": "do you know how many total customers had more than 1 policy ?",
            "sql": "select count ( * ) ( select customers.customer_details , customers.customer_id group_by customers.customer_id having count ( * ) > value )"
        },
        {
            "utterance": "could you tell me those four customer 's details and their ID ?",
            "sql": "select customers.customer_details , customers.customer_id group_by customers.customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 7,
    "final": {
        "utterance": "Which kind of policy type was chosen by the most customers?",
        "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which kind of policy type was chosen by the most customers ?",
            "sql": "select customer_policies.policy_type_code group_by customer_policies.policy_type_code order_by count ( customer_policies.* ) desc limit_value"
        },
        {
            "utterance": "what about the least ?",
            "sql": "select customer_policies.policy_type_code group_by customer_policies.policy_type_code order_by count ( customer_policies.* ) limit_value"
        },
        {
            "utterance": "What is Policy_Type_Code of Customer_ID 3 ?",
            "sql": "select customer_policies.policy_type_code where customer_policies.customer_id = value"
        },
        {
            "utterance": "What is the Start Date of Policy ID 143 ?",
            "sql": "select customer_policies.start_date where customer_policies.policy_id = value"
        },
        {
            "utterance": "What is the Policy ID of Policy Type Life ?",
            "sql": "select customer_policies.policy_id where customer_policies.policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 8,
    "final": {
        "utterance": "With which kind of payment method were the least number of payments processed?",
        "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average payment method used to process payments ? | Sorry . Can you clarify your question ? | How many payment methods were used to process payments ?",
            "sql": "select count ( distinct payments.payment_method_code )"
        },
        {
            "utterance": "What payment method is used to process payments the most ?",
            "sql": "select payments.payment_method_code group_by payments.payment_method_code order_by count ( payments.* ) desc limit_value"
        },
        {
            "utterance": "And the least used payment method ?",
            "sql": "select payments.payment_method_code group_by payments.payment_method_code order_by count ( payments.* ) asc limit_value"
        },
        {
            "utterance": "How many payment methods has American Express processed ?",
            "sql": "select payments.payment_method_code , count ( payments.* ) group_by payments.payment_method_code having payments.payment_method_code = value"
        },
        {
            "utterance": "What about MasterCard ?",
            "sql": "select payments.payment_method_code , count ( payments.* ) where payments.payment_method_code = value"
        },
        {
            "utterance": "Can I get the names of all the payment methods used ?",
            "sql": "select distinct payments.payment_method_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 9,
    "final": {
        "utterance": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the settlement claim with the largest claim amount ? | What do you mean by the name of the settlement claim ? | i mean the claim id",
            "sql": "select claims.claim_id order_by claims.amount_claimed desc limit_value"
        },
        {
            "utterance": "in what policy id is it in ?",
            "sql": "select claims.policy_id order_by claims.amount_claimed desc limit_value"
        },
        {
            "utterance": "what date was the claim made ?",
            "sql": "select claims.date_claim_made order_by claims.amount_claimed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 10,
    "final": {
        "utterance": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the claim that incurred most number of settlements ? | what do you want to know about this claim ? | what is the claim id ?",
            "sql": "select claims.claim_id group_by claims.claim_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the date that the claim was settled ?",
            "sql": "select settlements.date_claim_settled group_by claims.claim_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 11,
    "final": {
        "utterance": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all the claim IDs and their associated claim amount ?",
            "sql": "select claims.claim_id , claims.amount_claimed"
        },
        {
            "utterance": "Thank you for that ! Can you filter this list to show the rows and associated Claim IDs and amounts for the claims with a higher than average amount ? | Hi sorry , can you ask this question again . | Sorry ! I 'll ask it a different way ... Can you please list all claim ids which have a higher than average claim amount ?",
            "sql": "select claims.claim_id where claims.amount_claimed > ( select avg ( claims.amount_claimed ) )"
        },
        {
            "utterance": "Great ! Can you tell me which ClaimID is associated with the largest claim amount ?",
            "sql": "select claims.claim_id order_by claims.amount_claimed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 12,
    "final": {
        "utterance": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"
    },
    "interaction": [
        {
            "utterance": "Which claims caused more than 2 settlements ? Please list the date the claim was made and the claim id ?",
            "sql": "select claims.date_claim_made , claims.claim_id group_by claims.claim_id having count ( * ) > value"
        },
        {
            "utterance": "Which claim had the highest claim value ? Please list the date the claim was made and the claim id .",
            "sql": "select claims.date_claim_made , claims.claim_id order_by claims.amount_claimed desc limit_value"
        },
        {
            "utterance": "What date was that claim made ?",
            "sql": "select claims.date_claim_made order_by claims.amount_claimed desc limit_value"
        },
        {
            "utterance": "What date was that claim settled ?",
            "sql": "select claims.date_claim_settled order_by claims.amount_claimed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 13,
    "final": {
        "utterance": "Of all the claims, what was the earliest date when any claim was made?",
        "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What days were the claims made ?",
            "sql": "select claims.date_claim_made"
        },
        {
            "utterance": "When was the earliest claim made ?",
            "sql": "select claims.date_claim_made order_by claims.date_claim_made asc limit_value"
        },
        {
            "utterance": "What was the claim ID for the earliest claim ?",
            "sql": "select claims.claim_id order_by claims.date_claim_made asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the actual delivery dates of orders with quantity 1?",
        "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"
    },
    "interaction": [
        {
            "utterance": "what are the actual delivery dates of orders with quantity 1 ?",
            "sql": "select customer_orders.actual_delivery_date where order_items.order_quantity = value"
        },
        {
            "utterance": "what is the order date of order id 1 ?",
            "sql": "select customer_orders.order_date where customer_orders.order_id = value"
        },
        {
            "utterance": "Customer id of order id 1",
            "sql": "select customer_orders.customer_id where customer_orders.order_id = value"
        },
        {
            "utterance": "what is Planned Delivery Date of customer id 516",
            "sql": "select customer_orders.planned_delivery_date where customer_orders.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 1,
    "final": {
        "utterance": "Which city is the address of the store named \"FJA Filming\" located in?",
        "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""
    },
    "interaction": [
        {
            "utterance": "What is the address for FJA Filming ?",
            "sql": "select * where stores.store_name = value"
        },
        {
            "utterance": "What state is that in ?",
            "sql": "select addresses.state_county where stores.store_name = value"
        },
        {
            "utterance": "What is the city ?",
            "sql": "select addresses.city_town where stores.store_name = value"
        },
        {
            "utterance": "Last what is the phone number ?",
            "sql": "select stores.store_phone where stores.store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all cities along with the number of drama workshop groups in each city.",
        "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"
    },
    "interaction": [
        {
            "utterance": "list all city towns",
            "sql": "select addresses.city_town"
        },
        {
            "utterance": "give the state county each belongs to",
            "sql": "select addresses.city_town , addresses.state_county"
        },
        {
            "utterance": "list all store email addresses",
            "sql": "select drama_workshop_groups.store_email_address"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the product ID of the most frequently ordered item on invoices?",
        "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many Invoices there",
            "sql": "select count ( invoices.* )"
        },
        {
            "utterance": "how many master card there",
            "sql": "select count ( invoices.* ) where invoices.payment_method_code = value"
        },
        {
            "utterance": "how many visa card use to payment",
            "sql": "select count ( invoices.* ) where invoices.payment_method_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the payment method code used by the most orders?",
        "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you please provide me with a list of all of the different payment method code types ?",
            "sql": "select distinct invoices.payment_method_code"
        },
        {
            "utterance": "Awesome ! Of these different codes , can you tell me which individual code was used by the largest number of orders ?",
            "sql": "select invoices.payment_method_code group_by invoices.payment_method_code order_by count ( invoices.* ) desc limit_value"
        },
        {
            "utterance": "Great ! Can you please tell me what is the total number of orders that used MasterCard ?",
            "sql": "select count ( invoices.* ) where invoices.payment_method_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\""
    },
    "interaction": [
        {
            "utterance": "what are all the marketing regions ?",
            "sql": "select marketing_regions.marketing_region_name"
        },
        {
            "utterance": "what is the store Rob Dinning 's marketing code ?",
            "sql": "select stores.marketing_region_code where stores.store_name = value"
        },
        {
            "utterance": "what is the name of Rob Dinning 's marketing region ?",
            "sql": "select marketing_regions.marketing_region_name where stores.store_name = value"
        },
        {
            "utterance": "what can you tell me about Rob Dinning ?",
            "sql": "select stores.* where stores.store_name = value"
        },
        {
            "utterance": "now tell me Rob Dinning 's marketing region ?",
            "sql": "select marketing_regions.marketing_region_name where stores.store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the minimum, average, maximum order quantity of all invoices.",
        "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES"
    },
    "interaction": [
        {
            "utterance": "show the minimum order quality of all invoices",
            "sql": "select min ( invoices.order_quantity )"
        },
        {
            "utterance": "show the maximum order quality of all invoices",
            "sql": "select max ( invoices.order_quantity )"
        },
        {
            "utterance": "show the average order quantity of all invoices",
            "sql": "select avg ( invoices.order_quantity )"
        },
        {
            "utterance": "show the order id , product id with order quantity",
            "sql": "select invoices.order_id , invoices.product_id , invoices.order_quantity"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""
    },
    "interaction": [
        {
            "utterance": "How many drama workshop groups are in Feliciaberg City ?",
            "sql": "select count ( * ) where addresses.city_town = value"
        },
        {
            "utterance": "What is the group 's name ?",
            "sql": "select drama_workshop_groups.store_name where addresses.city_town = value"
        },
        {
            "utterance": "In what state is it located ?",
            "sql": "select addresses.state_county where addresses.city_town = value"
        },
        {
            "utterance": "What is the exact address ? | Do you mean line 1 of address ? | yes",
            "sql": "select addresses.line_1 where addresses.city_town = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""
    },
    "interaction": [
        {
            "utterance": "Show me the names of the workshop groups that have bookings with status code `` stop '' ?",
            "sql": "select drama_workshop_groups.store_name where bookings.status_code = value"
        },
        {
            "utterance": "Show me IDs of workshop groups that have bookings with status code `` stop ''",
            "sql": "select drama_workshop_groups.workshop_group_id where bookings.status_code = value"
        },
        {
            "utterance": "Show me Address IDs of workshop groups that have bookings with status code `` stop ''",
            "sql": "select drama_workshop_groups.address_id where bookings.status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the most frequent status of bookings?",
        "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many bookings are there ?",
            "sql": "select count ( bookings.* )"
        },
        {
            "utterance": "How many different statuses are used on those bookings ?",
            "sql": "select count ( distinct bookings.status_code )"
        },
        {
            "utterance": "Which of those statuses is used most commonly ?",
            "sql": "select bookings.status_code group_by bookings.status_code order_by count ( bookings.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all cities where at least one customer lives in but no performer lives in.",
        "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"
    },
    "interaction": [
        {
            "utterance": "What are the names of the cities that all customers live in ?",
            "sql": "select addresses.city_town"
        },
        {
            "utterance": "Okay , what about the names of the cities that all performers live in ?",
            "sql": "select distinct addresses.city_town"
        },
        {
            "utterance": "Of these cities , which do not also appear on the customer cities list ?",
            "sql": "select addresses.city_town except select addresses.city_town"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the order dates of orders with price higher than 1000?",
        "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000"
    },
    "interaction": [
        {
            "utterance": "How many orders are priced higher than 1000 ?",
            "sql": "select count ( * ) where products.product_price > value"
        },
        {
            "utterance": "What are the order dates of orders with a price higher than 1000 ?",
            "sql": "select customer_orders.order_date where products.product_price > value"
        },
        {
            "utterance": "What are their planned delivery dates ?",
            "sql": "select customer_orders.planned_delivery_date where products.product_price > value"
        },
        {
            "utterance": "And what were the actual delivery dates ?",
            "sql": "select customer_orders.actual_delivery_date where products.product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the description and code of the type of service that is performed the most often?",
        "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the description of the type of service that is performed the most often ?",
            "sql": "select ref_service_types.service_type_description group_by ref_service_types.service_type_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the code of the type of service that is performed the most often ?",
            "sql": "select ref_service_types.service_type_code group_by ref_service_types.service_type_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is its parent service type code ?",
            "sql": "select ref_service_types.parent_service_type_code group_by ref_service_types.service_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the actual delivery dates of orders with quantity 1?",
        "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"
    },
    "interaction": [
        {
            "utterance": "What are the delivery dates of orders with 1 quantity ? | do you mean the actual delivery dates ? | Yes",
            "sql": "select customer_orders.actual_delivery_date where order_items.order_quantity = value"
        },
        {
            "utterance": "What are the product id of orders with quantity 1 ?",
            "sql": "select order_items.product_id where order_items.order_quantity = value"
        },
        {
            "utterance": "Ok , , what are the cuatomers id that have order of quantity 1 ?",
            "sql": "select customer_orders.customer_id where order_items.order_quantity = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 0,
    "final": {
        "utterance": "List the branch name and city without any registered members.",
        "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
    },
    "interaction": [
        {
            "utterance": "list the branch for registered members ? | did you mean the ids of branches with registered members ? | yes",
            "sql": "select membership_register_branch.branch_id"
        },
        {
            "utterance": "Find the membership amount of the popert ? | did you mean the membership amount of the branch with the name `` Popert '' ? | yes",
            "sql": "select branch.membership_amount where branch.name = value"
        },
        {
            "utterance": "List the name with registered members ? | There are the names of branches with registered members . | which city of Alexandra ?",
            "sql": "select branch.city where branch.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all branch names with the number of members in each branch registered after 2015.",
        "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"
    },
    "interaction": [
        {
            "utterance": "Show me all branch names with the number of members in each branch registered after 2015",
            "sql": "select branch.name , count ( * ) where membership_register_branch.register_year > value group_by branch.branch_id"
        },
        {
            "utterance": "When were those branches opened ?",
            "sql": "select branch.name , branch.open_year where membership_register_branch.register_year > value group_by branch.branch_id"
        },
        {
            "utterance": "How many branches have the number of members in each branch registered after 2015 ? | Did you mean the number of branches which have some members registered after 2015 ? | Thanks !",
            "sql": "select count ( * ) ( select branch.name where membership_register_branch.register_year > value group_by branch.branch_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the city and the number of branches opened before 2010 for each city.",
        "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "Show me the cities | Do you mean you want the cities where there are branches there ? | yes",
            "sql": "select distinct branch.city"
        },
        {
            "utterance": "show me the number of branches of cities",
            "sql": "select branch.city , count ( branch.* ) group_by branch.city"
        },
        {
            "utterance": "Count the branches opened before 2010 ?",
            "sql": "select count ( branch.* ) where branch.open_year < value"
        },
        {
            "utterance": "Count branches opened before 2010 for each city",
            "sql": "select branch.city , count ( branch.* ) where branch.open_year < value group_by branch.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the branches ?",
            "sql": "select branch.name"
        },
        {
            "utterance": "Given the branches are Alexandre , Popert , Stanley , Zytogorski , Cochrane , Taverner , Saint Amant , and Brooke Greville , which have members in Louisville , Kentucky ?",
            "sql": "select branch.name where member.hometown = value"
        },
        {
            "utterance": "Given the branches are Alexandre and Zytogorski , which have members in Hiram , Georgia ?",
            "sql": "select branch.name where member.hometown = value intersect select branch.name where member.hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the branch with the greatest amount of memberships that were registered in the year 2016 ?",
            "sql": "select branch.name where membership_register_branch.register_year = value group_by branch.branch_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the year that branch opened ?",
            "sql": "select branch.open_year where membership_register_branch.register_year = value group_by branch.branch_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you list the name and membership amount of the branch that had the least amount of memberships that were opened in the year 2017 ?",
            "sql": "select branch.name , branch.membership_amount where branch.membership_amount = ( select min ( branch.membership_amount ) where branch.open_year like value )"
        },
        {
            "utterance": "Can you list the name and opening year of the branch that opened the earliest ?",
            "sql": "select branch.name , branch.open_year where branch.open_year = ( select min ( branch.open_year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "How many names in this table ?",
            "sql": "select count ( branch.name )"
        },
        {
            "utterance": "Find the total amount of membership ?",
            "sql": "select sum ( branch.membership_amount )"
        },
        {
            "utterance": "Find highest membership amount ?",
            "sql": "select branch.membership_amount order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "Find the lowest membership amount ?",
            "sql": "select min ( branch.membership_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 6,
    "final": {
        "utterance": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'"
    },
    "interaction": [
        {
            "utterance": "show the minimum amount of memberships for all branches opened in 2011 or located at city location",
            "sql": "select min ( branch.membership_amount ) where branch.open_year = value or branch.city = value"
        },
        {
            "utterance": "show the maximum amount of memberships for all branches opened in 2011 or located at city location",
            "sql": "select max ( branch.membership_amount ) where branch.open_year = value or branch.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the membership level with most number of members.",
        "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Could you please show the membership level with the greatest number of members ?",
            "sql": "select member.level group_by member.level order_by count ( member.* ) desc limit_value"
        },
        {
            "utterance": "What are the member ids of the people who have that membership level ?",
            "sql": "select member.member_id where member.level in ( select member.level group_by member.level order_by count ( member.* ) desc limit_value )"
        },
        {
            "utterance": "What are their names , please ?",
            "sql": "select member.name where member.level in ( select member.level group_by member.level order_by count ( member.* ) desc limit_value )"
        },
        {
            "utterance": "What about the membership level with the least number of members ?",
            "sql": "select member.level group_by member.level order_by count ( member.* ) asc limit_value"
        },
        {
            "utterance": "What are the member ids of the people who have that membership level ?",
            "sql": "select member.member_id where member.level in ( select member.level group_by member.level order_by count ( member.* ) asc limit_value )"
        },
        {
            "utterance": "What is their name , please ?",
            "sql": "select member.name where member.level in ( select member.level group_by member.level order_by count ( member.* ) asc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the member name and hometown who registered a branch in 2016.",
        "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"
    },
    "interaction": [
        {
            "utterance": "What are the register year of Jeremy Jarmon ?",
            "sql": "select membership_register_branch.register_year where member.name = value"
        },
        {
            "utterance": "What is Corey Peters Card_Number ?",
            "sql": "select member.card_number where member.name = value"
        },
        {
            "utterance": "What is Myron Pryor Hometown ?",
            "sql": "select member.hometown where member.name = value"
        },
        {
            "utterance": "Show the member name and hometown who registered a branch in 2016 .",
            "sql": "select member.name , member.hometown where membership_register_branch.register_year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the total number of purchases for members with level 6?",
        "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
    },
    "interaction": [
        {
            "utterance": "What is the total number of purchases for members with level 6 ?",
            "sql": "select count ( * ) where member.level = value"
        },
        {
            "utterance": "Which 2 members have the highest number of purchases ?",
            "sql": "select member.name group_by purchase.member_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the hometown of Myron Pryor ?",
            "sql": "select member.hometown where member.name = value"
        },
        {
            "utterance": "What is the branch ID associated with Myron Pryor ?",
            "sql": "select purchase.branch_id where member.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 10,
    "final": {
        "utterance": "Show member names without any registered branch.",
        "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"
    },
    "interaction": [
        {
            "utterance": "Show member names with a registered branch ?",
            "sql": "select member.name where member.member_id in ( select membership_register_branch.member_id )"
        },
        {
            "utterance": "Show member names without any registered branch ?",
            "sql": "select member.name where member.member_id not in ( select membership_register_branch.member_id )"
        },
        {
            "utterance": "What is the total number of branches ?",
            "sql": "select count ( distinct membership_register_branch.branch_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "How many cities have a branch with 100 membership ?",
            "sql": "select count ( distinct branch.city ) where branch.membership_amount > value"
        },
        {
            "utterance": "show all the branches opened in 2000 ?",
            "sql": "select branch.branch_id where branch.open_year = value"
        },
        {
            "utterance": "Which year was Stanley open ?",
            "sql": "select branch.open_year where branch.name = value"
        },
        {
            "utterance": "What is the address road of Stanley ?",
            "sql": "select branch.address_road where branch.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 12,
    "final": {
        "utterance": "List all open years when at least two shops are opened.",
        "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Name the branch with least membership amount . ?",
            "sql": "select branch.name order_by branch.membership_amount asc limit_value"
        },
        {
            "utterance": "state the open year of branch id 3 ?",
            "sql": "select branch.open_year where branch.branch_id = value"
        },
        {
            "utterance": "List all open years when at least two shops are opened ?",
            "sql": "select branch.open_year group_by branch.open_year having count ( branch.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 13,
    "final": {
        "utterance": "What are names for top three branches with most number of membership?",
        "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names for the top three membership branches",
            "sql": "select branch.name order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "How many memberships do these branches have ?",
            "sql": "select branch.membership_amount order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "What years did the branches open ?",
            "sql": "select branch.open_year order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "What are the addresses for these three branches ?",
            "sql": "select branch.address_road order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "Which address has the most memberships ?",
            "sql": "select branch.address_road order_by branch.membership_amount desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the city and the number of branches opened before 2010 for each city.",
        "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "Show the city and the number of branches opened before 2010 for each city",
            "sql": "select branch.city , count ( branch.* ) where branch.open_year < value group_by branch.city"
        },
        {
            "utterance": "Which year were those branches opened ?",
            "sql": "select branch.open_year where branch.open_year < value"
        },
        {
            "utterance": "Cities that were opened before 2010 | Ah , I can not understand . Do you mean cities that have branches opened before 2010 ? | Give me names of branches opened before 2010",
            "sql": "select branch.name where branch.open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all cities without a branch having more than 100 memberships.",
        "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "Which cities have a branch ?",
            "sql": "select distinct branch.city"
        },
        {
            "utterance": "How many branches does London have ?",
            "sql": "select count ( branch.branch_id ) where branch.city = value"
        },
        {
            "utterance": "How many branches does Oxford have ?",
            "sql": "select count ( branch.branch_id ) where branch.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 16,
    "final": {
        "utterance": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
    },
    "interaction": [
        {
            "utterance": "Who are the members whose hometown address includes Kentucky | Did you want the names of the members whose hometown address includes the word Kentucky ? | Yes please give their names .",
            "sql": "select member.name where member.hometown like value"
        },
        {
            "utterance": "Kindly list the card numbers of all the members .",
            "sql": "select member.card_number"
        },
        {
            "utterance": "How many members are they in total ?",
            "sql": "select count ( member.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018"
    },
    "interaction": [
        {
            "utterance": "What is the total pounds of purchases in the year 2018 for all branches in London ?",
            "sql": "select sum ( purchase.total_pounds ) where branch.city = value and purchase.year = value"
        },
        {
            "utterance": "How many branches are there in London ?",
            "sql": "select count ( branch.* ) where branch.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the total number of purchases for members with level 6?",
        "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
    },
    "interaction": [
        {
            "utterance": "how many purchases did each member make ?",
            "sql": "select purchase.member_id , count ( * ) group_by purchase.member_id"
        },
        {
            "utterance": "how many purchases did members with level 5 make ?",
            "sql": "select count ( * ) where member.level = value"
        },
        {
            "utterance": "now how many purchases did members with level 6 make ?",
            "sql": "select count ( * ) where member.level = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 19,
    "final": {
        "utterance": "What are names for top three branches with most number of membership?",
        "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names for the top three branches with most number of membership ?",
            "sql": "select branch.name order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "What year did they open ?",
            "sql": "select branch.name , branch.open_year order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "What are their cities ?",
            "sql": "select branch.name , branch.city order_by branch.membership_amount desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
    },
    "interaction": [
        {
            "utterance": "What are the investor name of Leonardo Binchi ?",
            "sql": "select entrepreneur.investor where people.name = value"
        },
        {
            "utterance": "What is the total amount of money requested for three persons ? | Sorry , which three persons do you want ? | The three persons are Francesco Postiglione , Leonardo Binchi and Fabrizio Buonocore",
            "sql": "select sum ( entrepreneur.money_requested ) where people.name = value or people.name = value or people.name = value"
        },
        {
            "utterance": "What is the company name of Fabrizio Buonocore ?",
            "sql": "select entrepreneur.company where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the date of birth of the investors Simon Woodroffe and Peter Jones ?",
            "sql": "select people.date_of_birth where entrepreneur.investor = value or entrepreneur.investor = value"
        },
        {
            "utterance": "That was really quick , thank you . Then can you please tell me how much money they requested , respectively ?",
            "sql": "select entrepreneur.money_requested where entrepreneur.investor = value or entrepreneur.investor = value"
        },
        {
            "utterance": "haha I am sorry , Thanks again for your answer ! : ) Then could you please let me know which entrepreneur requested for the biggest amount of money ?",
            "sql": "select entrepreneur.entrepreneur_id order_by entrepreneur.money_requested desc limit_value"
        },
        {
            "utterance": "Glad that I did n't trouble you again : ) Thank you , then could you please let me know the investor 's name and company for the ID ?",
            "sql": "select entrepreneur.entrepreneur_id , entrepreneur.investor , entrepreneur.company order_by entrepreneur.money_requested desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name of the entrepreneur with the greatest weight?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many weight of Francesco Postiglione ?",
            "sql": "select people.weight where people.name = value"
        },
        {
            "utterance": "How much money requested of people id 2 ?",
            "sql": "select entrepreneur.money_requested where entrepreneur.people_id = value"
        },
        {
            "utterance": "Date of birth of Fabrizio Buonocore ?",
            "sql": "select people.date_of_birth where people.name = value"
        },
        {
            "utterance": "What is the name of the entrepreneur with the greatest weight ?",
            "sql": "select people.name order_by people.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the company of the tallest entrepreneur.",
        "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the company details",
            "sql": "select entrepreneur.company"
        },
        {
            "utterance": "Show me the details of all entrepreneurs",
            "sql": "select entrepreneur.*"
        },
        {
            "utterance": "Show me the company of the tallest entrepreneur",
            "sql": "select entrepreneur.company order_by people.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the entrepreneur with the greatest weight?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the largest weight that appears in the people table ?",
            "sql": "select people.weight order_by people.weight desc limit_value"
        },
        {
            "utterance": "Can you add the people id associated with that weight into the table ?",
            "sql": "select people.people_id , people.weight order_by people.weight desc limit_value"
        },
        {
            "utterance": "Can you also add the name associated with that people id into the table ?",
            "sql": "select people.people_id , people.name , people.weight order_by people.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all investor names ?",
            "sql": "select distinct entrepreneur.investor"
        },
        {
            "utterance": "Can you filter this list to include only the investors that were associated with more than one entrepreneur id ?",
            "sql": "select entrepreneur.investor group_by entrepreneur.investor having count ( entrepreneur.* ) > value"
        },
        {
            "utterance": "Can you filter this list to show only the rows associated with money requested that are not between 120000 and 140000 ?",
            "sql": "select entrepreneur.investor where entrepreneur.investor in ( select entrepreneur.investor where entrepreneur.money_requested > value intersect select entrepreneur.investor where entrepreneur.money_requested < value ) group_by entrepreneur.investor having count ( entrepreneur.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 6,
    "final": {
        "utterance": "List the names of people that are not entrepreneurs.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
    },
    "interaction": [
        {
            "utterance": "Hi ! Can you show me a list of all people and their people IDs ?",
            "sql": "select people.name , people.people_id"
        },
        {
            "utterance": "Nice ! Can you filter the list to show only the people who do not have an associated entrepreneur ID ?",
            "sql": "select people.name , people.people_id where people.people_id not in ( select entrepreneur.people_id )"
        },
        {
            "utterance": "Wonderful ! Can you tell me what is the total amount of money requested by the people who ARE entrepreneurs ?",
            "sql": "select sum ( entrepreneur.money_requested )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the weights of entrepreneurs in descending order of money requested?",
        "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
    },
    "interaction": [
        {
            "utterance": "Who are the entrepreneurs requesting money | What attributes would you like to know about the entrepreneurs raising money ? | What are the entrepreneur 's weights",
            "sql": "select people.weight"
        },
        {
            "utterance": "What are the entrepreneurs names associated with those weights ? Thanks .",
            "sql": "select people.name , people.weight"
        },
        {
            "utterance": "What company is each entrepreneur associated with ?",
            "sql": "select entrepreneur.company"
        },
        {
            "utterance": "Which entrepreneur has the highest weight ? Thanks ! | What attribute would you like to know about the entrepreneur with the highest weight ? | I would like to know the name of the entrepreneur with the highest weight .",
            "sql": "select people.name order_by people.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 0,
    "final": {
        "utterance": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007"
    },
    "interaction": [
        {
            "utterance": "State the location of flower awards held ?",
            "sql": "select festival_detail.location where festival_detail.festival_name = value"
        },
        {
            "utterance": "Which festival has the least number of audience ?",
            "sql": "select festival_detail.festival_name order_by festival_detail.num_of_audience limit_value"
        },
        {
            "utterance": "What is the name of artwork id 2 ?",
            "sql": "select artwork.name where artwork.artwork_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the number of audience in year 2008 or 2010.",
        "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Which year had the most festivals ?",
            "sql": "select festival_detail.year group_by festival_detail.year order_by count ( festival_detail.* ) desc limit_value"
        },
        {
            "utterance": "How many festivals were there in 2008 ?",
            "sql": "select count ( festival_detail.* ) group_by festival_detail.year having festival_detail.year = value"
        },
        {
            "utterance": "What was the number of the audience for it ?",
            "sql": "select festival_detail.num_of_audience where festival_detail.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\""
    },
    "interaction": [
        {
            "utterance": "Which festival name was nimonated for artwork ? | you want all of festival name was nimonated for artwork ? | Yes",
            "sql": "select distinct festival_detail.festival_name"
        },
        {
            "utterance": "Which festival name was associated with program talent show ?",
            "sql": "select festival_detail.festival_name where artwork.type = value"
        },
        {
            "utterance": "What was the location of LA awards ?",
            "sql": "select festival_detail.location where festival_detail.festival_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 3,
    "final": {
        "utterance": "List the most common type of artworks.",
        "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the different type of artworks ?",
            "sql": "select distinct artwork.type"
        },
        {
            "utterance": "Show the most common type of artworks ?",
            "sql": "select artwork.type group_by artwork.type order_by count ( artwork.* ) desc limit_value"
        },
        {
            "utterance": "Show the type of artwork Loving you ?",
            "sql": "select artwork.type where artwork.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 4,
    "final": {
        "utterance": "List the year in which there are more than one festivals.",
        "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which year had more than one festival please ?",
            "sql": "select festival_detail.year group_by festival_detail.year having count ( festival_detail.* ) > value"
        },
        {
            "utterance": "What are the names of the festivals that occurred that year ?",
            "sql": "select festival_detail.festival_name where festival_detail.year = value"
        },
        {
            "utterance": "What other years did the Cherry Awards occur during ?",
            "sql": "select festival_detail.year where festival_detail.festival_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 5,
    "final": {
        "utterance": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "sql": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many total nominees there are ?",
            "sql": "select count ( nomination.artwork_id )"
        },
        {
            "utterance": "Excellent ! For each nomination can you show me the name of the artwork associated with it , and the name of the festival where it was nominated ?",
            "sql": "select artwork.name , festival_detail.festival_name"
        },
        {
            "utterance": "Thanks ! Can you update this list to show all of the associated years for each of these festivals ?",
            "sql": "select artwork.name , festival_detail.festival_name , festival_detail.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the number of audience in year 2008 or 2010.",
        "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Show the number of audience in year 2008 or 2010 .",
            "sql": "select festival_detail.num_of_audience where festival_detail.year = value or festival_detail.year = value"
        },
        {
            "utterance": "How about the chair name for those years ?",
            "sql": "select festival_detail.chair_name where festival_detail.year = value or festival_detail.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of the festivals that had two or more nominations for artwork ?",
            "sql": "select festival_detail.festival_name group_by nomination.festival_id having count ( * ) > = value"
        },
        {
            "utterance": "Can you list their IDs in the table too ?",
            "sql": "select festival_detail.festival_id , festival_detail.festival_name group_by nomination.festival_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the names of all the artworks that won ?",
            "sql": "select artwork.name where nomination.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of the three most recent festivals.",
        "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Where were these festivals held ?",
            "sql": "select festival_detail.festival_name , festival_detail.location order_by festival_detail.year desc limit_value"
        },
        {
            "utterance": "Who was the chair of the LA Awards ?",
            "sql": "select festival_detail.chair_name where festival_detail.festival_name = value"
        },
        {
            "utterance": "How many people attended the LA Awards in 2010 ?",
            "sql": "select festival_detail.num_of_audience where festival_detail.festival_name = value and festival_detail.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name and city of the airport which is the source for the most number of flight routes.",
        "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of airport which is the source for the most number of flight routes ?",
            "sql": "select airports.name group_by routes.src_apid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are the names of city of airport which is the source for the most number of flight routes | Do you mean the name of city which is the source for the most number of flight routes ? | Yes",
            "sql": "select airports.city group_by routes.src_apid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of routes with destination airports in Italy.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
    },
    "interaction": [
        {
            "utterance": "Name the airport in Madang city ?",
            "sql": "select airports.name where airports.city = value"
        },
        {
            "utterance": "How many airports are in Papua New Guinea country ?",
            "sql": "select count ( airports.* ) where airports.country = value"
        },
        {
            "utterance": "Find the number of routes with destination airports in Italy ?",
            "sql": "select count ( * ) where airports.country = value"
        },
        {
            "utterance": "What is the elevation of Mount Hagen Kagamuga Airport ?",
            "sql": "select airports.elevation where airports.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 2,
    "final": {
        "utterance": "Which countries has the most number of airlines whose active status is 'Y'?",
        "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which countries have the most number of airlines whose active status is Y ?",
            "sql": "select airlines.country where airlines.active = value group_by airlines.country order_by count ( airlines.* ) desc limit_value"
        },
        {
            "utterance": "What are the names of those airlines ? | Here are the names of airlines who are active . | What is the airline id of Aloha Airlines ?",
            "sql": "select airlines.alid where airlines.name = value"
        },
        {
            "utterance": "What about the icao ? | the icao of Aloha Airlines is AAH | What 's the call sign of airline id 5 ?",
            "sql": "select airlines.callsign where airlines.alid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the cities which have exactly two airports.",
        "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
    },
    "interaction": [
        {
            "utterance": "Find the cities which have exactly two airports",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) = value"
        },
        {
            "utterance": "What location airports is near by me has two airports ? | What do you mean by near by you ? Sorry , We can not answer this . | what is the name of airport in the country Papua New Guinea",
            "sql": "select airports.name where airports.country = value"
        },
        {
            "utterance": "what is the elevation of Madang Airport ?",
            "sql": "select airports.elevation where airports.name = value"
        },
        {
            "utterance": "What is the elevation of Goroka Airport",
            "sql": "select airports.elevation where airports.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of routes operated by American Airlines.",
        "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "Find the routes operated by all airlines ? | Do you mean return all the routes ? | yes .",
            "sql": "select routes.*"
        },
        {
            "utterance": "Which of these is operated by American Airlines ?",
            "sql": "select * where airlines.name = value"
        },
        {
            "utterance": "How many are they ?",
            "sql": "select count ( * ) where airlines.name = value"
        },
        {
            "utterance": "What of those not operated by American Airlines ?",
            "sql": "select * where airlines.name != value"
        },
        {
            "utterance": "How many routes are not operated by American Airlines ?",
            "sql": "select count ( * ) where airlines.name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of airline which runs the most number of routes.",
        "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many airlines are there ?",
            "sql": "select count ( airlines.* )"
        },
        {
            "utterance": "What 's the least number of routes that an airline runs ?",
            "sql": "select count ( * ) group_by airlines.name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "how about the most number of routes that an airline runs ?",
            "sql": "select count ( * ) group_by airlines.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of that airline ?",
            "sql": "select airlines.name group_by airlines.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What country does Ryanair belong to ?",
            "sql": "select airlines.country where airlines.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 6,
    "final": {
        "utterance": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "What is the name of the airport in Mount Hagen city ?",
            "sql": "select airports.name where airports.city = value"
        },
        {
            "utterance": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines '' ?",
            "sql": "select count ( * ) where airports.country = value and airlines.name = value"
        },
        {
            "utterance": "How many active airlines are on the list ?",
            "sql": "select count ( airlines.* ) where airlines.active = value"
        },
        {
            "utterance": "What is the elevation of Madang Airport airport ?",
            "sql": "select airports.elevation where airports.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 7,
    "final": {
        "utterance": "List the cities which have more than one airport and number of airports.",
        "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the name of airport in the city Goroka ?",
            "sql": "select airports.name where airports.city = value"
        },
        {
            "utterance": "Which airport situate in the elevation 5282 ?",
            "sql": "select airports.name where airports.elevation = value"
        },
        {
            "utterance": "What is the iata of Madang airport ?",
            "sql": "select airports.iata where airports.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the busiest source airport that runs most number of routes in China.",
        "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the busiest airport in china ? | busiest source airport or destination airport ? | busiest source airport",
            "sql": "select airports.name where airports.country = value group_by airports.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the source airport id ?",
            "sql": "select airports.apid where airports.country = value group_by airports.name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the airline for source airport ?",
            "sql": "select distinct routes.airline where routes.src_apid = ( select airports.apid where airports.country = value group_by airports.name order_by count ( routes.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the id of routes whose source and destination airports are in the United States.",
        "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
    },
    "interaction": [
        {
            "utterance": "whose source and destination airports are in the United States | Do you want the id of the routes whose source and destination airports are in the United States ? | Yes",
            "sql": "select routes.rid where routes.dst_apid in ( select airports.apid where airports.country = value ) and routes.src_apid in ( select airports.apid where airports.country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the busiest destination airport that runs most number of routes in China.",
        "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the destination of the airport least number of routes in china ?",
            "sql": "select airports.name where airports.country = value group_by airports.name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "how many airports in the list ?",
            "sql": "select distinct ( count ( airports.name ) )"
        },
        {
            "utterance": "find the country in the list ? | What do you mean ? | how many country in the list ?",
            "sql": "select count ( distinct airports.country )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 11,
    "final": {
        "utterance": "How many cities are there that have more than 3 airports?",
        "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)"
    },
    "interaction": [
        {
            "utterance": "how many airports are presented on the table",
            "sql": "select count ( airports.* )"
        },
        {
            "utterance": "list out the airports names",
            "sql": "select airports.name"
        },
        {
            "utterance": "how many cities are the aiports | Did you mean the number of cities that have any airport ? | exactly",
            "sql": "select count ( distinct airports.city )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 12,
    "final": {
        "utterance": "Which countries has the most number of airlines whose active status is 'Y'?",
        "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you first give me a list of all of the countries ?",
            "sql": "select airlines.country"
        },
        {
            "utterance": "Great ! Which of these countries has the most airlines with an Active status of `` Y '' ?",
            "sql": "select airlines.country where airlines.active = value group_by airlines.country order_by count ( airlines.* ) desc limit_value"
        },
        {
            "utterance": "Can you tell me what is the total number of airlines in the United States that have an active status of `` Y '' ?",
            "sql": "select count ( airlines.* ) where airlines.active = value and airlines.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name, city, and country of the airport that has the lowest altitude.",
        "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the airport with the lowest altitude ?",
            "sql": "select airports.name order_by airports.elevation limit_value"
        },
        {
            "utterance": "And in which city is it located ?",
            "sql": "select airports.city order_by airports.elevation limit_value"
        },
        {
            "utterance": "And in what country is that ?",
            "sql": "select airports.country order_by airports.elevation limit_value"
        },
        {
            "utterance": "Yes , what is the exact altitude of the Bar Yehuda Airfield ?",
            "sql": "select airports.elevation where airports.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 14,
    "final": {
        "utterance": "Return the cities with more than 3 airports in the United States.",
        "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "What cities have more than 3 airports in the United States ?",
            "sql": "select airports.city where airports.country = value group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "What cities in the United States have more than 4 airports ?",
            "sql": "select airports.city where airports.country = value group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select airports.name where airports.country = value group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "Show the names of all airports with elevation over 4000 .",
            "sql": "select airports.name where airports.elevation > value"
        },
        {
            "utterance": "Show the names of all airports with elevation over 5000 .",
            "sql": "select airports.name where airports.elevation > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the number of routes from the United States to Canada.",
        "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
    },
    "interaction": [
        {
            "utterance": "what is the elevation of goroka airport",
            "sql": "select airports.elevation where airports.name = value"
        },
        {
            "utterance": "find the number of routes from the United States to Canada",
            "sql": "select count ( routes.* ) where routes.dst_apid in ( select airports.apid where airports.country = value ) and routes.src_apid in ( select airports.apid where airports.country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the number of routes that have destination John F Kennedy International Airport.",
        "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"
    },
    "interaction": [
        {
            "utterance": "Show me the destination details of John F Kennedy International Airport",
            "sql": "select routes.dst_apid , routes.dst_ap where airports.name = value"
        },
        {
            "utterance": "Show me the routes details | do you mean the routes details of John F Kennedy International Airport ? | Yes",
            "sql": "select * where airports.name = value"
        },
        {
            "utterance": "Show me the number of routes that have destination John F Kennedy International Airport",
            "sql": "select count ( * ) where airports.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the busiest source airport that runs most number of routes in China.",
        "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE AIRPORT NAME OF GORKA CITY IN AIRPORT TABLE ?",
            "sql": "select airports.name where airports.city = value"
        },
        {
            "utterance": "MADANG CITY SITUATED IN WHICH COUNTRY ? IN AIRPORT TABLE",
            "sql": "select airports.country where airports.city = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select distinct routes.rid where routes.alid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the number of routes for each source airport and the airport name.",
        "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "What are all the source airports ?",
            "sql": "select routes.src_apid , routes.src_ap , airports.name group_by airports.name"
        },
        {
            "utterance": "What are all of the routes for each source airport ? | do you mean the number of all of the routes ? | Yes please .",
            "sql": "select count ( * ) group_by airports.name"
        },
        {
            "utterance": "What are the names of the airports associated with each number of routes ?",
            "sql": "select airports.name , count ( * ) group_by airports.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 19,
    "final": {
        "utterance": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the number of routes with the destination airport Italy ?",
            "sql": "select count ( * ) where airports.country = value"
        },
        {
            "utterance": "Can you please tell me the number of routes with the destination airport in Italy operated by the airline with the name 'American Airlines ' ?",
            "sql": "select count ( * ) where airports.country = value and airlines.name = value"
        },
        {
            "utterance": "What are the source airports of those routes ?",
            "sql": "select routes.src_ap where airports.country = value and airlines.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the country of the airlines whose name starts with 'Orbit'.",
        "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'"
    },
    "interaction": [
        {
            "utterance": "How many airlines are there ?",
            "sql": "select count ( airlines.* )"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select airlines.* where airlines.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 21,
    "final": {
        "utterance": "List the cities which have more than one airport and number of airports.",
        "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which cities have more than one airport ?",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "Now show the number of airports in each of those cities",
            "sql": "select airports.city , count ( airports.* ) group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "Which cities have three airports",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) = value"
        },
        {
            "utterance": "Which cities have 4 or more airports",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > = value"
        },
        {
            "utterance": "Show the number of airports in those cities",
            "sql": "select airports.city , count ( airports.* ) group_by airports.city having count ( airports.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the number of routes whose destination airports are in Canada.",
        "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"
    },
    "interaction": [
        {
            "utterance": "How many routes have a destination airport in Canada , please ?",
            "sql": "select count ( * ) where airports.country = value"
        },
        {
            "utterance": "How many routes have a destination airport in the United States , please ?",
            "sql": "select count ( * ) where airports.country = value"
        },
        {
            "utterance": "How many routes have a source airport in Canada and a destination airport in the United States , please ?",
            "sql": "select count ( * ) ( select routes.rid where airports.country = value intersect select routes.rid where airports.country = value )"
        },
        {
            "utterance": "What are the names of those source airports that begin with the letter A ?",
            "sql": "select airports.name where airports.name like value"
        },
        {
            "utterance": "What are the ones that are in Canada only ?",
            "sql": "select distinct ( airports.name ) where airports.name like value and airports.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the number of airports whose name contain the word 'International'.",
        "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'"
    },
    "interaction": [
        {
            "utterance": "Can you list the number of airports whose names contain the word `` International '' ?",
            "sql": "select count ( airports.* ) where airports.name like value"
        },
        {
            "utterance": "What is the most common country of all of those airports ?",
            "sql": "select airports.country group_by airports.country order_by count ( airports.* ) desc limit_value"
        },
        {
            "utterance": "What is the greatest elevation of all of those airports ?",
            "sql": "select max ( airports.elevation )"
        },
        {
            "utterance": "What is the minimum elevation ?",
            "sql": "select min ( airports.elevation )"
        },
        {
            "utterance": "What country is the airport with the lowest elevation located in ?",
            "sql": "select airports.country where airports.elevation = ( select min ( airports.elevation ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the number of different airports which are the destinations of the American Airlines.",
        "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "Show the route id of the destination airport id 2990 ?",
            "sql": "select routes.rid where routes.dst_apid = value"
        },
        {
            "utterance": "Show the number of different airports which are the destinations of the American Airlines ?",
            "sql": "select count ( distinct routes.dst_apid ) where airlines.name = value"
        },
        {
            "utterance": "Show the destination airport of route id 39 ?",
            "sql": "select routes.dst_apid where routes.rid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name and city of the airport which is the destination of the most number of routes.",
        "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many on the airport table",
            "sql": "select count ( airports.* )"
        },
        {
            "utterance": "what is the country of goroka",
            "sql": "select airports.country where airports.city = value"
        },
        {
            "utterance": "find the name and city of the airport which is the destination of the most number of route .",
            "sql": "select airports.name , airports.city group_by routes.dst_apid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the names of the top 10 airlines that operate the most number of routes.",
        "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"
    },
    "interaction": [
        {
            "utterance": "How many airlines do you have ?",
            "sql": "select count ( airlines.* )"
        },
        {
            "utterance": "How many routes does each airline have ?",
            "sql": "select airlines.name , count ( * ) group_by routes.alid"
        },
        {
            "utterance": "What are the names of the top 10 airlines with the most number of routes ?",
            "sql": "select airlines.name group_by routes.alid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the number of routes with destination airports in Italy.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
    },
    "interaction": [
        {
            "utterance": "hi . How many routes are there ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "how many have destination airports in Italy ?",
            "sql": "select count ( * ) where airports.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 28,
    "final": {
        "utterance": "For each country and airline name, how many routes are there?",
        "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the airlines ?",
            "sql": "select airlines.name"
        },
        {
            "utterance": "How many routes are there in the United States ?",
            "sql": "select count ( * ) where airlines.country = value"
        },
        {
            "utterance": "Can you give me a number of routes per country and airline name ?",
            "sql": "select airlines.country , airlines.name , count ( * ) group_by airlines.country , airlines.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 29,
    "final": {
        "utterance": "List the cities which have more than 2 airports sorted by the number of airports.",
        "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "Can you show me the total number of airports ?",
            "sql": "select count ( airports.apid )"
        },
        {
            "utterance": "How about the total number of cities ?",
            "sql": "select count ( distinct airports.city )"
        },
        {
            "utterance": "Can you sort them by the number of airports ?",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > value order_by count ( airports.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 30,
    "final": {
        "utterance": "Which country is the airport that has the highest altitude located in?",
        "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which country has the airport with the highest altitude ?",
            "sql": "select airports.country order_by airports.elevation desc limit_value"
        },
        {
            "utterance": "in what city is it located ?",
            "sql": "select airports.city order_by airports.elevation desc limit_value"
        },
        {
            "utterance": "what is its elevation ?",
            "sql": "select airports.elevation order_by airports.elevation desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you list all of the hometowns listed in this database ?",
            "sql": "select distinct people.hometown"
        },
        {
            "utterance": "Thank you for that information ! Can you filter that list to show just the hometowns for gymnasts whose total points are more than 57.5 ?",
            "sql": "select distinct people.hometown where gymnast.total_points > value"
        },
        {
            "utterance": "Thank you ! Can you show all of the names of the gymnasts for those hometowns ?",
            "sql": "select people.name where people.hometown = value or people.hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the hometowns shared by people older than 23 and younger than 20.",
        "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the hometowns ?",
            "sql": "select people.hometown"
        },
        {
            "utterance": "Thank you ! Can you filter this list ot show only the hometowns that have both people older than 23 years of age and people younger than 20 years of age ?",
            "sql": "select people.hometown where people.age > value intersect select people.hometown where people.age < value"
        },
        {
            "utterance": "Excellent ! Can you tell me how many people in total have Santo Domingo as their Hometown ?",
            "sql": "select count ( people.* ) where people.hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of gymnasts in ascending order by their heights.",
        "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
    },
    "interaction": [
        {
            "utterance": "Who is the tallest gymnast ?",
            "sql": "select people.name order_by people.height desc limit_value"
        },
        {
            "utterance": "How tall is Nadia Caba Rodr\u00edguez ?",
            "sql": "select people.height where people.name = value"
        },
        {
            "utterance": "Great , can you list the names of the gymnasts in ascending order by their heights ?",
            "sql": "select people.name order_by people.height"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the most common hometown of gymnasts?",
        "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please list all of the gymnast IDs and their associated hometowns ?",
            "sql": "select gymnast.gymnast_id , people.hometown"
        },
        {
            "utterance": "Awesome ! Which of these hometowns is the most common ?",
            "sql": "select people.hometown group_by people.hometown order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Awesome ! Can you show me a list of all people names that are associated with Santo Domingo ?",
            "sql": "select people.name where people.hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"
    },
    "interaction": [
        {
            "utterance": "what are the hometowns of gymnasts",
            "sql": "select people.hometown group_by people.hometown"
        },
        {
            "utterance": "the corresponding number of gymnasts ? | Can you clarity what do you mean by the corresponding number ? | how many gymnasts are in table ?",
            "sql": "select count ( gymnast.* )"
        },
        {
            "utterance": "details about paul hamm | Can you be more specific for what details do you need for Paul Hamm ? | i want paul hamm 's age",
            "sql": "select people.age where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the age of the tallest person?",
        "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many people are there",
            "sql": "select count ( people.* )"
        },
        {
            "utterance": "how many are under age 21",
            "sql": "select count ( people.* ) where people.age < value"
        },
        {
            "utterance": "how many are from same hometown | Santo Domingo is the only hometown where more than 1 person is from . There are 5 people from the hometown San Domingo . | what is the name of people ID 2",
            "sql": "select people.name where people.people_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the ages of gymnasts in descending order of total points.",
        "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC"
    },
    "interaction": [
        {
            "utterance": "Show the ages of gymnasts in descending order of total points .",
            "sql": "select people.age order_by gymnast.total_points desc"
        },
        {
            "utterance": "Show their names .",
            "sql": "select people.name order_by gymnast.total_points desc"
        },
        {
            "utterance": "What is the height of Paul Hamm ?",
            "sql": "select people.height where people.name = value"
        },
        {
            "utterance": "What is his hometown ?",
            "sql": "select people.hometown where people.name = value"
        },
        {
            "utterance": "How many total points does he have ?",
            "sql": "select sum ( gymnast.total_points ) where people.name = value"
        },
        {
            "utterance": "How many rings points does he have ?",
            "sql": "select gymnast.rings_points where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the age of the tallest person?",
        "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the tallest height ?",
            "sql": "select max ( people.height )"
        },
        {
            "utterance": "What is that person 's name ?",
            "sql": "select people.name order_by people.height desc limit_value"
        },
        {
            "utterance": "How old is he ?",
            "sql": "select people.age order_by people.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all the buildings that have at least 10 professors.",
        "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "Show me all the buildings",
            "sql": "select faculty.building"
        },
        {
            "utterance": "Show me the details of all professors | do you mean all information about them ? | Yes",
            "sql": "select faculty.*"
        },
        {
            "utterance": "Show me all the buildings that have at least 10 professors",
            "sql": "select faculty.building where faculty.rank = value group_by faculty.building having count ( faculty.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the ids of the students who don't participate in any activity.",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in"
    },
    "interaction": [
        {
            "utterance": "how many students are there ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "how many do n't participate in activities ?",
            "sql": "select count ( student.* ) ( select student.stuid except select participates_in.stuid )"
        },
        {
            "utterance": "What are their Ids ?",
            "sql": "select student.stuid except select participates_in.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of first name , last name , and faculty ID of all faculty ?",
            "sql": "select faculty.fname , faculty.lname , faculty.facid"
        },
        {
            "utterance": "Great ! Can you update this list to include the activity name associated with each individual faculty member ?",
            "sql": "select faculty.fname , faculty.lname , faculty.facid , activity.activity_name"
        },
        {
            "utterance": "Excellent ! Can you filter this list to remove all professors who are associated with either Canoeing or Kayaking ?",
            "sql": "select faculty.fname , faculty.lname , faculty.facid , activity.activity_name where activity.activity_name != value or activity.activity_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many Professors are in building NEB?",
        "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value"
        },
        {
            "utterance": "How many different buildings do you have ?",
            "sql": "select count ( distinct faculty.building )"
        },
        {
            "utterance": "Can you tell me the number of Professors in the building NEB ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value and faculty.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "what is the activity id of faculty id of 1082",
            "sql": "select faculty_participates_in.actid where faculty_participates_in.facid = value"
        },
        {
            "utterance": "what is the rank of mark",
            "sql": "select faculty.rank where faculty.fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the number of male and female assistant professors.",
        "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value"
        },
        {
            "utterance": "how many are assistant professors ? | Did you mean to ask for the number of assistant professors in total ? | Well , yes .",
            "sql": "select count ( faculty.* ) where faculty.rank = value"
        },
        {
            "utterance": "How many or women ? | Did you mean to ask for the number of female assistant professors ? | yes , how many are women ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value and faculty.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the ids for all the faculty members who have at least 2 students.",
        "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many student of there",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "how many male students of there",
            "sql": "select count ( student.* ) where student.sex = value"
        },
        {
            "utterance": "how many students from age of 18",
            "sql": "select count ( student.* ) where student.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Find the ids of the students who participate in Canoeing and Kayaking .",
            "sql": "select participates_in.stuid where activity.activity_name = value intersect select participates_in.stuid where activity.activity_name = value"
        },
        {
            "utterance": "What is activity name of activity id 770 ?",
            "sql": "select activity.activity_name where activity.actid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the ids of the faculty who don't participate in any activity.",
        "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in"
    },
    "interaction": [
        {
            "utterance": "Hello , what are the names of the faculty members who do n't participate in any activity ?",
            "sql": "select faculty.lname , faculty.fname except select faculty_participates_in.facid"
        },
        {
            "utterance": "Which faculty members participate in activities ?",
            "sql": "select faculty.lname , faculty.fname"
        },
        {
            "utterance": "What activities do Michael Goodrich and Gerald Masson participate in ?",
            "sql": "select faculty_participates_in.actid where faculty.lname = value and faculty.fname = value union select faculty_participates_in.actid where faculty.lname = value and faculty.fname = value"
        },
        {
            "utterance": "In total , how many faculty members are there ?",
            "sql": "select count ( faculty.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many Professors are in building NEB?",
        "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "How many professors do you have in buildings ? | Can you clarify your question ? | Total number of professors in NEB building ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value and faculty.building = value"
        },
        {
            "utterance": "What of instructors ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value and faculty.building = value"
        },
        {
            "utterance": "What of total number of faculty ?",
            "sql": "select count ( faculty.* ) where faculty.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all the faculty ranks and the number of students advised by each rank.",
        "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"
    },
    "interaction": [
        {
            "utterance": "Can you rank the faculty for me by ID | what ID did you want to order by ? | How many students were advised by professors ?",
            "sql": "select count ( * ) where faculty.rank = value"
        },
        {
            "utterance": "How many students were advised by instructors ?",
            "sql": "select count ( * ) where faculty.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Find the first names of the faculty members who participate in Caonoeing and Kayaking .",
            "sql": "select faculty.lname where activity.activity_name = value intersect select faculty.lname where activity.activity_name = value"
        },
        {
            "utterance": "What about faculty members who participate in Mountain Climbing ?",
            "sql": "select faculty.fname where activity.activity_name = value"
        },
        {
            "utterance": "What about Mountain Climbing and Kayaking ?",
            "sql": "select faculty.fname where activity.activity_name = value intersect select faculty.fname where activity.activity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of all the activities Mark Giuliano participates in.",
        "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all the activities Mark Giuliano participates in .",
            "sql": "select activity.activity_name where faculty.fname = value and faculty.lname = value"
        },
        {
            "utterance": "What rank does Mark Giuliano have ?",
            "sql": "select faculty.rank where faculty.lname = value and faculty.fname = value"
        },
        {
            "utterance": "Give me names of all faculty members in alphabetical order | Do you want to rank by first name or last name ? | first name",
            "sql": "select faculty.fname order_by faculty.fname asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the first and last name of the faculty participating in the most activities?",
        "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the first name of faculty partcipating in most activities ?",
            "sql": "select faculty.fname group_by faculty.facid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the last name of faculty partcipating in most activities ?",
            "sql": "select faculty.lname group_by faculty.facid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the rank of mark ?",
            "sql": "select faculty.rank where faculty.fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the number of male and female assistant professors.",
        "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "what is the name of faceid 1082",
            "sql": "select faculty.fname , faculty.lname where faculty.facid = value"
        },
        {
            "utterance": "What is the sex of professor | I am sorry . Which professor are you referring to ? | Rank profeesor",
            "sql": "select faculty.sex where faculty.rank = value"
        },
        {
            "utterance": "What is the phone of goodrich",
            "sql": "select faculty.phone where faculty.lname = value"
        },
        {
            "utterance": "what is the last name of mark",
            "sql": "select faculty.lname where faculty.fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the ids for all the faculty members who have at least 2 students.",
        "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show all faculty ids",
            "sql": "select faculty.facid"
        },
        {
            "utterance": "faculty Ids who have at least 2 students",
            "sql": "select faculty.facid group_by faculty.facid having count ( * ) > = value"
        },
        {
            "utterance": "now what are their major | Do you mean the major of the students whose faculty have at least 2 students ? | yes",
            "sql": "select student.major group_by faculty.facid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Which rank has the smallest number of faculty members?",
        "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average number of faculty members ? | Do you mean the average number of FacID ? | yes",
            "sql": "select avg ( faculty.facid )"
        },
        {
            "utterance": "Which rank has the highest number of faculty members ?",
            "sql": "select faculty.rank group_by faculty.rank order_by count ( faculty.* ) desc limit_value"
        },
        {
            "utterance": "How many ranks have professors",
            "sql": "select count ( faculty.* ) where faculty.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the name of the activity with the most students?",
        "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Thank you for taking the time to work with me ! Can you provide me with a list of all of the different activity names ?",
            "sql": "select activity.activity_name"
        },
        {
            "utterance": "Can you filter that list to show the activity with the most student participants ?",
            "sql": "select activity.activity_name group_by activity.actid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Great ! Can you tell me how many students in total participated in football ?",
            "sql": "select count ( distinct participates_in.stuid ) where activity.activity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the first name and last name of Linda Smith's advisor?",
        "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""
    },
    "interaction": [
        {
            "utterance": "I want to know the names of advisors available",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Could you tell me the names of advisors for female students ?",
            "sql": "select faculty.fname , faculty.lname where student.sex = value"
        },
        {
            "utterance": "What about the name of the advisor for the student named Linda Smith ?",
            "sql": "select faculty.fname , faculty.lname where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"
    },
    "interaction": [
        {
            "utterance": "what are the names and activities of all faculty members who participated in some activity ?",
            "sql": "select faculty.fname , faculty.lname , count ( * ) , faculty.facid group_by faculty.facid"
        },
        {
            "utterance": "what is the count for Naiman ?",
            "sql": "select count ( * ) group_by faculty.fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\""
    },
    "interaction": [
        {
            "utterance": "What is the phone of Jerry Prince ?",
            "sql": "select faculty.phone where faculty.fname = value and faculty.lname = value"
        },
        {
            "utterance": "What is his room number ?",
            "sql": "select faculty.room where faculty.fname = value and faculty.lname = value"
        },
        {
            "utterance": "And what is building name ?",
            "sql": "select faculty.building where faculty.fname = value and faculty.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"
    },
    "interaction": [
        {
            "utterance": "Show the faculty id of each faculty member , along with the number of students he or she advises .",
            "sql": "select faculty.facid , count ( * ) group_by faculty.facid"
        },
        {
            "utterance": "How may faculties in this survey ?",
            "sql": "select count ( faculty.* )"
        },
        {
            "utterance": "How many males in this table ? | Do you mean the table `` Faculty '' ? | Yes .",
            "sql": "select count ( faculty.* ) where faculty.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Show all the ranks and the number of male and female faculty for each rank.",
        "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
    },
    "interaction": [
        {
            "utterance": "Can you please list all the ranks and the number of male faculty members for those ranks ?",
            "sql": "select faculty.rank , faculty.sex , count ( faculty.* ) where faculty.sex = value group_by faculty.rank , faculty.sex"
        },
        {
            "utterance": "Can you add the number of female faculty members for each of the ranks to the table please ?",
            "sql": "select faculty.rank , faculty.sex , count ( faculty.* ) group_by faculty.rank , faculty.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Show all the activity names and the number of faculty involved in each activity.",
        "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me what activities are listed ? | The following table shows activity names | Can you tell me how many faculty are involved in each activity ?",
            "sql": "select activity.activity_name , count ( * ) group_by activity.actid"
        },
        {
            "utterance": "What is the most popular activity ?",
            "sql": "select activity.activity_name group_by activity.actid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Show all the ranks and the number of male and female faculty for each rank.",
        "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
    },
    "interaction": [
        {
            "utterance": "how many faculties ?",
            "sql": "select count ( faculty.* )"
        },
        {
            "utterance": "How many female faculties ?",
            "sql": "select count ( faculty.* ) where faculty.sex = value"
        },
        {
            "utterance": "How many professors ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2"
    },
    "interaction": [
        {
            "utterance": "Can you list the artist ids and their volume issues ?",
            "sql": "select artist.artist_id , volume.volume_issue"
        },
        {
            "utterance": "Which volumes have more than 2 weeks on top ?",
            "sql": "select * where volume.weeks_on_top > value"
        },
        {
            "utterance": "Hmm , I want to know the famous titles of the artists associated with volumes with more than 2 weeks on top .",
            "sql": "select artist.famous_title where volume.weeks_on_top > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 1,
    "final": {
        "utterance": "Please show the songs that have result \"nominated\" at music festivals.",
        "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\""
    },
    "interaction": [
        {
            "utterance": "What are the issue date of 34th England Academy Prize ?",
            "sql": "select volume.issue_date where music_festival.music_festival = value"
        },
        {
            "utterance": "What are the music festivals of Everybody Have Fun Tonight song ?",
            "sql": "select music_festival.music_festival where volume.song = value"
        },
        {
            "utterance": "Show the songs that have result `` nominated '' at music festivals .",
            "sql": "select volume.song where music_festival.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Please show the results of music festivals and the number of music festivals that have had each , ordered by this count .",
            "sql": "select music_festival.result , count ( music_festival.* ) group_by music_festival.result order_by count ( music_festival.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\""
    },
    "interaction": [
        {
            "utterance": "what is average of volume ?",
            "sql": "select avg ( music_festival.volume )"
        },
        {
            "utterance": "can you show a list of categories ?",
            "sql": "select distinct music_festival.category"
        },
        {
            "utterance": "where are the date of ceremony of music festivals with category 'best song ' and 'awarded ' ?",
            "sql": "select music_festival.date_of_ceremony where music_festival.category = value and music_festival.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the issue date of the volume with the minimum weeks on top?",
        "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "The song The way was issued on what date ?",
            "sql": "select volume.issue_date where volume.song like value"
        },
        {
            "utterance": "the song The way was issued what volume ?",
            "sql": "select volume.volume_issue where volume.song like value"
        },
        {
            "utterance": "what 's the artist id for Everybody Have Fun Tonight",
            "sql": "select volume.artist_id where volume.song like value"
        },
        {
            "utterance": "Give me the issue date of the volume with the minimum weeks on top",
            "sql": "select volume.issue_date order_by volume.weeks_on_top asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the categories of the music festivals with count more than 1.",
        "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hi.Can you show the categories of the music festivals ?",
            "sql": "select music_festival.category"
        },
        {
            "utterance": "Ok thank you.Can you please show me the music festivals with counts more than 1 ? | Did you mean to ask for the categories of the music festivals with counts more than 1 ? | Yes .",
            "sql": "select music_festival.category group_by music_festival.category having count ( music_festival.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\""
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me in what year did the artist Gorgoroth release his first song ? | 16 May - 30 May is the issue date of the song the artist Gorgoroth first released . | what is the name of the song ?",
            "sql": "select volume.song where artist.artist = value order_by volume.issue_date limit_value"
        },
        {
            "utterance": "Great , what is the issue dates of all volumes of the artist `` Gorgoroth ''",
            "sql": "select volume.issue_date where artist.artist = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23"
    },
    "interaction": [
        {
            "utterance": "What are the issue dates of volumes associated with the artist aged 23 or younger ?",
            "sql": "select volume.issue_date where artist.age < = value"
        },
        {
            "utterance": "What are the issue dates of volumes associated with the artist aged 24 or older ?",
            "sql": "select volume.issue_date where artist.age > = value"
        },
        {
            "utterance": "How many weeks on top for volumes associated with the artist aged 24 or older ?",
            "sql": "select count ( volume.weeks_on_top ) where artist.age > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the maximum and minimum week on top of all volumes?",
        "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume"
    },
    "interaction": [
        {
            "utterance": "Hello , can you please tell me the most weeks spent on top ?",
            "sql": "select max ( volume.weeks_on_top )"
        },
        {
            "utterance": "And how many volumes spent 3.0 weeks on top ?",
            "sql": "select count ( volume.* ) where volume.weeks_on_top = value"
        },
        {
            "utterance": "What are the names of the two volumes that spend 3.0 weeks on top ? | What do you mean by names ? | I am sorry - what are the songs of the two volumes that spent 3.0 weeks on top ?",
            "sql": "select volume.song where volume.weeks_on_top = value"
        },
        {
            "utterance": "What was the minimum time spent on top ?",
            "sql": "select min ( volume.weeks_on_top )"
        },
        {
            "utterance": "And how many volumes spent 1.0 weeks on top ?",
            "sql": "select count ( volume.* ) where volume.weeks_on_top = value"
        },
        {
            "utterance": "Did any artist ID appear more than once in the weeks spent on top ? | Do you mean the artists id which has more than one volume ? | Yes please .",
            "sql": "select volume.artist_id group_by volume.artist_id having count ( volume.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the song in the volume with the maximum weeks on top?",
        "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the maximum weeks on top in the table ?",
            "sql": "select volume.weeks_on_top order_by volume.weeks_on_top desc limit_value"
        },
        {
            "utterance": "Which volume id has the maximum weeks on top ?",
            "sql": "select distinct ( volume.volume_id ) where volume.weeks_on_top = ( select volume.weeks_on_top order_by volume.weeks_on_top desc limit_value )"
        },
        {
            "utterance": "Hmm , I want to know what is the song in the volume with the maximum weeks on top please .",
            "sql": "select distinct ( volume.song ) where volume.weeks_on_top = ( select volume.weeks_on_top order_by volume.weeks_on_top desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of editors that are on at least two journal committees.",
        "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the names of editors on the list with at least two journal committees .",
            "sql": "select editor.name group_by editor.name having count ( * ) > = value"
        },
        {
            "utterance": "What are the ages of the editors that are at least two journal committees .",
            "sql": "select editor.age group_by editor.name having count ( * ) > = value"
        },
        {
            "utterance": "What type of work does Kamila Porczyk do ?",
            "sql": "select journal_committee.work_type where editor.name = value"
        },
        {
            "utterance": "Who is the youngest journal committee member ?",
            "sql": "select editor.name order_by editor.age asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of editors of age either 24 or 25.",
        "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25"
    },
    "interaction": [
        {
            "utterance": "Show the names of editors of age either 24 or 25 .",
            "sql": "select editor.name where editor.age = value or editor.age = value"
        },
        {
            "utterance": "List out the editors name ? | sorry , did you mean you need the Editor ID | How many editor id 's in the table ?",
            "sql": "select count ( editor.editor_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000"
    },
    "interaction": [
        {
            "utterance": "What is the journal id of Anna Powierza ?",
            "sql": "select journal.journal_id where editor.name = value"
        },
        {
            "utterance": "What are the work type of Kamila Porczyk ?",
            "sql": "select journal_committee.work_type where editor.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'"
    },
    "interaction": [
        {
            "utterance": "Show average sales of the journals that have an editor whose work type is photo",
            "sql": "select avg ( journal.sales ) where journal_committee.work_type = value"
        },
        {
            "utterance": "The one I asked before",
            "sql": "select journal.journal_id where journal_committee.work_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of editors of age either 24 or 25.",
        "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25"
    },
    "interaction": [
        {
            "utterance": "Show the names of editors of age 24 .",
            "sql": "select editor.name where editor.age = value"
        },
        {
            "utterance": "Please show me the names of editors of age 25 .",
            "sql": "select editor.name where editor.age = value"
        },
        {
            "utterance": "hmmm . Can you also show me the name and age of the oldest editor ?",
            "sql": "select editor.name , editor.age where editor.age = ( select max ( editor.age ) )"
        },
        {
            "utterance": "ok. can you also please give me the name and age of the youngest editor ?",
            "sql": "select editor.name , editor.age where editor.age = ( select min ( editor.age ) )"
        },
        {
            "utterance": "How many editors are older then 25 and younger than 45 ?",
            "sql": "select count ( editor.* ) where editor.age > value and editor.age < value"
        },
        {
            "utterance": "May I have their names please ?",
            "sql": "select editor.name where editor.age > value and editor.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of editors that are on at least two journal committees.",
        "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "show the names of editors that are on at least two journal committees ?",
            "sql": "select editor.name group_by editor.name having count ( * ) > = value"
        },
        {
            "utterance": "what is the work type of Kamila Porczyk ?",
            "sql": "select journal_committee.work_type where editor.name = value"
        },
        {
            "utterance": "how much years old is Anna Powierza ?",
            "sql": "select editor.age where editor.name = value"
        },
        {
            "utterance": "what is the work type of Anna Powierza ?",
            "sql": "select journal_committee.work_type where editor.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the youngest editor?",
        "sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello . What is the name of the youngest editor ?",
            "sql": "select editor.name order_by editor.age asc limit_value"
        },
        {
            "utterance": "What is the age of the youngest editor ?",
            "sql": "select editor.age order_by editor.age asc limit_value"
        },
        {
            "utterance": "What is the name of that editor ?",
            "sql": "select editor.name order_by editor.age asc limit_value"
        },
        {
            "utterance": "Can you tell me the name of the oldest editor as well ?",
            "sql": "select editor.name order_by editor.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 0,
    "final": {
        "utterance": "Which countries have more than two members?",
        "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Which countries have members ?",
            "sql": "select distinct ( member.country )"
        },
        {
            "utterance": "Which country has the most members ?",
            "sql": "select member.country group_by member.country order_by count ( member.* ) desc limit_value"
        },
        {
            "utterance": "Which country has more than 2 members ?",
            "sql": "select member.country group_by member.country having count ( member.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the most common country across members.",
        "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Where is the most common country across members ?",
            "sql": "select member.country group_by member.country order_by count ( member.* ) desc limit_value"
        },
        {
            "utterance": "Okay , which members are there ? | Do you mean which members are in United States ? | Yes . Which members are in the United States ?",
            "sql": "select member.name where member.country = value"
        },
        {
            "utterance": "Okay . What other countries are listed ?",
            "sql": "select distinct member.country except select member.country where member.country = value"
        },
        {
            "utterance": "Who are the members in Canada ?",
            "sql": "select member.name where member.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\""
    },
    "interaction": [
        {
            "utterance": "show the total distinct leader names of the college associated with the members of all country",
            "sql": "select distinct college.leader_name"
        },
        {
            "utterance": "find the college id for the college location Ottawa",
            "sql": "select college.college_id where college.college_location = value"
        },
        {
            "utterance": "find the member name and college location for the member id 1",
            "sql": "select member.name , college.college_location where member.member_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "sql": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\""
    },
    "interaction": [
        {
            "utterance": "how many members are from united states or canada",
            "sql": "select count ( member.name ) where member.country = value or member.country = value"
        },
        {
            "utterance": "can you list the name of these 10 members",
            "sql": "select member.name where member.country = value or member.country = value"
        },
        {
            "utterance": "arrange the names in ascending order",
            "sql": "select member.name where member.country = value or member.country = value order_by member.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of members in ascending order of their rank in rounds.",
        "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC"
    },
    "interaction": [
        {
            "utterance": "list the name of the members in the order of their rank in rounds",
            "sql": "select member.name order_by round.rank_in_round asc"
        },
        {
            "utterance": "include member id in this table",
            "sql": "select member.name , member.member_id order_by round.rank_in_round asc"
        },
        {
            "utterance": "also include the college id in this table",
            "sql": "select member.name , member.member_id , member.college_id order_by round.rank_in_round asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the most common country across members.",
        "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common college id ?",
            "sql": "select member.college_id group_by member.college_id order_by count ( member.* ) desc limit_value"
        },
        {
            "utterance": "Who went there ?",
            "sql": "select member.name where member.college_id = value"
        },
        {
            "utterance": "What about the most common country ?",
            "sql": "select member.country group_by member.country order_by count ( member.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "sql": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC"
    },
    "interaction": [
        {
            "utterance": "Please show the names of all members who go to Saskatchewan School",
            "sql": "select member.name where college.name = value"
        },
        {
            "utterance": "Now please show the names of all members , and the locations of the colleges they go to",
            "sql": "select member.name , college.college_location"
        },
        {
            "utterance": "now can you show the those same results , but ordered in ascending order of member names",
            "sql": "select member.name , college.college_location order_by member.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    "interaction": [
        {
            "utterance": "which rooms have a king bed ?",
            "sql": "select rooms.* where rooms.bedtype = value"
        },
        {
            "utterance": "what are the decor of those rooms ?",
            "sql": "select distinct rooms.decor where rooms.bedtype = value"
        },
        {
            "utterance": "show me the names and the decor of the rooms that have a king bed",
            "sql": "select rooms.roomname , rooms.decor where rooms.bedtype = value"
        },
        {
            "utterance": "show me the price of the rooms also",
            "sql": "select rooms.roomname , rooms.decor , rooms.baseprice where rooms.bedtype = value"
        },
        {
            "utterance": "now sort the list by price",
            "sql": "select rooms.roomname , rooms.decor , rooms.baseprice where rooms.bedtype = value order_by rooms.baseprice"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name and id of the top 3 expensive rooms.",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "Can you list the base price for all rooms ?",
            "sql": "select rooms.baseprice"
        },
        {
            "utterance": "Can you sort the list to show only the 3 highest base prices ?",
            "sql": "select rooms.baseprice order_by rooms.baseprice desc limit_value"
        },
        {
            "utterance": "Can you please list the room name and room id associated with each of those 3 base prices ?",
            "sql": "select rooms.roomid , rooms.roomname order_by rooms.baseprice desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which room has cheapest base price? List the room's name and the base price.",
        "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me which room has the cheapest base price ?",
            "sql": "select rooms.* order_by rooms.baseprice asc limit_value"
        },
        {
            "utterance": "Could you please tell me which room has the most expensive base price ?",
            "sql": "select rooms.* order_by rooms.baseprice desc limit_value"
        },
        {
            "utterance": "What is the average base price for all rooms ?",
            "sql": "select avg ( rooms.baseprice )"
        },
        {
            "utterance": "What is the name of the room with the largest max occupancy ?",
            "sql": "select rooms.roomname order_by rooms.maxoccupancy desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the number of rooms that do not have any reservation.",
        "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    "interaction": [
        {
            "utterance": "which one of these rooms has reservations ?",
            "sql": "select rooms.* where rooms.roomid in ( select distinct reservations.room )"
        },
        {
            "utterance": "What about the rooms which do not have reservations ?",
            "sql": "select rooms.* where rooms.roomid not in ( select distinct reservations.room )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the first and last names of people who payed more than the rooms' base prices.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"
    },
    "interaction": [
        {
            "utterance": "Can you find the first and last names of all people who paid more than the rooms ' base prices ?",
            "sql": "select reservations.firstname , reservations.lastname where reservations.rate - rooms.baseprice > value"
        },
        {
            "utterance": "Could you add in the rates they paid to the table please ? | Sorry , did you mean the base price of the room ? | The reservation rate , please",
            "sql": "select reservations.firstname , reservations.lastname , reservations.rate where reservations.rate - rooms.baseprice > value"
        },
        {
            "utterance": "Can you find the first and last names of all people who paid less than the rooms ' base prices ?",
            "sql": "select reservations.firstname , reservations.lastname where reservations.rate - rooms.baseprice < value"
        },
        {
            "utterance": "Could you add in the reservation rates they paid to the table ?",
            "sql": "select reservations.firstname , reservations.lastname , reservations.rate where reservations.rate - rooms.baseprice < value"
        },
        {
            "utterance": "What is the name of the room that was booked most often ?",
            "sql": "select reservations.room group_by reservations.room order_by count ( reservations.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what is the last name of room id IBS ? | Do mean the last name of the reservation for the room with id IBS ? | yes",
            "sql": "select reservations.lastname where rooms.roomid = value"
        },
        {
            "utterance": "what is the bed type of the column `` room in HBB ? | Do you mean the bed type for the room with id HBB ? | yes",
            "sql": "select rooms.bedtype where rooms.roomid = value"
        },
        {
            "utterance": "what is the check in and check out of the room id RND ?",
            "sql": "select reservations.checkin , reservations.checkout where rooms.roomid = value"
        },
        {
            "utterance": "Find the most popular room in the hotel . The most popular room is the room that had seen the largest number of reservations .",
            "sql": "select rooms.roomname group_by reservations.room order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";"
    },
    "interaction": [
        {
            "utterance": "what is the average of rates ?",
            "sql": "select avg ( reservations.rate )"
        },
        {
            "utterance": "show me a list of check outs ?",
            "sql": "select reservations.checkout"
        },
        {
            "utterance": "show me a list of check in ?",
            "sql": "select reservations.checkin"
        },
        {
            "utterance": "how many adults stay in the room contad selbig checked in on oct 23 , 2010 ?",
            "sql": "select count ( reservations.adults ) where reservations.checkin = value and reservations.firstname = value and reservations.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many times does ROY SWEAZY has reserved a room.",
        "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    "interaction": [
        {
            "utterance": "how many times does ROY SWEAZY has reserved a room",
            "sql": "select count ( reservations.* ) where reservations.firstname = value and reservations.lastname = value"
        },
        {
            "utterance": "ok , show the count of all room",
            "sql": "select count ( distinct reservations.room )"
        },
        {
            "utterance": "show the count of all adults and kids",
            "sql": "select count ( reservations.adults ) , count ( reservations.kids )"
        },
        {
            "utterance": "find the check in and out for the code 10105",
            "sql": "select reservations.checkin , reservations.checkout where reservations.code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of rooms with king bed for each decor type.",
        "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
    },
    "interaction": [
        {
            "utterance": "How many rooms with the King Size bed are there ?",
            "sql": "select count ( rooms.* ) where rooms.bedtype = value"
        },
        {
            "utterance": "How much does one room with the King size bed cost per night ?",
            "sql": "select avg ( rooms.baseprice ) where rooms.bedtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of rooms that have been reserved for more than 60 times.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"
    },
    "interaction": [
        {
            "utterance": "What is the first name of Reservations Code 10105 ?",
            "sql": "select reservations.firstname where reservations.code = value"
        },
        {
            "utterance": "What is the last name of Reservations Code 10105 ?",
            "sql": "select reservations.lastname where reservations.code = value"
        },
        {
            "utterance": "Can you show the names of rooms that have been reserved for more than 60 times",
            "sql": "select rooms.roomname group_by reservations.room having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    "interaction": [
        {
            "utterance": "Find the names of all modern rooms with a base price below $ 160 and two beds .",
            "sql": "select rooms.roomname where rooms.baseprice < value and rooms.beds = value and rooms.decor = value"
        },
        {
            "utterance": "Which room has highest price value ? tell me the name and Room ID",
            "sql": "select rooms.roomname , rooms.roomid where rooms.baseprice = ( select max ( rooms.baseprice ) )"
        },
        {
            "utterance": "Which room has lowest price value ? tell me the price , the name and Room ID",
            "sql": "select rooms.baseprice , rooms.roomname , rooms.roomid where rooms.baseprice = ( select min ( rooms.baseprice ) )"
        },
        {
            "utterance": "Which room has most number of beds ? Tell me the Room ID , Name and decor ?",
            "sql": "select rooms.roomid , rooms.roomname , rooms.decor where rooms.beds = ( select max ( rooms.beds ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the average and minimum price of the rooms in different decor.",
        "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"
    },
    "interaction": [
        {
            "utterance": "What are the bed type of room id RND ?",
            "sql": "select rooms.bedtype where rooms.roomid = value"
        },
        {
            "utterance": "What type of decor in room name Abscond or bolster ?",
            "sql": "select rooms.decor where rooms.roomname = value"
        },
        {
            "utterance": "Find the max occupancy of bed type Queen ? | Here are the max occupancies of rooms with bed type Queen . | Find the average and minimum price of the rooms in different decor .",
            "sql": "select rooms.decor , avg ( rooms.baseprice ) , min ( rooms.baseprice ) group_by rooms.decor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name and id of the top 3 expensive rooms.",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "What are the names of the top 3 expensive rooms ?",
            "sql": "select rooms.roomname order_by rooms.baseprice desc limit_value"
        },
        {
            "utterance": "What are the bed types of those rooms ?",
            "sql": "select rooms.bedtype order_by rooms.baseprice desc limit_value"
        },
        {
            "utterance": "What are the bed types of the three least expensive rooms ?",
            "sql": "select rooms.bedtype order_by rooms.baseprice limit_value"
        },
        {
            "utterance": "What are the ids of the top 3 expensive rooms ?",
            "sql": "select rooms.roomid order_by rooms.baseprice desc limit_value"
        },
        {
            "utterance": "What are the ids of the three least expensive rooms ?",
            "sql": "select rooms.roomid order_by rooms.baseprice limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    "interaction": [
        {
            "utterance": "WHAT IS ROOM ID OF MODERN DECOR ?",
            "sql": "select rooms.roomid where rooms.decor = value"
        },
        {
            "utterance": "OK .HOW MANY ROOMS IN KING BED TYPE ?",
            "sql": "select count ( rooms.* ) where rooms.bedtype = value"
        },
        {
            "utterance": "WHAT IS ROOM NAME of rooms that have a king bed . ?",
            "sql": "select rooms.roomname where rooms.bedtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
    },
    "interaction": [
        {
            "utterance": "List all the room names .",
            "sql": "select rooms.roomname"
        },
        {
            "utterance": "List all the room names with 2 beds .",
            "sql": "select rooms.roomname where rooms.beds = value"
        },
        {
            "utterance": "List all the room names booked with 1 adult .",
            "sql": "select rooms.roomname where reservations.adults = value"
        },
        {
            "utterance": "List all the room names booked with 1 adult and their check in date .",
            "sql": "select rooms.roomname , reservations.checkin where reservations.adults = value"
        },
        {
            "utterance": "List all the room names booked with 1 adult and a check in date in October .",
            "sql": "select rooms.roomname where reservations.adults = value and reservations.checkin like value"
        },
        {
            "utterance": "List the names of rooms booked by a customer whose first name is Roy .",
            "sql": "select rooms.roomname where reservations.firstname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the id and name of the most expensive base price room.",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many rooms are there ?",
            "sql": "select count ( rooms.* )"
        },
        {
            "utterance": "What are their prices ?",
            "sql": "select rooms.baseprice"
        },
        {
            "utterance": "What is the id of the room with a base price of 250 ?",
            "sql": "select rooms.roomid where rooms.baseprice = value"
        },
        {
            "utterance": "What is the name of that room ?",
            "sql": "select rooms.roomname where rooms.baseprice = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the number of rooms that do not have any reservation.",
        "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    "interaction": [
        {
            "utterance": "which rooms have reservations ?",
            "sql": "select distinct reservations.room"
        },
        {
            "utterance": "show me the average number of beds of the rooms with reservations .",
            "sql": "select avg ( rooms.beds ) where rooms.roomid in ( select distinct reservations.room )"
        },
        {
            "utterance": "how about the rooms that do not have any reservations ?",
            "sql": "select avg ( rooms.beds ) where rooms.roomid not in ( select distinct reservations.room )"
        },
        {
            "utterance": "what are the number of rooms that do not have any reservations ?",
            "sql": "select count ( rooms.* ) where rooms.roomid not in ( select distinct reservations.room )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name of rooms whose price is higher than the average price.",
        "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
    },
    "interaction": [
        {
            "utterance": "how rooms are presented on the table | Did you mean to ask how many entries are in the table rooms ? | exactly",
            "sql": "select count ( rooms.* )"
        },
        {
            "utterance": "list out the room names",
            "sql": "select rooms.roomname"
        },
        {
            "utterance": "what is the base price of Recluse and defiance",
            "sql": "select rooms.baseprice where rooms.roomname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of the first names of all customers who rented films before '2005-08-23 02:06:01 ' ?",
            "sql": "select customer.first_name where customer.customer_id in ( select rental.customer_id where rental.rental_date < value )"
        },
        {
            "utterance": "Thank you ! That 's a lot of people ! Can you filter the list to show me only the active customers ?",
            "sql": "select customer.first_name where customer.customer_id in ( select rental.customer_id where rental.rental_date < value ) and customer.active = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
    },
    "interaction": [
        {
            "utterance": "Which film actors and actresses played a role in more than 30 films ? List their first and last names .",
            "sql": "select actor.first_name , actor.last_name group_by actor.actor_id having count ( * ) > value"
        },
        {
            "utterance": "How many films was actor id 9 in ?",
            "sql": "select count ( film_actor.* ) where film_actor.actor_id = value"
        },
        {
            "utterance": "What 's that person 's name ?",
            "sql": "select actor.first_name , actor.last_name where actor.actor_id = value"
        },
        {
            "utterance": "Is there anyone else with the first name Joe ?",
            "sql": "select actor.first_name , actor.last_name where actor.first_name = value and actor.last_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which staff handled least number of payments? List the full name and the id.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which staff handled payments ?",
            "sql": "select staff.*"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Where does the customer with the first name Linda live? And what is her email?",
        "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table | Did you mean to ask how many entries there are in the table customer ? | exactly",
            "sql": "select count ( customer.* )"
        },
        {
            "utterance": "list out the customers first name",
            "sql": "select customer.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the first name and the last name of the customer who made the earliest rental?",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the last name of staff id 1 ? | Do you mean customer , not staff ? | yes",
            "sql": "select customer.last_name where customer.customer_id = value"
        },
        {
            "utterance": "what is the inventory id of the rent id 3 ?",
            "sql": "select rental.inventory_id where rental.rental_id = value"
        },
        {
            "utterance": "what is the first name and the last name of the customer who made the earliest rental ?",
            "sql": "select customer.first_name , customer.last_name order_by rental.rental_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many films are there ?",
            "sql": "select count ( film.* )"
        },
        {
            "utterance": "What is the range of dates they were made ?",
            "sql": "select min ( film.release_year ) , max ( film.release_year )"
        },
        {
            "utterance": "What is the range of rental cost for the films ?",
            "sql": "select min ( film.rental_rate ) , max ( film.rental_rate )"
        },
        {
            "utterance": "Which film has the most actors and actresses ? | What attributes of the film that has the most actors and actresses would you like to know ? | film name ?",
            "sql": "select film.title group_by film.film_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "film id ?",
            "sql": "select film.film_id group_by film.film_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "film description ?",
            "sql": "select film.description group_by film.film_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Where does the staff member with the first name Elsa live?",
        "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'"
    },
    "interaction": [
        {
            "utterance": "what is the city id of alberta district ?",
            "sql": "select distinct address.city_id where address.district = value"
        },
        {
            "utterance": "ok good ! .what is last update in qld district ?",
            "sql": "select distinct address.last_update where address.district = value"
        },
        {
            "utterance": "what is address of qld district ?",
            "sql": "select address.address where address.district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the largest payment amount?",
        "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Whew ! That was a long wait to join the chat ! Can you please show me what the largest single payment amount is ?",
            "sql": "select payment.amount order_by payment.amount desc limit_value"
        },
        {
            "utterance": "Great ! Can you provide me with the associated customer ID and payment ID ?",
            "sql": "select payment.amount , payment.payment_id , payment.customer_id order_by payment.amount desc limit_value"
        },
        {
            "utterance": "Perfect ! Could you tell me which payment ID over $ 5.00 has the most recent payment date ?",
            "sql": "select payment.payment_id where payment.amount > value order_by payment.last_update desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
    },
    "interaction": [
        {
            "utterance": "Show me the name of the film with film id 1 ? | Do you mean the title in the table file | yes",
            "sql": "select film.title where film.film_id = value"
        },
        {
            "utterance": "Show all the films longer than 100 minutes ? | do you mean the films id ? | yes",
            "sql": "select film.film_id where film.length > value"
        },
        {
            "utterance": "Show me the name of all the films with release year 2006 ?",
            "sql": "select film.title where film.release_year = value"
        },
        {
            "utterance": "Show the names of all films except those who cost more than 200 for replacement ?",
            "sql": "select film.title except select film.title where film.replacement_cost > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the actor that starred in most films ?",
            "sql": "select actor.first_name , actor.last_name group_by actor.actor_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is Gina Gegeneres 's actor id ?",
            "sql": "select actor.actor_id where actor.first_name = value and actor.last_name = value"
        },
        {
            "utterance": "when was Gina Gegeneres 's last update ?",
            "sql": "select actor.last_update where actor.first_name = value and actor.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"
    },
    "interaction": [
        {
            "utterance": "What movies contain the words `` deleted scenes '' in the column Special Features ?",
            "sql": "select film.* where film.special_features like value"
        },
        {
            "utterance": "How many movies contain the words `` Deleted scenes '' in the Special Features column ?",
            "sql": "select count ( film.* ) where film.special_features like value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select film.title where film.special_features like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Which film has the most copies in the inventory? List both title and id.",
        "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you list the film ID of the film with the most copies in the inventory ?",
            "sql": "select film.film_id group_by film.film_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Thank you ! Can you show include the flim 's title to that list ?",
            "sql": "select film.title , film.film_id group_by film.film_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Great ! Can I see the description for that movie , in addition to its rating and special features ?",
            "sql": "select film.description , film.rating , film.special_features group_by film.film_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Which districts have at least two addresses?",
        "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the districts of the addresses ?",
            "sql": "select address.district"
        },
        {
            "utterance": "How about the district which has at least two addresses ?",
            "sql": "select address.district group_by address.district having count ( address.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"
    },
    "interaction": [
        {
            "utterance": "Can you show me the first names of customers who have a rental date on or before 2005-08-23 ?",
            "sql": "select customer.first_name where customer.customer_id in ( select rental.customer_id where rental.rental_date < = value )"
        },
        {
            "utterance": "Hmm , I want to know the customer ids who have not rented any films after '2005-08-23 02:06:01 ' please .",
            "sql": "select customer.customer_id where customer.customer_id not in ( select rental.customer_id where rental.rental_date > value )"
        },
        {
            "utterance": "Can you just show me the first names of those customers ?",
            "sql": "select customer.first_name where customer.customer_id not in ( select rental.customer_id where rental.rental_date > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which store owns most items?",
        "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many stores are there ?",
            "sql": "select count ( distinct inventory.store_id )"
        },
        {
            "utterance": "Which store owns the fewest items ?",
            "sql": "select inventory.* group_by inventory.store_id order_by count ( inventory.* ) asc limit_value"
        },
        {
            "utterance": "And which stores owns the most items ?",
            "sql": "select inventory.* group_by inventory.store_id order_by count ( inventory.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the most popular full name of the actors?",
        "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What name is popular for actors ? | did you mean the most popular ? | yes",
            "sql": "select actor.first_name , actor.last_name group_by actor.first_name , actor.last_name order_by count ( actor.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can i have the list of the names of film that was rented",
            "sql": "select film.title group_by inventory.inventory_id"
        },
        {
            "utterance": "Give me the inventory id and title of the film that was most frequently rented",
            "sql": "select film.title , inventory.inventory_id group_by inventory.inventory_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what are the special features of ACADEMY DINOSAUR",
            "sql": "select film.special_features where film.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Which countries have at least 3 cities?",
        "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "How many countries have more than 1 city ?",
            "sql": "select count ( * ) ( select * group_by country.country_id having count ( * ) > value )"
        },
        {
            "utterance": "How many countries have at least 3 cities ?",
            "sql": "select count ( * ) ( select * group_by country.country_id having count ( * ) > = value )"
        },
        {
            "utterance": "Show these countries",
            "sql": "select country.country group_by country.country_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the city with the most addresses ?",
            "sql": "select city.city group_by address.city_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many addresses does it have ?",
            "sql": "select count ( * ) group_by address.city_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is its city id ?",
            "sql": "select city.city_id group_by address.city_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you list the all addresses that have the letter S in them ?",
            "sql": "select address.address where address.address like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the genre name of the film HUNGER ROOF?",
        "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"
    },
    "interaction": [
        {
            "utterance": "What is the genre name of the film HUNGER ROOF , please ?",
            "sql": "select category.name where film.title = value"
        },
        {
            "utterance": "How many other films have that same genre name ?",
            "sql": "select count ( * ) where category.name = value"
        },
        {
            "utterance": "Of those films , which ones have the special features Deleted Scenes ?",
            "sql": "select count ( * ) where category.name = value and film.special_features = value"
        },
        {
            "utterance": "What about the special features Trailers ?",
            "sql": "select count ( * ) where category.name = value and film.special_features = value"
        },
        {
            "utterance": "What about films of the genre Action ?",
            "sql": "select count ( * ) where category.name = value and film.special_features = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
    },
    "interaction": [
        {
            "utterance": "Show me all the films which listed in the table ? | There are the titles of all the films . | Show me all films longer than 100 minutes ?",
            "sql": "select film.title where film.length > value"
        },
        {
            "utterance": "Show me all the films not longer than 100 minutes ?",
            "sql": "select film.title where film.length < = value"
        },
        {
            "utterance": "Find all the films rated PG , except those who cost more than 200 for replacement ?",
            "sql": "select film.title where film.rating = value except select film.title where film.replacement_cost > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the largest payment amount?",
        "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the largest payment amount ?",
            "sql": "select payment.amount order_by payment.amount desc limit_value"
        },
        {
            "utterance": "OK , what is the average of all payment amounts ?",
            "sql": "select avg ( payment.amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "what film has rental fee of 0.99 ?",
            "sql": "select film.title where film.rental_rate = value"
        },
        {
            "utterance": "Which of the film has the highest rent fee ?",
            "sql": "select film.title order_by film.rental_rate desc limit_value"
        },
        {
            "utterance": "list the films with less than three in inventory",
            "sql": "select film.title intersect select film.title group_by film.film_id having count ( film.* ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customer.* )"
        },
        {
            "utterance": "How many are there that has made at least one payment ?",
            "sql": "select count ( * ) ( select * group_by customer.customer_id )"
        },
        {
            "utterance": "Out of those customers , who has spent the least amount of money ? | Do you want the first and last names and id of the customer who has spent the least amount of money ? | Yes please",
            "sql": "select customer.first_name , customer.last_name , customer.customer_id group_by customer.customer_id order_by sum ( payment.amount ) asc limit_value"
        },
        {
            "utterance": "How much money did that customer spend ?",
            "sql": "select sum ( payment.amount ) group_by customer.customer_id order_by sum ( payment.amount ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 0,
    "final": {
        "utterance": "List the camera lens names containing substring \"Digital\".",
        "sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\""
    },
    "interaction": [
        {
            "utterance": "How many different lens are there ? | Did you mean the different brand of lens are there | No , I meant the total number of lenses",
            "sql": "select count ( camera_lens.* )"
        },
        {
            "utterance": "Can you please list the ones that contain substring `` Digital '' in their names ? | The names of the camera lens that contain substring `` Digital '' in their names are Olympus M.Zuiko Digital ED 45mm f/1.8 , Olympus M.Zuiko Digital ED 75mm f/1.8 | Can you please also include their id ?",
            "sql": "select camera_lens.name , camera_lens.id where camera_lens.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names of the cameras that have taken picture of the most mountains?",
        "sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the brand name of id 2 ? | Did you mean the brand or name of the camera lens with ID 2 ? | yes",
            "sql": "select camera_lens.brand where camera_lens.id = value"
        },
        {
            "utterance": "what is color of mountain id no . 20 ?",
            "sql": "select distinct ( photos.color ) where photos.mountain_id = value"
        },
        {
            "utterance": "what is focus length of id 3 ?",
            "sql": "select camera_lens.focal_length_mm where camera_lens.id = value"
        },
        {
            "utterance": "what is the name of the camera lens in the mountains id 2 ?",
            "sql": "select camera_lens.name where photos.mountain_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 2,
    "final": {
        "utterance": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'"
    },
    "interaction": [
        {
            "utterance": "How many distinct kinds of camera lenses are used to take photos of mountain ranges in the country `` Ethiopia '' ?",
            "sql": "select count ( distinct photos.camera_lens_id ) where mountain.country = value"
        },
        {
            "utterance": "What about in other countries ?",
            "sql": "select count ( distinct photos.camera_lens_id ) where mountain.country != value"
        },
        {
            "utterance": "What are the names of the photographers who used those lenses ?",
            "sql": "select mountain.name where mountain.country != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'"
    },
    "interaction": [
        {
            "utterance": "How many photos use Olympus camera lenses ?",
            "sql": "select count ( * ) where camera_lens.brand = value"
        },
        {
            "utterance": "What are their names ? | Do you mean the photos name | Yes",
            "sql": "select photos.name group_by photos.name having camera_lens.brand = value"
        },
        {
            "utterance": "What are the names of the photos that use a Sigma lens ?",
            "sql": "select photos.name where camera_lens.brand = value"
        },
        {
            "utterance": "How many photos use a Sigma lens ?",
            "sql": "select count ( * ) where camera_lens.brand = value"
        },
        {
            "utterance": "What are their photo names ?",
            "sql": "select photos.name where camera_lens.brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "sql": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "Can you list the name of each camera lens and the number of photos taken by it ?",
            "sql": "select camera_lens.name , count ( * ) group_by camera_lens.id"
        },
        {
            "utterance": "Can you order the table by the count of photos in ascending order ?",
            "sql": "select camera_lens.name , count ( * ) group_by camera_lens.id order_by count ( * )"
        },
        {
            "utterance": "What are the names of all photos taken by Olympus brand cameras ?",
            "sql": "select photos.name where camera_lens.brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 5,
    "final": {
        "utterance": "How many camera lenses are not used in taking any photos?",
        "sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )"
    },
    "interaction": [
        {
            "utterance": "How many camera lenses are not used in taking any photos ?",
            "sql": "select count ( camera_lens.* ) where camera_lens.id not in ( select photos.camera_lens_id )"
        },
        {
            "utterance": "What lenses are those ? | Which kind of information do you want about those lenses ? | What is the name of the lenses not used for taking photos ?",
            "sql": "select camera_lens.name where camera_lens.id not in ( select photos.camera_lens_id )"
        },
        {
            "utterance": "What is the max aperture for the Olympus M.Zuiko Digital ED 45mm f/1.8 ?",
            "sql": "select camera_lens.max_aperture where camera_lens.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'"
    },
    "interaction": [
        {
            "utterance": "What is the location of the bridge named 'Kolob Arch ' or 'Rainbow Bridge ' ?",
            "sql": "select bridge.location where bridge.name = value or bridge.name = value"
        },
        {
            "utterance": "What is the length of the Kolob Arch",
            "sql": "select bridge.length_meters where bridge.name = value"
        },
        {
            "utterance": "What bridge is the longest bridge measured in feet ? | Do you want the name of the longest bridge measured in feet ? | Yes",
            "sql": "select bridge.name where bridge.length_feet = ( select max ( bridge.length_feet ) )"
        },
        {
            "utterance": "Where is the Xian ren Qiao ( fairy bridge ) located ?",
            "sql": "select bridge.location where bridge.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name"
    },
    "interaction": [
        {
            "utterance": "Can you please show me the names of all male architects by their names lexicographically ?",
            "sql": "select architect.name where architect.gender = value order_by architect.name"
        },
        {
            "utterance": "Can you please show me all female architects by their names lexicographically ?",
            "sql": "select architect.name where architect.gender = value order_by architect.name"
        },
        {
            "utterance": "can you please show me all the female architects ?",
            "sql": "select architect.name where architect.gender = value"
        },
        {
            "utterance": "List the name , nationality and id of all male architects ordered by their names lexicographically ?",
            "sql": "select architect.name , architect.nationality , architect.id where architect.gender = value order_by architect.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Can I please have a list of architects who have built at least two bridges , or at least one mill ? | What attributes of the architects do you want ? | Can you please tell me the names and the ids of the architects who have built two bridges ?",
            "sql": "select architect.id , architect.name group_by architect.id having count ( * ) = value"
        },
        {
            "utterance": "Great . Would you please list the ids , names and genders of architects have built one mill ?",
            "sql": "select architect.id , architect.name , architect.gender group_by architect.id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the most common mill type, and how many are there?",
        "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common mill type ?",
            "sql": "select mill.type group_by mill.type order_by count ( mill.* ) desc limit_value"
        },
        {
            "utterance": "How many of those are there ?",
            "sql": "select mill.type , count ( mill.* ) group_by mill.type order_by count ( mill.* ) desc limit_value"
        },
        {
            "utterance": "What years were each of those built ?",
            "sql": "select mill.built_year where mill.type = ( select mill.type group_by mill.type order_by count ( mill.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 4,
    "final": {
        "utterance": "How many architects haven't built a mill before year 1850?",
        "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );"
    },
    "interaction": [
        {
            "utterance": "What is the nationality of Zaha Hadid ?",
            "sql": "select architect.nationality where architect.name = value"
        },
        {
            "utterance": "What is the gender of Frank Gehry ?",
            "sql": "select architect.gender where architect.name = value"
        },
        {
            "utterance": "What is the built year of architect id 2 ?",
            "sql": "select mill.built_year where mill.architect_id = value"
        },
        {
            "utterance": "What is the location of id 3 ?",
            "sql": "select mill.location where mill.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the id, name and nationality of the architect who built most mills?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "CAN YOU GIVE ME THE LIST OF architect NAME",
            "sql": "select architect.name"
        },
        {
            "utterance": "GREAT , CAN YOU GIVE ME THE DETAILS OF AMERICAN ARCHITECT NAMES",
            "sql": "select architect.* where architect.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80"
    },
    "interaction": [
        {
            "utterance": "How long is the Fairy Bridge ?",
            "sql": "select bridge.length_meters where bridge.name = value"
        },
        {
            "utterance": "Can you find the bridge name Xian Ren Qiao ?",
            "sql": "select bridge.* where bridge.name = value"
        },
        {
            "utterance": "Do you know who the architect is for that bridge ?",
            "sql": "select * where bridge.name = value"
        },
        {
            "utterance": "What other bridges did Wright architect ?",
            "sql": "select * where architect.name = value and bridge.name != value"
        },
        {
            "utterance": "Do you know the mills built by architects who also built a bridge longer than 80 meters ?",
            "sql": "select * where bridge.length_meters > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the ids and names of the architects who built at least 3 bridges ?",
        "sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "How many bridges was built by Frank Lloyd Wright ?",
            "sql": "select count ( * ) where architect.name = value"
        },
        {
            "utterance": "How many bridges was built by Frank Gehry ?",
            "sql": "select count ( * ) where architect.name = value"
        },
        {
            "utterance": "Who was the builder of Xian Ren Qiao ( Fairy Bridge ) ?",
            "sql": "select architect.name where bridge.name = value"
        },
        {
            "utterance": "What is the name of id 2 ?",
            "sql": "select architect.name where architect.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the id, name and nationality of the architect who built most mills?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me the name of the architect who built the most mills ?",
            "sql": "select architect.name group_by architect.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Awesome ! Can you update this list to also include the architect ID and nationality of this individual ?",
            "sql": "select architect.id , architect.name , architect.nationality group_by architect.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Thank you ! Can you please show me a list of all of the mill names that were built by Frank Lloyd Wright ?",
            "sql": "select mill.name where architect.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the distinct types of mills that are built by American or Canadian architects?",
        "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'"
    },
    "interaction": [
        {
            "utterance": "How many mills are built by American architects ?",
            "sql": "select count ( * ) where architect.nationality = value"
        },
        {
            "utterance": "Hmm , I also want to know how many mills are built by Canadian architects .",
            "sql": "select count ( * ) where architect.nationality = value"
        },
        {
            "utterance": "What are the distinct type of mills that are built by American or Canadian architects ?",
            "sql": "select distinct mill.type where architect.nationality = value or architect.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the tourist attractions that can be accessed by bus or walk ?",
            "sql": "select tourist_attractions.name where tourist_attractions.how_to_get_there = value or tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "What are their opening hours , please ?",
            "sql": "select tourist_attractions.name , tourist_attractions.opening_hours where tourist_attractions.how_to_get_there = value or tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "What are the names of the tourist attractions that can be accessed by shuttle ?",
            "sql": "select tourist_attractions.name where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "What are their opening hours ?",
            "sql": "select tourist_attractions.name , tourist_attractions.opening_hours where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "What are the location ids of those ?",
            "sql": "select tourist_attractions.name , tourist_attractions.location_id where tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""
    },
    "interaction": [
        {
            "utterance": "What is the name of photo ID 280",
            "sql": "select photos.name where photos.photo_id = value"
        },
        {
            "utterance": "What is the description of game2 ?",
            "sql": "select photos.description where photos.name = value"
        },
        {
            "utterance": "What is the tourist attraction id of game2",
            "sql": "select photos.tourist_attraction_id where photos.name = value"
        },
        {
            "utterance": "What is game2 tourist attraction name ?",
            "sql": "select tourist_attractions.name where photos.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the details of the shops that can be accessed by walk?",
        "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "how many shops are there ?",
            "sql": "select count ( shops.* )"
        },
        {
            "utterance": "what kinds of shops are they ?",
            "sql": "select shops.shop_details"
        },
        {
            "utterance": "Can any one of them be accessed by bus ?",
            "sql": "select shops.shop_id where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "how about by walk ?",
            "sql": "select shops.shop_id where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "What kind of shop is that ?",
            "sql": "select shops.shop_details where tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 3,
    "final": {
        "utterance": "How many tourists did not make any visit?",
        "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
    },
    "interaction": [
        {
            "utterance": "How many tourists were there total ?",
            "sql": "select count ( visitors.* )"
        },
        {
            "utterance": "How many tourist attractions ?",
            "sql": "select count ( distinct visits.tourist_attraction_id )"
        },
        {
            "utterance": "How many tourists visited more than one tourist attraction ?",
            "sql": "select count ( * ) ( select * group_by visits.tourist_id having count ( * ) > value )"
        },
        {
            "utterance": "How many tourists did n't visit any tourist attractions ?",
            "sql": "select count ( visitors.* ) where visitors.tourist_id not in ( select visits.tourist_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all the tourist attractions ?",
            "sql": "select tourist_attractions.name"
        },
        {
            "utterance": "Hmm , I want to know the names of the tourist attractions that can be reached by bus .",
            "sql": "select tourist_attractions.name where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Can you also tell me the name of the tourist attraction that is at address 254 Ottilie Junction ?",
            "sql": "select tourist_attractions.name where locations.address = value"
        },
        {
            "utterance": "Can you list the location names of the tourist attractions that can be reached by bus ?",
            "sql": "select locations.location_name where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Can you list the location addresses ?",
            "sql": "select locations.address where tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""
    },
    "interaction": [
        {
            "utterance": "What are the tourist attractions available ? | Did you mean to show you all the attractions ? | Yes , what are their names ?",
            "sql": "select distinct ( tourist_attractions.name )"
        },
        {
            "utterance": "Which attractions did Vincent go to ?",
            "sql": "select * where visitors.tourist_details = value"
        },
        {
            "utterance": "Which attractions did Vivian visit ?",
            "sql": "select * where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 6,
    "final": {
        "utterance": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the tourist attractions ' names ?",
            "sql": "select distinct tourist_attractions.name"
        },
        {
            "utterance": "Can you show me the ids for all these attractions ? | Do you mean Tourist Attraction IDs ? | yes",
            "sql": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id"
        },
        {
            "utterance": "In addition , can you also show me the corresponding number of visits in the same list ?",
            "sql": "select tourist_attractions.name , visits.tourist_attraction_id , count ( * ) group_by visits.tourist_attraction_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
    },
    "interaction": [
        {
            "utterance": "What are the visit date of the visitor whose detail is `` Vincent '' ?",
            "sql": "select visits.visit_date where visitors.tourist_details = value"
        },
        {
            "utterance": "What is his tourist ID ?",
            "sql": "select visitors.tourist_id where visitors.tourist_details = value"
        },
        {
            "utterance": "What is his visit details ?",
            "sql": "select visits.visit_details where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
    },
    "interaction": [
        {
            "utterance": "Which places did Alison visit",
            "sql": "select tourist_attractions.name where visitors.tourist_details = value"
        },
        {
            "utterance": "And which of those did Rosalind not visit",
            "sql": "select tourist_attractions.name where visitors.tourist_details = value except select tourist_attractions.name where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names and ids of tourist attractions that are visited at least two times.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all the names and ids for all tourist attractions ?",
            "sql": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id"
        },
        {
            "utterance": "Great ! Can you filter this list to show only the names and ids for tourist attractions that were visited 2 or more times ?",
            "sql": "select tourist_attractions.name , visits.tourist_attraction_id group_by visits.tourist_attraction_id having count ( * ) > = value"
        },
        {
            "utterance": "Great ! Can you update this list to show how many times each tourist attraction was visited ?",
            "sql": "select tourist_attractions.name , count ( * ) group_by visits.tourist_attraction_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""
    },
    "interaction": [
        {
            "utterance": "Hello , can you tell me the tourist attraction id for the photo name `` game1 '' ?",
            "sql": "select tourist_attractions.tourist_attraction_id where photos.name = value"
        },
        {
            "utterance": "Can you tell me the name for this attraction as well ?",
            "sql": "select tourist_attractions.name where photos.name = value"
        },
        {
            "utterance": "How about how to get there ?",
            "sql": "select tourist_attractions.how_to_get_there where photos.name = value"
        },
        {
            "utterance": "I need the opening hours as well please .",
            "sql": "select tourist_attractions.opening_hours where photos.name = value"
        },
        {
            "utterance": "What about the other details ?",
            "sql": "select tourist_attractions.other_details where photos.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the names and ids of tourist attractions that are visited at most once.",
        "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the tourist attractions that have only been visited once ?",
            "sql": "select tourist_attractions.name group_by visits.tourist_attraction_id having count ( * ) = value"
        },
        {
            "utterance": "What are the ids of those ?",
            "sql": "select tourist_attractions.tourist_attraction_id group_by visits.tourist_attraction_id having count ( * ) = value"
        },
        {
            "utterance": "What are the opening hours of those attractions ?",
            "sql": "select tourist_attractions.opening_hours group_by visits.tourist_attraction_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 12,
    "final": {
        "utterance": "How many tourists did not make any visit?",
        "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
    },
    "interaction": [
        {
            "utterance": "What is the number of tourists who did n't make any visit ?",
            "sql": "select count ( visitors.* ) where visitors.tourist_id not in ( select visits.tourist_id )"
        },
        {
            "utterance": "What are their details ?",
            "sql": "select visitors.tourist_details where visitors.tourist_id not in ( select visits.tourist_id )"
        },
        {
            "utterance": "What are the details of the tourist who had the earliest visit ?",
            "sql": "select visitors.tourist_details order_by visits.visit_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""
    },
    "interaction": [
        {
            "utterance": "Hi , what are some tourist attractions that tourist visit ? | do you want the name of the tourist attractions that tourist visit ? | Yes please .",
            "sql": "select tourist_attractions.name"
        },
        {
            "utterance": "When did they visit parking ?",
            "sql": "select visits.visit_date where visitors.tourist_details = value union select visits.visit_date where visitors.tourist_details = value"
        },
        {
            "utterance": "How did they get to parking ?",
            "sql": "select tourist_attractions.name , visits.visit_date , tourist_attractions.how_to_get_there where visitors.tourist_details = value union select tourist_attractions.name , visits.visit_date , tourist_attractions.how_to_get_there where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the description and code of the attraction type most tourist attractions belong to.",
        "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What attraction type do most tourist attractions belong to ? | Did you want to know the attraction type that most tourist attractions belong to ? code or description ? | Yes , can you give me the codes please ?",
            "sql": "select tourist_attractions.attraction_type_code group_by tourist_attractions.attraction_type_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is its description ? | Did you also want to konw the description the attraction type most tourist attractions belong to ? | yes",
            "sql": "select ref_attraction_types.attraction_type_description group_by tourist_attractions.attraction_type_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "List the names of the attractions which belong to gallery type | Did you mean all the names ? | yes",
            "sql": "select tourist_attractions.name where ref_attraction_types.attraction_type_description = value"
        },
        {
            "utterance": "How many gallery type attractions are there ? | Can you give more info about this ? | How many attractions belong to gallery type ?",
            "sql": "select count ( * ) where ref_attraction_types.attraction_type_description = value"
        },
        {
            "utterance": "What are the opening hours of the haunted mansion ?",
            "sql": "select tourist_attractions.opening_hours where tourist_attractions.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the star rating descriptions of the hotels with price above 10000?",
        "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000"
    },
    "interaction": [
        {
            "utterance": "How many hotels have a price of over 10000 ?",
            "sql": "select count ( hotels.* ) where hotels.price_range > value"
        },
        {
            "utterance": "What are the maximum number of stars a hotel with price above 10000 can get ?",
            "sql": "select max ( hotels.star_rating_code ) where hotels.price_range > value"
        },
        {
            "utterance": "What are the star rating descriptions of these hotels ? | You mean the hotels with price above 10000 ? | Yes . The ones we 've been talking about .",
            "sql": "select ref_hotel_star_ratings.star_rating_description where hotels.price_range > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the transportation method most people choose to get to tourist attractions.",
        "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the location ID of the Tourist Attraction ID 2113 ?",
            "sql": "select tourist_attractions.location_id where tourist_attractions.tourist_attraction_id = value"
        },
        {
            "utterance": "Show the transportation method least people choose to get to tourist attractions .",
            "sql": "select tourist_attractions.how_to_get_there group_by tourist_attractions.how_to_get_there order_by count ( tourist_attractions.* ) limit_value"
        },
        {
            "utterance": "Show the transportation method most people choose to get to tourist attractions ?",
            "sql": "select tourist_attractions.how_to_get_there group_by tourist_attractions.how_to_get_there order_by count ( tourist_attractions.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the transportation method most people choose to get to tourist attractions.",
        "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of where i can go on bus ? | do you want the id of location or tourist attraction or the name ? | yes",
            "sql": "select tourist_attractions.tourist_attraction_id , tourist_attractions.location_id , tourist_attractions.name where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "can you show me a list of location id ?",
            "sql": "select tourist_attractions.location_id"
        },
        {
            "utterance": "i want to learn attraction type code ?",
            "sql": "select tourist_attractions.location_id , tourist_attractions.attraction_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
    },
    "interaction": [
        {
            "utterance": "Thanks . What is the visit details of the visitor whose detail is Vincent ?",
            "sql": "select visits.visit_details where visitors.tourist_details = value"
        },
        {
            "utterance": "What about the visit dates ?",
            "sql": "select visits.visit_date where visitors.tourist_details = value"
        },
        {
            "utterance": "Can you show me dates of all visits before the year 2013 only ?",
            "sql": "select visits.visit_date where visits.visit_date < value"
        },
        {
            "utterance": "What are the visit date and details of the visitor whose detail is Toney ?",
            "sql": "select visits.visit_date , visits.visit_details where visitors.tourist_details = value"
        },
        {
            "utterance": "What about for Graciela ?",
            "sql": "select visits.visit_date , visits.visit_details where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of the tourist attractions that are walking distance ? | do you want to just return their names\uff1f | Ah yes ! For now could you please return both the tourist attraction id and the name ?",
            "sql": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Thank you could you also add to this list any tourist attractions located at 660 Shea Crescent ?",
            "sql": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id where locations.address = value or tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Thank you very much ! Could you add the Opening Hours to that list for each of the tourist attractions ?",
            "sql": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id , tourist_attractions.opening_hours where locations.address = value or tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show me the name of instructors ? | Here is the table of first and last names of faculties . | How many instructors are teaching top 3 number of courses ?",
            "sql": "select count ( * ) ( select * group_by course.instructor order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "Show the first and last names of them",
            "sql": "select faculty.fname , faculty.lname group_by course.instructor order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the max and min grade point for all letter grade.",
        "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"
    },
    "interaction": [
        {
            "utterance": "List grade points by letter grade ?",
            "sql": "select gradeconversion.gradepoint , gradeconversion.lettergrade"
        },
        {
            "utterance": "List max of each grade for all letter grades ?",
            "sql": "select max ( gradeconversion.gradepoint )"
        },
        {
            "utterance": "The max for each letter grade ?",
            "sql": "select gradeconversion.lettergrade , max ( gradeconversion.gradepoint ) group_by gradeconversion.lettergrade"
        },
        {
            "utterance": "List the min grade point for each letter grade ?",
            "sql": "select min ( gradeconversion.gradepoint ) , gradeconversion.lettergrade group_by gradeconversion.lettergrade"
        },
        {
            "utterance": "Find the min grade point for all letter grade ?",
            "sql": "select min ( gradeconversion.gradepoint )"
        },
        {
            "utterance": "Find the max and min grade point for all letter grade ?",
            "sql": "select max ( gradeconversion.gradepoint ) , min ( gradeconversion.gradepoint )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the name of courses that have at least five enrollments?",
        "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "What is the grade of CID 550.681 ? | Did you mean the grades of students who enrolled in the course with CID 550.681 ? | YES",
            "sql": "select enrolled_in.grade where enrolled_in.cid = value"
        },
        {
            "utterance": "How many hours computer literacy course in a week ?",
            "sql": "select course.hours where course.cname = value"
        },
        {
            "utterance": "In which day of a week the course introduction to computer science is taught ?",
            "sql": "select course.days where course.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of the department that has no students minored in?",
        "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO"
    },
    "interaction": [
        {
            "utterance": "which dno has no stuid associated with it ?",
            "sql": "select department.dno where department.dno not in ( select minor_in.dno )"
        },
        {
            "utterance": "what are the dname 's of those DNO 's ?",
            "sql": "select department.dname where department.dno not in ( select minor_in.dno )"
        },
        {
            "utterance": "sort the department names alphabetically",
            "sql": "select department.dname where department.dno not in ( select minor_in.dno ) order_by department.dname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the last names of faculties in building Barton in alphabetic order.",
        "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname"
    },
    "interaction": [
        {
            "utterance": "How many faculty members are in building Barton ?",
            "sql": "select count ( faculty.* ) where faculty.building = value"
        },
        {
            "utterance": "Please list the faculty members in building Barton .",
            "sql": "select faculty.* where faculty.building = value"
        },
        {
            "utterance": "Can you please get just their last names ?",
            "sql": "select faculty.lname where faculty.building = value"
        },
        {
            "utterance": "Of the faculty members in building Barton , how many are in each rank ?",
            "sql": "select faculty.rank , count ( faculty.* ) where faculty.building = value group_by faculty.rank"
        },
        {
            "utterance": "Can you please list the last names of the faculty in Barton one more time , in alphabetical order ?",
            "sql": "select faculty.lname where faculty.building = value order_by faculty.lname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 5,
    "final": {
        "utterance": "Which building does the instructor who teaches the most number of courses live in?",
        "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "* I have left the chat *",
            "sql": "select faculty.room where faculty.rank = value"
        },
        {
            "utterance": "what is the first name of the instructor who teaches the least number of courses ?",
            "sql": "select faculty.fname group_by course.instructor order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the max and min grade point for all letter grade.",
        "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"
    },
    "interaction": [
        {
            "utterance": "What is the highest grade point ?",
            "sql": "select max ( gradeconversion.gradepoint )"
        },
        {
            "utterance": "What is the highest grade point for each letter grade ?",
            "sql": "select gradeconversion.lettergrade , max ( gradeconversion.gradepoint ) group_by gradeconversion.lettergrade"
        },
        {
            "utterance": "Can you show both the highest and lowest grade point for each letter grade ?",
            "sql": "select gradeconversion.lettergrade , max ( gradeconversion.gradepoint ) , min ( gradeconversion.gradepoint ) group_by gradeconversion.lettergrade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the rooms of faculties with rank professor who live in building NEB.",
        "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "Room and phone no . of id 1121 ?",
            "sql": "select faculty.room , faculty.phone where faculty.facid = value"
        },
        {
            "utterance": "Provide the rooms of faculties with rank professor who live in building NEB ?",
            "sql": "select faculty.room where faculty.rank = value and faculty.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140"
    },
    "interaction": [
        {
            "utterance": "What are the first names of the students that minor in the department with DNO 140 ?",
            "sql": "select student.fname where minor_in.dno = value"
        },
        {
            "utterance": "What are the last names of the students that minor in the department with DNO 140 ?",
            "sql": "select student.lname where minor_in.dno = value"
        },
        {
            "utterance": "What are the ages of the students with the last name Lee ?",
            "sql": "select student.age where student.lname = value"
        },
        {
            "utterance": "What are the student ids of the students with the last name Smith ?",
            "sql": "select student.stuid where student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the last names of faculties who are members of computer science department.",
        "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\""
    },
    "interaction": [
        {
            "utterance": "what is the last names of faculties who are members of computer science department ?",
            "sql": "select faculty.lname where department.dname = value"
        },
        {
            "utterance": "what is the rank for Goodrich | Goodrich is the last name , right ? | yes",
            "sql": "select faculty.rank where faculty.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the first names of students whose first names contain letter \"a\".",
        "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select student.lname , student.fname"
        },
        {
            "utterance": "Can I see a list of students who 's first name contains letter `` a '' ?",
            "sql": "select distinct student.fname where student.fname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the first names of faculties of rank Professor in alphabetic order.",
        "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname"
    },
    "interaction": [
        {
            "utterance": "what is the rank of Mark | Do you mean the rank of the faculty whose fname is Mark ? | exactly",
            "sql": "select faculty.rank where faculty.fname = value"
        },
        {
            "utterance": "how many faculty are presented on the table",
            "sql": "select count ( faculty.* )"
        },
        {
            "utterance": "what are all the ranks on the table",
            "sql": "select distinct faculty.rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the name of courses that have at least five enrollments?",
        "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the course ids and enrollments ?",
            "sql": "select course.cid , count ( * ) group_by enrolled_in.cid"
        },
        {
            "utterance": "Which courses have at least five enrollments ?",
            "sql": "select * group_by enrolled_in.cid having count ( * ) > = value"
        },
        {
            "utterance": "Can you show me their ids ?",
            "sql": "select course.cid group_by enrolled_in.cid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the full names of faculties who are members of department with department number 520.",
        "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the full names of all faculty who are members of department number 520 ?",
            "sql": "select faculty.fname , faculty.lname where member_of.dno = value"
        },
        {
            "utterance": "What about for department number 600 ?",
            "sql": "select faculty.fname , faculty.lname where member_of.dno = value"
        },
        {
            "utterance": "What is the sex of each of those faculty who are members of the department with department number 600 .",
            "sql": "select faculty.sex where member_of.dno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 14,
    "final": {
        "utterance": "Which building does the instructor who teaches the most number of courses live in?",
        "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , can you tell me how many instructors there are ?",
            "sql": "select count ( distinct course.instructor )"
        },
        {
            "utterance": "Can you tell me which instructor teaches the most number of courses ?",
            "sql": "select course.instructor group_by course.instructor order_by count ( course.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8"
    },
    "interaction": [
        {
            "utterance": "which student had highest grade | Here are the first and last names of the student who had the highest grade . | which letter grade has the lowest grade point ?",
            "sql": "select distinct gradeconversion.lettergrade order_by gradeconversion.gradepoint limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the first names of students whose first names contain letter \"a\".",
        "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "What are the first names of these students ?",
            "sql": "select student.fname"
        },
        {
            "utterance": "Out of these names , which names contain the letter a ?",
            "sql": "select student.fname where student.fname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the maximum and minimum grade point of students who live in NYC?",
        "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\""
    },
    "interaction": [
        {
            "utterance": "What is the maximum grade point of all students who live in NYC ?",
            "sql": "select max ( gradeconversion.gradepoint ) where student.city_code = value"
        },
        {
            "utterance": "What is the minimum grade point of all students who live in NYC ?",
            "sql": "select min ( gradeconversion.gradepoint ) where student.city_code = value"
        },
        {
            "utterance": "What about for students who live in HKG ?",
            "sql": "select min ( gradeconversion.gradepoint ) where student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "Can you please list the full names of all male faculty members and the buildings they live in ?",
            "sql": "select faculty.fname , faculty.lname , faculty.building where faculty.sex = value"
        },
        {
            "utterance": "Could you narrow that down to just male faculty members in the NEB building ?",
            "sql": "select faculty.fname , faculty.lname where faculty.sex = value and faculty.building = value"
        },
        {
            "utterance": "What rooms do they live in ? Please add it to the table .",
            "sql": "select faculty.fname , faculty.lname , faculty.room where faculty.sex = value and faculty.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the last name of female (sex is F) students in the descending order of age.",
        "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC"
    },
    "interaction": [
        {
            "utterance": "Tell me the last name , age and first name for the student id 1003 and 1004 ...",
            "sql": "select student.lname , student.age , student.fname where student.stuid = value or student.stuid = value"
        },
        {
            "utterance": "Tell me the sex of 1005 and 1004 and their city code ..",
            "sql": "select student.sex , student.city_code where student.stuid = value or student.stuid = value"
        },
        {
            "utterance": "Tell me total number of Male students and total number of female students ... ..",
            "sql": "select student.sex , count ( student.* ) group_by student.sex"
        },
        {
            "utterance": "Find the last name of female ( Sex as F ) students in the descending order of age .",
            "sql": "select student.lname where student.sex = value order_by student.age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the first name of students not enrolled in any course.",
        "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
    },
    "interaction": [
        {
            "utterance": "how many students have not enrolled in any courses",
            "sql": "select count ( student.* ) where student.stuid not in ( select enrolled_in.stuid )"
        },
        {
            "utterance": "please check the table once more for the name of students not enrolled in any course | Do you need those students ' Fname or Lname ? | i need the students first name",
            "sql": "select student.fname where student.stuid not in ( select enrolled_in.stuid )"
        },
        {
            "utterance": "list the first name and last name of students with grade A",
            "sql": "select student.fname , student.lname where enrolled_in.grade = value"
        },
        {
            "utterance": "WHAT IS THE ID OF THESE STUDENTS",
            "sql": "select enrolled_in.stuid where enrolled_in.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "How many male faculties live in NEB ?",
            "sql": "select count ( faculty.* ) where faculty.sex = value and faculty.building = value"
        },
        {
            "utterance": "What is the rank of Mark Giuliano ?",
            "sql": "select faculty.rank where faculty.fname = value and faculty.lname = value"
        },
        {
            "utterance": "How many of the faculties are the rank of professors ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the first name of students not enrolled in any course.",
        "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
    },
    "interaction": [
        {
            "utterance": "How many students are not enrolled in the course ?",
            "sql": "select count ( student.* ) where student.stuid not in ( select enrolled_in.stuid )"
        },
        {
            "utterance": "What are names of all the students enrolled in the course ? | Do you mean the first name and last name of all the students enrolled in the course ? | Just the first names",
            "sql": "select student.fname where student.stuid in ( select enrolled_in.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\""
    },
    "interaction": [
        {
            "utterance": "What department is the Introduction to Computer Science course in ?",
            "sql": "select department.dname , department.room where course.cname = value"
        },
        {
            "utterance": "Ok , the class will be in Room 224 . Do you know who the instructor will be ?",
            "sql": "select course.instructor where course.cname = value"
        },
        {
            "utterance": "What day is class ?",
            "sql": "select course.days where course.cname = value"
        },
        {
            "utterance": "How long is the class ?",
            "sql": "select course.hours where course.cname = value"
        },
        {
            "utterance": "Oh ok , how many credit hours is this course worth ?",
            "sql": "select course.credits where course.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "What is the building name of division AS ? | Do you mean DName ? | Nope building name",
            "sql": "select department.building where department.division = value"
        },
        {
            "utterance": "What is the room number of Chemistry ?",
            "sql": "select department.room where department.dname = value"
        },
        {
            "utterance": "What is the DPhone of Biology ?",
            "sql": "select department.dphone where department.dname = value"
        },
        {
            "utterance": "What is the room number of Biology ?",
            "sql": "select department.room where department.dname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the name of the department that has the fewest members.",
        "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many departments are there ?",
            "sql": "select count ( department.* )"
        },
        {
            "utterance": "Which department is the smallest ? | Do you mean the department that has the fewest members ? | Yes , which department has the fewest members ?",
            "sql": "select department.dname group_by member_of.dno order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How many members does it have ?",
            "sql": "select count ( * ) group_by member_of.dno order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Report all majors that have less than 3 students.",
        "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "how many Student there",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "what is the city code of student id 1001",
            "sql": "select student.city_code where student.stuid = value"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select student.age where student.stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "Find the number of students whose city code is NYC , please ?",
            "sql": "select count ( * ) where student.city_code = value"
        },
        {
            "utterance": "What is the number of students who have class senator votes in the spring election cycle ?",
            "sql": "select count ( * ) where voting_record.election_cycle = value"
        },
        {
            "utterance": "What are the first names and last names of those students ?",
            "sql": "select distinct student.fname , student.lname where voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
    },
    "interaction": [
        {
            "utterance": "What is the first and last name of all students 18 years old who have vice president votes ?",
            "sql": "select distinct student.fname , student.lname where student.age = value"
        },
        {
            "utterance": "Ok , what is the first and last name of the student who has president votes ?",
            "sql": "select distinct student.fname , student.lname"
        },
        {
            "utterance": "Ok , and of the students who had President votes how many were males ?",
            "sql": "select distinct count ( * ) where student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the most common major among female (sex is F) students?",
        "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all students .",
            "sql": "select avg ( student.age )"
        },
        {
            "utterance": "Which student is older than the average age . | Do you want their id or last name or first name ? | The first name for the student older than the average age .",
            "sql": "select student.fname where student.age > ( select avg ( student.age ) )"
        },
        {
            "utterance": "Give me the count for the students older than the average age .",
            "sql": "select count ( student.fname ) where student.age > ( select avg ( student.age ) )"
        },
        {
            "utterance": "Give me the count for the students younger than the average age .",
            "sql": "select count ( student.fname ) where student.age < ( select avg ( student.age ) )"
        },
        {
            "utterance": "Give me the count for all students",
            "sql": "select count ( student.fname )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""
    },
    "interaction": [
        {
            "utterance": "Find the distinct last names of all the students who have president votes and whose advisor is 8741",
            "sql": "select distinct student.lname intersect select distinct student.lname where student.advisor = value"
        },
        {
            "utterance": "Give me the name for the student 1001 | Do you want the last name or first name ? | first name and the last name please",
            "sql": "select student.lname , student.fname where student.stuid = value"
        },
        {
            "utterance": "can you give me the students with president vote 1004 | What attributes of that student do you want ? | first and last names please",
            "sql": "select student.lname , student.fname where voting_record.president_vote = value"
        },
        {
            "utterance": "Can you give me the first and last names for students with Vice President vote 1017",
            "sql": "select student.lname , student.fname where voting_record.vice_president_vote = value"
        },
        {
            "utterance": "Give me the age for Linda Smith",
            "sql": "select student.age where student.lname = value and student.fname = value"
        },
        {
            "utterance": "Give me the names of all the students",
            "sql": "select student.lname , student.fname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Which major has the most students?",
        "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which major has the most students ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "How many students are in that major ?",
            "sql": "select count ( student.* ) group_by student.major order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "What are their names , please ?",
            "sql": "select student.lname , student.fname where student.major in ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        },
        {
            "utterance": "Who is the advisor for that major ?",
            "sql": "select student.advisor where student.major = ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        },
        {
            "utterance": "Who is the advisor for the major with the second most number of students ?",
            "sql": "select student.advisor where student.major in ( select student.major group_by student.major order_by count ( student.* ) desc limit_value ) and student.major != ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "How many students are voting in the spring election cycle ?",
            "sql": "select count ( * ) where voting_record.election_cycle = value"
        },
        {
            "utterance": "How many are females that are voting in the election cycle ? | Did you want the number of females that are voting in the spring election cycle ? | Yes",
            "sql": "select count ( * ) where student.sex = value and voting_record.election_cycle = value"
        },
        {
            "utterance": "What are the ages of everyone voting in the Spring election cycle ?",
            "sql": "select student.age where voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "how many females have president votes ?",
            "sql": "select count ( * ) where student.sex = value"
        },
        {
            "utterance": "what are there first and last names ?",
            "sql": "select distinct student.fname , student.lname where student.sex = value"
        },
        {
            "utterance": "how many votes did she get ? | Do you mean the total votes in four election or list them separately ? | the total votes",
            "sql": "select sum ( voting_record.president_vote ) where student.sex = value"
        },
        {
            "utterance": "how many of those votes were from the secretary ?",
            "sql": "select sum ( voting_record.secretary_vote ) where student.sex = value"
        },
        {
            "utterance": "how many were from the vice president ?",
            "sql": "select sum ( voting_record.vice_president_vote ) where student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the city_code of the city that the most students live in?",
        "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "mention the city code of the city that the most students live .",
            "sql": "select student.city_code group_by student.city_code order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "Show the name of students",
            "sql": "select student.lname , student.fname"
        },
        {
            "utterance": "How many of them live in city with code NYC and have secretary votes in the spring election cycle",
            "sql": "select count ( distinct student.stuid ) where student.city_code = value and voting_record.election_cycle = value"
        },
        {
            "utterance": "Show the name of this student",
            "sql": "select student.lname , student.fname where student.city_code = value and voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Which major has the most students?",
        "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Number of students in each major ?",
            "sql": "select student.major , count ( student.* ) group_by student.major"
        },
        {
            "utterance": "List of majors ?",
            "sql": "select distinct ( student.major )"
        },
        {
            "utterance": "Names of students in each major ? | LName or FName ? | LName .",
            "sql": "select student.major , student.lname"
        },
        {
            "utterance": "What about FName ?",
            "sql": "select student.major , student.fname"
        },
        {
            "utterance": "Which major has the most number of students ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "Which major has the least ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the maximum and minimum age of students with major 600?",
        "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"
    },
    "interaction": [
        {
            "utterance": "How many students have a major of 600 ?",
            "sql": "select count ( student.* ) where student.major = value"
        },
        {
            "utterance": "What is the age of the oldest of those students ?",
            "sql": "select max ( student.age ) where student.major = value"
        },
        {
            "utterance": "What about the youngest ?",
            "sql": "select min ( student.age ) where student.major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the city_code of the city that the most students live in?",
        "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the city code of the city that the most students live in ?",
            "sql": "select student.city_code group_by student.city_code order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "What is the city code of the city that the least students live in ?",
            "sql": "select student.city_code group_by student.city_code order_by count ( student.* ) limit_value"
        },
        {
            "utterance": "What is the average age of all the students ?",
            "sql": "select avg ( student.age )"
        },
        {
            "utterance": "What are the majors of all the students with sex F ?",
            "sql": "select student.major where student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all body builder names and their associated birth dates ?",
            "sql": "select people.name , people.birth_date"
        },
        {
            "utterance": "Could you filter this list to show only the rows which are associated with body builders whose birthday value contains the work `` January '' ?",
            "sql": "select people.name , people.birth_date where people.birth_date like value"
        },
        {
            "utterance": "Great ! Can you tell me where Jack Campbells birthplace was ?",
            "sql": "select people.birth_place where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names and origins of people who are not body builders.",
        "sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id"
    },
    "interaction": [
        {
            "utterance": "How about the rest of people ?",
            "sql": "select people.name , people.birth_date except select people.name , people.birth_date"
        },
        {
            "utterance": "oh , sorry , please show their names and birth places .",
            "sql": "select people.name , people.birth_place except select people.name , people.birth_place"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the most common birth place of people?",
        "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common birth place of people ?",
            "sql": "select people.birth_place group_by people.birth_place order_by count ( people.* ) desc limit_value"
        },
        {
            "utterance": "What is the least common birthplace of people ?",
            "sql": "select people.birth_place group_by people.birth_place order_by count ( people.* ) limit_value"
        },
        {
            "utterance": "What about the most common ?",
            "sql": "select people.birth_place group_by people.birth_place order_by count ( people.* ) desc limit_value"
        },
        {
            "utterance": "What is the birth date of Ty Conklin ?",
            "sql": "select people.birth_place where people.name = value"
        },
        {
            "utterance": "When was he born ?",
            "sql": "select people.birth_date where people.name = value"
        },
        {
            "utterance": "What is his height ?",
            "sql": "select people.height where people.name = value"
        },
        {
            "utterance": "Tell me his weight please .",
            "sql": "select people.weight where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the birth date and birth place of the body builder with the highest total points?",
        "sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which builder has the highest total points ? | Do you want their name or id ? | their name please",
            "sql": "select people.name order_by body_builder.total desc limit_value"
        },
        {
            "utterance": "what is his ID ?",
            "sql": "select people.name , people.people_id order_by body_builder.total desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the heights of body builders with total score smaller than 315?",
        "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315"
    },
    "interaction": [
        {
            "utterance": "Show me the details of the body builders | Which information would you like to know about the body builders ? | Heights of the body builders",
            "sql": "select people.height"
        },
        {
            "utterance": "Show me the scores of the body builders | Which score , Snatch , Clean Jerk , or Total ? | Total score",
            "sql": "select body_builder.total"
        },
        {
            "utterance": "Show me the heights of body builders with total score smaller than 315",
            "sql": "select people.height where body_builder.total < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the birth places that are shared by at least two people?",
        "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the birth places that are shared by at least two people ?",
            "sql": "select people.birth_place group_by people.birth_place having count ( people.* ) > = value"
        },
        {
            "utterance": "what is the name of the person who weighs the most ?",
            "sql": "select people.name order_by people.weight desc limit_value"
        },
        {
            "utterance": "what is the name of the person who weighs the least ?",
            "sql": "select people.name order_by people.weight asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of body builders whose total score is higher than 300?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300"
    },
    "interaction": [
        {
            "utterance": "how many body builder id are there",
            "sql": "select count ( body_builder.* )"
        },
        {
            "utterance": "ok , list out the body builder name",
            "sql": "select people.name"
        },
        {
            "utterance": "ok , name the body builders whose total score is higher than 250",
            "sql": "select people.name where body_builder.total > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the body builder with the greatest body weight?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all body builders",
            "sql": "select people.name"
        },
        {
            "utterance": "Show me the details of weight of the all body builders",
            "sql": "select people.weight"
        },
        {
            "utterance": "Show me the greatest weight of the body builder",
            "sql": "select people.weight order_by people.weight desc limit_value"
        },
        {
            "utterance": "Show me the name of the body builder with the most weight",
            "sql": "select people.name order_by people.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"
    },
    "interaction": [
        {
            "utterance": "what is the weight of ty conklin",
            "sql": "select people.weight where people.name = value"
        },
        {
            "utterance": "what is the height of jack campbell",
            "sql": "select people.height where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 9,
    "final": {
        "utterance": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;"
    },
    "interaction": [
        {
            "utterance": "show me the body builders name .",
            "sql": "select people.name"
        },
        {
            "utterance": "What is the height of Jack Campbell ?",
            "sql": "select people.height where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the minimum, maximum, and average age for all people.",
        "sql": "SELECT min(age) ,  max(age) ,  avg(age) FROM people"
    },
    "interaction": [
        {
            "utterance": "what is the minimum age of all people",
            "sql": "select min ( people.age )"
        },
        {
            "utterance": "what is the maximum age for all people",
            "sql": "select max ( people.age )"
        },
        {
            "utterance": "what is the average age for all people",
            "sql": "select avg ( people.age )"
        },
        {
            "utterance": "now , list the minimum , maximum and average age for all people",
            "sql": "select min ( people.age ) , max ( people.age ) , avg ( people.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the opening year in whcih at least two churches opened.",
        "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what is the Open Date of Pure Church of Christ ? | Did you mean the open date of the church named Pure Church of Christ ? | yes",
            "sql": "select church.open_date where church.name = value"
        },
        {
            "utterance": "who organized the Pure Church of Christ ?",
            "sql": "select church.organized_by where church.name = value"
        },
        {
            "utterance": "what is the ID of the Church of Christ ?",
            "sql": "select church.church_id where church.name = value"
        },
        {
            "utterance": "which church was organized by Ezra Booth ? | Did you want the name of the church organized by Ezra Booth . | yes",
            "sql": "select church.name where church.organized_by = value"
        },
        {
            "utterance": "Show the opening year in which at least two churches opened",
            "sql": "select church.open_date group_by church.open_date having count ( church.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names for all females from Canada having a wedding in year 2016.",
        "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'"
    },
    "interaction": [
        {
            "utterance": "which females had a wedding in 2016 ?",
            "sql": "select people.name where wedding.year = value and people.is_male = value"
        },
        {
            "utterance": "which females in that list are from canada ?",
            "sql": "select people.name where wedding.year = value and people.is_male = value and people.country = value"
        },
        {
            "utterance": "who are the females in canada ?",
            "sql": "select people.name where people.country = value and people.is_male = value"
        },
        {
            "utterance": "who got married in 2016 ?",
            "sql": "select people.name or wedding.male_id = people.people_id where wedding.year = value"
        },
        {
            "utterance": "who in that list is from canada ?",
            "sql": "select people.name or wedding.male_id = people.people_id where wedding.year = value and people.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all church names that have hosted least two weddings.",
        "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all churches please ? | Do you need their names or ids ? | Ah yes ! Can you please provide me with a list containing both ?",
            "sql": "select church.church_id , church.name"
        },
        {
            "utterance": "Thank you for that ! Could you filter that list to show only the church names and ids of churches that have hosted 2 or more weddings ?",
            "sql": "select church.name , church.church_id group_by church.church_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the pair of male and female names in all weddings after year 2014",
        "sql": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014"
    },
    "interaction": [
        {
            "utterance": "Which weddings took place after 2014 ?",
            "sql": "select wedding.* where wedding.year > value"
        },
        {
            "utterance": "What are the male names in weddings after 2014 ?",
            "sql": "select people.name where wedding.year > value"
        },
        {
            "utterance": "What are the female names in weddings after 2014 ?",
            "sql": "select people.name where wedding.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the opening year in whcih at least two churches opened.",
        "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What years did two or more churches open in ?",
            "sql": "select church.open_date group_by church.open_date having count ( church.* ) > = value"
        },
        {
            "utterance": "What is the name of the church that opened the latest ?",
            "sql": "select church.name order_by church.open_date desc limit_value"
        },
        {
            "utterance": "What is that church a continuation of ?",
            "sql": "select church.open_date order_by church.open_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and opening year for three churches that opened most recently.",
        "sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names and opening years of the three churches that opened most recently ?",
            "sql": "select church.name , church.open_date order_by church.open_date desc limit_value"
        },
        {
            "utterance": "What are the names and opening years of the three churches that opened the earliest ?",
            "sql": "select church.name , church.open_date order_by church.open_date asc limit_value"
        },
        {
            "utterance": "Who were those churches organized by ?",
            "sql": "select church.organized_by order_by church.open_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all church names except for those that had a wedding in year 2015.",
        "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015"
    },
    "interaction": [
        {
            "utterance": "How many churches are there ?",
            "sql": "select count ( church.* )"
        },
        {
            "utterance": "How many churches had weddings in 2015 ?",
            "sql": "select count ( * ) where wedding.year = value"
        },
        {
            "utterance": "Show all church names except or those that had a wedding in year 2015 .",
            "sql": "select church.name except select church.name where wedding.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 8,
    "final": {
        "utterance": "How many female people are older than 30 in our record?",
        "sql": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30"
    },
    "interaction": [
        {
            "utterance": "How many women are there ?",
            "sql": "select count ( people.* ) where people.is_male = value"
        },
        {
            "utterance": "And men ?",
            "sql": "select count ( people.* ) where people.is_male = value"
        },
        {
            "utterance": "How many people are there over the age of 30 ?",
            "sql": "select count ( people.* ) where people.age > value"
        },
        {
            "utterance": "How many of them are women ?",
            "sql": "select count ( people.* ) where people.is_male = value and people.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the country where people older than 30 and younger than 25 are from.",
        "sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30"
    },
    "interaction": [
        {
            "utterance": "Show me the country with people younger than 30 ,",
            "sql": "select distinct people.country where people.age < value"
        },
        {
            "utterance": "Show me a list of countries with people over the age of 30 .",
            "sql": "select distinct people.country where people.age > value"
        },
        {
            "utterance": "How many males 30 or older are in the Canada",
            "sql": "select count ( people.* ) where people.age > = value and people.is_male = value and people.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the church names for the weddings of all people older than 30.",
        "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30"
    },
    "interaction": [
        {
            "utterance": "What are all church names ?",
            "sql": "select church.name"
        },
        {
            "utterance": "How about church names for weddings of people older than 30 ?",
            "sql": "select church.name where people.age > value or people.age > value"
        },
        {
            "utterance": "What are their opening years ?",
            "sql": "select church.name , church.open_date where people.age > value or people.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot"
    },
    "interaction": [
        {
            "utterance": "what players have a overall rating greater than 80 ?",
            "sql": "select player_attributes.* where player_attributes.overall_rating > value"
        },
        {
            "utterance": "of those players how many are right-footed ?",
            "sql": "select count ( player_attributes.* ) where player_attributes.overall_rating > value and player_attributes.preferred_foot = value"
        },
        {
            "utterance": "of the players with an overall rating greater than 80 how many are left-footed ?",
            "sql": "select count ( player_attributes.* ) where player_attributes.overall_rating > value and player_attributes.preferred_foot = value"
        },
        {
            "utterance": "of the players with an overall rating greater than 80 how many are right-footed ?",
            "sql": "select count ( player_attributes.* ) where player_attributes.overall_rating > value and player_attributes.preferred_foot = value"
        },
        {
            "utterance": "could add the right-footed and left-footed players that have an overall rating greater than 80 together ?",
            "sql": "select player_attributes.preferred_foot , count ( player_attributes.* ) where player_attributes.overall_rating > value group_by player_attributes.preferred_foot"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please provide me with a list of the player IDs and player names ?",
            "sql": "select player.player_api_id , player.player_name"
        },
        {
            "utterance": "Can you update this list to show both the heights for each player , as well as each of their overall scores ?",
            "sql": "select player.player_api_id , player.player_name , player.height , player_attributes.overall_rating"
        },
        {
            "utterance": "Thank you ! Can you filter this list to show only the players who have an overall rating higher than 85 ?",
            "sql": "select player.player_api_id , player.player_name , player.height , player_attributes.overall_rating where player_attributes.overall_rating > value"
        },
        {
            "utterance": "Excellent ! Finally , could you filter this list to show only the players with a height that is greater than 180 cm ?",
            "sql": "select player.player_api_id where player.height > value intersect select player_attributes.player_api_id where player_attributes.overall_rating > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many left footed players there are ?",
            "sql": "select count ( player_attributes.* ) where player_attributes.preferred_foot = value"
        },
        {
            "utterance": "Holy smokes that 's a lot ! Okay , let 's narrow that down . How many left footed players have a height between 180cm and 190cm ?",
            "sql": "select count ( player.* ) ( select player.player_api_id where player.height > = value and player.height < = value intersect select player_attributes.player_api_id where player_attributes.preferred_foot = value )"
        },
        {
            "utterance": "Thank you ! Can you please list player ids for all of the left-footed players with heights between 180cm and 190cm ?",
            "sql": "select player.player_api_id where player.height > = value and player.height < = value intersect select player_attributes.player_api_id where player_attributes.preferred_foot = value"
        },
        {
            "utterance": "Great ! Can you tell me the name of the player who is the tallest left-footed player ?",
            "sql": "select player.player_name where player_attributes.preferred_foot = value order_by player.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 3,
    "final": {
        "utterance": "List all player names who have an overall rating higher than the average.",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )"
    },
    "interaction": [
        {
            "utterance": "List all player names who have an overall rating higher than the average .",
            "sql": "select distinct player.player_name where player_attributes.overall_rating > ( select avg ( player_attributes.overall_rating ) )"
        },
        {
            "utterance": "List all player names who have an overall rating lower than the average .",
            "sql": "select distinct player.player_name where player_attributes.overall_rating < ( select avg ( player_attributes.overall_rating ) )"
        },
        {
            "utterance": "How many players have an overall rating lower than the average ?",
            "sql": "select count ( distinct player.id ) where player_attributes.overall_rating < ( select avg ( player_attributes.overall_rating ) )"
        },
        {
            "utterance": "What is the average height of players that have an overall rating lower than the average ?",
            "sql": "select avg ( player.height ) where player_attributes.overall_rating < ( select avg ( player_attributes.overall_rating ) )"
        },
        {
            "utterance": "What is the average height of players that have an overall rating higher than the average ?",
            "sql": "select avg ( player.height ) where player_attributes.overall_rating > ( select avg ( player_attributes.overall_rating ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90"
    },
    "interaction": [
        {
            "utterance": "What are the names of people with overall rating between 85 and 90 ? | by people did you mean players ? | yes",
            "sql": "select distinct player.player_name where player_attributes.overall_rating > = value and player_attributes.overall_rating < = value"
        },
        {
            "utterance": "Of them which are left footed ?",
            "sql": "select distinct player.player_name where player_attributes.preferred_foot = value and player_attributes.overall_rating > = value and player_attributes.overall_rating < = value"
        },
        {
            "utterance": "What about the names of right-footed players ?",
            "sql": "select distinct player.player_name where player_attributes.preferred_foot = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List the names and birthdays of the top five players in terms of potential.",
        "sql": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "Which 5 players have the highest potential ? | Do you want the names of those players ? | Yes , please .",
            "sql": "select distinct player.player_name order_by player_attributes.potential desc limit_value"
        },
        {
            "utterance": "What are their birthdays ?",
            "sql": "select distinct player.birthday order_by player_attributes.potential desc limit_value"
        },
        {
            "utterance": "What are their weights ?",
            "sql": "select distinct player.weight order_by player_attributes.potential desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Who are the top 3 players in terms of overall rating?",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Who are the top 3 players in terms of overall rating ?",
            "sql": "select distinct player.player_name order_by player_attributes.overall_rating desc limit_value"
        },
        {
            "utterance": "Which player scored highest in dribbling ?",
            "sql": "select distinct player.player_name order_by player_attributes.dribbling desc limit_value"
        },
        {
            "utterance": "What is Cristiano Ronaldo 's birthday ?",
            "sql": "select player.birthday where player.player_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the product name and total order quantity for each product.",
        "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
    },
    "interaction": [
        {
            "utterance": "Can you show the product name and total order quantity of each product please ?",
            "sql": "select products.product_name , sum ( order_items.order_quantity ) group_by products.product_id"
        },
        {
            "utterance": "Could you add the product type codes to the table please ?",
            "sql": "select products.product_name , sum ( order_items.order_quantity ) , products.product_type_code group_by products.product_id"
        },
        {
            "utterance": "What is the average product price of all the products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "Can you list the product names of all products with prices below the average product price ?",
            "sql": "select products.product_name where products.product_price < ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "The product ids of all products whose prices are above the average product price are listed .",
            "sql": "select products.product_name where products.product_price > ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name of the customer who has the most orders.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many customers are presented on the table",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "show all the customers name",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "what is the customer number of Kayley",
            "sql": "select customers.customer_number where customers.customer_name = value"
        },
        {
            "utterance": "what is the order status code of Sterling",
            "sql": "select customer_orders.order_status_code where customers.customer_name = value"
        },
        {
            "utterance": "show the name of the customer who has the most orders",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 2,
    "final": {
        "utterance": "How many products have a price higher than the average?",
        "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "How many products have a price higher than the average ?",
            "sql": "select count ( products.* ) where products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "Can you give me the product names for these ?",
            "sql": "select products.product_name where products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "And how many products have a price lower than the average ?",
            "sql": "select count ( products.* ) where products.product_price < ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "May I have their product names please ?",
            "sql": "select distinct products.product_name where products.product_price < ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the product type codes which have at least two products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Please list all unique Product Names",
            "sql": "select distinct products.product_name"
        },
        {
            "utterance": "Now please list all unique product type codes",
            "sql": "select distinct products.product_type_code"
        },
        {
            "utterance": "now please show the product type codes which have at least two products",
            "sql": "select products.product_type_code group_by products.product_type_code having count ( products.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please provide me with a list of all of customer IDs in the Customer Address History table ?",
            "sql": "select customer_address_history.customer_id"
        },
        {
            "utterance": "Thank you for that ! Can you update this list to include the associated customer names , customer address city and the date from and date to for each row ?",
            "sql": "select customers.customer_name , addresses.city , customer_address_history.date_from , customer_address_history.date_to"
        },
        {
            "utterance": "Great ! Can you tell me which , if any , customers on this list appear more than once ?",
            "sql": "select customers.customer_name group_by customers.customer_name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show the names of customers who use Credit Card payment method",
            "sql": "select customers.customer_name where customers.payment_method_code = value"
        },
        {
            "utterance": "Which of those customers have more than 2 orders ?",
            "sql": "select customers.customer_name where customers.payment_method_code = value group_by customers.customer_id having count ( * ) > value"
        },
        {
            "utterance": "Show me their customer addresses",
            "sql": "select customers.customer_address where customers.payment_method_code = value group_by customers.customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 6,
    "final": {
        "utterance": "How many products have a price higher than the average?",
        "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "What are the product names that have a price higher than the average ?",
            "sql": "select products.product_name where products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "How many products have a price higher than the average ?",
            "sql": "select count ( products.* ) where products.product_price > ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names and phones of customers who do not have address information.",
        "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)"
    },
    "interaction": [
        {
            "utterance": "Can you list the names of all customers who do n't have any address information , please ?",
            "sql": "select customers.customer_name where customers.customer_id not in ( select customer_address_history.customer_id )"
        },
        {
            "utterance": "Can you find their addresses and add them to the chart ?",
            "sql": "select customers.customer_name , customers.customer_address where customers.customer_id not in ( select customer_address_history.customer_id )"
        },
        {
            "utterance": "Can you list the customer names for all the customers that do n't have anything listed under the customer_address column ?",
            "sql": "select customers.customer_name where customers.customer_id not in ( select customer_address_history.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the name and phone of the customer with the most ordered product quantity?",
        "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What was the product id for the customer that ordered the most product quantity ?",
            "sql": "select customers.customer_id group_by customers.customer_id order_by sum ( order_items.order_quantity ) desc limit_value"
        },
        {
            "utterance": "What are the name and phone of the customer with the most ordered product quantity ?",
            "sql": "select customers.customer_name , customers.customer_phone group_by customers.customer_id order_by sum ( order_items.order_quantity ) desc limit_value"
        },
        {
            "utterance": "What is the address for the customer Cleo ?",
            "sql": "select customers.customer_address where customers.customer_name = value"
        },
        {
            "utterance": "What is the email for Customer name of Cleo with phone number 1-202-928-5395 ?",
            "sql": "select customers.customer_email where customers.customer_name = value and customers.customer_phone = value"
        },
        {
            "utterance": "What is the customer number for customer name Cleo ?",
            "sql": "select customers.customer_number where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of the building that has the most company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which company has the most buildings ? | Do you want to the name of the company ? | Yes and the company ID .",
            "sql": "select companies.name , companies.id where companies.id = ( select office_locations.company_id group_by office_locations.company_id order_by count ( office_locations.* ) desc limit_value )"
        },
        {
            "utterance": "What is the building ID that has the most company offices ?",
            "sql": "select buildings.id group_by office_locations.building_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of building with ID 3 ?",
            "sql": "select buildings.name where buildings.id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the headquarters shared by more than two companies.",
        "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Which company has its headquarter in the US ? | Did you mean to ask for the companies with headquarters in USA ? | yes .",
            "sql": "select companies.name where companies.headquarters = value"
        },
        {
            "utterance": "What is the industry of the company named General Electric ?",
            "sql": "select companies.industry where companies.name = value"
        },
        {
            "utterance": "How much profit did it make ?",
            "sql": "select companies.profits_billion where companies.name = value"
        },
        {
            "utterance": "Which company has the highest amount of assets ?",
            "sql": "select companies.name order_by companies.assets_billion desc limit_value"
        },
        {
            "utterance": "how much is it worth ? | Did you mean to ask for the market value in billions for BNP Paribas ? | yes",
            "sql": "select companies.market_value_billion where companies.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the stories of the building with the largest height.",
        "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which building is the highest ?",
            "sql": "select buildings.name order_by buildings.height desc limit_value"
        },
        {
            "utterance": "How tall is the Torre Reforma ?",
            "sql": "select buildings.stories where buildings.name = value"
        },
        {
            "utterance": "How many stories does the highest building have ?",
            "sql": "select buildings.stories order_by buildings.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
    },
    "interaction": [
        {
            "utterance": "How many companies have an industry of banking ?",
            "sql": "select count ( companies.* ) where companies.industry = value"
        },
        {
            "utterance": "How many do n't have a banking industry ?",
            "sql": "select count ( companies.* ) where companies.industry != value"
        },
        {
            "utterance": "What are the total sales of those companies ?",
            "sql": "select sum ( companies.sales_billion ) where companies.industry != value"
        },
        {
            "utterance": "What is the maximum sales of those companies ?",
            "sql": "select max ( companies.sales_billion ) where companies.industry != value"
        },
        {
            "utterance": "What is the minimum sales ?",
            "sql": "select min ( companies.sales_billion ) where companies.industry != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the stories of the building with the largest height.",
        "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the building with the largest height ?",
            "sql": "select buildings.name order_by buildings.height desc limit_value"
        },
        {
            "utterance": "How many stories does that building have ?",
            "sql": "select buildings.stories order_by buildings.height desc limit_value"
        },
        {
            "utterance": "What is the height of that building ?",
            "sql": "select buildings.height order_by buildings.height desc limit_value"
        },
        {
            "utterance": "What city is that building in ?",
            "sql": "select buildings.city order_by buildings.height desc limit_value"
        },
        {
            "utterance": "How many stories does the building with the smallest height have ?",
            "sql": "select buildings.stories order_by buildings.height limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of the buildings that have more than one company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show the names of the buildings that have more than one company offices .",
            "sql": "select buildings.name group_by office_locations.building_id having count ( * ) > value"
        },
        {
            "utterance": "Can you tell me which companies are located at the Torre KOI building ? | What attributes of these companies do you want to know ? | The names of the companies that are present in that building .",
            "sql": "select companies.name where buildings.name = value"
        },
        {
            "utterance": "What other buildings is JPMorgan Chase also located in ?",
            "sql": "select buildings.name where companies.name = value and buildings.name != value"
        },
        {
            "utterance": "Does Torre Mitkah have an HSBC located in it ?",
            "sql": "select * where companies.name = value and buildings.name = value"
        },
        {
            "utterance": "What is the name of company with the company id 4 ?",
            "sql": "select companies.name where companies.id = value"
        },
        {
            "utterance": "ExxonMobil is located in Punto Chapultepec , correct ?",
            "sql": "select * where companies.name = value and buildings.name = value"
        },
        {
            "utterance": "Which buildings have a General Electric then ?",
            "sql": "select buildings.name where companies.name = value"
        },
        {
            "utterance": "What other companies are located in Corporativo BBVA Bancomer ?",
            "sql": "select companies.name where buildings.name = value and companies.name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name of the building that has the most company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of building IDs",
            "sql": "select count ( buildings.id )"
        },
        {
            "utterance": "add a column for company id",
            "sql": "select count ( * ) , office_locations.company_id , office_locations.building_id group_by office_locations.building_id"
        },
        {
            "utterance": "list the number of unique building ids for each company id",
            "sql": "select office_locations.company_id , count ( distinct office_locations.building_id ) group_by office_locations.company_id"
        },
        {
            "utterance": "add a column for company name",
            "sql": "select office_locations.company_id , companies.name , count ( distinct office_locations.building_id ) group_by office_locations.company_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 7,
    "final": {
        "utterance": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC"
    },
    "interaction": [
        {
            "utterance": "Show the names of the buildings",
            "sql": "select buildings.name"
        },
        {
            "utterance": "Now show the names of building whose status is on-hold",
            "sql": "select buildings.name where buildings.status = value"
        },
        {
            "utterance": "names of buildings whose status is on-hold in ascending order | In what ascending order ? | In ascending order of stories",
            "sql": "select buildings.name where buildings.status = value order_by buildings.stories asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
    },
    "interaction": [
        {
            "utterance": "what is the highest profits of companies",
            "sql": "select max ( companies.profits_billion )"
        },
        {
            "utterance": "what is the market value of JPMorgan Chase",
            "sql": "select companies.market_value_billion where companies.name = value"
        },
        {
            "utterance": "what is name of headquarters on General Electric",
            "sql": "select companies.headquarters where companies.name = value"
        },
        {
            "utterance": "which company is highest assets value",
            "sql": "select companies.name order_by companies.assets_billion desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the party that has the most people.",
        "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of people names ?",
            "sql": "select people.name"
        },
        {
            "utterance": "can you show me the oldest one ?",
            "sql": "select people.name order_by people.age desc limit_value"
        },
        {
            "utterance": "can you show me average of ages ?",
            "sql": "select avg ( people.age )"
        },
        {
            "utterance": "Show the party that has the most people",
            "sql": "select people.party group_by people.party order_by count ( people.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the people who have been on the affirmative side of debates ?",
            "sql": "select people.name group_by people.name"
        },
        {
            "utterance": "What are their party affiliations ?",
            "sql": "select people.party group_by people.name"
        },
        {
            "utterance": "How many debates did they win total ?",
            "sql": "select count ( debate_people.* ) where debate_people.if_affirmative_win = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200"
    },
    "interaction": [
        {
            "utterance": "Can you show me the names of the people who were on the affirmative side of debates with an audience bigger than 200 ?",
            "sql": "select people.name where debate.num_of_audience > value"
        },
        {
            "utterance": "Of those three , who is the oldest ?",
            "sql": "select people.name where debate.num_of_audience > value order_by people.age desc limit_value"
        },
        {
            "utterance": "What party affiliation does James Humphrey hold ?",
            "sql": "select people.party where people.name = value"
        },
        {
            "utterance": "What district does James Humphrey represent ?",
            "sql": "select people.district where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID"
    },
    "interaction": [
        {
            "utterance": "can you list the names of all people ?",
            "sql": "select people.name"
        },
        {
            "utterance": "list the dates of debates",
            "sql": "select debate.date"
        },
        {
            "utterance": "list all the venues of the the debates",
            "sql": "select debate.venue"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 4,
    "final": {
        "utterance": "List the names of people that have not been on the affirmative side of debates.",
        "sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)"
    },
    "interaction": [
        {
            "utterance": "Could you please tell me the names of the people that have not been on the affirmative side of all debates ?",
            "sql": "select people.name where people.people_id not in ( select debate_people.affirmative )"
        },
        {
            "utterance": "Could you please tell me their party affiliations ?",
            "sql": "select people.party where people.people_id not in ( select debate_people.affirmative )"
        },
        {
            "utterance": "What are their ages ?",
            "sql": "select people.age where people.people_id not in ( select debate_people.affirmative )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the people ?",
            "sql": "select people.name"
        },
        {
            "utterance": "What are the names of the people who are in the affirmative side ?",
            "sql": "select people.name"
        },
        {
            "utterance": "What are the venues of debates on the affirmative side ?",
            "sql": "select debate.venue"
        },
        {
            "utterance": "What are the dates of the debates on the affirmative side ?",
            "sql": "select debate.date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of people aged either 35 or 36.",
        "sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36"
    },
    "interaction": [
        {
            "utterance": "what is the name of people aged either 35 or 36",
            "sql": "select people.name where people.age = value or people.age = value"
        },
        {
            "utterance": "how old is Luther C. Carter ?",
            "sql": "select people.age where people.name = value"
        },
        {
            "utterance": "what is the age of William B. Maclay",
            "sql": "select people.age where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the player with the largest number of votes?",
        "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello . Can you list the top three vote getters ?",
            "sql": "select player.player_name order_by player.votes desc limit_value"
        },
        {
            "utterance": "Excellent ! Which had the greatest number of votes ?",
            "sql": "select player.player_name order_by player.votes desc limit_value"
        },
        {
            "utterance": "And who were the top three , in order from most to least ?",
            "sql": "select player.player_name order_by player.votes desc limit_value"
        },
        {
            "utterance": "How many votes did Jim receive ?",
            "sql": "select player.votes where player.player_name like value"
        },
        {
            "utterance": "And what is his occupation ?",
            "sql": "select player.occupation where player.player_name like value"
        },
        {
            "utterance": "Who got more than 10,000 votes ?",
            "sql": "select player.player_name where player.votes > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names and genders of players with a coach starting after 2011.",
        "sql": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of starting year ?",
            "sql": "select player_coach.starting_year"
        },
        {
            "utterance": "yes | What information do you want to know about each gender ? | which coach gender is much ?",
            "sql": "select coach.coach_name where coach.gender = value"
        },
        {
            "utterance": "can you show me a list of player 's residence ?",
            "sql": "select player.residence"
        },
        {
            "utterance": "Show the names and genders of players with a coach starting after 2011",
            "sql": "select player.player_name , player.gender where player_coach.starting_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the residences that have at least two players.",
        "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the residences of the players ?",
            "sql": "select player.residence"
        },
        {
            "utterance": "Which of those residences have both male and female players ?",
            "sql": "select player.residence where player.gender = value intersect select player.residence where player.gender = value"
        },
        {
            "utterance": "How many male players does Winnipeg have ?",
            "sql": "select count ( player.* ) where player.gender = value and player.residence = value"
        },
        {
            "utterance": "How many female players does Winnipeg have ?",
            "sql": "select count ( player.* ) where player.gender = value and player.residence = value"
        },
        {
            "utterance": "How many residences are there in total ?",
            "sql": "select count ( distinct player.residence )"
        },
        {
            "utterance": "And how many of those six distinct residences have More than one player ?",
            "sql": "select count ( player.* ) ( select player.* group_by player.residence having count ( player.* ) > value )"
        },
        {
            "utterance": "Which residence is the one with more than one player ?",
            "sql": "select player.residence group_by player.residence having count ( player.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 3,
    "final": {
        "utterance": "Please show the most common occupation of players.",
        "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common occupation of players ?",
            "sql": "select player.occupation group_by player.occupation order_by count ( player.* ) desc limit_value"
        },
        {
            "utterance": "What about least common ?",
            "sql": "select player.occupation group_by player.occupation order_by count ( player.* ) limit_value"
        },
        {
            "utterance": "What are their names ? | did you mean the names of the players who have the least common occupation ? | yes",
            "sql": "select player.player_name group_by player.occupation order_by count ( player.* ) limit_value"
        },
        {
            "utterance": "What about most common ?",
            "sql": "select player.player_name group_by player.occupation order_by count ( player.* ) desc limit_value"
        },
        {
            "utterance": "What is his sponsor name ?",
            "sql": "select player.sponsor_name group_by player.occupation order_by count ( player.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of players coached by the rank 1 coach.",
        "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1"
    },
    "interaction": [
        {
            "utterance": "what are the names of the players ?",
            "sql": "select player.player_name"
        },
        {
            "utterance": "Who has been coached by Jameson Tomas ?",
            "sql": "select player.player_name where coach.coach_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the player with the largest number of votes?",
        "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the player with the largest number of votes ?",
            "sql": "select player.player_name order_by player.votes desc limit_value"
        },
        {
            "utterance": "Who is the sponsor of the player with the least amount of votes ?",
            "sql": "select player.sponsor_name order_by player.votes asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of players and names of their coaches.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
    },
    "interaction": [
        {
            "utterance": "What are the names of all players ?",
            "sql": "select player.player_name"
        },
        {
            "utterance": "What are the names of their coaches ? | Do you mean list the names of players and names of their coaches together ? | Yes",
            "sql": "select player.player_name , coach.coach_name"
        },
        {
            "utterance": "What are their sponsor names ?",
            "sql": "select player.sponsor_name"
        },
        {
            "utterance": "What is the gender of the sponsors ?",
            "sql": "select player.gender"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of the players ?",
            "sql": "select player.player_name"
        },
        {
            "utterance": "Who are their coaches ?",
            "sql": "select player.player_name , coach.coach_name"
        },
        {
            "utterance": "Show me these names in descending order based on number of player votes .",
            "sql": "select player.player_name , coach.coach_name order_by player.votes desc"
        },
        {
            "utterance": "also Show me the gender of the coaches and players .",
            "sql": "select player.player_name , player.gender , coach.coach_name , coach.gender order_by player.votes desc"
        },
        {
            "utterance": "How many votes did each player receive ?",
            "sql": "select player.player_name , player.votes"
        },
        {
            "utterance": "Please list this in descending order .",
            "sql": "select player.player_name , player.votes order_by player.votes desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the residences that have at least two players.",
        "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many residences are there ?",
            "sql": "select count ( distinct player.residence )"
        },
        {
            "utterance": "What are these residences ?",
            "sql": "select distinct player.residence"
        },
        {
            "utterance": "Which residences have more than 1 player ?",
            "sql": "select player.residence group_by player.residence having count ( player.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "What are all the residences ?",
            "sql": "select distinct player.residence"
        },
        {
            "utterance": "How many people live at each of them ?",
            "sql": "select player.residence , count ( player.* ) group_by player.residence"
        },
        {
            "utterance": "Now remove the residences with less than 2 people",
            "sql": "select player.residence , count ( player.* ) except select player.residence , count ( player.* ) where count ( player.* ) < value"
        },
        {
            "utterance": "OK , now list all the people who live in Winnipeg and their gender .",
            "sql": "select player.player_name , player.gender where player.residence = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of players and names of their coaches.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
    },
    "interaction": [
        {
            "utterance": "Which coach started in 2010 ?",
            "sql": "select player_coach.coach_id where player_coach.starting_year = value"
        },
        {
            "utterance": "What are the names of the coaches that started in 2010 ?",
            "sql": "select coach.coach_name where player_coach.starting_year = value"
        },
        {
            "utterance": "What are the names of the players who were coached by Jameson Tomas ?",
            "sql": "select player.player_name where coach.coach_name = value"
        },
        {
            "utterance": "What are the names of the players who were coached by Smith Brown ?",
            "sql": "select player.player_name where coach.coach_name = value"
        },
        {
            "utterance": "What is the name of the coach who started in 2011 ?",
            "sql": "select coach.coach_name where player_coach.starting_year = value"
        },
        {
            "utterance": "What are the names of the players who were coached by Robert Chen ?",
            "sql": "select player.player_name where coach.coach_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "Show the residences that have both a player of gender `` M '' and a player `` F '' .",
            "sql": "select player.residence where player.gender = value intersect select player.residence where player.gender = value"
        },
        {
            "utterance": "who is the sponsor of jean luc bouche ?",
            "sql": "select player.sponsor_name where player.player_name = value"
        },
        {
            "utterance": "Final question is how many votes for Niki Ashton ?",
            "sql": "select player.votes where player.player_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of contact individuals of the `` Labour Party '' ? | Do you want to know the first name , middle name , last name ? | Just the last names .",
            "sql": "select individuals.individual_last_name where organizations.organization_name = value order_by organization_contact_individuals.date_contact_to desc limit_value"
        },
        {
            "utterance": "Who is the latest contact individual ? | the last name of the latest contact individual of the organization `` Labour Party '' is Bradtke | And what is the date of contact ?",
            "sql": "select organization_contact_individuals.date_contact_from , organization_contact_individuals.date_contact_to where organizations.organization_name = value order_by organization_contact_individuals.date_contact_to desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 1,
    "final": {
        "utterance": "Find name of the services that has never been used.",
        "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"
    },
    "interaction": [
        {
            "utterance": "What booking made date of service id 1 ?",
            "sql": "select party_services.booking_made_date where services.service_id = value"
        },
        {
            "utterance": "What are the service name of booking id 2 ?",
            "sql": "select services.service_name where party_services.booking_id = value"
        },
        {
            "utterance": "What are the service description of service type code Welfare ?",
            "sql": "select services.service_descriptio where services.service_type_code = value"
        },
        {
            "utterance": "Find mane of the service that has never been used .",
            "sql": "select services.service_name except select services.service_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name of all the cities and states.",
        "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
    },
    "interaction": [
        {
            "utterance": "Find the name of all the cities and states . | you want the columns of town_city and state_province_county , right ? | Umm . Give me the names and the states please",
            "sql": "select addresses.town_city union select addresses.state_province_county"
        },
        {
            "utterance": "Can you give me the zip_postcode for Colorado",
            "sql": "select addresses.zip_postcode where addresses.state_province_county = value"
        },
        {
            "utterance": "Give me the cities where the state is Colorado",
            "sql": "select addresses.town_city where addresses.state_province_county = value"
        },
        {
            "utterance": "Ok. Can you give me the cities where the state is NorthCarolina",
            "sql": "select addresses.town_city where addresses.state_province_county = value"
        },
        {
            "utterance": "Give me all the zipcodes",
            "sql": "select addresses.zip_postcode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the emails of parties with the most popular party form.",
        "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "how many parties are on the table ?",
            "sql": "select count ( parties.* )"
        },
        {
            "utterance": "how many of the parties are popular ? | What do you mean by popular ? | how many parties have the most popular party form ?",
            "sql": "select count ( party_forms.* ) where party_forms.form_id = ( select party_forms.form_id group_by party_forms.form_id order_by count ( party_forms.* ) desc limit_value )"
        },
        {
            "utterance": "can i have their emails ?",
            "sql": "select parties.party_email where party_forms.form_id = ( select party_forms.form_id group_by party_forms.form_id order_by count ( party_forms.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 4,
    "final": {
        "utterance": "Which is the email of the party that has used the services the most number of times?",
        "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the party email of the party with id 1 ?",
            "sql": "select parties.party_email where parties.party_id = value"
        },
        {
            "utterance": "Tell me the party phone of the party id 2 ?",
            "sql": "select parties.party_phone where parties.party_id = value"
        },
        {
            "utterance": "Tell me the service id of the customer id 10 ?",
            "sql": "select party_services.service_id where party_services.customer_id = value"
        },
        {
            "utterance": "Which is the email of the party that has used the services the most number of times ?",
            "sql": "select parties.party_email group_by parties.party_email order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 0,
    "final": {
        "utterance": "Which catalog publisher has published the most catalogs?",
        "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "LIST THE NAME OF CATALOGS",
            "sql": "select catalogs.catalog_name"
        },
        {
            "utterance": "WHICH PUBLISHER HAS PUBLISHED MORE CATALOGS",
            "sql": "select catalogs.catalog_publisher , count ( catalogs.* ) group_by catalogs.catalog_publisher order_by count ( catalogs.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of catalog entries with level number 8.",
        "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
    },
    "interaction": [
        {
            "utterance": "What are the names of catalog with number 8",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents_additional_attributes.catalog_level_number = value"
        },
        {
            "utterance": "Could you please show me their attribute ID",
            "sql": "select catalog_contents_additional_attributes.attribute_id where catalog_contents_additional_attributes.catalog_level_number = value"
        },
        {
            "utterance": "What about their attribute value",
            "sql": "select catalog_contents_additional_attributes.attribute_value where catalog_contents_additional_attributes.catalog_level_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the entry name of the most expensive catalog (in USD)?",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me highest value of the entry name ?",
            "sql": "select catalog_contents.catalog_entry_name order_by catalog_contents.price_in_dollars desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
    },
    "interaction": [
        {
            "utterance": "what are the names of all catalogs",
            "sql": "select catalogs.catalog_name"
        },
        {
            "utterance": "list the publication dates for all catalogs",
            "sql": "select catalogs.date_of_publication"
        },
        {
            "utterance": "list the catalogs that have level number greater than 5 | Do you want catalog name or id ? | id",
            "sql": "select catalogs.catalog_id where catalog_structure.catalog_level_number > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 4,
    "final": {
        "utterance": "Find all the catalog publishers whose name contains \"Murray\"",
        "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
    },
    "interaction": [
        {
            "utterance": "Could you please tell me all the catalog publishers whose name contains `` Murray '' ?",
            "sql": "select distinct ( catalogs.catalog_publisher ) where catalogs.catalog_publisher like value"
        },
        {
            "utterance": "What is the name of that catalog ?",
            "sql": "select catalogs.catalog_name where catalogs.catalog_publisher like value"
        },
        {
            "utterance": "What are the dates of latest revision for those ?",
            "sql": "select catalogs.date_of_latest_revision where catalogs.catalog_publisher like value"
        },
        {
            "utterance": "Could you please tell me all the catalog publishers whose name contains `` chocolate '' ?",
            "sql": "select catalogs.catalog_publisher where catalogs.catalog_publisher like value"
        },
        {
            "utterance": "How many catalogs do they publish ?",
            "sql": "select count ( catalogs.* ) where catalogs.catalog_publisher in ( select distinct ( catalogs.catalog_publisher ) where catalogs.catalog_publisher like value )"
        },
        {
            "utterance": "What 's the name of that catalog and its date of publication ?",
            "sql": "select catalogs.catalog_name , catalogs.date_of_publication where catalogs.catalog_publisher in ( select distinct ( catalogs.catalog_publisher ) where catalogs.catalog_publisher like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the average and minimum price (in Euro) of all products?",
        "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
    },
    "interaction": [
        {
            "utterance": "What are the average and minimum prices ( in Euros ) of all products ?",
            "sql": "select avg ( catalog_contents.price_in_euros ) , min ( catalog_contents.price_in_euros )"
        },
        {
            "utterance": "How about just for Cola ?",
            "sql": "select avg ( catalog_contents.price_in_euros ) , min ( catalog_contents.price_in_euros ) where catalog_contents.catalog_entry_name = value"
        },
        {
            "utterance": "How about the price of Cola in dollars ? | do you still want to know the average and minimum ? | Yes please !",
            "sql": "select avg ( catalog_contents.price_in_dollars ) , min ( catalog_contents.price_in_dollars ) where catalog_contents.catalog_entry_name = value"
        },
        {
            "utterance": "How about the prices for root beer in dollars ? | did you still want to know the average and minimum ? | Yes please !",
            "sql": "select avg ( catalog_contents.price_in_dollars ) , min ( catalog_contents.price_in_dollars ) where catalog_contents.catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the product with the highest height? Give me the catalog entry name.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell the capacity , length , height and width for the catalog entry name cola ?",
            "sql": "select catalog_contents.capacity , catalog_contents.length , catalog_contents.height , catalog_contents.width where catalog_contents.catalog_entry_name = value"
        },
        {
            "utterance": "Tell me the price of Cream Soda in dollars , euros and pounds .",
            "sql": "select catalog_contents.price_in_dollars , catalog_contents.price_in_euros , catalog_contents.price_in_pounds where catalog_contents.catalog_entry_name = value"
        },
        {
            "utterance": "What is the product with the highest height ? Give me the catalog entry name .",
            "sql": "select catalog_contents.catalog_entry_name order_by catalog_contents.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the dates on which more than one revisions were made.",
        "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What were the dates of the latest revisions ?",
            "sql": "select catalogs.date_of_latest_revision"
        },
        {
            "utterance": "Which of these appear more than once ?",
            "sql": "select catalogs.date_of_latest_revision group_by catalogs.date_of_latest_revision having count ( catalogs.* ) > value"
        },
        {
            "utterance": "What catalogs were done on these dates ?",
            "sql": "select catalogs.catalog_name where catalogs.date_of_latest_revision in ( select catalogs.date_of_latest_revision group_by catalogs.date_of_latest_revision having count ( catalogs.* ) > value )"
        },
        {
            "utterance": "Great , can you show me the dates these catalogs were revised again ?",
            "sql": "select catalogs.catalog_name , catalogs.date_of_latest_revision where catalogs.date_of_latest_revision in ( select catalogs.date_of_latest_revision group_by catalogs.date_of_latest_revision having count ( catalogs.* ) > value )"
        },
        {
            "utterance": "Can you show me what dates appear more than once again ?",
            "sql": "select catalogs.date_of_latest_revision group_by catalogs.date_of_latest_revision having count ( catalogs.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 8,
    "final": {
        "utterance": "Which catalog publisher has published the most catalogs?",
        "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Could you list the catalog publishers in descending order ? | order by what ? | Alphabetical order",
            "sql": "select catalogs.catalog_publisher group_by catalogs.catalog_publisher order_by catalogs.catalog_publisher desc"
        },
        {
            "utterance": "Great ! How many catalogs has each publisher published ?",
            "sql": "select catalogs.catalog_publisher , count ( catalogs.* ) group_by catalogs.catalog_publisher"
        },
        {
            "utterance": "Great ! Which publishers have the most published catalogues ?",
            "sql": "select catalogs.catalog_publisher group_by catalogs.catalog_publisher order_by count ( catalogs.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "What are the attribute data types that possessed more than 3 attribute definitions ?",
            "sql": "select attribute_definitions.attribute_data_type group_by attribute_definitions.attribute_data_type having count ( attribute_definitions.* ) > value"
        },
        {
            "utterance": "What is bool 's attribute name ? | Do you mean the attribute names for attributes whose attribute data type is bool ? | Yes please",
            "sql": "select attribute_definitions.attribute_name where attribute_definitions.attribute_data_type = value"
        },
        {
            "utterance": "What is the attribute ID for attributes whose data type is bool ?",
            "sql": "select attribute_definitions.attribute_id where attribute_definitions.attribute_data_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the product with the highest height? Give me the catalog entry name.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which product has the greatest height ? | Which attribute of product do you want ? | Can you please show me the catalog entry name ?",
            "sql": "select catalog_contents.catalog_entry_name order_by catalog_contents.height desc limit_value"
        },
        {
            "utterance": "What is the catalog entry id and product stock number for Cola ?",
            "sql": "select catalog_contents.catalog_entry_id , catalog_contents.product_stock_number where catalog_contents.catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the entry name of the most expensive catalog (in USD)?",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many Catalog Contents there",
            "sql": "select count ( catalog_contents.* )"
        },
        {
            "utterance": "what is the parent entry id of cola",
            "sql": "select catalog_contents.parent_entry_id where catalog_contents.catalog_entry_name = value"
        },
        {
            "utterance": "what is the product stock number of Cream Soda",
            "sql": "select catalog_contents.product_stock_number where catalog_contents.catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the entry names of catalog with the attribute possessed by most entries.",
        "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are the entry names of catalog with the attribute processed by most entries ?",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents_additional_attributes.attribute_value = ( select catalog_contents_additional_attributes.attribute_value group_by catalog_contents_additional_attributes.attribute_value order_by count ( catalog_contents_additional_attributes.* ) desc limit_value )"
        },
        {
            "utterance": "What are the product stock numbers with the attribute processed by most entries ?",
            "sql": "select catalog_contents.product_stock_number where catalog_contents_additional_attributes.attribute_value = ( select catalog_contents_additional_attributes.attribute_value group_by catalog_contents_additional_attributes.attribute_value order_by count ( catalog_contents_additional_attributes.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    "interaction": [
        {
            "utterance": "What is the height of Cola ?",
            "sql": "select catalog_contents.height where catalog_contents.catalog_entry_name = value"
        },
        {
            "utterance": "Which product has a height smaller than 5 ? | Do you want to know the names of the products with heights smaller than 5 | Yes",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents.length < value"
        },
        {
            "utterance": "What about their length ?",
            "sql": "select catalog_contents.catalog_entry_name , catalog_contents.length where catalog_contents.length < value"
        },
        {
            "utterance": "What is the height of Fenta orange ?",
            "sql": "select catalog_contents.height where catalog_contents.catalog_entry_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id of the candidate who got the lowest oppose rate.",
        "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know the lowest oppose rate among the candidates .",
            "sql": "select candidate.oppose_rate order_by candidate.oppose_rate limit_value"
        },
        {
            "utterance": "Which candidate got this lowest oppose rate ?",
            "sql": "select candidate.candidate_id order_by candidate.oppose_rate limit_value"
        },
        {
            "utterance": "Hmm , which poll source did this candidate belong to ?",
            "sql": "select candidate.poll_source order_by candidate.oppose_rate limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 1,
    "final": {
        "utterance": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
    },
    "interaction": [
        {
            "utterance": "Hello , how many candidates total are there ?",
            "sql": "select count ( candidate.* )"
        },
        {
            "utterance": "Perfect , and who has the highest support percentage ? | Do you want the people id ? | Actually , just the percentage please .",
            "sql": "select max ( candidate.support_rate )"
        },
        {
            "utterance": "Perfect , what about the lowest consider rate ?",
            "sql": "select min ( candidate.consider_rate )"
        },
        {
            "utterance": "And what about the lowest oppose rate ?",
            "sql": "select min ( candidate.oppose_rate )"
        },
        {
            "utterance": "And finally , can you tell me the average unsure rate ?",
            "sql": "select avg ( candidate.unsure_rate )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 2,
    "final": {
        "utterance": "what are the top 3 highest support rates?",
        "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Can you show me the top three highest support rates for the candidates ?",
            "sql": "select candidate.support_rate order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "What polls are those from ? | Did you want the poll source for these polls ? | Yes , please",
            "sql": "select candidate.poll_source , candidate.support_rate order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "What is the name of the poll source with the earliest date ?",
            "sql": "select candidate.poll_source order_by candidate.date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 3,
    "final": {
        "utterance": "which gender got the highest average uncertain ratio.",
        "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many poll sources are there ?",
            "sql": "select count ( candidate.poll_source )"
        },
        {
            "utterance": "how many people are there ?",
            "sql": "select count ( people.people_id )"
        },
        {
            "utterance": "And how many are female ? | Do you mean the people who are female ? | Yes , how many are female , have gender `` F ''",
            "sql": "select count ( people.* ) where people.sex = value"
        },
        {
            "utterance": "what is their unsure rate ? | Do you mean the unsure rate of the people who are female ? | Yes",
            "sql": "select candidate.unsure_rate where people.sex = value"
        },
        {
            "utterance": "and the males ? | Do you mean the unsure rate of the people who are male ? | yes",
            "sql": "select candidate.unsure_rate where people.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the average height and weight for all males (sex is M).",
        "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"
    },
    "interaction": [
        {
            "utterance": "Find the average height and weight for all males ( sex is M ) .",
            "sql": "select avg ( people.height ) , avg ( people.weight ) where people.sex = value"
        },
        {
            "utterance": "How many male people are on the table ?",
            "sql": "select count ( people.* ) where people.sex = value"
        },
        {
            "utterance": "Which person has the highest height ?",
            "sql": "select people.* order_by people.height desc limit_value"
        },
        {
            "utterance": "How many female people are on the list ?",
            "sql": "select count ( people.* ) where people.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the average height and weight for all males (sex is M).",
        "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"
    },
    "interaction": [
        {
            "utterance": "what is the current height of Hubert Henno",
            "sql": "select people.height where people.name = value"
        },
        {
            "utterance": "How many male sex are there",
            "sql": "select count ( people.* ) where people.sex = value"
        },
        {
            "utterance": "which of the male has he highest weight | Would you like to know the name of the person who has the highest weight among sex M ? | yes of course",
            "sql": "select people.name where people.sex = value order_by people.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name and gender of the candidate who got the highest support rate.",
        "sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which candidate was most supported | You mean the candidate who got the highest support rate ? | yes which candidate was most popular",
            "sql": "select people.name order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "what was Vincent Montmeat 's support rate",
            "sql": "select candidate.support_rate where people.name = value"
        },
        {
            "utterance": "what was his opposition rate",
            "sql": "select candidate.oppose_rate where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    "interaction": [
        {
            "utterance": "How many females are there ?",
            "sql": "select count ( people.* ) where people.sex = value"
        },
        {
            "utterance": "How about males ?",
            "sql": "select count ( people.* ) where people.sex = value"
        },
        {
            "utterance": "What is the lowest oppose rate that male candidates have ?",
            "sql": "select min ( candidate.oppose_rate ) where people.sex = value"
        },
        {
            "utterance": "What 's the name of the male candidate that has an oppose rate of 0.32 ?",
            "sql": "select people.name where people.sex = value and candidate.oppose_rate = value"
        },
        {
            "utterance": "Can you also show me the lowest oppose rate that female candidates have ?",
            "sql": "select min ( candidate.oppose_rate ) where people.sex = value"
        },
        {
            "utterance": "Can you show me the name of that female candidate ?",
            "sql": "select people.name where people.sex = value order_by candidate.oppose_rate asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 8,
    "final": {
        "utterance": "what are the top 3 highest support rates?",
        "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the top 3 highest support rates ?",
            "sql": "select candidate.support_rate order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "What are the poll sources of those support rates ?",
            "sql": "select candidate.poll_source order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "What are the dates for those support rates ?",
            "sql": "select candidate.date order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "What 's the unsure rate of those ?",
            "sql": "select candidate.unsure_rate order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "What are the consider rates of those ?",
            "sql": "select candidate.consider_rate order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "What are the oppose rates of those ?",
            "sql": "select candidate.oppose_rate order_by candidate.support_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 9,
    "final": {
        "utterance": "how many people are there whose weight is higher than 85 for each gender?",
        "sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "Hello . How many people have a weight that is higher than 85 ?",
            "sql": "select count ( people.* ) where people.weight > value"
        },
        {
            "utterance": "Out of those 6 people , how many of them are female ?",
            "sql": "select count ( people.* ) where people.weight > value and people.sex = value"
        },
        {
            "utterance": "How many of them are male ?",
            "sql": "select count ( people.* ) where people.weight > value and people.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all ships from United States ?",
            "sql": "select ship.name where ship.nationality = value"
        },
        {
            "utterance": "Show the names of all ships from United Kingdom ?",
            "sql": "select ship.name where ship.nationality = value"
        },
        {
            "utterance": "What type of ship is the Corbridge ?",
            "sql": "select ship.type where ship.name = value"
        },
        {
            "utterance": "What is the tonnage of the Corbridge ?",
            "sql": "select ship.tonnage where ship.name = value"
        },
        {
            "utterance": "What is the name of the ship with 3146 tonnage ?",
            "sql": "select ship.name where ship.tonnage = value"
        },
        {
            "utterance": "What is the name of the ship with the most tonnage ?",
            "sql": "select ship.name order_by ship.tonnage desc limit_value"
        },
        {
            "utterance": "How many different types of ships are there ?",
            "sql": "select count ( distinct ship.type )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of ships that are not involved in any mission",
        "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"
    },
    "interaction": [
        {
            "utterance": "List the name of ships that are not involved in any mission",
            "sql": "select ship.name where ship.ship_id not in ( select mission.ship_id )"
        },
        {
            "utterance": "Which ships have been decommissioned ?",
            "sql": "select mission.ship_id where mission.fate like value"
        },
        {
            "utterance": "Give me the names of ships that have been decommissioned",
            "sql": "select ship.name where ship.ship_id in ( select mission.ship_id where mission.fate like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000"
    },
    "interaction": [
        {
            "utterance": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000 .",
            "sql": "select ship.type where ship.tonnage > value intersect select ship.type where ship.tonnage < value"
        },
        {
            "utterance": "Show the types of ships with tonnage between 3000 and 5000 .",
            "sql": "select distinct ship.type where ship.tonnage > value and ship.tonnage < value"
        },
        {
            "utterance": "What is the nationality of the ship with maximum tonnage ?",
            "sql": "select ship.nationality order_by ship.tonnage desc limit_value"
        },
        {
            "utterance": "Can you give me the nationality of the ship with minimum tonnage .",
            "sql": "select ship.nationality order_by ship.tonnage limit_value"
        },
        {
            "utterance": "What is the maximum and the minimum tonnage for a cargo ship ?",
            "sql": "select max ( ship.tonnage ) , min ( ship.tonnage ) where ship.type = value"
        },
        {
            "utterance": "Hmmm . Can you also give me the maximum and the minimum tonnage for a battle ship ?",
            "sql": "select max ( ship.tonnage ) , min ( ship.tonnage ) where ship.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\""
    },
    "interaction": [
        {
            "utterance": "Hello ! How are you ! Can you tell me how many missions there are in total ?",
            "sql": "select count ( mission.* )"
        },
        {
            "utterance": "Great ! Can you filter this list to show only the mission that involved ships from the United States ?",
            "sql": "select mission.fate where ship.nationality = value"
        },
        {
            "utterance": "Great ! Could you update this list to show all of the mission IDs ?",
            "sql": "select mission.fate , mission.mission_id where ship.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 4,
    "final": {
        "utterance": "List the nations that have more than two ships.",
        "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many ships does United Kingdom have ?",
            "sql": "select ship.nationality , count ( ship.* ) where ship.nationality = value group_by ship.nationality"
        },
        {
            "utterance": "Which other country has more than 2 ships ?",
            "sql": "select ship.nationality where ship.nationality != value group_by ship.nationality having count ( ship.* ) > value"
        },
        {
            "utterance": "What type of ships does United States have ?",
            "sql": "select distinct ship.type where ship.nationality = value"
        },
        {
            "utterance": "What about United Kingdom 's type of ships ?",
            "sql": "select distinct ship.type where ship.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the ship with the largest tonnage?",
        "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many ships are there ?",
            "sql": "select count ( ship.* )"
        },
        {
            "utterance": "What are their nationalities ?",
            "sql": "select ship.nationality"
        },
        {
            "utterance": "What is the name of the ship with the largest tonnage ?",
            "sql": "select ship.name order_by ship.tonnage desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 6,
    "final": {
        "utterance": "Please show the most common type of ships.",
        "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the most common type of ships",
            "sql": "select ship.type group_by ship.type order_by count ( ship.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names of ships involved in a mission launched after 1928.",
        "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928"
    },
    "interaction": [
        {
            "utterance": "show names of ships involved in a mission launched after 1928 .",
            "sql": "select ship.name where mission.launched_year > value"
        },
        {
            "utterance": "which ships were lost ?",
            "sql": "select * where mission.fate like value"
        },
        {
            "utterance": "which among them was the biggest ?",
            "sql": "select * where mission.fate like value order_by ship.tonnage desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 0,
    "final": {
        "utterance": "List the locations of schools that do not have any player.",
        "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)"
    },
    "interaction": [
        {
            "utterance": "how many player are presented on the table | Did you mean to ask for the number of entries in the table player ? | exactly",
            "sql": "select count ( player.* )"
        },
        {
            "utterance": "list out the player",
            "sql": "select player.player"
        },
        {
            "utterance": "what is the age of Timothy Beckham",
            "sql": "select player.age where player.player = value"
        },
        {
            "utterance": "what is the position of Pedro \u00c1lvarez",
            "sql": "select player.position where player.player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the denomination shared by more than one school.",
        "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show the School name with School_ID 1 ?",
            "sql": "select school.school where school.school_id = value"
        },
        {
            "utterance": "Show the denomination shared by more than one school ?",
            "sql": "select school.denomination group_by school.denomination having count ( school.* ) > value"
        },
        {
            "utterance": "Show the Location of Barker College ?",
            "sql": "select school.location where school.school = value"
        },
        {
            "utterance": "Show the names of schools with only girls ?",
            "sql": "select school.school where school.boys_or_girls = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 2,
    "final": {
        "utterance": "List the teams of the players with the top 5 largest ages.",
        "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "Which team of players has the smallest age ? | Did you mean to ask for the team of the player with the smallest age ? | yes",
            "sql": "select player.team order_by player.age limit_value"
        },
        {
            "utterance": "Which team does Timothy Beckham play for ?",
            "sql": "select player.team where player.player = value"
        },
        {
            "utterance": "How old is he and what position does he play ?",
            "sql": "select player.age , player.position where player.player = value"
        },
        {
            "utterance": "What position does Eric Hosmer play ?",
            "sql": "select player.position where player.player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"
    },
    "interaction": [
        {
            "utterance": "What schools were founded before 1890 ?",
            "sql": "select school.school where school.founded < value"
        },
        {
            "utterance": "What was its denomination ?",
            "sql": "select school.denomination where school.founded < value"
        },
        {
            "utterance": "What schools were founded after 1900 ?",
            "sql": "select school.school where school.founded > value"
        },
        {
            "utterance": "What were their denominations ?",
            "sql": "select school.denomination where school.founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the locations of schools that have more than 1 player.",
        "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which schools have more than 1 player ?",
            "sql": "select school.school group_by player.school_id having count ( * ) > value"
        },
        {
            "utterance": "Okay , and where are the locations of each school ?",
            "sql": "select school.school , school.location group_by player.school_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"
    },
    "interaction": [
        {
            "utterance": "what is the high enrollment of school | Are you asking the highest enrollment number for all schools ? | exactly",
            "sql": "select max ( school.enrollment )"
        },
        {
            "utterance": "what is the school color of barker college",
            "sql": "select school.school_colors where school.school = value"
        },
        {
            "utterance": "what is the enrollment of cranbrook school",
            "sql": "select school.enrollment where school.school = value"
        },
        {
            "utterance": "which school is hightest founded | Do you mean the school that is founded earliest ? | exactly",
            "sql": "select school.school order_by school.founded limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name and id of the good with the highest average rank.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the good with the highest average rank ?",
            "sql": "select item.title group_by review.i_id order_by avg ( review.rank ) desc limit_value"
        },
        {
            "utterance": "What is the ID of cup ?",
            "sql": "select item.i_id where item.title = value"
        },
        {
            "utterance": "Now , can you please tell me the name and id of the good with the highest average rank ?",
            "sql": "select item.title , item.i_id group_by review.i_id order_by avg ( review.rank ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the user who gives the most reviews.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "for which user id rating is high | did you mean for which user id is the rating highest ? | ok , find user id who gives the rating 10",
            "sql": "select useracct.u_id where review.rating = value"
        },
        {
            "utterance": "find the name of the user who gives most reviews",
            "sql": "select useracct.name group_by review.u_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "find the name of the user who gives 1 rank",
            "sql": "select useracct.name where review.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of the items that did not receive any review.",
        "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the names of the items that did not receive any reviews ?",
            "sql": "select item.title where item.i_id not in ( select review.i_id )"
        },
        {
            "utterance": "What are their item IDs ?",
            "sql": "select item.i_id where item.i_id not in ( select review.i_id )"
        },
        {
            "utterance": "How many items did receive reviews ?",
            "sql": "select count ( distinct review.i_id )"
        },
        {
            "utterance": "What are their item ids ?",
            "sql": "select distinct ( review.i_id )"
        },
        {
            "utterance": "What is the rating of item id 3 ?",
            "sql": "select review.rating where review.i_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all product IDs and the associated product titles ? | Are you asking for all item IDs and their corresponding item titles ? | Yes ! That is correct !",
            "sql": "select item.i_id , item.title"
        },
        {
            "utterance": "Thank you ! Can you filter that list to show only the entries with a rank that is higher than 3 please ? | Are you looking for ranks that are better than 3 or higher in value than 3 ? | I would like to filter the list to show the entries which have a rank value that is higher than 3 please .",
            "sql": "select item.title , item.i_id where review.rank > value"
        },
        {
            "utterance": "Excellent . Can you include to this list the review rating for each of these items ?",
            "sql": "select item.title , item.i_id , review.rating where review.rank > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 4,
    "final": {
        "utterance": "For each user, return the name and the average rating of reviews given by them.",
        "sql": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    "interaction": [
        {
            "utterance": "What is the used id 1 ? | Do you mean what is the name of the user with id 1 ? | yes",
            "sql": "select useracct.name where useracct.u_id = value"
        },
        {
            "utterance": "What is the name of user id 3 ?",
            "sql": "select useracct.name where useracct.u_id = value"
        },
        {
            "utterance": "What is the rank of user id 3 ?",
            "sql": "select review.rank where review.u_id = value"
        },
        {
            "utterance": "Find out the average rating of every user ?",
            "sql": "select useracct.name , avg ( review.rating ) group_by review.u_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the target user with the lowest trust score.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me useracct name ? | Would you like a list of the names of the users ? | yes",
            "sql": "select useracct.name"
        },
        {
            "utterance": "can you show me target user id | Would you like a list of all the target user id ? | yes",
            "sql": "select trust.target_u_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of the items that did not receive any review.",
        "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "What is item number 4 ?",
            "sql": "select item.* where item.i_id = value"
        },
        {
            "utterance": "What is the avocado 's rating ?",
            "sql": "select review.rating where review.i_id = ( select item.i_id where item.title = value )"
        },
        {
            "utterance": "And what about the avocado 's rank ?",
            "sql": "select review.rank where review.i_id = ( select item.i_id where item.title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of users who did not leave any review.",
        "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "How many users did not leave a review ?",
            "sql": "select useracct.name where useracct.u_id not in ( select review.u_id )"
        },
        {
            "utterance": "Can you list out their names ?",
            "sql": "select useracct.name where useracct.u_id not in ( select review.u_id )"
        },
        {
            "utterance": "And the users who did not ?",
            "sql": "select useracct.name where useracct.u_id not in ( select review.u_id )"
        },
        {
            "utterance": "How many reviews did we receive ?",
            "sql": "select count ( review.* )"
        },
        {
            "utterance": "How many of the reviews have a rating greater than or equal to 5 ?",
            "sql": "select count ( review.* ) where review.rating > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and id of the item with the highest average rating.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the items with highest average rating | Do you mean the the title of the item with the highest average rating ? | yes , title of the item with highest average rating",
            "sql": "select item.title group_by review.i_id order_by avg ( review.rating ) desc limit_value"
        },
        {
            "utterance": "what is the id of cup",
            "sql": "select item.i_id where item.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and id of the item with the highest average rating.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the item with the highest average rating ?",
            "sql": "select item.title group_by review.i_id order_by avg ( review.rating ) desc limit_value"
        },
        {
            "utterance": "What is its id ?",
            "sql": "select item.i_id group_by review.i_id order_by avg ( review.rating ) desc limit_value"
        },
        {
            "utterance": "What is the name of the item with the lowest average rating ?",
            "sql": "select item.title group_by review.i_id order_by avg ( review.rating ) limit_value"
        },
        {
            "utterance": "What is its item id ?",
            "sql": "select item.i_id group_by review.i_id order_by avg ( review.rating ) limit_value"
        },
        {
            "utterance": "What item names have a rating of 5 ?",
            "sql": "select item.title where review.rating = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of the user who gives the most reviews.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the user id of Helen",
            "sql": "select useracct.u_id where useracct.name = value"
        },
        {
            "utterance": "What is Helen rating ?",
            "sql": "select review.rating where useracct.name = value"
        },
        {
            "utterance": "And what is helen rank",
            "sql": "select review.rank where useracct.name = value"
        },
        {
            "utterance": "What is helen item id",
            "sql": "select review.i_id where useracct.name = value"
        },
        {
            "utterance": "How about her a id",
            "sql": "select review.a_id where useracct.name = value"
        },
        {
            "utterance": "Who gave the most reviews",
            "sql": "select useracct.name group_by review.u_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many review did he have",
            "sql": "select count ( * ) group_by review.u_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Yes what is mark rank ?",
            "sql": "select review.rank where useracct.name = value"
        },
        {
            "utterance": "What is matk user id",
            "sql": "select useracct.u_id where useracct.name = value"
        },
        {
            "utterance": "What is his a id",
            "sql": "select review.a_id where useracct.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 11,
    "final": {
        "utterance": "For each user, find their name and the number of reviews written by them.",
        "sql": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    "interaction": [
        {
            "utterance": "Which id has the least rating on the table ? | Which id do you need , a id , u id , or i id ? | i id",
            "sql": "select review.i_id order_by review.rating limit_value"
        },
        {
            "utterance": "For each user , find their name and the number of reviews written by them .",
            "sql": "select useracct.name , count ( * ) group_by review.u_id"
        },
        {
            "utterance": "Which u id has the least rank on the list ?",
            "sql": "select review.u_id order_by review.rank limit_value"
        },
        {
            "utterance": "State the name of u id 2 on the list ?",
            "sql": "select useracct.name where useracct.u_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)"
    },
    "interaction": [
        {
            "utterance": "which item has the highest rating ?",
            "sql": "select item.title order_by review.rating desc limit_value"
        },
        {
            "utterance": "what is the average rating ?",
            "sql": "select avg ( review.rating )"
        },
        {
            "utterance": "what items have higher rating than 7 ?",
            "sql": "select item.title where review.rating > value"
        },
        {
            "utterance": "what is item id of cup ?",
            "sql": "select item.i_id where item.title = value"
        },
        {
            "utterance": "what is item id 4 ?",
            "sql": "select item.title where item.i_id = value"
        },
        {
            "utterance": "please list all items",
            "sql": "select item.*"
        },
        {
            "utterance": "please list each item and rating from highest to lowest rating",
            "sql": "select item.title , review.rating order_by review.rating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of customers who have more than one loan.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List names of customers with more than 1 loan",
            "sql": "select customer.cust_name group_by customer.cust_name having count ( * ) > value"
        },
        {
            "utterance": "How about those with only 1 loan ?",
            "sql": "select customer.cust_name group_by customer.cust_name having count ( * ) = value"
        },
        {
            "utterance": "How about those with no loans ?",
            "sql": "select customer.cust_name group_by customer.cust_name having count ( * ) = value"
        },
        {
            "utterance": "List the customers who have mortgages",
            "sql": "select loan.loan_id where loan.loan_type = value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select customer.cust_name where loan.loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the customers with a credit score below 100 ?",
            "sql": "select customer.* where customer.credit_score < value"
        },
        {
            "utterance": "Can you provide me with a list of all of the loans that both Mary and Jack received ?",
            "sql": "select loan.loan_type where customer.cust_name = value intersect select loan.loan_type where customer.cust_name = value"
        },
        {
            "utterance": "Can you show me which bank branch provided the highest number of loans to customers with credit scores below 100 ?",
            "sql": "select bank.bname where customer.credit_score < value group_by bank.bname order_by sum ( loan.amount ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 2,
    "final": {
        "utterance": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"
    },
    "interaction": [
        {
            "utterance": "Can you show the average account balance of customers with credit score lower than 50 for each account type and their corresponding account types ?",
            "sql": "select avg ( customer.acc_bal ) , customer.acc_type where customer.credit_score < value group_by customer.acc_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
    },
    "interaction": [
        {
            "utterance": "How many customers have loans that total more than 5000 ?",
            "sql": "select count ( * ) ( select * group_by customer.cust_name having sum ( loan.amount ) > value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select customer.cust_name group_by customer.cust_name having sum ( loan.amount ) > value"
        },
        {
            "utterance": "What is her account balance ?",
            "sql": "select customer.acc_bal group_by customer.cust_name having sum ( loan.amount ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total amount of loans offered by each bank branch.",
        "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"
    },
    "interaction": [
        {
            "utterance": "Can you list the loan types , branch names and ids , and loan amounts ? | Did you mean the Ids of the branches ? | Yes , please .",
            "sql": "select loan.loan_type , bank.bname , loan.branch_id , loan.amount group_by bank.bname"
        },
        {
            "utterance": "Hmm , I want to know the number of customers each bank branch has . | Would you like both the branch name and the branch ID ? | Yes please .",
            "sql": "select bank.branch_id , bank.bname , bank.no_of_customers"
        },
        {
            "utterance": "Please find out the total amount of loans offered by each bank branch .",
            "sql": "select sum ( loan.amount ) , bank.bname group_by bank.bname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the state which has the most number of customers.",
        "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "hello . Can you tell me the number of states in which there are customers ?",
            "sql": "select count ( bank.state ) where bank.no_of_customers > value"
        },
        {
            "utterance": "and what states are they , please ? | Do you mean the states of all the branches ? | what are the four states in which there are customers ?",
            "sql": "select bank.state where bank.no_of_customers > value"
        },
        {
            "utterance": "and which of those states has the most number of customers ?",
            "sql": "select bank.state group_by bank.state order_by sum ( bank.no_of_customers ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the city and name of bank branches that provide business loans.",
        "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
    },
    "interaction": [
        {
            "utterance": "What are the names of the bank branches ?",
            "sql": "select bank.bname"
        },
        {
            "utterance": "Which bank branches provide business loans ? | do you want the id or the name of the bank branches ? | Names of the bank branches please .",
            "sql": "select bank.bname where loan.loan_type = value"
        },
        {
            "utterance": "What is the city of the bank branch that provides business loans ?",
            "sql": "select bank.city where loan.loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the the name of the customers who have a loan with amount more than 3000.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"
    },
    "interaction": [
        {
            "utterance": "How many customers in this table ?",
            "sql": "select count ( customer.cust_name )"
        },
        {
            "utterance": "How many loan types in this table ?",
            "sql": "select count ( loan.loan_type )"
        },
        {
            "utterance": "How many account types in this table ?",
            "sql": "select count ( distinct customer.acc_type )"
        },
        {
            "utterance": "Find average account balance ?",
            "sql": "select avg ( customer.acc_bal )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of customer who has the lowest credit score.",
        "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can i get the customer name who has low credit score",
            "sql": "select customer.cust_name order_by customer.credit_score limit_value"
        },
        {
            "utterance": "From which state he was ?",
            "sql": "select customer.state order_by customer.credit_score limit_value"
        },
        {
            "utterance": "Wow ! What was his account type ?",
            "sql": "select customer.acc_type order_by customer.credit_score limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
    },
    "interaction": [
        {
            "utterance": "Hi there ! How are you ? Can you show a list of all customer IDs for customers who have loans in the amount of 5000 or more ?",
            "sql": "select customer.cust_id group_by customer.cust_name having sum ( loan.amount ) > = value"
        },
        {
            "utterance": "Excellent ! Can you update that list to include the customer names and their account balances ?",
            "sql": "select customer.cust_id , customer.cust_name , customer.acc_bal group_by customer.cust_name having sum ( loan.amount ) > = value"
        },
        {
            "utterance": "Awesome ! Finally , can you show me the number of loans and credit score for Owen ?",
            "sql": "select customer.credit_score , count ( * ) where customer.cust_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of customer who has the highest amount of loans.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you show me average of credit scores ?",
            "sql": "select avg ( customer.credit_score )"
        },
        {
            "utterance": "what is the highest credit score ?",
            "sql": "select max ( customer.credit_score )"
        },
        {
            "utterance": "what is the highest account balance ?",
            "sql": "select max ( customer.acc_bal )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of customers who have loans of both Mortgages and Auto.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"
    },
    "interaction": [
        {
            "utterance": "Who are the customers ?",
            "sql": "select customer.cust_name"
        },
        {
            "utterance": "Which of them have mortgage loans ?",
            "sql": "select customer.cust_name where loan.loan_type = value"
        },
        {
            "utterance": "And which also have auto loans ?",
            "sql": "select customer.cust_name where loan.loan_type = value intersect select customer.cust_name where loan.loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of customers who do not have an saving account.",
        "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
    },
    "interaction": [
        {
            "utterance": "Find the name of customers who do not have a saving account .",
            "sql": "select customer.cust_name except select customer.cust_name where customer.acc_type = value"
        },
        {
            "utterance": "what other types of accounts are available ?",
            "sql": "select customer.acc_type where customer.acc_type != value"
        },
        {
            "utterance": "who has the highest credit score ?",
            "sql": "select customer.cust_name order_by customer.credit_score desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For each state, find the total account balance of customers whose credit score is above 100.",
        "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"
    },
    "interaction": [
        {
            "utterance": "what is the total balance of customers whose credit score is above 100",
            "sql": "select sum ( customer.acc_bal ) where customer.credit_score > value group_by customer.state"
        },
        {
            "utterance": "what is the account type ? | Would you like a list of all the account types ? | yes",
            "sql": "select customer.acc_type"
        },
        {
            "utterance": "what is the credit score for Mary ?",
            "sql": "select customer.credit_score where customer.cust_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know what is the greatest amount of loan to customers that each bank branch has made .",
            "sql": "select bank.bname , max ( loan.amount ) group_by bank.bname"
        },
        {
            "utterance": "Can you show me the credit score of the customer receiving the greatest amount of loan ?",
            "sql": "select customer.credit_score order_by loan.amount desc limit_value"
        },
        {
            "utterance": "Can you show me the name of the bank branch providing the greatest total amount of loans to customers ?",
            "sql": "select bank.bname group_by bank.bname order_by sum ( loan.amount ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the name of customer who has the lowest credit score.",
        "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "FIND THE NAME OF CUSTOMER WHO HAS THE LOWEST CREDIT SCORE",
            "sql": "select customer.cust_name order_by customer.credit_score limit_value"
        },
        {
            "utterance": "FIND THE NAME OF CUSTOMER WHO HAS THE HIGHEST CREDIT SCORE",
            "sql": "select customer.cust_name order_by customer.credit_score desc limit_value"
        },
        {
            "utterance": "FIND THE NAME OF CUSTOMER WHO HAS HIGH ACCOUNT BALANCE | Did you mean the highest account balance ? | YES",
            "sql": "select customer.cust_name order_by customer.acc_bal desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the the name of the customers who have a loan with amount more than 3000.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"
    },
    "interaction": [
        {
            "utterance": "Thanks ! I 'm a bit short on time , so can you provide me with Owens loan amount ?",
            "sql": "select loan.amount where customer.cust_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the total account balance of each customer from Utah or Texas.",
        "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"
    },
    "interaction": [
        {
            "utterance": "what is the average of account balance ?",
            "sql": "select avg ( customer.acc_bal )"
        },
        {
            "utterance": "can you show me a list of account type ?",
            "sql": "select distinct customer.acc_type"
        },
        {
            "utterance": "what is the average of credit score ?",
            "sql": "select avg ( customer.credit_score )"
        },
        {
            "utterance": "find the total account balance of each customer from Utah or Texas",
            "sql": "select sum ( customer.acc_bal ) where customer.state = value or customer.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the country that has the most perpetrators?",
        "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "tell me the total number of injured in both china and japan",
            "sql": "select sum ( perpetrator.injured ) where perpetrator.country = value or perpetrator.country = value"
        },
        {
            "utterance": "what is the rate of kill in south korea",
            "sql": "select perpetrator.killed where perpetrator.country = value"
        },
        {
            "utterance": "what is the location of ID 3 | Do you mean the perpetrator ID ? | yes the prepetrator ID",
            "sql": "select perpetrator.location where perpetrator.perpetrator_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the location of the perpetrator with the largest kills.",
        "sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many perpetrators are there ?",
            "sql": "select count ( perpetrator.* )"
        },
        {
            "utterance": "What is the location for each perpetrator ?",
            "sql": "select perpetrator.location"
        },
        {
            "utterance": "Can you tell me the location of the perpetrator with the largest kills ?",
            "sql": "select perpetrator.location order_by perpetrator.killed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of people that are not perpetrators.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)"
    },
    "interaction": [
        {
            "utterance": "what is the name of people that are not perpetrators",
            "sql": "select people.name where people.people_id not in ( select perpetrator.people_id )"
        },
        {
            "utterance": "what is the weight of John Danks",
            "sql": "select people.weight where people.name = value"
        },
        {
            "utterance": "what is the height of John Danks",
            "sql": "select people.height where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the total kills of the perpetrators with height more than 1.84.",
        "sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84"
    },
    "interaction": [
        {
            "utterance": "I want to know how many perpetrators are taller than 1.84 | So do you mean the kills of perpetrators with height more than 1.84 ? | Yes , that 's exactly what I mean",
            "sql": "select sum ( perpetrator.killed ) where people.height > value"
        },
        {
            "utterance": "How many perpetrators does that include ?",
            "sql": "select count ( perpetrator.perpetrator_id ) where people.height > value"
        },
        {
            "utterance": "When did the earliest killing take place ?",
            "sql": "select perpetrator.date order_by perpetrator.date asc limit_value"
        },
        {
            "utterance": "Can you tell me how many people were injured for the most recent date ?",
            "sql": "select perpetrator.injured order_by perpetrator.date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of perpetrators whose country is not \"China\"?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\""
    },
    "interaction": [
        {
            "utterance": "Hi - can you please list the names of perpetrators in all countries except for China ?",
            "sql": "select people.name where perpetrator.country != value"
        },
        {
            "utterance": "Great - I forgot to ask , can you please show which countries each of the listed perpetrators are associated with ?",
            "sql": "select people.name , perpetrator.country where perpetrator.country != value"
        },
        {
            "utterance": "Fantastic - what was the total number of perpetrators in China ?",
            "sql": "select count ( * ) where perpetrator.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20"
    },
    "interaction": [
        {
            "utterance": "How many countries are there on the list ?",
            "sql": "select count ( perpetrator.country )"
        },
        {
            "utterance": "Can you list the name of the countries that have perpetrators with injures more than 50 ?",
            "sql": "select perpetrator.country where perpetrator.injured > value"
        },
        {
            "utterance": "Can you also include the name of the contries that have perpetrators with injures smaller than 20 ?",
            "sql": "select perpetrator.country where perpetrator.injured < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the perpetrators in the country China ?",
            "sql": "select people.name where perpetrator.country = value"
        },
        {
            "utterance": "What are the names of the perpetrators in the country Japan ?",
            "sql": "select people.name where perpetrator.country = value"
        },
        {
            "utterance": "What are the heights of all the perpetrators in Japan and China ?",
            "sql": "select people.height where perpetrator.country = value or perpetrator.country = value"
        },
        {
            "utterance": "What are the weights of all the perpetrators from South Korea ?",
            "sql": "select people.weight where perpetrator.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the date of the tallest perpetrator.",
        "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the date of the tallest perpetrator .",
            "sql": "select perpetrator.date order_by people.height desc limit_value"
        },
        {
            "utterance": "show me the location of the tallest perpetrator .",
            "sql": "select perpetrator.location order_by people.height desc limit_value"
        },
        {
            "utterance": "what country is Kaio from ?",
            "sql": "select perpetrator.country where perpetrator.location = value"
        },
        {
            "utterance": "how many people were killed in Japan ?",
            "sql": "select sum ( perpetrator.killed ) where perpetrator.country = value"
        },
        {
            "utterance": "how many got injured in japan ?",
            "sql": "select sum ( perpetrator.injured ) where perpetrator.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the perpetrator with the biggest weight.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "HOW MANY PEOPLE HAS KILLED AT SOUTH KOREA ?",
            "sql": "select perpetrator.killed where perpetrator.country = value"
        },
        {
            "utterance": "WHAT IS THE NAME OF THE PERPETRATOR WITH THE BIGGEST WEIGHT ?",
            "sql": "select people.name order_by people.weight desc limit_value"
        },
        {
            "utterance": "WHERE IS THE LOCATION OF EVENTS IN JAPAN ?",
            "sql": "select perpetrator.location where perpetrator.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the order id and order details for the order more than two invoices.",
        "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many orders have more than two invoices ?",
            "sql": "select count ( * ) ( select * group_by orders.order_id having count ( * ) > value )"
        },
        {
            "utterance": "What are the order IDs and details ?",
            "sql": "select orders.order_id , orders.order_details group_by orders.order_id having count ( * ) > value"
        },
        {
            "utterance": "What are the customer ID 's for these orders ?",
            "sql": "select orders.customer_id group_by orders.order_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the account id with most number of transactions.",
        "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Please tell me how many accounts payed an amount over $ 600 .",
            "sql": "select count ( distinct financial_transactions.account_id ) where financial_transactions.transaction_amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 2,
    "final": {
        "utterance": "How many products were not included in any order?",
        "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    "interaction": [
        {
            "utterance": "How many products are there ?",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "How many orders were there ?",
            "sql": "select count ( distinct order_items.order_id )"
        },
        {
            "utterance": "What is the total number of products not included in any of the orders ?",
            "sql": "select count ( products.* ) where products.product_id not in ( select order_items.product_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 3,
    "final": {
        "utterance": "Show ids for all transactions whose amounts are greater than the average.",
        "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
    },
    "interaction": [
        {
            "utterance": "What is the average amount of transaction ?",
            "sql": "select avg ( financial_transactions.transaction_amount )"
        },
        {
            "utterance": "What are ids of all transactions with amount greater than the average ?",
            "sql": "select financial_transactions.transaction_id where financial_transactions.transaction_amount > ( select avg ( financial_transactions.transaction_amount ) )"
        },
        {
            "utterance": "And what are their transaction dates ?",
            "sql": "select financial_transactions.transaction_date where financial_transactions.transaction_amount > ( select avg ( financial_transactions.transaction_amount ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the first name and last name for the customer with account name 900.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    "interaction": [
        {
            "utterance": "Show the first name and last name for the customer with account name 900 .",
            "sql": "select customers.customer_first_name , customers.customer_last_name where accounts.account_name = value"
        },
        {
            "utterance": "What is a login name of Dee A Larkin ?",
            "sql": "select customers.login_name where customers.customer_first_name = value and customers.customer_middle_initial = value and customers.customer_last_name = value"
        },
        {
            "utterance": "Final question is How many customers in the table ?",
            "sql": "select count ( customers.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the order id and order details for the order more than two invoices.",
        "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "how many Invoices there",
            "sql": "select count ( invoices.* )"
        },
        {
            "utterance": "how many orders there",
            "sql": "select count ( orders.* )"
        },
        {
            "utterance": "what is the customer id of order id 3",
            "sql": "select orders.customer_id where orders.order_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 6,
    "final": {
        "utterance": "How many products were not included in any order?",
        "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    "interaction": [
        {
            "utterance": "* I have left the chat *",
            "sql": "select order_items.product_id where order_items.order_item_id = value"
        },
        {
            "utterance": "How many product quantity does order item 1 have ?",
            "sql": "select order_items.product_quantity where order_items.order_item_id = value"
        },
        {
            "utterance": "What is the product type code of order item 1 ?",
            "sql": "select products.production_type_code where order_items.order_item_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all product names and the number of customers having an order on each product.",
        "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
    },
    "interaction": [
        {
            "utterance": "Show all product names and the number of customers having an order on each product .",
            "sql": "select products.product_name , count ( * ) group_by products.product_name"
        },
        {
            "utterance": "Please show me unit price of books ?",
            "sql": "select products.unit_price where products.production_type_code = value"
        },
        {
            "utterance": "Please give me Placed order date of customer id 12 ?",
            "sql": "select orders.date_order_placed where orders.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 8,
    "final": {
        "utterance": "How many transaction does account with name 337 have?",
        "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    "interaction": [
        {
            "utterance": "Hello ! How many transactions are there total ?",
            "sql": "select count ( financial_transactions.* )"
        },
        {
            "utterance": "Perfect ! And is there an account number of 337 ? | Do you mean the account name ? | Yes the account name being 337 .",
            "sql": "select accounts.* where accounts.account_name = value"
        },
        {
            "utterance": "How many total transactions does that account have ?",
            "sql": "select count ( * ) where accounts.account_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\""
    },
    "interaction": [
        {
            "utterance": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling ?",
            "sql": "select accounts.account_name , accounts.other_account_details where customers.customer_first_name = value and customers.customer_last_name = value"
        },
        {
            "utterance": "what is the total number of customers ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "ok .Who is the number one customer ? | Do you mean the customer with id 1 | yes",
            "sql": "select customers.* where customers.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 10,
    "final": {
        "utterance": "Show first name and id for all customers with at least 2 accounts.",
        "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you show me the first names of customers and the number of accounts they have ?",
            "sql": "select customers.customer_first_name , count ( * ) group_by accounts.customer_id"
        },
        {
            "utterance": "Which customers have at least 2 accounts ? List their first names please .",
            "sql": "select customers.customer_first_name group_by accounts.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the first name and last name for the customer with account name 900.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with the first and last name of the customer who has account name 900 ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name where accounts.account_name = value"
        },
        {
            "utterance": "Great ! Could you update this list to show me Meaghan 's email address and phone number as well ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name , customers.email_address , customers.phone_number where accounts.account_name = value"
        },
        {
            "utterance": "Great ! Finally , can you show me all other customers names ( first and last ) who have the same `` other account details '' details as Meaghan ?",
            "sql": "select distinct customers.customer_first_name , customers.customer_last_name where accounts.other_account_details = ( select accounts.other_account_details where accounts.account_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"
    },
    "interaction": [
        {
            "utterance": "Hello , I was wondering how many accounts are listed under the first name of John ?",
            "sql": "select count ( distinct accounts.account_id ) where customers.customer_first_name = value"
        },
        {
            "utterance": "How about Meaghan or Jessica ?",
            "sql": "select count ( distinct accounts.account_id ) where customers.customer_first_name = value or customers.customer_first_name = value"
        },
        {
            "utterance": "Okay , could you just give me the account names listed under Meaghan first ?",
            "sql": "select accounts.account_name where customers.customer_first_name = value"
        },
        {
            "utterance": "And what are the id 's for those accounts ?",
            "sql": "select accounts.account_id where customers.customer_first_name = value"
        },
        {
            "utterance": "Thank you so much , now back to the accounts listed for Jessica . What are the account names of those ?",
            "sql": "select accounts.account_name where customers.customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 13,
    "final": {
        "utterance": "Show id, first name and last name for all customers and the number of accounts.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    "interaction": [
        {
            "utterance": "What are first and last names of all customers ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select customers.customer_id"
        },
        {
            "utterance": "And what are their number of accounts ?",
            "sql": "select count ( * ) group_by accounts.customer_id"
        },
        {
            "utterance": "Yes , what type of accounts are there ?",
            "sql": "select distinct accounts.other_account_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the customer last name, id and phone number with most number of orders?",
        "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many orders did the person with the most orders have ?",
            "sql": "select count ( orders.* ) group_by orders.customer_id order_by count ( orders.* ) desc limit_value"
        },
        {
            "utterance": "who was that person ? Give me the id .",
            "sql": "select orders.customer_id group_by orders.customer_id order_by count ( orders.* ) desc limit_value"
        },
        {
            "utterance": "can you give me the last name , id , and phone number of the person with the most order ?",
            "sql": "select customers.customer_last_name , customers.customer_id , customers.phone_number group_by orders.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the customer last name, id and phone number with most number of orders?",
        "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many orders does the customer with the most orders have ?",
            "sql": "select count ( * ) group_by orders.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "who has the second most orders ? | Do you want the customer first name or something else ? | something else , that was a typo . What I meant to say was , how many orders does the person with the second most orders have ?",
            "sql": "select count ( * ) group_by orders.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "when was the customer with the most order 's last order placed ?",
            "sql": "select orders.date_order_placed where orders.customer_id in ( select orders.customer_id group_by orders.customer_id order_by count ( orders.* ) desc limit_value ) order_by orders.date_order_placed desc limit_value"
        },
        {
            "utterance": "what is that customer 's gender ?",
            "sql": "select customers.gender group_by orders.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the customer id, first and last name with most number of accounts.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the customer ID of the customer with the most number of accounts ?",
            "sql": "select accounts.customer_id group_by accounts.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is their first name ? | Do you mean their ? can you give more info ? | What is the customer first name of the customer with the most number of accounts ?",
            "sql": "select customers.customer_first_name group_by accounts.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the customer last name of the customer with the most number of accounts ?",
            "sql": "select customers.customer_last_name group_by accounts.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the most common participant type?",
        "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many participants on the table",
            "sql": "select count ( participants.* )"
        },
        {
            "utterance": "what is participant type code of karlee batz",
            "sql": "select participants.participant_type_code where participants.participant_details = value"
        },
        {
            "utterance": "what is most common participant type",
            "sql": "select participants.participant_type_code group_by participants.participant_type_code order_by count ( participants.* ) desc limit_value"
        },
        {
            "utterance": "what is the participant id in lupe deckow",
            "sql": "select participants.participant_id where participants.participant_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 1,
    "final": {
        "utterance": "How many events did not have any participants?",
        "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
    },
    "interaction": [
        {
            "utterance": "Show me the details of all participants .",
            "sql": "select participants_in_events.*"
        },
        {
            "utterance": "show me the details of the events . | here are the details of all events | How many events did not have any participants ?",
            "sql": "select count ( events.* ) where events.event_id not in ( select participants_in_events.event_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 2,
    "final": {
        "utterance": "what are the event details of the services that have the type code 'Marriage'?",
        "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'"
    },
    "interaction": [
        {
            "utterance": "How many events with `` Marriage '' type codes are there ? | There are 5 events with the `` Marriage '' service type code . | What are event details associated with the event of this type code ?",
            "sql": "select events.event_details where services.service_type_code = value"
        },
        {
            "utterance": "How many among them are with `` success '' ?",
            "sql": "select count ( * ) where services.service_type_code = value and events.event_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 3,
    "final": {
        "utterance": "How many events had participants whose details had the substring 'Dr.'",
        "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
    },
    "interaction": [
        {
            "utterance": "How many participants are there ?",
            "sql": "select count ( participants.* )"
        },
        {
            "utterance": "How about the total number of events ?",
            "sql": "select count ( distinct participants_in_events.event_id )"
        },
        {
            "utterance": "Can you list the events that have participents whose details had the substring 'Dr . ' ?",
            "sql": "select participants_in_events.event_id where participants.participant_details like value"
        },
        {
            "utterance": "Can you please list all those events with their participants ' names ?",
            "sql": "select participants_in_events.event_id , participants.participant_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 4,
    "final": {
        "utterance": "Which services type had both successful and failure event details?",
        "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'"
    },
    "interaction": [
        {
            "utterance": "Which services type had successful event details ?",
            "sql": "select services.service_type_code where events.event_details = value"
        },
        {
            "utterance": "What about events that had failure for their event details ?",
            "sql": "select services.service_type_code where events.event_details = value"
        },
        {
            "utterance": "Which service types had both success and failure for their event details ?",
            "sql": "select services.service_type_code where events.event_details = value intersect select services.service_type_code where events.event_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 5,
    "final": {
        "utterance": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    "interaction": [
        {
            "utterance": "Which event id does not have any participant with the detail Kneyatta Kuhn ?",
            "sql": "select events.event_id except select participants_in_events.event_id where participants.participant_details = value"
        },
        {
            "utterance": "And how about the detail `` Karlee Batz '' ?",
            "sql": "select events.event_id except select participants_in_events.event_id where participants.participant_details = value"
        },
        {
            "utterance": "Which event id does have a participant with the detail Kenyatta Kuhn ?",
            "sql": "select events.event_id where participants.participant_details = value"
        },
        {
            "utterance": "How many events have the event detail fail ?",
            "sql": "select count ( events.* ) where events.event_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the ids and details of events that have more than one participants?",
        "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What ids have more than one participant ? | Which kind of ID do you mean ? | Event ID and Service ID",
            "sql": "select events.event_id , events.service_id group_by events.event_id having count ( * ) > value"
        },
        {
            "utterance": "And which Event Details have more than one participant ? | Do you mean the Event Details of the event ? | I mean the details of the events that have more than one participant .",
            "sql": "select events.event_details group_by events.event_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 7,
    "final": {
        "utterance": "How many events had participants whose details had the substring 'Dr.'",
        "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( distinct participants_in_events.event_id )"
        },
        {
            "utterance": "How many of them had participants whose details had substring `` Dr '' ?",
            "sql": "select count ( * ) where participants.participant_details like value"
        },
        {
            "utterance": "What is his name ?",
            "sql": "select participants.participant_details where participants.participant_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the ids and details of events that have more than one participants?",
        "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Excellent ! Can you show me a list of the event IDs and event details for each of those five events which have more than one participant ?",
            "sql": "select events.event_id , events.event_details group_by events.event_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 0,
    "final": {
        "utterance": "Which college have both players with position midfielder and players with position defender?",
        "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "Tell me the Draft Class for the season 1996.0 ?",
            "sql": "select match_season.draft_class where match_season.season = value"
        },
        {
            "utterance": "Tell me the Draft Pick Number for the country 6 ? | For which season do you want ? | for 1998.0",
            "sql": "select match_season.draft_pick_number where match_season.season = value and match_season.country = value"
        },
        {
            "utterance": "Tell me the player for team 1 in the season 1996 ?",
            "sql": "select match_season.player where match_season.season = value and match_season.team = value"
        },
        {
            "utterance": "Which college have both players with position midfielder and players with position defender ?",
            "sql": "select match_season.college where match_season.position = value intersect select match_season.college where match_season.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name of colleges that have at least two players.",
        "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello Yes , I 'm interested to know which college has two players",
            "sql": "select match_season.college group_by match_season.college having count ( match_season.* ) = value"
        },
        {
            "utterance": "Oh , I see , and what are the names of the players from UCLA ?",
            "sql": "select match_season.player where match_season.college = value"
        },
        {
            "utterance": "Can you also tell me which position they play ?",
            "sql": "select match_season.player , match_season.position where match_season.college = value"
        },
        {
            "utterance": "Great , I 'm a bit curious as to how many players does UNLV have",
            "sql": "select count ( match_season.* ) where match_season.college = value"
        },
        {
            "utterance": "One player , okay was the season 1997 ?",
            "sql": "select match_season.season where match_season.college = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 2,
    "final": {
        "utterance": "Which college have both players with position midfielder and players with position defender?",
        "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "What colleges do the players play for ? | * I have left the chat * | Yes , please",
            "sql": "select distinct match_season.college"
        },
        {
            "utterance": "Thank you . And what are the names of the players who play for those schools ?",
            "sql": "select match_season.player"
        },
        {
            "utterance": "Thank you . Which players play midfielder ?",
            "sql": "select match_season.player where match_season.position = value"
        },
        {
            "utterance": "Which college have both players with position midfielder and players with position defender ?",
            "sql": "select match_season.college where match_season.position = value intersect select match_season.college where match_season.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all official native languages that contain the word \"English\".",
        "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    "interaction": [
        {
            "utterance": "how many different languages do countries speak ?",
            "sql": "select count ( distinct country.official_native_language )"
        },
        {
            "utterance": "how many of them are some form of English ?",
            "sql": "select count ( distinct country.official_native_language ) where country.official_native_language like value"
        },
        {
            "utterance": "please list those languages",
            "sql": "select country.official_native_language where country.official_native_language like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 4,
    "final": {
        "utterance": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE Indonesia CAPITAL",
            "sql": "select country.capital where country.country_name = value"
        },
        {
            "utterance": "WHAT IS THE Iran OF CAPITAL | Did you mean the capital of the country named Iran ? | YES EXACTLY",
            "sql": "select country.capital where country.country_name = value"
        },
        {
            "utterance": "HOW MANY DISTINCT OFFICIAL LANGUAGES ARE THERE AMONG COUNTRIES OF PLAYERS WHOSE POSITIONS ARE DEFENDERS",
            "sql": "select count ( distinct country.official_native_language ) where match_season.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the players and years played for players from team \"Columbus Crew\".",
        "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    "interaction": [
        {
            "utterance": "Show the players and years played for players from team `` Columbus Crew '' .",
            "sql": "select player.player , player.years_played where team.name = value"
        },
        {
            "utterance": "What is Hong 's singles record ?",
            "sql": "select player.singles_wl where player.player like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""
    },
    "interaction": [
        {
            "utterance": "how many countries are participated ?",
            "sql": "select count ( distinct match_season.country )"
        },
        {
            "utterance": "how many players are participated ?",
            "sql": "select count ( distinct match_season.player )"
        },
        {
            "utterance": "how many colleges are participated ?",
            "sql": "select count ( distinct match_season.college )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    "interaction": [
        {
            "utterance": "Yes , sorry that I did n't make it clear . I meant the corresponding name and ID of the country for Dublin as capital , in the `` country '' table .",
            "sql": "select country.country_name , country.country_id where country.capital = value"
        },
        {
            "utterance": "Thank you . Then could you please show me the positions of players from Ireland ? So country ID 4",
            "sql": "select match_season.position where match_season.country = value"
        },
        {
            "utterance": "Great , thank you . What about their names ?",
            "sql": "select match_season.player where match_season.country = value"
        },
        {
            "utterance": "Thank you . Then could you please show me the players from Iraq ? | Do you want their names ? | yes , the 'player ' field , so names .",
            "sql": "select match_season.player where country.country_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the distinct position of players from college UCLA or Duke.",
        "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    "interaction": [
        {
            "utterance": "What are the different colleges this season ?",
            "sql": "select distinct match_season.college"
        },
        {
            "utterance": "How many players are playing for the listed colleges ?",
            "sql": "select match_season.college , count ( match_season.* ) group_by match_season.college"
        },
        {
            "utterance": "What are the draft classes for the players from UCLA and Duke ?",
            "sql": "select distinct match_season.draft_class where match_season.college = value or match_season.college = value"
        },
        {
            "utterance": "Could you tell me the draft pick numbers of the players from those draft classes ?",
            "sql": "select match_season.draft_pick_number where match_season.draft_class in ( select distinct match_season.draft_class where match_season.college = value or match_season.college = value )"
        },
        {
            "utterance": "What players were those draft pick numbers for ? | do you want to see both the players and the draft pick numbers ? | Yes please .",
            "sql": "select match_season.player , match_season.draft_pick_number where match_season.draft_class in ( select distinct match_season.draft_class where match_season.college = value or match_season.college = value )"
        },
        {
            "utterance": "What are the positions of each of those players ?",
            "sql": "select match_season.position , match_season.player , match_season.draft_pick_number where match_season.draft_class in ( select distinct match_season.draft_class where match_season.college = value or match_season.college = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    "interaction": [
        {
            "utterance": "WHAT ARE THE DISTINCT POSITIONS OF THE PLAYERS FROM COUNTRY WHOSE CAPITAL IS DUBLIN",
            "sql": "select distinct match_season.position where country.capital = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many students live in HKG or CHI?",
        "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
    },
    "interaction": [
        {
            "utterance": "Where does the student live ? | Which student are you referring to ? | Is there any students living in HKG or CHI ?",
            "sql": "select count ( student.* ) where student.city_code = value or student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many students have a food allergy?",
        "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
    },
    "interaction": [
        {
            "utterance": "can you show me a list of allergies ?",
            "sql": "select allergy_type.allergy"
        },
        {
            "utterance": "can you show me a list of allergy name ?",
            "sql": "select allergy_type.allergy"
        },
        {
            "utterance": "what is their allergy types ?",
            "sql": "select distinct allergy_type.allergytype"
        },
        {
            "utterance": "how many students have a food allergy ?",
            "sql": "select count ( * ) where allergy_type.allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all student IDs who have at least two allergies.",
        "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( distinct has_allergy.stuid )"
        },
        {
            "utterance": "How many allergies are there ?",
            "sql": "select count ( distinct has_allergy.allergy )"
        },
        {
            "utterance": "Can you display all student IDs with at least two allergies ?",
            "sql": "select has_allergy.stuid group_by has_allergy.stuid having count ( has_allergy.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many female students have milk or egg allergies?",
        "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    "interaction": [
        {
            "utterance": "Can you list the student ids and their allergies ?",
            "sql": "select has_allergy.stuid , has_allergy.allergy"
        },
        {
            "utterance": "How many students have milk or egg allergies ?",
            "sql": "select count ( * ) where has_allergy.allergy = value or has_allergy.allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the student id of the oldest student.",
        "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
    },
    "interaction": [
        {
            "utterance": "What is the most common major ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "What is the name of the oldest student ?",
            "sql": "select student.lname , student.fname where student.age = ( select max ( student.age ) )"
        },
        {
            "utterance": "What is that student 's Id ?",
            "sql": "select student.stuid where student.age = ( select max ( student.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the last name and age of the student who has allergy to both milk and cat.",
        "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    "interaction": [
        {
            "utterance": "Which student have allergy to both milk and cats ? | Here are the student ids of the students who have allergies to both milk and cat . | What are their last names ?",
            "sql": "select student.lname where student.stuid in ( select has_allergy.stuid where has_allergy.allergy = value intersect select has_allergy.stuid where has_allergy.allergy = value )"
        },
        {
            "utterance": "And what about their age ?",
            "sql": "select student.lname , student.age where student.stuid in ( select has_allergy.stuid where has_allergy.allergy = value intersect select has_allergy.stuid where has_allergy.allergy = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which allergy has most number of students affected?",
        "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Most number of students affected by which allergy ?",
            "sql": "select has_allergy.allergy group_by has_allergy.allergy order_by count ( has_allergy.* ) desc limit_value"
        },
        {
            "utterance": "Which allergy affects student ID 1001",
            "sql": "select has_allergy.allergy where has_allergy.stuid = value"
        },
        {
            "utterance": "Which allergy affects student ID 1002",
            "sql": "select has_allergy.allergy where has_allergy.stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the average age of the students who have allergies with food and animal types.",
        "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
    },
    "interaction": [
        {
            "utterance": "Can you list all student IDs that have any kind of allergy ?",
            "sql": "select has_allergy.stuid"
        },
        {
            "utterance": "Can you filter the list to only show student IDs that have food and animal type allergies ?",
            "sql": "select has_allergy.stuid where allergy_type.allergytype = value intersect select has_allergy.stuid where allergy_type.allergytype = value"
        },
        {
            "utterance": "Can you display the ages associated with those student IDs ?",
            "sql": "select student.age where student.stuid in ( select has_allergy.stuid where allergy_type.allergytype = value intersect select has_allergy.stuid where allergy_type.allergytype = value )"
        },
        {
            "utterance": "What is the average of those 3 ages ?",
            "sql": "select avg ( student.age ) where student.stuid in ( select has_allergy.stuid where allergy_type.allergytype = value intersect select has_allergy.stuid where allergy_type.allergytype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List the first and last name of the students who do not have any food type allergy.",
        "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    "interaction": [
        {
            "utterance": "Which students have allergies ? | Do you want to return their first and last names or other info ? | Just names",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "How many students do n't have any type of allergy ?",
            "sql": "select count ( student.* ) where student.stuid not in ( select student.stuid )"
        },
        {
            "utterance": "What are their full names ?",
            "sql": "select student.lname , student.fname where student.stuid not in ( select student.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which major has most number of students?",
        "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which major has the highest number of students ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "What is the average age of the students in this major ?",
            "sql": "select avg ( student.age ) where student.major = ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        },
        {
            "utterance": "What is the sex of the students in this major ?",
            "sql": "select student.sex where student.major = ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which allergy type has least number of allergies?",
        "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many allergies does the food allergy type have ?",
            "sql": "select count ( allergy_type.allergy ) where allergy_type.allergytype = value"
        },
        {
            "utterance": "How many allergies does the animal allergy type have ?",
            "sql": "select count ( allergy_type.allergy ) where allergy_type.allergytype = value"
        },
        {
            "utterance": "How many allergies does the environmental allergy type have ?",
            "sql": "select count ( allergy_type.allergy ) where allergy_type.allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the number of male (sex is 'M') students who have some food type allery.",
        "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    "interaction": [
        {
            "utterance": "Could you please find the number of male ( sex is 'M ' ) students who have some type of food allergy ?",
            "sql": "select count ( student.* ) where student.sex = value and student.stuid in ( select student.stuid where allergy_type.allergytype = value )"
        },
        {
            "utterance": "What are their full names and the names of the food allergies they have ?",
            "sql": "select student.fname , student.lname , allergy_type.allergy where allergy_type.allergytype = value and student.sex = value"
        },
        {
            "utterance": "How many female students are allergic to cats ?",
            "sql": "select count ( * ) where has_allergy.allergy = value and student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    "interaction": [
        {
            "utterance": "how many female students presented on table",
            "sql": "select count ( student.* ) where student.sex = value"
        },
        {
            "utterance": "what is the age of smith | Do you mean the age of the student whose last name is Smith ? | exactly",
            "sql": "select student.age where student.lname = value"
        },
        {
            "utterance": "exactly | I mean which one do you want to know , first name or last name or both ? | i want first name",
            "sql": "select student.fname order_by student.advisor desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the first name and major of the students who are not allegry to soy.",
        "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    "interaction": [
        {
            "utterance": "How many different types of allergies are there ?",
            "sql": "select count ( distinct has_allergy.allergy )"
        },
        {
            "utterance": "What allergy is most prevalent among students ?",
            "sql": "select has_allergy.allergy group_by has_allergy.allergy order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many male students have a tree pollen allergy ?",
            "sql": "select count ( * ) where has_allergy.allergy = value and student.sex = value"
        },
        {
            "utterance": "How many students have a soy allergy ?",
            "sql": "select count ( student.* ) where student.stuid in ( select has_allergy.stuid where has_allergy.allergy = value )"
        },
        {
            "utterance": "How many students do n't have a soy allergy ?",
            "sql": "select count ( student.* ) where student.stuid not in ( select has_allergy.stuid where has_allergy.allergy = value )"
        },
        {
            "utterance": "Can you list them for me with their names and majors ? | First name ? | Yes please . First name and major .",
            "sql": "select student.fname , student.major where student.stuid not in ( select has_allergy.stuid where has_allergy.allergy = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which allergy has most number of students affected?",
        "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which allergy has the most number of students affected ?",
            "sql": "select has_allergy.allergy group_by has_allergy.allergy order_by count ( has_allergy.* ) desc limit_value"
        },
        {
            "utterance": "How many students has tree pollen affected ?",
            "sql": "select count ( has_allergy.stuid ) where has_allergy.allergy = value"
        },
        {
            "utterance": "Which allergy has the least number of students affected ?",
            "sql": "select has_allergy.allergy group_by has_allergy.allergy order_by count ( has_allergy.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which advisor has most number of students?",
        "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know advisor with the most number of students",
            "sql": "select student.advisor group_by student.advisor order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "What about the advisor with the least number of students",
            "sql": "select student.advisor group_by student.advisor order_by count ( student.* ) asc limit_value"
        },
        {
            "utterance": "Could you tell me the names of both advisors with the most and the least number of students ?",
            "sql": "select student.advisor where student.advisor = ( select student.advisor group_by student.advisor order_by count ( student.* ) asc limit_value ) or student.advisor = ( select student.advisor group_by student.advisor order_by count ( student.* ) desc limit_value ) group_by student.advisor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"
    },
    "interaction": [
        {
            "utterance": "Can you give me the allergies that the student with the first name Lisa has",
            "sql": "select allergy_type.allergy where student.fname = value"
        },
        {
            "utterance": "Are there any other names that have allergies | Do you want the first name or the last name of students other than Lisa who have allergies ? | Can i have the list of foods that Lisa is allergic to",
            "sql": "select allergy_type.allergy where student.fname = value and allergy_type.allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
    },
    "interaction": [
        {
            "utterance": "Can you get me the first names of students that have a milk allergy ?",
            "sql": "select distinct student.fname where has_allergy.allergy = value"
        },
        {
            "utterance": "Can you list the cities of these students ? | Do you want both the cities and the first names of the students ? | Yes . Can you please provide both simultaneously ?",
            "sql": "select distinct student.city_code , student.fname where has_allergy.allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which city does student Linda Smith live in?",
        "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "What is the student Id of Linda Smith ?",
            "sql": "select student.stuid where student.fname = value and student.lname = value"
        },
        {
            "utterance": "What is her age ?",
            "sql": "select student.age where student.fname = value and student.lname = value"
        },
        {
            "utterance": "What city is she in ?",
            "sql": "select student.city_code where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which major has least number of students? List the major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which city code of Smith ? | Is Smith first name or last name ? | first name",
            "sql": "select student.city_code where student.fname = value"
        },
        {
            "utterance": "What age of last name Kim ?",
            "sql": "select student.age where student.lname = value"
        },
        {
            "utterance": "What are the student id of city code WAS ?",
            "sql": "select student.stuid where student.city_code = value"
        },
        {
            "utterance": "Which major has least number of students ? List the major and the number of students .",
            "sql": "select student.major , count ( student.* ) group_by student.major order_by count ( student.major ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"
    },
    "interaction": [
        {
            "utterance": "Which major has between 2 and 30 number of students ? List major and the number of students .",
            "sql": "select student.major , count ( student.* ) group_by student.major having count ( student.major ) between value and value"
        },
        {
            "utterance": "Which major has highest number of students ? List the students First name ?",
            "sql": "select student.major , student.fname where student.major = ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        },
        {
            "utterance": "Which major has least number of students ? List the students First name ?",
            "sql": "select student.major , student.fname where student.major = ( select student.major group_by student.major order_by count ( student.* ) asc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many restaurant is the Sandwich type restaurant?",
        "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
    },
    "interaction": [
        {
            "utterance": "show me the name of the restaurant with ResID 1 ?",
            "sql": "select restaurant.resname where restaurant.resid = value"
        },
        {
            "utterance": "can you show me the address of the restaurant with ResID 1 ?",
            "sql": "select restaurant.address where restaurant.resid = value"
        },
        {
            "utterance": "Can you show me the rating of the restaurant with ResID 1 ?",
            "sql": "select restaurant.rating where restaurant.resid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;"
    },
    "interaction": [
        {
            "utterance": "Hello , how many students are over 18 ?",
            "sql": "select count ( student.* ) where student.age > value"
        },
        {
            "utterance": "Perfect , and how many of those students are majoring in 600 ?",
            "sql": "select count ( student.* ) where student.major = value"
        },
        {
            "utterance": "Can you list each student 's first and last name ? | Students majoring in 600 ? | Yes that are over 18 as well .",
            "sql": "select student.fname , student.lname where student.age > value and student.major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How many restaurant is the Sandwich type restaurant?",
        "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
    },
    "interaction": [
        {
            "utterance": "How many Restaurants are there ?",
            "sql": "select count ( restaurant.* )"
        },
        {
            "utterance": "Where is Subway located ?",
            "sql": "select restaurant.address where restaurant.resname = value"
        },
        {
            "utterance": "What is Subway 's rating ?",
            "sql": "select restaurant.rating where restaurant.resname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"
    },
    "interaction": [
        {
            "utterance": "List major and number of students for majors with 2 to 30 number of students",
            "sql": "select student.major , count ( student.* ) group_by student.major having count ( student.major ) between value and value"
        },
        {
            "utterance": "Which majors have between 2 and 20 students ? Show me major and number of students",
            "sql": "select student.major , count ( student.* ) group_by student.major having count ( student.major ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 7,
    "final": {
        "utterance": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';"
    },
    "interaction": [
        {
            "utterance": "Hi , could you please let me know the list of all female students who are older than 18 and not majoring in 600 ? | what did you want to get about female students who are older than 18 and not majoring in 600 ? | Oh sorry for the confusion , it would be great if I can see their first and last name .",
            "sql": "select student.fname , student.lname where student.age > value and student.major != value and student.sex = value"
        },
        {
            "utterance": "Thank you very much ! Then could you please show me the male students ' first and last name with the same condition ? Meaning older than 18 and not majoring in 600 .",
            "sql": "select student.fname , student.lname where student.age > value and student.major != value and student.sex = value"
        },
        {
            "utterance": "Thank you again . Could you please let me know who are the oldest among them with his age ? | Did you mean base on the last one question ? | yes please , so my question would be about the oldest male student who is not majoring in 600 .",
            "sql": "select student.fname , student.lname where student.major != value and student.sex = value order_by student.age desc limit_value"
        },
        {
            "utterance": "Then could you please let me know what is Ian Thornton 's major and advisor code ?",
            "sql": "select student.major , student.advisor where student.lname = value and student.fname = value"
        },
        {
            "utterance": "Thank you very much . This will be my last question , could you please show me the name of female students who are majoring in 520 , if there are any ? | Did you mean the full name about those ? | yes please , first and last name would be great .",
            "sql": "select student.fname , student.lname where student.sex = value and student.major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which city does student Linda Smith live in?",
        "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "What is the name of the city the student by the name of Linda Smith is from ? | Do you mean the code of the city ? since we do n't have the name of cities . | Yes , please",
            "sql": "select student.city_code where student.fname = value and student.lname = value"
        },
        {
            "utterance": "What are the first and last names of all students with the sex `` F '' ?",
            "sql": "select student.fname , student.lname where student.sex = value"
        },
        {
            "utterance": "What are their city codes ?",
            "sql": "select student.city_code where student.sex = value"
        },
        {
            "utterance": "What is the name of the oldest student ?",
            "sql": "select student.fname , student.lname order_by student.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the age of student Linda Smith?",
        "sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "What is the age of the student named Linda Smith ?",
            "sql": "select student.age where student.fname = value and student.lname = value"
        },
        {
            "utterance": "Yes , please . | First OR last OR both ? | Both , please . Sorry !",
            "sql": "select student.fname , student.lname order_by student.age desc limit_value"
        },
        {
            "utterance": "Who is the advisor of the youngest student ?",
            "sql": "select student.advisor order_by student.age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How long does student Linda Smith spend on the restaurant in total?",
        "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "Are there any other students with the same city code as Linda Smith ?",
            "sql": "select student.* where student.city_code = ( select student.city_code where student.fname = value and student.lname = value ) and student.fname != value and student.lname != value"
        },
        {
            "utterance": "Of those three students , can you tell me which of them have more time spent in restaurants than Linda Smith ?",
            "sql": "select student.stuid , sum ( visits_restaurant.spent ) where student.city_code = ( select student.city_code where student.fname = value and student.lname = value ) and student.fname != value and student.lname != value group_by student.stuid having sum ( visits_restaurant.spent ) > ( select sum ( visits_restaurant.spent ) where student.fname = value and student.lname = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the id of the project with least number of documents?",
        "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the ID of the project with the least number of documents ?",
            "sql": "select documents.project_id group_by documents.project_id order_by count ( documents.* ) asc limit_value"
        },
        {
            "utterance": "What is the ID of the project with the most number of documents ?",
            "sql": "select documents.project_id group_by documents.project_id order_by count ( documents.* ) desc limit_value"
        },
        {
            "utterance": "What is the document date of project ID 105 ? | Do you mean Document ID 105 | yes",
            "sql": "select documents.document_date where documents.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the project detail for the project with document \"King Book\"?",
        "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\""
    },
    "interaction": [
        {
            "utterance": "What is the project detail for the project with document `` King Book '' ?",
            "sql": "select projects.project_details where documents.document_name = value"
        },
        {
            "utterance": "What is the document date for the project with document `` King Book '' ?",
            "sql": "select documents.document_date where documents.document_name = value"
        },
        {
            "utterance": "How many documents are there with the document type code `` CV '' ?",
            "sql": "select count ( documents.document_date ) where documents.document_type_code = value"
        },
        {
            "utterance": "How many documents are there with the document type code `` BK '' ?",
            "sql": "select count ( documents.document_date ) where documents.document_type_code = value"
        },
        {
            "utterance": "What are the document dates of all documents with the document type code `` BK '' ?",
            "sql": "select documents.document_date where documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the ids for projects with at least 2 documents.",
        "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Could you please show me the ids of the projects with at least 2 documents ?",
            "sql": "select documents.project_id group_by documents.project_id having count ( documents.* ) > = value"
        },
        {
            "utterance": "What about those with at least 3 documents ?",
            "sql": "select documents.project_id group_by documents.project_id having count ( documents.* ) > = value"
        },
        {
            "utterance": "What are the dates of those , please ?",
            "sql": "select documents.project_id , documents.document_date group_by documents.project_id having count ( documents.* ) > = value"
        },
        {
            "utterance": "What are the dates of the projects with at least 2 documents , please ? | Do you mean the projects of documents , not projects , right ? | Yes",
            "sql": "select documents.document_date where documents.project_id in ( select documents.project_id group_by documents.project_id having count ( documents.* ) > = value )"
        },
        {
            "utterance": "What are the project ids of those ?",
            "sql": "select documents.project_id group_by documents.project_id having count ( documents.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 3,
    "final": {
        "utterance": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'"
    },
    "interaction": [
        {
            "utterance": "Hello , how many total documents are there ?",
            "sql": "select count ( documents.* )"
        },
        {
            "utterance": "Can you tell me the document type code , name , and description of the document with the name 'Noel CV ' ?",
            "sql": "select documents.document_type_code , documents.document_name , documents.document_description where documents.document_name = value"
        },
        {
            "utterance": "Perfect , and can you do the same with 'King Book ' ?",
            "sql": "select documents.document_type_code , documents.document_name , documents.document_description where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
    },
    "interaction": [
        {
            "utterance": "What is the name of the document on project `` Graph Database project '' ?",
            "sql": "select documents.document_name where projects.project_details = value"
        },
        {
            "utterance": "What are the document dates ?",
            "sql": "select documents.document_date where projects.project_details = value"
        },
        {
            "utterance": "What is their description ?",
            "sql": "select documents.document_description where projects.project_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 5,
    "final": {
        "utterance": "How many documents do not have any expense?",
        "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
    },
    "interaction": [
        {
            "utterance": "How many documents do not have expense reports ?",
            "sql": "select count ( documents.* ) where documents.document_id not in ( select documents_with_expenses.document_id )"
        },
        {
            "utterance": "What category would the report fall into ?",
            "sql": "select documents_with_expenses.budget_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 6,
    "final": {
        "utterance": "Show ids for all documents with budget types described as 'Government'.",
        "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\""
    },
    "interaction": [
        {
            "utterance": "Could you show me the IDs for all documents with budget types described as 'Government ' ?",
            "sql": "select documents_with_expenses.document_id where ref_budget_codes.budget_type_description = value"
        },
        {
            "utterance": "What are the document details of each of those ?",
            "sql": "select documents_with_expenses.document_details where ref_budget_codes.budget_type_description = value"
        },
        {
            "utterance": "Could you show me the IDs for all documents with budget types described as 'Organisation ' ?",
            "sql": "select documents_with_expenses.document_id where ref_budget_codes.budget_type_description = value"
        },
        {
            "utterance": "What are the budget type codes for those ?",
            "sql": "select ref_budget_codes.budget_type_code where ref_budget_codes.budget_type_description = value"
        },
        {
            "utterance": "Can you tell me the document details for the highest numbered document id please ?",
            "sql": "select documents_with_expenses.document_details order_by documents_with_expenses.document_id desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 7,
    "final": {
        "utterance": "How many documents do not have any expense?",
        "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
    },
    "interaction": [
        {
            "utterance": "How many documents are there ?",
            "sql": "select count ( documents.* )"
        },
        {
            "utterance": "How many of them have expenses ?",
            "sql": "select count ( documents_with_expenses.document_id )"
        },
        {
            "utterance": "What are the different document types ?",
            "sql": "select distinct documents.document_type_code"
        },
        {
            "utterance": "Is GV the only budget type ?",
            "sql": "select distinct documents_with_expenses.budget_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the account details with the largest value or with value having char '5' in it?",
        "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""
    },
    "interaction": [
        {
            "utterance": "What are the account details with the largest value ?",
            "sql": "select accounts.account_details order_by accounts.account_details desc limit_value"
        },
        {
            "utterance": "What about the account details with the value having the character '5 ' in it , please ?",
            "sql": "select accounts.account_details where accounts.account_details like value"
        },
        {
            "utterance": "What are the statement ids of those accounts , please ?",
            "sql": "select accounts.statement_id where accounts.account_details like value"
        },
        {
            "utterance": "What about the account details with the value having the character '9 ' in it , please ?",
            "sql": "select accounts.account_details where accounts.account_details like value"
        },
        {
            "utterance": "Could you tell me the account ids of those accounts too ?",
            "sql": "select accounts.account_id where accounts.account_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"
    },
    "interaction": [
        {
            "utterance": "can you show me the document date ?",
            "sql": "select documents.document_date"
        },
        {
            "utterance": "can you show me the document name ?",
            "sql": "select documents.document_name"
        },
        {
            "utterance": "can you show me document type code ?",
            "sql": "select documents.document_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"
    },
    "interaction": [
        {
            "utterance": "Tell me the document date of the project id 30 ?",
            "sql": "select documents.document_type_code where documents.project_id = value"
        },
        {
            "utterance": "Tell me the statement details of the statement id 197 ?",
            "sql": "select statements.statement_details where statements.statement_id = value"
        },
        {
            "utterance": "Tell me the document name of the document id 42 ?",
            "sql": "select documents.document_name where documents.document_id = value"
        },
        {
            "utterance": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project ' ?",
            "sql": "select statements.statement_details , documents.document_name where statements.statement_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the project id and detail for the project with at least two documents?",
        "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show me the project id | Do you mean you wan na see the whole project id of the table `` Projects '' ? | Yes",
            "sql": "select projects.project_id"
        },
        {
            "utterance": "Show me the details for the whole project id of the table `` projects ''",
            "sql": "select projects.project_id , projects.project_details"
        },
        {
            "utterance": "Show me the project id and details for the project with at least two documents",
            "sql": "select projects.project_id , projects.project_details group_by projects.project_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which statement has the most number of accounts ? | Do you want to know its statement id ? | Yes , what is its statement id ?",
            "sql": "select accounts.statement_id group_by accounts.statement_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Thank you . Can you also show me the statement detail for the statement with the most number of accounts ?",
            "sql": "select accounts.statement_id , statements.statement_details group_by accounts.statement_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the document type code with most number of documents?",
        "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What code has the most number of documents ? | The type code that has the most number of documents is BK | How many documents are in BK ?",
            "sql": "select count ( documents.* ) where documents.document_type_code = value"
        },
        {
            "utterance": "How about in CV ?",
            "sql": "select count ( documents.* ) where documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"
    },
    "interaction": [
        {
            "utterance": "What are the ids of documents with the letter 's ' in the name with any expense budgets ?",
            "sql": "select documents.document_id where documents.document_name like value"
        },
        {
            "utterance": "What are the document type codes of documents with the letter 's ' in the name with any expense budgets ?",
            "sql": "select documents.document_type_code where documents.document_name like value"
        },
        {
            "utterance": "What are the project id of documents with the letter 's ' in the name with any expense budgets ?",
            "sql": "select documents.project_id where documents.document_name like value"
        },
        {
            "utterance": "What are the ids of documents with the letter 'a ' in the name with any expense budgets ?",
            "sql": "select documents.document_id where documents.document_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the statement id and the statement detail for the statement with most number of accounts ?",
            "sql": "select accounts.statement_id , statements.statement_details group_by accounts.statement_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many account ids are on the table ?",
            "sql": "select count ( accounts.account_id )"
        },
        {
            "utterance": "What is the statement detail of statement id 57 ?",
            "sql": "select statements.statement_details where statements.statement_id = value"
        },
        {
            "utterance": "What is the account details of account id 61 ?",
            "sql": "select accounts.account_details where accounts.account_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
    },
    "interaction": [
        {
            "utterance": "Show the document name and the document date for all documents on project with details 'Graph Database project '",
            "sql": "select documents.document_name , documents.document_date where projects.project_details = value"
        },
        {
            "utterance": "Which of those documents is the oldest ? | which kind of information the oldest documents do you want me to give you ? | Give me the document name from those documents that has the earliest document date .",
            "sql": "select documents.document_name where projects.project_details = value order_by documents.document_date limit_value"
        },
        {
            "utterance": "What is its document date ?",
            "sql": "select documents.document_date where projects.project_details = value order_by documents.document_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the budget type code with most number of documents.",
        "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the budget type code with the largest number of documents ?",
            "sql": "select documents_with_expenses.budget_type_code group_by documents_with_expenses.budget_type_code order_by count ( documents_with_expenses.* ) desc limit_value"
        },
        {
            "utterance": "What is the most common document detail ?",
            "sql": "select documents_with_expenses.document_details group_by documents_with_expenses.document_details order_by count ( documents_with_expenses.* ) desc limit_value"
        },
        {
            "utterance": "What about the most common budget type code ?",
            "sql": "select documents_with_expenses.budget_type_code group_by documents_with_expenses.budget_type_code order_by count ( documents_with_expenses.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the school name and type for schools without a school bus.",
        "sql": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)"
    },
    "interaction": [
        {
            "utterance": "What are the school names of the schools without school buses ?",
            "sql": "select school.school where school.school_id not in ( select school_bus.school_id )"
        },
        {
            "utterance": "Can you please get me the types of those schools ?",
            "sql": "select school.type where school.school_id not in ( select school_bus.school_id )"
        },
        {
            "utterance": "what are schools in Hawaii have school buses ?",
            "sql": "select school.school where school.location like value and school.school_id in ( select school_bus.school_id )"
        },
        {
            "utterance": "What about in Indonesia ?",
            "sql": "select school.school where school.location like value and school.school_id in ( select school_bus.school_id )"
        },
        {
            "utterance": "How many private schools are in Hawaii ?",
            "sql": "select count ( school.* ) where school.location like value and school.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 1,
    "final": {
        "utterance": "find the name of driver who is driving the school bus with the longest working history.",
        "sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list the driver ids and whether they drive full time or not ?",
            "sql": "select school_bus.driver_id , school_bus.if_full_time"
        },
        {
            "utterance": "Hmm , I also want to know their years working .",
            "sql": "select school_bus.driver_id , school_bus.years_working , school_bus.if_full_time"
        },
        {
            "utterance": "Can you tell me the name of the driver who is driving the school bus with the longest working history ?",
            "sql": "select driver.name order_by school_bus.years_working desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 2,
    "final": {
        "utterance": "How many drivers are from Hartford city or younger than 40?",
        "sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40"
    },
    "interaction": [
        {
            "utterance": "Can you show me the number of drivers who are from Hartford City ?",
            "sql": "select count ( driver.* ) where driver.home_city = value"
        },
        {
            "utterance": "Oh , I want the names of the drivers .",
            "sql": "select driver.name where driver.home_city = value"
        },
        {
            "utterance": "Hmm , please show me names of the drivers who are younger than 40 .",
            "sql": "select driver.name where driver.age < value"
        },
        {
            "utterance": "Can you count the number of drivers who are from Hartford City or younger than 40 ?",
            "sql": "select count ( driver.* ) where driver.home_city = value or driver.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the home city with the most number of drivers.",
        "sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many drivers are there ?",
            "sql": "select count ( driver.* )"
        },
        {
            "utterance": "What is the average age of your drivers ?",
            "sql": "select avg ( driver.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 4,
    "final": {
        "utterance": "Show home city where at least two drivers older than 40 are from.",
        "sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many driver are presented on the table",
            "sql": "select count ( driver.* )"
        },
        {
            "utterance": "list out the driver names on the table",
            "sql": "select driver.name"
        },
        {
            "utterance": "what is the age of Matthew Ritter",
            "sql": "select driver.age where driver.name = value"
        },
        {
            "utterance": "what is the home city of Dan Carter",
            "sql": "select driver.home_city where driver.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of the drivers without a school bus.",
        "sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"
    },
    "interaction": [
        {
            "utterance": "what are the names of all drivers ?",
            "sql": "select driver.name"
        },
        {
            "utterance": "also give me their driver ids",
            "sql": "select driver.name , driver.driver_id"
        },
        {
            "utterance": "what are the number of years for working for each driver and their names ?",
            "sql": "select driver.name , school_bus.years_working where driver.driver_id = school_bus.driver_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the school name and driver name for all school buses.",
        "sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me all school names and bus driver names for each of the school buses in this database ?",
            "sql": "select school.school , driver.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the party with drivers from Hartford and drivers older than 40.",
        "sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40"
    },
    "interaction": [
        {
            "utterance": "How many of the drivers are over 40 ?",
            "sql": "select count ( driver.* ) where driver.age > value"
        },
        {
            "utterance": "How many of these drivers are also from Hartford ?",
            "sql": "select count ( driver.* ) where driver.home_city = value and driver.age > value"
        },
        {
            "utterance": "What is the party of these 4 drivers ?",
            "sql": "select driver.party where driver.home_city = value and driver.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "sql": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the customer id that spends the most",
            "sql": "select payments.customer_id group_by payments.customer_id order_by sum ( payments.amount_paid ) desc limit_value"
        },
        {
            "utterance": "For that Customer with ID 12 , what was the amount they spend ?",
            "sql": "select sum ( payments.amount_paid ) where payments.customer_id = value"
        },
        {
            "utterance": "What was the payment type of customer with ID 12 ?",
            "sql": "select payments.payment_type_code where payments.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 1,
    "final": {
        "utterance": "Are the customers holding coupons with amount 500 bad or good?",
        "sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500"
    },
    "interaction": [
        {
            "utterance": "How many customers are there",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many of them have a coupon amount of 500",
            "sql": "select count ( * ) where discount_coupons.coupon_amount = value"
        },
        {
            "utterance": "What is their name | First name or last name ? | What is their customer id",
            "sql": "select customers.customer_id where discount_coupons.coupon_amount = value"
        },
        {
            "utterance": "Are they a good or bad customer",
            "sql": "select customers.good_or_bad_customer where discount_coupons.coupon_amount = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "sql": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'"
    },
    "interaction": [
        {
            "utterance": "can you show me a list of product description ?",
            "sql": "select products_for_hire.product_description"
        },
        {
            "utterance": "what are the start date and end of date of the booking that has booked the product named 'book collection A ' ?",
            "sql": "select bookings.booking_start_date , bookings.booking_end_date where products_for_hire.product_name = value"
        },
        {
            "utterance": "what is the average of booked amount ?",
            "sql": "select avg ( products_booked.booked_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of products whose availability equals to 1?",
        "sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1"
    },
    "interaction": [
        {
            "utterance": "what is the daily hire cost of the product id 1",
            "sql": "select products_for_hire.daily_hire_cost where products_for_hire.product_id = value"
        },
        {
            "utterance": "what is the status date of the product name Book collection C ?",
            "sql": "select view_product_availability.status_date where products_for_hire.product_name = value"
        },
        {
            "utterance": "what is the product description of the product id 3 ?",
            "sql": "select products_for_hire.product_description where products_for_hire.product_id = value"
        },
        {
            "utterance": "what are the names of products whose availability equals to 1 ?",
            "sql": "select products_for_hire.product_name where view_product_availability.available_yn = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the maximum, minimum, and average booked count for the products booked?",
        "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked"
    },
    "interaction": [
        {
            "utterance": "what is the highest booked amount",
            "sql": "select max ( products_booked.booked_amount )"
        },
        {
            "utterance": "what is the minimum booked count for products booked",
            "sql": "select min ( products_booked.booked_count )"
        },
        {
            "utterance": "what is the maximum booked count",
            "sql": "select max ( products_booked.booked_count )"
        },
        {
            "utterance": "what is the least booked amount",
            "sql": "select min ( products_booked.booked_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "sql": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20"
    },
    "interaction": [
        {
            "utterance": "How many 'Cutlery ' type products are there ?",
            "sql": "select count ( products_for_hire.product_id ) where products_for_hire.product_type_code = value"
        },
        {
            "utterance": "Okay good to know . How many products have a daily hire cost lower than 20 ?",
            "sql": "select count ( products_for_hire.product_id ) where products_for_hire.daily_hire_cost < value"
        },
        {
            "utterance": "Thank you for that info . Now , how many 'cutlery ' products have the daily hire cost lower than 20 ?",
            "sql": "select count ( products_for_hire.product_id ) where products_for_hire.product_type_code = value and products_for_hire.daily_hire_cost < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 6,
    "final": {
        "utterance": "How many products are never booked with amount higher than 200?",
        "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )"
    },
    "interaction": [
        {
            "utterance": "Can you list the product ids and the booked amounts ?",
            "sql": "select products_for_hire.product_id , products_booked.booked_amount"
        },
        {
            "utterance": "What product ids are never booked with amount higher than 200 ?",
            "sql": "select products_for_hire.product_id where products_for_hire.product_id not in ( select products_booked.product_id where products_booked.booked_amount > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the coupon IDs and coupon amounts ?",
            "sql": "select discount_coupons.coupon_id , discount_coupons.coupon_amount"
        },
        {
            "utterance": "Great ! Can you filter this list to show just the rows the coupons and coupon amounts that are associated with both values of good and bad in the `` good or bad customer '' category .",
            "sql": "select discount_coupons.coupon_id , discount_coupons.coupon_amount where customers.good_or_bad_customer = value intersect select discount_coupons.coupon_id , discount_coupons.coupon_amount where customers.good_or_bad_customer = value"
        },
        {
            "utterance": "Awesome ! Can you tell me what the date issued is for each of these two coupon_ids ?",
            "sql": "select discount_coupons.date_issued where discount_coupons.coupon_id in ( select discount_coupons.coupon_id where customers.good_or_bad_customer = value intersect select discount_coupons.coupon_id where customers.good_or_bad_customer = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 8,
    "final": {
        "utterance": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "sql": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    "interaction": [
        {
            "utterance": "Hello , what is the total number of bookings ?",
            "sql": "select count ( bookings.* )"
        },
        {
            "utterance": "Perfect , and how many different customers were there ?",
            "sql": "select count ( distinct bookings.customer_id )"
        },
        {
            "utterance": "Awesome ! And finally , can you list the customer id , first name , and total bookings of each customer ?",
            "sql": "select customers.customer_id , customers.first_name , count ( * ) group_by customers.customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the maximum, minimum, and average booked count for the products booked?",
        "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked"
    },
    "interaction": [
        {
            "utterance": "Could you show me the maximum booked count for the booked products ?",
            "sql": "select max ( products_booked.booked_count )"
        },
        {
            "utterance": "Could you also add the minimum number of booked products ?",
            "sql": "select max ( products_booked.booked_count ) , min ( products_booked.booked_count )"
        },
        {
            "utterance": "Finally , could you add the average booked count for the products ?",
            "sql": "select max ( products_booked.booked_count ) , min ( products_booked.booked_count ) , avg ( products_booked.booked_count )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the id of the product that is booked for 3 times?",
        "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3"
    },
    "interaction": [
        {
            "utterance": "actually i mean how many product are on the table | Did you mean to ask for the distinct number of product ids in the table Products_Booked ? | exactly",
            "sql": "select count ( distinct products_booked.product_id )"
        },
        {
            "utterance": "what is the highest booked amount",
            "sql": "select max ( products_booked.booked_amount )"
        },
        {
            "utterance": "what is the least booked count",
            "sql": "select min ( products_booked.booked_count )"
        },
        {
            "utterance": "what is the id of the product that is booked for 5 times ?",
            "sql": "select products_booked.product_id where products_booked.booked_count = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the product description of the product booked with an amount of 102.76?",
        "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76"
    },
    "interaction": [
        {
            "utterance": "What is the product ID for the booked amount 102.76 ?",
            "sql": "select products_booked.product_id where products_booked.booked_amount = value"
        },
        {
            "utterance": "What is the product description that matches that product ID ?",
            "sql": "select products_for_hire.product_description where products_booked.booked_amount = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 0,
    "final": {
        "utterance": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"
    },
    "interaction": [
        {
            "utterance": "How many exhibitions have an attendance of more than 100 ?",
            "sql": "select count ( * ) where exhibition_record.attendance > value"
        },
        {
            "utterance": "How many exhibitions have a ticket price below 10 ?",
            "sql": "select count ( * ) where exhibition.ticket_price < value"
        },
        {
            "utterance": "What are the dates of the exhibitions who have an attendance of more than 100 ?",
            "sql": "select exhibition_record.date where exhibition_record.attendance > value"
        },
        {
            "utterance": "What was the theme of the party held in the latest year ?",
            "sql": "select exhibition.theme order_by exhibition.year desc limit_value"
        },
        {
            "utterance": "What was the ticket price of that party ?",
            "sql": "select exhibition.ticket_price order_by exhibition.year desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the artist who joined latest?",
        "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what country is Vijay Singh from ?",
            "sql": "select artist.country where artist.name = value"
        },
        {
            "utterance": "who is the latest artist ?",
            "sql": "select artist.name order_by artist.year_join desc limit_value"
        },
        {
            "utterance": "what year did Vijay Singh joined ?",
            "sql": "select artist.year_join where artist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 2,
    "final": {
        "utterance": "Show names for artists without any exhibition.",
        "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the names of the artists who do n't have any exhibitions ?",
            "sql": "select artist.name where artist.artist_id not in ( select exhibition.artist_id )"
        },
        {
            "utterance": "What are their countries ?",
            "sql": "select artist.country where artist.artist_id not in ( select exhibition.artist_id )"
        },
        {
            "utterance": "What are their ages ?",
            "sql": "select artist.age where artist.artist_id not in ( select exhibition.artist_id )"
        },
        {
            "utterance": "What is the name of the oldest artist ?",
            "sql": "select artist.name order_by artist.age desc limit_value"
        },
        {
            "utterance": "Did he have any exhibitions ?",
            "sql": "select artist.name where artist.artist_id in ( select exhibition.artist_id ) and artist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name and country for the artist with most number of exhibitions?",
        "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name for the artist with the most number of exhibitions ?",
            "sql": "select artist.name group_by exhibition.artist_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What country is he from ?",
            "sql": "select artist.country group_by exhibition.artist_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Who is the artist with the least number of exhibitions ?",
            "sql": "select * group_by exhibition.artist_id order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
    },
    "interaction": [
        {
            "utterance": "Show the theme for exhibitions with records of an attendance below 100",
            "sql": "select exhibition.theme where exhibition_record.attendance < value"
        },
        {
            "utterance": "Show the theme for exhibitions with records of an attendance above 500",
            "sql": "select exhibition.theme where exhibition_record.attendance > value"
        },
        {
            "utterance": "Show me the dates of those exhibitions",
            "sql": "select exhibition_record.date where exhibition_record.attendance > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
    },
    "interaction": [
        {
            "utterance": "how many exhibition are presented on the table",
            "sql": "select count ( exhibition.* )"
        },
        {
            "utterance": "ok fine then list out the artists name",
            "sql": "select artist.name"
        },
        {
            "utterance": "what is the age of Vijay Singh",
            "sql": "select artist.age where artist.name = value"
        },
        {
            "utterance": "what is the highest ticket price on the table",
            "sql": "select exhibition.ticket_price order_by exhibition.ticket_price desc limit_value"
        },
        {
            "utterance": "What is the theme and artist name for the exhibition with a ticket price higher than the average ? ''",
            "sql": "select exhibition.theme , artist.name where exhibition.ticket_price > ( select avg ( exhibition.ticket_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 6,
    "final": {
        "utterance": "How many artists are above age 46 and joined after 1990?",
        "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the artist names ?",
            "sql": "select artist.name"
        },
        {
            "utterance": "Excellent ! Can you filter this list to show only the names of artists above the age of 46 ?",
            "sql": "select artist.name where artist.age > value"
        },
        {
            "utterance": "Great ! Can you tell me how many of these artists above age 46 joined after 1990 ?",
            "sql": "select count ( artist.* ) where artist.age > value and artist.year_join > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the average and minimum age of all artists from United States.",
        "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
    },
    "interaction": [
        {
            "utterance": "What is the highest age of the the Artists from the United States ?",
            "sql": "select max ( artist.age ) where artist.country = value"
        },
        {
            "utterance": "How many artists from the USA joined after 1993 ?",
            "sql": "select count ( artist.artist_id ) where artist.country = value and artist.year_join > value"
        },
        {
            "utterance": "When did Vijay Singh join ?",
            "sql": "select artist.year_join where artist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"
    },
    "interaction": [
        {
            "utterance": "Show the average ticket prices for exhibitions for all years before 2009 ?",
            "sql": "select avg ( exhibition.ticket_price ) where exhibition.year < value"
        },
        {
            "utterance": "Show minimum ticket prices for exhibitions for all years before 2009 ?",
            "sql": "select min ( exhibition.ticket_price ) where exhibition.year < value"
        },
        {
            "utterance": "Show maximum ticket prices for exhibitions for all years before 2009 ?",
            "sql": "select max ( exhibition.ticket_price ) where exhibition.year < value"
        },
        {
            "utterance": "Show average ticket price for exhibitions for year 2005 ?",
            "sql": "select avg ( exhibition.ticket_price ) where exhibition.year = value"
        },
        {
            "utterance": "Show average ticket price for exhibitions for all years before 2006 ?",
            "sql": "select avg ( exhibition.ticket_price ) where exhibition.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 9,
    "final": {
        "utterance": "How many artists are above age 46 and joined after 1990?",
        "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    "interaction": [
        {
            "utterance": "what is the average of artist ages ?",
            "sql": "select avg ( artist.age )"
        },
        {
            "utterance": "who is the oldest artist ? | do you want to show his/her name ? | yes",
            "sql": "select artist.name order_by artist.age desc limit_value"
        },
        {
            "utterance": "can you show me artist 's countries ? | did you mean the country of the oldest artist or countries of all the artists ? | countries of all the artists",
            "sql": "select distinct artist.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the average and minimum age of all artists from United States.",
        "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
    },
    "interaction": [
        {
            "utterance": "Can you list the ages of all the artists from United States ?",
            "sql": "select artist.age where artist.country = value"
        },
        {
            "utterance": "What is the average age of all the artists from United States ?",
            "sql": "select avg ( artist.age ) where artist.country = value"
        },
        {
            "utterance": "Hmm , I also want to know the minimum age of all the artists from United States please .",
            "sql": "select min ( artist.age ) where artist.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"
    },
    "interaction": [
        {
            "utterance": "What are the names of mountains in the area ?",
            "sql": "select mountain.name"
        },
        {
            "utterance": "How many of these have a height above 5000 ?",
            "sql": "select count ( mountain.name ) where mountain.height > value"
        },
        {
            "utterance": "What are the names of these mountains ?",
            "sql": "select mountain.name where mountain.height > value"
        },
        {
            "utterance": "Which of these 3 mountains is the tallest ?",
            "sql": "select mountain.name where mountain.height > value and mountain.prominence > value order_by mountain.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"
    },
    "interaction": [
        {
            "utterance": "list the countries with mountains with height less than 5200",
            "sql": "select mountain.country where mountain.height < value"
        },
        {
            "utterance": "what are countries with mountains with height more than 5600",
            "sql": "select mountain.country where mountain.height > value"
        },
        {
            "utterance": "list both the countries with mountains height less than 5200 and height more than 5600 in the same table",
            "sql": "select mountain.country where mountain.height > value intersect select mountain.country where mountain.height < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    "interaction": [
        {
            "utterance": "How many mountains in this table ?",
            "sql": "select count ( mountain.* )"
        },
        {
            "utterance": "Show the distinct names of mountains climbed by climbers from country `` West Germany '' .",
            "sql": "select distinct mountain.name where climber.country = value"
        },
        {
            "utterance": "Please show me the name of the highest mountain .",
            "sql": "select mountain.name order_by mountain.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the times used by climbers to climb mountains in Country Uganda.",
        "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
    },
    "interaction": [
        {
            "utterance": "Please list the names of all the climbers .",
            "sql": "select climber.name"
        },
        {
            "utterance": "Can you show me the climbers who climbed mountains in Country Uganda ? | The climbers with IDs of 9 and 10 climbed mountains in the country Uganda | Hmm , I want to know the times used by the climbers to climb mountains in Country Uganda please .",
            "sql": "select climber.time where mountain.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 4,
    "final": {
        "utterance": "List the countries that have more than one mountain.",
        "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "what is height of Kibo ( Uhuru Pk )",
            "sql": "select mountain.height where mountain.name = value"
        },
        {
            "utterance": "how many mountain does Tanzania have ? | Do you mean the number of mountains in the country Tanzania\uff1f | yes",
            "sql": "select count ( mountain.* ) where mountain.country = value"
        },
        {
            "utterance": "what is the range of Mount Kenya ( Batian ) in country kenya",
            "sql": "select mountain.range where mountain.country = value and mountain.name = value"
        },
        {
            "utterance": "highest mountain in Tanzania | Do you mean the name of the highest mountain in country Tanzania ? | yes",
            "sql": "select mountain.name where mountain.country = value order_by mountain.height desc limit_value"
        },
        {
            "utterance": "The name of the smallest mountain from all countries | Do you mean the name of the lowest mountain ? | YES",
            "sql": "select mountain.name order_by mountain.height limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"
    },
    "interaction": [
        {
            "utterance": "What are the names of the mountains with height more than 5000 ?",
            "sql": "select mountain.name where mountain.height > value"
        },
        {
            "utterance": "Which of those has a prominence greater than 1000 ?",
            "sql": "select mountain.name where mountain.height > value and mountain.prominence > value"
        },
        {
            "utterance": "And in what range is each of those located ?",
            "sql": "select mountain.range where mountain.height > value and mountain.prominence > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the highest mountain?",
        "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many mountains in this table ?",
            "sql": "select count ( mountain.* )"
        },
        {
            "utterance": "How many countries in this table ?",
            "sql": "select count ( distinct mountain.country )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)"
    },
    "interaction": [
        {
            "utterance": "What is the market share of Chabudai ?",
            "sql": "select furniture.market_rate where furniture.name = value"
        },
        {
            "utterance": "What is its price ?",
            "sql": "select furniture_manufacte.price_in_dollar where furniture.name = value"
        },
        {
            "utterance": "What is its ID ?",
            "sql": "select furniture_manufacte.manufacturer_id where furniture.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the companies that produce the most expensive furniture | Do you mean the names of manufacturers that produce the most expensive furniture ? | yes , the names of the company that produces the most expensive furniture",
            "sql": "select manufacturer.name order_by furniture_manufacte.price_in_dollar desc limit_value"
        },
        {
            "utterance": "what is the id of this name",
            "sql": "select manufacturer.manufacturer_id order_by furniture_manufacte.price_in_dollar desc limit_value"
        },
        {
            "utterance": "list both the id and number of shops for the company that produces the most expensive furniture in the same table",
            "sql": "select manufacturer.manufacturer_id , manufacturer.num_of_shops order_by furniture_manufacte.price_in_dollar desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 2,
    "final": {
        "utterance": "Return the name and id of the furniture with the highest market rate.",
        "sql": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Return the name and ID of the furniture with the highest market rate",
            "sql": "select furniture.name , furniture.furniture_id order_by furniture.market_rate desc limit_value"
        },
        {
            "utterance": "rank the furniture according to the number of pieces available | Do you want a list of furniture name sorted by its corresponding number of component ? | Yes , Name and corresponding number of components .",
            "sql": "select furniture.name , furniture.num_of_component order_by furniture.num_of_component"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which furniture has the highest price ? | The id of the furniture with the highest price is 7 . | What is the name of the manufacturer that sells that furniture ?",
            "sql": "select manufacturer.name order_by furniture_manufacte.price_in_dollar desc limit_value"
        },
        {
            "utterance": "What is the manufacturer ID for Tomorrow ?",
            "sql": "select manufacturer.manufacturer_id where manufacturer.name = value"
        },
        {
            "utterance": "How many shops does Tomorrow have ?",
            "sql": "select manufacturer.num_of_shops where manufacturer.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10"
    },
    "interaction": [
        {
            "utterance": "Hello , can you find me the names of the furniture with less then 6 components ?",
            "sql": "select furniture.name where furniture.num_of_component < value"
        },
        {
            "utterance": "Thanks can you find me the names of the furniture with more then 10 components ?",
            "sql": "select furniture.name where furniture.num_of_component > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of furnitures whose prices are lower than the highest price.",
        "sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)"
    },
    "interaction": [
        {
            "utterance": "how many furnitures on the table",
            "sql": "select count ( furniture.* )"
        },
        {
            "utterance": "which furnitures are highest market rate | The name of the furniture that has the highest market rate is Billiard table | what about the highest price of furniture",
            "sql": "select furniture.name order_by furniture_manufacte.price_in_dollar desc limit_value"
        },
        {
            "utterance": "what is highest num of component ?",
            "sql": "select furniture.num_of_component order_by furniture.num_of_component desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 6,
    "final": {
        "utterance": "find the total market rate of the furnitures that have the top 2 market shares.",
        "sql": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "how can find total market rate of the furniture",
            "sql": "select sum ( furniture.market_rate )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the most common type code across products.",
        "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of the various product type codes ?",
            "sql": "select products.product_type_code"
        },
        {
            "utterance": "Wonderful ! Of these product type codes , can you tell me which code is the most common one ?",
            "sql": "select products.product_type_code group_by products.product_type_code order_by count ( products.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name"
    },
    "interaction": [
        {
            "utterance": "Show the names of products that are in at least two events in ascending alphabetical order of product name .",
            "sql": "select products.product_name group_by products.product_name having count ( * ) > = value order_by products.product_name"
        },
        {
            "utterance": "What is the product price of men suits ?",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "What is the most expensive product price ?",
            "sql": "select max ( products.product_price )"
        },
        {
            "utterance": "How about the least expensive ?",
            "sql": "select min ( products.product_price )"
        },
        {
            "utterance": "What product type is the one that has the least expensive product price ? | Did you want to get Product Type Code that has the least expensive product price ? | Yes",
            "sql": "select products.product_type_code order_by products.product_price limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the product type codes that have at least two products.",
        "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Can you list all the product type codes that have two or more products ?",
            "sql": "select products.product_type_code group_by products.product_type_code having count ( products.* ) > = value"
        },
        {
            "utterance": "What is the name of the product with the greatest price ?",
            "sql": "select products.product_name order_by products.product_price desc limit_value"
        },
        {
            "utterance": "What are the names of all products with prices over 3000 ?",
            "sql": "select products.product_name where products.product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of products that are not in any event.",
        "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)"
    },
    "interaction": [
        {
            "utterance": "how many products in total are not in any event ?",
            "sql": "select count ( products.* ) where products.product_id not in ( select products_in_events.product_id )"
        },
        {
            "utterance": "and can you tell me the names of those 5 products ?",
            "sql": "select products.product_name where products.product_id not in ( select products_in_events.product_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\""
    },
    "interaction": [
        {
            "utterance": "Tell me the prices of Dining | Sorry , there is no product named `` Dining '' . There is , however , a product named `` Dinning '' . This might be a typo . Do you want to know the prices of `` Dinning '' ? | Tell me the prices of Dinning",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "Show me the prices of Trading Policy",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "Show me the prices of Business Policy",
            "sql": "select products.product_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the most common type code across products.",
        "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common type code of all the products ?",
            "sql": "select products.product_type_code group_by products.product_type_code order_by count ( products.* ) desc limit_value"
        },
        {
            "utterance": "What are the product names of all products with the type code `` Food '' ?",
            "sql": "select products.product_name where products.product_type_code = value"
        },
        {
            "utterance": "What are the prices of those ?",
            "sql": "select products.product_price where products.product_type_code = value"
        },
        {
            "utterance": "What are the names and prices of all products with the type code books ?",
            "sql": "select products.product_name , products.product_price where products.product_type_code = value"
        },
        {
            "utterance": "What are the name and type code of the product with the highest price ?",
            "sql": "select products.product_name , products.product_type_code order_by products.product_price desc limit_value"
        },
        {
            "utterance": "Can you list all product names and their corresponding type codes of the products with prices below the average price ?",
            "sql": "select products.product_name , products.product_type_code where products.product_price < ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\""
    },
    "interaction": [
        {
            "utterance": "Show me the prices of the products named `` Dining ''",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "Show me the prices of the products named Trading Policy",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "Show me the product type code of products named `` Dining ''",
            "sql": "select distinct products.product_type_code where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of products that are in at least two events.",
        "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many products in this table ?",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "How many Product events in this table ?",
            "sql": "select count ( products_in_events.* )"
        },
        {
            "utterance": "Show the names of products that are in at least 3 events ?",
            "sql": "select products.product_name group_by products.product_name having count ( * ) > = value"
        },
        {
            "utterance": "Find the top price ?",
            "sql": "select products.product_price order_by products.product_price desc limit_value"
        },
        {
            "utterance": "find average of the price ?",
            "sql": "select avg ( products.product_price )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you show me a list of all of the different product type codes ?",
            "sql": "select products.product_type_code"
        },
        {
            "utterance": "Nice ! Can you filter this list to show the Product Type Codes for the entries which have either a product price higher than 4500 or a product price lower than 3000 ?",
            "sql": "select products.product_type_code where products.product_price > value intersect select products.product_type_code where products.product_price < value"
        },
        {
            "utterance": "Awesome ! What product price is associated with the Product Type Code of `` food '' ?",
            "sql": "select products.product_price where products.product_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 0,
    "final": {
        "utterance": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""
    },
    "interaction": [
        {
            "utterance": "The column `` product_id `` in Table : `` problems '' refers to column `` product_id '' in Table : `` product '' | could give more info about this question ? | List the ids of the problem from the product ''voluptatem '' that are reported after 1995 ?",
            "sql": "select problems.problem_id where product.product_name = value and problems.date_problem_reported > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 1,
    "final": {
        "utterance": "For each product which has problems, what are the number of problems and the product id?",
        "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"
    },
    "interaction": [
        {
            "utterance": "What are the number of products that had problems ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "Could you please list their product ids ?",
            "sql": "select product.product_id"
        },
        {
            "utterance": "What are the number of problems each of these had ?",
            "sql": "select count ( * ) , product.product_id group_by product.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""
    },
    "interaction": [
        {
            "utterance": "What is the staff id of Bosco ?",
            "sql": "select staff.staff_id where staff.staff_last_name = value"
        },
        {
            "utterance": "Are there any problems reported by staff id 1 ?",
            "sql": "select problems.problem_id where problems.reported_by_staff_id = value"
        },
        {
            "utterance": "How many total problems are there reported by staff ID 1 ?",
            "sql": "select count ( problems.* ) where problems.reported_by_staff_id = value"
        },
        {
            "utterance": "What is the full set of information associated with staff with last name Bosco ?",
            "sql": "select staff.* where staff.staff_last_name = value"
        },
        {
            "utterance": "What are the ids of the problems reported by staff first name Lacey ?",
            "sql": "select problems.problem_id where staff.staff_first_name = value"
        },
        {
            "utterance": "Find the ids of all problems reported by staff with last name Bosco",
            "sql": "select problems.problem_id where staff.staff_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 3,
    "final": {
        "utterance": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"
    },
    "interaction": [
        {
            "utterance": "Please list staff names of staff assigned to at least 1 problem | First or last name ? | both",
            "sql": "select staff.staff_first_name , staff.staff_last_name where problem_log.problem_id = value"
        },
        {
            "utterance": "Now just list the staff who are assigned to problem id 1",
            "sql": "select staff.staff_first_name , staff.staff_last_name where problem_log.problem_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
    },
    "interaction": [
        {
            "utterance": "What is the date problem reported of w ?",
            "sql": "select problems.date_problem_reported where problems.problem_description = value"
        },
        {
            "utterance": "What is the name of the person who reported a problem on 1976-12-18 23:54:41 ? | Here are the first and last names of the staff who reported a problem on 1976-12-18 23:54:41 . | What are her other staff details ?",
            "sql": "select staff.other_staff_details where problems.date_problem_reported = value and problems.reported_by_staff_id = staff.staff_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 5,
    "final": {
        "utterance": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"
    },
    "interaction": [
        {
            "utterance": "can you list the products that have problems | Did you mean to ask for the product names of products that have problems ? | yes",
            "sql": "select product.product_name"
        },
        {
            "utterance": "give me all the problem ids",
            "sql": "select product.product_id"
        },
        {
            "utterance": "list all product details",
            "sql": "select product.product_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
    },
    "interaction": [
        {
            "utterance": "Find the first and last name of the staff members who reported problems from the product `` rem '' but not `` aut '' ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name where product.product_name = value except select staff.staff_first_name , staff.staff_last_name where product.product_name = value"
        },
        {
            "utterance": "What about staff members who reported problems for the product `` rem '' ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name where product.product_name = value"
        },
        {
            "utterance": "What about staff members who reported problems for the product `` aut '' ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name where product.product_name = value"
        },
        {
            "utterance": "What is the name of the staff member who reported problem id 1 ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name where problems.problem_id = value"
        },
        {
            "utterance": "What is the staff id of that person ?",
            "sql": "select staff.staff_id where problems.problem_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id of the problem log that is created most recently?",
        "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me the total number of problem logs ?",
            "sql": "select count ( problem_log.* )"
        },
        {
            "utterance": "When was the oldest one created ?",
            "sql": "select problem_log.log_entry_date order_by problem_log.log_entry_date asc limit_value"
        },
        {
            "utterance": "How about the most recent one ?",
            "sql": "select problem_log.log_entry_date order_by problem_log.log_entry_date desc limit_value"
        },
        {
            "utterance": "What is its id ?",
            "sql": "select problem_log.problem_log_id order_by problem_log.log_entry_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the oldest log id and its corresponding problem id?",
        "sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "list out the problem logs",
            "sql": "select problem_log.*"
        },
        {
            "utterance": "show the problem status code on Middleware",
            "sql": "select problem_log.problem_status_code where problem_log.problem_category_code = value"
        },
        {
            "utterance": "show the other log details",
            "sql": "select problem_log.* where problem_log.problem_category_code != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 9,
    "final": {
        "utterance": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
    },
    "interaction": [
        {
            "utterance": "What is the staff ID of the staff with the first name Christop ?",
            "sql": "select staff.staff_id where staff.staff_first_name = value"
        },
        {
            "utterance": "How many problems have been reported under staff ID 10 ?",
            "sql": "select count ( * ) where staff.staff_id = value"
        },
        {
            "utterance": "Can you give me a list of the problem descriptions he reported ?",
            "sql": "select problems.problem_description where staff.staff_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
    },
    "interaction": [
        {
            "utterance": "What are the IDs of problems that the staff member Dameon Frami reported ?",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "What are the IDs of problems that the staff member Jolie Weber reported ?",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "What is the most common problem ID reported by all staff ?",
            "sql": "select problems.problem_id group_by problems.problem_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""
    },
    "interaction": [
        {
            "utterance": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst ?",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value intersect select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "How many staffs are on the list ?",
            "sql": "select count ( staff.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the staff members first and last names ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name"
        },
        {
            "utterance": "Can you filter this list to show just the staff members who reported problems with the product named `` rem '' ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name where product.product_name = value"
        },
        {
            "utterance": "Interesting ... Okay , I can only see the first three entries on that table , so I assumed `` rem '' and `` auf '' were lower down and I simply could n't see them . Can you show me a list of all of the different product names on the `` Product '' table ?",
            "sql": "select product.product_name"
        },
        {
            "utterance": "Can you show me which three products received the three highest total number of reported problems ?",
            "sql": "select product.product_name group_by problems.product_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the headquarters that have at least two companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Names of headquarters that have at least two companies ?",
            "sql": "select company.headquarters group_by company.headquarters having count ( company.* ) > = value"
        },
        {
            "utterance": "What is tbe name of the company in china ?",
            "sql": "select company.name where company.headquarters = value"
        },
        {
            "utterance": "What industry does petrochina belong to ?",
            "sql": "select company.industry where company.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the headquarters that have at least two companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all company IDs , with their names and headquarters locations ?",
            "sql": "select company.company_id , company.name , company.headquarters"
        },
        {
            "utterance": "Could you filter this same list to list only the Headquarter countries that have more than one company in them ?",
            "sql": "select company.headquarters group_by company.headquarters having count ( company.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 2,
    "final": {
        "utterance": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC"
    },
    "interaction": [
        {
            "utterance": "What are some companies with more than 200 sales ?",
            "sql": "select company.name where company.sales_in_billion > value"
        },
        {
            "utterance": "Can you sort the list in descending order of sales and profits",
            "sql": "select company.name where company.sales_in_billion > value order_by company.sales_in_billion , company.profits_in_billion desc"
        },
        {
            "utterance": "How many companies are in the list ?",
            "sql": "select count ( company.* ) where company.sales_in_billion > value order_by company.sales_in_billion , company.profits_in_billion desc"
        },
        {
            "utterance": "Can you show me the list in descending order of sales and profits again ?",
            "sql": "select company.name where company.sales_in_billion > value order_by company.sales_in_billion , company.profits_in_billion desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the most common headquarter for companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which company have a higher sales ? | do you mean which company have a highest sales ? | yes",
            "sql": "select company.name order_by company.sales_in_billion desc limit_value"
        },
        {
            "utterance": "What are the kinds of industries in the table ?",
            "sql": "select distinct company.industry"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 4,
    "final": {
        "utterance": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working"
    },
    "interaction": [
        {
            "utterance": "Show the name of the company with company_id 1.0 ?",
            "sql": "select company.name where company.company_id = value"
        },
        {
            "utterance": "Show the names of companies and that of employees in descending order of number of years working for that employee ?",
            "sql": "select company.name , people.name order_by employment.year_working"
        },
        {
            "utterance": "Show all companies with Headquarters USA ? | Did you mean to show the company IDs ? | yes",
            "sql": "select company.company_id where company.headquarters = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of companies in the banking or retailing industry?",
        "sql": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\""
    },
    "interaction": [
        {
            "utterance": "What companies are in the banking or retailing industry ? | Do you want their company id or name ? | What are the names of the companies in the banking or retail industries ?",
            "sql": "select company.name where company.industry = value or company.industry = value"
        },
        {
            "utterance": "What are the total sales in billions of all of these companies combined ?",
            "sql": "select sum ( company.sales_in_billion ) where company.industry = value or company.industry = value"
        },
        {
            "utterance": "and what is their total market value in billions ?",
            "sql": "select sum ( company.market_value_in_billion ) where company.industry = value or company.industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the headquarter of the company with the largest sales?",
        "sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which company has the largest sales ? | Did you mean the name of the company with the largest sales ? | Yes thr name of the company that has the largest sales",
            "sql": "select company.name order_by company.sales_in_billion desc limit_value"
        },
        {
            "utterance": "Where is the headquarters of royal dutch shell ?",
            "sql": "select company.headquarters where company.name = value"
        },
        {
            "utterance": "What kind of industry does royal dutch shell belongs to ?",
            "sql": "select company.industry where company.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of people that are not employed by any company",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)"
    },
    "interaction": [
        {
            "utterance": "Give me the nationality of the unemployed people",
            "sql": "select people.nationality where people.people_id not in ( select employment.people_id )"
        },
        {
            "utterance": "Which college did Reggie Lewis graduated from",
            "sql": "select people.graduation_college where people.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "sql": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\""
    },
    "interaction": [
        {
            "utterance": "hi , can you show me headquarters that have companies in the banking industry ?",
            "sql": "select distinct company.headquarters where company.industry = value"
        },
        {
            "utterance": "and can you also show me headquarters that have companies in the oil and gas industry ?",
            "sql": "select distinct company.headquarters where company.industry = value"
        },
        {
            "utterance": "and can you show me only those headquarters that have both companies in oil and gas as well as banking industry ?",
            "sql": "select company.headquarters where company.industry = value intersect select company.headquarters where company.industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the most common headquarter for companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different countries serve as headquarters ?",
            "sql": "select count ( distinct company.headquarters )"
        },
        {
            "utterance": "What is the most popular industry ?",
            "sql": "select company.industry group_by company.industry order_by count ( company.* ) desc limit_value"
        },
        {
            "utterance": "What company has the highest market value ? | Did you mean the max Profits_in_Billion ? | No , I mean Market_Value_in_Billion .",
            "sql": "select company.name order_by company.market_value_in_billion desc limit_value"
        },
        {
            "utterance": "What headquarter is the most popular ?",
            "sql": "select company.headquarters group_by company.headquarters order_by count ( company.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of employees that work for companies with sales bigger than 200.",
        "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200"
    },
    "interaction": [
        {
            "utterance": "Please show me the names of employees that work for companies with sales bigger than 200",
            "sql": "select people.name where company.sales_in_billion > value"
        },
        {
            "utterance": "please show me the average age of those employees",
            "sql": "select avg ( people.age ) where company.sales_in_billion > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 11,
    "final": {
        "utterance": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC"
    },
    "interaction": [
        {
            "utterance": "what is the name of the company with more than 200 sales ?",
            "sql": "select company.name where company.sales_in_billion > value"
        },
        {
            "utterance": "where is the headquarters for BP",
            "sql": "select company.headquarters where company.name = value"
        },
        {
            "utterance": "in what industry is BP",
            "sql": "select company.industry where company.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 0,
    "final": {
        "utterance": "Which state has the most customers?",
        "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which state has the most customers ?",
            "sql": "select customers.state group_by customers.state order_by count ( customers.* ) limit_value"
        },
        {
            "utterance": "How many customers have the customer type code `` Good Credit Rating '' ?",
            "sql": "select count ( customers.customer_id ) where customers.customer_type_code = value"
        },
        {
            "utterance": "What are the states of all customers who who have the customer type code Good Credit Rating ?",
            "sql": "select customers.state where customers.customer_type_code = value"
        },
        {
            "utterance": "What are the customer ids of all customers who who have the customer type code Good Credit Rating ?",
            "sql": "select customers.customer_id where customers.customer_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 1,
    "final": {
        "utterance": "Which products has been complained by the customer who has filed least amount of complaints?",
        "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who has filed the least amounts of complaints ?",
            "sql": "select distinct customers.customer_id group_by customers.customer_id order_by count ( * ) limit_value"
        },
        {
            "utterance": "Which product have they complained about ? | Who do you mean by `` they '' ? | Customer , 113 .",
            "sql": "select distinct products.product_name group_by customers.customer_id having customers.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many complaints did each customer file ? | Did you want the customer ids and number of complaints fold for each customer ? | Yes , please .",
            "sql": "select complaints.customer_id , count ( complaints.* ) group_by complaints.customer_id"
        },
        {
            "utterance": "Can you tell me the id of the product with most complaints ?",
            "sql": "select complaints.product_id group_by complaints.product_id order_by count ( complaints.* ) desc limit_value"
        },
        {
            "utterance": "What are the emails of the customers who filed a complaint of this product ?",
            "sql": "select customers.email_address where complaints.product_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the phone number of the customer who has filed the most recent complaint?",
        "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What date was the most recent complaint raised ?",
            "sql": "select complaints.date_complaint_raised order_by complaints.date_complaint_raised desc limit_value"
        },
        {
            "utterance": "Was this complaint closed ? | Do you mean whether the complaint which raised at 2007-10-14 21:50:43 was closed ? | Correct . Has the complaint raised at 2007-10-14 21:50:43 been closed ?",
            "sql": "select complaints.date_complaint_closed where complaints.date_complaint_raised = value"
        },
        {
            "utterance": "What is the customer id for that complaint ? | Do you mean the customer id for the complaint which raised at 2007-10-14 21:50:43 ? | Correct . What is the customer id for the complaint raised at 2007-10-14 21:50:43 ?",
            "sql": "select complaints.customer_id where complaints.date_complaint_raised = value"
        },
        {
            "utterance": "What is the phone number for customer id 118 ?",
            "sql": "select customers.phone_number where customers.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of complaints with Product Failure type for each complaint status.",
        "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code"
    },
    "interaction": [
        {
            "utterance": "Find the number of complaints with Product Failure type for each complaint status ?",
            "sql": "select complaints.complaint_status_code , count ( complaints.* ) where complaints.complaint_type_code = value group_by complaints.complaint_status_code"
        },
        {
            "utterance": "What were the complaint outcome code of each of those claims ? | Here are the complaint outcome codes of each of Product Failure type claims . | What is the complaint status code of each of those claims ?",
            "sql": "select complaints.complaint_status_code where complaints.complaint_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 5,
    "final": {
        "utterance": "Which complaint status has more than 3 records on file?",
        "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "Hello , which complaint id has more than 3 records present on this list ?",
            "sql": "select complaints.complaint_id group_by complaints.complaint_id having count ( complaints.* ) > value"
        },
        {
            "utterance": "Okay , I see . Which complaint status code has more than 3 records on this list ?",
            "sql": "select complaints.complaint_status_code group_by complaints.complaint_status_code having count ( complaints.* ) > value"
        },
        {
            "utterance": "Alright ! Now can you update this list to show the associated complain type code for these two status codes ?",
            "sql": "select complaints.complaint_status_code , complaints.complaint_type_code group_by complaints.complaint_status_code having count ( complaints.* ) > value"
        },
        {
            "utterance": "Finally , can you show me the complaint outcome code for each of these two entries ?",
            "sql": "select complaints.complaint_outcome_code group_by complaints.complaint_status_code having count ( complaints.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the last name of the staff who has handled the first ever complaint?",
        "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHAT IS LAST NAME OF THE STAFF WHO HAS HANDLED THE FIRST EVER COMPLAINT ?",
            "sql": "select staff.last_name order_by complaints.date_complaint_raised limit_value"
        },
        {
            "utterance": "THE FIRST NAME OF THE STAFF WHO HAS HANDLED THE LAST COMPLAINT",
            "sql": "select staff.first_name order_by complaints.date_complaint_raised desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the email and phone number of the customers who have never filed a complaint before.",
        "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"
    },
    "interaction": [
        {
            "utterance": "Hello , how many complaints have we had ?",
            "sql": "select count ( complaints.* )"
        },
        {
            "utterance": "How about customers ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many customers have filed complaints ?",
            "sql": "select count ( customers.* ) where customers.customer_id in ( select complaints.customer_id )"
        },
        {
            "utterance": "And how many have not filed complaints ?",
            "sql": "select count ( customers.* ) where customers.customer_id not in ( select complaints.customer_id )"
        },
        {
            "utterance": "What is that customer 's phone number ?",
            "sql": "select customers.phone_number where customers.customer_id not in ( select complaints.customer_id )"
        },
        {
            "utterance": "what about that customer 's email ?",
            "sql": "select customers.email_address where customers.customer_id not in ( select complaints.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the phone number of the customer who has filed the most recent complaint?",
        "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the phone number of the customer who has filed the most recent complaint ?",
            "sql": "select customers.phone_number order_by complaints.date_complaint_raised desc limit_value"
        },
        {
            "utterance": "The customer who filed the latest complaint uses which phone number ?",
            "sql": "select customers.phone_number order_by complaints.date_complaint_raised desc limit_value"
        },
        {
            "utterance": "What is the address of the customer who filed the most recent complaint ?",
            "sql": "select customers.address_line_1 , customers.address_line_2 order_by complaints.date_complaint_raised desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of member in charge of greatest number of events?",
        "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What member is in charge of the most events ?",
            "sql": "select party_events.member_in_charge_id , count ( party_events.* ) group_by party_events.member_in_charge_id order_by count ( party_events.* ) desc limit_value"
        },
        {
            "utterance": "What is the name of Member ID 4 ?",
            "sql": "select member.member_name where member.member_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of party with most number of members?",
        "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "WHO IS THE HON TONY ABBOTT | did you mean the Member ID of HON TONY ABBOTT | YES EXACTLY",
            "sql": "select member.member_id where member.member_name = value"
        },
        {
            "utterance": "WHAT IS THE NAME OF PARTY WITH MOST NUMBER OF MEMBERS",
            "sql": "select party.party_name group_by member.party_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the minister who took office after 1961 or before 1959.",
        "sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"
    },
    "interaction": [
        {
            "utterance": "How many ministers were there ?",
            "sql": "select count ( party.minister )"
        },
        {
            "utterance": "Show the minister who took office after 1961 or before 1959 .",
            "sql": "select party.minister where party.took_office > value or party.took_office < value"
        },
        {
            "utterance": "Which minister took office just before 1959 ?",
            "sql": "select party.minister where party.took_office < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of parties with at least 2 events?",
        "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the names of parties with 2 events",
            "sql": "select party.party_name group_by party_events.party_id having count ( * ) = value"
        },
        {
            "utterance": "what is the minister name of the party with 2 events",
            "sql": "select party.minister group_by party_events.party_id having count ( * ) = value"
        },
        {
            "utterance": "what are the minister names of the parties with 1 events",
            "sql": "select party.minister group_by party_events.party_id having count ( * ) = value"
        },
        {
            "utterance": "what is the name of the party with region ID 3",
            "sql": "select party.party_name where party.region_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 4,
    "final": {
        "utterance": "How many Annual Meeting events happened in the United Kingdom region?",
        "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
    },
    "interaction": [
        {
            "utterance": "Hello , can you please provide me with a list of all Event IDs and Event names ?",
            "sql": "select party_events.event_id , party_events.event_name"
        },
        {
            "utterance": "Can you please filter this list to include only the rows that have 'Annual Meeting ' as the Event Name ?",
            "sql": "select party_events.event_id , party_events.event_name where party_events.event_name = value"
        },
        {
            "utterance": "Can you show me which of the Events on this list took place in the United Kingdom ?",
            "sql": "select party_events.event_id , party_events.event_name where region.region_name = value and party_events.event_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 5,
    "final": {
        "utterance": "Show party names and the number of events for each party.",
        "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    "interaction": [
        {
            "utterance": "show the party names and the number of events for party id 2",
            "sql": "select party.party_name , count ( * ) where party_events.party_id = value group_by party_events.party_id"
        },
        {
            "utterance": "find the count of the event name took place for the party id 1",
            "sql": "select party_events.party_id , count ( party.party_name ) where party_events.party_id = value"
        },
        {
            "utterance": "find the took office and region id for the event id 1",
            "sql": "select party.took_office , party.region_id where party_events.party_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all member names who are not in charge of any event.",
        "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id"
    },
    "interaction": [
        {
            "utterance": "Hi how are you ! ? Can you provide me with a list of all of the different member names ?",
            "sql": "select distinct member.member_name"
        },
        {
            "utterance": "Excellent ! Thanks for that ! Can you add to this list the event name associated with each member name ?",
            "sql": "select distinct member.member_name , party_events.event_name"
        },
        {
            "utterance": "Alright ! Can you please show me a list of all member names who are not associated with any event ?",
            "sql": "select member.member_name except select member.member_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 7,
    "final": {
        "utterance": "Show party names and the number of events for each party.",
        "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    "interaction": [
        {
            "utterance": "How many parties are there ?",
            "sql": "select count ( party.* )"
        },
        {
            "utterance": "Can you show me the names of the five parties ?",
            "sql": "select party.party_name"
        },
        {
            "utterance": "Can you tell me how many events are at each party ?",
            "sql": "select count ( * ) group_by party_events.party_id"
        },
        {
            "utterance": "Yes .",
            "sql": "select party.party_name , count ( * ) group_by party_events.party_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the customer who has the most policies listed?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many policies does America Jaskolski have listed ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        },
        {
            "utterance": "What about Mrs. Hanna Willms ? | Did you mean the number of policies Mrs. Hanna Willms has listed ? | Yes",
            "sql": "select count ( * ) where customers.customer_name = value"
        },
        {
            "utterance": "How many policies are listed total ?",
            "sql": "select count ( customers_policies.policy_id )"
        },
        {
            "utterance": "What is the Customer Name who has the most policies listed ?",
            "sql": "select customers.customer_name group_by customers.customer_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 1,
    "final": {
        "utterance": "What are all the policy types of the customer that has the most policies listed?",
        "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are all the policy types of the customer that has the most policies listed ?",
            "sql": "select distinct available_policies.policy_type_code where customers.customer_name = ( select customers.customer_name group_by customers.customer_name order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "What is the name of the customer ?",
            "sql": "select customers.customer_name group_by customers.customer_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the phone number for life insurance ?",
            "sql": "select available_policies.customer_phone where available_policies.policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    "interaction": [
        {
            "utterance": "How many service names in this table ?",
            "sql": "select count ( services.service_name )"
        },
        {
            "utterance": "How many customers in this table ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many customer names in this table ?",
            "sql": "select count ( distinct customers.customer_name )"
        },
        {
            "utterance": "How many policy ids are in this table ?",
            "sql": "select count ( first_notification_of_loss.policy_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 3,
    "final": {
        "utterance": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What is the customer ID of America Jaskolski",
            "sql": "select customers.customer_id where customers.customer_name = value"
        },
        {
            "utterance": "How many customer listed ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "What is the date opened for customer ID 214 ?",
            "sql": "select customers_policies.date_opened where customers_policies.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the names of users who do not have a first notification of loss record.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which customers do not have a first notification of loss record ? | What attributes of the customers that do not have a first notification of loss record would you like to know ? | Can you tell me their names ?",
            "sql": "select customers.customer_name except select customers.customer_name"
        },
        {
            "utterance": "Can you tell me America Jaskolski 's policy id ?",
            "sql": "select first_notification_of_loss.policy_id where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 5,
    "final": {
        "utterance": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "How many policies are listed for the customer named `` Dayana Robel '' ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        },
        {
            "utterance": "And for America Jaskolski ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        },
        {
            "utterance": "How many policies does Ellsworth Paucek have listed ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 6,
    "final": {
        "utterance": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What policies does Dayana Robel have ? | Do you mean the policy types of the customer named `` Dayana Robel '' ? | yes",
            "sql": "select distinct available_policies.policy_type_code where customers.customer_name = value"
        },
        {
            "utterance": "What is it 's phone number ?",
            "sql": "select distinct available_policies.customer_phone where customers.customer_name = value"
        },
        {
            "utterance": "And on which date was this policy opened ?",
            "sql": "select customers_policies.date_opened where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you provide me with a list of all of the service names ?",
            "sql": "select services.service_name"
        },
        {
            "utterance": "Thank you very much for that ! Could you please filter this list to show only the Service Names which occur more than once on the First Notification of Loss table ?",
            "sql": "select services.service_name group_by first_notification_of_loss.service_id having count ( * ) > value"
        },
        {
            "utterance": "My apologies ! I meant to ask for the list to be filtered to show only the Service Names which occur more than 2 times on the First_Notification_of_Loss table ?",
            "sql": "select services.service_name group_by first_notification_of_loss.service_id having count ( * ) > value"
        },
        {
            "utterance": "Awesome ! Can you show me how many times New policy application has been used ?",
            "sql": "select services.service_name , count ( * ) group_by first_notification_of_loss.service_id having services.service_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the total and average amount of settlements.",
        "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all of the settlement IDs and the corresponding settlement amounts ?",
            "sql": "select settlements.settlement_id , settlements.settlement_amount"
        },
        {
            "utterance": "Great ! Can you calculate for me the sum total of all Settlement Amounts and also the average Settlement Amount for all settlements ?",
            "sql": "select sum ( settlements.settlement_amount ) , avg ( settlements.settlement_amount )"
        },
        {
            "utterance": "Wonderful ! Can you show me what the oldest settlement effective date is ?",
            "sql": "select settlements.effective_date order_by settlements.effective_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 9,
    "final": {
        "utterance": "Which policy type has the most records in the database?",
        "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the policy types available ? | Do you mean policy type code ? | yes",
            "sql": "select distinct available_policies.policy_type_code"
        },
        {
            "utterance": "Show me the policy type code with policy id 257 ?",
            "sql": "select available_policies.policy_type_code where available_policies.policy_id = value"
        },
        {
            "utterance": "Show me the policy id of the policy type code Life insurance ?",
            "sql": "select available_policies.policy_id where available_policies.policy_type_code = value"
        },
        {
            "utterance": "Show which policy type has the most records in the database ?",
            "sql": "select available_policies.policy_type_code group_by available_policies.policy_type_code order_by count ( available_policies.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "Find the number of scientists involved for the projects that require more than 300 hours",
            "sql": "select count ( distinct assignedto.scientist ) where projects.hours > value"
        },
        {
            "utterance": "Find the number of scientists involved for the projects that require less than 300 hours",
            "sql": "select count ( distinct assignedto.scientist ) where projects.hours < value"
        },
        {
            "utterance": "and what are the names of the projects requiring more than 300 hours",
            "sql": "select projects.name where projects.hours > value"
        },
        {
            "utterance": "and what is the scientist id for project Aerodynamics and Bridge Design",
            "sql": "select assignedto.scientist where projects.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'"
    },
    "interaction": [
        {
            "utterance": "Fine the name of the project for which a scientist whose name contains `` Smith '' is assigned to .",
            "sql": "select projects.name where scientists.name like value"
        },
        {
            "utterance": "What is the first name of `` Smith ''",
            "sql": "select scientists.name where scientists.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the number of scientists involved for each project name.",
        "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "How many number if scientist belong to project AeH1",
            "sql": "select count ( * ) where projects.code = value"
        },
        {
            "utterance": "How about project Ast3 , how many scientists ?",
            "sql": "select count ( * ) where projects.code = value"
        },
        {
            "utterance": "How about project AeH3",
            "sql": "select count ( * ) where projects.code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.",
        "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "how many projects are presented on the table",
            "sql": "select count ( projects.* )"
        },
        {
            "utterance": "list out the projects names",
            "sql": "select projects.name"
        },
        {
            "utterance": "which project are least hours on the table",
            "sql": "select projects.name where projects.hours = ( select min ( projects.hours ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name"
    },
    "interaction": [
        {
            "utterance": "What are all of the scientists ' names please ?",
            "sql": "select scientists.name"
        },
        {
            "utterance": "What are the project names of all of them ?",
            "sql": "select scientists.name , projects.name"
        },
        {
            "utterance": "Can you show the hours they each worked too , please ?",
            "sql": "select scientists.name , projects.name , projects.hours order_by projects.name , scientists.name"
        },
        {
            "utterance": "Can you please order them in alphabetical order of project , and then of scientist name ?",
            "sql": "select scientists.name , projects.name , projects.hours order_by projects.name , scientists.name"
        },
        {
            "utterance": "What are the average hours worked by all scientists , please ? | Do you mean average hours on each project among all scientists ? | Yes , please .",
            "sql": "select avg ( projects.hours )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "state the projects with least hours ? | Do you need the project code or name ? | name",
            "sql": "select projects.name order_by projects.hours limit_value"
        },
        {
            "utterance": "List the name of all projects that are operated longer than the average working hours of all projects",
            "sql": "select projects.name where projects.hours > ( select avg ( projects.hours ) )"
        },
        {
            "utterance": "State the total number of projects of the list ?",
            "sql": "select count ( projects.* )"
        },
        {
            "utterance": "Which project has the highest hours on the list ?",
            "sql": "select projects.name order_by projects.hours desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of scientists who are not working on the project with the highest hours.",
        "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "What is the name of the project with the highest hours ?",
            "sql": "select projects.name order_by projects.hours desc limit_value"
        },
        {
            "utterance": "What is the code of the project A Magnetic Primer Designer ?",
            "sql": "select projects.code where projects.name = value"
        },
        {
            "utterance": "Who are the scientists who are not assigned to the project Bte2 ?",
            "sql": "select assignedto.scientist where assignedto.project != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
        "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'"
    },
    "interaction": [
        {
            "utterance": "What about the names of scientists that worked on the project named 'A Puzzling Parallax ' ?",
            "sql": "select scientists.name where projects.name = value"
        },
        {
            "utterance": "Could you give the list of all projects along with the names of scientists that worked on them ? | Do you mean a list of the names of all the projects and the names of scientists that worked on them ? | Yes Please !",
            "sql": "select scientists.name , projects.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name"
    },
    "interaction": [
        {
            "utterance": "List all project code name and hours worked by Scientists ssn | Do you mean list their ssn 's ? | yes , list the project codes , names , and hours worked by scientists by ssn",
            "sql": "select projects.name , projects.code , projects.hours order_by scientists.ssn"
        },
        {
            "utterance": "list scientists names by ssn",
            "sql": "select scientists.name order_by scientists.ssn"
        },
        {
            "utterance": "list Project codes , names , and hours worked by scientist by ssn and name",
            "sql": "select projects.code , projects.name , projects.hours order_by scientists.ssn"
        },
        {
            "utterance": "list results by scientists name",
            "sql": "select projects.code , projects.name , projects.hours order_by scientists.name"
        },
        {
            "utterance": "list results by project by scientists names | Do you mean list the project names by scientists names ? | yes",
            "sql": "select projects.name order_by scientists.name"
        },
        {
            "utterance": "list project names in ascending order",
            "sql": "select projects.name order_by scientists.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Select the project names which are not assigned yet.",
        "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"
    },
    "interaction": [
        {
            "utterance": "What are assigned project names ?",
            "sql": "select projects.name"
        },
        {
            "utterance": "How about names of not assigned projects ?",
            "sql": "select projects.name where projects.code not in ( select assignedto.project )"
        },
        {
            "utterance": "what is the name of not assigned project with the least hours ?",
            "sql": "select projects.name where projects.code not in ( select assignedto.project ) order_by projects.hours limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of project that continues for the longest time.",
        "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What project has the longest time ? List the name .",
            "sql": "select projects.name order_by projects.hours desc limit_value"
        },
        {
            "utterance": "What are the names of the projects ?",
            "sql": "select projects.name"
        },
        {
            "utterance": "How many hours does A Magnetic Primer Designer have ?",
            "sql": "select projects.hours where projects.name = value"
        },
        {
            "utterance": "What is the code for A Magnetic Primer Designer ?",
            "sql": "select projects.code where projects.name = value"
        },
        {
            "utterance": "What Project has the Shortest time ?",
            "sql": "select projects.name order_by projects.hours limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of storms which don't have affected region in record.",
        "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
    },
    "interaction": [
        {
            "utterance": "What are the names of storms which do n't have affected region in record ?",
            "sql": "select storm.name where storm.storm_id not in ( select affected_region.storm_id )"
        },
        {
            "utterance": "What is the number of city affected for storm with name two ?",
            "sql": "select affected_region.number_city_affected where affected_region.storm_id = ( select storm.storm_id where storm.name = value )"
        },
        {
            "utterance": "What is storm name two storm ID ?",
            "sql": "select storm.storm_id where storm.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"
    },
    "interaction": [
        {
            "utterance": "Can you please show me the average damage for all storms ?",
            "sql": "select avg ( storm.damage_millions_usd )"
        },
        {
            "utterance": "Can you please show me the maximum damage for all storms ?",
            "sql": "select max ( storm.damage_millions_usd )"
        },
        {
            "utterance": "Can you please show me the minimum damage for all storms ?",
            "sql": "select min ( storm.damage_millions_usd )"
        },
        {
            "utterance": "Can you please show me the minimum damage for all storms with maximum speed higher than 1000 ?",
            "sql": "select min ( storm.damage_millions_usd ) where storm.max_speed > value"
        },
        {
            "utterance": "Can you please show me the maximum damage for all storms with maximum speed higher than 1000 ?",
            "sql": "select max ( storm.damage_millions_usd ) where storm.max_speed > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the region name with at least two storms.",
        "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "how many region are presented on the table",
            "sql": "select count ( region.* )"
        },
        {
            "utterance": "list out the region name",
            "sql": "select region.region_name"
        },
        {
            "utterance": "what is the region code of Afghanistan",
            "sql": "select region.region_code where region.region_name = value"
        },
        {
            "utterance": "what is the highest number city affected",
            "sql": "select region.region_name group_by region.region_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all storm names affecting region \"Denmark\".",
        "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
    },
    "interaction": [
        {
            "utterance": "What is the region id for region name Denmark ?",
            "sql": "select region.region_id where region.region_name = value"
        },
        {
            "utterance": "Show me all storm ids affecting a region id of 12 .",
            "sql": "select storm.storm_id where region.region_name = value"
        },
        {
            "utterance": "What is the name of this storm ?",
            "sql": "select storm.name where region.region_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the storm name and max speed which affected the greatest number of regions?",
        "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the storm name of the storm that affected the greatest number of regions ?",
            "sql": "select storm.name , storm.max_speed group_by storm.storm_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of the storm with the lowest speed ?",
            "sql": "select storm.name order_by storm.max_speed limit_value"
        },
        {
            "utterance": "What is the average speed of all the storms ?",
            "sql": "select avg ( storm.max_speed )"
        },
        {
            "utterance": "What 's the average damage in millions usd for all storms ?",
            "sql": "select avg ( storm.damage_millions_usd )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name for regions not affected.",
        "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
    },
    "interaction": [
        {
            "utterance": "Hi can you tell me the name of the regions not affected by storms ?",
            "sql": "select region.region_name where region.region_id not in ( select affected_region.region_id )"
        },
        {
            "utterance": "Can you tell me the names of the cities affected by storm ?",
            "sql": "select region.region_name where region.region_id in ( select affected_region.region_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"
    },
    "interaction": [
        {
            "utterance": "What was the name of the storm that affected Afghanistan and Albania between May 19 and May 25 ?",
            "sql": "select storm.name where region.region_name = value and storm.dates_active = value intersect select storm.name where region.region_name = value and storm.dates_active = value"
        },
        {
            "utterance": "What storm affected city 10.0 and 15.0 ? | do you mean the name of storm that affected city 10 and 15 ? | Yes",
            "sql": "select storm.name where affected_region.number_city_affected = value or affected_region.number_city_affected = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name of storms which don't have affected region in record.",
        "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
    },
    "interaction": [
        {
            "utterance": "what is the average of high speed ? | Did you mean to ask for the average max speed of the storms ? | yes",
            "sql": "select avg ( storm.max_speed )"
        },
        {
            "utterance": "what is the highest speed of the storms ?",
            "sql": "select max ( storm.max_speed )"
        },
        {
            "utterance": "what is the total number of deaths ?",
            "sql": "select sum ( storm.number_deaths )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name for regions and the number of storms for each region.",
        "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
    },
    "interaction": [
        {
            "utterance": "how many cities were affected ?",
            "sql": "select sum ( affected_region.number_city_affected )"
        },
        {
            "utterance": "what are the name for the regions ?",
            "sql": "select region.region_name"
        },
        {
            "utterance": "how many number of storms for each region ?",
            "sql": "select region.region_name , count ( * ) group_by region.region_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 9,
    "final": {
        "utterance": "Show storm name with at least two regions and 10 cities affected.",
        "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the storms that affected at least two regions ?",
            "sql": "select storm.name group_by storm.storm_id having count ( * ) > = value"
        },
        {
            "utterance": "What are the names of all the storms that affected at least 10 cities ?",
            "sql": "select storm.name group_by storm.storm_id having sum ( affected_region.number_city_affected ) > = value"
        },
        {
            "utterance": "What are the names of all the storms that affected at least 10 cities and two regions ?",
            "sql": "select storm.name group_by storm.storm_id having count ( * ) > = value intersect select storm.name group_by storm.storm_id having sum ( affected_region.number_city_affected ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 10,
    "final": {
        "utterance": "Show storm name with at least two regions and 10 cities affected.",
        "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
    },
    "interaction": [
        {
            "utterance": "how many storms caused damage to any regions ?",
            "sql": "select count ( storm.* )"
        },
        {
            "utterance": "how many of the storms caused damage to at least two regions ?",
            "sql": "select count ( * ) ( select storm.name group_by storm.storm_id having count ( * ) > = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 11,
    "final": {
        "utterance": "List the name for storms and the number of affected regions for each storm.",
        "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of all storms ?",
            "sql": "select storm.name"
        },
        {
            "utterance": "How many regions were affected by the first storm ?",
            "sql": "select storm.name , count ( * ) group_by storm.storm_id limit_value"
        },
        {
            "utterance": "What is the number of affected regions for each storm ?",
            "sql": "select storm.name , count ( * ) group_by storm.storm_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 0,
    "final": {
        "utterance": "List the official names of cities that have not held any competition.",
        "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
    },
    "interaction": [
        {
            "utterance": "What is the population of city Id 2 ?",
            "sql": "select city.population where city.city_id = value"
        },
        {
            "utterance": "What is the census ranking of Perth-Andover ?",
            "sql": "select city.census_ranking where city.official_name = value"
        },
        {
            "utterance": "What is the name of hosts of Carnival M is back ?",
            "sql": "select farm_competition.hosts where farm_competition.theme like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 1,
    "final": {
        "utterance": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    "interaction": [
        {
            "utterance": "Which cities have populations larger than 1000 ? List their ids .",
            "sql": "select city.city_id where city.population > value"
        },
        {
            "utterance": "What is the theme for these cities ? | The themes of competitions with host cities having populations larger than 1000 are Carnival M is back ! , Codehunters , and MTV Asia Aid | Which cities have populations less than 1000 ? List their ids .",
            "sql": "select distinct city.city_id where city.population < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
    },
    "interaction": [
        {
            "utterance": "what is the status of Perth-Andover | The status of the city with official name Perth-Andover is Village . | what is the name of the city that is top in area km 2 .",
            "sql": "select city.official_name order_by city.area_km_2 desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and minimum number of cows across all farms.",
        "sql": "SELECT max(Cows) ,  min(Cows) FROM farm"
    },
    "interaction": [
        {
            "utterance": "Out of all the farms , what are the maximum and minimum numbers of cows ?",
            "sql": "select max ( farm.cows ) , min ( farm.cows )"
        },
        {
            "utterance": "And for horses ? | Do you mean total horses or working horses ? | total horses",
            "sql": "select max ( farm.total_horses ) , min ( farm.total_horses )"
        },
        {
            "utterance": "How many more oxen are there than cattle on farm id 1",
            "sql": "select farm.oxen , farm.total_cattle where farm.farm_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the official names of the cities that have hosted more than one competition.",
        "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show me the official names of the cities that have hosted more than one competition ?",
            "sql": "select city.official_name group_by farm_competition.host_city_id having count ( * ) > value"
        },
        {
            "utterance": "Show me the official names of the cities that have hosted only one competition ?",
            "sql": "select city.official_name group_by farm_competition.host_city_id having count ( * ) = value"
        },
        {
            "utterance": "What were the themes of each of those competitions ?",
            "sql": "select city.official_name , farm_competition.theme group_by farm_competition.host_city_id having count ( * ) = value"
        },
        {
            "utterance": "What is the census rating of the city with the official name `` Plaster Rock '' ?",
            "sql": "select city.census_ranking where city.official_name = value"
        },
        {
            "utterance": "What is the census rating of the city that hosted the competition with the theme `` Carnival M is back ! `` ?",
            "sql": "select city.census_ranking where farm_competition.theme = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the status of the city that has hosted the greatest number of competitions.",
        "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Sure ! On my end I 'm seeing that the first table is labeled `` City '' , but if these are towns and villages then I 'd like to see what you are suggesting ! Thanks !",
            "sql": "select city.official_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 0,
    "final": {
        "utterance": "find the program owners that have some programs in both morning and night time.",
        "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\""
    },
    "interaction": [
        {
            "utterance": "which program owners have programs in the morning and the night",
            "sql": "select program.owner where broadcast.time_of_day = value intersect select program.owner where broadcast.time_of_day = value"
        },
        {
            "utterance": "what are the programs by Beijing television ? | Did you want the program names by the owner Beijing television ( BTV ) | yes",
            "sql": "select program.name where program.owner = value"
        },
        {
            "utterance": "when did kaku launch ?",
            "sql": "select program.launch where program.name = value"
        },
        {
            "utterance": "who is Toonmax owner ? | Did you want the owner of the program named Toonmax ? | yes",
            "sql": "select program.owner where program.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 1,
    "final": {
        "utterance": "find the name of the program that was launched most recently.",
        "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are names of all programs ?",
            "sql": "select program.name"
        },
        {
            "utterance": "Of them which was launched most recently ?",
            "sql": "select program.name order_by program.launch desc limit_value"
        },
        {
            "utterance": "Who is the owner ?",
            "sql": "select program.owner order_by program.launch desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of the channels that are broadcast in the morning.",
        "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Could you provide me with a list of all of the channel IDs for which the `` time of day '' is morning ?",
            "sql": "select broadcast.channel_id where broadcast.time_of_day = value"
        },
        {
            "utterance": "Thank you for that ! Could you update this list to include the channel name ?",
            "sql": "select channel.name , broadcast.channel_id where broadcast.time_of_day = value"
        },
        {
            "utterance": "Excellent ! Finally , can you show me what the ownership is of each of those stations ?",
            "sql": "select channel.name , broadcast.channel_id , channel.owner where broadcast.time_of_day = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 3,
    "final": {
        "utterance": "what are the names of the channels that broadcast in both morning and night?",
        "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'"
    },
    "interaction": [
        {
            "utterance": "how many broadcast are presented on the table",
            "sql": "select count ( broadcast.* )"
        },
        {
            "utterance": "what are all the channel are presented on the table",
            "sql": "select channel.*"
        },
        {
            "utterance": "what is the owner name of CCTV-1",
            "sql": "select channel.owner where channel.name = value"
        },
        {
            "utterance": "which channel are highest rating percent on the table",
            "sql": "select channel.name where channel.rating_in_percent = ( select max ( channel.rating_in_percent ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of the program that is broadcast most frequently.",
        "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show me the programmes | Do you mean all the program ids ? | yes",
            "sql": "select program.program_id"
        },
        {
            "utterance": "list the name of programme that broadcast frequently | Do you mean the name of the program that is broadcast most frequently ? | yes",
            "sql": "select program.name group_by broadcast.program_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Please show the most common publication date.",
        "sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the publication dates in the list ?",
            "sql": "select publication.publication_date"
        },
        {
            "utterance": "Can you sort the list by publication date from most common to least common ?",
            "sql": "select publication.publication_date group_by publication.publication_date order_by count ( publication.* ) desc"
        },
        {
            "utterance": "What is the most common publication date ?",
            "sql": "select publication.publication_date group_by publication.publication_date order_by count ( publication.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Show publishers that have more than one publication.",
        "sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show publishers that have less than one publication ?",
            "sql": "select publication.publisher group_by publication.publisher having count ( publication.* ) > value"
        },
        {
            "utterance": "Show all the publishers ?",
            "sql": "select publication.publisher"
        },
        {
            "utterance": "What is the highest price that a publisher earns ?",
            "sql": "select publication.price order_by publication.price desc limit_value"
        },
        {
            "utterance": "What is the lowest price that a publisher earns ?",
            "sql": "select publication.price order_by publication.price limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the titles of books in descending order of publication price.",
        "sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC"
    },
    "interaction": [
        {
            "utterance": "I need a list of the titles of books .",
            "sql": "select book.title"
        },
        {
            "utterance": "Can you give me the price of those books ?",
            "sql": "select publication.price"
        },
        {
            "utterance": "can you list those in ascending order ?",
            "sql": "select publication.price order_by publication.price asc"
        },
        {
            "utterance": "Can you list the prices along with the books ?",
            "sql": "select publication.price , book.title order_by publication.price asc"
        },
        {
            "utterance": "Now can you list the titles of the books and the prices but in descending order ?",
            "sql": "select publication.price , book.title order_by publication.price desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Show writers who have published a book with price more than 4000000.",
        "sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000"
    },
    "interaction": [
        {
            "utterance": "what 's the highest price of book published on this list ?",
            "sql": "select max ( publication.price )"
        },
        {
            "utterance": "who 's the writer of The Black Lamb ?",
            "sql": "select book.writer where book.title = value"
        },
        {
            "utterance": "what 's the price for Wiley 's publication ? | Which of Wiley 's publications do you want to know the price for ? | the one of june 2006",
            "sql": "select publication.price where publication.publisher = value and publication.publication_date = value"
        },
        {
            "utterance": "who 's the writer of Bloody Mary ? | Did you mean Bloody Mary or Bloody Mary : Lady Liberty ? | Bloody Mary",
            "sql": "select book.writer where book.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 4,
    "final": {
        "utterance": "List the publication dates of publications with 3 lowest prices.",
        "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the prices of the 3 lowest publications ?",
            "sql": "select publication.price order_by publication.price asc limit_value"
        },
        {
            "utterance": "And who are the publishers of the 3 lowest priced publications ?",
            "sql": "select publication.publisher order_by publication.price asc limit_value"
        },
        {
            "utterance": "What are the publication dates of the 3 lowest priced publications ?",
            "sql": "select publication.publication_date order_by publication.price asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000"
    },
    "interaction": [
        {
            "utterance": "how many publishers are there ?",
            "sql": "select count ( distinct publication.publisher )"
        },
        {
            "utterance": "Yes please | Which one ? Do you mean the publishers of the result table that also have publications with prices lower than 5000000 or any publisher that has a publication with a price lower than 5000000 ? | in the table that you just created , add the names of the publishers with price lower than 5000000 , and include their price in the table too .",
            "sql": "select publication.publisher , publication.price where publication.price > value or publication.price < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 0,
    "final": {
        "utterance": "Which document has the most draft copies? List its document id and number of draft copies.",
        "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "how many documents are there ?",
            "sql": "select count ( draft_copies.* )"
        },
        {
            "utterance": "What 's the least amount of draft copies that a document has ?",
            "sql": "select count ( draft_copies.copy_number ) group_by draft_copies.document_id order_by count ( draft_copies.copy_number ) limit_value"
        },
        {
            "utterance": "What 's the most amount of draft copies that a document has ?",
            "sql": "select count ( draft_copies.copy_number ) group_by draft_copies.document_id order_by count ( draft_copies.copy_number ) desc limit_value"
        },
        {
            "utterance": "what 's the id of the document that has the most draft copies ?",
            "sql": "select draft_copies.document_id group_by draft_copies.document_id order_by count ( draft_copies.copy_number ) desc limit_value"
        },
        {
            "utterance": "how many draft copies does that document have ?",
            "sql": "select draft_copies.document_id , count ( draft_copies.copy_number ) group_by draft_copies.document_id order_by count ( draft_copies.copy_number ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 1,
    "final": {
        "utterance": "How many documents were shipped by USPS?",
        "sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    "interaction": [
        {
            "utterance": "Show me a list of all shipping agent codes",
            "sql": "select ref_shipping_agents.shipping_agent_code"
        },
        {
            "utterance": "add a column showing the total number of documents shipped per code",
            "sql": "select documents.shipping_agent_code , count ( documents.* ) group_by documents.shipping_agent_code"
        },
        {
            "utterance": "Add another column showing the shipping agent name",
            "sql": "select ref_shipping_agents.shipping_agent_code , ref_shipping_agents.shipping_agent_name , count ( * ) group_by documents.shipping_agent_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 2,
    "final": {
        "utterance": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Hello . What is the name of the employee that has showed up the most in circulation history documents ?",
            "sql": "select employees.employee_name group_by employees.employee_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many drafts have they shown up in ?",
            "sql": "select employees.employee_name , sum ( circulation_history.draft_number ) group_by circulation_history.document_id , circulation_history.draft_number , circulation_history.copy_number order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many copies have they shown up in ?",
            "sql": "select sum ( circulation_history.copy_number ) group_by circulation_history.document_id , circulation_history.draft_number , circulation_history.copy_number order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 3,
    "final": {
        "utterance": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the name of the shipping agent that shipped the largest number of documents ?",
            "sql": "select ref_shipping_agents.shipping_agent_name group_by ref_shipping_agents.shipping_agent_code order_by count ( documents.document_id ) desc limit_value"
        },
        {
            "utterance": "What is the name of the shipping agent that shipped the smallest number of documents ?",
            "sql": "select ref_shipping_agents.shipping_agent_name group_by ref_shipping_agents.shipping_agent_code order_by count ( documents.document_id ) limit_value"
        },
        {
            "utterance": "What are the receipt dates of all of the documents Airline shipped ?",
            "sql": "select documents.receipt_date where ref_shipping_agents.shipping_agent_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 4,
    "final": {
        "utterance": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( employees.* )"
        },
        {
            "utterance": "How many employees are in the circulation history with the document id 1 ?",
            "sql": "select count ( circulation_history.employee_id ) where circulation_history.document_id = value"
        },
        {
            "utterance": "Can you tell me the name of the employee that is in the circulation history with document id 1 ?",
            "sql": "select employees.employee_name where circulation_history.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the role of the employee named Koby?",
        "sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"
    },
    "interaction": [
        {
            "utterance": "what role does Koby play ?",
            "sql": "select roles.role_description where employees.employee_name = value"
        },
        {
            "utterance": "what is the role code",
            "sql": "select roles.role_code where employees.employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of pilots and the number of records they have.",
        "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the pilots with IDs 1 and 2 ?",
            "sql": "select pilot.pilot_name where pilot.pilot_id = value or pilot.pilot_id = value"
        },
        {
            "utterance": "How many records do they have ?",
            "sql": "select pilot.pilot_id , count ( * ) where pilot.pilot_id = value or pilot.pilot_id = value group_by pilot.pilot_id"
        },
        {
            "utterance": "Which year did they join ?",
            "sql": "select pilot.pilot_id , pilot.join_year where pilot.pilot_id = value or pilot.pilot_id = value"
        },
        {
            "utterance": "Which are their teams ?",
            "sql": "select pilot.pilot_id , pilot.team where pilot.pilot_id = value or pilot.pilot_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the most common nationality of pilots.",
        "sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello , how many different nationalities of pilots are there ?",
            "sql": "select count ( distinct pilot.nationality )"
        },
        {
            "utterance": "What are the pilot names of those 3 nationalities ?",
            "sql": "select pilot.nationality , pilot.pilot_name"
        },
        {
            "utterance": "What is the most common nationality of the 3 nationalities ?",
            "sql": "select pilot.nationality group_by pilot.nationality order_by count ( pilot.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank"
    },
    "interaction": [
        {
            "utterance": "Can you please show the names of all pilots and fleet series of the aircrafts they have flown in ascending order of the rank of the pilot ?",
            "sql": "select pilot.pilot_name , aircraft.fleet_series order_by pilot.rank"
        },
        {
            "utterance": "What are each of those pilots ' nationalities ? | Do you want to konw Pilot name and related pilots ' nationalities ? | Yes , please .",
            "sql": "select pilot.pilot_name , pilot.nationality"
        },
        {
            "utterance": "What kind of fuel propulsion do these pilots ' aircrafts use ?",
            "sql": "select distinct ( aircraft.fuel_propulsion )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005"
    },
    "interaction": [
        {
            "utterance": "show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000 .",
            "sql": "select pilot.position where pilot.join_year < value intersect select pilot.position where pilot.join_year > value"
        },
        {
            "utterance": "show me the ages of pilots in the center team position",
            "sql": "select pilot.age where pilot.position = value"
        },
        {
            "utterance": "what is the nationality of the forward-center team ? | Do you mean the nationality of the pilot in the forward-center team ? | yes",
            "sql": "select pilot.nationality where pilot.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34"
    },
    "interaction": [
        {
            "utterance": "please tell me the name of pilot | Did you mean all the names in the pilot ? | yes",
            "sql": "select pilot.pilot_name"
        },
        {
            "utterance": "i need the pilot ID | Did you mean to show all of the pilot IDs ? | yes",
            "sql": "select pilot.pilot_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of route that has the highest number of deliveries.",
        "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the name of route that has the lowest number of deliveries ?",
            "sql": "select delivery_routes.route_name group_by delivery_routes.route_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many route names in this table ?",
            "sql": "select count ( delivery_routes.route_name )"
        },
        {
            "utterance": "How many delivery route location in this table ?",
            "sql": "select delivery_route_locations.location_code , count ( * )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name and price of the product that has been ordered the greatest number of times.",
        "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know what product has been ordered the greatest number of times .",
            "sql": "select * group_by regular_order_products.product_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What products have less orders than dvds ? | Did you want to return all info of the products or just their names ? | What is the total cost of the dvd orders ?",
            "sql": "select sum ( products.product_price ) where products.product_name = value"
        },
        {
            "utterance": "And what about electronics ?",
            "sql": "select sum ( products.product_price ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the payment method that is used most frequently.",
        "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most frequently used payment method ?",
            "sql": "select customers.payment_method group_by customers.payment_method order_by count ( customers.* ) desc limit_value"
        },
        {
            "utterance": "How many customers used Visa to pay ?",
            "sql": "select count ( customers.* ) group_by customers.payment_method having customers.payment_method = value"
        },
        {
            "utterance": "Can you show me the email addresses of all the customers who paid with Visa ?",
            "sql": "select customers.customer_email where customers.payment_method = value"
        },
        {
            "utterance": "How about their phone numbers ?",
            "sql": "select customers.customer_phone where customers.payment_method = value"
        },
        {
            "utterance": "Who is the newest customer of that group ?",
            "sql": "select customers.customer_name where customers.payment_method = value order_by customers.date_became_customer limit_value"
        },
        {
            "utterance": "When did that customer become a customer ?",
            "sql": "select customers.date_became_customer where customers.payment_method = value order_by customers.date_became_customer limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and price of the product that has been ordered the greatest number of times.",
        "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the products ?",
            "sql": "select products.product_name"
        },
        {
            "utterance": "What is the highest price for the products ?",
            "sql": "select max ( products.product_price )"
        },
        {
            "utterance": "What product has been ordered the greatest number of times ?",
            "sql": "select products.product_name group_by regular_order_products.product_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the price of the dvds ?",
            "sql": "select products.product_price where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the states which do not have any employee in their record.",
        "sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)"
    },
    "interaction": [
        {
            "utterance": "Which state has the most employees ?",
            "sql": "select addresses.state_province_county group_by addresses.state_province_county order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Which state has the least ?",
            "sql": "select addresses.state_province_county group_by addresses.state_province_county order_by count ( * ) limit_value"
        },
        {
            "utterance": "WHich states have no employees ?",
            "sql": "select addresses.state_province_county where addresses.address_id not in ( select employees.employee_address_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the first 5 customers.",
        "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customers.customer_id )"
        },
        {
            "utterance": "When did the last customer come ?",
            "sql": "select customers.date_became_customer order_by customers.date_became_customer desc limit_value"
        },
        {
            "utterance": "How about the first ?",
            "sql": "select customers.date_became_customer order_by customers.date_became_customer limit_value"
        },
        {
            "utterance": "Can you show me the names of the first five customers ?",
            "sql": "select customers.customer_name order_by customers.date_became_customer limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of customers who are not living in the state of California.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all customer IDs for customers not located in the state of California ?",
            "sql": "select customers.customer_id except select customers.customer_id where addresses.state_province_county = value"
        },
        {
            "utterance": "Thanks ! Can you update this list to show both the city name and state associated with each of these customers ?",
            "sql": "select customers.customer_id , addresses.city , addresses.state_province_county where addresses.state_province_county != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the first 5 customers.",
        "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "How many customers used Visa ?",
            "sql": "select count ( distinct customers.customer_name ) where customers.payment_method = value"
        },
        {
            "utterance": "And what are their names ?",
            "sql": "select customers.customer_name where customers.payment_method = value"
        },
        {
            "utterance": "How about names of first five customers who used any type of payment ?",
            "sql": "select customers.customer_name order_by customers.date_became_customer limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 0,
    "final": {
        "utterance": "How many instruments does the song \"Le Pop\" use?",
        "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "Can you list all the instruments used in the song Le Pop ?",
            "sql": "select distinct instruments.instrument where songs.title = value"
        },
        {
            "utterance": "Okay , how many instruments are used in the song `` Baby '' ?",
            "sql": "select count ( distinct instruments.instrument ) where songs.title = value"
        }
    ]
}
