{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the department with the most employees.",
        "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the number of employees in each department ?",
            "sql": "select count ( department.departmentid ) group_by department.departmentid"
        },
        {
            "utterance": "Which department has the most employees ? Give me the department name .",
            "sql": "select department.name group_by department.departmentid order_by count ( department.departmentid ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Tell me the employee id of the head of the department with the least employees.",
        "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many employees does each department have ?",
            "sql": "select count ( department.departmentid ) group_by department.departmentid"
        },
        {
            "utterance": "Which department has the least employees ?",
            "sql": "select department.* group_by department.departmentid order_by count ( department.departmentid ) limit_value"
        },
        {
            "utterance": "Who is the head of this department ? Find the employee id .",
            "sql": "select department.head group_by department.departmentid order_by count ( department.departmentid ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and position of the head of the department with the least employees.",
        "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many employees does each department have ?",
            "sql": "select count ( department.departmentid ) group_by department.departmentid"
        },
        {
            "utterance": "Which department has the smallest number of employees ?",
            "sql": "select department.* group_by department.departmentid order_by count ( department.departmentid ) limit_value"
        },
        {
            "utterance": "Tell me the name and position of the head of this department .",
            "sql": "select physician.name , physician.position group_by department.departmentid order_by count ( department.departmentid ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of patients who have made appointments.",
        "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn"
    },
    "interaction": [
        {
            "utterance": "List the patient id for all the appointments .",
            "sql": "select appointment.patient"
        },
        {
            "utterance": "What are the names of patients who have made appointments ?",
            "sql": "select patient.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Find the number of appointments each patient has made .",
            "sql": "select count ( appointment.* ) group_by appointment.patient"
        },
        {
            "utterance": "Which patients made more than one appointment ?",
            "sql": "select appointment.* group_by appointment.patient having count ( appointment.* ) > value"
        },
        {
            "utterance": "Tell me the name and phone number of these patients",
            "sql": "select patient.name , patient.phone group_by appointment.patient having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the id of the appointment that started most recently?",
        "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the start date of each appointment ?",
            "sql": "select appointment.start"
        },
        {
            "utterance": "Sort the appointments by the starting date in descending order .",
            "sql": "select appointment.* order_by appointment.start desc"
        },
        {
            "utterance": "Which appointment has the most recent starting date ? Give me the appointment id .",
            "sql": "select appointment.appointmentid order_by appointment.start desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of all the physicians who took appointments.",
        "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"
    },
    "interaction": [
        {
            "utterance": "What are the ids of the physicians who took appointments ?",
            "sql": "select appointment.physician"
        },
        {
            "utterance": "Also tell me their names .",
            "sql": "select physician.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Which physicians have never taken any appointment? Find their names.",
        "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"
    },
    "interaction": [
        {
            "utterance": "List all the physician names .",
            "sql": "select physician.name"
        },
        {
            "utterance": "Find the names of the physicians who took appointments .",
            "sql": "select physician.name"
        },
        {
            "utterance": "Then what are the names of physicians who never took any appointment ?",
            "sql": "select physician.name except select physician.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the name and primarily affiliated department name of each physician?",
        "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1"
    },
    "interaction": [
        {
            "utterance": "List the name of each physician .",
            "sql": "select physician.name"
        },
        {
            "utterance": "Find the name of the primarily affiliated department for each physician .",
            "sql": "select department.name where affiliated_with.primaryaffiliation = value"
        },
        {
            "utterance": "Return both information together .",
            "sql": "select physician.name , department.name where affiliated_with.primaryaffiliation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of the patient who made the appointment with the most recent start date.",
        "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 WHERE T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Sort all the appointments by the start date from recent to past .",
            "sql": "select appointment.* order_by appointment.start desc"
        },
        {
            "utterance": "Which appointment has the most recent start date ?",
            "sql": "select appointment.* order_by appointment.start desc limit_value"
        },
        {
            "utterance": "Find the name of the patient who made that appointment .",
            "sql": "select patient.name where patient.ssn = appointment.patient order_by appointment.start desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Count the number of patients who stayed in room 112.",
        "sql": "SELECT count(patient) FROM stay WHERE room  =  112"
    },
    "interaction": [
        {
            "utterance": "Find all the stays in room 112 .",
            "sql": "select stay.* where stay.room = value"
        },
        {
            "utterance": "How many patients stayed in room 112 ?",
            "sql": "select count ( stay.patient ) where stay.room = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the number of patients' prescriptions physician John Dorian made.",
        "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\""
    },
    "interaction": [
        {
            "utterance": "What is the employee id of physician John Dorian ?",
            "sql": "select physician.employeeid where physician.name = value"
        },
        {
            "utterance": "Find all the prescriptions made by him .",
            "sql": "select * where physician.name = value"
        },
        {
            "utterance": "How many patients ' prescriptions are made by him ?",
            "sql": "select count ( patient.ssn ) where physician.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the name of the medication used for the patient staying in room 111?",
        "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"
    },
    "interaction": [
        {
            "utterance": "Which patient is staying in room 111 ? Tell me the patient id .",
            "sql": "select stay.patient where stay.room = value"
        },
        {
            "utterance": "What is the id of the medication used for this patient ?",
            "sql": "select prescribes.medication where stay.room = value"
        },
        {
            "utterance": "What is the name of the medication ?",
            "sql": "select medication.name where stay.room = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the id of the patient who stayed in room 111 most recently?",
        "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the patients who stayed in room 111 .",
            "sql": "select stay.patient where stay.room = value"
        },
        {
            "utterance": "Sort the patients by the stay start date , from recent to past .",
            "sql": "select stay.patient where stay.room = value order_by stay.staystart desc"
        },
        {
            "utterance": "Which patient stayed there most recently ?",
            "sql": "select stay.patient where stay.room = value order_by stay.staystart desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the nurse who has the largest number of appointments.",
        "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many appointments does each nurse have ?",
            "sql": "select count ( * ) group_by nurse.employeeid"
        },
        {
            "utterance": "Find the nurse with the most appointments . What is the nurse 's name ?",
            "sql": "select nurse.name group_by nurse.employeeid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Return the name of each physician and the number of patients he or she treats.",
        "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid"
    },
    "interaction": [
        {
            "utterance": "Group the patients by the physician treating them .",
            "sql": "select * group_by physician.employeeid"
        },
        {
            "utterance": "How many patients is each physician taking care of ?",
            "sql": "select count ( * ) group_by physician.employeeid"
        },
        {
            "utterance": "For each physician , return his or her name and the number of patients .",
            "sql": "select physician.name , count ( * ) group_by physician.employeeid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Which physicians are in charge of more than one patient? Give me their names.",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many patients is each physician in change of ?",
            "sql": "select count ( * ) group_by physician.employeeid"
        },
        {
            "utterance": "Which physicians are in charge of more than one ?",
            "sql": "select * group_by physician.employeeid having count ( * ) > value"
        },
        {
            "utterance": "What are the name of these physicians ?",
            "sql": "select physician.name group_by physician.employeeid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many rooms does each block floor have?",
        "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor"
    },
    "interaction": [
        {
            "utterance": "What is the block floor each room is located on ?",
            "sql": "select block.blockfloor"
        },
        {
            "utterance": "How many rooms does each block floor have ?",
            "sql": "select count ( * ) , block.blockfloor group_by block.blockfloor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many rooms are located for each block code?",
        "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"
    },
    "interaction": [
        {
            "utterance": "What is each room 's block code ?",
            "sql": "select block.blockcode"
        },
        {
            "utterance": "How many rooms does each block code have ?",
            "sql": "select count ( * ) , block.blockcode group_by block.blockcode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Tell me the distinct block codes where some rooms are available.",
        "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0"
    },
    "interaction": [
        {
            "utterance": "List all the rooms that are available .",
            "sql": "select room.* where room.unavailable = value"
        },
        {
            "utterance": "What are the distinct block codes that have rooms available ?",
            "sql": "select distinct room.blockcode where room.unavailable = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the number of distinct room types available.",
        "sql": "SELECT count(DISTINCT roomtype) FROM room"
    },
    "interaction": [
        {
            "utterance": "List all the room types .",
            "sql": "select room.roomtype"
        },
        {
            "utterance": "How many distinct room types are there ?",
            "sql": "select count ( distinct room.roomtype )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 21,
    "final": {
        "utterance": "List the names of all the physicians who prescribe Thesisin as medication.",
        "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\""
    },
    "interaction": [
        {
            "utterance": "What is the code of the medication called Thesisin ?",
            "sql": "select medication.code where medication.name = value"
        },
        {
            "utterance": "Which physicians prescribe this medication ? Tell me the distinct ids .",
            "sql": "select distinct prescribes.physician where medication.name = value"
        },
        {
            "utterance": "What are the names of the physicians ?",
            "sql": "select distinct physician.name where medication.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\""
    },
    "interaction": [
        {
            "utterance": "Which medication has brand X ?",
            "sql": "select medication.* where medication.brand = value"
        },
        {
            "utterance": "Find the physicians who prescribe this medication .",
            "sql": "select distinct prescribes.physician where medication.brand = value"
        },
        {
            "utterance": "What are their name and position ?",
            "sql": "select distinct physician.name , physician.position where medication.brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 23,
    "final": {
        "utterance": "How many medications are prescribed for each brand?",
        "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"
    },
    "interaction": [
        {
            "utterance": "Group all the medications by the brand .",
            "sql": "select medication.* group_by medication.brand"
        },
        {
            "utterance": "How many medications are prescribed for each brand ?",
            "sql": "select count ( * ) , medication.name group_by medication.brand"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names of the physicians who have 'senior' in their titles.",
        "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
    },
    "interaction": [
        {
            "utterance": "Find the position title of each physician .",
            "sql": "select physician.position"
        },
        {
            "utterance": "Which physicians have 'senior ' in their titles ?",
            "sql": "select physician.* where physician.position like value"
        },
        {
            "utterance": "Give me their names",
            "sql": "select physician.name where physician.position like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Which patient is undergoing the most recent treatment?",
        "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the dates of treatment undergoing .",
            "sql": "select undergoes.dateundergoes"
        },
        {
            "utterance": "What is the most recent undergoing treatment ?",
            "sql": "select undergoes.* order_by undergoes.dateundergoes limit_value"
        },
        {
            "utterance": "What is the patient of this treatment ?",
            "sql": "select undergoes.patient order_by undergoes.dateundergoes limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the names of patients who are staying in room 111 and have an undergoing treatment?",
        "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111"
    },
    "interaction": [
        {
            "utterance": "List all the patients who have an undergoing treatment .",
            "sql": "select distinct undergoes.patient"
        },
        {
            "utterance": "Among them , who are staying in room 111 ?",
            "sql": "select * where stay.room = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct patient.name where stay.room = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "sql": "SELECT DISTINCT name FROM nurse ORDER BY name"
    },
    "interaction": [
        {
            "utterance": "List the distinct names of all the nurses",
            "sql": "select distinct nurse.name"
        },
        {
            "utterance": "Order them in the alphabetical order .",
            "sql": "select distinct nurse.name order_by nurse.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Which nurses are in charge of patients undergoing treatments?",
        "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID"
    },
    "interaction": [
        {
            "utterance": "Find the nurses in charge of undergoing treatments .",
            "sql": "select undergoes.assistingnurse"
        },
        {
            "utterance": "What are the distinct names of the nurses ?",
            "sql": "select distinct nurse.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the alphabetically ordered list of all distinct medications?",
        "sql": "SELECT DISTINCT name FROM medication ORDER BY name"
    },
    "interaction": [
        {
            "utterance": "What are the distinct names of medications ?",
            "sql": "select distinct medication.name"
        },
        {
            "utterance": "Sort them in an alphabetical order",
            "sql": "select distinct medication.name order_by medication.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the physician who prescribed the highest dose. What is his or her name?",
        "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the list of the dose each physician prescribes ?",
            "sql": "select *"
        },
        {
            "utterance": "Sort in the descending order of dose .",
            "sql": "select * order_by prescribes.dose desc"
        },
        {
            "utterance": "What are the names of the physician who prescribed the highest dose ?",
            "sql": "select physician.name order_by prescribes.dose desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hospital_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the names of departments that have primarily affiliated physicians.",
        "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"
    },
    "interaction": [
        {
            "utterance": "Which departments have some physicians primarily affiliated .",
            "sql": "select affiliated_with.* where affiliated_with.primaryaffiliation = value"
        },
        {
            "utterance": "What are the distinct names of the departments ?",
            "sql": "select distinct department.name where affiliated_with.primaryaffiliation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many video games do you have?",
        "sql": "SELECT count(*) FROM Video_games"
    },
    "interaction": [
        {
            "utterance": "What information do you have on video games ?",
            "sql": "select video_games.*"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( video_games.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the count of different game types?",
        "sql": "SELECT count(DISTINCT gtype) FROM Video_games"
    },
    "interaction": [
        {
            "utterance": "What are the game types for each video game ?",
            "sql": "select video_games.gtype"
        },
        {
            "utterance": "Give me a list of the different game types ?",
            "sql": "select distinct video_games.gtype"
        },
        {
            "utterance": "How long is that list ?",
            "sql": "select count ( distinct video_games.gtype )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the different types of video games?",
        "sql": "SELECT DISTINCT gtype FROM Video_games"
    },
    "interaction": [
        {
            "utterance": "What is the type of each game ?",
            "sql": "select video_games.gtype"
        },
        {
            "utterance": "What is a list of the different types ?",
            "sql": "select distinct video_games.gtype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of all the video games and their types in alphabetical order?",
        "sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname"
    },
    "interaction": [
        {
            "utterance": "What is the type of each video game ?",
            "sql": "select video_games.gtype"
        },
        {
            "utterance": "Also , what are their names ?",
            "sql": "select video_games.gname , video_games.gtype"
        },
        {
            "utterance": "Order the above information by the game name alphabetically .",
            "sql": "select video_games.gname , video_games.gtype order_by video_games.gname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of all video games that are collectible cards?",
        "sql": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\""
    },
    "interaction": [
        {
            "utterance": "What information is there on video games ?",
            "sql": "select video_games.*"
        },
        {
            "utterance": "What information do you have on video games that are of type collectible card game ?",
            "sql": "select video_games.* where video_games.gtype = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select video_games.gname where video_games.gtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What type of game is Call of Destiny?",
        "sql": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\""
    },
    "interaction": [
        {
            "utterance": "What is the name of each game ?",
            "sql": "select video_games.gname"
        },
        {
            "utterance": "What information do you have on the game called Call of Destiny ?",
            "sql": "select video_games.* where video_games.gname = value"
        },
        {
            "utterance": "What type is it ?",
            "sql": "select video_games.gtype where video_games.gname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the types of video games and how many are in each type?",
        "sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype"
    },
    "interaction": [
        {
            "utterance": "What are the different types of video games ?",
            "sql": "select video_games.gtype"
        },
        {
            "utterance": "For each type , what information is there on the games ?",
            "sql": "select video_games.* group_by video_games.gtype"
        },
        {
            "utterance": "How many games are there for each type ?",
            "sql": "select video_games.gtype , count ( video_games.* ) group_by video_games.gtype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What type has the most games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the game types ?",
            "sql": "select video_games.gtype"
        },
        {
            "utterance": "Order the list of game types by number of games in descending order .",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* ) desc"
        },
        {
            "utterance": "Which type has the most ?",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the type with the fewest games?",
        "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the different game types ?",
            "sql": "select video_games.gtype"
        },
        {
            "utterance": "Order the list of game types by number of games in ascending order .",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* )"
        },
        {
            "utterance": "Which type has the most ?",
            "sql": "select video_games.gtype group_by video_games.gtype order_by count ( video_games.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the ids of all students who live in CHI?",
        "sql": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\""
    },
    "interaction": [
        {
            "utterance": "What are the student ids ?",
            "sql": "select student.stuid"
        },
        {
            "utterance": "Which of those are for students who live in the city with the code CHI ?",
            "sql": "select student.stuid where student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the ids of all students who have advisor number 1121?",
        "sql": "SELECT StuID FROM Student WHERE Advisor  =  1121"
    },
    "interaction": [
        {
            "utterance": "What information do you have on the students ?",
            "sql": "select student.*"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select student.stuid"
        },
        {
            "utterance": "Which of those are for students who have advisor 1121 ?",
            "sql": "select student.stuid where student.advisor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the first names for all students who are from the major numbered 600?",
        "sql": "SELECT Fname FROM Student WHERE Major  =  600"
    },
    "interaction": [
        {
            "utterance": "List all student information",
            "sql": "select student.*"
        },
        {
            "utterance": "Which of that information is for students in the major numbered 600 ?",
            "sql": "select student.* where student.major = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.fname where student.major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the average, minimum, and max ages for each of the different majors?",
        "sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major"
    },
    "interaction": [
        {
            "utterance": "What are the different majors ?",
            "sql": "select student.major"
        },
        {
            "utterance": "For each of those , what is the average age ?",
            "sql": "select avg ( student.age ) group_by student.major"
        },
        {
            "utterance": "Also , what is the minimum and maximum for each of those ?",
            "sql": "select student.major , avg ( student.age ) , min ( student.age ) , max ( student.age ) group_by student.major"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the advisors",
        "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What information do you have on each advisor ?",
            "sql": "select student.* group_by student.advisor"
        },
        {
            "utterance": "What is the name for each advisor ?",
            "sql": "select student.advisor group_by student.advisor"
        },
        {
            "utterance": "Which of those are for advisors who have more than 1 students ?",
            "sql": "select student.advisor group_by student.advisor having count ( student.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 14,
    "final": {
        "utterance": "How many different types of sports do we offer?",
        "sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo"
    },
    "interaction": [
        {
            "utterance": "What sport does every student play ?",
            "sql": "select sportsinfo.sportname"
        },
        {
            "utterance": "What is a list of the different types of sports ?",
            "sql": "select distinct sportsinfo.sportname"
        },
        {
            "utterance": "How long is that list ?",
            "sql": "select count ( distinct sportsinfo.sportname )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many different students are involved in sports?",
        "sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo"
    },
    "interaction": [
        {
            "utterance": "What is the student id of every student involved in sports ?",
            "sql": "select sportsinfo.stuid"
        },
        {
            "utterance": "Delete any repeats .",
            "sql": "select distinct sportsinfo.stuid"
        },
        {
            "utterance": "How many different student ids are there ?",
            "sql": "select count ( distinct sportsinfo.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the ids for all sporty students who are on scholarship?",
        "sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "What information is there on all sport players ?",
            "sql": "select sportsinfo.*"
        },
        {
            "utterance": "Which of those are on scholarship ?",
            "sql": "select sportsinfo.* where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What are their student ids ?",
            "sql": "select sportsinfo.stuid where sportsinfo.onscholarship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the last names for all scholarship students?",
        "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "What information is there on all students who play sports ?",
            "sql": "select sportsinfo.*"
        },
        {
            "utterance": "Which subset of this information is for students on scholarships ?",
            "sql": "select sportsinfo.* where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What are their last names ?",
            "sql": "select student.lname where sportsinfo.onscholarship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the total number of games played?",
        "sql": "SELECT sum(gamesplayed) FROM Sportsinfo"
    },
    "interaction": [
        {
            "utterance": "What sports information do you have ?",
            "sql": "select sportsinfo.*"
        },
        {
            "utterance": "How many games did each student play ?",
            "sql": "select sportsinfo.gamesplayed"
        },
        {
            "utterance": "What is the total number played ?",
            "sql": "select sum ( sportsinfo.gamesplayed )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the total number of all football games played by scholarship students?",
        "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "How many games has each student played ?",
            "sql": "select sportsinfo.gamesplayed"
        },
        {
            "utterance": "Which of those refer to football games played by scholarship students ?",
            "sql": "select sportsinfo.gamesplayed where sportsinfo.sportname = value and sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What is the total number of those games played ?",
            "sql": "select sum ( sportsinfo.gamesplayed ) where sportsinfo.sportname = value and sportsinfo.onscholarship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 20,
    "final": {
        "utterance": "How many students play each sport?",
        "sql": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname"
    },
    "interaction": [
        {
            "utterance": "What information do you have on each sport ?",
            "sql": "select sportsinfo.* group_by sportsinfo.sportname"
        },
        {
            "utterance": "How many students play each one ?",
            "sql": "select count ( sportsinfo.* ) group_by sportsinfo.sportname"
        },
        {
            "utterance": "Also , what are the names of each sport ?",
            "sql": "select sportsinfo.sportname , count ( sportsinfo.* ) group_by sportsinfo.sportname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the ids of all students along with how many sports and games did they play?",
        "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID"
    },
    "interaction": [
        {
            "utterance": "How many sports does each student play ?",
            "sql": "select count ( sportsinfo.* ) group_by sportsinfo.stuid"
        },
        {
            "utterance": "Also , how many games has each student played ?",
            "sql": "select count ( sportsinfo.* ) , sum ( sportsinfo.gamesplayed ) group_by sportsinfo.stuid"
        },
        {
            "utterance": "Also , what are their different student ids ?",
            "sql": "select sportsinfo.stuid , count ( sportsinfo.* ) , sum ( sportsinfo.gamesplayed ) group_by sportsinfo.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?",
        "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10"
    },
    "interaction": [
        {
            "utterance": "What are the student IDs for every student ?",
            "sql": "select sportsinfo.stuid group_by sportsinfo.stuid"
        },
        {
            "utterance": "Which of those are for students who played more than 10 hours of a week for all sports ?",
            "sql": "select sportsinfo.stuid group_by sportsinfo.stuid having sum ( sportsinfo.hoursperweek ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the first and last name of the student who played the most sports?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "For each student , how many sports do they play ?",
            "sql": "select count ( sportsinfo.* ) group_by sportsinfo.stuid"
        },
        {
            "utterance": "Order the information in descending order by number of sports played .",
            "sql": "select count ( * ) group_by sportsinfo.stuid"
        },
        {
            "utterance": "What is the first and last name of student who played the most ?",
            "sql": "select student.fname , student.lname group_by sportsinfo.stuid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the sport with the most scholarship students?",
        "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of every sport ?",
            "sql": "select sportsinfo.sportname group_by sportsinfo.sportname"
        },
        {
            "utterance": "Of those , which had students on scholarship ?",
            "sql": "select sportsinfo.sportname where sportsinfo.onscholarship = value group_by sportsinfo.sportname"
        },
        {
            "utterance": "Which sport has the most of those students ?",
            "sql": "select sportsinfo.sportname where sportsinfo.onscholarship = value group_by sportsinfo.sportname order_by count ( sportsinfo.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the ids of all students who don't play sports?",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo"
    },
    "interaction": [
        {
            "utterance": "What are the student ids of all those who play sports ?",
            "sql": "select sportsinfo.stuid"
        },
        {
            "utterance": "What are the ids of all students ?",
            "sql": "select student.stuid"
        },
        {
            "utterance": "Which ids are in the latter list but not the former ?",
            "sql": "select student.stuid except select sportsinfo.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the student ids for those on scholarship in major number 600?",
        "sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all students who are in major 600 ?",
            "sql": "select student.stuid where student.major = value"
        },
        {
            "utterance": "What are the student ids for all those on scholarship ?",
            "sql": "select sportsinfo.stuid where sportsinfo.onscholarship = value"
        },
        {
            "utterance": "What ids are in both categories ?",
            "sql": "select student.stuid where student.major = value intersect select sportsinfo.stuid where sportsinfo.onscholarship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the ids of all female students who play football?",
        "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""
    },
    "interaction": [
        {
            "utterance": "What are the ids of all female students ?",
            "sql": "select student.stuid where student.sex = value"
        },
        {
            "utterance": "What are the student ids of all those who play football ?",
            "sql": "select sportsinfo.stuid where sportsinfo.sportname = value"
        },
        {
            "utterance": "What ids are for both ?",
            "sql": "select student.stuid where student.sex = value intersect select sportsinfo.stuid where sportsinfo.sportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the ids of all male students who do not play football?",
        "sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""
    },
    "interaction": [
        {
            "utterance": "What are the ids of all the students ?",
            "sql": "select student.stuid where student.sex = value"
        },
        {
            "utterance": "What are the ids of all those who play football ?",
            "sql": "select sportsinfo.stuid where sportsinfo.sportname = value"
        },
        {
            "utterance": "What are the ids of those who do n't play football ?",
            "sql": "select student.stuid where student.sex = value except select sportsinfo.stuid where sportsinfo.sportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the total number of hours per work and number of games played by David Shieber?",
        "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\""
    },
    "interaction": [
        {
            "utterance": "What information on sports do you have for the student named David Shieber ?",
            "sql": "select * where student.fname = value and student.lname = value"
        },
        {
            "utterance": "How many hours per week does he practice in total ?",
            "sql": "select sum ( sportsinfo.hoursperweek ) where student.fname = value and student.lname = value"
        },
        {
            "utterance": "Also , how many games does he play overall ?",
            "sql": "select sum ( sportsinfo.hoursperweek ) , sum ( sportsinfo.gamesplayed ) where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What is the total number of hours per week and number of games played by students under 20?",
        "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20"
    },
    "interaction": [
        {
            "utterance": "What sports information is there on students under the age of 20 ?",
            "sql": "select * where student.age < value"
        },
        {
            "utterance": "How many hours per week do they practice in total ?",
            "sql": "select sum ( sportsinfo.hoursperweek ) where student.age < value"
        },
        {
            "utterance": "Also , how many games do they play overall ?",
            "sql": "select sum ( sportsinfo.hoursperweek ) , sum ( sportsinfo.gamesplayed ) where student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 31,
    "final": {
        "utterance": "How many different students play games?",
        "sql": "SELECT count(DISTINCT StuID) FROM Plays_games"
    },
    "interaction": [
        {
            "utterance": "What are the student ids of those who play games ?",
            "sql": "select plays_games.stuid"
        },
        {
            "utterance": "Give me a list of unique ids .",
            "sql": "select distinct plays_games.stuid"
        },
        {
            "utterance": "How long is it ?",
            "sql": "select count ( distinct plays_games.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the ids of all students who are not video game players?",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games"
    },
    "interaction": [
        {
            "utterance": "What are all the student ids ?",
            "sql": "select student.stuid"
        },
        {
            "utterance": "What are the student ids of all who play games ?",
            "sql": "select plays_games.stuid"
        },
        {
            "utterance": "What are the ids of all those in the first category but not the second ?",
            "sql": "select student.stuid except select plays_games.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the ids of all students who played video games and sports?",
        "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all students who play sports ?",
            "sql": "select sportsinfo.stuid"
        },
        {
            "utterance": "What are the student ids of all those who play games ?",
            "sql": "select plays_games.stuid"
        },
        {
            "utterance": "What are the ids of those who play sports but do n't play games ?",
            "sql": "select sportsinfo.stuid intersect select plays_games.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What are ids and total number of hours played for each game?",
        "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid"
    },
    "interaction": [
        {
            "utterance": "How many hours did each student play for each game ?",
            "sql": "select plays_games.hours_played group_by plays_games.gameid"
        },
        {
            "utterance": "What is the toal number of hours played for each game ?",
            "sql": "select sum ( plays_games.hours_played ) group_by plays_games.gameid"
        },
        {
            "utterance": "And what is the id of each game ?",
            "sql": "select plays_games.gameid , sum ( plays_games.hours_played ) group_by plays_games.gameid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the ids of all students and number of hours played?",
        "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid"
    },
    "interaction": [
        {
            "utterance": "For each student id , how many hours did each student play ?",
            "sql": "select plays_games.hours_played group_by plays_games.stuid"
        },
        {
            "utterance": "How much did they play in total ?",
            "sql": "select sum ( plays_games.hours_played ) group_by plays_games.stuid"
        },
        {
            "utterance": "Also , what are their student ids ?",
            "sql": "select plays_games.stuid , sum ( plays_games.hours_played ) group_by plays_games.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 36,
    "final": {
        "utterance": "What is the name of the game that has been played the most?",
        "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of each game from its id ?",
            "sql": "select video_games.gname group_by plays_games.gameid"
        },
        {
            "utterance": "Order the names by total hours played .",
            "sql": "select video_games.gname group_by plays_games.gameid order_by sum ( plays_games.hours_played ) desc"
        },
        {
            "utterance": "which one is first ?",
            "sql": "select video_games.gname group_by plays_games.gameid order_by sum ( plays_games.hours_played ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the first and last name of all students who play Football or Lacrosse?",
        "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""
    },
    "interaction": [
        {
            "utterance": "What are the ids of all students who played football or Lacrosse ?",
            "sql": "select sportsinfo.stuid where sportsinfo.sportname = value or sportsinfo.sportname = value"
        },
        {
            "utterance": "What are the first names that correspond to those ids ?",
            "sql": "select student.fname where sportsinfo.sportname = value or sportsinfo.sportname = value"
        },
        {
            "utterance": "Also , what are their last names ?",
            "sql": "select student.lname , student.fname where sportsinfo.sportname = value or sportsinfo.sportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What are the first names and ages of all students who are playing both Football and Lacrosse?",
        "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")"
    },
    "interaction": [
        {
            "utterance": "What are the student ids of all who played Football ?",
            "sql": "select sportsinfo.stuid where sportsinfo.sportname = value"
        },
        {
            "utterance": "Which of those ids are also marked as having played Lacrosse ?",
            "sql": "select sportsinfo.stuid where sportsinfo.sportname = value intersect select sportsinfo.stuid where sportsinfo.sportname = value"
        },
        {
            "utterance": "What are the first names and ages that correspond to those student ids ?",
            "sql": "select student.fname , student.age where student.stuid in ( select sportsinfo.stuid where sportsinfo.sportname = value intersect select sportsinfo.stuid where sportsinfo.sportname = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the distinct buildings with capacities of greater than 50?",
        "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50"
    },
    "interaction": [
        {
            "utterance": "What are the distinct classroom buildings ?",
            "sql": "select distinct classroom.building"
        },
        {
            "utterance": "Of those , which have capacity of over 50 ?",
            "sql": "select distinct classroom.building where classroom.capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 1,
    "final": {
        "utterance": "How many classrooms are not in Lamberton?",
        "sql": "SELECT count(*) FROM classroom WHERE building ! =  'Lamberton'"
    },
    "interaction": [
        {
            "utterance": "Which classrooms are not in Lamberton ?",
            "sql": "select classroom.* where classroom.building != value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( classroom.* ) where classroom.building != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Give the name and building of the departments with greater than average budget.",
        "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
    },
    "interaction": [
        {
            "utterance": "What is the average department budget ?",
            "sql": "select avg ( department.budget )"
        },
        {
            "utterance": "Which departments have a budget higher than average ?",
            "sql": "select department.* where department.budget > ( select avg ( department.budget ) )"
        },
        {
            "utterance": "What are their names and buildings ?",
            "sql": "select department.dept_name , department.building where department.budget > ( select avg ( department.budget ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    "interaction": [
        {
            "utterance": "Which classrooms have capacity between 50 and 100 ?",
            "sql": "select classroom.* where classroom.capacity between value and value"
        },
        {
            "utterance": "What are their buildings and room numbers ?",
            "sql": "select classroom.building , classroom.room_number where classroom.capacity between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the department name and corresponding building for the department with the greatest budget?",
        "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the departments by budget in decreasing order .",
            "sql": "select department.* order_by department.budget desc"
        },
        {
            "utterance": "Which is has the highest budget ?",
            "sql": "select department.* order_by department.budget desc limit_value"
        },
        {
            "utterance": "What is its name and building ?",
            "sql": "select department.dept_name , department.building order_by department.budget desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Give the name of the student in the History department with the most credits.",
        "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of students in the History department ?",
            "sql": "select student.name where student.dept_name = value"
        },
        {
            "utterance": "Which one has the most credits ?",
            "sql": "select student.name where student.dept_name = value order_by student.tot_cred desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Count the number of classrooms in Lamberton.",
        "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
    },
    "interaction": [
        {
            "utterance": "What are all the classrooms in Lamberton ?",
            "sql": "select classroom.* where classroom.building = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( classroom.* ) where classroom.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Count the number of students who have advisors.",
        "sql": "SELECT count(DISTINCT s_id) FROM advisor"
    },
    "interaction": [
        {
            "utterance": "What are the student ids of students with advisors ?",
            "sql": "select distinct advisor.s_id"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct advisor.s_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 8,
    "final": {
        "utterance": "Count the number of departments which offer courses.",
        "sql": "SELECT count(DISTINCT dept_name) FROM course"
    },
    "interaction": [
        {
            "utterance": "What are all the department names of departments that offer courses ?",
            "sql": "select distinct course.dept_name"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct course.dept_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Count the number of courses in the Physics department.",
        "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"
    },
    "interaction": [
        {
            "utterance": "What are all the courses in the Physics department ?",
            "sql": "select course.* where course.dept_name = value"
        },
        {
            "utterance": "What are their course ids ?",
            "sql": "select distinct course.course_id where course.dept_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct course.course_id ) where course.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the titles for courses with two prerequisites?",
        "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"
    },
    "interaction": [
        {
            "utterance": "Which courses have some prerequisite ?",
            "sql": "select *"
        },
        {
            "utterance": "Which ones have two prerequisites among them ?",
            "sql": "select * group_by prereq.course_id having count ( * ) = value"
        },
        {
            "utterance": "What are their titles ?",
            "sql": "select course.title group_by prereq.course_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the title, credit value, and department name for courses with more than one prerequisite?",
        "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which courses have more than 1 prerequisite ?",
            "sql": "select * group_by prereq.course_id having count ( * ) > value"
        },
        {
            "utterance": "What title , credit , and department name correspond to these ?",
            "sql": "select course.title , course.credits , course.dept_name group_by prereq.course_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Count the number of courses without prerequisites.",
        "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    "interaction": [
        {
            "utterance": "What are the ids for courses that have some prerequisites ?",
            "sql": "select prereq.course_id"
        },
        {
            "utterance": "How many courses do not in the resulting list ?",
            "sql": "select count ( course.* ) where course.course_id not in ( select prereq.course_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the titles of courses without prerequisites?",
        "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    "interaction": [
        {
            "utterance": "What are the ids for prerequisites ?",
            "sql": "select prereq.course_id"
        },
        {
            "utterance": "Which courses do not have prerequisites ?",
            "sql": "select course.* where course.course_id not in ( select prereq.course_id )"
        },
        {
            "utterance": "What are their titles ?",
            "sql": "select course.title where course.course_id not in ( select prereq.course_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Count the number of distinct instructors who have taught a course.",
        "sql": "SELECT COUNT (DISTINCT id) FROM teaches"
    },
    "interaction": [
        {
            "utterance": "What are the ids of instructors who have taught a course ?",
            "sql": "select distinct teaches.id"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct teaches.id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the sum of budgets of the Marketing and Finance departments?",
        "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
    },
    "interaction": [
        {
            "utterance": "What are the budgets of the Marketing department ?",
            "sql": "select department.budget where department.dept_name = value"
        },
        {
            "utterance": "How about that for the Finance department ?",
            "sql": "select department.budget where department.dept_name = value"
        },
        {
            "utterance": "What is their total budget ?",
            "sql": "select sum ( department.budget ) where department.dept_name = value or department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
        "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
    },
    "interaction": [
        {
            "utterance": "What is all the information about an instructor whose name contains 'Soisalon ' ?",
            "sql": "select instructor.* where instructor.name like value"
        },
        {
            "utterance": "What is their department name ?",
            "sql": "select instructor.dept_name where instructor.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 17,
    "final": {
        "utterance": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"
    },
    "interaction": [
        {
            "utterance": "How many rooms are there in Lamberton ?",
            "sql": "select count ( classroom.* ) where classroom.building = value"
        },
        {
            "utterance": "Of those , how many have capacity less than 50 ?",
            "sql": "select count ( classroom.* ) where classroom.building = value and classroom.capacity < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the names and budgets of departments with budgets greater than the average?",
        "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
    },
    "interaction": [
        {
            "utterance": "What is the average department budget ?",
            "sql": "select avg ( department.budget )"
        },
        {
            "utterance": "Which departments have a budget higher than that ?",
            "sql": "select department.* where department.budget > ( select avg ( department.budget ) )"
        },
        {
            "utterance": "What are their names and budgets ?",
            "sql": "select department.dept_name , department.budget where department.budget > ( select avg ( department.budget ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Give the name of the lowest earning instructor in the Statistics department.",
        "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the professors in the Statistics department ?",
            "sql": "select instructor.name where instructor.dept_name = value"
        },
        {
            "utterance": "Which one earns the least ?",
            "sql": "select instructor.name where instructor.dept_name = value order_by instructor.salary limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "What are the titles of Statistics courses ?",
            "sql": "select course.title where course.dept_name = value"
        },
        {
            "utterance": "Of these , which are also listed as Psychology courses ?",
            "sql": "select course.title where course.dept_name = value intersect select course.title where course.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"
    },
    "interaction": [
        {
            "utterance": "What are the titles of Statistics courses ?",
            "sql": "select course.title where course.dept_name = value"
        },
        {
            "utterance": "Of these , which are not provided by the Psychology department ?",
            "sql": "select course.title where course.dept_name = value except select course.title where course.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "What are the ids of instructors who taught in the Fall of 2009 ?",
            "sql": "select teaches.id where teaches.semester = value and teaches.year = value"
        },
        {
            "utterance": "Of those , which did not teach in the Spring of 2010 ?",
            "sql": "select teaches.id where teaches.semester = value and teaches.year = value except select teaches.id where teaches.semester = value and teaches.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the names of the students who took classes in 2009 or 2010?",
        "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "What are the distinct names of all the students ?",
            "sql": "select distinct student.name"
        },
        {
            "utterance": "Of these , which took classes in 2009 or 2010 ?",
            "sql": "select distinct student.name where takes.year = value or takes.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names of the 3 departments with the most courses?",
        "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "How many courses does each department have ?",
            "sql": "select course.dept_name , count ( course.* ) group_by course.dept_name"
        },
        {
            "utterance": "Order their names from greatest to least .",
            "sql": "select course.dept_name group_by course.dept_name order_by count ( course.* ) desc"
        },
        {
            "utterance": "What are the top 3 ?",
            "sql": "select course.dept_name group_by course.dept_name order_by count ( course.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the name of the department with the most credits?",
        "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many credits does each department offer ?",
            "sql": "select course.dept_name , sum ( course.credits ) group_by course.dept_name"
        },
        {
            "utterance": "What is the name of the department which offers the most ?",
            "sql": "select course.dept_name group_by course.dept_name order_by sum ( course.credits ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 26,
    "final": {
        "utterance": "Given the titles of all courses, in order of titles and credits.",
        "sql": "SELECT title FROM course ORDER BY title ,  credits"
    },
    "interaction": [
        {
            "utterance": "What are the titles of all courses ?",
            "sql": "select course.title"
        },
        {
            "utterance": "Order them by titles and credits .",
            "sql": "select course.title order_by course.title , course.credits"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Give the name of the department with the lowest budget.",
        "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the department names by increasing budget .",
            "sql": "select department.dept_name order_by department.budget"
        },
        {
            "utterance": "Which has the lowest ?",
            "sql": "select department.dept_name order_by department.budget limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the names and buildings of the deparments, sorted by budget descending?",
        "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
    },
    "interaction": [
        {
            "utterance": "Order the departments by decreasing budget .",
            "sql": "select department.* order_by department.budget desc"
        },
        {
            "utterance": "In the same order , what are their names and buildings ?",
            "sql": "select department.dept_name , department.building order_by department.budget desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Give the name of the highest paid instructor.",
        "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the instructor names by salary from greatest to least .",
            "sql": "select instructor.name order_by instructor.salary desc"
        },
        {
            "utterance": "Who is paid the most ?",
            "sql": "select instructor.name order_by instructor.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Give all information regarding instructors, in order of salary from least to greatest.",
        "sql": "SELECT * FROM instructor ORDER BY salary"
    },
    "interaction": [
        {
            "utterance": "What is all the information about instructors ?",
            "sql": "select instructor.*"
        },
        {
            "utterance": "Order this by increasing salary .",
            "sql": "select instructor.* order_by instructor.salary"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
    },
    "interaction": [
        {
            "utterance": "What are the names and department names for each student ?",
            "sql": "select student.name , student.dept_name"
        },
        {
            "utterance": "Order this by total credits ascending .",
            "sql": "select student.name , student.dept_name order_by student.tot_cred"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 32,
    "final": {
        "utterance": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
        "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"
    },
    "interaction": [
        {
            "utterance": "What were all the course titles in 2008 ?",
            "sql": "select course.title where teaches.year = value"
        },
        {
            "utterance": "Also , what were the instructors ' names ?",
            "sql": "select course.title , instructor.name where teaches.year = value"
        },
        {
            "utterance": "Order this by title .",
            "sql": "select course.title , instructor.name where teaches.year = value order_by course.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the names of instructors who advise more than one student?",
        "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all instructors who advise students ?",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Of those , which advise more than one student ?",
            "sql": "select instructor.name group_by advisor.i_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 34,
    "final": {
        "utterance": "What are the names of students who have more than one advisor?",
        "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of students with advisors ?",
            "sql": "select student.name"
        },
        {
            "utterance": "Which ones have more than one advisor ?",
            "sql": "select student.name group_by advisor.s_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 35,
    "final": {
        "utterance": "How many rooms in each building have a capacity of over 50?",
        "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "How many classrooms have capacity greater than 50 ?",
            "sql": "select count ( classroom.* ) where classroom.capacity > value"
        },
        {
            "utterance": "Count these by building .",
            "sql": "select count ( classroom.* ) , classroom.building where classroom.capacity > value group_by classroom.building"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the greatest and average capacity for rooms in each building?",
        "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "What are the maximum and average capacities across all classrooms ?",
            "sql": "select max ( classroom.capacity ) , avg ( classroom.capacity )"
        },
        {
            "utterance": "Find these for each building .",
            "sql": "select max ( classroom.capacity ) , avg ( classroom.capacity ) , classroom.building group_by classroom.building"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the titles of courses that are offered in more than one department?",
        "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What are all the different course titles ?",
            "sql": "select course.title"
        },
        {
            "utterance": "Of those , which are offered in more than one department ?",
            "sql": "select course.title group_by course.title having count ( course.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 38,
    "final": {
        "utterance": "How many total credits are offered by each department?",
        "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name"
    },
    "interaction": [
        {
            "utterance": "How many total credits are offered ?",
            "sql": "select sum ( course.credits )"
        },
        {
            "utterance": "Find the totals by department name .",
            "sql": "select sum ( course.credits ) , course.dept_name group_by course.dept_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the lowest salary in departments with average salary greater than the overall average.",
        "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)"
    },
    "interaction": [
        {
            "utterance": "What is the average salary of an instructor ?",
            "sql": "select avg ( instructor.salary )"
        },
        {
            "utterance": "What are the departments with average salary greater than that ?",
            "sql": "select instructor.dept_name group_by instructor.dept_name having avg ( instructor.salary ) > ( select avg ( instructor.salary ) )"
        },
        {
            "utterance": "Also , what are their lowest salaries ?",
            "sql": "select min ( instructor.salary ) , instructor.dept_name group_by instructor.dept_name having avg ( instructor.salary ) > ( select avg ( instructor.salary ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 40,
    "final": {
        "utterance": "How many courses are provided in each semester and year?",
        "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    "interaction": [
        {
            "utterance": "How many courses are offered in each year ?",
            "sql": "select count ( section.* ) , section.year group_by section.year"
        },
        {
            "utterance": "Split these by semester as well .",
            "sql": "select count ( section.* ) , section.semester , section.year group_by section.semester , section.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 41,
    "final": {
        "utterance": "Which year had the greatest number of courses?",
        "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many courses are offered in each year ?",
            "sql": "select section.year , count ( section.* ) group_by section.year"
        },
        {
            "utterance": "Which year had the most ?",
            "sql": "select section.year group_by section.year order_by count ( section.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 42,
    "final": {
        "utterance": "What is the year and semester with the most courses?",
        "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the number of courses in each semester and year .",
            "sql": "select section.semester , section.year , count ( section.* ) group_by section.semester , section.year"
        },
        {
            "utterance": "Which had the most ?",
            "sql": "select section.semester , section.year group_by section.semester , section.year order_by count ( section.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 43,
    "final": {
        "utterance": "What is the name of the deparment with the highest enrollment?",
        "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are in each department ?",
            "sql": "select student.dept_name , count ( student.* ) group_by student.dept_name"
        },
        {
            "utterance": "What is the name of the department with the most ?",
            "sql": "select student.dept_name group_by student.dept_name order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 44,
    "final": {
        "utterance": "How many students are in each department?",
        "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "Count this by department .",
            "sql": "select count ( student.* ) , student.dept_name group_by student.dept_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 45,
    "final": {
        "utterance": "Which semeseter and year had the fewest students?",
        "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students were taking classes in each semester and year ?",
            "sql": "select takes.semester , takes.year , count ( takes.* ) group_by takes.semester , takes.year"
        },
        {
            "utterance": "Which one had the fewest ?",
            "sql": "select takes.semester , takes.year group_by takes.semester , takes.year order_by count ( takes.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 46,
    "final": {
        "utterance": "Give id of the instructor who advises students in the History department.",
        "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all instructors who are advisors ?",
            "sql": "select advisor.i_id"
        },
        {
            "utterance": "Of these , which advise students in the History department ?",
            "sql": "select advisor.i_id where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 47,
    "final": {
        "utterance": "What are the names and salaries of instructors who advises students in the History department?",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all instructors who are advisors ?",
            "sql": "select advisor.i_id"
        },
        {
            "utterance": "Of these , which advise students in the History department ?",
            "sql": "select advisor.i_id where student.dept_name = value"
        },
        {
            "utterance": "What are their names and salaries ?",
            "sql": "select instructor.name , instructor.salary where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 48,
    "final": {
        "utterance": "What are the ids of courses without prerequisites?",
        "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
    },
    "interaction": [
        {
            "utterance": "What are the ids of courses with prerequisites ?",
            "sql": "select prereq.course_id"
        },
        {
            "utterance": "What are the ids of all other courses ?",
            "sql": "select course.course_id except select prereq.course_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 49,
    "final": {
        "utterance": "What are the names of courses without prerequisites?",
        "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    "interaction": [
        {
            "utterance": "What are the ids of courses with prerequisites ?",
            "sql": "select prereq.course_id"
        },
        {
            "utterance": "What are the titles of all other courses ?",
            "sql": "select course.title where course.course_id not in ( select prereq.course_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 50,
    "final": {
        "utterance": "Give the title of the prerequisite to the course International Finance.",
        "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all prerequisites ?",
            "sql": "select prereq.prereq_id"
        },
        {
            "utterance": "What is the id of the prerequisite for International Finance ?",
            "sql": "select prereq.prereq_id where course.title = value"
        },
        {
            "utterance": "What is its title ?",
            "sql": "select course.title where course.course_id in ( select prereq.prereq_id where course.title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 51,
    "final": {
        "utterance": "What is the title of the course with Differential Geometry as a prerequisite?",
        "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all the prerequisites ?",
            "sql": "select prereq.course_id"
        },
        {
            "utterance": "What is the id of the course for which Differential Geometry is a prerequisite ?",
            "sql": "select prereq.course_id where course.title = value"
        },
        {
            "utterance": "What is its title ?",
            "sql": "select course.title where course.course_id in ( select prereq.course_id where course.title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 52,
    "final": {
        "utterance": "What are the names of students who took a course in the Fall of 2003?",
        "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
    },
    "interaction": [
        {
            "utterance": "What are the ids of students who took courses in the Fall of 2003 ?",
            "sql": "select takes.id where takes.semester = value and takes.year = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select student.name where student.id in ( select takes.id where takes.semester = value and takes.year = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 53,
    "final": {
        "utterance": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "What are the titles of courses offered in the Fall of 2010 ?",
            "sql": "select course.title where section.semester = value and section.year = value"
        },
        {
            "utterance": "Of these , which were offered in Chandler building ?",
            "sql": "select course.title where section.building = value and section.semester = value and section.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 54,
    "final": {
        "utterance": "What are the names of instructors who have taught C Programming courses?",
        "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all instructors ?",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Of those , which have taught a C Programming course ?",
            "sql": "select instructor.name where course.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 55,
    "final": {
        "utterance": "What are the names and salaries of instructors who advise students in the Math department?",
        "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all advisors ?",
            "sql": "select advisor.i_id"
        },
        {
            "utterance": "What are the ids of advisors who advise students in the Math department ?",
            "sql": "select advisor.i_id where student.dept_name = value"
        },
        {
            "utterance": "What are their names and salaries ?",
            "sql": "select instructor.name , instructor.salary where student.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 56,
    "final": {
        "utterance": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
    },
    "interaction": [
        {
            "utterance": "What are the ids of advisors who advise students in the Math department ?",
            "sql": "select advisor.i_id where student.dept_name = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select instructor.name , instructor.salary where student.dept_name = value"
        },
        {
            "utterance": "Order this by the students ' total credits .",
            "sql": "select instructor.name where student.dept_name = value order_by student.tot_cred"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 57,
    "final": {
        "utterance": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
    },
    "interaction": [
        {
            "utterance": "What are all the ids of the prerequisite classes ?",
            "sql": "select prereq.prereq_id"
        },
        {
            "utterance": "Of these , which is the prerequisite for Mobile Computing ?",
            "sql": "select prereq.prereq_id where course.title = value"
        },
        {
            "utterance": "What is its title ?",
            "sql": "select course.title where course.course_id in ( select prereq.prereq_id where course.title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 58,
    "final": {
        "utterance": "What is the name of the instructor who advises the student with the greatest number of total credits?",
        "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are names of instructors who advise students ?",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Of these , which one instructs the students with the most total credits ?",
            "sql": "select instructor.name order_by student.tot_cred desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 59,
    "final": {
        "utterance": "What are the names of instructors who didn't teach?",
        "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    "interaction": [
        {
            "utterance": "What are the ids of instructors who taught courses ?",
            "sql": "select teaches.id"
        },
        {
            "utterance": "What are the ids of all other instructors ?",
            "sql": "select instructor.id where instructor.id not in ( select teaches.id )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select instructor.name where instructor.id not in ( select teaches.id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 60,
    "final": {
        "utterance": "What are the ids of instructors who didnt' teach?",
        "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
    },
    "interaction": [
        {
            "utterance": "What are the ids of instructors who taught courses ?",
            "sql": "select teaches.id"
        },
        {
            "utterance": "What are the ids of all other instructors ?",
            "sql": "select instructor.id except select teaches.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 61,
    "final": {
        "utterance": "What are the names of instructors who didn't teach courses in the Spring?",
        "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
    },
    "interaction": [
        {
            "utterance": "What are the ids of teachers who taught in the Spring ?",
            "sql": "select teaches.id where teaches.semester = value"
        },
        {
            "utterance": "What are the ids of all other instructors ?",
            "sql": "select instructor.id where instructor.id not in ( select teaches.id where teaches.semester = value )"
        },
        {
            "utterance": "What are the corresponding instructor names ?",
            "sql": "select instructor.name where instructor.id not in ( select teaches.id where teaches.semester = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 62,
    "final": {
        "utterance": "Which department has the highest average instructor salary?",
        "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the average instructor salaries for each department ?",
            "sql": "select instructor.dept_name , avg ( instructor.salary ) group_by instructor.dept_name"
        },
        {
            "utterance": "Which department has the highest ?",
            "sql": "select instructor.dept_name group_by instructor.dept_name order_by avg ( instructor.salary ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 63,
    "final": {
        "utterance": "How many instructors are in the department with the highest budget, and what is their average salary?",
        "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the departments by decreasing budget .",
            "sql": "select department.dept_name order_by department.budget desc"
        },
        {
            "utterance": "How many instructors are in the department with the highest budget ?",
            "sql": "select count ( * ) order_by department.budget desc limit_value"
        },
        {
            "utterance": "Also , what is the average salary of those instructors ?",
            "sql": "select avg ( instructor.salary ) , count ( * ) order_by department.budget desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 64,
    "final": {
        "utterance": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.",
        "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)"
    },
    "interaction": [
        {
            "utterance": "What is the maximum capacity of any classroom ?",
            "sql": "select max ( classroom.capacity )"
        },
        {
            "utterance": "What is the title of the course which is taught there ?",
            "sql": "select course.title where classroom.capacity = ( select max ( classroom.capacity ) )"
        },
        {
            "utterance": "Also , what credits value does that course have ?",
            "sql": "select course.title , course.credits where classroom.capacity = ( select max ( classroom.capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 65,
    "final": {
        "utterance": "What are the names of students who haven't taken any Biology courses?",
        "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    "interaction": [
        {
            "utterance": "Which students have taken Biology courses ?",
            "sql": "select * where course.dept_name = value"
        },
        {
            "utterance": "What are the names of all students who did not take that class ?",
            "sql": "select student.name where student.id not in ( select takes.id where course.dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 66,
    "final": {
        "utterance": "How many students and instructors are in each department?",
        "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"
    },
    "interaction": [
        {
            "utterance": "Find the total number of students .",
            "sql": "select count ( distinct student.id )"
        },
        {
            "utterance": "Now , find the number by department .",
            "sql": "select count ( distinct student.id ) , department.dept_name group_by department.dept_name"
        },
        {
            "utterance": "Also , find the number of instructors in each department .",
            "sql": "select count ( distinct student.id ) , count ( distinct instructor.id ) , instructor.dept_name group_by instructor.dept_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 67,
    "final": {
        "utterance": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
    },
    "interaction": [
        {
            "utterance": "What is the id of the prerequisite of International Finance ?",
            "sql": "select prereq.prereq_id where course.title = value"
        },
        {
            "utterance": "What are the ids of students who have taken this course ?",
            "sql": "select student.id where takes.course_id in ( select prereq.prereq_id where course.title = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select student.name where takes.course_id in ( select prereq.prereq_id where course.title = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 68,
    "final": {
        "utterance": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
        "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"
    },
    "interaction": [
        {
            "utterance": "What is the average salary of instructors in the Physics department ?",
            "sql": "select avg ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "What are the names of the instructors who earn more than that ?",
            "sql": "select instructor.name where instructor.salary < ( select avg ( instructor.salary ) where instructor.dept_name = value )"
        },
        {
            "utterance": "Also , what are their salaries ?",
            "sql": "select instructor.name , instructor.salary where instructor.salary < ( select avg ( instructor.salary ) where instructor.dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 69,
    "final": {
        "utterance": "What are the names of students who have taken Statistics courses?",
        "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    "interaction": [
        {
            "utterance": "What is all the information about the Statistics courses ?",
            "sql": "select course.* where course.dept_name = value"
        },
        {
            "utterance": "What are the names of students who have taken courses in the Statistics department ?",
            "sql": "select student.name where course.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 70,
    "final": {
        "utterance": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"
    },
    "interaction": [
        {
            "utterance": "What is all the information about the courses in the Psychology department , ordered by title ?",
            "sql": "select course.* where course.dept_name = value order_by course.title"
        },
        {
            "utterance": "What are the building , room number , semester and year corresponding to these courses ?",
            "sql": "select section.building , section.room_number , section.semester , section.year where course.dept_name = value order_by course.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 71,
    "final": {
        "utterance": "What are the names of all instructors in the Comp. Sci. department?",
        "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the instructors ?",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Of those , which are in the Comp . Sci . department ?",
            "sql": "select instructor.name where instructor.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 72,
    "final": {
        "utterance": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"
    },
    "interaction": [
        {
            "utterance": "What are the names of all instructors who earn more than 80000 ?",
            "sql": "select instructor.name where instructor.salary > value"
        },
        {
            "utterance": "Of those , which are in the Comp . Sci . department ?",
            "sql": "select instructor.name where instructor.dept_name = value and instructor.salary > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 73,
    "final": {
        "utterance": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID"
    },
    "interaction": [
        {
            "utterance": "What are all the names of teachers who have taught a course ?",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Also , what were the course ids ?",
            "sql": "select instructor.name , teaches.course_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 74,
    "final": {
        "utterance": "What are the names of Art instructors who have taught a course, and the corresponding course id?",
        "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"
    },
    "interaction": [
        {
            "utterance": "What are all the names of teachers who have taught a course , and what were the course ids ?",
            "sql": "select instructor.name , teaches.course_id"
        },
        {
            "utterance": "Of these , which were in the Art department ?",
            "sql": "select instructor.name , teaches.course_id where instructor.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 75,
    "final": {
        "utterance": "What are the names of all instructors with names that include \"dar\"?",
        "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all instructors ?",
            "sql": "select instructor.name"
        },
        {
            "utterance": "Of these , which include the substring `` dar '' ?",
            "sql": "select instructor.name where instructor.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 76,
    "final": {
        "utterance": "List the distinct names of the instructors, ordered by name.",
        "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name"
    },
    "interaction": [
        {
            "utterance": "What are the distinct names of all instructors ?",
            "sql": "select distinct instructor.name"
        },
        {
            "utterance": "Sort this in alphabetical order .",
            "sql": "select distinct instructor.name order_by instructor.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 77,
    "final": {
        "utterance": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
        "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "What are the ids for courses offered in the Fall of 2009 ?",
            "sql": "select section.course_id where section.semester = value and section.year = value"
        },
        {
            "utterance": "Also include the ids for courses offered in the Spring of 2010 .",
            "sql": "select section.course_id where section.semester = value and section.year = value union select section.course_id where section.semester = value and section.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 78,
    "final": {
        "utterance": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "What are the ids for courses offered in the Fall of 2009 ?",
            "sql": "select section.course_id where section.semester = value and section.year = value"
        },
        {
            "utterance": "Of these , which were also offered in the Spring of 2010 ?",
            "sql": "select section.course_id where section.semester = value and section.year = value intersect select section.course_id where section.semester = value and section.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 79,
    "final": {
        "utterance": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "What are the ids of courses offered in the Fall of 2009 ?",
            "sql": "select section.course_id where section.semester = value and section.year = value"
        },
        {
            "utterance": "Of these , which were not offered in the Spring of 2010 ?",
            "sql": "select section.course_id where section.semester = value and section.year = value except select section.course_id where section.semester = value and section.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 80,
    "final": {
        "utterance": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"
    },
    "interaction": [
        {
            "utterance": "What was the largest salary across instructors ?",
            "sql": "select max ( instructor.salary )"
        },
        {
            "utterance": "What were all the other distinct salaries ?",
            "sql": "select distinct instructor.salary where instructor.salary < ( select max ( instructor.salary ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 81,
    "final": {
        "utterance": "How many instructors teach a course in the Spring of 2010?",
        "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "What are the distinct ids of instructors teaching in the Spring of 2010 ?",
            "sql": "select distinct teaches.id where teaches.semester = value and teaches.year = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct teaches.id ) where teaches.semester = value and teaches.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 82,
    "final": {
        "utterance": "What are the names and average salaries for departments with average salary higher than 42000?",
        "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000"
    },
    "interaction": [
        {
            "utterance": "What are the names of departments that have average salaries higher than 42000 ?",
            "sql": "select instructor.dept_name group_by instructor.dept_name having avg ( instructor.salary ) > value"
        },
        {
            "utterance": "Also , what are their average salaries ?",
            "sql": "select instructor.dept_name , avg ( instructor.salary ) group_by instructor.dept_name having avg ( instructor.salary ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 83,
    "final": {
        "utterance": "What are the names of instructors who earn more than at least one instructor from the Biology department?",
        "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    "interaction": [
        {
            "utterance": "What is the lowest salary of instructors in the Biology department ?",
            "sql": "select min ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "What are the ids of instructors who earn more than that ?",
            "sql": "select instructor.id where instructor.salary > ( select min ( instructor.salary ) where instructor.dept_name = value )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select instructor.name where instructor.salary > ( select min ( instructor.salary ) where instructor.dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_2",
    "interaction_id": 84,
    "final": {
        "utterance": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?",
        "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    "interaction": [
        {
            "utterance": "What is the highest salary of instructors in the Biology department ?",
            "sql": "select max ( instructor.salary ) where instructor.dept_name = value"
        },
        {
            "utterance": "What are the names of instructors who earn more than this ?",
            "sql": "select instructor.name where instructor.salary > ( select max ( instructor.salary ) where instructor.dept_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many professors are in the accounting dept?",
        "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""
    },
    "interaction": [
        {
            "utterance": "What are the codes of the accounting department ?",
            "sql": "select department.dept_code where department.dept_name = value"
        },
        {
            "utterance": "Which professors are in that department ?",
            "sql": "select * where department.dept_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many professors teach a class with the code ACCT-211?",
        "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\""
    },
    "interaction": [
        {
            "utterance": "What can you tell me about the class with code `` ACCT-211 '' ?",
            "sql": "select class.* where class.crs_code = value"
        },
        {
            "utterance": "How many different professors teach that class ?",
            "sql": "select count ( distinct class.prof_num ) where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the first and last name of all biology professors?",
        "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\""
    },
    "interaction": [
        {
            "utterance": "What can you tell me about the biology department ?",
            "sql": "select department.* where department.dept_name = value"
        },
        {
            "utterance": "What are the first name of all professors in the department ?",
            "sql": "select employee.emp_fname where department.dept_name = value"
        },
        {
            "utterance": "What are their last names as well ?",
            "sql": "select employee.emp_fname , employee.emp_lname where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the first names and birthdates of the professors in charge of ACCT-211?",
        "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\""
    },
    "interaction": [
        {
            "utterance": "Which professors are in charge of ACCT-211 ?",
            "sql": "select distinct * where class.crs_code = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select distinct employee.emp_fname where class.crs_code = value"
        },
        {
            "utterance": "Also , what are their date of births ?",
            "sql": "select distinct employee.emp_fname , employee.emp_dob where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 4,
    "final": {
        "utterance": "How many classes does the professor whose last name is Graztevski teach?",
        "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'"
    },
    "interaction": [
        {
            "utterance": "Give all details about the professor with the last name Graztevski ?",
            "sql": "select employee.* where employee.emp_lname = value"
        },
        {
            "utterance": "Which classes does he teach ? Return the class code .",
            "sql": "select class.crs_code where employee.emp_lname = value"
        },
        {
            "utterance": "How many classes does he teach ?",
            "sql": "select count ( * ) where employee.emp_lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the school code of the accounting department?",
        "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\""
    },
    "interaction": [
        {
            "utterance": "Find all info about the accounting department ?",
            "sql": "select department.* where department.dept_name = value"
        },
        {
            "utterance": "What is its school code ?",
            "sql": "select department.school_code where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the description for the CIS-220 and how many credits does it have?",
        "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'"
    },
    "interaction": [
        {
            "utterance": "How many credits does each course have ?",
            "sql": "select course.crs_credit , course.crs_code group_by course.crs_code"
        },
        {
            "utterance": "How many does CIS-220 have ?",
            "sql": "select course.crs_credit where course.crs_code = value"
        },
        {
            "utterance": "What is its description ?",
            "sql": "select course.crs_description where course.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Where is the history department?",
        "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "List addresses of all departments .",
            "sql": "select department.dept_address"
        },
        {
            "utterance": "What is one for the history department ?",
            "sql": "select department.dept_address where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the different locations of the school with the code BUS?",
        "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'"
    },
    "interaction": [
        {
            "utterance": "What are the names of departments in the school with the code BUS ?",
            "sql": "select department.dept_name where department.school_code = value"
        },
        {
            "utterance": "What are different addresses of the school ?",
            "sql": "select distinct department.dept_address where department.school_code = value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( distinct department.dept_address ) where department.school_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Count different addresses of each school.",
        "sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code"
    },
    "interaction": [
        {
            "utterance": "How many different shools are there ?",
            "sql": "select count ( distinct department.school_code )"
        },
        {
            "utterance": "How many different addresses does each one have ?",
            "sql": "select count ( distinct department.dept_address ) , department.school_code group_by department.school_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the course description and number of credits for QM-261?",
        "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'"
    },
    "interaction": [
        {
            "utterance": "Return all info about all courses .",
            "sql": "select course.*"
        },
        {
            "utterance": "How many credits is the course QM-261 worth ?",
            "sql": "select course.crs_credit where course.crs_code = value"
        },
        {
            "utterance": "WHat is its description ?",
            "sql": "select course.crs_credit , course.crs_description where course.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many departments are in each school?",
        "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"
    },
    "interaction": [
        {
            "utterance": "What are the different school codes ?",
            "sql": "select distinct department.school_code"
        },
        {
            "utterance": "For each one , how many different departments does it have ?",
            "sql": "select count ( distinct department.dept_name ) , department.school_code group_by department.school_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many different departments are there in each school that has less than 5 apartments?",
        "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"
    },
    "interaction": [
        {
            "utterance": "What are the different schools ?",
            "sql": "select distinct department.school_code"
        },
        {
            "utterance": "How many departments does each one of them have ?",
            "sql": "select count ( distinct department.dept_name ) , department.school_code group_by department.school_code"
        },
        {
            "utterance": "Find the ones which have less than 5 deparments .",
            "sql": "select count ( distinct department.dept_name ) , department.school_code group_by department.school_code having count ( distinct department.dept_name ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many sections does each course have?",
        "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code"
    },
    "interaction": [
        {
            "utterance": "What are the different course codes ?",
            "sql": "select distinct class.crs_code"
        },
        {
            "utterance": "How many sections exist for each one ?",
            "sql": "select count ( class.* ) , class.crs_code group_by class.crs_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 14,
    "final": {
        "utterance": "How many credits does the department offer?",
        "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "What is the total credits of all courses ?",
            "sql": "select sum ( course.crs_credit )"
        },
        {
            "utterance": "Give the number for each department .",
            "sql": "select sum ( course.crs_credit ) , course.dept_code group_by course.dept_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 15,
    "final": {
        "utterance": "For each classroom with at least 2 classes, how many classes are offered?",
        "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "For each classroom , how many the classes held there ?",
            "sql": "select count ( class.* ) , class.class_room group_by class.class_room"
        },
        {
            "utterance": "How many are there for each classroom with at least 2 classes ?",
            "sql": "select count ( class.* ) , class.class_room group_by class.class_room having count ( class.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 16,
    "final": {
        "utterance": "How many classes are held in each department?",
        "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "How many classes are offered ?",
            "sql": "select count ( class.* )"
        },
        {
            "utterance": "return the number for each department .",
            "sql": "select count ( * ) , course.dept_code group_by course.dept_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many classes exist for each school?",
        "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code"
    },
    "interaction": [
        {
            "utterance": "What are the different school codes ?",
            "sql": "select distinct department.school_code"
        },
        {
            "utterance": "How many classes are there for each of them ?",
            "sql": "select count ( * ) , department.school_code group_by department.school_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many different professors are there for the different schools?",
        "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code"
    },
    "interaction": [
        {
            "utterance": "How many professors are there ?",
            "sql": "select count ( professor.* )"
        },
        {
            "utterance": "How many of them are there for each school ?",
            "sql": "select count ( * ) , department.school_code group_by department.school_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the count and code of the job with the most employee?",
        "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "For each job code , how many employees are there ?",
            "sql": "select employee.emp_jobcode , count ( employee.* ) group_by employee.emp_jobcode"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select employee.emp_jobcode , count ( employee.* ) group_by employee.emp_jobcode order_by count ( employee.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which school has the fewest professors?",
        "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the different school codes ?",
            "sql": "select distinct department.school_code"
        },
        {
            "utterance": "For each one , how many professors does it have ?",
            "sql": "select department.school_code , count ( * ) group_by department.school_code"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select department.school_code group_by department.school_code order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many professors have a Ph.D. in each department?",
        "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "How many professors do have a Ph.D. ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value"
        },
        {
            "utterance": "Count the number of these professors for each department .",
            "sql": "select count ( professor.* ) , professor.dept_code where professor.prof_high_degree = value group_by professor.dept_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 22,
    "final": {
        "utterance": "How many students are in each department?",
        "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "What are all students ?",
            "sql": "select student.*"
        },
        {
            "utterance": "How many of them ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "How many are there in each department ?",
            "sql": "select count ( student.* ) , student.dept_code group_by student.dept_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 23,
    "final": {
        "utterance": "How many hours do the students spend studying in each department?",
        "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "For each department , how many students does it have ?",
            "sql": "select count ( student.* ) , student.dept_code group_by student.dept_code"
        },
        {
            "utterance": "For each department , what is the total hours worked by those students ?",
            "sql": "select sum ( student.stu_hrs ) , student.dept_code group_by student.dept_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the highest, lowest, and average student GPA for every department?",
        "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code"
    },
    "interaction": [
        {
            "utterance": "what are the student GPAs ?",
            "sql": "select student.stu_gpa"
        },
        {
            "utterance": "What is average for each department ?",
            "sql": "select avg ( student.stu_gpa ) , student.dept_code group_by student.dept_code"
        },
        {
            "utterance": "Also , find the highest and lowest pga ?",
            "sql": "select max ( student.stu_gpa ) , avg ( student.stu_gpa ) , min ( student.stu_gpa ) , student.dept_code group_by student.dept_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Which department has the highest average student GPA, and what is the average gpa?",
        "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average GPA of all students ?",
            "sql": "select avg ( student.stu_gpa )"
        },
        {
            "utterance": "How about the average GPA of students in each department ?",
            "sql": "select student.dept_code , avg ( student.stu_gpa ) group_by student.dept_code"
        },
        {
            "utterance": "Also , find the corresponding name of each department ?",
            "sql": "select department.dept_name , avg ( student.stu_gpa ) group_by student.dept_code"
        },
        {
            "utterance": "Which one has the highest average GPA ?",
            "sql": "select department.dept_name , avg ( student.stu_gpa ) group_by student.dept_code order_by avg ( student.stu_gpa ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many schools are there in the department?",
        "sql": "SELECT count(DISTINCT school_code) FROM department"
    },
    "interaction": [
        {
            "utterance": "What are the school codes ?",
            "sql": "select department.school_code"
        },
        {
            "utterance": "Remove any repeating ones .",
            "sql": "select distinct department.school_code"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct department.school_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 27,
    "final": {
        "utterance": "How many unique classes are offered?",
        "sql": "SELECT count(DISTINCT class_code) FROM CLASS"
    },
    "interaction": [
        {
            "utterance": "What are the different class codes ?",
            "sql": "select distinct class.class_code"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( distinct class.class_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the number of different course codes?",
        "sql": "SELECT count(DISTINCT crs_code) FROM CLASS"
    },
    "interaction": [
        {
            "utterance": "What are the course codes ?",
            "sql": "select class.crs_code"
        },
        {
            "utterance": "What are the unique ones ?",
            "sql": "select distinct class.crs_code"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct class.crs_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 29,
    "final": {
        "utterance": "How many different departments are there?",
        "sql": "SELECT count(DISTINCT dept_name) FROM department"
    },
    "interaction": [
        {
            "utterance": "What are the different department names ?",
            "sql": "select distinct department.dept_name"
        },
        {
            "utterance": "How many does it offer ?",
            "sql": "select count ( distinct department.dept_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many courses does the department of Computer Information Systmes offer?",
        "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""
    },
    "interaction": [
        {
            "utterance": "What can you tell me about the Computer Info . Systems department ?",
            "sql": "select department.* where department.dept_name = value"
        },
        {
            "utterance": "What courses does it offer ?",
            "sql": "select * where department.dept_name = value"
        },
        {
            "utterance": "How many courses is that ?",
            "sql": "select count ( * ) where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the number of different class sections offered in the course ACCT-211?",
        "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "What are the different class sections ?",
            "sql": "select distinct class.class_section"
        },
        {
            "utterance": "What about for the course ACCT-211 ?",
            "sql": "select distinct class.class_section where class.crs_code = value"
        },
        {
            "utterance": "How many different ones does it offer ?",
            "sql": "select count ( distinct class.class_section ) where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the total number of credits offered by each department?",
        "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code"
    },
    "interaction": [
        {
            "utterance": "List codes of all courses and their credits .",
            "sql": "select course.crs_credit , course.crs_code"
        },
        {
            "utterance": "What is the total number of credits for each department ?",
            "sql": "select sum ( course.crs_credit ) , course.dept_code group_by course.dept_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Which department offers the most credits all together?",
        "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many total course credits does each department offer ?",
            "sql": "select sum ( course.crs_credit ) , course.dept_code group_by course.dept_code"
        },
        {
            "utterance": "Find the department that offers the most number of credits of classes ?",
            "sql": "select * group_by course.dept_code order_by sum ( course.crs_credit ) desc limit_value"
        },
        {
            "utterance": "What is the name of that department ?",
            "sql": "select department.dept_name group_by course.dept_code order_by sum ( course.crs_credit ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What are the total number of students enrolled in ACCT-211?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "Can you tell me about course ACCT-211 ?",
            "sql": "select class.* where class.crs_code = value"
        },
        {
            "utterance": "How many students are enrolled in this class ?",
            "sql": "select count ( * ) where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the first names of all students in course ACCT-211?",
        "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "Can you tell me about course ACCT-211 ?",
            "sql": "select class.* where class.crs_code = value"
        },
        {
            "utterance": "How many students are enrolled in this class ?",
            "sql": "select count ( * ) where class.crs_code = value"
        },
        {
            "utterance": "What are their corresponding first names ?",
            "sql": "select student.stu_fname where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the first names of all students who took ACCT-211 and received a C?",
        "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'"
    },
    "interaction": [
        {
            "utterance": "Which students were enrollment in the course ACCT-211 ?",
            "sql": "select * where class.crs_code = value"
        },
        {
            "utterance": "Which of those received C 's as grades ?",
            "sql": "select * where class.crs_code = value and enroll.enroll_grade = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.stu_fname where class.crs_code = value and enroll.enroll_grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 37,
    "final": {
        "utterance": "How many employees are there all together?",
        "sql": "SELECT count(*) FROM employee"
    },
    "interaction": [
        {
            "utterance": "Tell me everything about the employees .",
            "sql": "select employee.*"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( employee.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the total number of professors with a Ph.D. ?",
        "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"
    },
    "interaction": [
        {
            "utterance": "Who are all professors ?",
            "sql": "select professor.*"
        },
        {
            "utterance": "What about those who have a Ph.D. degree .",
            "sql": "select professor.* where professor.prof_high_degree = value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 39,
    "final": {
        "utterance": "How many students are enrolled in some classes that are taught by an accounting professor?",
        "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "Find the all info about the accounting department .",
            "sql": "select department.* where department.dept_name = value"
        },
        {
            "utterance": "Which classes are taught the department ?",
            "sql": "select * where department.dept_name = value"
        },
        {
            "utterance": "How many students are enrolled in those classes ?",
            "sql": "select count ( * ) where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 40,
    "final": {
        "utterance": "What is the name of the department with the most students enrolled?",
        "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find number of students enrolled in some classes offered by each department .",
            "sql": "select count ( * ) , course.dept_code group_by course.dept_code"
        },
        {
            "utterance": "Which department has the most number of students enrolled ?",
            "sql": "select * group_by course.dept_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the corresponding department name ?",
            "sql": "select department.dept_name group_by course.dept_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the names of all departments in alphabetical order?",
        "sql": "SELECT dept_name FROM department ORDER BY dept_name"
    },
    "interaction": [
        {
            "utterance": "What are the names of each department ?",
            "sql": "select department.dept_name"
        },
        {
            "utterance": "Order them alphabetically .",
            "sql": "select department.dept_name order_by department.dept_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 42,
    "final": {
        "utterance": "What are the codes of all the courses that are located in room KLR209?",
        "sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'"
    },
    "interaction": [
        {
            "utterance": "Tell me about all classes .",
            "sql": "select class.*"
        },
        {
            "utterance": "Which of those take place in room KLR209 ?",
            "sql": "select class.* where class.class_room = value"
        },
        {
            "utterance": "What are their codes ?",
            "sql": "select class.class_code where class.class_room = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the first names of all employees that are professors ordered by date of birth?",
        "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob"
    },
    "interaction": [
        {
            "utterance": "Order the employee information by date of birth .",
            "sql": "select employee.* order_by employee.emp_dob"
        },
        {
            "utterance": "Which of these employees have jobs as professors ?",
            "sql": "select employee.* where employee.emp_jobcode = value order_by employee.emp_dob"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select employee.emp_fname where employee.emp_jobcode = value order_by employee.emp_dob"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What are the first names and office locations for all professors sorted alphabetically by first name?",
        "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"
    },
    "interaction": [
        {
            "utterance": "Order the employees alphabetically by first name",
            "sql": "select employee.* order_by employee.emp_fname"
        },
        {
            "utterance": "Which of those are professors ?",
            "sql": "select * order_by employee.emp_fname"
        },
        {
            "utterance": "What are their first names and office locations ?",
            "sql": "select employee.emp_fname , professor.prof_office order_by employee.emp_fname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 45,
    "final": {
        "utterance": "What are the first and last names of the employee with the earliest date of birth?",
        "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the employees ' first names ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Also , what are their last names ?",
            "sql": "select employee.emp_fname , employee.emp_lname"
        },
        {
            "utterance": "Which of those refer to the oldest employee ?",
            "sql": "select employee.emp_fname , employee.emp_lname order_by employee.emp_dob limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 46,
    "final": {
        "utterance": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?",
        "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all information on students with a higher GPA than 3",
            "sql": "select student.* where student.stu_gpa > value"
        },
        {
            "utterance": "What information is for the youngest student ?",
            "sql": "select student.* where student.stu_gpa > value order_by student.stu_dob desc limit_value"
        },
        {
            "utterance": "What are their first name , last name , and GPA ?",
            "sql": "select student.stu_fname , student.stu_lname , student.stu_gpa where student.stu_gpa > value order_by student.stu_dob desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 47,
    "final": {
        "utterance": "What are the first names of all students who got a grade C in a class?",
        "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'"
    },
    "interaction": [
        {
            "utterance": "What are the student ids of all students who received an enrollment grade of C ?",
            "sql": "select enroll.stu_num where enroll.enroll_grade = value"
        },
        {
            "utterance": "What are the first names that correspond to each student id ?",
            "sql": "select student.stu_fname where enroll.enroll_grade = value"
        },
        {
            "utterance": "What is a list of distinct first names ?",
            "sql": "select distinct student.stu_fname where enroll.enroll_grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 48,
    "final": {
        "utterance": "What is the name of the department with the fewest professors?",
        "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "For each department , what is the corresponding number of professors ?",
            "sql": "select count ( * ) , professor.dept_code group_by professor.dept_code"
        },
        {
            "utterance": "For the department with the fewest professors , what is its name and code ?",
            "sql": "select department.dept_name , professor.dept_code group_by professor.dept_code order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 49,
    "final": {
        "utterance": "Which department has the most professors with a Ph.D.?",
        "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which professors do have a Ph.D. degree ?",
            "sql": "select professor.* where professor.prof_high_degree = value"
        },
        {
            "utterance": "How many of those professors are in each department ?",
            "sql": "select count ( professor.* ) , professor.dept_code where professor.prof_high_degree = value group_by professor.dept_code"
        },
        {
            "utterance": "Find the code of the department that has the most of them .",
            "sql": "select professor.dept_code where professor.prof_high_degree = value group_by professor.dept_code order_by count ( professor.* ) desc limit_value"
        },
        {
            "utterance": "What is the name of that department ?",
            "sql": "select department.dept_name where professor.prof_high_degree = value group_by professor.dept_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 50,
    "final": {
        "utterance": "What are the first names of all professors not teaching any classes?",
        "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num"
    },
    "interaction": [
        {
            "utterance": "What is the first names of employees whose job code is PROF ?",
            "sql": "select employee.emp_fname where employee.emp_jobcode = value"
        },
        {
            "utterance": "Which of them are not teaching any class ?",
            "sql": "select employee.emp_fname where employee.emp_jobcode = value except select employee.emp_fname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 51,
    "final": {
        "utterance": "What are the first names of all history professors who do not teach?",
        "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all employees who are teaching classes ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Please list the first names of all other professors .",
            "sql": "select employee.emp_fname except select employee.emp_fname"
        },
        {
            "utterance": "Which of these refer to teachers in the history department ?",
            "sql": "select employee.emp_fname where department.dept_name = value except select employee.emp_fname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 52,
    "final": {
        "utterance": "What are the last name and office of all history professors?",
        "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'"
    },
    "interaction": [
        {
            "utterance": "What is all the information about the history department ?",
            "sql": "select department.* where department.dept_name = value"
        },
        {
            "utterance": "What are the names of professors in this department ?",
            "sql": "select employee.emp_lname where department.dept_name = value"
        },
        {
            "utterance": "Also , where are their offices located ?",
            "sql": "select employee.emp_lname , professor.prof_office where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 53,
    "final": {
        "utterance": "What is the name of the department and office location for the professor with the last name of Heffington?",
        "sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'"
    },
    "interaction": [
        {
            "utterance": "Find me all employees with the last name 'Heffington ' ?",
            "sql": "select employee.* where employee.emp_lname = value"
        },
        {
            "utterance": "What are the names of their departments ?",
            "sql": "select department.dept_name where employee.emp_lname = value"
        },
        {
            "utterance": "Also , where are their offices located ?",
            "sql": "select department.dept_name , professor.prof_office where employee.emp_lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 54,
    "final": {
        "utterance": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?",
        "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'"
    },
    "interaction": [
        {
            "utterance": "Find the professors whose office is located in room DRE 102 ?",
            "sql": "select professor.* where professor.prof_office = value"
        },
        {
            "utterance": "What are their last names ?",
            "sql": "select employee.emp_lname where professor.prof_office = value"
        },
        {
            "utterance": "When were they hired ?",
            "sql": "select employee.emp_hiredate where professor.prof_office = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 55,
    "final": {
        "utterance": "What are the course codes for every class that the student with the last name Smithson took?",
        "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'"
    },
    "interaction": [
        {
            "utterance": "Find all information on students .",
            "sql": "select student.*"
        },
        {
            "utterance": "Which of that information refers to people with the last name Smithson ?",
            "sql": "select student.* where student.stu_lname = value"
        },
        {
            "utterance": "What are the codes of the courses they took ?",
            "sql": "select class.crs_code where student.stu_lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 56,
    "final": {
        "utterance": "How many credits is the course that the student with the last name Smithson took, and what is its description?",
        "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'"
    },
    "interaction": [
        {
            "utterance": "What are the course descriptions ?",
            "sql": "select course.crs_description"
        },
        {
            "utterance": "Also , show credits .",
            "sql": "select course.crs_description , course.crs_credit"
        },
        {
            "utterance": "Which of the above refer to courses that a student with the last name 'Smithson ' took ?",
            "sql": "select course.crs_description , course.crs_credit where student.stu_lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 57,
    "final": {
        "utterance": "How many professors attained either Ph.D. or Masters degrees?",
        "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'"
    },
    "interaction": [
        {
            "utterance": "What information do you have on professors who got a Ph.D. ?",
            "sql": "select professor.* where professor.prof_high_degree = value"
        },
        {
            "utterance": "Also , combine that with information you have on professors with a Masters ?",
            "sql": "select professor.* where professor.prof_high_degree = value or professor.prof_high_degree = value"
        },
        {
            "utterance": "How many are there in total ?",
            "sql": "select count ( professor.* ) where professor.prof_high_degree = value or professor.prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 58,
    "final": {
        "utterance": "What is the number of professors who are in the Accounting or Biology departments?",
        "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'"
    },
    "interaction": [
        {
            "utterance": "What information do you have on professors in the Accounting department ?",
            "sql": "select * where department.dept_name = value"
        },
        {
            "utterance": "Also , what do you have on professors in the Biology department ?",
            "sql": "select * where department.dept_name = value or department.dept_name = value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( * ) where department.dept_name = value or department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 59,
    "final": {
        "utterance": "What is the first name of the professor who is teaching CIS-220 and QM-261?",
        "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all professors teaching CIS-220 ?",
            "sql": "select employee.emp_fname where class.crs_code = value"
        },
        {
            "utterance": "What are the first names of all professors teaching QM-261 ?",
            "sql": "select employee.emp_fname where class.crs_code = value"
        },
        {
            "utterance": "Who is teaching both ?",
            "sql": "select employee.emp_fname where class.crs_code = value intersect select employee.emp_fname where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 60,
    "final": {
        "utterance": "What are the first names of all students taking accoutning and Computer Information Systems classes?",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all students taking some classes from the Accounting department ?",
            "sql": "select student.stu_fname where department.dept_name = value"
        },
        {
            "utterance": "Of those , who also took some classes from the Computer Information Systems department ?",
            "sql": "select student.stu_fname where department.dept_name = value intersect select student.stu_fname where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 61,
    "final": {
        "utterance": "What is the average GPA of students taking ACCT-211?",
        "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"
    },
    "interaction": [
        {
            "utterance": "What are all the student GPAs ?",
            "sql": "select student.stu_gpa"
        },
        {
            "utterance": "Which of those are for students taking course ACCT-211 ?",
            "sql": "select student.stu_gpa where class.crs_code = value"
        },
        {
            "utterance": "What is their average GPA ?",
            "sql": "select avg ( student.stu_gpa ) where class.crs_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 62,
    "final": {
        "utterance": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "What is the GPA , phone number , and first name for all students ?",
            "sql": "select student.stu_gpa , student.stu_phone , student.stu_fname"
        },
        {
            "utterance": "Order this information from highest GPA to lowest .",
            "sql": "select student.stu_gpa , student.stu_phone , student.stu_fname order_by student.stu_gpa desc"
        },
        {
            "utterance": "What is the information for the top 5 GPAs ?",
            "sql": "select student.stu_gpa , student.stu_phone , student.stu_fname order_by student.stu_gpa desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 63,
    "final": {
        "utterance": "What is the name of the department with the student that has the lowest GPA?",
        "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who is the student with lowest gpa ?",
            "sql": "select student.* order_by student.stu_gpa limit_value"
        },
        {
            "utterance": "What is the department name for the student ?",
            "sql": "select department.dept_name order_by student.stu_gpa limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 64,
    "final": {
        "utterance": "What is the first name and GPA of every student that has a GPA lower than average?",
        "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)"
    },
    "interaction": [
        {
            "utterance": "What is the average student GPA ?",
            "sql": "select avg ( student.stu_gpa )"
        },
        {
            "utterance": "Find students with a GPA less than that ?",
            "sql": "select student.* where student.stu_gpa < ( select avg ( student.stu_gpa ) )"
        },
        {
            "utterance": "What are their first names and GPAs ?",
            "sql": "select student.stu_fname , student.stu_gpa where student.stu_gpa < ( select avg ( student.stu_gpa ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 65,
    "final": {
        "utterance": "What is the name and address of the department with the most students?",
        "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the number of students in each department ?",
            "sql": "select count ( student.* ) , student.dept_code group_by student.dept_code"
        },
        {
            "utterance": "Which one has the most students ?",
            "sql": "select student.* group_by student.dept_code order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "What is that department 's name and address ?",
            "sql": "select department.dept_name , department.dept_address group_by student.dept_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 66,
    "final": {
        "utterance": "What is the name, address, and number of students in the departments that have the 3 most students?",
        "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names and address for each department ?",
            "sql": "select department.dept_name , department.dept_address"
        },
        {
            "utterance": "Also , how many students are in each department ?",
            "sql": "select department.dept_name , department.dept_address , count ( * ) group_by student.dept_code"
        },
        {
            "utterance": "Which of that information refers to the top 3 departments ordered by number of students ?",
            "sql": "select department.dept_name , department.dept_address , count ( * ) group_by student.dept_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 67,
    "final": {
        "utterance": "What are the first names and office of the professors who are in the history department and have a Ph.D?",
        "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'"
    },
    "interaction": [
        {
            "utterance": "Which professors do have a Ph.D. ?",
            "sql": "select professor.* where professor.prof_high_degree = value"
        },
        {
            "utterance": "Also , which of these are in the history department ?",
            "sql": "select * where department.dept_name = value and professor.prof_high_degree = value"
        },
        {
            "utterance": "What are their first names and location of their offices ?",
            "sql": "select employee.emp_fname , professor.prof_office where department.dept_name = value and professor.prof_high_degree = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 68,
    "final": {
        "utterance": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
        "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all employees ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "who are teaching some courses ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Also , what courses do they teach ?",
            "sql": "select employee.emp_fname , class.crs_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 69,
    "final": {
        "utterance": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
        "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code"
    },
    "interaction": [
        {
            "utterance": "Find all employees who taught a course ?",
            "sql": "select *"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Also , what are the course descriptions of their classes ?",
            "sql": "select employee.emp_fname , course.crs_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 70,
    "final": {
        "utterance": "What are the first names, office locations of all lecturers who have taught some course?",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"
    },
    "interaction": [
        {
            "utterance": "Which employees have taught some course ?",
            "sql": "select *"
        },
        {
            "utterance": "What are these courses ' descriptions ?",
            "sql": "select course.crs_description"
        },
        {
            "utterance": "Also , what are their office locations and the professors ' first names ?",
            "sql": "select employee.emp_fname , professor.prof_office , course.crs_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 71,
    "final": {
        "utterance": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?",
        "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code"
    },
    "interaction": [
        {
            "utterance": "Tell me all information on lecturers who have taught a course .",
            "sql": "select *"
        },
        {
            "utterance": "What are the corresponding course descriptions ?",
            "sql": "select course.crs_description"
        },
        {
            "utterance": "Also , what are those professors ' first names , office locations , and department name ?",
            "sql": "select employee.emp_fname , professor.prof_office , course.crs_description , department.dept_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 72,
    "final": {
        "utterance": "What are the names of all students who took a class and the corresponding course descriptions?",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code"
    },
    "interaction": [
        {
            "utterance": "What information is there on students who are taking a class ?",
            "sql": "select *"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select student.stu_fname , student.stu_lname"
        },
        {
            "utterance": "Also , what are the descriptions for the courses they are taking ?",
            "sql": "select student.stu_fname , student.stu_lname , course.crs_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 73,
    "final": {
        "utterance": "What are the names of all students taking a course who received an A or C?",
        "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"
    },
    "interaction": [
        {
            "utterance": "Which students did receive an A in any courses ?",
            "sql": "select * where enroll.enroll_grade = value"
        },
        {
            "utterance": "Who of them also received a C in any courses ?",
            "sql": "select * where enroll.enroll_grade = value or enroll.enroll_grade = value"
        },
        {
            "utterance": "What are their ' first names and last names ?",
            "sql": "select student.stu_fname , student.stu_lname where enroll.enroll_grade = value or enroll.enroll_grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 74,
    "final": {
        "utterance": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?",
        "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all professors who are teaching any classes ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Which of them are from the Accounting department ?",
            "sql": "select employee.emp_fname where department.dept_name = value"
        },
        {
            "utterance": "Also , what classrooms do they teach in ?",
            "sql": "select employee.emp_fname , class.class_room where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 75,
    "final": {
        "utterance": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?",
        "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'"
    },
    "interaction": [
        {
            "utterance": "Which professors are teaching some classes ?",
            "sql": "select *"
        },
        {
            "utterance": "Which of them are from the Computer Information Systems department ?",
            "sql": "select * where department.dept_name = value"
        },
        {
            "utterance": "What are their first names and highest degrees ?",
            "sql": "select distinct employee.emp_fname , professor.prof_high_degree where department.dept_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 76,
    "final": {
        "utterance": "What is the last name of the student who received an A in the class with the code 10018?",
        "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018"
    },
    "interaction": [
        {
            "utterance": "What are the last names of all students ?",
            "sql": "select student.stu_lname"
        },
        {
            "utterance": "Which of those refer to students who received a grade of A in some classes ?",
            "sql": "select student.stu_lname where enroll.enroll_grade = value"
        },
        {
            "utterance": "Of those , who is enrolled in 10018 ?",
            "sql": "select student.stu_lname where enroll.enroll_grade = value and enroll.class_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 77,
    "final": {
        "utterance": "What are the first names and offices of history professors who don't have Ph.D.s?",
        "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree ! =  'Ph.D.'"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all professors ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Which of those are in the History department ?",
            "sql": "select employee.emp_fname , professor.prof_office where department.dept_name = value"
        },
        {
            "utterance": "Of those , who does not have a Ph.D. ?",
            "sql": "select employee.emp_fname , professor.prof_office where department.dept_name = value and professor.prof_high_degree != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 78,
    "final": {
        "utterance": "What are the first names of all professors who teach more than one class?",
        "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Find the first names of all professors ?",
            "sql": "select employee.emp_fname"
        },
        {
            "utterance": "Which of those teach more than one class ?",
            "sql": "select employee.emp_fname group_by class.prof_num having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 79,
    "final": {
        "utterance": "What are the first names of student who only took one course?",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "How many courses is each student enrolled in ?",
            "sql": "select count ( * ) , student.stu_num group_by student.stu_num"
        },
        {
            "utterance": "Which students are enrolled in only one ?",
            "sql": "select * group_by enroll.stu_num having count ( * ) = value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.stu_fname group_by enroll.stu_num having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 80,
    "final": {
        "utterance": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
    },
    "interaction": [
        {
            "utterance": "Which courses have a description including the word `` Statistics '' ?",
            "sql": "select course.* where course.crs_description like value"
        },
        {
            "utterance": "What is the name of the departments those courses are in ?",
            "sql": "select department.dept_name where course.crs_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_1",
    "interaction_id": 81,
    "final": {
        "utterance": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?",
        "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "What information is on students whose name starts with 'S ' ?",
            "sql": "select student.* where student.stu_lname like value"
        },
        {
            "utterance": "Which of them took course ACCT-211 ?",
            "sql": "select * where class.crs_code = value and student.stu_lname like value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.stu_fname where class.crs_code = value and student.stu_lname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    "interaction": [
        {
            "utterance": "Find all the modern rooms .",
            "sql": "select rooms.* where rooms.decor = value"
        },
        {
            "utterance": "Of those , which have a base price lower than $ 160 and two beds ? Return the room names .",
            "sql": "select rooms.roomname where rooms.baseprice < value and rooms.beds = value and rooms.decor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;"
    },
    "interaction": [
        {
            "utterance": "Find all the rooms whose price is above 160 .",
            "sql": "select rooms.* where rooms.baseprice > value"
        },
        {
            "utterance": "Of those , which rooms can accommodate more than two people ?",
            "sql": "select rooms.* where rooms.baseprice > value and rooms.maxoccupancy > value"
        },
        {
            "utterance": "Give me the name and id of those rooms .",
            "sql": "select rooms.roomname , rooms.roomid where rooms.baseprice > value and rooms.maxoccupancy > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which room has the largest number of reservations?",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many reservations were made for each room ?",
            "sql": "select count ( reservations.* ) group_by reservations.room"
        },
        {
            "utterance": "Which room has the largest number of reservations ?",
            "sql": "select reservations.* group_by reservations.room order_by count ( reservations.* ) desc limit_value"
        },
        {
            "utterance": "Tell me the name of that room .",
            "sql": "select rooms.roomname group_by reservations.room order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    "interaction": [
        {
            "utterance": "Find the reservations made by a person called ROY SWEAZ",
            "sql": "select reservations.* where reservations.firstname = value and reservations.lastname = value"
        },
        {
            "utterance": "How many kids stay in the rooms reserved by this person ?",
            "sql": "select reservations.kids where reservations.firstname = value and reservations.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of times ROY SWEAZY has reserved a room.",
        "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    "interaction": [
        {
            "utterance": "Find the reservations made by a person called ROY SWEAZ",
            "sql": "select reservations.* where reservations.firstname = value and reservations.lastname = value"
        },
        {
            "utterance": "Count the number of times ROY SWEAZY has made reservations .",
            "sql": "select count ( reservations.* ) where reservations.firstname = value and reservations.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Return the name, rate, check in and check out date for the room with the highest rate.",
        "sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Find the room with the highest rate .",
            "sql": "select reservations.* group_by reservations.room order_by reservations.rate desc limit_value"
        },
        {
            "utterance": "What are the name , rate , check in and check out date of this room ?",
            "sql": "select rooms.roomname , reservations.rate , reservations.checkin , reservations.checkout group_by reservations.room order_by reservations.rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
        "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";"
    },
    "interaction": [
        {
            "utterance": "Which reservations were made by CONRAD SELBIG ?",
            "sql": "select reservations.* where reservations.firstname = value and reservations.lastname = value"
        },
        {
            "utterance": "Which one has check in date Oct 23 , 2010 ?",
            "sql": "select reservations.* where reservations.checkin = value and reservations.firstname = value and reservations.lastname = value"
        },
        {
            "utterance": "Find the number of adults for this reservation .",
            "sql": "select reservations.adults where reservations.checkin = value and reservations.firstname = value and reservations.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    "interaction": [
        {
            "utterance": "Which reservations were made by DAMIEN TRACHSEL ?",
            "sql": "select reservations.* where reservations.firstname = value and reservations.lastname = value"
        },
        {
            "utterance": "Which one has check in date Sep 21 , 2010 ?",
            "sql": "select reservations.* where reservations.checkin = value and reservations.firstname = value and reservations.lastname = value"
        },
        {
            "utterance": "Find the number of kids for this reservation .",
            "sql": "select reservations.kids where reservations.checkin = value and reservations.firstname = value and reservations.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the total number of king beds available.",
        "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';"
    },
    "interaction": [
        {
            "utterance": "Return all the rooms with king beds .",
            "sql": "select rooms.* where rooms.bedtype = value"
        },
        {
            "utterance": "What is the total number of king beds ?",
            "sql": "select sum ( rooms.beds ) where rooms.bedtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    "interaction": [
        {
            "utterance": "Return all the rooms with king beds .",
            "sql": "select rooms.* where rooms.bedtype = value"
        },
        {
            "utterance": "What are the names and decor of these rooms ?",
            "sql": "select rooms.roomname , rooms.decor where rooms.bedtype = value"
        },
        {
            "utterance": "Sort the list by the room base price .",
            "sql": "select rooms.roomname , rooms.decor where rooms.bedtype = value order_by rooms.baseprice"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the room name and base price of the room with the lowest base price?",
        "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the base price of each room ?",
            "sql": "select rooms.baseprice"
        },
        {
            "utterance": "Order the rooms by their base price .",
            "sql": "select rooms.* order_by rooms.baseprice asc"
        },
        {
            "utterance": "Report the room name and base price of the cheapest room .",
            "sql": "select rooms.roomname , rooms.baseprice order_by rooms.baseprice asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the decor of the room named \"Recluse and defiance\".",
        "sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";"
    },
    "interaction": [
        {
            "utterance": "Find the room with name `` Recluse and defiance '' .",
            "sql": "select rooms.* where rooms.roomname = value"
        },
        {
            "utterance": "What is its decor ?",
            "sql": "select rooms.decor where rooms.roomname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 12,
    "final": {
        "utterance": "For each bed type, find the average base price of different bed type.",
        "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    "interaction": [
        {
            "utterance": "Group all the rooms by the bed type .",
            "sql": "select rooms.* group_by rooms.bedtype"
        },
        {
            "utterance": "For each bed type , find the average base price of different bed type .",
            "sql": "select rooms.bedtype , avg ( rooms.baseprice ) group_by rooms.bedtype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many people in total can stay in the modern rooms of this inn?",
        "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';"
    },
    "interaction": [
        {
            "utterance": "For each modern room , find the maximum number of people who can stay in .",
            "sql": "select rooms.maxoccupancy where rooms.decor = value"
        },
        {
            "utterance": "What is the total number of people who can stay in the modern rooms of this inn ?",
            "sql": "select sum ( rooms.maxoccupancy ) where rooms.decor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the least popular kind of decor?",
        "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Find the decor of each room",
            "sql": "select rooms.decor"
        },
        {
            "utterance": "For each type of decor , how many reservations were made ?",
            "sql": "select count ( rooms.decor ) group_by rooms.decor"
        },
        {
            "utterance": "Which decor is the least popular ?",
            "sql": "select rooms.decor group_by rooms.decor order_by count ( rooms.decor ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    "interaction": [
        {
            "utterance": "What is the maximum capacity of each room ?",
            "sql": "select rooms.maxoccupancy"
        },
        {
            "utterance": "What is the number of people who actually stayed for each room reservation ? The number of people include adults and kids .",
            "sql": "select reservations.adults + reservations.kids"
        },
        {
            "utterance": "How many times the number reached the maximum capacity ?",
            "sql": "select count ( * ) where rooms.maxoccupancy = reservations.adults + reservations.kids"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the first and last names of people who payed more than the rooms' base prices?",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"
    },
    "interaction": [
        {
            "utterance": "For each reservation , find the base price and the actual rate payed .",
            "sql": "select reservations.rate , rooms.baseprice"
        },
        {
            "utterance": "How many times did the actual price exceeded the base price ?",
            "sql": "select count ( * ) where reservations.rate - rooms.baseprice > value"
        },
        {
            "utterance": "What are the first and last names of people who payed more than the rooms ' base prices ?",
            "sql": "select reservations.firstname , reservations.lastname where reservations.rate - rooms.baseprice > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the total number of rooms available in this inn?",
        "sql": "SELECT count(*) FROM Rooms;"
    },
    "interaction": [
        {
            "utterance": "List all the rooms .",
            "sql": "select rooms.*"
        },
        {
            "utterance": "Count the number of rooms .",
            "sql": "select count ( rooms.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many rooms have a king bed?",
        "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";"
    },
    "interaction": [
        {
            "utterance": "Return all the rooms with king beds .",
            "sql": "select rooms.* where rooms.bedtype = value"
        },
        {
            "utterance": "What is the total number such rooms ?",
            "sql": "select count ( rooms.* ) where rooms.bedtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the number of rooms for each bed type?",
        "sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;"
    },
    "interaction": [
        {
            "utterance": "Group all the rooms by the bed type",
            "sql": "select rooms.* group_by rooms.bedtype"
        },
        {
            "utterance": "For each bed type , count the number of rooms .",
            "sql": "select rooms.bedtype , count ( rooms.* ) group_by rooms.bedtype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the name of the room that can accommodate the most people?",
        "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Sort all the rooms by the maximum occupancy .",
            "sql": "select rooms.* order_by rooms.maxoccupancy desc"
        },
        {
            "utterance": "Which room has the largest capacity ?",
            "sql": "select rooms.* order_by rooms.maxoccupancy desc limit_value"
        },
        {
            "utterance": "Tell me the name of that room .",
            "sql": "select rooms.roomname order_by rooms.maxoccupancy desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Which room has the highest base price?",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "List all the rooms in the descending order of the base price .",
            "sql": "select rooms.* order_by rooms.baseprice desc"
        },
        {
            "utterance": "Which room has the highest base price ?",
            "sql": "select rooms.* order_by rooms.baseprice desc limit_value"
        },
        {
            "utterance": "Give me the id and name of this room .",
            "sql": "select rooms.roomid , rooms.roomname order_by rooms.baseprice desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the bed type and name of all the rooms with traditional decor?",
        "sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";"
    },
    "interaction": [
        {
            "utterance": "Which rooms have traditional decor ?",
            "sql": "select rooms.* where rooms.decor = value"
        },
        {
            "utterance": "What are the name and bed type of those rooms ?",
            "sql": "select rooms.roomname , rooms.bedtype where rooms.decor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 23,
    "final": {
        "utterance": "How many rooms have king beds? Report the number for each decor type.",
        "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
    },
    "interaction": [
        {
            "utterance": "Which rooms have king beds ?",
            "sql": "select rooms.* where rooms.bedtype = value"
        },
        {
            "utterance": "Group all the rooms with king beds according to the decor type .",
            "sql": "select rooms.* where rooms.bedtype = value group_by rooms.decor"
        },
        {
            "utterance": "Count the number of rooms for each decor type .",
            "sql": "select rooms.decor , count ( rooms.* ) where rooms.bedtype = value group_by rooms.decor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the average minimum and price of the rooms for each different decor.",
        "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all the rooms ?",
            "sql": "select avg ( rooms.baseprice )"
        },
        {
            "utterance": "What about the minimum price ?",
            "sql": "select min ( rooms.baseprice )"
        },
        {
            "utterance": "Tell me the average and minimum price of the rooms for each different decor .",
            "sql": "select rooms.decor , avg ( rooms.baseprice ) , min ( rooms.baseprice ) group_by rooms.decor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Sort all the rooms according to the price. Just report the room names.",
        "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;"
    },
    "interaction": [
        {
            "utterance": "Sort all the rooms according to the price",
            "sql": "select rooms.* order_by rooms.baseprice"
        },
        {
            "utterance": "Just show the room names",
            "sql": "select rooms.roomname order_by rooms.baseprice"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many rooms cost more than 120, for each different decor?",
        "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;"
    },
    "interaction": [
        {
            "utterance": "Show me all the rooms that cost more than 120 .",
            "sql": "select rooms.* where rooms.baseprice > value"
        },
        {
            "utterance": "How many rooms ?",
            "sql": "select count ( rooms.* ) where rooms.baseprice > value"
        },
        {
            "utterance": "Tell me how many rooms cost more than 120 , for each different decor .",
            "sql": "select rooms.decor , count ( rooms.* ) where rooms.baseprice > value group_by rooms.decor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the average base price of rooms, for each bed type?",
        "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    "interaction": [
        {
            "utterance": "Tell me the average price of rooms .",
            "sql": "select avg ( rooms.baseprice )"
        },
        {
            "utterance": "Report the average room price for each bed type .",
            "sql": "select rooms.bedtype , avg ( rooms.baseprice ) group_by rooms.bedtype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the names of rooms that have either king or queen bed?",
        "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";"
    },
    "interaction": [
        {
            "utterance": "Find all the rooms with a king bed .",
            "sql": "select rooms.* where rooms.bedtype = value"
        },
        {
            "utterance": "How about queen bed ?",
            "sql": "select rooms.* where rooms.bedtype = value"
        },
        {
            "utterance": "Return the names of rooms that have either of them .",
            "sql": "select rooms.roomname where rooms.bedtype = value or rooms.bedtype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the number of distinct bed types available in this inn.",
        "sql": "SELECT count(DISTINCT bedType) FROM Rooms;"
    },
    "interaction": [
        {
            "utterance": "Tell me the bed type for each room .",
            "sql": "select rooms.bedtype"
        },
        {
            "utterance": "How many distinct types of beds are there ?",
            "sql": "select count ( distinct rooms.bedtype )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the name and id of the three highest priced rooms?",
        "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "Return a list of all the rooms sorted in the descending order of base prices .",
            "sql": "select rooms.* order_by rooms.baseprice desc"
        },
        {
            "utterance": "Return the top three .",
            "sql": "select rooms.* order_by rooms.baseprice desc limit_value"
        },
        {
            "utterance": "Just tell me the room id and name for these rooms .",
            "sql": "select rooms.roomid , rooms.roomname order_by rooms.baseprice desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the name of rooms that cost more than the average.",
        "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
    },
    "interaction": [
        {
            "utterance": "What is the average room price in this inn ?",
            "sql": "select avg ( rooms.baseprice )"
        },
        {
            "utterance": "Find all the rooms that cost more than that .",
            "sql": "select rooms.* where rooms.baseprice > ( select avg ( rooms.baseprice ) )"
        },
        {
            "utterance": "What are their room names ?",
            "sql": "select rooms.roomname where rooms.baseprice > ( select avg ( rooms.baseprice ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 32,
    "final": {
        "utterance": "How many rooms have not had any reservation yet?",
        "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    "interaction": [
        {
            "utterance": "Find the ids of all the rooms that have been reserved before .",
            "sql": "select distinct reservations.room"
        },
        {
            "utterance": "Which rooms have not had any reservation yet ?",
            "sql": "select rooms.* where rooms.roomid not in ( select distinct reservations.room )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( rooms.* ) where rooms.roomid not in ( select distinct reservations.room )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 33,
    "final": {
        "utterance": "For each room, find its name and the number of times reservations were made for it.",
        "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"
    },
    "interaction": [
        {
            "utterance": "Group all the reservation record by the rooms .",
            "sql": "select reservations.* group_by reservations.room"
        },
        {
            "utterance": "For each room , count how many times it was booked .",
            "sql": "select count ( reservations.* ) group_by reservations.room"
        },
        {
            "utterance": "Also report the name of each room .",
            "sql": "select rooms.roomname , count ( * ) group_by reservations.room"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"
    },
    "interaction": [
        {
            "utterance": "For each room , count how many times it was booked .",
            "sql": "select count ( reservations.* ) group_by reservations.room"
        },
        {
            "utterance": "Which rooms have been booked more than 60 times ?",
            "sql": "select * group_by reservations.room having count ( * ) > value"
        },
        {
            "utterance": "Give me the names of the rooms .",
            "sql": "select rooms.roomname group_by reservations.room having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Which rooms cost between 120 and 150? Give me the room names.",
        "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
    },
    "interaction": [
        {
            "utterance": "Which rooms ' base prices are between 120 and 150 ?",
            "sql": "select rooms.* where rooms.baseprice between value and value"
        },
        {
            "utterance": "Give me the names of these rooms .",
            "sql": "select rooms.roomname where rooms.baseprice between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "inn_1",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
    },
    "interaction": [
        {
            "utterance": "Find the reservations made by customers whose first name has `` ROY '' in part .",
            "sql": "select reservations.* where reservations.firstname like value"
        },
        {
            "utterance": "What rooms were booked by these customers ?",
            "sql": "select * where reservations.firstname like value"
        },
        {
            "utterance": "What are the names of these rooms ?",
            "sql": "select rooms.roomname where reservations.firstname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many allergy entries are there?",
        "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type"
    },
    "interaction": [
        {
            "utterance": "What are the different allergies ?",
            "sql": "select distinct allergy_type.allergy"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct allergy_type.allergy )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many distinct allergies are there?",
        "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
    },
    "interaction": [
        {
            "utterance": "What are the different types of allergies ?",
            "sql": "select distinct allergy_type.allergytype"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct allergy_type.allergytype )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the different allergy types?",
        "sql": "SELECT DISTINCT allergytype FROM Allergy_type"
    },
    "interaction": [
        {
            "utterance": "Show all allergy information .",
            "sql": "select allergy_type.*"
        },
        {
            "utterance": "What are the different allergy types ?",
            "sql": "select distinct allergy_type.allergytype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the allergies and their types?",
        "sql": "SELECT allergy ,  allergytype FROM Allergy_type"
    },
    "interaction": [
        {
            "utterance": "What are the allergies ?",
            "sql": "select allergy_type.allergy"
        },
        {
            "utterance": "What type is each one ?",
            "sql": "select allergy_type.allergy , allergy_type.allergytype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are all the different food allergies?",
        "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
    },
    "interaction": [
        {
            "utterance": "What are all the different allergy names ?",
            "sql": "select distinct allergy_type.allergy"
        },
        {
            "utterance": "Which of those are food-related ?",
            "sql": "select distinct allergy_type.allergy where allergy_type.allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is allergy type of a cat allergy?",
        "sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
    },
    "interaction": [
        {
            "utterance": "What are the different types of allergies ?",
            "sql": "select distinct allergy_type.allergytype"
        },
        {
            "utterance": "Which one is a cat allergy ?",
            "sql": "select allergy_type.allergytype where allergy_type.allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many animal type allergies exist?",
        "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
    },
    "interaction": [
        {
            "utterance": "What are all the allergies ?",
            "sql": "select allergy_type.allergy"
        },
        {
            "utterance": "Which allergies are categorized as type animal ?",
            "sql": "select allergy_type.allergy where allergy_type.allergytype = value"
        },
        {
            "utterance": "How many are there in that category ?",
            "sql": "select count ( allergy_type.* ) where allergy_type.allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the allergy types and how many allergies correspond to each one?",
        "sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
    },
    "interaction": [
        {
            "utterance": "What are the different allergy types ?",
            "sql": "select distinct allergy_type.allergytype"
        },
        {
            "utterance": "How many are in each category ?",
            "sql": "select allergy_type.allergytype , count ( allergy_type.* ) group_by allergy_type.allergytype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which allergy type is most common?",
        "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the different allergy types ?",
            "sql": "select distinct allergy_type.allergytype"
        },
        {
            "utterance": "Order them by number of allergies descendingly .",
            "sql": "select allergy_type.allergytype group_by allergy_type.allergytype order_by count ( allergy_type.* ) desc"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select allergy_type.allergytype group_by allergy_type.allergytype order_by count ( allergy_type.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which allergy type is the least common?",
        "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many allergies exist for each allergy type ?",
            "sql": "select count ( allergy_type.* ) , allergy_type.allergytype group_by allergy_type.allergytype"
        },
        {
            "utterance": "Which one has the fewest ?",
            "sql": "select allergy_type.allergytype group_by allergy_type.allergytype order_by count ( allergy_type.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the total number of students?",
        "sql": "SELECT count(*) FROM Student"
    },
    "interaction": [
        {
            "utterance": "Who are all the students ?",
            "sql": "select student.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( student.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the full names of all students",
        "sql": "SELECT Fname ,  Lname FROM Student"
    },
    "interaction": [
        {
            "utterance": "Who are all the students ?",
            "sql": "select student.*"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.fname"
        },
        {
            "utterance": "And what about their last names ?",
            "sql": "select student.lname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many advisors are there?",
        "sql": "SELECT count(DISTINCT advisor) FROM Student"
    },
    "interaction": [
        {
            "utterance": "Who are the students ?",
            "sql": "select student.*"
        },
        {
            "utterance": "Who are the distinct advisors ?",
            "sql": "select distinct student.advisor"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct student.advisor )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the different majors?",
        "sql": "SELECT DISTINCT Major FROM Student"
    },
    "interaction": [
        {
            "utterance": "Who are the students ?",
            "sql": "select student.*"
        },
        {
            "utterance": "What are their distinct majors ?",
            "sql": "select distinct student.major"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What cities do students live in?",
        "sql": "SELECT DISTINCT city_code FROM Student"
    },
    "interaction": [
        {
            "utterance": "Who are the students ?",
            "sql": "select student.*"
        },
        {
            "utterance": "What distinct cities are they from ?",
            "sql": "select distinct student.city_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the full names and ages for all female students whose sex is F?",
        "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"
    },
    "interaction": [
        {
            "utterance": "Who are the female students ?",
            "sql": "select student.* where student.sex = value"
        },
        {
            "utterance": "What are their full names ?",
            "sql": "select student.fname , student.lname where student.sex = value"
        },
        {
            "utterance": "How old are they ?",
            "sql": "select student.age where student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the student ids for all male students?",
        "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    "interaction": [
        {
            "utterance": "Which students are male ?",
            "sql": "select student.* where student.sex = value"
        },
        {
            "utterance": "What are their student id numbers ?",
            "sql": "select student.stuid where student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many students are 18 years old?",
        "sql": "SELECT count(*) FROM Student WHERE age  =  18"
    },
    "interaction": [
        {
            "utterance": "Which students are 18 ?",
            "sql": "select student.* where student.age = value"
        },
        {
            "utterance": "How many are there in total ?",
            "sql": "select count ( student.* ) where student.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the student ids for students over 20 years old?",
        "sql": "SELECT StuID FROM Student WHERE age  >  20"
    },
    "interaction": [
        {
            "utterance": "Who is older than 20 ?",
            "sql": "select student.* where student.age > value"
        },
        {
            "utterance": "What are their student ids ?",
            "sql": "select student.stuid where student.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Give the city that the student whose family name is Kim lives in.",
        "sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""
    },
    "interaction": [
        {
            "utterance": "Which student has the last name Kim ?",
            "sql": "select student.* where student.lname = value"
        },
        {
            "utterance": "Where does she or he live ?",
            "sql": "select student.city_code where student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Who advises student 1004?",
        "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004"
    },
    "interaction": [
        {
            "utterance": "Who 's student id is 1004 ?",
            "sql": "select student.* where student.stuid = value"
        },
        {
            "utterance": "Who is her advisor ?",
            "sql": "select student.advisor where student.stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Give the number of students living in either HKG or CHI.",
        "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
    },
    "interaction": [
        {
            "utterance": "Who lives in HKG or CHI ?",
            "sql": "select student.* where student.city_code = value or student.city_code = value"
        },
        {
            "utterance": "How many is that ?",
            "sql": "select count ( student.* ) where student.city_code = value or student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the minimum, mean, and maximum age across all students?",
        "sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
    },
    "interaction": [
        {
            "utterance": "How old is the youngest student ?",
            "sql": "select min ( student.age )"
        },
        {
            "utterance": "What about the eldest ?",
            "sql": "select max ( student.age )"
        },
        {
            "utterance": "What is the average age ?",
            "sql": "select avg ( student.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Provide the last name of the youngest student.",
        "sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
    },
    "interaction": [
        {
            "utterance": "What is the minimum age of the students ?",
            "sql": "select min ( student.age )"
        },
        {
            "utterance": "Who is the youngest student ?",
            "sql": "select student.* where student.age = ( select min ( student.age ) )"
        },
        {
            "utterance": "What is his last name ?",
            "sql": "select student.lname where student.age = ( select min ( student.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What student id corresponds to the oldest student?",
        "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest student ?",
            "sql": "select student.* where student.age = ( select max ( student.age ) )"
        },
        {
            "utterance": "What is their id ?",
            "sql": "select student.stuid where student.age = ( select max ( student.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 25,
    "final": {
        "utterance": "How many students are there for each major?",
        "sql": "SELECT major ,  count(*) FROM Student GROUP BY major"
    },
    "interaction": [
        {
            "utterance": "What are the different majors ?",
            "sql": "select distinct student.major"
        },
        {
            "utterance": "How many students are studying each subject ?",
            "sql": "select student.major , count ( student.* ) group_by student.major"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the largest major?",
        "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the different majors ?",
            "sql": "select distinct student.major"
        },
        {
            "utterance": "How many students does each major has ?",
            "sql": "select student.major , count ( student.* ) group_by student.major"
        },
        {
            "utterance": "Which one has the most students ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 27,
    "final": {
        "utterance": "How old is each student and how many students are each age?",
        "sql": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    "interaction": [
        {
            "utterance": "What are the different student ages ?",
            "sql": "select distinct student.age"
        },
        {
            "utterance": "How many students are each age ?",
            "sql": "select student.age , count ( student.* ) group_by student.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the average ages for male and female students?",
        "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "What are the different sex categories for students ?",
            "sql": "select distinct student.sex"
        },
        {
            "utterance": "How many are there for each category ?",
            "sql": "select count ( student.* ) , student.sex group_by student.sex"
        },
        {
            "utterance": "What is the average age for each category ?",
            "sql": "select avg ( student.age ) , student.sex group_by student.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 29,
    "final": {
        "utterance": "How many students live in each city?",
        "sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"
    },
    "interaction": [
        {
            "utterance": "What are the different cities that students live in ?",
            "sql": "select distinct student.city_code"
        },
        {
            "utterance": "How many students are from each one ?",
            "sql": "select student.city_code , count ( student.* ) group_by student.city_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many students does each advisor have?",
        "sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"
    },
    "interaction": [
        {
            "utterance": "Who are the different advisors ?",
            "sql": "select distinct student.advisor"
        },
        {
            "utterance": "How many students does each one have ?",
            "sql": "select student.advisor , count ( student.* ) group_by student.advisor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Give the advisor with the most students.",
        "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are the advisors of the students ?",
            "sql": "select student.advisor"
        },
        {
            "utterance": "Order the advisors by the number of students they have .",
            "sql": "select student.advisor group_by student.advisor order_by count ( student.* )"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select student.advisor group_by student.advisor order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 32,
    "final": {
        "utterance": "How many students are affected by cat allergies?",
        "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    "interaction": [
        {
            "utterance": "Who have allergies ?",
            "sql": "select has_allergy.*"
        },
        {
            "utterance": "Who has a cat allergy ?",
            "sql": "select has_allergy.* where has_allergy.allergy = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( has_allergy.* ) where has_allergy.allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the students ids of students who have more than one allergy?",
        "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Who has at least two allergies ?",
            "sql": "select has_allergy.* group_by has_allergy.stuid having count ( has_allergy.* ) > = value"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select has_allergy.stuid group_by has_allergy.stuid having count ( has_allergy.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Which students are unaffected by allergies?",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
    },
    "interaction": [
        {
            "utterance": "What are all the student ids ?",
            "sql": "select student.stuid"
        },
        {
            "utterance": "Of these , which students ids correspond to students without allergies ?",
            "sql": "select student.stuid except select has_allergy.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 35,
    "final": {
        "utterance": "How many students who are female are allergic to milk or eggs?",
        "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND (T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\")"
    },
    "interaction": [
        {
            "utterance": "How many studnets are allergic to milk ?",
            "sql": "select count ( * ) where has_allergy.allergy = value"
        },
        {
            "utterance": "How many are allergic to that or to eggs ?",
            "sql": "select count ( * ) where has_allergy.allergy = value or has_allergy.allergy = value"
        },
        {
            "utterance": "Of those , how many are female ?",
            "sql": "select count ( * ) where student.sex = value and has_allergy.allergy = value or has_allergy.allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 36,
    "final": {
        "utterance": "How many students are affected by food related allergies?",
        "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
    },
    "interaction": [
        {
            "utterance": "How many allergy cases are there ?",
            "sql": "select count ( has_allergy.* )"
        },
        {
            "utterance": "Of those , for how many is it a food allergy ?",
            "sql": "select count ( * ) where allergy_type.allergytype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 37,
    "final": {
        "utterance": "Which allergy is the most common?",
        "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the different allergies ?",
            "sql": "select distinct has_allergy.allergy"
        },
        {
            "utterance": "Which one has the most students affected ?",
            "sql": "select has_allergy.allergy group_by has_allergy.allergy order_by count ( has_allergy.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 38,
    "final": {
        "utterance": "How many students have each different allergy?",
        "sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"
    },
    "interaction": [
        {
            "utterance": "What are all the different allergies ?",
            "sql": "select distinct has_allergy.allergy"
        },
        {
            "utterance": "How many students does each of them affect ?",
            "sql": "select has_allergy.allergy , count ( has_allergy.* ) group_by has_allergy.allergy"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 39,
    "final": {
        "utterance": "How many students are affected by each allergy type?",
        "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"
    },
    "interaction": [
        {
            "utterance": "What are the different allergy types ?",
            "sql": "select distinct allergy_type.allergytype"
        },
        {
            "utterance": "For each , how many students does it affect ?",
            "sql": "select allergy_type.allergytype , count ( * ) group_by allergy_type.allergytype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 40,
    "final": {
        "utterance": "What are the last names and ages of the students who are allergic to milk and cat?",
        "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    "interaction": [
        {
            "utterance": "What are student ids who are allergic to milk ?",
            "sql": "select has_allergy.stuid where has_allergy.allergy = value"
        },
        {
            "utterance": "Of these , who also have allergy to cat ?",
            "sql": "select has_allergy.stuid where has_allergy.allergy = value intersect select has_allergy.stuid where has_allergy.allergy = value"
        },
        {
            "utterance": "List their last name and age .",
            "sql": "select student.lname , student.age where student.stuid in ( select has_allergy.stuid where has_allergy.allergy = value intersect select has_allergy.stuid where has_allergy.allergy = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
        "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"
    },
    "interaction": [
        {
            "utterance": "What is the girl with first name Lisa allergic to ?",
            "sql": "select allergy_type.allergy where student.fname = value"
        },
        {
            "utterance": "What type is each allergy ?",
            "sql": "select allergy_type.allergy , allergy_type.allergytype where student.fname = value"
        },
        {
            "utterance": "Order them by the name of allergies .",
            "sql": "select allergy_type.allergy , allergy_type.allergytype where student.fname = value order_by allergy_type.allergy"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 42,
    "final": {
        "utterance": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    "interaction": [
        {
            "utterance": "Which students are allergic to cats ?",
            "sql": "select has_allergy.stuid where has_allergy.allergy = value"
        },
        {
            "utterance": "Which students are not ?",
            "sql": "select student.stuid except select has_allergy.stuid where has_allergy.allergy = value"
        },
        {
            "utterance": "Of these , list the first name and sex of students who are allergic to milk .",
            "sql": "select student.fname , student.sex where student.stuid in ( select has_allergy.stuid where has_allergy.allergy = value except select has_allergy.stuid where has_allergy.allergy = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 43,
    "final": {
        "utterance": "How old are the students with allergies to food and animal types on average?",
        "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
    },
    "interaction": [
        {
            "utterance": "Which students have allergies to food type ?",
            "sql": "select has_allergy.stuid where allergy_type.allergytype = value"
        },
        {
            "utterance": "Which of them have also have allergies to animal type ?",
            "sql": "select has_allergy.stuid where allergy_type.allergytype = value intersect select has_allergy.stuid where allergy_type.allergytype = value"
        },
        {
            "utterance": "Find the average age of them .",
            "sql": "select avg ( student.age ) where student.stuid in ( select has_allergy.stuid where allergy_type.allergytype = value intersect select has_allergy.stuid where allergy_type.allergytype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What is the full name of each student who is not allergic to any type of food.",
        "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    "interaction": [
        {
            "utterance": "What are the first and last name of all the students ?",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "Of them , who are allergic to any type of food ?",
            "sql": "select distinct student.fname , student.lname where allergy_type.allergytype = value"
        },
        {
            "utterance": "And who are not ?",
            "sql": "select student.fname , student.lname where student.stuid not in ( select has_allergy.stuid where allergy_type.allergytype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 45,
    "final": {
        "utterance": "How many male students (sex is 'M') are allergic to any type of food?",
        "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    "interaction": [
        {
            "utterance": "Who are all the male students ?",
            "sql": "select student.* where student.sex = value"
        },
        {
            "utterance": "Of these , who have allergies to food type ?",
            "sql": "select student.* where student.sex = value and student.stuid in ( select student.stuid where allergy_type.allergytype = value )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( student.* ) where student.sex = value and student.stuid in ( select student.stuid where allergy_type.allergytype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 46,
    "final": {
        "utterance": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
    },
    "interaction": [
        {
            "utterance": "What are the ids of the students who have any allergy ?",
            "sql": "select has_allergy.stuid"
        },
        {
            "utterance": "Of these , who are allergy to milk or cat ?",
            "sql": "select has_allergy.stuid where has_allergy.allergy = value or has_allergy.allergy = value"
        },
        {
            "utterance": "What are the different first names and city codes of them ?",
            "sql": "select distinct student.fname , student.city_code where has_allergy.allergy = value or has_allergy.allergy = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 47,
    "final": {
        "utterance": "How many students are over 18 and do not have allergy to food type or animal type?",
        "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
    },
    "interaction": [
        {
            "utterance": "Which students are over 18 ?",
            "sql": "select student.* where student.age > value"
        },
        {
            "utterance": "Of them , who are not allergic to food or animal ?",
            "sql": "select student.* where student.age > value and student.stuid not in ( select student.stuid where allergy_type.allergytype = value or allergy_type.allergytype = value )"
        },
        {
            "utterance": "How many ?",
            "sql": "select count ( student.* ) where student.age > value and student.stuid not in ( select student.stuid where allergy_type.allergytype = value or allergy_type.allergytype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "allergy_1",
    "interaction_id": 48,
    "final": {
        "utterance": "What are the first name and major of the students who are able to consume soy?",
        "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    "interaction": [
        {
            "utterance": "Who have allergy to soy ?",
            "sql": "select has_allergy.* where has_allergy.allergy = value"
        },
        {
            "utterance": "Who have not ?",
            "sql": "select student.* where student.stuid not in ( select has_allergy.stuid where has_allergy.allergy = value )"
        },
        {
            "utterance": "List their first name and major .",
            "sql": "select student.fname , student.major where student.stuid not in ( select has_allergy.stuid where has_allergy.allergy = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of all the customers?",
        "sql": "SELECT customer_name FROM customers"
    },
    "interaction": [
        {
            "utterance": "Return the information of all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "What are the name of the customers ?",
            "sql": "select customers.customer_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 1,
    "final": {
        "utterance": "Return the total number of distinct customers.",
        "sql": "SELECT count(*) FROM customers"
    },
    "interaction": [
        {
            "utterance": "List all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "Count the number of the customers .",
            "sql": "select count ( customers.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the average order quantity per order.",
        "sql": "SELECT avg(order_quantity) FROM order_items"
    },
    "interaction": [
        {
            "utterance": "Find the order quantity for each order .",
            "sql": "select order_items.order_quantity"
        },
        {
            "utterance": "What is the average order quantity ?",
            "sql": "select avg ( order_items.order_quantity )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 3,
    "final": {
        "utterance": "Which customers use \"Cash\" for payment method? Return the customer names.",
        "sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\""
    },
    "interaction": [
        {
            "utterance": "Which customers ' payment method is `` Cash '' ?",
            "sql": "select customers.* where customers.payment_method = value"
        },
        {
            "utterance": "What are the names of those customers ?",
            "sql": "select customers.customer_name where customers.payment_method = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the dates when customers with ids between 10 and 20 became customers?",
        "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"
    },
    "interaction": [
        {
            "utterance": "List all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "What are the dates they became customers ?",
            "sql": "select customers.date_became_customer"
        },
        {
            "utterance": "For customer id between 10 and 20 , what are the dates they became customers ?",
            "sql": "select customers.date_became_customer where customers.customer_id between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the payment method that is used most frequently.",
        "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the payment method each customer uses ?",
            "sql": "select customers.payment_method"
        },
        {
            "utterance": "Group by the payment method , and return the frequency the method is used .",
            "sql": "select count ( customers.* ) group_by customers.payment_method"
        },
        {
            "utterance": "Return the payment method that is used most frequently .",
            "sql": "select customers.payment_method group_by customers.payment_method order_by count ( customers.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the customers who use the most frequently used payment method.",
        "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "For each payment method , count the number of customers who use it .",
            "sql": "select count ( customers.* ) group_by customers.payment_method"
        },
        {
            "utterance": "What is the most frequently used payment method ?",
            "sql": "select customers.payment_method group_by customers.payment_method order_by count ( customers.* ) desc limit_value"
        },
        {
            "utterance": "Return the name of the customers who use this payment method .",
            "sql": "select customers.customer_name where customers.payment_method = ( select customers.payment_method group_by customers.payment_method order_by count ( customers.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 7,
    "final": {
        "utterance": "Return all the distinct payment methods used by customers.",
        "sql": "SELECT DISTINCT payment_method FROM customers"
    },
    "interaction": [
        {
            "utterance": "What payment method does each customer use ?",
            "sql": "select customers.payment_method"
        },
        {
            "utterance": "Return all the distinct payment methods used .",
            "sql": "select distinct customers.payment_method"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 8,
    "final": {
        "utterance": "Return the the details of all products.",
        "sql": "SELECT DISTINCT product_details FROM products"
    },
    "interaction": [
        {
            "utterance": "What is the detail of each product ?",
            "sql": "select products.product_details"
        },
        {
            "utterance": "What are the distinct product details ?",
            "sql": "select distinct products.product_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 9,
    "final": {
        "utterance": "Which customer's name contains \"Alex\"? Find the full name.",
        "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""
    },
    "interaction": [
        {
            "utterance": "Return customers whose name contains `` Alex '' .",
            "sql": "select customers.* where customers.customer_name like value"
        },
        {
            "utterance": "What are the full names of these customers ?",
            "sql": "select customers.* where customers.customer_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 10,
    "final": {
        "utterance": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
        "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\""
    },
    "interaction": [
        {
            "utterance": "Return products whose details contain the word `` Latte '' or `` Americano '' .",
            "sql": "select products.* where products.product_details like value or products.product_details like value"
        },
        {
            "utterance": "What are the full details for these products ?",
            "sql": "select products.product_details where products.product_details like value or products.product_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
        "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\""
    },
    "interaction": [
        {
            "utterance": "Find the customer who is named `` Maudie Kertzmann '' .",
            "sql": "select customers.* where customers.customer_name = value"
        },
        {
            "utterance": "What is the address id of this customer ?",
            "sql": "select customer_addresses.address_id where customers.customer_name = value"
        },
        {
            "utterance": "What is the address content ?",
            "sql": "select addresses.address_content where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the number of customers who live in the city called Lake Geovannyton.",
        "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\""
    },
    "interaction": [
        {
            "utterance": "Find all the address ids for the city called Lake Geovannyton .",
            "sql": "select addresses.address_id where addresses.city = value"
        },
        {
            "utterance": "Find all the customers whose address is in this city .",
            "sql": "select * where addresses.city = value"
        },
        {
            "utterance": "How many customers are living there ?",
            "sql": "select count ( * ) where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names of customers who live in Colorado state?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\""
    },
    "interaction": [
        {
            "utterance": "What are the ids of addresses in Colorado state ?",
            "sql": "select addresses.address_id where addresses.state_province_county = value"
        },
        {
            "utterance": "Tell me the ids of customers who live there .",
            "sql": "select customer_addresses.customer_id where addresses.state_province_county = value"
        },
        {
            "utterance": "What are the names of these customers ?",
            "sql": "select customers.customer_name where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the cities no customers live in?",
        "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)"
    },
    "interaction": [
        {
            "utterance": "For each customer , find the city he or she lives in .",
            "sql": "select addresses.city"
        },
        {
            "utterance": "What are all the distinct cities customers live in ?",
            "sql": "select distinct addresses.city"
        },
        {
            "utterance": "What are the cities no customers live in ?",
            "sql": "select addresses.city where addresses.city not in ( select distinct addresses.city )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the city where the most customers live.",
        "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the cities customers live in .",
            "sql": "select addresses.city"
        },
        {
            "utterance": "Group by cities and count how many customers live there .",
            "sql": "select count ( * ) group_by addresses.city"
        },
        {
            "utterance": "Which city has the most customers ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 16,
    "final": {
        "utterance": "List all the distinct cities",
        "sql": "SELECT DISTINCT city FROM addresses"
    },
    "interaction": [
        {
            "utterance": "List all the addresses .",
            "sql": "select addresses.*"
        },
        {
            "utterance": "What is the list of distinct cities ?",
            "sql": "select distinct addresses.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 17,
    "final": {
        "utterance": "Which city is post code 255 located in?",
        "sql": "SELECT city FROM addresses WHERE zip_postcode  =  255"
    },
    "interaction": [
        {
            "utterance": "Find the address with post code 255 .",
            "sql": "select addresses.* where addresses.zip_postcode = value"
        },
        {
            "utterance": "Which city is this address in ?",
            "sql": "select addresses.city where addresses.zip_postcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the state and country of all the cities that have post codes starting with 4.\\",
        "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""
    },
    "interaction": [
        {
            "utterance": "Find the address with post code starting with 4 .",
            "sql": "select addresses.* where addresses.zip_postcode like value"
        },
        {
            "utterance": "What are the state and country of these addresses ?",
            "sql": "select addresses.state_province_county , addresses.country where addresses.zip_postcode like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 19,
    "final": {
        "utterance": "For which countries are there more than four distinct addresses listed?",
        "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4"
    },
    "interaction": [
        {
            "utterance": "Group all the addresses by the country .",
            "sql": "select addresses.* group_by addresses.country"
        },
        {
            "utterance": "Which countries have more than four addresses listed ?",
            "sql": "select addresses.country group_by addresses.country having count ( addresses.address_id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 20,
    "final": {
        "utterance": "Which contact channel codes were used less than 5 times?",
        "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5"
    },
    "interaction": [
        {
            "utterance": "List all the contact channel codes .",
            "sql": "select customer_contact_channels.channel_code"
        },
        {
            "utterance": "For each contact channel code , return how many times it was used .",
            "sql": "select count ( customer_contact_channels.customer_id ) group_by customer_contact_channels.channel_code"
        },
        {
            "utterance": "Which contact channel codes were used less than 5 times ?",
            "sql": "select customer_contact_channels.channel_code group_by customer_contact_channels.channel_code having count ( customer_contact_channels.customer_id ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".",
        "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "Find the customer whose name is `` Tillman Ernser '' .",
            "sql": "select customers.* where customers.customer_name = value"
        },
        {
            "utterance": "What are the channel codes used by this person ?",
            "sql": "select distinct customer_contact_channels.channel_code where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 22,
    "final": {
        "utterance": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""
    },
    "interaction": [
        {
            "utterance": "What is the `` active to date '' for each customer ?",
            "sql": "select customer_contact_channels.active_to_date"
        },
        {
            "utterance": "What is the latest `` active to date '' for each customer ?",
            "sql": "select max ( customer_contact_channels.active_to_date ) group_by customer_contact_channels.customer_id"
        },
        {
            "utterance": "Find that information for the customer named `` Tillman Ernser '' .",
            "sql": "select max ( customer_contact_channels.active_to_date ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 23,
    "final": {
        "utterance": "Compute the average active time span of contact channels.",
        "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels"
    },
    "interaction": [
        {
            "utterance": "For each contact channel , find when it started and ended being active .",
            "sql": "select customer_contact_channels.active_to_date , customer_contact_channels.active_from_date"
        },
        {
            "utterance": "What is the time span between the starting date and ending date ?",
            "sql": "select customer_contact_channels.active_to_date - customer_contact_channels.active_from_date"
        },
        {
            "utterance": "What is the average across all the channels ?",
            "sql": "select avg ( customer_contact_channels.active_to_date - customer_contact_channels.active_from_date )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 24,
    "final": {
        "utterance": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.",
        "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Tell me the active duration for each customer contact channel .",
            "sql": "select customer_contact_channels.active_to_date - customer_contact_channels.active_from_date"
        },
        {
            "utterance": "Among them , what is the longest active duration ?",
            "sql": "select customer_contact_channels.active_to_date - customer_contact_channels.active_from_date order_by ( customer_contact_channels.active_to_date - customer_contact_channels.active_from_date ) desc limit_value"
        },
        {
            "utterance": "What is the channel code and contact number of the customer contact channel whose active duration was the longest",
            "sql": "select customer_contact_channels.channel_code , customer_contact_channels.contact_number where customer_contact_channels.active_to_date - customer_contact_channels.active_from_date = ( select customer_contact_channels.active_to_date - customer_contact_channels.active_from_date order_by ( customer_contact_channels.active_to_date - customer_contact_channels.active_from_date ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the name and active date of the customers whose contact channel code is email?",
        "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"
    },
    "interaction": [
        {
            "utterance": "Which customers use email as the contact channel ?",
            "sql": "select customer_contact_channels.* where customer_contact_channels.channel_code = value"
        },
        {
            "utterance": "What are the dates these customers became active ?",
            "sql": "select customer_contact_channels.active_from_date where customer_contact_channels.channel_code = value"
        },
        {
            "utterance": "What are the name and active date of these customers ?",
            "sql": "select customers.customer_name , customer_contact_channels.active_from_date where customer_contact_channels.channel_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of the customer who made the order of the largest amount of goods.",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
    },
    "interaction": [
        {
            "utterance": "What is the largest order quantity listed in the database ?",
            "sql": "select max ( order_items.order_quantity )"
        },
        {
            "utterance": "What is the name of the customer who made that order ?",
            "sql": "select customers.customer_name where order_items.order_quantity = ( select max ( order_items.order_quantity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 27,
    "final": {
        "utterance": "Give me the name of the customer who ordered the most items in total.",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the customer name for each order .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "What is the total quantity ordered by each customer ?",
            "sql": "select sum ( order_items.order_quantity ) group_by customers.customer_name"
        },
        {
            "utterance": "Give me the name of the customer who ordered the largest quantity in total .",
            "sql": "select customers.customer_name group_by customers.customer_name order_by sum ( order_items.order_quantity ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 28,
    "final": {
        "utterance": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
        "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the total quantity ordered by each customer ?",
            "sql": "select sum ( order_items.order_quantity ) group_by customers.customer_name"
        },
        {
            "utterance": "Return the customer who ordered the least quantity in total .",
            "sql": "select * group_by customers.customer_name order_by sum ( order_items.order_quantity ) limit_value"
        },
        {
            "utterance": "What is that customer 's payment method ?",
            "sql": "select customers.payment_method group_by customers.customer_name order_by sum ( order_items.order_quantity ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the number of distinct products Rodrick Heaney has bought so far.",
        "sql": "SELECT count(DISTINCT product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
    },
    "interaction": [
        {
            "utterance": "Find the id of the product ordered in each order .",
            "sql": "select order_items.product_id"
        },
        {
            "utterance": "What are the ids of products ordered by the customer named Rodrick Heaney ?",
            "sql": "select order_items.product_id where customers.customer_name = value"
        },
        {
            "utterance": "How many distinct products has he bought ?",
            "sql": "select count ( distinct order_items.product_id ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 30,
    "final": {
        "utterance": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
        "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""
    },
    "interaction": [
        {
            "utterance": "Find the id of product ordered in each order .",
            "sql": "select order_items.product_id"
        },
        {
            "utterance": "What are the ids of products ordered by the customer named Rodrick Heaney ?",
            "sql": "select order_items.product_id where customers.customer_name = value"
        },
        {
            "utterance": "What is the total quantity of products bought by him ?",
            "sql": "select sum ( order_items.order_quantity ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 31,
    "final": {
        "utterance": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\""
    },
    "interaction": [
        {
            "utterance": "Which customer order have cancelled status ?",
            "sql": "select customer_orders.* where customer_orders.order_status = value"
        },
        {
            "utterance": "How many customers have cancelled status ?",
            "sql": "select count ( distinct customer_orders.customer_id ) where customer_orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 32,
    "final": {
        "utterance": "Tell me the number of orders with \"Second time\" as order detail.",
        "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\""
    },
    "interaction": [
        {
            "utterance": "Which customer orders have `` Second time '' as order detail ?",
            "sql": "select customer_orders.* where customer_orders.order_details = value"
        },
        {
            "utterance": "How many ?",
            "sql": "select count ( customer_orders.* ) where customer_orders.order_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the customer name and date of the orders whose status is \"Delivered\".",
        "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
    },
    "interaction": [
        {
            "utterance": "Find all the customer orders whose status is `` Delivered '' .",
            "sql": "select customer_orders.* where customer_orders.order_status = value"
        },
        {
            "utterance": "What are the customer name and date for those orders ?",
            "sql": "select customers.customer_name , customer_orders.order_date where customer_orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
    },
    "interaction": [
        {
            "utterance": "List all the customer orders in the `` Cancelled '' status .",
            "sql": "select customer_orders.* where customer_orders.order_status = value"
        },
        {
            "utterance": "Find the order quantity for these orders .",
            "sql": "select order_items.order_quantity where customer_orders.order_status = value"
        },
        {
            "utterance": "Find the total quantity of products associated with those orders .",
            "sql": "select sum ( order_items.order_quantity ) where customer_orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 35,
    "final": {
        "utterance": "What is the total amount of products purchased before 2018-03-17 07:13:53?",
        "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53'"
    },
    "interaction": [
        {
            "utterance": "Find all the customer orders that made before 2018-03-17 07:13:53 .",
            "sql": "select customer_orders.* where customer_orders.order_date < value"
        },
        {
            "utterance": "Compute the total quantity of items purchased in this order .",
            "sql": "select sum ( order_items.order_quantity ) where customer_orders.order_date < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the name of the customer who made an order most recently.",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order all the customer orders by the descending order date .",
            "sql": "select customer_orders.* order_by customer_orders.order_date desc"
        },
        {
            "utterance": "What is the most recent order ?",
            "sql": "select customer_orders.* order_by customer_orders.order_date desc limit_value"
        },
        {
            "utterance": "Who made that order ?",
            "sql": "select customers.customer_name order_by customer_orders.order_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the most frequently ordered product? Tell me the detail of the product",
        "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of times each product is ordered .",
            "sql": "select count ( order_items.* ) group_by order_items.product_id"
        },
        {
            "utterance": "What is the most frequently ordered product ?",
            "sql": "select order_items.* group_by order_items.product_id order_by count ( order_items.* ) desc limit_value"
        },
        {
            "utterance": "Tell me the detail of the product .",
            "sql": "select products.product_details group_by order_items.product_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 38,
    "final": {
        "utterance": "What are the name and ID of the product bought the most.",
        "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the total quantity order for each product .",
            "sql": "select sum ( order_items.order_quantity ) group_by order_items.product_id"
        },
        {
            "utterance": "What is the id of the product whose total order quantity is the largest ?",
            "sql": "select order_items.product_id group_by order_items.product_id order_by sum ( order_items.order_quantity ) limit_value"
        },
        {
            "utterance": "What are the name and ID of that product ?",
            "sql": "select products.product_details , products.product_id group_by order_items.product_id order_by order_items.order_quantity limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 39,
    "final": {
        "utterance": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""
    },
    "interaction": [
        {
            "utterance": "List all addresses in East Julianaside , Texas .",
            "sql": "select addresses.address_content where addresses.city = value and addresses.state_province_county = value"
        },
        {
            "utterance": "List all addresses in Gleasonmouth , Arizona .",
            "sql": "select addresses.address_content where addresses.city = value and addresses.state_province_county = value"
        },
        {
            "utterance": "List all addresses in either of them .",
            "sql": "select addresses.address_content where addresses.city = value and addresses.state_province_county = value union select addresses.address_content where addresses.city = value and addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 40,
    "final": {
        "utterance": "What is the name of customers who do not use Cash as payment method.",
        "sql": "SELECT customer_name FROM customers WHERE payment_method ! =  'Cash'"
    },
    "interaction": [
        {
            "utterance": "List all the customers ' payment method",
            "sql": "select customers.payment_method"
        },
        {
            "utterance": "Which customer does not use Cash ?",
            "sql": "select customers.* where customers.payment_method != value"
        },
        {
            "utterance": "What is the name of the customer ?",
            "sql": "select customers.customer_name where customers.payment_method != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 41,
    "final": {
        "utterance": "What are names of customers who never ordered product Latte.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE product_details  =  'Latte'"
    },
    "interaction": [
        {
            "utterance": "Find the names of all the customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "What are the names of customers who bought the product `` Latte '' before ?",
            "sql": "select customers.customer_name where products.product_details = value"
        },
        {
            "utterance": "Which customers never bought Latte '' ?",
            "sql": "select customers.customer_name except select customers.customer_name where products.product_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 42,
    "final": {
        "utterance": "What are the names of customers who never made an order.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "List the names of all the customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "What are the names of customers who have made some orders before ?",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Which customers never made an order ?",
            "sql": "select customers.customer_name except select customers.customer_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_addresses",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the names of customers who have purchased both products Latte and Americano?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE product_details  =  'Americano'"
    },
    "interaction": [
        {
            "utterance": "List the names of customers who have purchased Latte .",
            "sql": "select customers.customer_name where products.product_details = value"
        },
        {
            "utterance": "Give me the names of customers who have purchased Americano .",
            "sql": "select customers.customer_name where products.product_details = value"
        },
        {
            "utterance": "Which customers have ordered both ?",
            "sql": "select customers.customer_name where products.product_details = value intersect select customers.customer_name where products.product_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the first name and department name of all employees?",
        "sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all employees ?",
            "sql": "select employees.first_name"
        },
        {
            "utterance": "Also , what are their department names ?",
            "sql": "select employees.first_name , departments.department_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the full names and salaries for any employees earning less than 6000?",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000"
    },
    "interaction": [
        {
            "utterance": "Which employees earn less than 6000 ?",
            "sql": "select employees.* where employees.salary < value"
        },
        {
            "utterance": "What are their full names and salaries ?",
            "sql": "select employees.first_name , employees.last_name , employees.salary where employees.salary < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the first names and department numbers for employees with last name McEwen?",
        "sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'"
    },
    "interaction": [
        {
            "utterance": "List the first name and department id for all employees ?",
            "sql": "select employees.first_name , employees.department_id"
        },
        {
            "utterance": "Of these , include the ones for employees with last name McEwen .",
            "sql": "select employees.first_name , employees.department_id where employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is all the information about the Marketing department?",
        "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
    },
    "interaction": [
        {
            "utterance": "What is all the information about all the departments ?",
            "sql": "select departments.*"
        },
        {
            "utterance": "Of those , what is the information about the Marketing department ?",
            "sql": "select departments.* where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 4,
    "final": {
        "utterance": "On what dates were employees without the letter M in their first names hired?",
        "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    "interaction": [
        {
            "utterance": "What is all the information on employees ?",
            "sql": "select employees.*"
        },
        {
            "utterance": "Of those , which do not have the letter M in their first names ?",
            "sql": "select employees.* where employees.first_name not like value"
        },
        {
            "utterance": "What were their hire dates ?",
            "sql": "select employees.hire_date where employees.first_name not like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    "interaction": [
        {
            "utterance": "What is all the information on employees ?",
            "sql": "select employees.*"
        },
        {
            "utterance": "Of those , which do not have the letter M in their first names ?",
            "sql": "select employees.* where employees.first_name not like value"
        },
        {
            "utterance": "What were their full names , hire dates , salaries , and department numbers ?",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date , employees.salary , employees.department_id where employees.first_name not like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
        "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
    },
    "interaction": [
        {
            "utterance": "Which employees do not have the letter M in their first names ?",
            "sql": "select employees.* where employees.first_name not like value"
        },
        {
            "utterance": "What were their full names , hire dates , salaries , and department numbers ?",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date , employees.salary , employees.department_id where employees.first_name not like value"
        },
        {
            "utterance": "Order these by ascending department number .",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date , employees.salary , employees.department_id where employees.first_name not like value order_by employees.department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"
    },
    "interaction": [
        {
            "utterance": "What are all the employees ' phone numbers ?",
            "sql": "select employees.phone_number"
        },
        {
            "utterance": "Return only those for employees with salaries between 8000 and 12000 .",
            "sql": "select employees.phone_number where employees.salary between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Return the full names and salaries for employees with first names that end with the letter m.",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
    },
    "interaction": [
        {
            "utterance": "What are all the employees with first names that end with m ?",
            "sql": "select employees.* where employees.first_name like value"
        },
        {
            "utterance": "What are their full names and salaries ?",
            "sql": "select employees.first_name , employees.last_name , employees.salary where employees.first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
    },
    "interaction": [
        {
            "utterance": "Which employees were hired between November 5th , 2007 and July 5th , 2009 ?",
            "sql": "select employees.* where employees.hire_date between value and value"
        },
        {
            "utterance": "What are their job ids and hire dates ?",
            "sql": "select employees.job_id , employees.hire_date where employees.hire_date between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the full names of employees who with in department 70 or 90?",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    "interaction": [
        {
            "utterance": "What are the names of all employees ?",
            "sql": "select employees.first_name , employees.last_name"
        },
        {
            "utterance": "Of those , who are in department 70 or 90 ?",
            "sql": "select employees.first_name , employees.last_name where employees.department_id = value or employees.department_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is all the information about employees hired before June 21, 2002?",
        "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"
    },
    "interaction": [
        {
            "utterance": "What is all the information about employees ?",
            "sql": "select employees.*"
        },
        {
            "utterance": "Of those , which were hired before 2002-06-21 ?",
            "sql": "select employees.* where employees.hire_date < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is all the information about employees with D, S, or N in their first name, ordered by salary descending?",
        "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' OR first_name LIKE '%N%' ORDER BY salary DESC"
    },
    "interaction": [
        {
            "utterance": "What is all the information about employees with a D , S or N in their first name ?",
            "sql": "select employees.* where employees.first_name like value or employees.first_name like value or employees.first_name like value"
        },
        {
            "utterance": "Order those by decreasing salary .",
            "sql": "select employees.* where employees.first_name like value or employees.first_name like value or employees.first_name like value order_by employees.salary desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Which employees were hired after September 7th, 1987?",
        "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'"
    },
    "interaction": [
        {
            "utterance": "What is all the information about the employees ?",
            "sql": "select employees.*"
        },
        {
            "utterance": "Of those , who was hired after September 7th , 1987 ?",
            "sql": "select employees.* where employees.hire_date > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which job titles correspond to jobs with salaries over 9000?",
        "sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000"
    },
    "interaction": [
        {
            "utterance": "What are all the job titles ?",
            "sql": "select jobs.job_title"
        },
        {
            "utterance": "Of those , which correspond to jobs with salaries over 9000 ?",
            "sql": "select jobs.job_title where jobs.min_salary > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "sql": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"
    },
    "interaction": [
        {
            "utterance": "What is all the information about jobs with max salary between 12000 and 18000 ?",
            "sql": "select jobs.* where jobs.max_salary between value and value"
        },
        {
            "utterance": "What are the job titles and differences between max and min salaries for those jobs ?",
            "sql": "select jobs.job_title , jobs.max_salary - jobs.min_salary where jobs.max_salary between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the employee ids for each employee and final dates of employment at their last job?",
        "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id"
    },
    "interaction": [
        {
            "utterance": "What is all the job history information ?",
            "sql": "select job_history.*"
        },
        {
            "utterance": "What are the unique employee ids ?",
            "sql": "select job_history.employee_id group_by job_history.employee_id"
        },
        {
            "utterance": "What are the latest end dates corresponding to each one ?",
            "sql": "select job_history.employee_id , max ( job_history.end_date ) group_by job_history.employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the department ids for which more than 10 employees had a commission?",
        "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10"
    },
    "interaction": [
        {
            "utterance": "What are the different department ids ?",
            "sql": "select employees.department_id group_by employees.department_id"
        },
        {
            "utterance": "Of these , which had more than 10 employees with commissions ?",
            "sql": "select employees.department_id group_by employees.department_id having count ( employees.commission_pct ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are department ids for departments with managers managing more than 3 employees?",
        "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"
    },
    "interaction": [
        {
            "utterance": "What are the manager ids of managers who manage 4 or more employees ?",
            "sql": "select employees.manager_id group_by employees.manager_id having count ( employees.employee_id ) > = value"
        },
        {
            "utterance": "What are their department ids ?",
            "sql": "select distinct employees.department_id group_by employees.department_id , employees.manager_id having count ( employees.employee_id ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Give the country id and corresponding count of cities in each country.",
        "sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id"
    },
    "interaction": [
        {
            "utterance": "How many cities are there ?",
            "sql": "select count ( locations.* )"
        },
        {
            "utterance": "Count the cities by their country ids .",
            "sql": "select locations.country_id , count ( locations.* ) group_by locations.country_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the job ids for jobs done more than once for a period of more than 300 days?",
        "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2"
    },
    "interaction": [
        {
            "utterance": "What are job ids for jobs that lasted more than 300 days ?",
            "sql": "select job_history.job_id where job_history.end_date - job_history.start_date > value"
        },
        {
            "utterance": "Of these , which have been done more than once ?",
            "sql": "select job_history.job_id where job_history.end_date - job_history.start_date > value group_by job_history.job_id having count ( job_history.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the employee ids for employees who have held two or more jobs?",
        "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"
    },
    "interaction": [
        {
            "utterance": "What are all the different employee ids in the job history table ?",
            "sql": "select job_history.employee_id"
        },
        {
            "utterance": "Of these , which have had two or more jobs ?",
            "sql": "select job_history.employee_id group_by job_history.employee_id having count ( job_history.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are all the employee ids and the names of the countries in which they work?",
        "sql": "SELECT employee_id ,  country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"
    },
    "interaction": [
        {
            "utterance": "What are all the employee ids ?",
            "sql": "select employees.employee_id"
        },
        {
            "utterance": "Also , what are the names of the countries that they work in ?",
            "sql": "select employees.employee_id , countries.country_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Give the name of each department and the number of employees in each.",
        "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( employees.* )"
        },
        {
            "utterance": "Group these counts by department name .",
            "sql": "select departments.department_name , count ( * ) group_by departments.department_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the average salary for each job title?",
        "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"
    },
    "interaction": [
        {
            "utterance": "What is the average salary for all employees ?",
            "sql": "select avg ( employees.salary )"
        },
        {
            "utterance": "What are the average salaries by job title ?",
            "sql": "select jobs.job_title , avg ( employees.salary ) group_by jobs.job_title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Provide the full names of employees earning more than the employee with id 163.",
        "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )"
    },
    "interaction": [
        {
            "utterance": "What is the salary of employee with id 163 ?",
            "sql": "select employees.salary where employees.employee_id = value"
        },
        {
            "utterance": "What is all employee information for employees making more than employee 163 ?",
            "sql": "select employees.* where employees.salary > ( select employees.salary where employees.employee_id = value )"
        },
        {
            "utterance": "What are the full names of these employees ?",
            "sql": "select employees.first_name , employees.last_name where employees.salary > ( select employees.salary where employees.employee_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the minimum salary in each department?",
        "sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id"
    },
    "interaction": [
        {
            "utterance": "What is the lowest salary across all employees ?",
            "sql": "select min ( employees.salary )"
        },
        {
            "utterance": "What are these numbers by department id ?",
            "sql": "select min ( employees.salary ) , employees.department_id group_by employees.department_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the full names and department ids for the lowest paid employees across all departments.",
        "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"
    },
    "interaction": [
        {
            "utterance": "What is the lowest salary across all departments ?",
            "sql": "select min ( employees.salary ) group_by employees.department_id"
        },
        {
            "utterance": "What information is available for employees who make that much ?",
            "sql": "select employees.* where employees.salary in ( select min ( employees.salary ) group_by employees.department_id )"
        },
        {
            "utterance": "What are their first and last names and department ids ?",
            "sql": "select employees.first_name , employees.last_name , employees.department_id where employees.salary in ( select min ( employees.salary ) group_by employees.department_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the employee ids for employees who make more than the average?",
        "sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)"
    },
    "interaction": [
        {
            "utterance": "What is the average salary across all employees ?",
            "sql": "select avg ( employees.salary )"
        },
        {
            "utterance": "Which employees make more than that ?",
            "sql": "select employees.* where employees.salary > ( select avg ( employees.salary ) )"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select employees.employee_id where employees.salary > ( select avg ( employees.salary ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the employee ids of employees who report to Payam, and what are their salaries?",
        "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )"
    },
    "interaction": [
        {
            "utterance": "What are the id for the employee whose first name is Payam ?",
            "sql": "select employees.employee_id where employees.first_name = value"
        },
        {
            "utterance": "Which employees ' manager is him ?",
            "sql": "select employees.* where employees.manager_id = ( select employees.employee_id where employees.first_name = value )"
        },
        {
            "utterance": "What are their ids and salaries ?",
            "sql": "select employees.employee_id , employees.salary where employees.manager_id = ( select employees.employee_id where employees.first_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the names of departments that have at least one employee.",
        "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"
    },
    "interaction": [
        {
            "utterance": "Find the name of all departments .",
            "sql": "select distinct departments.department_name"
        },
        {
            "utterance": "What about those that have at least one employee .",
            "sql": "select distinct departments.department_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What is all the information regarding employees who are managers?",
        "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id"
    },
    "interaction": [
        {
            "utterance": "What are all the manager ids of the different departments ?",
            "sql": "select departments.manager_id"
        },
        {
            "utterance": "What is all the employee information regarding these managers ?",
            "sql": "select distinct * where employees.employee_id = departments.manager_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What is all the information about the Marketing department?",
        "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
    },
    "interaction": [
        {
            "utterance": "What is all the information about all the departments ?",
            "sql": "select departments.*"
        },
        {
            "utterance": "Of these , what information pertains to the Marketing department ?",
            "sql": "select departments.* where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the employee ids for those who had two or more jobs.",
        "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"
    },
    "interaction": [
        {
            "utterance": "What are the ids of employees who have job history available ?",
            "sql": "select job_history.employee_id"
        },
        {
            "utterance": "Which of them have held two or more jobs ?",
            "sql": "select job_history.employee_id group_by job_history.employee_id having count ( job_history.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"
    },
    "interaction": [
        {
            "utterance": "What are the manager ids for managers who are in charge of 4 or more employees ?",
            "sql": "select employees.manager_id group_by employees.manager_id having count ( employees.employee_id ) > = value"
        },
        {
            "utterance": "What are the distinct department ids for the departments they belong to ?",
            "sql": "select distinct employees.department_id group_by employees.department_id , employees.manager_id having count ( employees.employee_id ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the job ids corresponding to jobs with average salary above 8000?",
        "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"
    },
    "interaction": [
        {
            "utterance": "What is the average salary for each job ?",
            "sql": "select avg ( employees.salary ) group_by employees.job_id"
        },
        {
            "utterance": "What are the job ids for jobs that average more than 8000 ?",
            "sql": "select employees.job_id group_by employees.job_id having avg ( employees.salary ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 36,
    "final": {
        "utterance": "what are the employee ids and job titles for employees in department 80?",
        "sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80"
    },
    "interaction": [
        {
            "utterance": "What are the employee ids for employees in department 80 ?",
            "sql": "select employees.employee_id where employees.department_id = value"
        },
        {
            "utterance": "Also , what are their job titles ?",
            "sql": "select employees.employee_id , jobs.job_title where employees.department_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 37,
    "final": {
        "utterance": "Give the first name and job id for all employees in the Finance department.",
        "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'"
    },
    "interaction": [
        {
            "utterance": "Who are the employees working in the Finance department ?",
            "sql": "select * where departments.department_name = value"
        },
        {
            "utterance": "What are their first names and job ids ?",
            "sql": "select employees.first_name , employees.job_id where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"
    },
    "interaction": [
        {
            "utterance": "What is the lowest salary across all employees ?",
            "sql": "select min ( employees.salary )"
        },
        {
            "utterance": "Which employees make more than that ?",
            "sql": "select employees.* where employees.salary > ( select min ( employees.salary ) )"
        },
        {
            "utterance": "Of those , which make less than 2500 ?",
            "sql": "select employees.* where employees.salary between ( select min ( employees.salary ) ) and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?",
        "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
    },
    "interaction": [
        {
            "utterance": "What are the department ids with managers who have ids between 100 and 200 ?",
            "sql": "select departments.department_id where departments.manager_id between value and value"
        },
        {
            "utterance": "What is all the information about employees who do not work in those departments ?",
            "sql": "select employees.* where employees.department_id not in ( select departments.department_id where departments.manager_id between value and value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 40,
    "final": {
        "utterance": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
        "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")"
    },
    "interaction": [
        {
            "utterance": "What are the department ids for departments that have someone with the first name Clara ?",
            "sql": "select employees.department_id where employees.first_name = value"
        },
        {
            "utterance": "What is all the information about employees in those departments ?",
            "sql": "select employees.* where employees.department_id = ( select employees.department_id where employees.first_name = value )"
        },
        {
            "utterance": "What are the full names and hire dates of those employees ?",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date where employees.department_id = ( select employees.department_id where employees.first_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
        "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name ! =  \"Clara\""
    },
    "interaction": [
        {
            "utterance": "What are the department ids for departments that have someone with the first name Clara ?",
            "sql": "select employees.department_id where employees.first_name = value"
        },
        {
            "utterance": "What is all the information about employees in those departments ?",
            "sql": "select employees.* where employees.department_id = ( select employees.department_id where employees.first_name = value )"
        },
        {
            "utterance": "What are the full names and hire dates of those employees ?",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date where employees.department_id = ( select employees.department_id where employees.first_name = value )"
        },
        {
            "utterance": "Of those , who does not have the first name Clara ?",
            "sql": "select employees.first_name , employees.last_name , employees.hire_date where employees.department_id = ( select employees.department_id where employees.first_name = value ) and employees.first_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 42,
    "final": {
        "utterance": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
        "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )"
    },
    "interaction": [
        {
            "utterance": "What are the department ids for departments with employees who have the letter T in their first name ?",
            "sql": "select employees.department_id where employees.first_name like value"
        },
        {
            "utterance": "Who are the employees in those departments ?",
            "sql": "select employees.* where employees.department_id in ( select employees.department_id where employees.first_name like value )"
        },
        {
            "utterance": "What are their ids and full names ?",
            "sql": "select employees.employee_id , employees.first_name , employees.last_name where employees.department_id in ( select employees.department_id where employees.first_name like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?",
        "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')"
    },
    "interaction": [
        {
            "utterance": "What is the average salary across all employees ?",
            "sql": "select avg ( employees.salary )"
        },
        {
            "utterance": "Which employees make more than that ?",
            "sql": "select employees.* where employees.salary > ( select avg ( employees.salary ) )"
        },
        {
            "utterance": "Of those , which work in departments with employees who have the letter J in their first name ?",
            "sql": "select employees.* where employees.salary > ( select avg ( employees.salary ) ) and employees.department_id in ( select employees.department_id where employees.first_name like value )"
        },
        {
            "utterance": "What are their ids , full names and salaries ?",
            "sql": "select employees.employee_id , employees.first_name , employees.last_name , employees.salary where employees.salary > ( select avg ( employees.salary ) ) and employees.department_id in ( select employees.department_id where employees.first_name like value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?",
        "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )"
    },
    "interaction": [
        {
            "utterance": "What is the lowest salary for someone with the title MK_MAN ?",
            "sql": "select min ( employees.salary ) where employees.job_id = value"
        },
        {
            "utterance": "Which employees make less than that ?",
            "sql": "select employees.* where employees.salary < ( select min ( employees.salary ) where employees.job_id = value )"
        },
        {
            "utterance": "What are their employee ids and job ids ?",
            "sql": "select employees.employee_id , employees.job_id where employees.salary < ( select min ( employees.salary ) where employees.job_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 45,
    "final": {
        "utterance": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
        "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )"
    },
    "interaction": [
        {
            "utterance": "What is the highest salary for someone with the title PU_MAN ?",
            "sql": "select max ( employees.salary ) where employees.job_id = value"
        },
        {
            "utterance": "Which employees make more than that ?",
            "sql": "select employees.* where employees.salary > ( select max ( employees.salary ) where employees.job_id = value )"
        },
        {
            "utterance": "What are their employee ids , full names , and job ids ?",
            "sql": "select employees.employee_id , employees.first_name , employees.last_name , employees.job_id where employees.salary > ( select max ( employees.salary ) where employees.job_id = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 46,
    "final": {
        "utterance": "What are total salaries and department id for each department that has more than 2 employees?",
        "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the department ids for departments which have more than 2 employees ?",
            "sql": "select employees.department_id group_by employees.department_id having count ( employees.* ) > = value"
        },
        {
            "utterance": "What is the sum of the salaries within each of those departments ?",
            "sql": "select employees.department_id , sum ( employees.salary ) group_by employees.department_id having count ( employees.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 47,
    "final": {
        "utterance": "What is all the information about employees who have never had a job in the past?",
        "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
    },
    "interaction": [
        {
            "utterance": "What are all the employee ids for employees who have had a job in the past ?",
            "sql": "select job_history.employee_id group_by job_history.employee_id"
        },
        {
            "utterance": "What is all the information for employees who are not a part of those ?",
            "sql": "select employees.* where employees.employee_id not in ( select job_history.employee_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 48,
    "final": {
        "utterance": "What are the full names, departments, cities, and state provinces for each employee?",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id"
    },
    "interaction": [
        {
            "utterance": "What are the first and last names for each employee ?",
            "sql": "select employees.first_name , employees.last_name"
        },
        {
            "utterance": "Also , what are their department names ?",
            "sql": "select employees.first_name , employees.last_name , departments.department_name"
        },
        {
            "utterance": "Also , what are their city and state provinces ?",
            "sql": "select employees.first_name , employees.last_name , departments.department_name , locations.city , locations.state_province"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 49,
    "final": {
        "utterance": "What are the full names and cities of employees who have the letter Z in their first names?",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"
    },
    "interaction": [
        {
            "utterance": "What are the full names of each employee ?",
            "sql": "select employees.first_name , employees.last_name"
        },
        {
            "utterance": "Also , what cities are their departments in ?",
            "sql": "select employees.first_name , employees.last_name , locations.city"
        },
        {
            "utterance": "Of these , which have the letter Z in their first name ?",
            "sql": "select employees.first_name , employees.last_name , locations.city where employees.first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 50,
    "final": {
        "utterance": "What are the department names, cities, and state provinces for each department?",
        "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of each department ?",
            "sql": "select departments.department_name"
        },
        {
            "utterance": "Also , in what city and state province are they in ?",
            "sql": "select departments.department_name , locations.city , locations.state_province"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 51,
    "final": {
        "utterance": "What the full names, ids of each employee and the name of the country they are in?",
        "sql": "SELECT first_name ,  last_name ,  employee_id ,  country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"
    },
    "interaction": [
        {
            "utterance": "What are the full names and ids for all employees ?",
            "sql": "select employees.first_name , employees.last_name , employees.employee_id"
        },
        {
            "utterance": "Also , what are the names of the countries that they work in ?",
            "sql": "select employees.first_name , employees.last_name , employees.employee_id , countries.country_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 52,
    "final": {
        "utterance": "What are the department names and how many employees work in each of them?",
        "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"
    },
    "interaction": [
        {
            "utterance": "What are the different department names ?",
            "sql": "select departments.department_name"
        },
        {
            "utterance": "How many employees work in each one ?",
            "sql": "select departments.department_name , count ( * ) group_by departments.department_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "hr_1",
    "interaction_id": 53,
    "final": {
        "utterance": "What are full names and salaries of employees working in the city of London?",
        "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'"
    },
    "interaction": [
        {
            "utterance": "Who are all the employees working in the city of London ?",
            "sql": "select * where locations.city = value"
        },
        {
            "utterance": "What are their full names and salaries ?",
            "sql": "select employees.first_name , employees.last_name , employees.salary where locations.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 0,
    "final": {
        "utterance": "Count the number of courses.",
        "sql": "SELECT count(*) FROM COURSE"
    },
    "interaction": [
        {
            "utterance": "What is all the course information ?",
            "sql": "select course.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( course.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 1,
    "final": {
        "utterance": "Count the number of courses with more than 2 credits.",
        "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2"
    },
    "interaction": [
        {
            "utterance": "What is all the information for courses with more than 2 credits ?",
            "sql": "select course.* where course.credits > value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( course.* ) where course.credits > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the course names for courses taught on MTW?",
        "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\""
    },
    "interaction": [
        {
            "utterance": "What are all the course names ?",
            "sql": "select course.cname"
        },
        {
            "utterance": "Of those , which are taught on the days MTW ?",
            "sql": "select course.cname where course.days = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 3,
    "final": {
        "utterance": "How many departments are in the division AS?",
        "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\""
    },
    "interaction": [
        {
            "utterance": "How many departments are there ?",
            "sql": "select count ( department.* )"
        },
        {
            "utterance": "Of those , how many are in the `` AS '' division ?",
            "sql": "select count ( department.* ) where department.division = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 4,
    "final": {
        "utterance": "Give the phones for departments in room 268.",
        "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268"
    },
    "interaction": [
        {
            "utterance": "What is all the information about departments in room 268 ?",
            "sql": "select department.* where department.room = value"
        },
        {
            "utterance": "What are their phones ?",
            "sql": "select department.dphone where department.room = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 5,
    "final": {
        "utterance": "How many students have had at least one \"B\" grade?",
        "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\""
    },
    "interaction": [
        {
            "utterance": "What are the distinct student ids for students who have gotten a `` B '' grade ?",
            "sql": "select distinct enrolled_in.stuid where enrolled_in.grade = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct enrolled_in.stuid ) where enrolled_in.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the maximum and minumum grade points?",
        "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"
    },
    "interaction": [
        {
            "utterance": "What is the maximum gradepoint ?",
            "sql": "select max ( gradeconversion.gradepoint )"
        },
        {
            "utterance": "Also , what is the minimum gradepoint ?",
            "sql": "select max ( gradeconversion.gradepoint ) , min ( gradeconversion.gradepoint )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the first names for students who have an \"a\" in their first name?",
        "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "What are all the distinct student first names ?",
            "sql": "select distinct student.fname"
        },
        {
            "utterance": "Of those , which contain the letter `` a '' ?",
            "sql": "select distinct student.fname where student.fname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the full names of faculties with sex M and who live in building NEB?",
        "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "What are the full names of all the faculty ?",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Of those , which have sex M ?",
            "sql": "select faculty.fname , faculty.lname where faculty.sex = value"
        },
        {
            "utterance": "Of those , which are in building NEB ?",
            "sql": "select faculty.fname , faculty.lname where faculty.sex = value and faculty.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "What are the rooms for all faculty with rank professor ?",
            "sql": "select faculty.room where faculty.rank = value"
        },
        {
            "utterance": "Of those , which are for faculty who live in building NEB ?",
            "sql": "select faculty.room where faculty.rank = value and faculty.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of the department in the Building Mergenthaler?",
        "sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the departments ?",
            "sql": "select department.dname"
        },
        {
            "utterance": "Which corresponds to the one in building Mergenthaler ?",
            "sql": "select department.dname where department.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 11,
    "final": {
        "utterance": "What is all the information about courses, ordered by credits ascending?",
        "sql": "SELECT * FROM COURSE ORDER BY Credits"
    },
    "interaction": [
        {
            "utterance": "What is all the information about credits ?",
            "sql": "select course.*"
        },
        {
            "utterance": "Order this in ascending order .",
            "sql": "select course.* order_by course.credits"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the course names, ordered by credits?",
        "sql": "SELECT CName FROM COURSE ORDER BY Credits"
    },
    "interaction": [
        {
            "utterance": "What are all the course names ?",
            "sql": "select course.cname"
        },
        {
            "utterance": "Order them by credits .",
            "sql": "select course.cname order_by course.credits"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the first names of students, ordered by age from greatest to least?",
        "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC"
    },
    "interaction": [
        {
            "utterance": "What is all the student information , ordered by age descending ?",
            "sql": "select student.* order_by student.age desc"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.fname order_by student.age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the last names of female students, ordered by age descending?",
        "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC"
    },
    "interaction": [
        {
            "utterance": "What are the last names of all the female students ?",
            "sql": "select student.lname where student.sex = value"
        },
        {
            "utterance": "Order this by age descending .",
            "sql": "select student.lname where student.sex = value order_by student.age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the last names of faculty in building Barton, sorted by last name?",
        "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname"
    },
    "interaction": [
        {
            "utterance": "What are the last names of faculty in building Barton ?",
            "sql": "select faculty.lname where faculty.building = value"
        },
        {
            "utterance": "Order this alphabetically .",
            "sql": "select faculty.lname where faculty.building = value order_by faculty.lname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the first names for all faculty professors, ordered by first name?",
        "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all the faculty ?",
            "sql": "select faculty.fname"
        },
        {
            "utterance": "Of those , which are professors ?",
            "sql": "select faculty.fname where faculty.rank = value"
        },
        {
            "utterance": "Sort this in alphabetical order .",
            "sql": "select faculty.fname where faculty.rank = value order_by faculty.fname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the name of the department with the most students minoring in it?",
        "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the department names ?",
            "sql": "select department.dname"
        },
        {
            "utterance": "Order these descending by the number of students minoring in them .",
            "sql": "select department.dname group_by minor_in.dno order_by count ( * ) desc"
        },
        {
            "utterance": "Which has the most ?",
            "sql": "select department.dname group_by minor_in.dno order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the name of the department htat has no students minoring in it?",
        "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO"
    },
    "interaction": [
        {
            "utterance": "What are the names of departments that have students minoring in them ?",
            "sql": "select department.dname"
        },
        {
            "utterance": "What are all the other department names ?",
            "sql": "select department.dname except select department.dname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name of the department with the fewest members?",
        "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the department names ?",
            "sql": "select department.dname"
        },
        {
            "utterance": "Order them by the number of members in each .",
            "sql": "select department.dname group_by member_of.dno order_by count ( * ) asc"
        },
        {
            "utterance": "Which has the fewest ?",
            "sql": "select department.dname group_by member_of.dno order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the least common faculty rank?",
        "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the different faculty ranks ?",
            "sql": "select faculty.rank group_by faculty.rank"
        },
        {
            "utterance": "Order them by the number of faculty in each rank .",
            "sql": "select faculty.rank group_by faculty.rank order_by count ( faculty.* ) asc"
        },
        {
            "utterance": "Which has the fewest ?",
            "sql": "select faculty.rank group_by faculty.rank order_by count ( faculty.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the full names of the 3 instructors who teach the most courses?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the full names of all the faculty ?",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Order them by the number of courses they teach , descending .",
            "sql": "select faculty.fname , faculty.lname group_by course.instructor order_by count ( * ) desc"
        },
        {
            "utterance": "Who are the top three ?",
            "sql": "select faculty.fname , faculty.lname group_by course.instructor order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 22,
    "final": {
        "utterance": "Give the building that the instructor who teaches the greatest number of courses lives in.",
        "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is all the information about all the faculty ?",
            "sql": "select faculty.*"
        },
        {
            "utterance": "Order this by the number of courses each faculty teaches , descending .",
            "sql": "select * group_by course.instructor order_by count ( * ) desc"
        },
        {
            "utterance": "What is the building that the one who teachest the most lives in ?",
            "sql": "select faculty.building group_by course.instructor order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 23,
    "final": {
        "utterance": "Give the names of the courses with at least five enrollments.",
        "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "What are all the course names ?",
            "sql": "select course.cname"
        },
        {
            "utterance": "Of those , which have at least five students enrolled ?",
            "sql": "select course.cname group_by enrolled_in.cid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the full name of the instructor who has a course named COMPUTER LITERACY?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\""
    },
    "interaction": [
        {
            "utterance": "What are the full names of all faculty ?",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Of those , which has a course named COMPUTER LITERACY ?",
            "sql": "select faculty.fname , faculty.lname where course.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
        "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\""
    },
    "interaction": [
        {
            "utterance": "What is all the information about the course INTRODUCTION TO COMPUTER SCIENCE ?",
            "sql": "select course.* where course.cname = value"
        },
        {
            "utterance": "What room is it held in ?",
            "sql": "select department.room where course.cname = value"
        },
        {
            "utterance": "Also , what is the department name for the department that offers it ?",
            "sql": "select department.dname , department.room where course.cname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the full names and gradepoints for all enrollments?",
        "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID"
    },
    "interaction": [
        {
            "utterance": "What are the full names of all students ?",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "Also , what are the gradepoints for any classes they are enrolled in ?",
            "sql": "select student.fname , student.lname , gradeconversion.gradepoint"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
        "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8"
    },
    "interaction": [
        {
            "utterance": "What are the distinct first names of students ?",
            "sql": "select distinct student.fname"
        },
        {
            "utterance": "Of those , which have a gradepoint of at least 3.8 in one course ?",
            "sql": "select distinct student.fname where gradeconversion.gradepoint > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the full names of faculty members who are a part of department 520?",
        "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520"
    },
    "interaction": [
        {
            "utterance": "What are the full names of all the faculty ?",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Of those , which are a part of department 520 ?",
            "sql": "select faculty.fname , faculty.lname where member_of.dno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the full names of students minoring in department 140?",
        "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140"
    },
    "interaction": [
        {
            "utterance": "What are the full names of all students ?",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "Of those , which are minoring in the department with number 140 ?",
            "sql": "select student.fname , student.lname where minor_in.dno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the last names of faculty who are part of the computer science department?",
        "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\""
    },
    "interaction": [
        {
            "utterance": "What is all the information about faculty ?",
            "sql": "select faculty.*"
        },
        {
            "utterance": "Of those , which are in the computer science department ?",
            "sql": "select * where department.dname = value"
        },
        {
            "utterance": "What are their last names ?",
            "sql": "select faculty.lname where department.dname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the average gradepoint for students with the last name Smith?",
        "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\""
    },
    "interaction": [
        {
            "utterance": "What is the average gradepoint for any students enrolled in courses ?",
            "sql": "select avg ( gradeconversion.gradepoint )"
        },
        {
            "utterance": "What is this for students with last name Smith ?",
            "sql": "select avg ( gradeconversion.gradepoint ) where student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 32,
    "final": {
        "utterance": "Give the maximum and minimum gradepoints for students living in NYC?",
        "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\""
    },
    "interaction": [
        {
            "utterance": "What is all the information about students living in NYC ?",
            "sql": "select student.* where student.city_code = value"
        },
        {
            "utterance": "What are their gradepoints for the courses they are enrolled in ?",
            "sql": "select gradeconversion.gradepoint where student.city_code = value"
        },
        {
            "utterance": "What are the maximum and minimum ?",
            "sql": "select max ( gradeconversion.gradepoint ) , min ( gradeconversion.gradepoint ) where student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4"
    },
    "interaction": [
        {
            "utterance": "What are the names of courses with 3 credits ?",
            "sql": "select course.cname where course.credits = value"
        },
        {
            "utterance": "What are the names of courses with 1 credit and 4 hours ?",
            "sql": "select course.cname where course.credits = value and course.hours = value"
        },
        {
            "utterance": "What are the names of courses in either group ?",
            "sql": "select course.cname where course.credits = value union select course.cname where course.credits = value and course.hours = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 34,
    "final": {
        "utterance": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "What are the department names for departments in division AS ?",
            "sql": "select department.dname where department.division = value"
        },
        {
            "utterance": "What are department names for departments in divison EN and building NEB ?",
            "sql": "select department.dname where department.division = value and department.building = value"
        },
        {
            "utterance": "What are the names for departments in either group ?",
            "sql": "select department.dname where department.division = value union select department.dname where department.division = value and department.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "college_3",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the first names of all students that are not enrolled in courses?",
        "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
    },
    "interaction": [
        {
            "utterance": "What are the student ids for each student ?",
            "sql": "select student.stuid"
        },
        {
            "utterance": "Of those , which are not enrolled in any courses ?",
            "sql": "select student.stuid where student.stuid not in ( select enrolled_in.stuid )"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select student.fname where student.stuid not in ( select enrolled_in.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 0,
    "final": {
        "utterance": "How many students are enrolled in college?",
        "sql": "SELECT sum(enr) FROM College"
    },
    "interaction": [
        {
            "utterance": "What can you tell me about college ?",
            "sql": "select college.*"
        },
        {
            "utterance": "What are the enrollment numbers for each college ?",
            "sql": "select college.enr"
        },
        {
            "utterance": "What is the total enrollment number for all of the colleges ?",
            "sql": "select sum ( college.enr )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 1,
    "final": {
        "utterance": "How many students, on average, does each college have enrolled?",
        "sql": "SELECT avg(enr) FROM College"
    },
    "interaction": [
        {
            "utterance": "How many are enrolled for each college ?",
            "sql": "select college.enr"
        },
        {
            "utterance": "What is the average number ?",
            "sql": "select avg ( college.enr )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 2,
    "final": {
        "utterance": "How many different colleges are there?",
        "sql": "SELECT COUNT(*) FROM College"
    },
    "interaction": [
        {
            "utterance": "What is all the information on each college ?",
            "sql": "select college.*"
        },
        {
            "utterance": "How many different ones exist ?",
            "sql": "select count ( college.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 3,
    "final": {
        "utterance": "How many different players trained for more than 1000 hours?",
        "sql": "SELECT count(*) FROM Player WHERE HS  >  1000"
    },
    "interaction": [
        {
            "utterance": "What information do you have on players ?",
            "sql": "select player.*"
        },
        {
            "utterance": "Which of those refer to people who trained for more than 1000 hours ?",
            "sql": "select player.pname where player.hs > value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( player.* ) where player.hs > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the number of colleges with a student population greater than 15000?",
        "sql": "SELECT count(*) FROM College WHERE enr  >  15000"
    },
    "interaction": [
        {
            "utterance": "What is all the information on colleges ?",
            "sql": "select college.*"
        },
        {
            "utterance": "Which of those have a student population greater than 15000 ?",
            "sql": "select college.* where college.enr > value"
        },
        {
            "utterance": "How many of them exist ?",
            "sql": "select count ( college.* ) where college.enr > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 5,
    "final": {
        "utterance": "How many hours do the players train on average?",
        "sql": "SELECT avg(HS) FROM Player"
    },
    "interaction": [
        {
            "utterance": "How many hours does each player train for ?",
            "sql": "select player.pname , player.hs"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( player.hs )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?",
        "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500"
    },
    "interaction": [
        {
            "utterance": "What are the names of the players ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Which of those practice for less than 1500 hours ?",
            "sql": "select player.pname where player.hs < value"
        },
        {
            "utterance": "Also , list the hours worked for each of them .",
            "sql": "select player.pname , player.hs where player.hs < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 7,
    "final": {
        "utterance": "How many different colleges were represented at tryouts?",
        "sql": "SELECT count(DISTINCT cName) FROM tryout"
    },
    "interaction": [
        {
            "utterance": "What is the name of the college each student trying out from ?",
            "sql": "select tryout.cname"
        },
        {
            "utterance": "What are the different college names ?",
            "sql": "select distinct tryout.cname"
        },
        {
            "utterance": "How many different ones exist ?",
            "sql": "select count ( distinct tryout.cname )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the different types of player positions?",
        "sql": "SELECT count(DISTINCT pPos) FROM tryout"
    },
    "interaction": [
        {
            "utterance": "What are the different player positions ?",
            "sql": "select distinct tryout.ppos"
        },
        {
            "utterance": "How many of them exist ?",
            "sql": "select count ( distinct tryout.ppos )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 9,
    "final": {
        "utterance": "How many students received a yes from tryouts?",
        "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "What were the decisions for each player ?",
            "sql": "select player.pname , tryout.decision"
        },
        {
            "utterance": "Which of the players received a yes ?",
            "sql": "select player.pname where tryout.decision = value"
        },
        {
            "utterance": "How many of them exist ?",
            "sql": "select count ( tryout.* ) where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the number of students playing as a goalie?",
        "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'"
    },
    "interaction": [
        {
            "utterance": "What information exists for players tried for the position of goalie ?",
            "sql": "select tryout.* where tryout.ppos = value"
        },
        {
            "utterance": "How many of them tried out ?",
            "sql": "select count ( tryout.* ) where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the average, maximum, and minimum for the number of hours spent training?",
        "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player"
    },
    "interaction": [
        {
            "utterance": "How many hours does each player spend training ?",
            "sql": "select player.pname , player.hs"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( player.hs )"
        },
        {
            "utterance": "Also , what is the maximum and minimum ?",
            "sql": "select avg ( player.hs ) , max ( player.hs ) , min ( player.hs )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 12,
    "final": {
        "utterance": "What is average number of students enrolled in Florida colleges?",
        "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'"
    },
    "interaction": [
        {
            "utterance": "What is the number of students enrolled in each college ?",
            "sql": "select college.cname , college.enr"
        },
        {
            "utterance": "Of those , which refer to students enrolled in places in Florida ?",
            "sql": "select college.cname , college.enr where college.state = value"
        },
        {
            "utterance": "What is the average number enrolled for them ?",
            "sql": "select avg ( college.enr ) where college.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names of players who train between 500 and 1500 hours?",
        "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"
    },
    "interaction": [
        {
            "utterance": "Give me all information about players who train between 500 and 1500 hours .",
            "sql": "select player.* where player.hs between value and value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select player.pname where player.hs between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Who are the players that have names containing the letter a?",
        "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "What information is there on players whose name contains the letter a ?",
            "sql": "select player.* where player.pname like value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select player.pname where player.pname like value"
        },
        {
            "utterance": "What is a list of the unique names ?",
            "sql": "select distinct player.pname where player.pname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "What information you have on colleges that have more than 10000 students enrolled ?",
            "sql": "select college.* where college.enr > value"
        },
        {
            "utterance": "Of those , which refer to colleges in the state of LA ?",
            "sql": "select college.* where college.enr > value and college.state = value"
        },
        {
            "utterance": "What are these colleges ' names and enrollment numbers ?",
            "sql": "select college.cname , college.enr where college.enr > value and college.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 16,
    "final": {
        "utterance": "What information do you have on colleges sorted by increasing enrollment numbers?",
        "sql": "SELECT * FROM College ORDER BY enr"
    },
    "interaction": [
        {
            "utterance": "What information do you have on the colleges ?",
            "sql": "select college.*"
        },
        {
            "utterance": "Sort the information by enrollment numbers .",
            "sql": "select college.* order_by college.enr"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
    },
    "interaction": [
        {
            "utterance": "What are the college names ?",
            "sql": "select college.cname"
        },
        {
            "utterance": "Which of those have more than 18000 students enrolled ?",
            "sql": "select college.cname where college.enr > value"
        },
        {
            "utterance": "Order them alphabetically .",
            "sql": "select college.cname where college.enr > value order_by college.cname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the name of the players who received a card in descending order of the hours of training?",
        "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the players ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Which of those received a card ?",
            "sql": "select player.pname where player.ycard = value"
        },
        {
            "utterance": "Set them in descending order of hours spent training .",
            "sql": "select player.pname where player.ycard = value order_by player.hs desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName"
    },
    "interaction": [
        {
            "utterance": "Order the information on tryouts by college name",
            "sql": "select tryout.* order_by tryout.cname"
        },
        {
            "utterance": "What are the names of the colleges ?",
            "sql": "select tryout.cname order_by tryout.cname"
        },
        {
            "utterance": "Make sure they are all unique .",
            "sql": "select distinct tryout.cname order_by tryout.cname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 20,
    "final": {
        "utterance": "What was the most popular position at tryouts?",
        "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What information do you have for each position ?",
            "sql": "select tryout.* group_by tryout.ppos"
        },
        {
            "utterance": "How many players tried out for each position ?",
            "sql": "select tryout.ppos , count ( tryout.* ) group_by tryout.ppos"
        },
        {
            "utterance": "What was the most popular one ?",
            "sql": "select tryout.ppos group_by tryout.ppos order_by count ( tryout.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 21,
    "final": {
        "utterance": "How many students participated in tryouts for each college by descennding count?",
        "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many students participated in tryouts for each college ?",
            "sql": "select count ( tryout.* ) , tryout.cname group_by tryout.cname"
        },
        {
            "utterance": "Order them by number of participants .",
            "sql": "select count ( tryout.* ) , tryout.cname group_by tryout.cname order_by count ( tryout.* )"
        },
        {
            "utterance": "Make sure it is in descending order .",
            "sql": "select count ( tryout.* ) , tryout.cname group_by tryout.cname order_by count ( tryout.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 22,
    "final": {
        "utterance": "For each position, what is the minimum time students spent practicing?",
        "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos"
    },
    "interaction": [
        {
            "utterance": "For each position , how much did each player practice ?",
            "sql": "select player.hs , tryout.ppos group_by tryout.ppos"
        },
        {
            "utterance": "What is the minimum for each position ?",
            "sql": "select min ( player.hs ) , tryout.ppos group_by tryout.ppos"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the names of the schools with the top 3 largest class sizes?",
        "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names of each college ?",
            "sql": "select college.cname"
        },
        {
            "utterance": "List them in order of descending class size .",
            "sql": "select college.cname order_by college.enr desc"
        },
        {
            "utterance": "What are the top 3 ?",
            "sql": "select college.cname order_by college.enr desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the different states that have students trying out?",
        "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName"
    },
    "interaction": [
        {
            "utterance": "Which colleges have students trying out ?",
            "sql": "select college.cname"
        },
        {
            "utterance": "What are the different state they are located in ?",
            "sql": "select distinct college.state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the different states that had students successfully try out?",
        "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "What are the name of the colleges that had students participate in tryouts ?",
            "sql": "select college.cname"
        },
        {
            "utterance": "Of those colleges , which had students that received a yes ?",
            "sql": "select college.cname where tryout.decision = value"
        },
        {
            "utterance": "What are the different states those colleges are located in ?",
            "sql": "select distinct college.state where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "What are all the players names ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Which of those players tried out and received a yes ?",
            "sql": "select player.pname where tryout.decision = value"
        },
        {
            "utterance": "Also , what colleges are they from ?",
            "sql": "select player.pname , tryout.cname where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the names of all students who tried out in alphabetical order?",
        "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName"
    },
    "interaction": [
        {
            "utterance": "What are the players ' names ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Which of them tried out ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Sort the list alphabetically .",
            "sql": "select player.pname order_by player.pname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all players who participated in tryouts ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Which of those received a yes ?",
            "sql": "select player.pname where tryout.decision = value"
        },
        {
            "utterance": "How many hours did each of them practice for ?",
            "sql": "select player.pname , player.hs where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the states of the colleges where students who tried out for the striker position attend?",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'"
    },
    "interaction": [
        {
            "utterance": "Which colleges did the students who tried out for the position of striker attend ?",
            "sql": "select college.cname where tryout.ppos = value"
        },
        {
            "utterance": "What states are those colleges located in ?",
            "sql": "select college.state where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the names of all students who successfully tried out for the position of striker?",
        "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"
    },
    "interaction": [
        {
            "utterance": "What is every player 's name ?",
            "sql": "select player.pname"
        },
        {
            "utterance": "Which of those tried out for the position of striker ?",
            "sql": "select player.pname where tryout.ppos = value"
        },
        {
            "utterance": "Of those , who made the team ?",
            "sql": "select player.pname where tryout.decision = value and tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 31,
    "final": {
        "utterance": "In which state is the college that Charles attends?",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"
    },
    "interaction": [
        {
            "utterance": "What information is there on the player named Charles ?",
            "sql": "select player.* where player.pname = value"
        },
        {
            "utterance": "What college is he attending ?",
            "sql": "select college.cname where player.pname = value"
        },
        {
            "utterance": "What state is that college located in ?",
            "sql": "select college.state where player.pname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 32,
    "final": {
        "utterance": "What is the average and maximum number of hours students who made the team practiced?",
        "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "What are the player ids of all students who made the team ?",
            "sql": "select player.pid where tryout.decision = value"
        },
        {
            "utterance": "What is the maximum number of hours they spent practicing ?",
            "sql": "select max ( player.hs ) where tryout.decision = value"
        },
        {
            "utterance": "What was the average ?",
            "sql": "select avg ( player.hs ) , max ( player.hs ) where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the average number of hours spent practicing for students who got rejected?",
        "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'"
    },
    "interaction": [
        {
            "utterance": "Which players received a decision of no from tryouts ?",
            "sql": "select player.pname where tryout.decision = value"
        },
        {
            "utterance": "How many hours did they practice ?",
            "sql": "select player.pname , player.hs where tryout.decision = value"
        },
        {
            "utterance": "What was the average ?",
            "sql": "select avg ( player.hs ) where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 34,
    "final": {
        "utterance": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos"
    },
    "interaction": [
        {
            "utterance": "What information is there on students who spent more than 1000 hours training ?",
            "sql": "select player.* where player.hs > value"
        },
        {
            "utterance": "For each position , how many hours did each student spent training ?",
            "sql": "select player.hs , tryout.ppos group_by tryout.ppos"
        },
        {
            "utterance": "What was the maximum time spent for each position ?",
            "sql": "select max ( player.hs ) , tryout.ppos where player.hs > value group_by tryout.ppos"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 35,
    "final": {
        "utterance": "Which colleges does each player with a name that starts with the letter D  who tried out go to?",
        "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"
    },
    "interaction": [
        {
            "utterance": "What are the player ids of every player whose name starts with D ?",
            "sql": "select player.pid where player.pname like value"
        },
        {
            "utterance": "Of those , who tried out ?",
            "sql": "select tryout.pid where player.pname like value"
        },
        {
            "utterance": "What college did they go to ?",
            "sql": "select tryout.cname where player.pname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 36,
    "final": {
        "utterance": "What college has a student who successfully made the team in the role of a goalie?",
        "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'"
    },
    "interaction": [
        {
            "utterance": "What can you tell me about the students who made the team ?",
            "sql": "select tryout.* where tryout.decision = value"
        },
        {
            "utterance": "of those , who tried out for the position of goalie ?",
            "sql": "select tryout.* where tryout.decision = value and tryout.ppos = value"
        },
        {
            "utterance": "What college do they attend ?",
            "sql": "select tryout.cname where tryout.decision = value and tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the names of all tryout participants who are from the largest college?",
        "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1) S: What IS the largest college?"
    },
    "interaction": [
        {
            "utterance": "What are the names of players are from that college ?",
            "sql": "select player.pname where tryout.cname = ( select college.cname order_by college.enr desc limit_value )"
        },
        {
            "utterance": "Of those , who tried out for the team ?",
            "sql": "select player.pname where tryout.cname = ( select college.cname order_by college.enr desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 38,
    "final": {
        "utterance": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
        "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"
    },
    "interaction": [
        {
            "utterance": "What are the names of colleges that have students who made the team ?",
            "sql": "select college.cname where tryout.decision = value"
        },
        {
            "utterance": "How many students are enrolled in each of them ?",
            "sql": "select college.enr where tryout.decision = value"
        },
        {
            "utterance": "Also , what are the different states in which those colleges reside ?",
            "sql": "select distinct college.state , college.enr where tryout.decision = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
    },
    "interaction": [
        {
            "utterance": "What are the names of colleges with less than 13,000 students ?",
            "sql": "select college.cname where college.enr < value"
        },
        {
            "utterance": "Which of those are in AZ ?",
            "sql": "select college.cname where college.enr < value and college.state = value"
        },
        {
            "utterance": "Combine that with colleges in LA that have more than 15,000 students ?",
            "sql": "select college.cname where college.enr < value and college.state = value union select college.cname where college.enr > value and college.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 40,
    "final": {
        "utterance": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
        "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'"
    },
    "interaction": [
        {
            "utterance": "What are the names of colleges that have students who tried out for the goalie ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "Of those , which also have students who tried out for the position of mid-field ?",
            "sql": "select tryout.cname where tryout.ppos = value intersect select tryout.cname where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'"
    },
    "interaction": [
        {
            "utterance": "What are the names of colleges that have students who tried out for the goalie ?",
            "sql": "select college.cname where tryout.ppos = value"
        },
        {
            "utterance": "What states are they located in ?",
            "sql": "select college.state where tryout.ppos = value"
        },
        {
            "utterance": "Of those states , which also have colleges where students tried out for mid-field ?",
            "sql": "select college.state where tryout.ppos = value intersect select college.state where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 42,
    "final": {
        "utterance": "How many schools have students playing in goalie and mid-field positions?",
        "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')"
    },
    "interaction": [
        {
            "utterance": "What are the names of colleges where students tried for the goalie position ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "Of those , which also had students that tried out for the mid position ?",
            "sql": "select tryout.cname where tryout.ppos = value intersect select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( tryout.* ) ( select tryout.cname where tryout.ppos = value intersect select tryout.cname where tryout.ppos = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the names of the schools with some players in the mid position but no goalies?",
        "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'"
    },
    "interaction": [
        {
            "utterance": "What schools have players that tried out for goalies ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "What schools have players that tried out for the mid position ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "What are the names of schools that fit into the latter category but not the former ?",
            "sql": "select tryout.cname where tryout.ppos = value except select tryout.cname where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 44,
    "final": {
        "utterance": "What are the names of all the states with college students playing in the mid position but no goalies?",
        "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'"
    },
    "interaction": [
        {
            "utterance": "What schools have players that tried out for goalies ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "What schools have players that tried out for the mid position ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "In which states are the schools that fit into the latter category but not the former ?",
            "sql": "select college.state where tryout.ppos = value except select college.state where tryout.ppos = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 45,
    "final": {
        "utterance": "What is the count of states with college students playing in the mid position but not as goalies?",
        "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')"
    },
    "interaction": [
        {
            "utterance": "What schools have players that tried out for the mid position but not as goalies ?",
            "sql": "select tryout.cname where tryout.ppos = value except select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "In which states do those schools reside ?",
            "sql": "select college.state where tryout.ppos = value except select college.state where tryout.ppos = value"
        },
        {
            "utterance": "How many of them exist ?",
            "sql": "select count ( * ) ( select college.state where tryout.ppos = value except select college.state where tryout.ppos = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 46,
    "final": {
        "utterance": "What are the names of all colleges with a larger enrollment than the largest college in Florida?",
        "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')"
    },
    "interaction": [
        {
            "utterance": "What information is there on colleges in Florida ?",
            "sql": "select college.* where college.state = value"
        },
        {
            "utterance": "What is their maximum enrollment size ?",
            "sql": "select max ( college.enr ) where college.state = value"
        },
        {
            "utterance": "What is the name of every college that is larger than that ?",
            "sql": "select college.cname where college.enr > ( select max ( college.enr ) where college.state = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 47,
    "final": {
        "utterance": "What is the total number of students enrolled in schools without any goalies?",
        "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
    },
    "interaction": [
        {
            "utterance": "What are the names of all colleges with students who tried out for the position of goalie ?",
            "sql": "select tryout.cname where tryout.ppos = value"
        },
        {
            "utterance": "What is the number of people enrolled in all the other colleges ?",
            "sql": "select college.cname , college.enr where college.cname not in ( select tryout.cname where tryout.ppos = value )"
        },
        {
            "utterance": "How many is that in total ?",
            "sql": "select sum ( college.enr ) where college.cname not in ( select tryout.cname where tryout.ppos = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 48,
    "final": {
        "utterance": "How many states have a college with more students than average?",
        "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)"
    },
    "interaction": [
        {
            "utterance": "What is the average number of students enrolled per college ?",
            "sql": "select avg ( college.enr )"
        },
        {
            "utterance": "What are the states that have larger colleges than that ?",
            "sql": "select distinct college.state where college.enr > ( select avg ( college.enr ) )"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( distinct college.state ) where college.enr > ( select avg ( college.enr ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_2",
    "interaction_id": 49,
    "final": {
        "utterance": "How many states have smaller colleges than average?",
        "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)"
    },
    "interaction": [
        {
            "utterance": "What is the average number of students per college ?",
            "sql": "select avg ( college.enr )"
        },
        {
            "utterance": "What states have colleges that are smaller than that ?",
            "sql": "select distinct college.state where college.enr < ( select avg ( college.enr ) )"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( distinct college.state ) where college.enr < ( select avg ( college.enr ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of project that continues for the longest time.",
        "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the name and hours for each project .",
            "sql": "select projects.name , projects.hours"
        },
        {
            "utterance": "how many projects are there ?",
            "sql": "select count ( projects.* )"
        },
        {
            "utterance": "what is the average number of hours spent on each project ?",
            "sql": "select avg ( projects.hours )"
        },
        {
            "utterance": "Find the name of project with the longest duration .",
            "sql": "select projects.name order_by projects.hours desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "what is average duration of all projects ?",
            "sql": "select avg ( projects.hours )"
        },
        {
            "utterance": "what about the maximum and minimum duration ?",
            "sql": "select max ( projects.hours ) , min ( projects.hours )"
        },
        {
            "utterance": "how many projects have operated longer than the average duration ?",
            "sql": "select count ( projects.* ) where projects.hours > ( select avg ( projects.hours ) )"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select projects.name where projects.hours > ( select avg ( projects.hours ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and hours of project that has the most number of scientists.",
        "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the names of all projects .",
            "sql": "select projects.name"
        },
        {
            "utterance": "how many scientists were assigned to each of them ?",
            "sql": "select projects.name , count ( * ) group_by assignedto.project"
        },
        {
            "utterance": "which one has the most scientists ?",
            "sql": "select projects.name group_by assignedto.project order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "show how much time has already been spent on it as well .",
            "sql": "select projects.name , projects.hours group_by assignedto.project order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'"
    },
    "interaction": [
        {
            "utterance": "show info of all scientists .",
            "sql": "select scientists.*"
        },
        {
            "utterance": "find those scientists whose name contains \u2018Smith\u2019 .",
            "sql": "select scientists.* where scientists.name like value"
        },
        {
            "utterance": "Find the names of the projects that they are assigned to .",
            "sql": "select projects.name where scientists.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
        "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'"
    },
    "interaction": [
        {
            "utterance": "show the names of all scientists .",
            "sql": "select scientists.name"
        },
        {
            "utterance": "find the ssn of scientists named Michael Rogers and Carol Smith .",
            "sql": "select scientists.ssn where scientists.name = value or scientists.name = value"
        },
        {
            "utterance": "what are the names of projects that they are assigned to ?",
            "sql": "select projects.name where scientists.name = value or scientists.name = value"
        },
        {
            "utterance": "how many hours in total have been spent on these projects ?",
            "sql": "select sum ( projects.hours ) where scientists.name = value or scientists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the scientist who worked on both a project named 'A Matter of Time' and a project named 'A Puzzling Parallax'.",
        "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'"
    },
    "interaction": [
        {
            "utterance": "what is the number of hours spent on the project named 'Matter of Time\u2019 ?",
            "sql": "select projects.hours where projects.name = value"
        },
        {
            "utterance": "Find the names of the scientists who worked on this project .",
            "sql": "select scientists.name where projects.name = value"
        },
        {
            "utterance": "which of those scientists were also involved in the project named 'A Puzzling Parallax ' ?",
            "sql": "select scientists.name where projects.name = value intersect select scientists.name where projects.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the number of scientists involved for each project name.",
        "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "how many scientists are in the table ?",
            "sql": "select count ( scientists.* )"
        },
        {
            "utterance": "how many projects are there\uff1f",
            "sql": "select count ( projects.* )"
        },
        {
            "utterance": "list all of the project names .",
            "sql": "select projects.name"
        },
        {
            "utterance": "Find the number of scientists involved in each of them .",
            "sql": "select count ( * ) , projects.name group_by projects.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "how many scientists are in the table ?",
            "sql": "select count ( scientists.* )"
        },
        {
            "utterance": "how many of them are assigned to a project ?",
            "sql": "select count ( distinct assignedto.scientist )"
        },
        {
            "utterance": "among them , how many are involved for the projects that require less than 1000 hours . List project names .",
            "sql": "select count ( * ) , projects.name where projects.hours < value group_by projects.name"
        },
        {
            "utterance": "how about for the projects that require more than 300 hours ?",
            "sql": "select count ( * ) , projects.name where projects.hours > value group_by projects.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of projects which each scientist is working on and scientist's name.",
        "sql": "SELECT count(*),  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "find the names of scientists who are assigned to any projects .",
            "sql": "select scientists.name"
        },
        {
            "utterance": "Find the number of projects each of those scientists is working on .",
            "sql": "select count ( * ) , scientists.name group_by scientists.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
        "sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "find the hours spent on the project that has continued for the longest time .",
            "sql": "select max ( projects.hours )"
        },
        {
            "utterance": "what is the name of this project ?",
            "sql": "select projects.name order_by projects.hours desc limit_value"
        },
        {
            "utterance": "Find the SSN and name of scientists who are assigned to it .",
            "sql": "select scientists.ssn , scientists.name where projects.hours = ( select max ( projects.hours ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Select the project names which are not assigned yet.",
        "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"
    },
    "interaction": [
        {
            "utterance": "how many projects are there ?",
            "sql": "select count ( projects.* )"
        },
        {
            "utterance": "among them , how many are not assigned yet ?",
            "sql": "select count ( projects.* ) where projects.code not in ( select assignedto.project )"
        },
        {
            "utterance": "what are the names of these projects ?",
            "sql": "select projects.name where projects.code not in ( select assignedto.project )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of scientists who are not assigned to any project.",
        "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
    },
    "interaction": [
        {
            "utterance": "list the name of all scientists .",
            "sql": "select scientists.name"
        },
        {
            "utterance": "which of them are assigned to any project ? List their names",
            "sql": "select scientists.name where scientists.ssn in ( select assignedto.scientist )"
        },
        {
            "utterance": "how many of those scientists are there ?",
            "sql": "select count ( scientists.* ) where scientists.ssn in ( select assignedto.scientist )"
        },
        {
            "utterance": "Find the names of those who are not assigned to a project yet .",
            "sql": "select scientists.name where scientists.ssn not in ( select assignedto.scientist )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the number of scientists who are not assigned to any project.",
        "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
    },
    "interaction": [
        {
            "utterance": "find the names of scientists who are assigned to any project .",
            "sql": "select scientists.name where scientists.ssn in ( select assignedto.scientist )"
        },
        {
            "utterance": "how about those who are not involved in any project ?",
            "sql": "select scientists.name where scientists.ssn not in ( select assignedto.scientist )"
        },
        {
            "utterance": "count the number of those scientists .",
            "sql": "select count ( scientists.* ) where scientists.ssn not in ( select assignedto.scientist )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the names of scientists who are not working on the project with the highest hours.",
        "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
    },
    "interaction": [
        {
            "utterance": "find the name of the project that has taken the most time .",
            "sql": "select projects.name order_by projects.hours desc limit_value"
        },
        {
            "utterance": "how may hours have been spent on it ?",
            "sql": "select projects.hours order_by projects.hours desc limit_value"
        },
        {
            "utterance": "how many scientists are working on the project ?",
            "sql": "select count ( projects.* ) where projects.hours = ( select max ( projects.hours ) )"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select scientists.name where projects.hours = ( select max ( projects.hours ) )"
        },
        {
            "utterance": "how about those who are not involved in it ? List their names .",
            "sql": "select scientists.name except select scientists.name where projects.hours = ( select max ( projects.hours ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "scientist_1",
    "interaction_id": 14,
    "final": {
        "utterance": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name,  T1.Name"
    },
    "interaction": [
        {
            "utterance": "List all the scientists ' names and their projects ' names",
            "sql": "select scientists.name , projects.name"
        },
        {
            "utterance": "show the hours worked by them on each project .",
            "sql": "select scientists.name , projects.name , projects.hours"
        },
        {
            "utterance": "list the results in alphabetical order of project name , and then scientist name .",
            "sql": "select scientists.name , projects.name , projects.hours order_by projects.name , scientists.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 0,
    "final": {
        "utterance": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""
    },
    "interaction": [
        {
            "utterance": "What categories of products are there ?",
            "sql": "select products.product_category_code"
        },
        {
            "utterance": "Show their typical buying and selling price as well .",
            "sql": "select products.product_category_code , products.typical_buying_price , products.typical_selling_price"
        },
        {
            "utterance": "Show only for products with category `` Herbs '' .",
            "sql": "select products.product_category_code , products.typical_buying_price , products.typical_selling_price where products.product_category_code = value"
        },
        {
            "utterance": "Of these , just give the name and product description .",
            "sql": "select products.product_name , products.product_description where products.product_category_code = value"
        },
        {
            "utterance": "Give the color descriptions as well .",
            "sql": "select products.product_name , ref_colors.color_description , products.product_description where products.product_category_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_selling_price  >  1000"
    },
    "interaction": [
        {
            "utterance": "Which products have category `` Herbs ''",
            "sql": "select products.* where products.product_category_code = value"
        },
        {
            "utterance": "How about category `` Spices '' instead",
            "sql": "select products.* where products.product_category_code = value"
        },
        {
            "utterance": "How many are these ?",
            "sql": "select count ( products.* ) where products.product_category_code = value"
        },
        {
            "utterance": "Restrict the count of those to the ones typically bought below 100 .",
            "sql": "select count ( products.* ) where products.product_category_code = value and products.typical_buying_price < value"
        },
        {
            "utterance": "Restrict to the ones typically sold above 1000 instead .",
            "sql": "select count ( products.* ) where products.product_category_code = value and products.typical_selling_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name of the product with the color description 'yellow'?",
        "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'"
    },
    "interaction": [
        {
            "utterance": "What are the product descriptions ?",
            "sql": "select products.product_description"
        },
        {
            "utterance": "What are the names of products with product description `` eius ''",
            "sql": "select products.product_name where products.product_description = value"
        },
        {
            "utterance": "How about those with color description `` yellow ''",
            "sql": "select products.product_name where ref_colors.color_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the category descriptions of the products whose descriptions include letter 't'.",
        "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'"
    },
    "interaction": [
        {
            "utterance": "Which color descriptions contain the letter 't ' ?",
            "sql": "select ref_colors.color_description where ref_colors.color_description like value"
        },
        {
            "utterance": "Give for product descriptions instead ?",
            "sql": "select products.product_description where products.product_description like value"
        },
        {
            "utterance": "What are the units of measure for these products ?",
            "sql": "select ref_product_categories.unit_of_measure where products.product_description like value"
        },
        {
            "utterance": "Give their category descriptions instead .",
            "sql": "select ref_product_categories.product_category_description where products.product_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the color description of the product with name \"catnip\"?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""
    },
    "interaction": [
        {
            "utterance": "What are the typical buying prices of the products ?",
            "sql": "select products.typical_buying_price"
        },
        {
            "utterance": "Give this for the product with name `` cumin ''",
            "sql": "select products.typical_buying_price where products.product_name = value"
        },
        {
            "utterance": "How about for the name `` catnip '' instead ?",
            "sql": "select products.typical_buying_price where products.product_name = value"
        },
        {
            "utterance": "Give the color description instead .",
            "sql": "select ref_colors.color_description where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the color code and description of the product named \"chervil\"?",
        "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "What are the product descriptions ?",
            "sql": "select products.product_description"
        },
        {
            "utterance": "For the one with the name `` chervil '' ?",
            "sql": "select products.product_description where products.product_name = value"
        },
        {
            "utterance": "Give the color description instead .",
            "sql": "select ref_colors.color_description where products.product_name = value"
        },
        {
            "utterance": "Show the color code as well .",
            "sql": "select products.color_code , ref_colors.color_description where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the id and color description of the products with at least 2 characteristics.",
        "sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the product characteristic ?",
            "sql": "select product_characteristics.*"
        },
        {
            "utterance": "What are the names of the products that have only one product characteristic ?",
            "sql": "select products.product_name group_by products.product_id having count ( * ) = value"
        },
        {
            "utterance": "Give their color descriptions and their product id instead .",
            "sql": "select products.product_id , ref_colors.color_description group_by products.product_id having count ( * ) = value"
        },
        {
            "utterance": "How about for those that have least 2 product characteristics .",
            "sql": "select products.product_id , ref_colors.color_description group_by products.product_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 7,
    "final": {
        "utterance": "List all the product names with the color description \"white\".",
        "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\""
    },
    "interaction": [
        {
            "utterance": "What are the color descriptions ?",
            "sql": "select ref_colors.color_description"
        },
        {
            "utterance": "Show the corresponding product names .",
            "sql": "select products.product_name , ref_colors.color_description"
        },
        {
            "utterance": "Filter for only the ones with color `` black ''",
            "sql": "select products.product_name , ref_colors.color_description where ref_colors.color_description = value"
        },
        {
            "utterance": "Now for color `` white '' instead .",
            "sql": "select products.product_name , ref_colors.color_description where ref_colors.color_description = value"
        },
        {
            "utterance": "Show only the product names instead .",
            "sql": "select products.product_name where ref_colors.color_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""
    },
    "interaction": [
        {
            "utterance": "What are the names of products and their corresponding colors ?",
            "sql": "select products.product_name , ref_colors.color_description"
        },
        {
            "utterance": "Filter to show only the ones with `` green '' color .",
            "sql": "select products.product_name , ref_colors.color_description where ref_colors.color_description = value"
        },
        {
            "utterance": "Show the ones that have `` yellow '' color instead .",
            "sql": "select products.product_name , ref_colors.color_description where ref_colors.color_description = value"
        },
        {
            "utterance": "Instead of showing the color description , show their typical buying and selling prices .",
            "sql": "select products.product_name , products.typical_buying_price , products.typical_selling_price where ref_colors.color_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 9,
    "final": {
        "utterance": "How many characteristics does the product named \"sesame\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "What is the selling price of the product named `` sesame '' ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        },
        {
            "utterance": "What is its color ?",
            "sql": "select ref_colors.color_description where products.product_name = value"
        },
        {
            "utterance": "What are its product characteristic values ?",
            "sql": "select product_characteristics.product_characteristic_value where products.product_name = value"
        },
        {
            "utterance": "Count how many there are .",
            "sql": "select count ( * ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 10,
    "final": {
        "utterance": "How many distinct characteristic names does the product \"cumin\" have?",
        "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\""
    },
    "interaction": [
        {
            "utterance": "What is the buying price of the product named `` cumin '' ?",
            "sql": "select products.typical_buying_price where products.product_name = value"
        },
        {
            "utterance": "What are its product characteristic values ?",
            "sql": "select product_characteristics.product_characteristic_value where products.product_name = value"
        },
        {
            "utterance": "Show its characteristic names .",
            "sql": "select characteristics.characteristic_name where products.product_name = value"
        },
        {
            "utterance": "Count how many distinct ones there are .",
            "sql": "select count ( distinct characteristics.characteristic_name ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 11,
    "final": {
        "utterance": "What are all the characteristic names of product \"sesame\"?",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""
    },
    "interaction": [
        {
            "utterance": "What is the product category code for the product named `` ginger '' ?",
            "sql": "select products.product_category_code where products.product_name = value"
        },
        {
            "utterance": "Show the product characteristic value instead .",
            "sql": "select product_characteristics.product_characteristic_value where products.product_name = value"
        },
        {
            "utterance": "How about the one with product named `` sesame ''",
            "sql": "select product_characteristics.product_characteristic_value where products.product_name = value"
        },
        {
            "utterance": "Give its characteristic names .",
            "sql": "select characteristics.characteristic_name where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 12,
    "final": {
        "utterance": "List all the characteristic names and data types of product \"cumin\".",
        "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\""
    },
    "interaction": [
        {
            "utterance": "What is the product description of the product named `` catnip '' ?",
            "sql": "select products.product_description where products.product_name = value"
        },
        {
            "utterance": "Show the product characteristic value instead .",
            "sql": "select product_characteristics.product_characteristic_value where products.product_name = value"
        },
        {
            "utterance": "Now show its characteristic data type .",
            "sql": "select characteristics.characteristic_data_type where products.product_name = value"
        },
        {
            "utterance": "Show this for the product name `` cumin '' instead .",
            "sql": "select characteristics.characteristic_data_type where products.product_name = value"
        },
        {
            "utterance": "Give the characteristic name as well .",
            "sql": "select characteristics.characteristic_name , characteristics.characteristic_data_type where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 13,
    "final": {
        "utterance": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""
    },
    "interaction": [
        {
            "utterance": "What are the selling prices of the products ?",
            "sql": "select products.typical_selling_price"
        },
        {
            "utterance": "What about for those that have product characteristic value `` high '' ?",
            "sql": "select products.typical_selling_price where product_characteristics.product_characteristic_value = value"
        },
        {
            "utterance": "What about for those that have characteristic type code `` Grade '' ?",
            "sql": "select products.typical_selling_price where characteristics.characteristic_type_code = value"
        },
        {
            "utterance": "Of those , filter down to those that are product name `` sesame '' as well .",
            "sql": "select products.typical_selling_price where products.product_name = value and characteristics.characteristic_type_code = value"
        },
        {
            "utterance": "Give the characteristic names instead .",
            "sql": "select characteristics.characteristic_name where products.product_name = value and characteristics.characteristic_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 14,
    "final": {
        "utterance": "How many characteristics does the product named \"laurel\" have?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
    },
    "interaction": [
        {
            "utterance": "What are the product characteristic values of the product named `` laurel '' ?",
            "sql": "select product_characteristics.product_characteristic_value where products.product_name = value"
        },
        {
            "utterance": "Give the characteristic name instead .",
            "sql": "select characteristics.characteristic_name where products.product_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the number of characteristics that the product \"flax\" has.",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""
    },
    "interaction": [
        {
            "utterance": "What is the typical selling price of the product `` catnip '' ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        },
        {
            "utterance": "What about the product `` flax '' ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        },
        {
            "utterance": "What are its characteristics ?",
            "sql": "select characteristics.characteristic_name where products.product_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\""
    },
    "interaction": [
        {
            "utterance": "What is the name of products with selling price > 1000",
            "sql": "select products.product_name where products.typical_selling_price > value"
        },
        {
            "utterance": "What about for products with characteristic name `` slow ''",
            "sql": "select products.product_name where characteristics.characteristic_name = value"
        },
        {
            "utterance": "For characteristic name `` fast '' instead ?",
            "sql": "select products.product_name where characteristics.characteristic_name = value"
        },
        {
            "utterance": "Show the ones that also have color description red .",
            "sql": "select products.product_name where ref_colors.color_description = value and characteristics.characteristic_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 17,
    "final": {
        "utterance": "How many products have the characteristic named \"hot\"?",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the products with color `` red '' ?",
            "sql": "select products.product_name where ref_colors.color_description = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where ref_colors.color_description = value"
        },
        {
            "utterance": "What about for those with characteristic named `` hot '' instead ?",
            "sql": "select count ( * ) where characteristics.characteristic_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 18,
    "final": {
        "utterance": "List the all the distinct names of the products with the characteristic name 'warm'.",
        "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the products that have buying price < 100",
            "sql": "select products.product_name where products.typical_buying_price < value"
        },
        {
            "utterance": "Show their distinct names .",
            "sql": "select distinct products.product_name where products.typical_buying_price < value"
        },
        {
            "utterance": "What about for those with color `` black '' ?",
            "sql": "select distinct products.product_name where ref_colors.color_description = value"
        },
        {
            "utterance": "For the characteristic name `` warm '' instead ?",
            "sql": "select distinct products.product_name where characteristics.characteristic_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\""
    },
    "interaction": [
        {
            "utterance": "What are the buying prices of the products with selling price < 500 ?",
            "sql": "select products.typical_buying_price where products.typical_selling_price < value"
        },
        {
            "utterance": "Show their names instead .",
            "sql": "select products.product_name where products.typical_selling_price < value"
        },
        {
            "utterance": "Of those , narrow down to ones with color `` red '' as well .",
            "sql": "select products.product_name where products.typical_selling_price < value and ref_colors.color_description = value"
        },
        {
            "utterance": "Remove the restriction of selling price .",
            "sql": "select products.product_name where ref_colors.color_description = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where ref_colors.color_description = value"
        },
        {
            "utterance": "Restrict also to those with characteristic named `` slow '' as well .",
            "sql": "select count ( * ) where ref_colors.color_description = value and characteristics.characteristic_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 20,
    "final": {
        "utterance": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\""
    },
    "interaction": [
        {
            "utterance": "Show the names of products that have buying price > 100",
            "sql": "select products.product_name where products.typical_buying_price > value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( products.* ) where products.typical_buying_price > value"
        },
        {
            "utterance": "What about for those with color description `` red '' ?",
            "sql": "select count ( * ) where ref_colors.color_description = value"
        },
        {
            "utterance": "Show the ones with color description `` white '' instead .",
            "sql": "select count ( * ) where ref_colors.color_description = value"
        },
        {
            "utterance": "They can also be having the characteristic name `` hot '' .",
            "sql": "select count ( * ) where ref_colors.color_description = value or characteristics.characteristic_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the unit of measurement of product named \"cumin\"?",
        "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\""
    },
    "interaction": [
        {
            "utterance": "What is the typical selling price of the product named `` catnip '' ?",
            "sql": "select products.typical_selling_price where products.product_name = value"
        },
        {
            "utterance": "Show its color description instead .",
            "sql": "select ref_colors.color_description where products.product_name = value"
        },
        {
            "utterance": "Give its unit of measurement instead .",
            "sql": "select ref_product_categories.unit_of_measure where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the unit of measurement and product category code of product named \"chervil\".",
        "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""
    },
    "interaction": [
        {
            "utterance": "What is the color of the product named `` ginger '' ?",
            "sql": "select ref_colors.color_description where products.product_name = value"
        },
        {
            "utterance": "Show its unit of measurement instead .",
            "sql": "select ref_product_categories.unit_of_measure where products.product_name = value"
        },
        {
            "utterance": "Give the product category code as well .",
            "sql": "select ref_product_categories.unit_of_measure , ref_product_categories.product_category_code where products.product_name = value"
        },
        {
            "utterance": "Do this for the product named `` chervil '' instead .",
            "sql": "select ref_product_categories.unit_of_measure , ref_product_categories.product_category_code where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""
    },
    "interaction": [
        {
            "utterance": "What are the product names that are not product category code `` Herbs '' ?",
            "sql": "select products.product_name where products.product_category_code != value"
        },
        {
            "utterance": "Show the same , but for those with unit of measurement `` Handful '' instead .",
            "sql": "select products.product_name where ref_product_categories.unit_of_measure = value"
        },
        {
            "utterance": "What about the opposite condition ?",
            "sql": "select products.product_name where ref_product_categories.unit_of_measure != value"
        },
        {
            "utterance": "Of these , show for the ones that are colored `` white '' too .",
            "sql": "select products.product_name where ref_colors.color_description = value and ref_product_categories.unit_of_measure != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the description of the color for most products?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the product names in decreasing order of typical selling price ?",
            "sql": "select products.product_name order_by products.typical_selling_price desc"
        },
        {
            "utterance": "Order by decreasing order of color frequency instead .",
            "sql": "select products.product_name group_by ref_colors.color_description order_by count ( * ) desc"
        },
        {
            "utterance": "Show their respective color descriptions .",
            "sql": "select ref_colors.color_description group_by ref_colors.color_description order_by count ( * ) desc"
        },
        {
            "utterance": "Show only for the most frequent color description .",
            "sql": "select ref_colors.color_description group_by ref_colors.color_description order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the description of the color used by least products?",
        "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most frequent product category code of the products ?",
            "sql": "select products.product_category_code group_by products.product_category_code order_by count ( products.* ) desc limit_value"
        },
        {
            "utterance": "What about the color description instead ?",
            "sql": "select ref_colors.color_description group_by ref_colors.color_description order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Give the least frequent now .",
            "sql": "select ref_colors.color_description group_by ref_colors.color_description order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the characteristic name used by most number of the products?",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the product category codes used of the products ?",
            "sql": "select products.product_category_code"
        },
        {
            "utterance": "What is the ones used most frequently ?",
            "sql": "select products.product_category_code group_by products.product_category_code order_by count ( products.* ) desc limit_value"
        },
        {
            "utterance": "What about for the characteristic name instead ?",
            "sql": "select characteristics.characteristic_name group_by characteristics.characteristic_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the names, details and data types of the characteristics which are never used by any product?",
        "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id"
    },
    "interaction": [
        {
            "utterance": "What are the names , details and data types of the characteristics ?",
            "sql": "select characteristics.characteristic_name , characteristics.other_characteristic_details , characteristics.characteristic_data_type"
        },
        {
            "utterance": "Show these for the ones used in products .",
            "sql": "select characteristics.characteristic_name , characteristics.other_characteristic_details , characteristics.characteristic_data_type"
        },
        {
            "utterance": "Show the ones that are not used .",
            "sql": "select characteristics.characteristic_name , characteristics.other_characteristic_details , characteristics.characteristic_data_type except select characteristics.characteristic_name , characteristics.other_characteristic_details , characteristics.characteristic_data_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_gen_characteristics",
    "interaction_id": 28,
    "final": {
        "utterance": "What are characteristic names used at least twice across all products?",
        "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2"
    },
    "interaction": [
        {
            "utterance": "What are the color descriptions ?",
            "sql": "select ref_colors.color_description"
        },
        {
            "utterance": "Which ones are used only once across all the products ?",
            "sql": "select ref_colors.color_description group_by ref_colors.color_description having count ( * ) = value"
        },
        {
            "utterance": "How about for the characteristic names ?",
            "sql": "select characteristics.characteristic_name group_by characteristics.characteristic_name having count ( * ) = value"
        },
        {
            "utterance": "Show the ones that are used at least twice .",
            "sql": "select characteristics.characteristic_name group_by characteristics.characteristic_name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the owner of the channel that has the highest rating ratio?",
        "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all channel names .",
            "sql": "select channel.name"
        },
        {
            "utterance": "Order them by rating ratio from highest to lowest .",
            "sql": "select channel.name order_by channel.rating_in_percent desc"
        },
        {
            "utterance": "Which one has the highest rating ?",
            "sql": "select channel.name order_by channel.rating_in_percent desc limit_value"
        },
        {
            "utterance": "Who is the owner ?",
            "sql": "select channel.owner order_by channel.rating_in_percent desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 1,
    "final": {
        "utterance": "find the name of the program that was launched most recently.",
        "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the program names ?",
            "sql": "select program.name"
        },
        {
            "utterance": "Order by launch date from most recent to least recent .",
            "sql": "select program.name order_by program.launch desc"
        },
        {
            "utterance": "Which one was launched most recently ?",
            "sql": "select program.name order_by program.launch desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of the channels that are broadcast in the morning.",
        "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"
    },
    "interaction": [
        {
            "utterance": "List all channel names .",
            "sql": "select channel.name"
        },
        {
            "utterance": "When are they broadcasted ?",
            "sql": "select channel.name , broadcast.time_of_day"
        },
        {
            "utterance": "Which ones are broadcasted in the morning ?",
            "sql": "select channel.name where broadcast.time_of_day = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 3,
    "final": {
        "utterance": "what are the names of the channels that broadcast in both morning and night?",
        "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'"
    },
    "interaction": [
        {
            "utterance": "Please list the names of all channels .",
            "sql": "select channel.name"
        },
        {
            "utterance": "Include the time of day that they are broadcasted .",
            "sql": "select channel.name , broadcast.time_of_day"
        },
        {
            "utterance": "Which ones broadcast in the morning ?",
            "sql": "select channel.name where broadcast.time_of_day = value"
        },
        {
            "utterance": "Out of those channels , which ones also broadcast at night ?",
            "sql": "select channel.name where broadcast.time_of_day = value intersect select channel.name where broadcast.time_of_day = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the names of programs that are never broadcasted in the morning.",
        "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all programs ?",
            "sql": "select program.name"
        },
        {
            "utterance": "When are they broadcasted ?",
            "sql": "select program.name , broadcast.time_of_day"
        },
        {
            "utterance": "Which ones are broadcasted in the morning ?",
            "sql": "select program.name , broadcast.time_of_day where broadcast.time_of_day = value"
        },
        {
            "utterance": "What about the ones that are not broadcasted in the morning ?",
            "sql": "select program.name except select program.name where broadcast.time_of_day = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 5,
    "final": {
        "utterance": "find the program owners that have some programs in both morning and night time.",
        "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\""
    },
    "interaction": [
        {
            "utterance": "List the names of all programs .",
            "sql": "select program.name"
        },
        {
            "utterance": "Include their broadcast times .",
            "sql": "select program.name , broadcast.time_of_day"
        },
        {
            "utterance": "Which ones are broadcasted in both morning and night ?",
            "sql": "select program.name where broadcast.time_of_day = value intersect select program.name where broadcast.time_of_day = value"
        },
        {
            "utterance": "Who are the owners of these programs ?",
            "sql": "select program.owner where broadcast.time_of_day = value intersect select program.owner where broadcast.time_of_day = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "program_share",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of the channels owned by CCTV or HBS?",
        "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'"
    },
    "interaction": [
        {
            "utterance": "List the names of all channels .",
            "sql": "select channel.name"
        },
        {
            "utterance": "Which channels are owned by CCTV ?",
            "sql": "select channel.name where channel.owner = value"
        },
        {
            "utterance": "Include those owned by HBS .",
            "sql": "select channel.name where channel.owner = value or channel.owner = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the event that happened in the most recent year?",
        "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many events are there in the record ?",
            "sql": "select count ( event.* )"
        },
        {
            "utterance": "Show me their names .",
            "sql": "select event.name"
        },
        {
            "utterance": "Which ones happened in the most recent year ?",
            "sql": "select event.name order_by event.year desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the stadium that has the maximum capacity.",
        "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there in the system ?",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select stadium.name"
        },
        {
            "utterance": "Show me the one with maximum capacity .",
            "sql": "select stadium.name order_by stadium.capacity desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there in the system ?",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select stadium.name"
        },
        {
            "utterance": "Give me their capacities .",
            "sql": "select stadium.name , stadium.capacity"
        },
        {
            "utterance": "What is the average capacity ?",
            "sql": "select avg ( stadium.capacity )"
        },
        {
            "utterance": "Show me the stadiums whose capacity is smaller than that .",
            "sql": "select stadium.name where stadium.capacity < ( select avg ( stadium.capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the country that has the most stadiums.",
        "sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there in file ?",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "What about in terms of different countries ?",
            "sql": "select stadium.country , count ( stadium.* ) group_by stadium.country"
        },
        {
            "utterance": "Show me the country with the most of them .",
            "sql": "select stadium.country group_by stadium.country order_by count ( stadium.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 4,
    "final": {
        "utterance": "Which country has at most 3 stadiums listed?",
        "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there in file ?",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "What about in terms of different countries ?",
            "sql": "select stadium.country , count ( stadium.* ) group_by stadium.country"
        },
        {
            "utterance": "Show me the countries with at most three .",
            "sql": "select stadium.country group_by stadium.country having count ( stadium.* ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 5,
    "final": {
        "utterance": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there in file ?",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "What about in terms of different countries ?",
            "sql": "select stadium.country , count ( stadium.* ) group_by stadium.country"
        },
        {
            "utterance": "Show me the countries that have stadiums with capacity greater than 60000 .",
            "sql": "select stadium.country where stadium.capacity > value"
        },
        {
            "utterance": "Among them , which ones also have stadiums with capacity less than 50000 .",
            "sql": "select stadium.country where stadium.capacity > value intersect select stadium.country where stadium.capacity < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 6,
    "final": {
        "utterance": "Which countries do not have a stadium that was opened after 2006?",
        "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all stadiums .",
            "sql": "select stadium.name"
        },
        {
            "utterance": "What about their opening years ?",
            "sql": "select stadium.name , stadium.opening_year"
        },
        {
            "utterance": "Only list those opened after 2006 .",
            "sql": "select stadium.name , stadium.opening_year where stadium.opening_year > value"
        },
        {
            "utterance": "Show me the countries which has any of those stadiums .",
            "sql": "select stadium.country where stadium.opening_year > value"
        },
        {
            "utterance": "What about the countries in file that are not among them .",
            "sql": "select stadium.country except select stadium.country where stadium.opening_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 7,
    "final": {
        "utterance": "List countries that have more than one swimmer.",
        "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many swimmers are there in record ?",
            "sql": "select count ( swimmer.* )"
        },
        {
            "utterance": "What about in terms of nationality ?",
            "sql": "select swimmer.nationality , count ( swimmer.* ) group_by swimmer.nationality"
        },
        {
            "utterance": "Show me the countries with more than one .",
            "sql": "select swimmer.nationality , count ( swimmer.* ) group_by swimmer.nationality having count ( swimmer.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the names of swimmers who has a result of \"win\".",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'"
    },
    "interaction": [
        {
            "utterance": "How many swimming records are there ?",
            "sql": "select count ( record.* )"
        },
        {
            "utterance": "How many of them have a result of win ?",
            "sql": "select count ( record.* ) where record.result = value"
        },
        {
            "utterance": "Show me the swimmer ids in those records .",
            "sql": "select record.swimmer_id where record.result = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select swimmer.name where record.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the name of the stadium which held the most events?",
        "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( event.* )"
        },
        {
            "utterance": "What about in terms of stadiums ?",
            "sql": "select event.stadium_id , count ( event.* ) group_by event.stadium_id"
        },
        {
            "utterance": "Give me the name of the one that held the most of them .",
            "sql": "select stadium.name group_by event.stadium_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "sql": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( event.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select event.name"
        },
        {
            "utterance": "Show me the name of the stadium that held World Junior event .",
            "sql": "select stadium.name , stadium.capacity where event.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of stadiums which have never had any event.",
        "sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( event.* )"
        },
        {
            "utterance": "Give me the id of stadiums that have held any of them .",
            "sql": "select event.stadium_id"
        },
        {
            "utterance": "What about the stadium ids in file that are not among those ?",
            "sql": "select stadium.id where stadium.id not in ( select event.stadium_id )"
        },
        {
            "utterance": "Show me their names .",
            "sql": "select stadium.name where stadium.id not in ( select event.stadium_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the swimmer who has the most records.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many swimming records are there in the system ?",
            "sql": "select count ( record.* )"
        },
        {
            "utterance": "What about that in terms of swimmer ids ?",
            "sql": "select record.swimmer_id , count ( record.* ) group_by record.swimmer_id"
        },
        {
            "utterance": "Show me the one with the most of them .",
            "sql": "select record.swimmer_id group_by record.swimmer_id order_by count ( record.* ) desc limit_value"
        },
        {
            "utterance": "Give me that swimmer 's name .",
            "sql": "select swimmer.name group_by record.swimmer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the swimmer who has at least 2 records.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many swimming records are there in the system ?",
            "sql": "select count ( record.* )"
        },
        {
            "utterance": "What about that in terms of swimmer ids ?",
            "sql": "select record.swimmer_id , count ( record.* ) group_by record.swimmer_id"
        },
        {
            "utterance": "Show me those with at least two .",
            "sql": "select record.swimmer_id group_by record.swimmer_id having count ( record.* ) > = value"
        },
        {
            "utterance": "What about their names ?",
            "sql": "select swimmer.name group_by record.swimmer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many swimming records are there in the system ?",
            "sql": "select count ( record.* )"
        },
        {
            "utterance": "What about swimming records of a result Win ?",
            "sql": "select count ( record.* ) where record.result = value"
        },
        {
            "utterance": "What about in terms of swimmer ids ?",
            "sql": "select record.swimmer_id , count ( record.* ) where record.result = value group_by record.swimmer_id"
        },
        {
            "utterance": "Show me those with more than one .",
            "sql": "select record.swimmer_id where record.result = value group_by record.swimmer_id having count ( record.* ) > value"
        },
        {
            "utterance": "Show me their names and nationalities .",
            "sql": "select swimmer.name , swimmer.nationality where record.result = value group_by record.swimmer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of the swimmers who have no record.",
        "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
    },
    "interaction": [
        {
            "utterance": "How many swimming records are there ?",
            "sql": "select count ( record.* )"
        },
        {
            "utterance": "Show me the swimmer ids associated with any of those record .",
            "sql": "select distinct record.swimmer_id"
        },
        {
            "utterance": "What about the swimmer ids that are not one of those ?",
            "sql": "select swimmer.id where swimmer.id not in ( select record.swimmer_id )"
        },
        {
            "utterance": "Show me those swimmers ' names .",
            "sql": "select swimmer.name where swimmer.id not in ( select record.swimmer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'"
    },
    "interaction": [
        {
            "utterance": "How many swimming records are there ?",
            "sql": "select count ( record.* )"
        },
        {
            "utterance": "What about records that have results `` Win '' ?",
            "sql": "select count ( record.* ) where record.result = value"
        },
        {
            "utterance": "Show me the name of the swimmers who have any of those records .",
            "sql": "select swimmer.name where record.result = value"
        },
        {
            "utterance": "Among those swimmers , who also have any records with results `` Loss '' ?",
            "sql": "select swimmer.name where record.result = value intersect select swimmer.name where record.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "swimming",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of stadiums that some Australian swimmers have been to.",
        "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'"
    },
    "interaction": [
        {
            "utterance": "How many stadiums are there ?",
            "sql": "select count ( stadium.* )"
        },
        {
            "utterance": "How many Australian swimmers are there in the record ?",
            "sql": "select count ( swimmer.* ) where swimmer.nationality = value"
        },
        {
            "utterance": "Show me the stadiums any of those swimmers have been to .",
            "sql": "select stadium.name where swimmer.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 0,
    "final": {
        "utterance": "Return the name and id of the furniture with the highest market rate.",
        "sql": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average market rate for furniture ?",
            "sql": "select avg ( furniture.market_rate )"
        },
        {
            "utterance": "Show each furniture id number and its corresponding market_rate .",
            "sql": "select furniture.furniture_id , furniture.market_rate"
        },
        {
            "utterance": "Which one has the lowest market_rate ?",
            "sql": "select furniture.furniture_id , furniture.market_rate order_by furniture.market_rate limit_value"
        },
        {
            "utterance": "Which one has the highest ?",
            "sql": "select furniture.furniture_id , furniture.market_rate order_by furniture.market_rate desc limit_value"
        },
        {
            "utterance": "Also show its name .",
            "sql": "select furniture.name , furniture.furniture_id order_by furniture.market_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the total market rate of the furnitures that have the top 2 market shares.",
        "sql": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "What are the names of the 5 furniture items with the highest market rates ?",
            "sql": "select furniture.name order_by furniture.market_rate desc limit_value"
        },
        {
            "utterance": "How about the top 2 ?",
            "sql": "select furniture.name order_by furniture.market_rate desc limit_value"
        },
        {
            "utterance": "What are their market rates ?",
            "sql": "select furniture.name , furniture.market_rate order_by furniture.market_rate desc limit_value"
        },
        {
            "utterance": "How about the sum ?",
            "sql": "select sum ( furniture.market_rate ) order_by furniture.market_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and component amount of the least popular furniture.",
        "sql": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all information for the lowest market-rate furniture item .",
            "sql": "select furniture.* order_by furniture.market_rate limit_value"
        },
        {
            "utterance": "What is its id number ?",
            "sql": "select furniture.furniture_id order_by furniture.market_rate limit_value"
        },
        {
            "utterance": "How many components does it have ?",
            "sql": "select furniture.num_of_component order_by furniture.market_rate limit_value"
        },
        {
            "utterance": "Also show its name .",
            "sql": "select furniture.name , furniture.num_of_component order_by furniture.market_rate limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of furnitures whose prices are lower than the highest price.",
        "sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)"
    },
    "interaction": [
        {
            "utterance": "What is the highest dollar price among the furniture ?",
            "sql": "select max ( furniture_manufacte.price_in_dollar )"
        },
        {
            "utterance": "Show manufacture information for items with a lower price than this .",
            "sql": "select furniture_manufacte.* where furniture_manufacte.price_in_dollar < ( select max ( furniture_manufacte.price_in_dollar ) )"
        },
        {
            "utterance": "Show only their furniture_id numbers .",
            "sql": "select furniture_manufacte.furniture_id where furniture_manufacte.price_in_dollar < ( select max ( furniture_manufacte.price_in_dollar ) )"
        },
        {
            "utterance": "What are the names of these items ?",
            "sql": "select furniture.name where furniture_manufacte.price_in_dollar < ( select max ( furniture_manufacte.price_in_dollar ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 4,
    "final": {
        "utterance": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "sql": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average number of shops for manufacturers ?",
            "sql": "select avg ( manufacturer.num_of_shops )"
        },
        {
            "utterance": "How about the minimum ?",
            "sql": "select min ( manufacturer.num_of_shops )"
        },
        {
            "utterance": "Which manufacturer has the fewest shops ?",
            "sql": "select manufacturer.* order_by manufacturer.num_of_shops desc limit_value"
        },
        {
            "utterance": "Only show the year it opened and the name of the manufacturer .",
            "sql": "select manufacturer.open_year , manufacturer.name order_by manufacturer.num_of_shops desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 5,
    "final": {
        "utterance": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "sql": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10"
    },
    "interaction": [
        {
            "utterance": "How many different manufacturers are there ?",
            "sql": "select count ( manufacturer.* )"
        },
        {
            "utterance": "How many of them have fewer than 10 factories ?",
            "sql": "select count ( manufacturer.* ) where manufacturer.num_of_shops < value"
        },
        {
            "utterance": "Show their names and the years they opened .",
            "sql": "select manufacturer.name , manufacturer.open_year where manufacturer.num_of_shops < value"
        },
        {
            "utterance": "Also include those that have more than 10 shops .",
            "sql": "select manufacturer.name , manufacturer.open_year where manufacturer.num_of_shops < value or manufacturer.num_of_shops > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 6,
    "final": {
        "utterance": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "sql": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990"
    },
    "interaction": [
        {
            "utterance": "Show information for manufacturers that opened on or after 1990 .",
            "sql": "select manufacturer.* where manufacturer.open_year > = value"
        },
        {
            "utterance": "How about before 1990 ?",
            "sql": "select manufacturer.* where manufacturer.open_year < value"
        },
        {
            "utterance": "What is the maximim number of shops among these manufacturers ?",
            "sql": "select max ( manufacturer.num_of_shops ) where manufacturer.open_year < value"
        },
        {
            "utterance": "Also show the average number of factories for this group .",
            "sql": "select max ( manufacturer.num_of_shops ) , avg ( manufacturer.num_of_factories ) where manufacturer.open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the furniture id number of the most expensive furniture ?",
            "sql": "select furniture_manufacte.furniture_id order_by furniture_manufacte.price_in_dollar desc value"
        },
        {
            "utterance": "How about the manufacturer number ?",
            "sql": "select furniture_manufacte.manufacturer_id order_by furniture_manufacte.price_in_dollar desc value"
        },
        {
            "utterance": "What is the name of the manufacturer ?",
            "sql": "select manufacturer.manufacturer_id order_by furniture_manufacte.price_in_dollar desc limit_value"
        },
        {
            "utterance": "Also show how many shops they have .",
            "sql": "select manufacturer.manufacturer_id , manufacturer.num_of_shops order_by furniture_manufacte.price_in_dollar desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id"
    },
    "interaction": [
        {
            "utterance": "How many distinct manufacturers are there ?",
            "sql": "select count ( distinct manufacturer.manufacturer_id )"
        },
        {
            "utterance": "How many produce furniture ?",
            "sql": "select count ( distinct manufacturer.manufacturer_id )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct manufacturer.name"
        },
        {
            "utterance": "Also show how many furniture types each manufacturer produces .",
            "sql": "select count ( * ) , manufacturer.name group_by manufacturer.manufacturer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufacturer",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)"
    },
    "interaction": [
        {
            "utterance": "How many different furniture items are there ?",
            "sql": "select count ( distinct furniture.furniture_id )"
        },
        {
            "utterance": "How many are sold by manufacturers in our records ?",
            "sql": "select count ( distinct furniture.furniture_id ) where furniture.furniture_id in ( select furniture_manufacte.furniture_id )"
        },
        {
            "utterance": "Which furniture names are not in our records ?",
            "sql": "select furniture.name where furniture.furniture_id not in ( select furniture_manufacte.furniture_id )"
        },
        {
            "utterance": "Also show their market rates .",
            "sql": "select furniture.market_rate , furniture.name where furniture.furniture_id not in ( select furniture_manufacte.furniture_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the home city with the most number of drivers.",
        "sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many drivers are there ?",
            "sql": "select count ( driver.* )"
        },
        {
            "utterance": "How many drivers does each city have ?",
            "sql": "select driver.home_city , count ( driver.* ) group_by driver.home_city"
        },
        {
            "utterance": "Which city has the most drivers ?",
            "sql": "select driver.home_city group_by driver.home_city order_by count ( driver.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the party with drivers from Hartford and drivers older than 40.",
        "sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40"
    },
    "interaction": [
        {
            "utterance": "How many different parties are there ?",
            "sql": "select count ( distinct driver.party )"
        },
        {
            "utterance": "How many drivers are from Hartford ?",
            "sql": "select count ( driver.* ) where driver.home_city = value"
        },
        {
            "utterance": "Among these drivers , how many of them are older than 40 ?",
            "sql": "select count ( driver.* ) where driver.home_city = value and driver.age > value"
        },
        {
            "utterance": "Show their parites .",
            "sql": "select driver.party where driver.home_city = value and driver.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 2,
    "final": {
        "utterance": "Show home city where at least two drivers older than 40 are from.",
        "sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many drivers are older than 30 ?",
            "sql": "select count ( driver.* ) where driver.age > value"
        },
        {
            "utterance": "How many are older than 40 ?",
            "sql": "select count ( driver.* ) where driver.age > value"
        },
        {
            "utterance": "Show their home cities .",
            "sql": "select driver.home_city where driver.age > value"
        },
        {
            "utterance": "Among these cities , which one has at least two drivers older than 40 ?",
            "sql": "select driver.home_city where driver.age > value group_by driver.home_city having count ( driver.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all home cities except for those having a driver older than 40.",
        "sql": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40"
    },
    "interaction": [
        {
            "utterance": "Show the hometowns of the drivers who are older than 40 .",
            "sql": "select driver.home_city where driver.age > value"
        },
        {
            "utterance": "How many different cities are there ?",
            "sql": "select count ( distinct driver.home_city )"
        },
        {
            "utterance": "What are the cities that do not have a driver older than 40 ?",
            "sql": "select driver.home_city except select driver.home_city where driver.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of the drivers without a school bus.",
        "sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"
    },
    "interaction": [
        {
            "utterance": "How many drivers are there that have a school bus ?",
            "sql": "select count ( driver.* ) where driver.driver_id in ( select school_bus.driver_id )"
        },
        {
            "utterance": "How about the number of drivers without a school bus ?",
            "sql": "select count ( driver.* ) where driver.driver_id not in ( select school_bus.driver_id )"
        },
        {
            "utterance": "Show these drivers ' names .",
            "sql": "select driver.name where driver.driver_id not in ( select school_bus.driver_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the types of schools that have two schools.",
        "sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2"
    },
    "interaction": [
        {
            "utterance": "How many different types of schools are there ?",
            "sql": "select count ( distinct school.type )"
        },
        {
            "utterance": "For each type , how many schools are there ?",
            "sql": "select school.type , count ( school.* ) group_by school.type"
        },
        {
            "utterance": "Which types have two schools ?",
            "sql": "select school.type group_by school.type having count ( school.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the school name and driver name for all school buses.",
        "sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id"
    },
    "interaction": [
        {
            "utterance": "How many different schools are there ?",
            "sql": "select count ( school.* )"
        },
        {
            "utterance": "Which schools have school buses ?",
            "sql": "select school.school"
        },
        {
            "utterance": "Please also show the names of the drivers .",
            "sql": "select school.school , driver.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the maximum, minimum and average years spent working on a school bus?",
        "sql": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus"
    },
    "interaction": [
        {
            "utterance": "What are the top 3 number of years spent working on a school bus ?",
            "sql": "select school_bus.years_working order_by school_bus.years_working desc limit_value"
        },
        {
            "utterance": "What is the maximum years spent working on a school bus ?",
            "sql": "select max ( school_bus.years_working )"
        },
        {
            "utterance": "Please also show the minimum and average years .",
            "sql": "select max ( school_bus.years_working ) , min ( school_bus.years_working ) , avg ( school_bus.years_working )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the school name and type for schools without a school bus.",
        "sql": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)"
    },
    "interaction": [
        {
            "utterance": "How many schools do not have a school bus ?",
            "sql": "select count ( school.* ) where school.school_id not in ( select school_bus.school_id )"
        },
        {
            "utterance": "What are the names of these schools ?",
            "sql": "select school.school where school.school_id not in ( select school_bus.school_id )"
        },
        {
            "utterance": "Please also show the school types .",
            "sql": "select school.school , school.type where school.school_id not in ( select school_bus.school_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the type of school and the number of buses for each type.",
        "sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type"
    },
    "interaction": [
        {
            "utterance": "How many schools have a school bus ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "How many school buses does each school type have ?",
            "sql": "select count ( * ) group_by school.type"
        },
        {
            "utterance": "Please also show the types .",
            "sql": "select school.type , count ( * ) group_by school.type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 10,
    "final": {
        "utterance": "How many drivers are from Hartford city or younger than 40?",
        "sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40"
    },
    "interaction": [
        {
            "utterance": "How many drivers are older than 40 ?",
            "sql": "select count ( driver.* ) where driver.age > value"
        },
        {
            "utterance": "How about the number younger than 40 ?",
            "sql": "select count ( driver.* ) where driver.age < value"
        },
        {
            "utterance": "Please add the number of drivers that are from Hartford .",
            "sql": "select count ( driver.* ) where driver.home_city = value or driver.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_bus",
    "interaction_id": 11,
    "final": {
        "utterance": "List names for drivers from Hartford city and younger than 40.",
        "sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40"
    },
    "interaction": [
        {
            "utterance": "How many drivers are from Hartford ?",
            "sql": "select count ( driver.* ) where driver.home_city = value"
        },
        {
            "utterance": "Among these drivers , how many of them are younger than 40 ?",
            "sql": "select count ( driver.* ) where driver.home_city = value and driver.age < value"
        },
        {
            "utterance": "Show their names .",
            "sql": "select driver.name where driver.home_city = value and driver.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 0,
    "final": {
        "utterance": "How many calendar items do we have?",
        "sql": "SELECT count(*) FROM Ref_calendar"
    },
    "interaction": [
        {
            "utterance": "Show information for all calendar items .",
            "sql": "select ref_calendar.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( ref_calendar.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all calendar dates and day Numbers.",
        "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar"
    },
    "interaction": [
        {
            "utterance": "Show all calendar items .",
            "sql": "select ref_calendar.*"
        },
        {
            "utterance": "Only show the calendar dates and day numbers for them .",
            "sql": "select ref_calendar.calendar_date , ref_calendar.day_number"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the number of document types.",
        "sql": "SELECT count(*) FROM Ref_document_types"
    },
    "interaction": [
        {
            "utterance": "Show all document types .",
            "sql": "select ref_document_types.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( ref_document_types.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 3,
    "final": {
        "utterance": "List all document type codes and document type names.",
        "sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
    },
    "interaction": [
        {
            "utterance": "Show all document type information .",
            "sql": "select ref_document_types.*"
        },
        {
            "utterance": "What are their document type codes and names ?",
            "sql": "select ref_document_types.document_type_code , ref_document_types.document_type_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name and description for document type code RV?",
        "sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
    },
    "interaction": [
        {
            "utterance": "Show the name and description for all document types .",
            "sql": "select ref_document_types.document_type_name , ref_document_types.document_type_description"
        },
        {
            "utterance": "Filter the results for only those with code RV .",
            "sql": "select ref_document_types.document_type_name , ref_document_types.document_type_description where ref_document_types.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the document type code for document type \"Paper\"?",
        "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\""
    },
    "interaction": [
        {
            "utterance": "Show all the document type codes .",
            "sql": "select ref_document_types.document_type_code"
        },
        {
            "utterance": "What is the code for the document type named `` Paper '' ?",
            "sql": "select ref_document_types.document_type_code where ref_document_types.document_type_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the number of documents with document type code CV or BK.",
        "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\""
    },
    "interaction": [
        {
            "utterance": "How many documents are there in total ?",
            "sql": "select count ( all_documents.* )"
        },
        {
            "utterance": "How about the number for those with document type code CV ?",
            "sql": "select count ( all_documents.* ) where all_documents.document_type_code = value"
        },
        {
            "utterance": "How about CV or BK ?",
            "sql": "select count ( all_documents.* ) where all_documents.document_type_code = value or all_documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the date when the document \"Marry CV\" was stored?",
        "sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\""
    },
    "interaction": [
        {
            "utterance": "Show the info for all documents .",
            "sql": "select all_documents.*"
        },
        {
            "utterance": "How about those with name `` Marry CV '' ?",
            "sql": "select all_documents.* where all_documents.document_name = value"
        },
        {
            "utterance": "Show its date stored .",
            "sql": "select all_documents.date_stored where all_documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the day Number and date of all the documents?",
        "sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date"
    },
    "interaction": [
        {
            "utterance": "Show date stored for all the documents .",
            "sql": "select all_documents.date_stored"
        },
        {
            "utterance": "Also show their day numbers .",
            "sql": "select ref_calendar.day_number , all_documents.date_stored"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the document type name for the document with name \"How to read a book\"?",
        "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\""
    },
    "interaction": [
        {
            "utterance": "Show all document names .",
            "sql": "select all_documents.document_name"
        },
        {
            "utterance": "For each of them , show the document type name .",
            "sql": "select ref_document_types.document_type_name , all_documents.document_name"
        },
        {
            "utterance": "What is the type name for the document named `` How to read a book '' ?",
            "sql": "select ref_document_types.document_type_name where all_documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the number of locations.",
        "sql": "SELECT count(*) FROM Ref_locations"
    },
    "interaction": [
        {
            "utterance": "Show all locations .",
            "sql": "select ref_locations.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( ref_locations.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 11,
    "final": {
        "utterance": "List all location codes and location names.",
        "sql": "SELECT location_code ,  location_name FROM Ref_locations"
    },
    "interaction": [
        {
            "utterance": "List the names of all locations .",
            "sql": "select ref_locations.location_name"
        },
        {
            "utterance": "Also show their location codes .",
            "sql": "select ref_locations.location_code , ref_locations.location_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the name and description for location code x?",
        "sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all locations .",
            "sql": "select ref_locations.location_name"
        },
        {
            "utterance": "What is name for the one with code x ?",
            "sql": "select ref_locations.location_name where ref_locations.location_code = value"
        },
        {
            "utterance": "Also show its description .",
            "sql": "select ref_locations.location_name , ref_locations.location_description where ref_locations.location_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the location code for the country \"Canada\"?",
        "sql": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\""
    },
    "interaction": [
        {
            "utterance": "Show the code for all locations .",
            "sql": "select ref_locations.location_code"
        },
        {
            "utterance": "How about the one named `` Canada '' ?",
            "sql": "select ref_locations.location_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 14,
    "final": {
        "utterance": "How many roles are there?",
        "sql": "SELECT count(*) FROM ROLES"
    },
    "interaction": [
        {
            "utterance": "Show all roles .",
            "sql": "select roles.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( roles.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 15,
    "final": {
        "utterance": "List all role codes, role names, and role descriptions.",
        "sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES"
    },
    "interaction": [
        {
            "utterance": "Show the names of all roles .",
            "sql": "select roles.role_name"
        },
        {
            "utterance": "Also show their codes and descriptions .",
            "sql": "select roles.role_code , roles.role_name , roles.role_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the name and description for role code \"MG\"?",
        "sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\""
    },
    "interaction": [
        {
            "utterance": "Show the name for all roles .",
            "sql": "select roles.role_name"
        },
        {
            "utterance": "What about the role with code `` MG '' ?",
            "sql": "select roles.role_name where roles.role_code = value"
        },
        {
            "utterance": "Also show its description .",
            "sql": "select roles.role_name , roles.role_description where roles.role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the description for role name \"Proof Reader\".",
        "sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\""
    },
    "interaction": [
        {
            "utterance": "Show the descriptions of all roles .",
            "sql": "select roles.role_description"
        },
        {
            "utterance": "What is the description for the one named `` Proof Reader '' ?",
            "sql": "select roles.role_description where roles.role_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 18,
    "final": {
        "utterance": "How many employees do we have?",
        "sql": "SELECT count(*) FROM Employees"
    },
    "interaction": [
        {
            "utterance": "Show information for all employees .",
            "sql": "select employees.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( employees.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'"
    },
    "interaction": [
        {
            "utterance": "Show the names of all employee .",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "Show the name , code , and date of birth for the employee named 'Armani ' .",
            "sql": "select employees.employee_name , employees.role_code , employees.date_of_birth where employees.employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the id for the employee called Ebba?",
        "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\""
    },
    "interaction": [
        {
            "utterance": "Show the id and name for all employees .",
            "sql": "select employees.employee_id , employees.employee_name"
        },
        {
            "utterance": "What is the id for the employee called Ebba ?",
            "sql": "select employees.employee_id where employees.employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the names of all the employees with role \"HR\".",
        "sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\""
    },
    "interaction": [
        {
            "utterance": "Show the names and role code of all the employees .",
            "sql": "select employees.employee_name , employees.role_code"
        },
        {
            "utterance": "Show names for those with `` HR '' as their role .",
            "sql": "select employees.employee_name where employees.role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 22,
    "final": {
        "utterance": "Show all role codes and the number of employees in each role.",
        "sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code"
    },
    "interaction": [
        {
            "utterance": "Show the role code for all employees .",
            "sql": "select employees.role_code"
        },
        {
            "utterance": "For each of them , also show the number of employees in each role .",
            "sql": "select employees.role_code , count ( employees.* ) group_by employees.role_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the role code with the largest number of employees?",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the role code for all employees .",
            "sql": "select employees.role_code"
        },
        {
            "utterance": "Count the number of employees with each role code .",
            "sql": "select employees.role_code , count ( employees.* ) group_by employees.role_code"
        },
        {
            "utterance": "Sort the codes by the count in descending order .",
            "sql": "select employees.role_code group_by employees.role_code order_by count ( employees.* ) desc"
        },
        {
            "utterance": "Which of them has the largest number of employees ?",
            "sql": "select employees.role_code group_by employees.role_code order_by count ( employees.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 24,
    "final": {
        "utterance": "Show all role codes with at least 3 employees.",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Show role codes for all employees .",
            "sql": "select employees.role_code"
        },
        {
            "utterance": "Count the number of employees for each of them .",
            "sql": "select employees.role_code , count ( employees.* ) group_by employees.role_code"
        },
        {
            "utterance": "Which of them have at least 3 ?",
            "sql": "select employees.role_code group_by employees.role_code having count ( employees.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 25,
    "final": {
        "utterance": "Show the role code with the least employees.",
        "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the role code for all employees .",
            "sql": "select employees.role_code"
        },
        {
            "utterance": "For each of them , count the number of employees .",
            "sql": "select employees.role_code , count ( employees.* ) group_by employees.role_code"
        },
        {
            "utterance": "Sort the codes by this count .",
            "sql": "select employees.role_code group_by employees.role_code order_by count ( employees.* ) asc"
        },
        {
            "utterance": "Which code has the least ?",
            "sql": "select employees.role_code group_by employees.role_code order_by count ( employees.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the role name and role description for employee called Ebba?",
        "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all employees .",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "Also show their role name and role description .",
            "sql": "select employees.employee_name , roles.role_name , roles.role_description"
        },
        {
            "utterance": "What is the role name and role description for the employee named Ebba ?",
            "sql": "select roles.role_name , roles.role_description where employees.employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 27,
    "final": {
        "utterance": "Show the names of employees with role name Editor.",
        "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""
    },
    "interaction": [
        {
            "utterance": "Show the name for all employees .",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "Also show their role names .",
            "sql": "select employees.employee_name , roles.role_name"
        },
        {
            "utterance": "Who has `` Editor '' as their role ?",
            "sql": "select employees.employee_name where roles.role_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\""
    },
    "interaction": [
        {
            "utterance": "Show the ids for all employees .",
            "sql": "select employees.employee_id"
        },
        {
            "utterance": "Also show their role names .",
            "sql": "select employees.employee_id , roles.role_name"
        },
        {
            "utterance": "Which employees have `` Human Resources '' as their role ?",
            "sql": "select employees.employee_id where roles.role_name = value"
        },
        {
            "utterance": "Also show the employee ids with the role `` Manager '' .",
            "sql": "select employees.employee_id where roles.role_name = value or roles.role_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the different location codes for documents?",
        "sql": "SELECT DISTINCT location_code FROM Document_locations"
    },
    "interaction": [
        {
            "utterance": "Show locations for all documents .",
            "sql": "select document_locations.location_code"
        },
        {
            "utterance": "Show all distinct locations among them .",
            "sql": "select distinct document_locations.location_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 30,
    "final": {
        "utterance": "Show the location name for document \"Robin CV\".",
        "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\""
    },
    "interaction": [
        {
            "utterance": "Show all document names .",
            "sql": "select all_documents.document_name"
        },
        {
            "utterance": "Also show their location name .",
            "sql": "select all_documents.document_name , ref_locations.location_name"
        },
        {
            "utterance": "What is the location for the document titled `` Robin CV '' ?",
            "sql": "select ref_locations.location_name where all_documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 31,
    "final": {
        "utterance": "Show the location code, the starting date and ending date in that location for all the documents.",
        "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations"
    },
    "interaction": [
        {
            "utterance": "Show the location code for all the document locations .",
            "sql": "select document_locations.location_code"
        },
        {
            "utterance": "Also show their their starting and ending dates .",
            "sql": "select document_locations.location_code , document_locations.date_in_location_from , document_locations.date_in_locaton_to"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 32,
    "final": {
        "utterance": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\""
    },
    "interaction": [
        {
            "utterance": "Show the document names .",
            "sql": "select all_documents.document_name"
        },
        {
            "utterance": "Also show the to and from dates for them .",
            "sql": "select all_documents.document_name , document_locations.date_in_location_from , document_locations.date_in_locaton_to"
        },
        {
            "utterance": "What are these values for the document named `` Robin CV '' ?",
            "sql": "select document_locations.date_in_location_from , document_locations.date_in_locaton_to where all_documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 33,
    "final": {
        "utterance": "Show the location codes and the number of documents in each location.",
        "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code"
    },
    "interaction": [
        {
            "utterance": "Show the codes for all document locations .",
            "sql": "select document_locations.location_code"
        },
        {
            "utterance": "For each code , show the corresponding count of documents .",
            "sql": "select document_locations.location_code , count ( document_locations.* ) group_by document_locations.location_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the location code with the most documents?",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the location codes .",
            "sql": "select document_locations.location_code"
        },
        {
            "utterance": "For each of them , what is the count of associated documents ?",
            "sql": "select document_locations.location_code , count ( document_locations.* ) group_by document_locations.location_code"
        },
        {
            "utterance": "Sort codes in descending order by these counts .",
            "sql": "select document_locations.location_code group_by document_locations.location_code order_by count ( document_locations.* ) desc"
        },
        {
            "utterance": "Which has the most ?",
            "sql": "select document_locations.location_code group_by document_locations.location_code order_by count ( document_locations.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 35,
    "final": {
        "utterance": "Show the location codes with at least 3 documents.",
        "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Show all location codes .",
            "sql": "select document_locations.location_code"
        },
        {
            "utterance": "For each of them , count the number of corresponding documents .",
            "sql": "select document_locations.location_code , count ( document_locations.* ) group_by document_locations.location_code"
        },
        {
            "utterance": "Which of them have at least 3 ?",
            "sql": "select document_locations.location_code group_by document_locations.location_code having count ( document_locations.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 36,
    "final": {
        "utterance": "Show the location name and code with the least documents.",
        "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the location codes for all documents .",
            "sql": "select document_locations.location_code"
        },
        {
            "utterance": "Also show their locations .",
            "sql": "select ref_locations.location_name , document_locations.location_code"
        },
        {
            "utterance": "How many documents come from each location ?",
            "sql": "select ref_locations.location_name , document_locations.location_code , count ( * ) group_by document_locations.location_code"
        },
        {
            "utterance": "Which location has the fewest ?",
            "sql": "select ref_locations.location_name , document_locations.location_code group_by document_locations.location_code order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id"
    },
    "interaction": [
        {
            "utterance": "Show all employee names .",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "What are the names of the employees who authorized document destruction .",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "Also show the names for those who destroyed the corresponding documents .",
            "sql": "select employees.employee_name , employees.employee_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 38,
    "final": {
        "utterance": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID"
    },
    "interaction": [
        {
            "utterance": "Show the id of each employee who has authorized document destruction .",
            "sql": "select documents_to_be_destroyed.destruction_authorised_by_employee_id"
        },
        {
            "utterance": "For each of them , count the number of destroyed documents they authorized .",
            "sql": "select documents_to_be_destroyed.destruction_authorised_by_employee_id , count ( documents_to_be_destroyed.* ) group_by documents_to_be_destroyed.destruction_authorised_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 39,
    "final": {
        "utterance": "Show the employee ids and the number of documents destroyed by each employee.",
        "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"
    },
    "interaction": [
        {
            "utterance": "Show the employee ids having destroyed some documents .",
            "sql": "select documents_to_be_destroyed.destroyed_by_employee_id"
        },
        {
            "utterance": "For each employee , how many documents did they destroy ?",
            "sql": "select documents_to_be_destroyed.destroyed_by_employee_id , count ( documents_to_be_destroyed.* ) group_by documents_to_be_destroyed.destroyed_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 40,
    "final": {
        "utterance": "Show the ids of the employees who don't authorize destruction for any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Show the ids of the employees having authorized any document destruction .",
            "sql": "select documents_to_be_destroyed.destruction_authorised_by_employee_id"
        },
        {
            "utterance": "How about those who did n't ?",
            "sql": "select employees.employee_id except select documents_to_be_destroyed.destruction_authorised_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 41,
    "final": {
        "utterance": "Show the ids of all employees who have authorized destruction.",
        "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Show the id of all authorizing employees for documents to be destroyed .",
            "sql": "select documents_to_be_destroyed.destruction_authorised_by_employee_id"
        },
        {
            "utterance": "Show only distinct ids .",
            "sql": "select distinct documents_to_be_destroyed.destruction_authorised_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 42,
    "final": {
        "utterance": "Show the ids of all employees who have destroyed a document.",
        "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Show ids for employees who destroyed a document .",
            "sql": "select documents_to_be_destroyed.destroyed_by_employee_id"
        },
        {
            "utterance": "What are the distinct results ?",
            "sql": "select distinct documents_to_be_destroyed.destroyed_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Tracking_DB",
    "interaction_id": 43,
    "final": {
        "utterance": "Show the ids of all employees who don't destroy any document.",
        "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
    },
    "interaction": [
        {
            "utterance": "Show all employee ids .",
            "sql": "select employees.employee_id"
        },
        {
            "utterance": "Show all employee ids who have destroyed a document .",
            "sql": "select documents_to_be_destroyed.destroyed_by_employee_id"
        },
        {
            "utterance": "How about those who have n't ?",
            "sql": "select employees.employee_id except select documents_to_be_destroyed.destroyed_by_employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 0,
    "final": {
        "utterance": "List the publisher of the publication with the highest price.",
        "sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I want to know the information of all the publications .",
            "sql": "select publication.*"
        },
        {
            "utterance": "Just tell me publishers from the tables above .",
            "sql": "select publication.publisher"
        },
        {
            "utterance": "Thanks . Could you tell me who is the richest ?",
            "sql": "select publication.publisher order_by publication.price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 1,
    "final": {
        "utterance": "List the publication dates of publications with 3 lowest prices.",
        "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What 's the price of the publication published by Wiley ?",
            "sql": "select publication.price where publication.publisher = value"
        },
        {
            "utterance": "How about Pearson 's ?",
            "sql": "select publication.price where publication.publisher = value"
        },
        {
            "utterance": "Okay . I want to know the publication dates of publications with 3 lowest prices now .",
            "sql": "select publication.publication_date order_by publication.price asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Show writers who have published a book with price more than 4000000.",
        "sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000"
    },
    "interaction": [
        {
            "utterance": "Could you tell me the book with published price more than 4000000 ?",
            "sql": "select book.title where publication.price > value"
        },
        {
            "utterance": "Who were their writers ?",
            "sql": "select book.writer where publication.price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the titles of books in descending order of publication price.",
        "sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC"
    },
    "interaction": [
        {
            "utterance": "I want to know the publication price of the book with title `` Cyberella '' ?",
            "sql": "select publication.price where book.title = value"
        },
        {
            "utterance": "Could you show me all the books ' publication price ?",
            "sql": "select publication.price"
        },
        {
            "utterance": "Okay . I want all the books ' titles in descending order of publication price .",
            "sql": "select book.title order_by publication.price desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Show publishers that have more than one publication.",
        "sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Tell me the publisher of the book Bloody Mary : Lady Liberty .",
            "sql": "select publication.publisher where book.title = value"
        },
        {
            "utterance": "How many publications does this publisher have ?",
            "sql": "select count ( publication.* ) where publication.publisher = ( select publication.publisher where book.title = value )"
        },
        {
            "utterance": "Tell me the publishers that have more than one publication .",
            "sql": "select publication.publisher group_by publication.publisher having count ( publication.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the most common publication date.",
        "sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the publication date of the book\ufeffDead Corps .",
            "sql": "select publication.publication_date where book.title = value"
        },
        {
            "utterance": "How about the book Cyberella ?",
            "sql": "select publication.publication_date where book.title = value"
        },
        {
            "utterance": "Okay , please show me the most common publication date .",
            "sql": "select publication.publication_date group_by publication.publication_date order_by count ( publication.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 6,
    "final": {
        "utterance": "List the writers who have written more than one book.",
        "sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Tell me the writer of\ufeff Gemini Blood .",
            "sql": "select book.writer where book.title = value"
        },
        {
            "utterance": "Tell me all the books he wrote .",
            "sql": "select book.title where book.writer = ( select book.writer where book.title = value )"
        },
        {
            "utterance": "Okay , show me the writers who have written more than one book .",
            "sql": "select book.writer group_by book.writer having count ( book.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 7,
    "final": {
        "utterance": "List the titles of books that are not published.",
        "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)"
    },
    "interaction": [
        {
            "utterance": "Tell me the publisher of the book Bloody Mary : Lady Liberty .",
            "sql": "select publication.publisher where book.title = value"
        },
        {
            "utterance": "How about the publisher of the book with title Gemini Blood ?",
            "sql": "select publication.publisher where book.title = value"
        },
        {
            "utterance": "Tell me the books that are not published .",
            "sql": "select book.title where book.book_id not in ( select publication.book_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "book_2",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000"
    },
    "interaction": [
        {
            "utterance": "Tell me the publishers that have publications with price higher than 10000000 .",
            "sql": "select publication.publisher where publication.price > value"
        },
        {
            "utterance": "Tell me the publishers that have publications with price lower than 5000000 .",
            "sql": "select publication.publisher where publication.price < value"
        },
        {
            "utterance": "Okay . Show me the people in both lists .",
            "sql": "select publication.publisher where publication.price > value intersect select publication.publisher where publication.price < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 0,
    "final": {
        "utterance": "How many performances are there?",
        "sql": "SELECT count(*) FROM performance"
    },
    "interaction": [
        {
            "utterance": "What are the dates of the performances ?",
            "sql": "select performance.date"
        },
        {
            "utterance": "How about the locations ?",
            "sql": "select performance.location"
        },
        {
            "utterance": "How many performances are there ?",
            "sql": "select count ( performance.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 1,
    "final": {
        "utterance": "List the hosts of performances in ascending order of attendance.",
        "sql": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    "interaction": [
        {
            "utterance": "Who are the members of the performances ?",
            "sql": "select member.name"
        },
        {
            "utterance": "How about the hosts ?",
            "sql": "select performance.host"
        },
        {
            "utterance": "Order the result by ascending order of attendance .",
            "sql": "select performance.host order_by performance.attendance asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the dates and locations of performances?",
        "sql": "SELECT Date ,  LOCATION FROM performance"
    },
    "interaction": [
        {
            "utterance": "How many people attended the performances ?",
            "sql": "select performance.attendance"
        },
        {
            "utterance": "On what dates are they held ?",
            "sql": "select performance.date"
        },
        {
            "utterance": "Add the locations to the result .",
            "sql": "select performance.date , performance.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "sql": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\""
    },
    "interaction": [
        {
            "utterance": "Show me the dates of the performances .",
            "sql": "select performance.date"
        },
        {
            "utterance": "How about the attendances ?",
            "sql": "select performance.attendance"
        },
        {
            "utterance": "Among the results , which are performed at `` TD Garden '' or `` Bell Centre '' ?",
            "sql": "select performance.attendance where performance.location = value or performance.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average number of attendees for performances?",
        "sql": "SELECT avg(Attendance) FROM performance"
    },
    "interaction": [
        {
            "utterance": "What is the maximum number of attendees for performances ?",
            "sql": "select max ( performance.attendance )"
        },
        {
            "utterance": "How about the total sum ?",
            "sql": "select sum ( performance.attendance )"
        },
        {
            "utterance": "What is the average number of attendees for performances ?",
            "sql": "select avg ( performance.attendance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the date of the performance with the highest number of attendees?",
        "sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Where are the performances ?",
            "sql": "select performance.location"
        },
        {
            "utterance": "On what date are they held ?",
            "sql": "select performance.date"
        },
        {
            "utterance": "Among the result , show me the one with the lowest number of attendees .",
            "sql": "select performance.date order_by performance.attendance asc limit_value"
        },
        {
            "utterance": "What about highest number of attendees ?",
            "sql": "select performance.date order_by performance.attendance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 6,
    "final": {
        "utterance": "Show different locations and the number of performances at each location.",
        "sql": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION"
    },
    "interaction": [
        {
            "utterance": "How many attendees are there for the performances ?",
            "sql": "select performance.attendance"
        },
        {
            "utterance": "What are the distinct locations of each performance ?",
            "sql": "select performance.location group_by performance.location"
        },
        {
            "utterance": "How many performances are there at each location ?",
            "sql": "select performance.location , count ( performance.* ) group_by performance.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the most common location of performances.",
        "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show different locations and the number of performances at each location .",
            "sql": "select performance.location , count ( performance.* ) group_by performance.location"
        },
        {
            "utterance": "Which is the least common location ?",
            "sql": "select performance.location group_by performance.location order_by count ( performance.* ) asc limit_value"
        },
        {
            "utterance": "How about the most common one ?",
            "sql": "select performance.location group_by performance.location order_by count ( performance.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the locations that have at least two performances.",
        "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the locations of the performances ?",
            "sql": "select performance.location"
        },
        {
            "utterance": "Show me the number of performances at each location .",
            "sql": "select count ( performance.* ) group_by performance.location"
        },
        {
            "utterance": "Which locations have at least two performances ?",
            "sql": "select performance.location group_by performance.location having count ( performance.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
        "sql": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000"
    },
    "interaction": [
        {
            "utterance": "What are the locations of performances ?",
            "sql": "select performance.location"
        },
        {
            "utterance": "How about locations of performances with less than 1000 attendees ?",
            "sql": "select performance.location where performance.attendance < value"
        },
        {
            "utterance": "What about those with more than 2000 attendees ?",
            "sql": "select performance.location where performance.attendance > value"
        },
        {
            "utterance": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees .",
            "sql": "select performance.location where performance.attendance > value intersect select performance.location where performance.attendance < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of members and the location of the performances they attended.",
        "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID"
    },
    "interaction": [
        {
            "utterance": "What is the role of each member ?",
            "sql": "select member.role"
        },
        {
            "utterance": "How about their names ?",
            "sql": "select member.name"
        },
        {
            "utterance": "Show me in addition the location of the performances they attended .",
            "sql": "select member.name , performance.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
        "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC"
    },
    "interaction": [
        {
            "utterance": "Show me the names of the members .",
            "sql": "select member.name"
        },
        {
            "utterance": "Sort the result in ascending alphabetical order .",
            "sql": "select member.name order_by member.name asc"
        },
        {
            "utterance": "Also provide the locations of the performances they attended ?",
            "sql": "select member.name , performance.location order_by member.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\""
    },
    "interaction": [
        {
            "utterance": "Who are the attending members whose roles are `` Viola '' ?",
            "sql": "select member.name where member.role = value"
        },
        {
            "utterance": "How about Violin ?",
            "sql": "select member.name where member.role = value"
        },
        {
            "utterance": "Show me the dates of performances in which members in the result attended .",
            "sql": "select performance.date where member.role = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "performance_attendance",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
        "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC"
    },
    "interaction": [
        {
            "utterance": "Show me all about the members .",
            "sql": "select member.*"
        },
        {
            "utterance": "What are the dates of performances that each of them attended ? Show name and date .",
            "sql": "select member.name , performance.date"
        },
        {
            "utterance": "Sort the result in descending order of attendance of the performances .",
            "sql": "select member.name , performance.date order_by performance.attendance desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Find all the stage positions of the musicians with first name \"Solveig\"",
        "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\""
    },
    "interaction": [
        {
            "utterance": "Show me all musicians with first name `` Solveig '' .",
            "sql": "select band.* where band.firstname = value"
        },
        {
            "utterance": "Show me their stage positions .",
            "sql": "select distinct performance.stageposition where band.firstname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find all the songs performed by artist with last name \"Heilo\"",
        "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\""
    },
    "interaction": [
        {
            "utterance": "Show me all artists with last name `` Heilo ''",
            "sql": "select band.* where band.lastname = value"
        },
        {
            "utterance": "Find all the songs they have performed .",
            "sql": "select songs.title where band.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 2,
    "final": {
        "utterance": "How many musicians performed in the song \"Flash\"?",
        "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songId  =  T1.songId WHERE T3.Title  =  \"Flash\""
    },
    "interaction": [
        {
            "utterance": "Show me all the musicians who performed in the song `` Flash '' .",
            "sql": "select * where band.lastname = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Find all the songs produced by artists with first name \"Marianne\".",
        "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Firstname  =  \"Marianne\""
    },
    "interaction": [
        {
            "utterance": "Show me all artists with first name `` Marianne ''",
            "sql": "select band.* where band.firstname = value"
        },
        {
            "utterance": "How many songs have they produced in total ?",
            "sql": "select count ( * ) where band.firstname = value"
        },
        {
            "utterance": "Show me the names of those songs .",
            "sql": "select songs.title where band.firstname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\""
    },
    "interaction": [
        {
            "utterance": "Show me all songs containing the word `` Badlands '' .",
            "sql": "select songs.* where songs.title like value"
        },
        {
            "utterance": "How about a song exactly named `` Badlands '' ?",
            "sql": "select songs.* where songs.title = value"
        },
        {
            "utterance": "Who performed it ? Show me the first and last names .",
            "sql": "select band.firstname , band.lastname where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 5,
    "final": {
        "utterance": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\""
    },
    "interaction": [
        {
            "utterance": "Show me all songs containing the word `` Badlands '' .",
            "sql": "select songs.* where songs.title like value"
        },
        {
            "utterance": "How about a song exactly named `` Badlands '' ?",
            "sql": "select songs.* where songs.title = value"
        },
        {
            "utterance": "Who performed it in the back stage position ? Show me the first and last names .",
            "sql": "select band.firstname , band.lastname where songs.title = value and performance.stageposition = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the label that has the most albums?",
        "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the labels of each album .",
            "sql": "select albums.label"
        },
        {
            "utterance": "Among those , which one has the most albums ?",
            "sql": "select albums.label group_by albums.label order_by count ( albums.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the last name of the musician that have produced the most number of songs?",
        "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the first name of the musician that have produced the least number of songs ?",
            "sql": "select band.lastname group_by band.lastname order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the musician who have produced the most number of songs ?",
            "sql": "select band.lastname group_by band.lastname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the last name of the musician that has been at the back position the most?",
        "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me last names of all the musicians who have been at the back position .",
            "sql": "select band.lastname where performance.stageposition = value"
        },
        {
            "utterance": "Who has been at the back position the most ?",
            "sql": "select band.lastname where performance.stageposition = value group_by band.lastname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Find all the songs whose name contains the word \"the\".",
        "sql": "SELECT title FROM songs WHERE title LIKE '% the %'"
    },
    "interaction": [
        {
            "utterance": "Find all the songs whose name starts with the word `` the '' .",
            "sql": "select songs.title where songs.title like value"
        },
        {
            "utterance": "Find all songs that contains that word .",
            "sql": "select songs.title where songs.title like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 10,
    "final": {
        "utterance": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?",
        "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "Find me the id of the song called `` Le Pop '' .",
            "sql": "select songs.songid where songs.title = value"
        },
        {
            "utterance": "Which instruments were used in that song ?",
            "sql": "select instruments.instrument where songs.title = value"
        },
        {
            "utterance": "Which instrument did the musician with last name `` Heilo '' play ?",
            "sql": "select instruments.instrument where band.lastname = value and songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the most used instrument?",
        "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many times was each instrument used ?",
            "sql": "select instruments.instrument , count ( instruments.* ) group_by instruments.instrument"
        },
        {
            "utterance": "Which instrument was the most used ?",
            "sql": "select instruments.instrument group_by instruments.instrument order_by count ( instruments.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 12,
    "final": {
        "utterance": "What instruments does the song \"Le Pop\" use?",
        "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "How many instruments does the song `` Le Pop '' use ?",
            "sql": "select count ( distinct instruments.instrument ) where songs.title = value"
        },
        {
            "utterance": "List them .",
            "sql": "select instruments.instrument where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 13,
    "final": {
        "utterance": "How many instruments does the song \"Le Pop\" use?",
        "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "What instruments does the song `` Le Pop '' use ?",
            "sql": "select instruments.instrument where songs.title = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct instruments.instrument ) where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 14,
    "final": {
        "utterance": "How many instrument does the musician with last name \"Heilo\" use?",
        "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""
    },
    "interaction": [
        {
            "utterance": "What instruments does the musician with last name `` Heilo '' use ?",
            "sql": "select distinct instruments.instrument where band.lastname = value"
        },
        {
            "utterance": "How many instruments are used ?",
            "sql": "select count ( distinct instruments.instrument ) where band.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Find all the instruments ever used by the musician with last name \"Heilo\"?",
        "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""
    },
    "interaction": [
        {
            "utterance": "How many instruments have the musician with last name `` Heilo '' ever use ?",
            "sql": "select count ( instruments.instrument ) where band.lastname = value"
        },
        {
            "utterance": "List those instruments",
            "sql": "select instruments.instrument where band.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 16,
    "final": {
        "utterance": "Which song has the most vocals?",
        "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me how many vocals each song uses .",
            "sql": "select count ( * ) group_by vocals.songid"
        },
        {
            "utterance": "Which one has the most ? Show me the song title .",
            "sql": "select songs.title group_by vocals.songid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 17,
    "final": {
        "utterance": "Which vocal type is the most frequently appearing type?",
        "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all vocal types .",
            "sql": "select vocals.type group_by vocals.type"
        },
        {
            "utterance": "Show me the 5 least frequently appearing types among those .",
            "sql": "select vocals.type group_by vocals.type order_by count ( vocals.* ) asc limit_value"
        },
        {
            "utterance": "Show me the most frequently appearing type .",
            "sql": "select vocals.type group_by vocals.type order_by count ( vocals.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 18,
    "final": {
        "utterance": "Which vocal type has the band mate with last name \"Heilo\" played the most?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all vocal types played by the band mate with last name `` Heilo '' .",
            "sql": "select vocals.type where band.lastname = value group_by vocals.type"
        },
        {
            "utterance": "Which one did they play the most ?",
            "sql": "select vocals.type where band.lastname = value group_by vocals.type order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the vocal types used in song \"Le Pop\"?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "Show me songs named `` Le Pop '' .",
            "sql": "select songs.* where songs.title = value"
        },
        {
            "utterance": "Which vocal type is used in that song ?",
            "sql": "select vocals.type where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\""
    },
    "interaction": [
        {
            "utterance": "What vocal types are used in song `` Demon Kitty Rag '' ?",
            "sql": "select vocals.type where songs.title = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 21,
    "final": {
        "utterance": "How many songs have a lead vocal?",
        "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\""
    },
    "interaction": [
        {
            "utterance": "How many songs are there ?",
            "sql": "select count ( distinct songs.title )"
        },
        {
            "utterance": "Show me the ones with a lead vocal .",
            "sql": "select distinct songs.title where vocals.type = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct songs.title ) where vocals.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\""
    },
    "interaction": [
        {
            "utterance": "Which vocal type does the musician with first name `` Solveig '' play ?",
            "sql": "select vocals.type where band.firstname = value"
        },
        {
            "utterance": "Which one did that musician play in a song called `` A Bar in Amsterdam '' ?",
            "sql": "select vocals.type where band.firstname = value and songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 23,
    "final": {
        "utterance": "Find all the songs that do not have a lead vocal.",
        "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\""
    },
    "interaction": [
        {
            "utterance": "Find songs that have a lead vocal .",
            "sql": "select distinct songs.title where vocals.type = value"
        },
        {
            "utterance": "Find all other songs .",
            "sql": "select distinct songs.title except select songs.title where vocals.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 24,
    "final": {
        "utterance": "Who performed the song named \"Le Pop\"?",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "Find me id of the song named `` Le Pop '' .",
            "sql": "select songs.songid where songs.title = value"
        },
        {
            "utterance": "Who performed that song ?",
            "sql": "select band.firstname , band.lastname where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 25,
    "final": {
        "utterance": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?",
        "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\""
    },
    "interaction": [
        {
            "utterance": "What instrument is used in the song `` Badlands '' ?",
            "sql": "select instruments.instrument where songs.title = value"
        },
        {
            "utterance": "Which instrument did the musician with last name `` Heilo '' use in that song ?",
            "sql": "select instruments.instrument where band.lastname = value and songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 26,
    "final": {
        "utterance": "How many instruments does the song \"Badlands\" use?",
        "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""
    },
    "interaction": [
        {
            "utterance": "Show me all distinct instruments used in the song `` Badlands '' .",
            "sql": "select distinct instruments.instrument where songs.title = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct instruments.instrument ) where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the vocal types used in song \"Badlands\"?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""
    },
    "interaction": [
        {
            "utterance": "Show me all the bandmates in song `` Badlands ''",
            "sql": "select vocals.bandmate where songs.title = value"
        },
        {
            "utterance": "Show me all vocal types used in song `` Badlands '' .",
            "sql": "select vocals.type where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of vocal types used in song \"Le Pop\"",
        "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""
    },
    "interaction": [
        {
            "utterance": "Show me all vocal types used in song `` Le Pop '' .",
            "sql": "select vocals.type where songs.title = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 29,
    "final": {
        "utterance": "How many songs have a shared vocal?",
        "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\""
    },
    "interaction": [
        {
            "utterance": "Show me all songs with shared vocals .",
            "sql": "select distinct songs.title where vocals.type = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct songs.title ) where vocals.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Find all the songs that do not have a back vocal.",
        "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\""
    },
    "interaction": [
        {
            "utterance": "How many songs do not have a back vocal ?",
            "sql": "select count ( distinct songs.title ) except select songs.title where vocals.type = value"
        },
        {
            "utterance": "Show me the titles of those songs .",
            "sql": "select distinct songs.title except select songs.title where vocals.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 31,
    "final": {
        "utterance": "Which vocal type has the band mate with first name \"Solveig\" played the most?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all vocal types played by a bandmate with first name `` Solveig '' .",
            "sql": "select vocals.type where band.firstname = value group_by vocals.type"
        },
        {
            "utterance": "Which one is played the most ?",
            "sql": "select vocals.type where band.firstname = value group_by vocals.type order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 32,
    "final": {
        "utterance": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\""
    },
    "interaction": [
        {
            "utterance": "Which vocal type is played in the song `` Der Kapitan '' ?",
            "sql": "select vocals.type where songs.title = value"
        },
        {
            "utterance": "Which vocal type did the musician with last name `` Heilo '' play ?",
            "sql": "select vocals.type where band.lastname = value and songs.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the first name of the band mate that has performed in most songs.",
        "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which band mate performed in most songs ? Show me the last name .",
            "sql": "select band.lastname group_by band.firstname order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show the first name .",
            "sql": "select band.firstname group_by band.firstname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 34,
    "final": {
        "utterance": "Which vocal type has the band mate with first name \"Marianne\" played the most?",
        "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which vocal type has the band mate with first name `` Marianne '' played ?",
            "sql": "select vocals.type where band.firstname = value group_by vocals.type"
        },
        {
            "utterance": "Which one did she play the most ?",
            "sql": "select vocals.type where band.firstname = value group_by vocals.type order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 35,
    "final": {
        "utterance": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\""
    },
    "interaction": [
        {
            "utterance": "Which bandmates are performing in the song `` Der Kapitan '' ? Show the first name and last name .",
            "sql": "select band.firstname , band.lastname where songs.title = value"
        },
        {
            "utterance": "Who plays in the back stage position ? Show first and last names .",
            "sql": "select band.firstname , band.lastname where songs.title = value and performance.stageposition = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\""
    },
    "interaction": [
        {
            "utterance": "How many songs are there in album `` A Kiss Before You Go : Live in Hamburg '' ?",
            "sql": "select count ( songs.title ) where albums.title = value"
        },
        {
            "utterance": "What are those songs ? Show me the title .",
            "sql": "select songs.title where albums.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_2",
    "interaction_id": 37,
    "final": {
        "utterance": "What are all the songs in albums under label \"Universal Music Group\"?",
        "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\""
    },
    "interaction": [
        {
            "utterance": "How many songs are in albums under label `` Universal Music Group '' ?",
            "sql": "select count ( songs.title ) where albums.label = value"
        },
        {
            "utterance": "Show me the titles of those songs .",
            "sql": "select songs.title where albums.label = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many leagues are there in England?",
        "sql": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
    },
    "interaction": [
        {
            "utterance": "Tell me the country of the league named `` France Ligue 1 '' .",
            "sql": "select country.name where league.name = value"
        },
        {
            "utterance": "How about that of the league named `` Poland Ekstraklasa ''",
            "sql": "select country.name where league.name = value"
        },
        {
            "utterance": "How many leagues are there in England ?",
            "sql": "select count ( * ) where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the maximum and minimum weight of all players?",
        "sql": "SELECT max(weight) ,  min(weight) FROM Player"
    },
    "interaction": [
        {
            "utterance": "Tell me the birthday of the player named Aaron Hunt .",
            "sql": "select player.birthday where player.player_name = value"
        },
        {
            "utterance": "How about his weight ?",
            "sql": "select player.weight where player.player_name = value"
        },
        {
            "utterance": "tell me the maximum and minimum weight of all players .",
            "sql": "select max ( player.weight ) , min ( player.weight )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List all player names who have an overall rating higher than the average.",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )"
    },
    "interaction": [
        {
            "utterance": "Tell me the potential of the player named `` Abasse Ba '' .",
            "sql": "select player_attributes.potential where player.player_name = value"
        },
        {
            "utterance": "How about his finishing times ?",
            "sql": "select player_attributes.finishing where player.player_name = value"
        },
        {
            "utterance": "list all player names who have an overall rating higher than the average .",
            "sql": "select distinct player.player_name where player_attributes.overall_rating > ( select avg ( player_attributes.overall_rating ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of players who have the best dribbling?",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(dribbling) FROM Player_Attributes)"
    },
    "interaction": [
        {
            "utterance": "What are the names of players who have the best crossing ?",
            "sql": "select distinct player.player_name where player_attributes.crossing = ( select max ( player_attributes.crossing ) )"
        },
        {
            "utterance": "What are the names of players who have the best short passing ?",
            "sql": "select distinct player.player_name where player_attributes.short_passing = ( select max ( player_attributes.short_passing ) )"
        },
        {
            "utterance": "What are the names of players who have the best dribbling ?",
            "sql": "select distinct player.player_name where player_attributes.dribbling = ( select max ( player_attributes.dribbling ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\""
    },
    "interaction": [
        {
            "utterance": "Tell me all the players whose defensive work rate is high .",
            "sql": "select distinct player.player_name where player_attributes.defensive_work_rate = value"
        },
        {
            "utterance": "How about players whose attacking work rate is high ?",
            "sql": "select distinct player.player_name where player_attributes.defensive_work_rate = value and player_attributes.attacking_work_rate = value"
        },
        {
            "utterance": "Tell me the names of all players who have a crossing score higher than 90 and prefer their right foot .",
            "sql": "select distinct player.player_name where player_attributes.crossing > value and player_attributes.preferred_foot = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90"
    },
    "interaction": [
        {
            "utterance": "Tell me the names of players who have an overall rating larger than 80 .",
            "sql": "select distinct player.player_name where player_attributes.overall_rating > value"
        },
        {
            "utterance": "Tell me their preferred foot .",
            "sql": "select distinct player.player_name , player_attributes.preferred_foot where player_attributes.overall_rating > value"
        },
        {
            "utterance": "tell me the names of all left-footed players who have overall rating between 85 and 90 .",
            "sql": "select distinct player.player_name where player_attributes.preferred_foot = value and player_attributes.overall_rating > = value and player_attributes.overall_rating < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot"
    },
    "interaction": [
        {
            "utterance": "How many players have an overall rating of 60 or greater ?",
            "sql": "select count ( distinct player.player_name ) where player_attributes.overall_rating > = value"
        },
        {
            "utterance": "How many players have potential of 80 or greater ?",
            "sql": "select count ( distinct player.player_name ) where player_attributes.potential > = value"
        },
        {
            "utterance": "Of all players with an overall rating greater than 80 , how many are right-footed and left-footed ?",
            "sql": "select player_attributes.preferred_foot , count ( player_attributes.* ) where player_attributes.overall_rating > value group_by player_attributes.preferred_foot"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 7,
    "final": {
        "utterance": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85"
    },
    "interaction": [
        {
            "utterance": "What is the height of the player named Abdoulaye Toure ?",
            "sql": "select player.height where player.player_name = value"
        },
        {
            "utterance": "What is his overall rating ?",
            "sql": "select player_attributes.overall_rating where player.player_name = value"
        },
        {
            "utterance": "Tell me all of the player ids with a height of at least 180cm and an overall rating higher than 85 .",
            "sql": "select player.player_api_id where player.height > = value intersect select player_attributes.player_api_id where player_attributes.overall_rating > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\""
    },
    "interaction": [
        {
            "utterance": "Tell me the birthday of the player named `` Aaron Hunt '' .",
            "sql": "select player.birthday where player.player_name = value"
        },
        {
            "utterance": "What is his preferred foot ?",
            "sql": "select player_attributes.preferred_foot where player.player_name = value"
        },
        {
            "utterance": "List all of the ids for left-footed players with a height between 180cm and 190cm .",
            "sql": "select player.player_api_id where player.height > = value and player.height < = value intersect select player_attributes.player_api_id where player_attributes.preferred_foot = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "soccer_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Who are the top 3 players in terms of overall rating?",
        "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "How many players have heading accuracy larger than 70 ?",
            "sql": "select count ( distinct player.player_name ) where player_attributes.heading_accuracy > value"
        },
        {
            "utterance": "Tell me the top three of these ?",
            "sql": "select distinct player.player_name where player_attributes.heading_accuracy > value order_by player_attributes.overall_rating desc limit_value"
        },
        {
            "utterance": "Who are the top 3 players in terms of overall rating ?",
            "sql": "select distinct player.player_name order_by player_attributes.overall_rating desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name and price of the product that has been ordered the greatest number of times.",
        "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different products are available to order ?",
            "sql": "select count ( distinct products.product_id )"
        },
        {
            "utterance": "Order them by the number of times they have been ordered .",
            "sql": "select * group_by regular_order_products.product_id order_by count ( * )"
        },
        {
            "utterance": "Which has been ordered the greatest number of times ?",
            "sql": "select * group_by regular_order_products.product_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Only show the name and price .",
            "sql": "select products.product_name , products.product_price group_by regular_order_products.product_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the most expensive product.",
        "sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "Which of the procucts cost more than this ?",
            "sql": "select products.* where products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "Which is the name of the most expensive product ?",
            "sql": "select products.product_name order_by products.product_price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of customers who are not living in the state of California.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    "interaction": [
        {
            "utterance": "How many customers have addresses on file ?",
            "sql": "select count ( distinct customer_addresses.customer_id )"
        },
        {
            "utterance": "What different states are they from ?",
            "sql": "select distinct addresses.state_province_county"
        },
        {
            "utterance": "Show all information for customers living in the state of California .",
            "sql": "select * where addresses.state_province_county = value"
        },
        {
            "utterance": "Show the names of all customers except these .",
            "sql": "select customers.customer_name except select customers.customer_name where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names and phone numbers of customers living in California state.",
        "sql": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    "interaction": [
        {
            "utterance": "What state or province are the most customer addresses located ?",
            "sql": "select addresses.state_province_county , count ( * ) group_by addresses.state_province_county order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many customers have addresses in the state of California",
            "sql": "select count ( * ) where addresses.state_province_county = value"
        },
        {
            "utterance": "What are their names and phone numbers ?",
            "sql": "select customers.customer_name , customers.customer_phone where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the states which do not have any employee in their record.",
        "sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM employees)"
    },
    "interaction": [
        {
            "utterance": "What are all the different employee address details ?",
            "sql": "select distinct addresses.address_details"
        },
        {
            "utterance": "At which adresses do no employees live ?",
            "sql": "select addresses.* where addresses.address_id not in ( select employees.employee_address_id )"
        },
        {
            "utterance": "What states or provinces are they in ?",
            "sql": "select addresses.state_province_county where addresses.address_id not in ( select employees.employee_address_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of the first 5 customers.",
        "sql": "SELECT customer_name FROM customers ORDER BY date_became_customer LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "What is the customer ID of the person who became a customer most recently ?",
            "sql": "select customers.customer_id order_by customers.date_became_customer desc limit_value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select customers.customer_name order_by customers.date_became_customer desc limit_value"
        },
        {
            "utterance": "How about the earliest 5 customers ?",
            "sql": "select customers.customer_name order_by customers.date_became_customer limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the payment method that is used most frequently.",
        "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order all customer payment methods alphabetically .",
            "sql": "select customers.payment_method order_by customers.payment_method"
        },
        {
            "utterance": "Which is last alphabetically ?",
            "sql": "select customers.payment_method order_by customers.payment_method desc limit_value"
        },
        {
            "utterance": "Which appears most often ?",
            "sql": "select customers.payment_method group_by customers.payment_method order_by count ( customers.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_deliveries",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of route that has the highest number of deliveries.",
        "sql": "SELECT t1.route_name FROM delivery_routes AS t1 JOIN delivery_route_locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all location codes for the delivery locations ?",
            "sql": "select delivery_route_locations.location_code"
        },
        {
            "utterance": "Which route has had the fewest orders delivered ?",
            "sql": "select delivery_route_locations.route_id order_by delivery_route_locations.route_id limit_value"
        },
        {
            "utterance": "Which route has the highest number of delivery locations ?",
            "sql": "select delivery_routes.route_name group_by delivery_routes.route_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "Show the name and access counts of them in alphabetic order of the name .",
            "sql": "select documents.document_name , documents.access_count order_by documents.document_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names and access counts of all the documents ?",
            "sql": "select documents.document_name , documents.access_count"
        },
        {
            "utterance": "Which one has been accessed the greatest number of times ?",
            "sql": "select documents.document_name , documents.access_count order_by documents.access_count desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the types of documents with more than 4 documents.",
        "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "Which document types are there ?",
            "sql": "select documents.document_type_code group_by documents.document_type_code"
        },
        {
            "utterance": "Which types have more than 4 documents ?",
            "sql": "select documents.document_type_code group_by documents.document_type_code having count ( documents.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the total access count of all documents in the most popular document type.",
        "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "What are the total access counts of documents in terms of document type ?",
            "sql": "select sum ( documents.access_count ) group_by documents.document_type_code"
        },
        {
            "utterance": "Which is the largest among them ?",
            "sql": "select sum ( documents.access_count ) group_by documents.document_type_code order_by count ( documents.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average access count of documents?",
        "sql": "SELECT avg(access_count) FROM documents"
    },
    "interaction": [
        {
            "utterance": "What are access counts all the documents ?",
            "sql": "select documents.access_count"
        },
        {
            "utterance": "Show their average .",
            "sql": "select avg ( documents.access_count )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the type of the document named \"David CV\"?",
        "sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\""
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "Show the type of the one named `` David CV '' .",
            "sql": "select documents.document_type_code where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 6,
    "final": {
        "utterance": "What document types do have more than 10000 total access number.",
        "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "Which document types have more than 10000 total access number ?",
            "sql": "select documents.document_type_code group_by documents.document_type_code having sum ( documents.access_count ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 7,
    "final": {
        "utterance": "What are all the section titles of the document named \"David CV\"?",
        "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\""
    },
    "interaction": [
        {
            "utterance": "What is the document named `` David CV '' ?",
            "sql": "select documents.* where documents.document_name = value"
        },
        {
            "utterance": "What are all the section titils of it ?",
            "sql": "select document_sections.section_title where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all the name of documents without any sections.",
        "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "Show those without any sections .",
            "sql": "select documents.document_name where documents.document_code not in ( select document_sections.document_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\""
    },
    "interaction": [
        {
            "utterance": "What are all the documents with functional area `` Acknowledgement '' ?",
            "sql": "select * where functional_areas.functional_area_description = value"
        },
        {
            "utterance": "Show the average access counts for each of them .",
            "sql": "select avg ( documents.access_count ) where functional_areas.functional_area_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 10,
    "final": {
        "utterance": "Find names of the document without any images.",
        "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "Show those without any images .",
            "sql": "select documents.document_name except select documents.document_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of the document with the most number of sections?",
        "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "Show their names in the order of number of sections .",
            "sql": "select documents.document_name group_by documents.document_code order_by count ( * )"
        },
        {
            "utterance": "What is the name of the one with the most number of sections ?",
            "sql": "select documents.document_name group_by documents.document_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 12,
    "final": {
        "utterance": "List all the document names which contains \"CV\".",
        "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the documents ?",
            "sql": "select documents.document_name"
        },
        {
            "utterance": "Show those that contain `` CV '' .",
            "sql": "select documents.document_name where documents.document_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 13,
    "final": {
        "utterance": "How many users are logged in?",
        "sql": "SELECT count(*) FROM users WHERE user_login  =  1"
    },
    "interaction": [
        {
            "utterance": "Who are all the users ?",
            "sql": "select users.*"
        },
        {
            "utterance": "Show those who are logged in .",
            "sql": "select count ( users.* ) where users.user_login = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the description of the most popular role among the users that have logged in.",
        "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are all the users that have logged in ?",
            "sql": "select users.* where users.user_login = value"
        },
        {
            "utterance": "Among those users , which role is the most popular one ?",
            "sql": "select users.role_code where users.user_login = value group_by users.role_code order_by count ( users.* ) desc limit_value"
        },
        {
            "utterance": "Show the description of that role .",
            "sql": "select roles.role_description where roles.role_code = ( select users.role_code where users.user_login = value group_by users.role_code order_by count ( users.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the average access count of documents with the least popular structure.",
        "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the documents ?",
            "sql": "select documents.*"
        },
        {
            "utterance": "What are the average access counts in terms of each document structure ?",
            "sql": "select avg ( documents.access_count ) group_by documents.document_structure_code"
        },
        {
            "utterance": "Show the one with the least popular structure .",
            "sql": "select avg ( documents.access_count ) group_by documents.document_structure_code order_by count ( documents.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 16,
    "final": {
        "utterance": "List all the image name and URLs in the order of their names.",
        "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name"
    },
    "interaction": [
        {
            "utterance": "Show all the images .",
            "sql": "select images.*"
        },
        {
            "utterance": "Show their names and URLs in the order of their names .",
            "sql": "select images.image_name , images.image_url order_by images.image_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "document_management",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the number of users in each role.",
        "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code"
    },
    "interaction": [
        {
            "utterance": "What are all the users ?",
            "sql": "select users.*"
        },
        {
            "utterance": "What are the different kinds of roles among them ?",
            "sql": "select users.role_code group_by users.role_code"
        },
        {
            "utterance": "Show the number of users in each role .",
            "sql": "select count ( users.* ) , users.role_code group_by users.role_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 0,
    "final": {
        "utterance": "Which policy type has the most records in the database?",
        "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the policy types .",
            "sql": "select available_policies.policy_type_code"
        },
        {
            "utterance": "Show me the type with most records in the database .",
            "sql": "select available_policies.policy_type_code group_by available_policies.policy_type_code order_by count ( available_policies.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 1,
    "final": {
        "utterance": "What are all the customer phone numbers under the most popular policy type?",
        "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What is the most popular policy type ?",
            "sql": "select available_policies.policy_type_code group_by available_policies.policy_type_code order_by count ( available_policies.* ) desc limit_value"
        },
        {
            "utterance": "Show me all the customer phone numbers associated with it .",
            "sql": "select available_policies.customer_phone where available_policies.policy_type_code = ( select available_policies.policy_type_code group_by available_policies.policy_type_code order_by count ( available_policies.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the policy type used by more than 4 customers.",
        "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4"
    },
    "interaction": [
        {
            "utterance": "Show me the policy type used by more than 3 customers .",
            "sql": "select available_policies.policy_type_code group_by available_policies.policy_type_code having count ( available_policies.* ) > value"
        },
        {
            "utterance": "Show me the same for more than 4 customers .",
            "sql": "select available_policies.policy_type_code group_by available_policies.policy_type_code having count ( available_policies.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the total and average amount of settlements.",
        "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"
    },
    "interaction": [
        {
            "utterance": "What is the maximum amount of settlements ?",
            "sql": "select max ( settlements.settlement_amount )"
        },
        {
            "utterance": "What is the total amount of settlements ?",
            "sql": "select sum ( settlements.settlement_amount )"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( settlements.settlement_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Find the name of services that have been used in first notification of loss .",
            "sql": "select services.service_name group_by first_notification_of_loss.service_id having count ( * ) > value"
        },
        {
            "utterance": "Find services used more than twice in first notification of loss .",
            "sql": "select services.service_name group_by first_notification_of_loss.service_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the effective date of the claim that has the largest amount of total settlement?",
        "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the ID of the claim that has the smallest amount of total settlement ?",
            "sql": "select claims.claim_id group_by claims.claim_id order_by sum ( settlements.settlement_amount ) asc limit_value"
        },
        {
            "utterance": "What is its effective date ?",
            "sql": "select claims.effective_date group_by claims.claim_id order_by sum ( settlements.settlement_amount ) asc limit_value"
        },
        {
            "utterance": "Show me the same for the effective date of claim with largest amount of total sum .",
            "sql": "select claims.effective_date group_by claims.claim_id order_by sum ( settlements.settlement_amount ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 6,
    "final": {
        "utterance": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "Show me the policies listed for the customer named `` Dayana Robel '' .",
            "sql": "select * where customers.customer_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the customer who has the most policies listed?",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who has the least policies listed ?",
            "sql": "select customers.customer_name group_by customers.customer_name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the most policies listed ?",
            "sql": "select customers.customer_name group_by customers.customer_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 8,
    "final": {
        "utterance": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What is the phone number of the customer named `` Dayana Robel '' ?",
            "sql": "select distinct available_policies.customer_phone where customers.customer_name = value"
        },
        {
            "utterance": "Show me all the policy types associated with that phone number .",
            "sql": "select distinct available_policies.policy_type_code where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 9,
    "final": {
        "utterance": "What are all the policy types of the customer that has the most policies listed?",
        "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who has the most policies listed ?",
            "sql": "select customers.customer_name group_by customers.customer_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How many policy types has the customer listed ?",
            "sql": "select distinct count ( * ) where customers.customer_name = ( select customers.customer_name group_by customers.customer_name order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "List all of them please .",
            "sql": "select distinct available_policies.policy_type_code where customers.customer_name = ( select customers.customer_name group_by customers.customer_name order_by count ( * ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of users who do not have a first notification of loss record.",
        "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Find the ids of customers without first notification of loss record .",
            "sql": "select customers.customer_id except select customers.customer_name"
        },
        {
            "utterance": "Show me their names .",
            "sql": "select customers.customer_name except select customers.customer_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    "interaction": [
        {
            "utterance": "Find me names of customers who have used the service `` Close a policy '' .",
            "sql": "select customers.customer_name where services.service_name = value"
        },
        {
            "utterance": "Find me names of customers who have also used the service `` Upgrade a policy '' .",
            "sql": "select customers.customer_name where services.service_name = value and services.service_name = value"
        },
        {
            "utterance": "Find me names of customers who have used either of the two services .",
            "sql": "select customers.customer_name where services.service_name = value or services.service_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
        "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\""
    },
    "interaction": [
        {
            "utterance": "Find the names of customers who have used both the service `` Close a policy '' or the service `` Upgrade a policy '' .",
            "sql": "select customers.customer_name where services.service_name = value intersect select customers.customer_name where services.service_name = value"
        },
        {
            "utterance": "How about customers who have used both `` Close a policy '' and `` New policy application '' ?",
            "sql": "select customers.customer_name where services.service_name = value intersect select customers.customer_name where services.service_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the IDs of customers whose name contains \"Diana\".",
        "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    "interaction": [
        {
            "utterance": "How many customers are there whose name contains `` Diana '' ?",
            "sql": "select count ( customers.* ) where customers.customer_name like value"
        },
        {
            "utterance": "Show me their IDs",
            "sql": "select customers.customer_id where customers.customer_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_fnol",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the maximum and minimum settlement amount on record?",
        "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements"
    },
    "interaction": [
        {
            "utterance": "What is the average settlement amount on record ?",
            "sql": "select avg ( settlements.settlement_amount )"
        },
        {
            "utterance": "What are the maximum and minimum ?",
            "sql": "select max ( settlements.settlement_amount ) , min ( settlements.settlement_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the highest rated wine?",
        "sql": "SELECT Name FROM WINE ORDER BY Score DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show all info of wines .",
            "sql": "select wine.*"
        },
        {
            "utterance": "what is their average rated score ?",
            "sql": "select avg ( wine.score )"
        },
        {
            "utterance": "find the name of the lowest rated wine .",
            "sql": "select wine.name order_by wine.score limit_value"
        },
        {
            "utterance": "what about the highest rated one ?",
            "sql": "select wine.name order_by wine.score desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which winery is the wine that has the highest score from?",
        "sql": "SELECT Winery FROM WINE ORDER BY SCORE DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the highest rated wine ?",
            "sql": "select wine.name order_by wine.score desc limit_value"
        },
        {
            "utterance": "Which winery is it from ?",
            "sql": "select wine.winery order_by wine.score desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of all distinct wines that are made of red color grape.",
        "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\""
    },
    "interaction": [
        {
            "utterance": "how many wines are there ?",
            "sql": "select count ( wine.* )"
        },
        {
            "utterance": "how many are made of red color grape ?",
            "sql": "select count ( * ) where grapes.color = value"
        },
        {
            "utterance": "only show their names .",
            "sql": "select distinct wine.name where grapes.color = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of all distinct wines that have appellations in North Coast area.",
        "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\""
    },
    "interaction": [
        {
            "utterance": "what are all appellations ?",
            "sql": "select appellations.appelation"
        },
        {
            "utterance": "which of them are in the North Coast area ?",
            "sql": "select appellations.appelation where appellations.area = value"
        },
        {
            "utterance": "Find the names of all distinct wines from those appellations .",
            "sql": "select distinct wine.name where appellations.area = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me the average prices of wines that are produced by appellations in Sonoma County.",
        "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""
    },
    "interaction": [
        {
            "utterance": "what appellations does Sonoma County have ?",
            "sql": "select appellations.appelation where appellations.county = value"
        },
        {
            "utterance": "Give me the name of wines that are produced by them .",
            "sql": "select wine.name where appellations.county = value"
        },
        {
            "utterance": "what is their average price ?",
            "sql": "select avg ( wine.price ) where appellations.county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names and scores of wines that are made of white color grapes?",
        "sql": "SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""
    },
    "interaction": [
        {
            "utterance": "what are all the different colors of grapes ?",
            "sql": "select distinct grapes.color"
        },
        {
            "utterance": "What are the names of wines that are made of white color grapes ?",
            "sql": "select wine.name where grapes.color = value"
        },
        {
            "utterance": "also show their scores .",
            "sql": "select wine.name , wine.score where grapes.color = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the maximum price of wines from the appelations in Central Coast area and produced before the year of 2005.",
        "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005"
    },
    "interaction": [
        {
            "utterance": "how many wines were produced before the year of 2005 ?",
            "sql": "select count ( wine.* ) where wine.year < value"
        },
        {
            "utterance": "how many of them were made by appelations in the Central Coast area ?",
            "sql": "select count ( * ) where appellations.area = value and wine.year < value"
        },
        {
            "utterance": "what is the maximum price among them ?",
            "sql": "select max ( wine.price ) where appellations.area = value and wine.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the different white color grapes that produced wines with scores higher than 90.",
        "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"
    },
    "interaction": [
        {
            "utterance": "show the name of the wines with scores higher than 90 .",
            "sql": "select wine.name where wine.score > value"
        },
        {
            "utterance": "among them , which are made from white grapes ?",
            "sql": "select wine.name where grapes.color = value and wine.score > value"
        },
        {
            "utterance": "what different grape varieties were they made from ?",
            "sql": "select distinct grapes.grape where grapes.color = value and wine.score > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"
    },
    "interaction": [
        {
            "utterance": "how many wines are there ?",
            "sql": "select count ( wine.* )"
        },
        {
            "utterance": "how many of them have a price higher than 50 ?",
            "sql": "select count ( wine.* ) where wine.price > value"
        },
        {
            "utterance": "find their names .",
            "sql": "select wine.name where wine.price > value"
        },
        {
            "utterance": "which are made from red colored grapes ?",
            "sql": "select wine.name where grapes.color = value and wine.price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50"
    },
    "interaction": [
        {
            "utterance": "Find the name of the wines that have prices lower than 50 .",
            "sql": "select wine.name where wine.price < value"
        },
        {
            "utterance": "which ones have appellations from Monterey county ?",
            "sql": "select wine.name where appellations.county = value and wine.price < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"
    },
    "interaction": [
        {
            "utterance": "find the lowest price of all wines .",
            "sql": "select min ( wine.price )"
        },
        {
            "utterance": "how about among those from John Anthony winery ?",
            "sql": "select min ( wine.price ) where wine.winery = value"
        },
        {
            "utterance": "Find the distinct names of all wines that have prices higher than that .",
            "sql": "select distinct wine.name where wine.price > ( select min ( wine.price ) where wine.winery = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
        "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many wines were produced before the year of 2010 ?",
            "sql": "select count ( wine.* ) where wine.year < value"
        },
        {
            "utterance": "which appellation produced the highest number of these ?",
            "sql": "select wine.appelation where wine.year < value group_by wine.appelation order_by count ( wine.* ) desc limit_value"
        },
        {
            "utterance": "What is the area where that appellation is from ?",
            "sql": "select appellations.area group_by wine.appelation having wine.year < value order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the color of the grape whose wine products have the highest average price?",
        "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are all different colors of grapes ?",
            "sql": "select distinct grapes.color"
        },
        {
            "utterance": "which one produces the wines with the highest average price ?",
            "sql": "select grapes.color group_by wine.grape order_by avg ( wine.price ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"
    },
    "interaction": [
        {
            "utterance": "Find the distinct names of wines produced before the year of 2000 .",
            "sql": "select distinct wine.name where wine.year < value"
        },
        {
            "utterance": "also list the different names of wines produced after 2010 .",
            "sql": "select distinct wine.name where wine.year < value or wine.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\""
    },
    "interaction": [
        {
            "utterance": "how many wines are made from Zinfandel grapes ?",
            "sql": "select count ( wine.* ) where wine.grape = value"
        },
        {
            "utterance": "What are the average prices and number of cases for these wines ?",
            "sql": "select avg ( wine.price ) , avg ( wine.cases ) where wine.grape = value"
        },
        {
            "utterance": "only show numbers for the ones produced in 2009 .",
            "sql": "select avg ( wine.price ) , avg ( wine.cases ) where wine.year = value and wine.grape = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the maximum price and score of wines produced by St. Helena appelation?",
        "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\""
    },
    "interaction": [
        {
            "utterance": "find the names of all wines produced by the St. Helena appelation .",
            "sql": "select wine.name where wine.appelation = value"
        },
        {
            "utterance": "which one is the most expensive ?",
            "sql": "select wine.name where wine.appelation = value order_by wine.price desc limit_value"
        },
        {
            "utterance": "what is its price ?",
            "sql": "select max ( wine.price ) where wine.appelation = value"
        },
        {
            "utterance": "also show the best score earned by these wines .",
            "sql": "select max ( wine.price ) , max ( wine.score ) where wine.appelation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the maximum price and score of wines in each year?",
        "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR"
    },
    "interaction": [
        {
            "utterance": "how many wines were produced in each year ?",
            "sql": "select count ( wine.* ) , wine.year group_by wine.year"
        },
        {
            "utterance": "What are the maximum price and score of wines in each year ?",
            "sql": "select max ( wine.price ) , max ( wine.score ) , wine.year group_by wine.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the average price and score of wines grouped by appelation?",
        "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation"
    },
    "interaction": [
        {
            "utterance": "how many different appellations are there ?",
            "sql": "select count ( distinct appellations.appelation )"
        },
        {
            "utterance": "what is the average price for wines from each of them ?",
            "sql": "select avg ( wine.price ) , wine.appelation group_by wine.appelation"
        },
        {
            "utterance": "what are their average scores too ?",
            "sql": "select avg ( wine.price ) , avg ( wine.score ) , wine.appelation group_by wine.appelation"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the wineries that have at least four wines.",
        "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4"
    },
    "interaction": [
        {
            "utterance": "what are all the different wineries ?",
            "sql": "select distinct wine.winery"
        },
        {
            "utterance": "how many are there ?",
            "sql": "select count ( distinct wine.winery )"
        },
        {
            "utterance": "show those that have at least four wines .",
            "sql": "select wine.winery group_by wine.winery having count ( wine.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the country of all appelations who have at most three wines.",
        "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3"
    },
    "interaction": [
        {
            "utterance": "find the appellations that have more three wines .",
            "sql": "select wine.appelation group_by wine.appelation having count ( wine.* ) > value"
        },
        {
            "utterance": "how about those that have at most three ?",
            "sql": "select wine.appelation group_by wine.appelation having count ( wine.* ) < = value"
        },
        {
            "utterance": "find the countries of these appellations .",
            "sql": "select appellations.county group_by wine.appelation having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"
    },
    "interaction": [
        {
            "utterance": "show the name and year of all wines by Brander winery .",
            "sql": "select wine.name , wine.year where wine.winery = value"
        },
        {
            "utterance": "which one was made the earliest ?",
            "sql": "select wine.name , wine.year where wine.winery = value order_by wine.year limit_value"
        },
        {
            "utterance": "What are the names of all wines that were produced before this year ?",
            "sql": "select wine.name where wine.year < ( select min ( wine.year ) where wine.winery = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the names of wines that are more expensive than all wines made in the year 2006?",
        "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)"
    },
    "interaction": [
        {
            "utterance": "what are the names of wines made during the year 2006 ?",
            "sql": "select wine.name where wine.year = value"
        },
        {
            "utterance": "which one is the most expensive ?",
            "sql": "select wine.name where wine.year = value order_by wine.price desc limit_value"
        },
        {
            "utterance": "what is the price ?",
            "sql": "select max ( wine.price ) where wine.year = value"
        },
        {
            "utterance": "What are the names of wines that are more expensive than that ?",
            "sql": "select wine.name where wine.price > ( select max ( wine.price ) where wine.year = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "how many wines are made of white colored grapes ?",
            "sql": "select count ( * ) where grapes.color = value"
        },
        {
            "utterance": "which winery produced the greatest number of these wines ?",
            "sql": "select wine.winery where grapes.color = value group_by wine.winery order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "how the top 3 wineries ?",
            "sql": "select wine.winery where grapes.color = value group_by wine.winery order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"
    },
    "interaction": [
        {
            "utterance": "how many wines cost more than 100 ?",
            "sql": "select count ( wine.* ) where wine.price > value"
        },
        {
            "utterance": "List the grape , winery and year of these wines .",
            "sql": "select wine.grape , wine.winery , wine.year where wine.price > value"
        },
        {
            "utterance": "order them by their produce year .",
            "sql": "select wine.grape , wine.winery , wine.year where wine.price > value order_by wine.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 24,
    "final": {
        "utterance": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
    },
    "interaction": [
        {
            "utterance": "list all info for wines ordered by their names .",
            "sql": "select wine.* order_by wine.name"
        },
        {
            "utterance": "only show those whose score is higher than 93 .",
            "sql": "select wine.* where wine.score > value order_by wine.name"
        },
        {
            "utterance": "show their name only .",
            "sql": "select wine.name where wine.score > value order_by wine.name"
        },
        {
            "utterance": "also give me their grapes and appellations .",
            "sql": "select wine.grape , wine.appelation , wine.name where wine.score > value order_by wine.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""
    },
    "interaction": [
        {
            "utterance": "how many wines were made after the year 2008 ?",
            "sql": "select count ( wine.* ) where wine.year > value"
        },
        {
            "utterance": "what are their appellations ?",
            "sql": "select wine.appelation where wine.year > value"
        },
        {
            "utterance": "which of them are not in the Central Coast area ?",
            "sql": "select wine.appelation where wine.year > value except select appellations.appelation where appellations.area = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wine_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the average price of wines that are not produced from Sonoma county.",
        "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"
    },
    "interaction": [
        {
            "utterance": "Find the average price of wines .",
            "sql": "select avg ( wine.price )"
        },
        {
            "utterance": "how about for the wines with appellations from Sonoma county ?",
            "sql": "select avg ( wine.price ) where appellations.county = value"
        },
        {
            "utterance": "what is the average for wines that are not produced from there ?",
            "sql": "select avg ( wine.price ) where wine.appelation not in ( select appellations.appelation where appellations.county = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
    },
    "interaction": [
        {
            "utterance": "Show me the sales for each company !",
            "sql": "select companies.id , companies.sales_billion"
        },
        {
            "utterance": "Also , include the industry they are in !",
            "sql": "select companies.id , companies.sales_billion , companies.industry"
        },
        {
            "utterance": "Which ones are not in the Banking industry ?",
            "sql": "select companies.id , companies.sales_billion , companies.industry where companies.industry != value"
        },
        {
            "utterance": "What are the minimum and maximum sales ?",
            "sql": "select max ( companies.sales_billion ) , min ( companies.sales_billion ) where companies.industry != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the stories of the building with the largest height.",
        "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the heights of each building .",
            "sql": "select buildings.id , buildings.height"
        },
        {
            "utterance": "What is the average height ?",
            "sql": "select avg ( buildings.height )"
        },
        {
            "utterance": "How about the max height ?",
            "sql": "select buildings.height order_by buildings.height desc limit_value"
        },
        {
            "utterance": "How many stories does the building with this height have ?",
            "sql": "select buildings.stories order_by buildings.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name of a building along with the name of a company whose office is in the building.",
        "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id"
    },
    "interaction": [
        {
            "utterance": "What are names of all the companies ?",
            "sql": "select companies.name"
        },
        {
            "utterance": "How many of them have office locations ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "Which are they ?",
            "sql": "select companies.name"
        },
        {
            "utterance": "Also , provide the names all the office locations for each !",
            "sql": "select companies.name , buildings.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of the buildings that have more than one company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the buildings ?",
            "sql": "select buildings.name"
        },
        {
            "utterance": "Which ones have at least one company office ?",
            "sql": "select buildings.name"
        },
        {
            "utterance": "How about at least two ?",
            "sql": "select buildings.name group_by office_locations.building_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name of the building that has the most company offices.",
        "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the buildings with at least one company office ?",
            "sql": "select *"
        },
        {
            "utterance": "How many offices do they each have ?",
            "sql": "select office_locations.building_id , count ( * ) group_by office_locations.building_id"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select * group_by office_locations.building_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is its name ?",
            "sql": "select buildings.name group_by office_locations.building_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC"
    },
    "interaction": [
        {
            "utterance": "List the names of the buildings that have a status on-hold .",
            "sql": "select buildings.name where buildings.status = value"
        },
        {
            "utterance": "Also , list their height and number of stories .",
            "sql": "select buildings.name , buildings.height , buildings.stories where buildings.status = value"
        },
        {
            "utterance": "Actually just show the names and number of stories for each !",
            "sql": "select buildings.name , buildings.stories where buildings.status = value"
        },
        {
            "utterance": "Can you just show the names sorted by number of stories FROM least to greatest ?",
            "sql": "select buildings.name where buildings.status = value order_by buildings.stories asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 6,
    "final": {
        "utterance": "Please show the industries of companies in descending order of the number of companies.",
        "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Show each company id and its industry .",
            "sql": "select companies.id , companies.industry"
        },
        {
            "utterance": "Show how many companies are in each industry .",
            "sql": "select companies.industry , count ( companies.* ) group_by companies.industry"
        },
        {
            "utterance": "Sort industries by the number of companies in a descending order !",
            "sql": "select companies.industry , count ( companies.* ) group_by companies.industry order_by count ( companies.* ) desc"
        },
        {
            "utterance": "Actually , can you just show the industries !",
            "sql": "select companies.industry group_by companies.industry order_by count ( companies.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 7,
    "final": {
        "utterance": "List the industry shared by the most companies.",
        "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different company industries are there ?",
            "sql": "select count ( distinct companies.industry )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select distinct companies.industry"
        },
        {
            "utterance": "Which one has the least number of companies ?",
            "sql": "select companies.industry group_by companies.industry order_by count ( companies.* ) asc limit_value"
        },
        {
            "utterance": "How about the most ?",
            "sql": "select companies.industry group_by companies.industry order_by count ( companies.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of buildings that have no company office.",
        "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)"
    },
    "interaction": [
        {
            "utterance": "How many buildings are there ?",
            "sql": "select count ( buildings.* )"
        },
        {
            "utterance": "How many have a company office ?",
            "sql": "select count ( distinct office_locations.building_id )"
        },
        {
            "utterance": "What are their building names ?",
            "sql": "select buildings.name group_by buildings.id"
        },
        {
            "utterance": "What are the names of the buildings other than those ?",
            "sql": "select buildings.name where buildings.id not in ( select office_locations.building_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
        "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\""
    },
    "interaction": [
        {
            "utterance": "How many different industries have companies have headquarters in USA ?",
            "sql": "select count ( distinct companies.industry ) where companies.headquarters = value"
        },
        {
            "utterance": "headquarters in China ?",
            "sql": "select count ( distinct companies.industry ) where companies.headquarters = value"
        },
        {
            "utterance": "how about both ?",
            "sql": "select count ( companies.* ) ( select companies.industry where companies.headquarters = value intersect select companies.industry where companies.headquarters = value )"
        },
        {
            "utterance": "Which ones ?",
            "sql": "select companies.industry where companies.headquarters = value intersect select companies.industry where companies.headquarters = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_office",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\""
    },
    "interaction": [
        {
            "utterance": "What industry is each company in ?",
            "sql": "select companies.id , companies.industry"
        },
        {
            "utterance": "How many companies are in Banking industry ?",
            "sql": "select count ( companies.* ) where companies.industry = value"
        },
        {
            "utterance": "How about in the industry Conglomerate ?",
            "sql": "select count ( companies.* ) where companies.industry = value"
        },
        {
            "utterance": "How many in total are in either one ?",
            "sql": "select count ( companies.* ) where companies.industry = value or companies.industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 0,
    "final": {
        "utterance": "How many artists do we have?",
        "sql": "SELECT count(*) FROM artist"
    },
    "interaction": [
        {
            "utterance": "Show all info about artists .",
            "sql": "select artist.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( artist.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all artist name, age, and country ordered by the year they joined.",
        "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    "interaction": [
        {
            "utterance": "Show all info about artists",
            "sql": "select artist.*"
        },
        {
            "utterance": "Can you just give me their name and age ?",
            "sql": "select artist.name , artist.age"
        },
        {
            "utterance": "Ohh also add their country .",
            "sql": "select artist.name , artist.age , artist.country"
        },
        {
            "utterance": "Sort them by the year they joined .",
            "sql": "select artist.name , artist.age , artist.country order_by artist.year_join"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 2,
    "final": {
        "utterance": "What are all distinct country for artists?",
        "sql": "SELECT DISTINCT country FROM artist"
    },
    "interaction": [
        {
            "utterance": "Show all artists .",
            "sql": "select artist.*"
        },
        {
            "utterance": "What are their countries ?",
            "sql": "select artist.country"
        },
        {
            "utterance": "Just give me distinct ones .",
            "sql": "select distinct artist.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all artist names and the year joined who are not from United States.",
        "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"
    },
    "interaction": [
        {
            "utterance": "Show all artists .",
            "sql": "select artist.*"
        },
        {
            "utterance": "What are their names and year they joined ?",
            "sql": "select artist.name , artist.year_join"
        },
        {
            "utterance": "Oh please just consider those who are not from United States .",
            "sql": "select artist.name , artist.year_join where artist.country != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 4,
    "final": {
        "utterance": "How many artists are above age 46 and joined after 1990?",
        "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    "interaction": [
        {
            "utterance": "Which artists have an age above 46 ?",
            "sql": "select artist.* where artist.age > value"
        },
        {
            "utterance": "Which artists have an age above 46 and joined after 1990 ?",
            "sql": "select artist.* where artist.age > value and artist.year_join > value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( artist.* ) where artist.age > value and artist.year_join > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average and minimum age of all artists from United States.",
        "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
    },
    "interaction": [
        {
            "utterance": "Show all artists .",
            "sql": "select artist.*"
        },
        {
            "utterance": "Just show those from United States .",
            "sql": "select artist.* where artist.country = value"
        },
        {
            "utterance": "What is their average age ?",
            "sql": "select avg ( artist.age ) where artist.country = value"
        },
        {
            "utterance": "Also show their minimum age .",
            "sql": "select avg ( artist.age ) , min ( artist.age ) where artist.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the artist who joined latest?",
        "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the year each artist joined ?",
            "sql": "select artist.year_join"
        },
        {
            "utterance": "Can you order artists by the year they joined ?",
            "sql": "select artist.* order_by artist.year_join"
        },
        {
            "utterance": "What is the name of the artist who joined latest ?",
            "sql": "select artist.name order_by artist.year_join desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 7,
    "final": {
        "utterance": "How many exhibition are there in year 2005 or after?",
        "sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
    },
    "interaction": [
        {
            "utterance": "Show all info about exhibition .",
            "sql": "select exhibition.*"
        },
        {
            "utterance": "Hmm just show those that took place after year 2005 .",
            "sql": "select exhibition.* where exhibition.year > = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( exhibition.* ) where exhibition.year > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 8,
    "final": {
        "utterance": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15"
    },
    "interaction": [
        {
            "utterance": "Show all info about exhibition .",
            "sql": "select exhibition.*"
        },
        {
            "utterance": "What are their themes and years ?",
            "sql": "select exhibition.theme , exhibition.year"
        },
        {
            "utterance": "Which themes and years had ticket prices lower than 15 ?",
            "sql": "select exhibition.theme , exhibition.year where exhibition.ticket_price < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 9,
    "final": {
        "utterance": "Show all artist names and the number of exhibitions for each artist.",
        "sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"
    },
    "interaction": [
        {
            "utterance": "Show all artist names .",
            "sql": "select artist.name"
        },
        {
            "utterance": "Show all exhibitions .",
            "sql": "select exhibition.*"
        },
        {
            "utterance": "Count exhibitions for each artist .",
            "sql": "select count ( * ) group_by exhibition.artist_id"
        },
        {
            "utterance": "Show all artist names and the number of exhibitions for each artist .",
            "sql": "select artist.name , count ( * ) group_by exhibition.artist_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name and country for the artist with most number of exhibitions?",
        "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count exhibitions for each artist .",
            "sql": "select count ( * ) group_by exhibition.artist_id"
        },
        {
            "utterance": "Which artist has the most exhibitions ?",
            "sql": "select * group_by exhibition.artist_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Give me his or her name and country .",
            "sql": "select artist.name , artist.country group_by exhibition.artist_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 11,
    "final": {
        "utterance": "Show names for artists without any exhibition.",
        "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
    },
    "interaction": [
        {
            "utterance": "Show all artist ids involved in an exhibition .",
            "sql": "select exhibition.artist_id"
        },
        {
            "utterance": "Which artists did not have any exhibition ?",
            "sql": "select artist.* where artist.artist_id not in ( select exhibition.artist_id )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select artist.name where artist.artist_id not in ( select exhibition.artist_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
    },
    "interaction": [
        {
            "utterance": "Show all exhibitions .",
            "sql": "select exhibition.*"
        },
        {
            "utterance": "What is the average ticket price ?",
            "sql": "select avg ( exhibition.ticket_price )"
        },
        {
            "utterance": "Which exhibitions have a ticket price higher than the average ?",
            "sql": "select exhibition.* where exhibition.ticket_price > ( select avg ( exhibition.ticket_price ) )"
        },
        {
            "utterance": "What are the themes and artist names for the exhibitions with a ticket price higher than the average ?",
            "sql": "select exhibition.theme , artist.name where exhibition.ticket_price > ( select avg ( exhibition.ticket_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"
    },
    "interaction": [
        {
            "utterance": "Show all info about exhibitions .",
            "sql": "select exhibition.*"
        },
        {
            "utterance": "Which exhibitions were before year 2009 ?",
            "sql": "select exhibition.* where exhibition.year < value"
        },
        {
            "utterance": "What are their average ticket prices ?",
            "sql": "select avg ( exhibition.ticket_price ) where exhibition.year < value"
        },
        {
            "utterance": "Can you also show their minimum , and maximum ticket prices ?",
            "sql": "select avg ( exhibition.ticket_price ) , min ( exhibition.ticket_price ) , max ( exhibition.ticket_price ) where exhibition.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 14,
    "final": {
        "utterance": "Show theme and year for all exhibitions in a descending order of ticket price.",
        "sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC"
    },
    "interaction": [
        {
            "utterance": "What is the ticket price of each exhibition ?",
            "sql": "select exhibition.ticket_price"
        },
        {
            "utterance": "Sort exhibitions in a descending order of ticket price .",
            "sql": "select exhibition.* order_by exhibition.ticket_price desc"
        },
        {
            "utterance": "Can you show the theme and year of exhibitions ?",
            "sql": "select exhibition.theme , exhibition.year order_by exhibition.ticket_price desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "sql": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004"
    },
    "interaction": [
        {
            "utterance": "Which exhibitions were held in year 2004 ?",
            "sql": "select exhibition.* where exhibition.year = value"
        },
        {
            "utterance": "What were the themes for each ?",
            "sql": "select exhibition.theme where exhibition.year = value"
        },
        {
            "utterance": "Can you also the dates , and attendances ?",
            "sql": "select exhibition.theme , exhibition_record.date , exhibition_record.attendance where exhibition.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 16,
    "final": {
        "utterance": "Show all artist names who didn't have an exhibition in 2004.",
        "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    "interaction": [
        {
            "utterance": "Show all exhibitions in 2004 .",
            "sql": "select exhibition.* where exhibition.year = value"
        },
        {
            "utterance": "Show all artists .",
            "sql": "select artist.name"
        },
        {
            "utterance": "Show all the names of the artists who did n't have an exhibition in 2004 .",
            "sql": "select artist.name except select artist.name where exhibition.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
    },
    "interaction": [
        {
            "utterance": "Show the theme of each exhibition .",
            "sql": "select exhibition.theme"
        },
        {
            "utterance": "How about of each exhibition with an attendance below 100 ?",
            "sql": "select exhibition.theme where exhibition_record.attendance < value"
        },
        {
            "utterance": "How about of each exhibition with an attendance below 100 or above 500 ?",
            "sql": "select exhibition.theme where exhibition_record.attendance < value intersect select exhibition.theme where exhibition_record.attendance > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "theme_gallery",
    "interaction_id": 18,
    "final": {
        "utterance": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"
    },
    "interaction": [
        {
            "utterance": "Which exhibition has an attendance more than 100 ?",
            "sql": "select * where exhibition_record.attendance > value"
        },
        {
            "utterance": "How about those with an attendance of more than 100 or a ticket price below 10 ?",
            "sql": "select * where exhibition_record.attendance > value or exhibition.ticket_price < value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where exhibition_record.attendance > value or exhibition.ticket_price < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the minimum and maximum crime rate of counties?",
        "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"
    },
    "interaction": [
        {
            "utterance": "How many counties are there ?",
            "sql": "select count ( county_public_safety.* )"
        },
        {
            "utterance": "What is the average crime rate of counties ?",
            "sql": "select avg ( county_public_safety.crime_rate )"
        },
        {
            "utterance": "How about the minimum and maximum ?",
            "sql": "select min ( county_public_safety.crime_rate ) , max ( county_public_safety.crime_rate )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of the county with the largest population.",
        "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average population ?",
            "sql": "select avg ( county_public_safety.population )"
        },
        {
            "utterance": "What is the maximum population ?",
            "sql": "select county_public_safety.population order_by county_public_safety.population desc limit_value"
        },
        {
            "utterance": "What is the name of its county ?",
            "sql": "select county_public_safety.name order_by county_public_safety.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of the city with the top 5 white percentages.",
        "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "What is the minimum white percentage of the counties ?",
            "sql": "select city.white order_by city.white asc limit_value"
        },
        {
            "utterance": "How about the largest 5 white percentages ?",
            "sql": "select city.white order_by city.white desc limit_value"
        },
        {
            "utterance": "List the names of their cities .",
            "sql": "select city.name order_by city.white desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name of cities in the county that has the largest number of police officers.",
        "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What is the average number of police officers of all counties ?",
            "sql": "select avg ( county_public_safety.police_officers )"
        },
        {
            "utterance": "Which county has largest number of police officers ? Show its county_ID .",
            "sql": "select county_public_safety.county_id order_by county_public_safety.police_officers desc limit_value"
        },
        {
            "utterance": "Which cities are located in this county ?",
            "sql": "select city.name where city.county_id = ( select county_public_safety.county_id order_by county_public_safety.police_officers desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the number of cities in counties that have a population more than 20000.",
        "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
    },
    "interaction": [
        {
            "utterance": "What is the average population of all counties ?",
            "sql": "select avg ( county_public_safety.population )"
        },
        {
            "utterance": "How many counties have a population more than 20000 ?",
            "sql": "select count ( county_public_safety.* ) where county_public_safety.population > value"
        },
        {
            "utterance": "How many cities are located in these counties ?",
            "sql": "select count ( city.* ) where city.county_id in ( select county_public_safety.county_id where county_public_safety.population > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the crime rate of counties with a city having white percentage more than 90.",
        "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"
    },
    "interaction": [
        {
            "utterance": "What is the laargest white percentage among all cities ?",
            "sql": "select max ( city.white )"
        },
        {
            "utterance": "How many cities have a white percentage of more than 90 ?",
            "sql": "select count ( city.* ) where city.white > value"
        },
        {
            "utterance": "What is the id of the county this city is located in ?",
            "sql": "select city.county_id where city.white > value"
        },
        {
            "utterance": "What is this county 's crime rate ?",
            "sql": "select county_public_safety.crime_rate where city.white > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the location shared by most counties?",
        "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different locations are there ?",
            "sql": "select count ( distinct county_public_safety.location )"
        },
        {
            "utterance": "What is the location shared by the fewest counties ?",
            "sql": "select county_public_safety.location group_by county_public_safety.location order_by count ( county_public_safety.* ) asc limit_value"
        },
        {
            "utterance": "How about the one shared by most counties ?",
            "sql": "select county_public_safety.location group_by county_public_safety.location order_by count ( county_public_safety.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of counties that do not have any cities.",
        "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
    },
    "interaction": [
        {
            "utterance": "How many cities does each county have ?",
            "sql": "select city.county_id , count ( city.* ) group_by city.county_id"
        },
        {
            "utterance": "Could you order the results by the number of cities ?",
            "sql": "select city.county_id , count ( city.* ) group_by city.county_id order_by count ( city.* ) desc"
        },
        {
            "utterance": "Which counties do not have any cities ? List their names .",
            "sql": "select county_public_safety.name where county_public_safety.county_id not in ( select city.county_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "county_public_safety",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the police force shared by counties with location on the east and west.",
        "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""
    },
    "interaction": [
        {
            "utterance": "How many counties with location on the east ?",
            "sql": "select count ( county_public_safety.* ) where county_public_safety.location = value"
        },
        {
            "utterance": "How about the number of counties with location on the west ?",
            "sql": "select count ( county_public_safety.* ) where county_public_safety.location = value"
        },
        {
            "utterance": "Please show the police forces in counties with location on the east .",
            "sql": "select county_public_safety.police_force where county_public_safety.location = value"
        },
        {
            "utterance": "How about the police forces shared by counties with location on the east and west ?",
            "sql": "select county_public_safety.police_force where county_public_safety.location = value intersect select county_public_safety.police_force where county_public_safety.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "What is the id of the medicine 'Amisulpride ' ?",
            "sql": "select medicine.id where medicine.name = value"
        },
        {
            "utterance": "What are the enzyme ids that interact as inhibitor with medicine 'Amisulpride ' ?",
            "sql": "select medicine_enzyme_interaction.enzyme_id where medicine.name = value and medicine_enzyme_interaction.interaction_type = value"
        },
        {
            "utterance": "What is the name of this enzyme ?",
            "sql": "select enzyme.name where medicine.name = value and medicine_enzyme_interaction.interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the ids of medicines that interact with at least one enzyme ?",
            "sql": "select distinct medicine_enzyme_interaction.medicine_id"
        },
        {
            "utterance": "Give their names , too .",
            "sql": "select medicine.id , medicine.name group_by medicine.id"
        },
        {
            "utterance": "Only show that information for medicines with at least two interactions .",
            "sql": "select medicine.id , medicine.name group_by medicine.id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Show the id , name , and FDA approval for medicines .",
            "sql": "select medicine.id , medicine.name , medicine.fda_approved"
        },
        {
            "utterance": "Only ones that have some interaction with an enzyme .",
            "sql": "select medicine.id , medicine.name , medicine.fda_approved where medicine.id in ( select medicine_enzyme_interaction.medicine_id )"
        },
        {
            "utterance": "Order that by descending order of number of enzymes the medicine interacts with .",
            "sql": "select medicine.id , medicine.name , medicine.fda_approved group_by medicine.id order_by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the ids of enzymes that interact with at least one enzyme ?",
            "sql": "select distinct medicine_enzyme_interaction.enzyme_id"
        },
        {
            "utterance": "Give their names , too .",
            "sql": "select enzyme.id , enzyme.name group_by enzyme.id"
        },
        {
            "utterance": "Which of those can interact as an 'activator ' ?",
            "sql": "select enzyme.id , enzyme.name where medicine_enzyme_interaction.interaction_type = value group_by enzyme.id"
        },
        {
            "utterance": "Which of those interacts as 'activator ' with the most number of medicines ?",
            "sql": "select enzyme.id , enzyme.name where medicine_enzyme_interaction.interaction_type = value group_by enzyme.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
    },
    "interaction": [
        {
            "utterance": "What is the enzyme id of 'ALA synthase ' ?",
            "sql": "select enzyme.id where enzyme.name = value"
        },
        {
            "utterance": "How about for the medicine named 'Aripiprazole ' ?",
            "sql": "select medicine.id where medicine.name = value"
        },
        {
            "utterance": "Show where those two ids index into the interaction table together .",
            "sql": "select * where enzyme.name = value and medicine.name = value"
        },
        {
            "utterance": "Just give the interaction type for that entry .",
            "sql": "select medicine_enzyme_interaction.interaction_type where enzyme.name = value and medicine.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the interaction types in decreasing order of frequency .",
            "sql": "select medicine_enzyme_interaction.interaction_type group_by medicine_enzyme_interaction.interaction_type order_by count ( medicine_enzyme_interaction.* ) desc"
        },
        {
            "utterance": "Show the counts , too .",
            "sql": "select medicine_enzyme_interaction.interaction_type , count ( medicine_enzyme_interaction.* ) group_by medicine_enzyme_interaction.interaction_type order_by count ( medicine_enzyme_interaction.* ) desc"
        },
        {
            "utterance": "Only show the most frequent .",
            "sql": "select medicine_enzyme_interaction.interaction_type , count ( medicine_enzyme_interaction.* ) group_by medicine_enzyme_interaction.interaction_type order_by count ( medicine_enzyme_interaction.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 6,
    "final": {
        "utterance": "How many enzymes do not have any interactions?",
        "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    "interaction": [
        {
            "utterance": "Which enzyme ids have interactions ?",
            "sql": "select distinct medicine_enzyme_interaction.enzyme_id"
        },
        {
            "utterance": "Which ids do not ?",
            "sql": "select enzyme.id where enzyme.id not in ( select medicine_enzyme_interaction.enzyme_id )"
        },
        {
            "utterance": "Count that .",
            "sql": "select count ( enzyme.* ) where enzyme.id not in ( select medicine_enzyme_interaction.enzyme_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Which medicine ids interact with at least three enzymes ?",
            "sql": "select medicine_enzyme_interaction.medicine_id group_by medicine_enzyme_interaction.medicine_id having count ( medicine_enzyme_interaction.* ) > = value"
        },
        {
            "utterance": "Also give the trade name for that medicine .",
            "sql": "select medicine.id , medicine.trade_name group_by medicine.id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    "interaction": [
        {
            "utterance": "Which enzyme ids have any 'inhibitor ' interaction ?",
            "sql": "select distinct medicine_enzyme_interaction.enzyme_id where medicine_enzyme_interaction.interaction_type = value"
        },
        {
            "utterance": "For those enzyme , give the name , location and products .",
            "sql": "select distinct enzyme.name , enzyme.location , enzyme.product where medicine_enzyme_interaction.interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 9,
    "final": {
        "utterance": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
    },
    "interaction": [
        {
            "utterance": "Which medicine id can interact both as 'inhibitor ' and as 'activitor ' ?",
            "sql": "select medicine_enzyme_interaction.medicine_id where medicine_enzyme_interaction.interaction_type = value intersect select medicine_enzyme_interaction.medicine_id where medicine_enzyme_interaction.interaction_type = value"
        },
        {
            "utterance": "Give the medicine name and trade name for those .",
            "sql": "select medicine.name , medicine.trade_name where medicine_enzyme_interaction.interaction_type = value intersect select medicine.name , medicine.trade_name where medicine_enzyme_interaction.interaction_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "medicine_enzyme_interaction",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Protoporphyrinogen IX'.",
        "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'"
    },
    "interaction": [
        {
            "utterance": "Which medicine ids can interact with enzyme with product 'Protoporphyrinogen IX ' ?",
            "sql": "select medicine_enzyme_interaction.medicine_id where enzyme.product = value"
        },
        {
            "utterance": "Which ones can not ?",
            "sql": "select medicine.id where medicine.id not in ( select medicine_enzyme_interaction.medicine_id where enzyme.product = value )"
        },
        {
            "utterance": "Give the name and trade names for those .",
            "sql": "select medicine.name , medicine.trade_name except select medicine.name , medicine.trade_name where enzyme.product = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the most popular first name of the actors?",
        "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the films which Nick participated in .",
            "sql": "select film.title where actor.first_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( film.title ) where actor.first_name = value"
        },
        {
            "utterance": "And what is the most popular first name of the actors ?",
            "sql": "select actor.first_name group_by actor.first_name order_by count ( actor.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the most popular full name of the actors?",
        "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell the last name of the actor with first name ED .",
            "sql": "select actor.last_name where actor.first_name = value"
        },
        {
            "utterance": "How about that of the actor with first name GRACE ?",
            "sql": "select actor.last_name where actor.first_name = value"
        },
        {
            "utterance": "tell me the most popular full name of the actors .",
            "sql": "select actor.first_name , actor.last_name group_by actor.first_name , actor.last_name order_by count ( actor.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which districts have at least two addresses?",
        "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me the city of address `` 47 MySakila Drive '' .",
            "sql": "select city.city where address.address = value"
        },
        {
            "utterance": "What is the district of this address ?",
            "sql": "select address.district where address.address = value"
        },
        {
            "utterance": "Which districts have at least two addresses ?",
            "sql": "select address.district group_by address.district having count ( address.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the district of `` 1913 Hanoi Way ? ''",
            "sql": "select address.district where address.address = value"
        },
        {
            "utterance": "Tell me the city of this address .",
            "sql": "select city.city where address.address = value"
        },
        {
            "utterance": "Which city has the most addresses ? List the city name , number of addresses , and city id",
            "sql": "select city.city , count ( * ) , address.city_id group_by address.city_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "Tell me the actors ' first name in the film `` ACE GOLDFINGER '' .",
            "sql": "select actor.first_name where film.title = value"
        },
        {
            "utterance": "What is the rental fee of this film ?",
            "sql": "select film.rental_rate where film.title = value"
        },
        {
            "utterance": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory ? List the film title and id .",
            "sql": "select film.title , film.film_id where film.rental_rate = value intersect select film.title , film.film_id group_by film.film_id having count ( film.* ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How many cities are there in Australia?",
        "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
    },
    "interaction": [
        {
            "utterance": "Tell me the city of address `` 1913 Hanoi Way '' .",
            "sql": "select city.city where address.address = value"
        },
        {
            "utterance": "What is the country of this address ?",
            "sql": "select country.country where address.address = value"
        },
        {
            "utterance": "And how many cities are there in Australia ?",
            "sql": "select count ( * ) where country.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which countries have at least 3 cities?",
        "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Tell me the phones in the city `` Acua '' .",
            "sql": "select address.phone where city.city = value"
        },
        {
            "utterance": "How about that of the the city `` Bag '' ?",
            "sql": "select address.phone where city.city = value"
        },
        {
            "utterance": "Which countries have at least 3 cities ?",
            "sql": "select country.country group_by country.country_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'"
    },
    "interaction": [
        {
            "utterance": "Tell me the payment amount for the payment id 4 .",
            "sql": "select payment.amount where payment.payment_id = value"
        },
        {
            "utterance": "How about its date ?",
            "sql": "select payment.payment_date where payment.payment_id = value"
        },
        {
            "utterance": "Tell me all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa .",
            "sql": "select payment.payment_date where payment.amount > value union select payment.payment_date where staff.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which film has the highest rental rate? And what is the rate?",
        "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the category of the film `` ADAPTATION HOLES '' .",
            "sql": "select film.title where film.title = value"
        },
        {
            "utterance": "How about the rental rate of this film ?",
            "sql": "select film.rental_rate where film.title = value"
        },
        {
            "utterance": "tell me which film has the highest rental rate ? What is that rate ?",
            "sql": "select film.title , film.rental_rate order_by film.rental_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the films which BETTE participated in .",
            "sql": "select film.title where actor.first_name = value"
        },
        {
            "utterance": "How about the films which JOE starred in ?",
            "sql": "select film.title where actor.first_name = value"
        },
        {
            "utterance": "Which film has the most number of actors or actresses ? List the film name , film id and description .",
            "sql": "select film.title , film.film_id , film.description group_by film.film_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the description of the film titled `` AIRPORT POLLOCK '' .",
            "sql": "select film.description where film.title = value"
        },
        {
            "utterance": "Who are the actors in this film ? Give the first and last name .",
            "sql": "select actor.first_name , actor.last_name where film.title = value"
        },
        {
            "utterance": "And which film actor ( actress ) starred in the most films ? List his or her first name , last name and actor id .",
            "sql": "select actor.first_name , actor.last_name , actor.actor_id group_by actor.actor_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
    },
    "interaction": [
        {
            "utterance": "Tell me the release year of the film titled `` ALI FOREVER '' .",
            "sql": "select film.release_year where film.title = value"
        },
        {
            "utterance": "tell me the last name of the actors in it .",
            "sql": "select actor.first_name , actor.last_name where film.title = value"
        },
        {
            "utterance": "Tell me which film actors ( actresses ) played a role in more than 30 films ? List his or her first name and last name .",
            "sql": "select actor.first_name , actor.last_name group_by actor.actor_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Which store owns most items?",
        "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the number of items in the inventory for the film titled `` ALI FOREVER '' .",
            "sql": "select count ( * ) where film.title = value"
        },
        {
            "utterance": "Which film has the most items ?",
            "sql": "select film.title group_by inventory.film_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Which store owns most items ?",
            "sql": "select inventory.store_id group_by inventory.store_id order_by count ( inventory.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the email of customer with first name PATRICIA .",
            "sql": "select customer.email where customer.first_name = value"
        },
        {
            "utterance": "Tell me all the information about the payments they made .",
            "sql": "select * group_by customer.customer_id where customer.first_name = value"
        },
        {
            "utterance": "tell me which customer , who has made at least one payment , has spent the least money . List his or her first name , last name , and the id .",
            "sql": "select customer.first_name , customer.last_name , customer.customer_id group_by customer.customer_id order_by sum ( payment.amount ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the genre name of the film HUNGER ROOF?",
        "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"
    },
    "interaction": [
        {
            "utterance": "What are the actors in the film titled ALONE TRIP ?",
            "sql": "select actor.first_name , actor.last_name where film.title = value"
        },
        {
            "utterance": "How about that of the film titled HUNGER ROOF ?",
            "sql": "select actor.first_name , actor.last_name where film.title = value"
        },
        {
            "utterance": "What 's the genre name of this film ?",
            "sql": "select category.name where film.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many films are there in each category? List the genre name, genre id and the count.",
        "sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
    },
    "interaction": [
        {
            "utterance": "Tell me about the special features of the film titled ACADEMY DINOSAUR .",
            "sql": "select film.special_features where film.title = value"
        },
        {
            "utterance": "What is its category ?",
            "sql": "select category.name where film.title = value"
        },
        {
            "utterance": "How many films are there in each category ?",
            "sql": "select category.name , film_category.category_id , count ( * ) group_by film_category.category_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Which film has the most copies in the inventory? List both title and id.",
        "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the rating of the film titled AGENT TRUMAN .",
            "sql": "select film.rating where film.title = value"
        },
        {
            "utterance": "Tell me the number of its copies in the inventory .",
            "sql": "select count ( * ) where film.title = value"
        },
        {
            "utterance": "And which film has the most copies in the inventory ? Tell me both title and id .",
            "sql": "select film.title , film.film_id group_by film.film_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the rental rate of film titled ALAMO VIDEOTAPE ?",
            "sql": "select film.rental_rate where film.title = value"
        },
        {
            "utterance": "How about the number of times it was rented .",
            "sql": "select count ( * ) group_by inventory.inventory_id where film.title = value"
        },
        {
            "utterance": "What is the film title and inventory id of the item in the inventory which was rented most frequently ?",
            "sql": "select film.title , inventory.inventory_id group_by inventory.inventory_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Where is store 1 located?",
        "sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1"
    },
    "interaction": [
        {
            "utterance": "Tell me the number of items in store 2 .",
            "sql": "select count ( inventory.* ) where inventory.store_id = value"
        },
        {
            "utterance": "Tell me that of store 1 .",
            "sql": "select count ( inventory.* ) where inventory.store_id = value"
        },
        {
            "utterance": "And where is store 1 located ?",
            "sql": "select address.address where store.store_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Which staff handled least number of payments? List the full name and the id.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the date of payment with id 3 .",
            "sql": "select payment.payment_date where payment.payment_id = value"
        },
        {
            "utterance": "How about its staff name ? Give the first name and last name .",
            "sql": "select staff.first_name , staff.last_name where payment.payment_id = value"
        },
        {
            "utterance": "tell me which staff handled the least number of payments ? List the full name and the id .",
            "sql": "select staff.first_name , staff.last_name , staff.staff_id group_by staff.staff_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'"
    },
    "interaction": [
        {
            "utterance": "What is the length of the film titled AIRPORT POLLOCK ?",
            "sql": "select film.length where film.title = value"
        },
        {
            "utterance": "How about its rental duration ?",
            "sql": "select film.rental_duration where film.title = value"
        },
        {
            "utterance": "And which language does the film AIRPORT POLLOCK use ? List the language name .",
            "sql": "select language.name where film.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"
    },
    "interaction": [
        {
            "utterance": "Tell me the movies in which the actor named ZERO played a role in .",
            "sql": "select film.title where actor.first_name = value"
        },
        {
            "utterance": "What are the special features of this film ?",
            "sql": "select film.special_features where actor.first_name = value"
        },
        {
            "utterance": "Which movies have 'Deleted Scenes ' as a substring in the special feature ?",
            "sql": "select film.title where film.special_features like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 22,
    "final": {
        "utterance": "When did the first payment happen?",
        "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the payments of the customer named LINDA ?",
            "sql": "select * group_by customer.customer_id where customer.first_name = value"
        },
        {
            "utterance": "What are the dates of these payments ?",
            "sql": "select payment.payment_date group_by customer.customer_id where customer.first_name = value"
        },
        {
            "utterance": "And when did the first payment happen ?",
            "sql": "select payment.payment_date order_by payment.payment_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Where does the customer with the first name Linda live? And what is her email?",
        "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'"
    },
    "interaction": [
        {
            "utterance": "How many payments did LINDA make ?",
            "sql": "select count ( * ) group_by customer.customer_id where customer.first_name = value"
        },
        {
            "utterance": "Tell me all the information about the largest one .",
            "sql": "select * group_by customer.customer_id where customer.first_name = value order_by payment.amount desc limit_value"
        },
        {
            "utterance": "tell me where she lives , and also her email .",
            "sql": "select address.address , customer.email where customer.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"
    },
    "interaction": [
        {
            "utterance": "Tell me the release year of the film titleed ACE GOLDFINGER .",
            "sql": "select film.release_year where film.title = value"
        },
        {
            "utterance": "What is the rating of this film ?",
            "sql": "select film.rating where film.title = value"
        },
        {
            "utterance": "tell me all the films longer than 100 minutes , or rated PG , except those who cost more than 200 for replacement .",
            "sql": "select film.title where film.length > value or film.rating = value except select film.title where film.replacement_cost > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the first name and the last name of the customer who made the earliest rental?",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the email of the customer named MARIA .",
            "sql": "select customer.email where customer.first_name = value"
        },
        {
            "utterance": "Tell me all the information about her rentals .",
            "sql": "select * where customer.first_name = value"
        },
        {
            "utterance": "What is the first name and the last name of the customer who made the earliest rental ?",
            "sql": "select customer.first_name , customer.last_name order_by rental.rental_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'"
    },
    "interaction": [
        {
            "utterance": "Tell me the customer of rental with id 2 .",
            "sql": "select customer.first_name , customer.last_name where rental.rental_id = value"
        },
        {
            "utterance": "How about its return date ?",
            "sql": "select rental.return_date where rental.rental_id = value"
        },
        {
            "utterance": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns ?",
            "sql": "select distinct staff.first_name , staff.last_name where customer.first_name = value and customer.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Which store has most the customers?",
        "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me all the information about the stores .",
            "sql": "select store.*"
        },
        {
            "utterance": "Tell me how many items are in store 3 .",
            "sql": "select count ( inventory.* ) where inventory.store_id = value"
        },
        {
            "utterance": "Which store has the most customers ?",
            "sql": "select customer.store_id group_by customer.store_id order_by count ( customer.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What is the largest payment amount?",
        "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me all the information about Lisa 's payments .",
            "sql": "select * group_by customer.customer_id where customer.first_name = value"
        },
        {
            "utterance": "What 's the largest one among those ? Give the payment amount .",
            "sql": "select payment.amount group_by customer.customer_id where customer.first_name = value order_by payment.amount desc limit_value"
        },
        {
            "utterance": "What 's the largest one among all the payments ?",
            "sql": "select payment.amount order_by payment.amount desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sakila_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Where does the staff member with the first name Elsa live?",
        "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'"
    },
    "interaction": [
        {
            "utterance": "Tell me the store in which the staff member with first name `` Elsa '' works .",
            "sql": "select * where staff.first_name = value"
        },
        {
            "utterance": "Tell me her email .",
            "sql": "select staff.email where staff.first_name = value"
        },
        {
            "utterance": "Where does she live ?",
            "sql": "select address.address where staff.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "sql": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    "interaction": [
        {
            "utterance": "Show the id for all accounts .",
            "sql": "select accounts.account_id"
        },
        {
            "utterance": "Also show the date the account opened and the account name .",
            "sql": "select accounts.account_id , accounts.date_account_opened , accounts.account_name"
        },
        {
            "utterance": "Also show account details .",
            "sql": "select accounts.account_id , accounts.date_account_opened , accounts.account_name , accounts.other_account_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"
    },
    "interaction": [
        {
            "utterance": "Show the account id for all accounts .",
            "sql": "select accounts.account_id"
        },
        {
            "utterance": "Also show the customer first name for these accounts .",
            "sql": "select accounts.account_id , customers.customer_first_name"
        },
        {
            "utterance": "What are the ids for the accounts owned by the customer with first name 'Meaghan ' ?",
            "sql": "select accounts.account_id where customers.customer_first_name = value"
        },
        {
            "utterance": "Also show the account name , and other account details for these accounts .",
            "sql": "select accounts.account_id , accounts.date_account_opened , accounts.account_name , accounts.other_account_details where customers.customer_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\""
    },
    "interaction": [
        {
            "utterance": "Show the account name and other account details for all accounts .",
            "sql": "select accounts.account_name , accounts.other_account_details"
        },
        {
            "utterance": "How about those accounts by the customer with first name Meaghan and last name Keeling ?",
            "sql": "select accounts.account_name , accounts.other_account_details where customers.customer_first_name = value and customers.customer_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the first name and last name for the customer with account name 900.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    "interaction": [
        {
            "utterance": "Show the first name and last name for all customers .",
            "sql": "select customers.customer_first_name , customers.customer_last_name"
        },
        {
            "utterance": "Also show their account names .",
            "sql": "select customers.customer_first_name , customers.customer_last_name , accounts.account_name"
        },
        {
            "utterance": "Who has the account with name 900 ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name where accounts.account_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Show the first name , last name , and phone number for all customers .",
            "sql": "select customers.customer_first_name , customers.customer_last_name , customers.phone_number"
        },
        {
            "utterance": "How about those with an account ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name , customers.phone_number"
        },
        {
            "utterance": "Show their distinct information .",
            "sql": "select distinct customers.customer_first_name , customers.customer_last_name , customers.phone_number"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 5,
    "final": {
        "utterance": "Show customer ids who don't have an account.",
        "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"
    },
    "interaction": [
        {
            "utterance": "Show customer ids for all customers .",
            "sql": "select customers.customer_id"
        },
        {
            "utterance": "Show ids for those who have an account .",
            "sql": "select accounts.customer_id"
        },
        {
            "utterance": "How about those who do n't ?",
            "sql": "select customers.customer_id except select accounts.customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 6,
    "final": {
        "utterance": "How many accounts does each customer have? List the number and customer id.",
        "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id"
    },
    "interaction": [
        {
            "utterance": "Show the id for all customers with an account .",
            "sql": "select accounts.customer_id"
        },
        {
            "utterance": "How many accounts do each of them have ?",
            "sql": "select count ( accounts.* ) , accounts.customer_id group_by accounts.customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the customer id, first and last name with most number of accounts.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the customer id for all customers with an account .",
            "sql": "select accounts.customer_id"
        },
        {
            "utterance": "Also show their first and last name .",
            "sql": "select accounts.customer_id , customers.customer_first_name , customers.customer_last_name"
        },
        {
            "utterance": "Order them by the number of accounts in descending order .",
            "sql": "select accounts.customer_id , customers.customer_first_name , customers.customer_last_name group_by accounts.customer_id order_by count ( * ) desc"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select accounts.customer_id , customers.customer_first_name , customers.customer_last_name group_by accounts.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 8,
    "final": {
        "utterance": "Show id, first name and last name for all customers and the number of accounts.",
        "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    "interaction": [
        {
            "utterance": "Show the first name and last name for all customers .",
            "sql": "select customers.customer_first_name , customers.customer_last_name"
        },
        {
            "utterance": "Also show the number of accounts owned by each of them .",
            "sql": "select customers.customer_first_name , customers.customer_last_name , count ( * ) group_by accounts.customer_id"
        },
        {
            "utterance": "Also show their customer ids .",
            "sql": "select accounts.customer_id , customers.customer_first_name , customers.customer_last_name , count ( * ) group_by accounts.customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 9,
    "final": {
        "utterance": "Show first name and id for all customers with at least 2 accounts.",
        "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the first name and id for all customers with an accout .",
            "sql": "select customers.customer_first_name , accounts.customer_id"
        },
        {
            "utterance": "For each of them , also count the number of accounts .",
            "sql": "select customers.customer_first_name , accounts.customer_id , count ( * ) group_by accounts.customer_id"
        },
        {
            "utterance": "Show the first name and id for those with at least 2 accounts .",
            "sql": "select customers.customer_first_name , accounts.customer_id group_by accounts.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the number of customers for each gender.",
        "sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"
    },
    "interaction": [
        {
            "utterance": "Show the total number of customers .",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "Break down this number by gender .",
            "sql": "select customers.gender , count ( customers.* ) group_by customers.gender"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 11,
    "final": {
        "utterance": "How many transactions do we have?",
        "sql": "SELECT count(*) FROM Financial_transactions"
    },
    "interaction": [
        {
            "utterance": "Show the information for all financial transactions .",
            "sql": "select financial_transactions.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( financial_transactions.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 12,
    "final": {
        "utterance": "How many transaction does each account have? Show the number and account id.",
        "sql": "SELECT count(*) ,  account_id FROM Financial_transactions"
    },
    "interaction": [
        {
            "utterance": "Show the id of accounts with a financial transaction .",
            "sql": "select financial_transactions.account_id"
        },
        {
            "utterance": "For each of them , count the number of financial transactions .",
            "sql": "select count ( financial_transactions.* ) , financial_transactions.account_id group_by financial_transactions.account_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 13,
    "final": {
        "utterance": "How many transaction does account with name 337 have?",
        "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    "interaction": [
        {
            "utterance": "Show the transaction id for each financial transaction .",
            "sql": "select financial_transactions.transaction_id"
        },
        {
            "utterance": "Also show the account name for each of them .",
            "sql": "select financial_transactions.transaction_id , accounts.account_name"
        },
        {
            "utterance": "Limit the results to transactions from accounts with the account name 337 .",
            "sql": "select financial_transactions.transaction_id , accounts.account_name where accounts.account_name = value"
        },
        {
            "utterance": "How many of those are there ?",
            "sql": "select count ( * ) where accounts.account_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the average, minimum, maximum, and total transaction amount?",
        "sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions"
    },
    "interaction": [
        {
            "utterance": "Show the transaction amount for each transaction .",
            "sql": "select financial_transactions.transaction_amount"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( financial_transactions.transaction_amount )"
        },
        {
            "utterance": "Also show the minimum , maximum , and total .",
            "sql": "select avg ( financial_transactions.transaction_amount ) , min ( financial_transactions.transaction_amount ) , max ( financial_transactions.transaction_amount ) , sum ( financial_transactions.transaction_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 15,
    "final": {
        "utterance": "Show ids for all transactions whose amounts are greater than the average.",
        "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
    },
    "interaction": [
        {
            "utterance": "Show ids for all transactions .",
            "sql": "select financial_transactions.transaction_id"
        },
        {
            "utterance": "What is the average transaction amount ?",
            "sql": "select avg ( financial_transactions.transaction_amount )"
        },
        {
            "utterance": "What are the ids of transactions whose amount is greater than it ?",
            "sql": "select financial_transactions.transaction_id where financial_transactions.transaction_amount > ( select avg ( financial_transactions.transaction_amount ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the transaction types and the total amount of transactions.",
        "sql": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
    },
    "interaction": [
        {
            "utterance": "Show the transaction type for each transaction .",
            "sql": "select financial_transactions.transaction_type"
        },
        {
            "utterance": "For each type , what is the total amount of transactions ?",
            "sql": "select financial_transactions.transaction_type , sum ( financial_transactions.transaction_amount ) group_by financial_transactions.transaction_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the account name, id and the number of transactions for each account.",
        "sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id"
    },
    "interaction": [
        {
            "utterance": "Show the account id for each transaction .",
            "sql": "select financial_transactions.account_id"
        },
        {
            "utterance": "Also show the account name for each .",
            "sql": "select accounts.account_name , financial_transactions.account_id"
        },
        {
            "utterance": "For each account , show the number of transactions .",
            "sql": "select accounts.account_name , financial_transactions.account_id , count ( * ) group_by financial_transactions.account_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the account id with most number of transactions.",
        "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the account id for each transaction .",
            "sql": "select financial_transactions.account_id"
        },
        {
            "utterance": "For each of them , show the number of transactions .",
            "sql": "select financial_transactions.account_id , count ( financial_transactions.* ) group_by financial_transactions.account_id"
        },
        {
            "utterance": "Order the ids in descending order of the number of transactions .",
            "sql": "select financial_transactions.account_id group_by financial_transactions.account_id order_by count ( financial_transactions.* ) desc"
        },
        {
            "utterance": "Which id has the most ?",
            "sql": "select financial_transactions.account_id group_by financial_transactions.account_id order_by count ( financial_transactions.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the account id and name with at least 4 transactions.",
        "sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"
    },
    "interaction": [
        {
            "utterance": "Show the account id and name for each account with a transaction .",
            "sql": "select financial_transactions.account_id , accounts.account_name"
        },
        {
            "utterance": "Also count the number of transactions for each of them .",
            "sql": "select financial_transactions.account_id , accounts.account_name , count ( * ) group_by financial_transactions.account_id"
        },
        {
            "utterance": "Which of them have at least 4 transactions ?",
            "sql": "select financial_transactions.account_id , accounts.account_name group_by financial_transactions.account_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 20,
    "final": {
        "utterance": "Show all product sizes.",
        "sql": "SELECT DISTINCT product_size FROM Products"
    },
    "interaction": [
        {
            "utterance": "Show information for all products .",
            "sql": "select products.*"
        },
        {
            "utterance": "What are their sizes ?",
            "sql": "select products.product_size"
        },
        {
            "utterance": "Only show distinct sizes .",
            "sql": "select distinct products.product_size"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 21,
    "final": {
        "utterance": "Show all product colors.",
        "sql": "SELECT DISTINCT product_color FROM Products"
    },
    "interaction": [
        {
            "utterance": "Show info for all products .",
            "sql": "select products.*"
        },
        {
            "utterance": "Show their distinct colors .",
            "sql": "select distinct products.product_color"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the invoice number and the number of transactions for each invoice.",
        "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    "interaction": [
        {
            "utterance": "Show the invoice number for each transaction .",
            "sql": "select financial_transactions.invoice_number"
        },
        {
            "utterance": "For each of them , show the number of transactions .",
            "sql": "select financial_transactions.invoice_number , count ( financial_transactions.* ) group_by financial_transactions.invoice_number"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the invoice number of each transaction .",
            "sql": "select financial_transactions.invoice_number"
        },
        {
            "utterance": "Also show the invoice date .",
            "sql": "select invoices.invoice_number , invoices.invoice_date"
        },
        {
            "utterance": "Also show the number of transactions for each of them .",
            "sql": "select invoices.invoice_number , invoices.invoice_date , count ( * ) group_by financial_transactions.invoice_number"
        },
        {
            "utterance": "Which one has the most transactions ?",
            "sql": "select invoices.invoice_number , invoices.invoice_date group_by financial_transactions.invoice_number order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 24,
    "final": {
        "utterance": "How many invoices do we have?",
        "sql": "SELECT count(*) FROM Invoices"
    },
    "interaction": [
        {
            "utterance": "Show the information for all invoices .",
            "sql": "select invoices.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( invoices.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 25,
    "final": {
        "utterance": "Show invoice dates and order id and details for all invoices.",
        "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id"
    },
    "interaction": [
        {
            "utterance": "Show the invoice date for all invoices .",
            "sql": "select invoices.invoice_date"
        },
        {
            "utterance": "Also show their order ids .",
            "sql": "select invoices.invoice_date , invoices.order_id"
        },
        {
            "utterance": "Also show their order details .",
            "sql": "select invoices.invoice_date , invoices.order_id , orders.order_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 26,
    "final": {
        "utterance": "Show the order ids and the number of invoices for each order.",
        "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id"
    },
    "interaction": [
        {
            "utterance": "Show the order id for each invoice .",
            "sql": "select invoices.order_id"
        },
        {
            "utterance": "What is the number of invoices for each order ?",
            "sql": "select invoices.order_id , count ( invoices.* ) group_by invoices.order_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the order id and order details for the order more than two invoices.",
        "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show the order id and order details for all orders .",
            "sql": "select orders.order_id , orders.order_details"
        },
        {
            "utterance": "For each of them , count the number of invoices as well .",
            "sql": "select orders.order_id , orders.order_details , count ( * ) group_by orders.order_id"
        },
        {
            "utterance": "Which of them have more than two ?",
            "sql": "select orders.order_id , orders.order_details group_by orders.order_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 28,
    "final": {
        "utterance": "What is the customer last name, id and phone number with most number of orders?",
        "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the last name , id , and phone number for all customers .",
            "sql": "select customers.customer_last_name , customers.customer_id , customers.phone_number"
        },
        {
            "utterance": "For each of them , show the number of orders as well .",
            "sql": "select customers.customer_last_name , orders.customer_id , customers.phone_number , count ( * ) group_by orders.customer_id"
        },
        {
            "utterance": "Sort them in descending order of the number of orders .",
            "sql": "select customers.customer_last_name , orders.customer_id , customers.phone_number group_by orders.customer_id order_by count ( * ) desc"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select customers.customer_last_name , orders.customer_id , customers.phone_number group_by orders.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 29,
    "final": {
        "utterance": "Show all product names without an order.",
        "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    "interaction": [
        {
            "utterance": "Show all product names",
            "sql": "select products.product_name"
        },
        {
            "utterance": "Which of them has an order ?",
            "sql": "select products.product_name"
        },
        {
            "utterance": "Which of them do n't ?",
            "sql": "select products.product_name except select products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 30,
    "final": {
        "utterance": "Show all product names and the total quantity ordered for each product name.",
        "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"
    },
    "interaction": [
        {
            "utterance": "Show all product names",
            "sql": "select products.product_name"
        },
        {
            "utterance": "Also show the quantity ordered for each order of a product .",
            "sql": "select products.product_name , order_items.product_quantity"
        },
        {
            "utterance": "What is the total quantity ordered for each product name ?",
            "sql": "select products.product_name , sum ( order_items.product_quantity ) group_by products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 31,
    "final": {
        "utterance": "Show the order ids and the number of items in each order.",
        "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"
    },
    "interaction": [
        {
            "utterance": "Show the order id for each order item .",
            "sql": "select order_items.order_id"
        },
        {
            "utterance": "For each of those ids , how many items were ordered ?",
            "sql": "select order_items.order_id , count ( order_items.* ) group_by order_items.order_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 32,
    "final": {
        "utterance": "Show the product ids and the number of unique orders containing each product.",
        "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
    },
    "interaction": [
        {
            "utterance": "Show the product id for all orders .",
            "sql": "select order_items.product_id"
        },
        {
            "utterance": "Also show the order id .",
            "sql": "select order_items.product_id , order_items.order_id"
        },
        {
            "utterance": "For each of those product ids , what is the number of unique orders containing each product ?",
            "sql": "select order_items.product_id , count ( distinct order_items.order_id ) group_by order_items.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 33,
    "final": {
        "utterance": "Show all product names and the number of order items on each product.",
        "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
    },
    "interaction": [
        {
            "utterance": "Show all product names .",
            "sql": "select products.product_name"
        },
        {
            "utterance": "For each of them , what is the number of order items on each ?",
            "sql": "select products.product_name , count ( * ) group_by products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 34,
    "final": {
        "utterance": "Show order ids and the number of products in each order.",
        "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"
    },
    "interaction": [
        {
            "utterance": "Show the order id for all order items .",
            "sql": "select order_items.order_id"
        },
        {
            "utterance": "Also show the product id .",
            "sql": "select order_items.order_id , order_items.product_id"
        },
        {
            "utterance": "For each order , show the number of products .",
            "sql": "select order_items.order_id , count ( distinct order_items.product_id ) group_by order_items.order_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_invoices",
    "interaction_id": 35,
    "final": {
        "utterance": "Show order ids and the total quantity in each order.",
        "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id"
    },
    "interaction": [
        {
            "utterance": "Show the order id for each order item .",
            "sql": "select order_items.order_id"
        },
        {
            "utterance": "For each of those items , also show the product quantities .",
            "sql": "select order_items.order_id , order_items.product_quantity"
        },
        {
            "utterance": "For each order , what is the total quantity ?",
            "sql": "select order_items.order_id , sum ( order_items.product_quantity ) group_by order_items.order_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 0,
    "final": {
        "utterance": "How many heads of the departments are older than 56 ?",
        "sql": "SELECT count(*) FROM head WHERE age  >  56"
    },
    "interaction": [
        {
            "utterance": "Show all information about department heads .",
            "sql": "select head.*"
        },
        {
            "utterance": "How many heads of departments are there ?",
            "sql": "select count ( head.* )"
        },
        {
            "utterance": "How many heads of department are older than 56 ?",
            "sql": "select count ( head.* ) where head.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name, born state and age of the heads of departments ordered by age.",
        "sql": "SELECT name ,  born_state ,  age FROM head ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "Show the names of the heads of departments .",
            "sql": "select head.name"
        },
        {
            "utterance": "Show the state where each department head was born .",
            "sql": "select head.born_state"
        },
        {
            "utterance": "Show the age of the heads of departments .",
            "sql": "select head.age"
        },
        {
            "utterance": "Please order this information by heads ' ages .",
            "sql": "select head.name , head.born_state , head.age order_by head.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 2,
    "final": {
        "utterance": "List the creation year, name and budget of each department.",
        "sql": "SELECT creation ,  name ,  budget_in_billions FROM department"
    },
    "interaction": [
        {
            "utterance": "List the creation year of each department .",
            "sql": "select department.creation"
        },
        {
            "utterance": "List the name of each department .",
            "sql": "select department.name"
        },
        {
            "utterance": "List the budget of each department .",
            "sql": "select department.budget_in_billions"
        },
        {
            "utterance": "List the creation year , name and budget of each department .",
            "sql": "select department.creation , department.name , department.budget_in_billions"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and minimum budget of the departments?",
        "sql": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department"
    },
    "interaction": [
        {
            "utterance": "List the budget of each department .",
            "sql": "select department.budget_in_billions"
        },
        {
            "utterance": "What are the maximum and minimum budget of the departments ?",
            "sql": "select max ( department.budget_in_billions ) , min ( department.budget_in_billions )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "sql": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
    },
    "interaction": [
        {
            "utterance": "How many employees does each department have ?",
            "sql": "select department.num_employees"
        },
        {
            "utterance": "What is the number of employees of the departments whose rank is between 10 and 15 ?",
            "sql": "select department.num_employees where department.ranking between value and value"
        },
        {
            "utterance": "What is the average number of employees of these departments ?",
            "sql": "select avg ( department.num_employees ) where department.ranking between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of the heads who are born outside the California state?",
        "sql": "SELECT name FROM head WHERE born_state != 'California'"
    },
    "interaction": [
        {
            "utterance": "Show all the names of the department heads .",
            "sql": "select head.name"
        },
        {
            "utterance": "Among these department heads , who was born outside California ?",
            "sql": "select head.name where head.born_state != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'"
    },
    "interaction": [
        {
            "utterance": "What are the creation years of the departments ?",
            "sql": "select department.creation"
        },
        {
            "utterance": "Which secretaries were born in Alabama ?",
            "sql": "select head.* where head.born_state = value"
        },
        {
            "utterance": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama ' ?",
            "sql": "select distinct department.creation where head.born_state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the states where at least 3 heads were born?",
        "sql": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "What are the names of the states where department heads were born ?",
            "sql": "select head.born_state"
        },
        {
            "utterance": "How many heads were born in each state ?",
            "sql": "select head.born_state , count ( head.* ) group_by head.born_state"
        },
        {
            "utterance": "What are the names of the states where at least 3 heads were born ?",
            "sql": "select head.born_state group_by head.born_state having count ( head.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 8,
    "final": {
        "utterance": "In which year were most departments established?",
        "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the years in which departments were established ?",
            "sql": "select department.creation group_by department.creation"
        },
        {
            "utterance": "In which year were the most departments established ?",
            "sql": "select department.creation group_by department.creation order_by count ( department.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "Show the names and number of employees of each department .",
            "sql": "select department.name , department.num_employees"
        },
        {
            "utterance": "Who are the department heads whose temporary acting value is `` Yes '' ?",
            "sql": "select management.* where management.temporary_acting = value"
        },
        {
            "utterance": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes ' .",
            "sql": "select department.name , department.num_employees where management.temporary_acting = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 10,
    "final": {
        "utterance": "How many acting statuses are there?",
        "sql": "SELECT count(DISTINCT temporary_acting) FROM management"
    },
    "interaction": [
        {
            "utterance": "List the acting statuses .",
            "sql": "select management.temporary_acting"
        },
        {
            "utterance": "How many acting statuses are there ?",
            "sql": "select count ( distinct management.temporary_acting )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 11,
    "final": {
        "utterance": "How many departments are led by heads who are not mentioned?",
        "sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);"
    },
    "interaction": [
        {
            "utterance": "How many departments are there ?",
            "sql": "select count ( department.* )"
        },
        {
            "utterance": "How many departments are led by heads who are mentioned in the database ?",
            "sql": "select count ( department.* ) where department.department_id in ( select management.department_id )"
        },
        {
            "utterance": "How many departments are led by heads who are not mentioned ?",
            "sql": "select count ( department.* ) where department.department_id not in ( select management.department_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the distinct ages of the heads who are acting?",
        "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'"
    },
    "interaction": [
        {
            "utterance": "What are the dictinct ages of the department heads ?",
            "sql": "select distinct head.age"
        },
        {
            "utterance": "List the ages of the heads who are acting .",
            "sql": "select distinct head.age where management.temporary_acting = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 13,
    "final": {
        "utterance": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'"
    },
    "interaction": [
        {
            "utterance": "List the states where each secretary was born .",
            "sql": "select distinct head.born_state"
        },
        {
            "utterance": "List the information of the secretary of 'Treasury ' department and the secretary of 'Homeland Security ' department .",
            "sql": "select head.name , head.born_state where department.name = value or department.name = value"
        },
        {
            "utterance": "List the states where both the secretary of 'Treasury ' department and the secretary of 'Homeland Security ' were born .",
            "sql": "select head.born_state where department.name = value intersect select head.born_state where department.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_management",
    "interaction_id": 14,
    "final": {
        "utterance": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many heads does each department have ?",
            "sql": "select department.name , count ( * ) group_by department.department_id"
        },
        {
            "utterance": "Which department has more than 1 head at a time ?",
            "sql": "select department.department_id , department.name group_by department.department_id having count ( * ) > value"
        },
        {
            "utterance": "List the id , name and the number of heads of these departments .",
            "sql": "select department.department_id , department.name , count ( * ) group_by department.department_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 0,
    "final": {
        "utterance": "What is id of the city that hosted events in the most recent year?",
        "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many cities are there",
            "sql": "select count ( city.* )"
        },
        {
            "utterance": "How many cities have hosted events ?",
            "sql": "select count ( distinct city.city )"
        },
        {
            "utterance": "Wihch city hosted events in the most recent year ?",
            "sql": "select city.city order_by hosting_city.year desc limit_value"
        },
        {
            "utterance": "Show its id .",
            "sql": "select hosting_city.host_city order_by hosting_city.year desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the cities which were once a host city after 2010?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"
    },
    "interaction": [
        {
            "utterance": "Show the names of the cities .",
            "sql": "select city.city"
        },
        {
            "utterance": "Which of them were a host city after 2008 ?",
            "sql": "select city.city where hosting_city.year > value"
        },
        {
            "utterance": "How about the cities that were a host city after 2010 ?",
            "sql": "select city.city where hosting_city.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 2,
    "final": {
        "utterance": "Which city has hosted the most events?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many cities have hosted events ?",
            "sql": "select count ( distinct city.city )"
        },
        {
            "utterance": "For each city , how many events has it hosted ?",
            "sql": "select city.city , count ( * ) group_by hosting_city.host_city"
        },
        {
            "utterance": "Which city has hosted the most events ?",
            "sql": "select city.city group_by hosting_city.host_city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""
    },
    "interaction": [
        {
            "utterance": "How many events has `` Nanjing ( Jiangsu ) '' hosted ?",
            "sql": "select count ( * ) where city.city = value"
        },
        {
            "utterance": "What is the date of the competition `` 1994 FIFA World Cup qualification '' hosted by `` Nanjing ( Jiangsu ) '' ?",
            "sql": "select match.date where city.city = value and match.competition = value"
        },
        {
            "utterance": "How about the venue ?",
            "sql": "select match.venue where city.city = value and match.competition = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 4,
    "final": {
        "utterance": "Give me the temperature of Shanghai in January.",
        "sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""
    },
    "interaction": [
        {
            "utterance": "How many events has `` Shanghai '' hosted ?",
            "sql": "select count ( * ) where city.city = value"
        },
        {
            "utterance": "Give me the temperature of Shanghai in March .",
            "sql": "select temperature.mar where city.city = value"
        },
        {
            "utterance": "How about the temperature in January ?",
            "sql": "select temperature.jan where city.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the host year of city \"Taizhou ( Zhejiang )\"?",
        "sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\""
    },
    "interaction": [
        {
            "utterance": "How many events has `` Taizhou ( Zhejiang ) '' hosted ?",
            "sql": "select count ( * ) where city.city = value"
        },
        {
            "utterance": "What event did it host ?",
            "sql": "select match.competition where city.city = value"
        },
        {
            "utterance": "What is the host year of this city ?",
            "sql": "select hosting_city.year where city.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 6,
    "final": {
        "utterance": "Which three cities have the largest regional population?",
        "sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What is the average regional population ?",
            "sql": "select avg ( city.regional_population )"
        },
        {
            "utterance": "Which city has the largest regional population ?",
            "sql": "select city.city order_by city.regional_population desc limit_value"
        },
        {
            "utterance": "What are the top three cities with the largest regional population ?",
            "sql": "select city.city order_by city.regional_population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 7,
    "final": {
        "utterance": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average GDP among all cities ?",
            "sql": "select avg ( city.gdp )"
        },
        {
            "utterance": "What is the minimum GDP ?",
            "sql": "select city.gdp order_by city.gdp limit_value"
        },
        {
            "utterance": "Please also list the city name .",
            "sql": "select city.city , city.gdp order_by city.gdp limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 8,
    "final": {
        "utterance": "Which city has the highest temperature in February?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average temperature in March ?",
            "sql": "select avg ( temperature.mar )"
        },
        {
            "utterance": "How about February ?",
            "sql": "select avg ( temperature.feb )"
        },
        {
            "utterance": "In this month , which city has the highest temperature ?",
            "sql": "select city.city order_by temperature.feb desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 9,
    "final": {
        "utterance": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct"
    },
    "interaction": [
        {
            "utterance": "What is the average temperature of all cities in October ?",
            "sql": "select avg ( temperature.oct )"
        },
        {
            "utterance": "How many cities are there whose temperature in March is lower than that in July ?",
            "sql": "select count ( * ) where temperature.mar < temperature.jul"
        },
        {
            "utterance": "What are the city names ?",
            "sql": "select city.city where temperature.mar < temperature.jul"
        },
        {
            "utterance": "Please also show cities whose temperature in March is higher than that in Oct .",
            "sql": "select city.city where temperature.mar < temperature.jul or temperature.mar > temperature.oct"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 10,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Which cities have hosted events ?",
            "sql": "select city.city"
        },
        {
            "utterance": "What is the average temperature in March of these cities ?",
            "sql": "select avg ( temperature.mar )"
        },
        {
            "utterance": "Among these cities , whose temperature in Mar is lower than that in July ?",
            "sql": "select city.city where temperature.mar < temperature.jul intersect select city.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 11,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "Which cities have never hosted an event ?",
            "sql": "select city.city except select city.city"
        },
        {
            "utterance": "What is the average temperature in Dec of these cities ?",
            "sql": "select avg ( temperature.dec ) except select city.city"
        },
        {
            "utterance": "How about the cities whose temperature in Mar is lower than that in Dec ?",
            "sql": "select city.city where temperature.mar < temperature.dec except select city.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 12,
    "final": {
        "utterance": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
    },
    "interaction": [
        {
            "utterance": "How many cities are there that were once host cities ?",
            "sql": "select count ( distinct city.city )"
        },
        {
            "utterance": "How many cities are there whose temperature in Feb is higher than that in Jun ?",
            "sql": "select count ( * ) where temperature.feb > temperature.jun"
        },
        {
            "utterance": "Please list the city names of the above results .",
            "sql": "select city.city where temperature.feb > temperature.jun union select city.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 13,
    "final": {
        "utterance": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "sql": "SELECT city FROM city WHERE regional_population  >  8000000 UNION SELECT city FROM city WHERE regional_population  <  5000000"
    },
    "interaction": [
        {
            "utterance": "Which city has the smallest regional population ?",
            "sql": "select city.city order_by city.regional_population asc limit_value"
        },
        {
            "utterance": "How many cities are there that have a regional population over 8000000 or under 5000000 ?",
            "sql": "select count ( city.* ) where city.regional_population > value or city.regional_population < value"
        },
        {
            "utterance": "Please show the names of these cities .",
            "sql": "select city.city where city.regional_population > value union select city.city where city.regional_population < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "city_record",
    "interaction_id": 14,
    "final": {
        "utterance": "what is the GDP of the city with the largest population.",
        "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which city has the smallest GDP ?",
            "sql": "select city.city order_by city.gdp asc limit_value"
        },
        {
            "utterance": "Which city has the largest population ?",
            "sql": "select city.city order_by city.regional_population desc limit_value"
        },
        {
            "utterance": "What is its GDP ?",
            "sql": "select city.gdp order_by city.regional_population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 0,
    "final": {
        "utterance": "How many branches where have more than average number of memberships are there?",
        "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)"
    },
    "interaction": [
        {
            "utterance": "How many branches are there ?",
            "sql": "select count ( branch.* )"
        },
        {
            "utterance": "What is their average membership amounts ?",
            "sql": "select avg ( branch.membership_amount )"
        },
        {
            "utterance": "How many branches have more membership than that ?",
            "sql": "select count ( branch.* ) where branch.membership_amount > ( select avg ( branch.membership_amount ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 1,
    "final": {
        "utterance": "What are names for top three branches with most number of membership?",
        "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "How many branches are there ?",
            "sql": "select count ( branch.* )"
        },
        {
            "utterance": "How many membership does each of them have ?",
            "sql": "select branch.name , branch.membership_amount"
        },
        {
            "utterance": "Show me the top three of them .",
            "sql": "select branch.name , branch.membership_amount order_by branch.membership_amount desc limit_value"
        },
        {
            "utterance": "Give me only the name .",
            "sql": "select branch.name order_by branch.membership_amount desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 2,
    "final": {
        "utterance": "List all open years when at least two shops are opened.",
        "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Give me the name of all branches .",
            "sql": "select branch.name"
        },
        {
            "utterance": "Show me all open years when any of them were opened .",
            "sql": "select branch.open_year group_by branch.open_year"
        },
        {
            "utterance": "Among them , during which years , at least two shops were opened ?",
            "sql": "select branch.open_year group_by branch.open_year having count ( branch.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 3,
    "final": {
        "utterance": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'"
    },
    "interaction": [
        {
            "utterance": "How many branches are there ?",
            "sql": "select count ( branch.* )"
        },
        {
            "utterance": "What about opened in 2011 or located at London ?",
            "sql": "select count ( branch.* ) where branch.open_year = value or branch.city = value"
        },
        {
            "utterance": "Show me the amount of memberships for them .",
            "sql": "select branch.membership_amount where branch.open_year = value or branch.city = value"
        },
        {
            "utterance": "What are the minimum and maximum among them ?",
            "sql": "select min ( branch.membership_amount ) , max ( branch.membership_amount ) where branch.open_year = value or branch.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the city and the number of branches opened before 2010 for each city.",
        "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "How many branches are there ?",
            "sql": "select count ( branch.* )"
        },
        {
            "utterance": "What about before 2010 ?",
            "sql": "select count ( branch.* ) where branch.open_year < value"
        },
        {
            "utterance": "Can you show me those for each city ?",
            "sql": "select branch.city , count ( branch.* ) where branch.open_year < value group_by branch.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the membership level with most number of members.",
        "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different membership levels are there ?",
            "sql": "select member.level group_by member.level"
        },
        {
            "utterance": "How many members are there in the record ?",
            "sql": "select count ( member.* )"
        },
        {
            "utterance": "Which membership level has the most number of members ?",
            "sql": "select member.level group_by member.level order_by count ( member.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all member names and registered branch names sorted by register year.",
        "sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year"
    },
    "interaction": [
        {
            "utterance": "How many membership registrations are there in file ?",
            "sql": "select count ( membership_register_branch.* )"
        },
        {
            "utterance": "Show me the member names and branch names associated with them .",
            "sql": "select member.name , branch.name"
        },
        {
            "utterance": "List them in order of their register years .",
            "sql": "select member.name , branch.name order_by membership_register_branch.register_year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all branch names with the number of members in each branch registered after 2015.",
        "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"
    },
    "interaction": [
        {
            "utterance": "How many membership registrations are there in file ?",
            "sql": "select count ( membership_register_branch.* )"
        },
        {
            "utterance": "How many of those were registered after 2015 ?",
            "sql": "select count ( membership_register_branch.* ) where membership_register_branch.register_year > value"
        },
        {
            "utterance": "What about for each branch ?",
            "sql": "select membership_register_branch.branch_id , count ( membership_register_branch.* ) where membership_register_branch.register_year > value group_by membership_register_branch.branch_id"
        },
        {
            "utterance": "Show me the name for each branch instead of id .",
            "sql": "select branch.name , count ( * ) where membership_register_branch.register_year > value group_by branch.branch_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 8,
    "final": {
        "utterance": "Show member names without any registered branch.",
        "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"
    },
    "interaction": [
        {
            "utterance": "How many membership registrations are there in file ?",
            "sql": "select count ( membership_register_branch.* )"
        },
        {
            "utterance": "Show me the id of members in any of them .",
            "sql": "select membership_register_branch.member_id"
        },
        {
            "utterance": "Give me the name of members who are not one of those .",
            "sql": "select member.name where member.member_id not in ( select membership_register_branch.member_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 9,
    "final": {
        "utterance": "List the branch name and city without any registered members.",
        "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
    },
    "interaction": [
        {
            "utterance": "How many membership registrations are there in file ?",
            "sql": "select count ( membership_register_branch.* )"
        },
        {
            "utterance": "Show me the id of branches in any of them .",
            "sql": "select membership_register_branch.branch_id"
        },
        {
            "utterance": "Give me the name of branches which are not one of those .",
            "sql": "select branch.name where branch.branch_id not in ( select membership_register_branch.branch_id )"
        },
        {
            "utterance": "What about their cities ?",
            "sql": "select branch.name , branch.city where branch.branch_id not in ( select membership_register_branch.branch_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many membership registrations are there in 2016 ?",
            "sql": "select count ( membership_register_branch.* ) where membership_register_branch.register_year = value"
        },
        {
            "utterance": "What about for each branch ?",
            "sql": "select membership_register_branch.branch_id , count ( membership_register_branch.* ) where membership_register_branch.register_year = value group_by membership_register_branch.branch_id"
        },
        {
            "utterance": "Show me the name of branch with the most of them .",
            "sql": "select branch.name where membership_register_branch.register_year = value group_by branch.branch_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What about its open year ?",
            "sql": "select branch.name , branch.open_year where membership_register_branch.register_year = value group_by branch.branch_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the member name and hometown who registered a branch in 2016.",
        "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"
    },
    "interaction": [
        {
            "utterance": "How many membership registrations are there in 2016 ?",
            "sql": "select count ( membership_register_branch.* ) where membership_register_branch.register_year = value"
        },
        {
            "utterance": "Show me the name of members in them .",
            "sql": "select member.name where membership_register_branch.register_year = value"
        },
        {
            "utterance": "Also include their hometowns .",
            "sql": "select member.name , member.hometown where membership_register_branch.register_year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "How many branches were opened in 2001 ?",
            "sql": "select count ( branch.* ) where branch.open_year = value"
        },
        {
            "utterance": "Among them , how many also have more than 100 membership ?",
            "sql": "select count ( branch.* ) where branch.open_year = value and branch.membership_amount > value"
        },
        {
            "utterance": "Show me all cities with any of those branches .",
            "sql": "select branch.city where branch.open_year = value and branch.membership_amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 13,
    "final": {
        "utterance": "Show all cities without a branch having more than 100 memberships.",
        "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "How many branches have more than 100 memberships ?",
            "sql": "select count ( branch.* ) where branch.membership_amount > value"
        },
        {
            "utterance": "Give me all cities with any of those branches .",
            "sql": "select branch.city where branch.membership_amount > value"
        },
        {
            "utterance": "What about cities without any of those branches ?",
            "sql": "select branch.city except select branch.city where branch.membership_amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018"
    },
    "interaction": [
        {
            "utterance": "How many purchases are there in 2018 ?",
            "sql": "select count ( purchase.* ) where purchase.year = value"
        },
        {
            "utterance": "How many of them were made through any branch in London ?",
            "sql": "select count ( * ) where branch.city = value and purchase.year = value"
        },
        {
            "utterance": "Show me the sum of total pounds of them .",
            "sql": "select sum ( purchase.total_pounds ) where branch.city = value and purchase.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the total number of purchases for members with level 6?",
        "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
    },
    "interaction": [
        {
            "utterance": "How many purchases are there in file ?",
            "sql": "select count ( purchase.* )"
        },
        {
            "utterance": "Show me the id of members with level 6 .",
            "sql": "select member.member_id where member.level = value"
        },
        {
            "utterance": "How many purchases are for any of those members ?",
            "sql": "select count ( * ) where member.level = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "shop_membership",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'"
    },
    "interaction": [
        {
            "utterance": "How many members ' hometown is in Louisville , Kentucky ?",
            "sql": "select count ( member.* ) where member.hometown = value"
        },
        {
            "utterance": "Show me the name of branches with any of those members .",
            "sql": "select branch.name where member.hometown = value"
        },
        {
            "utterance": "Among them , which ones also have members from Hiram , Georgia ?",
            "sql": "select branch.name where member.hometown = value intersect select branch.name where member.hometown = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 0,
    "final": {
        "utterance": "How many perpetrators are there?",
        "sql": "SELECT count(*) FROM perpetrator;"
    },
    "interaction": [
        {
            "utterance": "Show me all about perpetrator .",
            "sql": "select perpetrator.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( perpetrator.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 1,
    "final": {
        "utterance": "List the date of perpetrators in descending order of the number of people killed.",
        "sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC;"
    },
    "interaction": [
        {
            "utterance": "Show me the number of people killed by each perpetrator .",
            "sql": "select perpetrator.killed"
        },
        {
            "utterance": "List the date for each in descending order of the number of people killed .",
            "sql": "select perpetrator.date order_by perpetrator.killed desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 2,
    "final": {
        "utterance": "List the number of people injured by perpetrators in ascending order.",
        "sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC;"
    },
    "interaction": [
        {
            "utterance": "How many people has each perpetrator killed ?",
            "sql": "select perpetrator.killed"
        },
        {
            "utterance": "How about injured ?",
            "sql": "select perpetrator.injured"
        },
        {
            "utterance": "Sort the result in ascending order .",
            "sql": "select perpetrator.injured order_by perpetrator.injured asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average number of people injured by all perpetrators?",
        "sql": "SELECT avg(Injured) FROM perpetrator;"
    },
    "interaction": [
        {
            "utterance": "How many people are injured in total by all perpetrators ?",
            "sql": "select sum ( perpetrator.injured )"
        },
        {
            "utterance": "How many perpetrators are there ?",
            "sql": "select count ( perpetrator.* )"
        },
        {
            "utterance": "What is the average number of people injured by all perpetrators ?",
            "sql": "select avg ( perpetrator.injured )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the location of the perpetrator with the largest kills.",
        "sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the number of people killed by each perpetrator .",
            "sql": "select perpetrator.killed"
        },
        {
            "utterance": "Order the result in descending order .",
            "sql": "select perpetrator.killed order_by perpetrator.killed desc"
        },
        {
            "utterance": "What 's the location for the one who killed the most people ?",
            "sql": "select perpetrator.location order_by perpetrator.killed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of people in ascending order of height?",
        "sql": "SELECT Name FROM People ORDER BY Height ASC;"
    },
    "interaction": [
        {
            "utterance": "How many people are there ?",
            "sql": "select count ( people.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select people.name"
        },
        {
            "utterance": "Order the result by descending height .",
            "sql": "select people.name order_by people.height asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of perpetrators?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID;"
    },
    "interaction": [
        {
            "utterance": "What are the heights of all people ?",
            "sql": "select people.height"
        },
        {
            "utterance": "How about their names ?",
            "sql": "select people.name"
        },
        {
            "utterance": "Show just the perpetrators ' names .",
            "sql": "select people.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of perpetrators whose country is not \"China\"?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\";"
    },
    "interaction": [
        {
            "utterance": "Show me the countries of the perpetrators .",
            "sql": "select perpetrator.country"
        },
        {
            "utterance": "What are the names of perpetrators whose country is `` China '' ?",
            "sql": "select people.name where perpetrator.country = value"
        },
        {
            "utterance": "How about those whose country is not `` China '' ?",
            "sql": "select people.name where perpetrator.country != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the perpetrator with the biggest weight.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the names of the perpetrators .",
            "sql": "select people.name"
        },
        {
            "utterance": "Who has the largest height ?",
            "sql": "select people.name order_by people.height desc limit_value"
        },
        {
            "utterance": "How about the highest weight ?",
            "sql": "select people.name order_by people.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the total kills of the perpetrators with height more than 1.84.",
        "sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84;"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the perpetrators with a height of more than 1.84 meters .",
            "sql": "select people.name where people.height > value"
        },
        {
            "utterance": "What 's their average number of killed people ?",
            "sql": "select avg ( perpetrator.killed ) where people.height > value"
        },
        {
            "utterance": "How about the total ?",
            "sql": "select sum ( perpetrator.killed ) where people.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""
    },
    "interaction": [
        {
            "utterance": "Show me perpetrators ' names .",
            "sql": "select people.name"
        },
        {
            "utterance": "Among the result , who are in `` South Korea '' ?",
            "sql": "select people.name where perpetrator.country = value"
        },
        {
            "utterance": "How about China or Japan ?",
            "sql": "select people.name where perpetrator.country = value or perpetrator.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC;"
    },
    "interaction": [
        {
            "utterance": "What are the number of people injured for each perpetrator ?",
            "sql": "select people.name , perpetrator.injured"
        },
        {
            "utterance": "What are the heights of each perpetrator in descending order of the number of people they injured ?",
            "sql": "select people.height order_by perpetrator.injured desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country;"
    },
    "interaction": [
        {
            "utterance": "What year corresponds with each perpetrator\uff1f",
            "sql": "select perpetrator.year"
        },
        {
            "utterance": "How about country ?",
            "sql": "select perpetrator.country"
        },
        {
            "utterance": "Show each country and the corresponding number of perpetrators there .",
            "sql": "select perpetrator.country , count ( perpetrator.* ) group_by perpetrator.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the country that has the most perpetrators?",
        "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there .",
            "sql": "select perpetrator.country , count ( perpetrator.* ) group_by perpetrator.country"
        },
        {
            "utterance": "Which country has the fewest perpetrators ?",
            "sql": "select perpetrator.country , count ( perpetrator.* ) group_by perpetrator.country order_by count ( perpetrator.* ) asc limit_value"
        },
        {
            "utterance": "How about the most ?",
            "sql": "select perpetrator.country , count ( perpetrator.* ) group_by perpetrator.country order_by count ( perpetrator.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the countries that have at least two perpetrators?",
        "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2;"
    },
    "interaction": [
        {
            "utterance": "What is the country that has the most perpetrators ?",
            "sql": "select perpetrator.country , count ( perpetrator.* ) group_by perpetrator.country order_by count ( perpetrator.* ) desc limit_value"
        },
        {
            "utterance": "Which ones have more more than 1 perpetrator ?",
            "sql": "select perpetrator.country , count ( perpetrator.* ) group_by perpetrator.country having count ( perpetrator.* ) < = value"
        },
        {
            "utterance": "How about those with at least two perpetrators ?",
            "sql": "select perpetrator.country , count ( perpetrator.* ) group_by perpetrator.country having count ( perpetrator.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 15,
    "final": {
        "utterance": "List the names of perpetrators in descending order of the year.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC;"
    },
    "interaction": [
        {
            "utterance": "For each perpetrator , show the year that corresponds ?",
            "sql": "select perpetrator.year"
        },
        {
            "utterance": "Show me their names .",
            "sql": "select people.name"
        },
        {
            "utterance": "Sort the result in descending order by year .",
            "sql": "select people.name order_by perpetrator.year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 16,
    "final": {
        "utterance": "List the names of people that are not perpetrators.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator);"
    },
    "interaction": [
        {
            "utterance": "Show me all about people .",
            "sql": "select people.*"
        },
        {
            "utterance": "Which of those are perpetrators ?",
            "sql": "select people.name where people.people_id in ( select perpetrator.people_id )"
        },
        {
            "utterance": "Show the rest of peoples ' names .",
            "sql": "select people.name where people.people_id not in ( select perpetrator.people_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20"
    },
    "interaction": [
        {
            "utterance": "For each perpetrator , show the ids and his or her country .",
            "sql": "select perpetrator.country , perpetrator.perpetrator_id"
        },
        {
            "utterance": "Also , show how many they have each injured .",
            "sql": "select perpetrator.country , perpetrator.perpetrator_id , perpetrator.injured"
        },
        {
            "utterance": "Which countries have perpetrators who have injured more than 50 ?",
            "sql": "select perpetrator.country where perpetrator.injured > value"
        },
        {
            "utterance": "Which of these also have perpetrators who have injured fewer than 20 ?",
            "sql": "select perpetrator.country where perpetrator.injured > value intersect select perpetrator.country where perpetrator.injured < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 18,
    "final": {
        "utterance": "How many distinct locations of perpetrators are there?",
        "sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator;"
    },
    "interaction": [
        {
            "utterance": "Show me the location for each perpetrator .",
            "sql": "select perpetrator.location"
        },
        {
            "utterance": "What are the distinct locations ?",
            "sql": "select distinct perpetrator.location"
        },
        {
            "utterance": "How many are there in the result ?",
            "sql": "select count ( distinct perpetrator.location )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "perpetrator",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the date of the tallest perpetrator.",
        "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the date for the perpetrator ?",
            "sql": "select perpetrator.date"
        },
        {
            "utterance": "Who 's the tallest perpetrator ?",
            "sql": "select people.name order_by people.height desc limit_value"
        },
        {
            "utterance": "What 's his date ?",
            "sql": "select perpetrator.date order_by people.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the names of departments that are located in Houston.",
        "sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'"
    },
    "interaction": [
        {
            "utterance": "how many departments are there ?",
            "sql": "select count ( department.* )"
        },
        {
            "utterance": "show all their info .",
            "sql": "select department.*"
        },
        {
            "utterance": "where are they each located ?",
            "sql": "select dept_locations.dlocation"
        },
        {
            "utterance": "what are the names of departments that are located in Houston ?",
            "sql": "select department.dname where dept_locations.dlocation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many captains younger than 50 are in each rank?",
        "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank"
    },
    "interaction": [
        {
            "utterance": "What are the captains names and ages ?",
            "sql": "select captain.name , captain.age"
        },
        {
            "utterance": "What is the average age for each rank ?",
            "sql": "select captain.rank , avg ( captain.age ) group_by captain.rank"
        },
        {
            "utterance": "Per rank , how many are older than 50 ?",
            "sql": "select count ( captain.* ) , captain.rank where captain.age < value group_by captain.rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Which rank is the most common among captains?",
        "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names and ranks of captains ?",
            "sql": "select captain.name , captain.rank"
        },
        {
            "utterance": "Which rank is most common ?",
            "sql": "select captain.rank group_by captain.rank order_by count ( captain.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Which classes have more than two captains?",
        "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Give the classes of captains .",
            "sql": "select captain.class"
        },
        {
            "utterance": "Group by class and count .",
            "sql": "select captain.class , count ( captain.* ) group_by captain.class"
        },
        {
            "utterance": "Which class has more than two ?",
            "sql": "select captain.class group_by captain.class having count ( captain.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
        "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'"
    },
    "interaction": [
        {
            "utterance": "How many captains are either Midshipman or Lieutenant ?",
            "sql": "select count ( captain.* ) where captain.rank = value or captain.rank = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select captain.name where captain.rank = value or captain.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the average and minimum age of captains in different class?",
        "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS"
    },
    "interaction": [
        {
            "utterance": "Order class by increasing age . Also show age .",
            "sql": "select captain.class , captain.age order_by captain.age"
        },
        {
            "utterance": "What are the average and minimum age of captains in different class ?",
            "sql": "select avg ( captain.age ) , min ( captain.age ) , captain.class group_by captain.class"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'"
    },
    "interaction": [
        {
            "utterance": "Which ranks of captains are in the Cutter class ?",
            "sql": "select distinct captain.rank where captain.class = value"
        },
        {
            "utterance": "How about Armed schooner ?",
            "sql": "select captain.rank where captain.class = value"
        },
        {
            "utterance": "Intersect those .",
            "sql": "select captain.rank where captain.class = value intersect select captain.rank where captain.class = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'"
    },
    "interaction": [
        {
            "utterance": "For each class , what are the ranks ?",
            "sql": "select distinct captain.class , captain.rank order_by captain.class"
        },
        {
            "utterance": "Find the captain rank that has no captain in Third-rate ship of the line class .",
            "sql": "select captain.rank except select captain.rank where captain.class = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the youngest captain?",
        "sql": "SELECT name FROM captain ORDER BY age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Sort captains records by age .",
            "sql": "select captain.* order_by captain.age"
        },
        {
            "utterance": "Just their names .",
            "sql": "select captain.name order_by captain.age"
        },
        {
            "utterance": "limit it to the one youngest .",
            "sql": "select captain.name order_by captain.age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name, type, and flag of the ships that were built in the most recent year.",
        "sql": "SELECT name, type, flag from ship where built_year in (SELECT max(built_year) from ship)"
    },
    "interaction": [
        {
            "utterance": "What is the most recent build year ?",
            "sql": "select max ( ship.built_year )"
        },
        {
            "utterance": "Which ships were built in the most recent year ?",
            "sql": "select ship.name where ship.built_year in ( select max ( ship.built_year ) )"
        },
        {
            "utterance": "Also give the type and flag .",
            "sql": "select ship.name , ship.type , ship.flag where ship.built_year in ( select max ( ship.built_year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which flag is most widely used among all ships?",
        "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which flags are used ?",
            "sql": "select distinct ship.flag"
        },
        {
            "utterance": "Which is most common ?",
            "sql": "select ship.flag group_by ship.flag order_by count ( ship.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the ship type that are used by both ships with Panama and Malta flags.",
        "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'"
    },
    "interaction": [
        {
            "utterance": "Which type of ship has flag Panama ?",
            "sql": "select distinct ship.type where ship.flag = value"
        },
        {
            "utterance": "How about Malta ?",
            "sql": "select ship.type where ship.flag = value"
        },
        {
            "utterance": "Which types have ships with both flags ?",
            "sql": "select ship.type where ship.flag = value intersect select ship.type where ship.flag = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 11,
    "final": {
        "utterance": "In which year were most of ships built?",
        "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the distinct build years of ships ?",
            "sql": "select distinct ship.built_year"
        },
        {
            "utterance": "Which is more common ?",
            "sql": "select ship.built_year group_by ship.built_year order_by count ( ship.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the ships that have more than one captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List each ship with its captains .",
            "sql": "select ship.name , captain.name"
        },
        {
            "utterance": "Which ship has more than one captain ?",
            "sql": "select ship.name group_by captain.ship_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 13,
    "final": {
        "utterance": "what are the names and classes of the ships that do not have any captain yet?",
        "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
    },
    "interaction": [
        {
            "utterance": "Which ship ids are not in the captain records ?",
            "sql": "select ship.ship_id except select captain.ship_id"
        },
        {
            "utterance": "Give their names and classes",
            "sql": "select ship.name , ship.class where ship.ship_id not in ( select captain.ship_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the ship that is steered by the youngest captain.",
        "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who is the youngest captain ?",
            "sql": "select captain.name order_by captain.age asc limit_value"
        },
        {
            "utterance": "Which ship does he steer ?",
            "sql": "select ship.name order_by captain.age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')"
    },
    "interaction": [
        {
            "utterance": "Which ship ids are steered by captains with the Midshipman rank ?",
            "sql": "select distinct captain.ship_id where captain.rank = value"
        },
        {
            "utterance": "Which are not ?",
            "sql": "select ship.ship_id except select captain.ship_id where captain.rank = value"
        },
        {
            "utterance": "What are their names and flags ?",
            "sql": "select ship.name , ship.flag where ship.ship_id not in ( select captain.ship_id where captain.rank = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum, minimum and average home games each stadium held?",
        "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the stadiums .",
            "sql": "select stadium.name"
        },
        {
            "utterance": "How many home games did each of them hold ?",
            "sql": "select stadium.name , stadium.home_games"
        },
        {
            "utterance": "Show me the maxium , minimum , and average of them .",
            "sql": "select max ( stadium.home_games ) , min ( stadium.home_games ) , avg ( stadium.home_games )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"
    },
    "interaction": [
        {
            "utterance": "Show me all the players who got injured .",
            "sql": "select injury_accident.player"
        },
        {
            "utterance": "Show me the date of the game that causes Walter Samuel to get injured ?",
            "sql": "select game.date where injury_accident.player = value"
        },
        {
            "utterance": "What about its season ?",
            "sql": "select game.season where injury_accident.player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show me all the players who got injured .",
            "sql": "select injury_accident.player"
        },
        {
            "utterance": "What about their game ids ?",
            "sql": "select injury_accident.player , injury_accident.game_id"
        },
        {
            "utterance": "Which games caused at least two injury accidents ?",
            "sql": "select injury_accident.game_id group_by injury_accident.game_id having count ( injury_accident.* ) > = value"
        },
        {
            "utterance": "Show me their ids , scores , and dates .",
            "sql": "select game.id , game.score , game.date group_by game.id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the id and name of the stadium where the most injury accidents happened?",
        "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the injury accidents .",
            "sql": "select injury_accident.*"
        },
        {
            "utterance": "Show me distinct names of the stadium in which those accidents happened .",
            "sql": "select distinct stadium.name"
        },
        {
            "utterance": "Show me the id and name of the one where the most injury accidents happened .",
            "sql": "select stadium.id , stadium.name group_by stadium.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 4,
    "final": {
        "utterance": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'"
    },
    "interaction": [
        {
            "utterance": "Show me all the injuries .",
            "sql": "select injury_accident.injury"
        },
        {
            "utterance": "Show me the ids of the games where those of 'Foot injury ' or 'Knee problem ' happened .",
            "sql": "select injury_accident.game_id where injury_accident.injury = value or injury_accident.injury = value"
        },
        {
            "utterance": "What about their seasons and stadiums ?",
            "sql": "select game.season , stadium.name where injury_accident.injury = value or injury_accident.injury = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 5,
    "final": {
        "utterance": "How many games are free of injury accidents?",
        "sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"
    },
    "interaction": [
        {
            "utterance": "How many industry accidents are there ?",
            "sql": "select count ( injury_accident.* )"
        },
        {
            "utterance": "Show me their game ids .",
            "sql": "select injury_accident.game_id"
        },
        {
            "utterance": "Which games are not one of them ?",
            "sql": "select game.id where game.id not in ( select injury_accident.game_id )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( game.* ) where game.id not in ( select injury_accident.game_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 6,
    "final": {
        "utterance": "How many distinct kinds of injuries happened after season 2010?",
        "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010"
    },
    "interaction": [
        {
            "utterance": "Show me all distinct kinds of injuries .",
            "sql": "select distinct injury_accident.injury"
        },
        {
            "utterance": "What about those happened after season 2010 ?",
            "sql": "select distinct injury_accident.injury where game.season > value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct injury_accident.injury ) where game.season > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 7,
    "final": {
        "utterance": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'"
    },
    "interaction": [
        {
            "utterance": "Show me the name of players that got injured ?",
            "sql": "select injury_accident.player"
        },
        {
            "utterance": "Give me the id of the games where Walter Samuel and Thiago Motta got injured .",
            "sql": "select injury_accident.game_id where injury_accident.player = value or injury_accident.player = value"
        },
        {
            "utterance": "What about the name of the stadium where both of them got injured ?",
            "sql": "select stadium.name where injury_accident.player = value intersect select stadium.name where injury_accident.player = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name, average attendance, total attendance for stadiums where no accidents happened.",
        "sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id"
    },
    "interaction": [
        {
            "utterance": "Show me the game ids of all the injury accidents .",
            "sql": "select injury_accident.game_id"
        },
        {
            "utterance": "Which stadium did each of them happen ?",
            "sql": "select stadium.name , injury_accident.game_id group_by injury_accident.game_id"
        },
        {
            "utterance": "Show me the name of stadiums which are not one of those .",
            "sql": "select stadium.name except select stadium.name group_by injury_accident.game_id"
        },
        {
            "utterance": "Also show me their average attendance and total attendance .",
            "sql": "select stadium.name , stadium.average_attendance , stadium.total_attendance except select stadium.name , stadium.average_attendance , stadium.total_attendance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 9,
    "final": {
        "utterance": "Which stadium name contains the substring \"Bank\"?",
        "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the stadiums .",
            "sql": "select stadium.name"
        },
        {
            "utterance": "Which one contains `` Bank '' in it ?",
            "sql": "select stadium.name where stadium.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "game_injury",
    "interaction_id": 10,
    "final": {
        "utterance": "How many games has each stadium held?",
        "sql": "SELECT T1.name ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the stadiums .",
            "sql": "select stadium.name"
        },
        {
            "utterance": "How many games has each of them held ?",
            "sql": "select stadium.name , count ( * ) group_by stadium.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
        "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'"
    },
    "interaction": [
        {
            "utterance": "How many savings accounts are there ?",
            "sql": "select count ( accounts.custid )"
        },
        {
            "utterance": "What are their saving balances ?",
            "sql": "select savings.balance"
        },
        {
            "utterance": "Remove Brown 's saving balance .",
            "sql": "select savings.balance where accounts.name != value"
        },
        {
            "utterance": "What is the total of these saving balances ?",
            "sql": "select sum ( savings.balance ) where accounts.name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many accounts have a savings balance above the average savings balance?",
        "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "What is the maximum savings balance ?",
            "sql": "select max ( savings.balance )"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "Who are names of the people that are above this average ?",
            "sql": "select accounts.name where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( savings.* ) where savings.balance > ( select avg ( savings.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "sql": "SELECT T1.custid,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"
    },
    "interaction": [
        {
            "utterance": "What account has the maximum checking balance ?",
            "sql": "select checking.custid where checking.balance = ( select max ( checking.balance ) )"
        },
        {
            "utterance": "What is the checking balance ?",
            "sql": "select max ( checking.balance )"
        },
        {
            "utterance": "Show all the account names that have checking balances lower than this .",
            "sql": "select accounts.name where checking.balance < ( select max ( checking.balance ) )"
        },
        {
            "utterance": "also provide their ids .",
            "sql": "select accounts.custid , accounts.name where checking.balance < ( select max ( checking.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'"
    },
    "interaction": [
        {
            "utterance": "List all the account owner names .",
            "sql": "select accounts.name"
        },
        {
            "utterance": "Is there an owner with the name that has 'ee ' in it ?",
            "sql": "select accounts.name where accounts.name like value"
        },
        {
            "utterance": "What is the savings balance for that owner ?",
            "sql": "select savings.balance where accounts.name like value"
        },
        {
            "utterance": "How about the checking balance ?",
            "sql": "select checking.balance where accounts.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "sql": "SELECT T2.balance,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    "interaction": [
        {
            "utterance": "Is there an owner named Brown ?",
            "sql": "select accounts.* where accounts.name = value"
        },
        {
            "utterance": "What is his checking balance ?",
            "sql": "select checking.balance where accounts.name = value"
        },
        {
            "utterance": "What is his savings balance ?",
            "sql": "select savings.balance where accounts.name = value"
        },
        {
            "utterance": "Please show both at the same time .",
            "sql": "select checking.balance , savings.balance where accounts.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "What is the average saving balance ?",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "Who have savings account balances below that ?",
            "sql": "select accounts.name where savings.balance < ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "What are their checking account balances ?",
            "sql": "select accounts.name , checking.balance where checking.custid in ( select accounts.custid where savings.balance < ( select avg ( savings.balance ) ) )"
        },
        {
            "utterance": "Who of these users have checking account balances above the average checking balance of all users ?",
            "sql": "select accounts.name where checking.balance > ( select avg ( checking.balance ) ) intersect select accounts.name where savings.balance < ( select avg ( savings.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"
    },
    "interaction": [
        {
            "utterance": "What is the average savings balance ?",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "How many people have savings account balances over it ?",
            "sql": "select count ( savings.* ) where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select accounts.name where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "What are their checking account balances ?",
            "sql": "select checking.balance where accounts.name in ( select accounts.name where savings.balance > ( select avg ( savings.balance ) ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of account that has the lowest total checking and saving balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the user that has the lowest checking balance ?",
            "sql": "select accounts.name order_by checking.balance limit_value"
        },
        {
            "utterance": "the lowest saving balance ?",
            "sql": "select accounts.name order_by savings.balance limit_value"
        },
        {
            "utterance": "how about the lowest total sum of checking and saving balance ?",
            "sql": "select accounts.name order_by checking.balance + savings.balance limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "sql": "SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    "interaction": [
        {
            "utterance": "How many accounts have savings balances greater than the average savings balance ?",
            "sql": "select count ( savings.* ) where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select accounts.name where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "What are their checking account balances ?",
            "sql": "select accounts.name , checking.balance where savings.balance > ( select avg ( savings.balance ) )"
        },
        {
            "utterance": "How about both their total checking and savings balances .",
            "sql": "select accounts.name , checking.balance + savings.balance where savings.balance > ( select avg ( savings.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest savings balance.",
        "sql": "SELECT T1.name,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the savings balances ?",
            "sql": "select savings.balance"
        },
        {
            "utterance": "What is the lowest one ?",
            "sql": "select min ( savings.balance )"
        },
        {
            "utterance": "What is the name on the account has the lowest one ?",
            "sql": "select accounts.name order_by savings.balance limit_value"
        },
        {
            "utterance": "Also provide the checking balance .",
            "sql": "select accounts.name , checking.balance order_by savings.balance limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the number of checking accounts for each account name.",
        "sql": "SELECT count(*),  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "Show all the names for each account .",
            "sql": "select accounts.name"
        },
        {
            "utterance": "What are the unique set of names ?",
            "sql": "select distinct accounts.name"
        },
        {
            "utterance": "How many savings accounts under each of these names ?",
            "sql": "select count ( * ) , accounts.name group_by accounts.name"
        },
        {
            "utterance": "How about checking accounts ?",
            "sql": "select count ( * ) , accounts.name group_by accounts.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the total saving balance for each account name.",
        "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the accounts ?",
            "sql": "select accounts.name"
        },
        {
            "utterance": "Show the savings balances for all accounts .",
            "sql": "select accounts.name , savings.balance"
        },
        {
            "utterance": "Now show me the total by account name .",
            "sql": "select sum ( savings.balance ) , accounts.name group_by accounts.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of accounts whose checking balance is below the average checking balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
    },
    "interaction": [
        {
            "utterance": "What is the average checking balance ?",
            "sql": "select avg ( checking.balance )"
        },
        {
            "utterance": "What is the account information for those have greater checking balances than that ?",
            "sql": "select checking.* where checking.balance > ( select avg ( checking.balance ) )"
        },
        {
            "utterance": "How about for lower checking balances ?",
            "sql": "select checking.* where checking.balance < ( select avg ( checking.balance ) )"
        },
        {
            "utterance": "What are their account names ?",
            "sql": "select accounts.name where checking.balance < ( select avg ( checking.balance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the saving balance of the account with the highest checking balance.",
        "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Whose checking balance is the highest ?",
            "sql": "select accounts.name order_by checking.balance desc limit_value"
        },
        {
            "utterance": "What is it ?",
            "sql": "select checking.balance order_by checking.balance desc limit_value"
        },
        {
            "utterance": "what is her saving balance ?",
            "sql": "select savings.balance order_by checking.balance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    "interaction": [
        {
            "utterance": "What are the total checking and saving balances for all accounts ?",
            "sql": "select checking.balance + savings.balance"
        },
        {
            "utterance": "Show me the the balances FROM greatest to least ?",
            "sql": "select checking.balance + savings.balance order_by checking.balance + savings.balance desc"
        },
        {
            "utterance": "How about FROM least to greatest ?",
            "sql": "select checking.balance + savings.balance order_by checking.balance + savings.balance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the name and checking balance of the account with the lowest saving balance.",
        "sql": "SELECT T2.balance,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average saving balance ?",
            "sql": "select avg ( savings.balance )"
        },
        {
            "utterance": "how about the lowest saving balance ?",
            "sql": "select savings.balance order_by savings.balance limit_value"
        },
        {
            "utterance": "What is the name of the user that has this ?",
            "sql": "select accounts.name , savings.balance order_by savings.balance limit_value"
        },
        {
            "utterance": "Also show his checking balance too .",
            "sql": "select checking.balance , accounts.name order_by savings.balance limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid"
    },
    "interaction": [
        {
            "utterance": "How many accounts are there in the bank ?",
            "sql": "select count ( accounts.* )"
        },
        {
            "utterance": "What are the names for each ?",
            "sql": "select accounts.name"
        },
        {
            "utterance": "Include the checking and saving balances for each .",
            "sql": "select checking.balance , savings.balance , accounts.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"
    },
    "interaction": [
        {
            "utterance": "Show me the names , checking balances , and savings balance for all accounts ?",
            "sql": "select checking.balance , savings.balance , accounts.name"
        },
        {
            "utterance": "Also provide their total checking and saving balances ?",
            "sql": "select checking.balance + savings.balance , checking.balance , savings.balance , accounts.name"
        },
        {
            "utterance": "Just show names , checking balance , saving balance but sort them by savings account balance .",
            "sql": "select checking.balance , savings.balance , accounts.name order_by savings.balance"
        },
        {
            "utterance": "Actually , sort them by the total checking and savings balance FROM greatest to least .",
            "sql": "select checking.balance , savings.balance , accounts.name order_by checking.balance + savings.balance desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance"
    },
    "interaction": [
        {
            "utterance": "How many accounts have higher savings balances than their checking balances ?",
            "sql": "select count ( * ) where savings.balance > checking.balance"
        },
        {
            "utterance": "How about higher checking balances than their saving balances ?",
            "sql": "select count ( * ) where checking.balance > savings.balance"
        },
        {
            "utterance": "Show me the checking balances and saving balances for each of these accounts .",
            "sql": "select checking.balance , savings.balance where checking.balance > savings.balance"
        },
        {
            "utterance": "Actually , just show me the corresponding names .",
            "sql": "select accounts.name where checking.balance > savings.balance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "small_bank_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "sql": "SELECT T1.name,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
    },
    "interaction": [
        {
            "utterance": "What are the name , checking , and saving balances for all accounts ?",
            "sql": "select checking.balance , savings.balance , accounts.name"
        },
        {
            "utterance": "Show me the total checking and savings balance of the accounts !",
            "sql": "select checking.balance , savings.balance , accounts.name , savings.balance + checking.balance"
        },
        {
            "utterance": "Show me only the accounts that have a lower savings balance than their checking balance ?",
            "sql": "select checking.balance , savings.balance , accounts.name , savings.balance + checking.balance where savings.balance < checking.balance"
        },
        {
            "utterance": "Show just the name and total checking and savings balance .",
            "sql": "select accounts.name , savings.balance + checking.balance where savings.balance < checking.balance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the names of all artists that have \"a\" in their names.",
        "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""
    },
    "interaction": [
        {
            "utterance": "Find the names of all artists whose names end with `` b '' .",
            "sql": "select artist.name where artist.name like value"
        },
        {
            "utterance": "How about artists whose names contain `` b '' ?",
            "sql": "select artist.name where artist.name like value"
        },
        {
            "utterance": "Now do the same for `` a '' .",
            "sql": "select artist.name where artist.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the title of all the albums of the artist \"AC/DC\".",
        "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""
    },
    "interaction": [
        {
            "utterance": "Find the ids of all albums of `` AC/DC '' .",
            "sql": "select album.albumid where artist.name = value"
        },
        {
            "utterance": "Show me the titles of those albums .",
            "sql": "select album.title where artist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many albums does the artist \"Metallica\" have?",
        "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
    },
    "interaction": [
        {
            "utterance": "Show me all the albums from `` Metallica '' .",
            "sql": "select * where artist.name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where artist.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which artist does the album \"Balls to the Wall\" belong to?",
        "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""
    },
    "interaction": [
        {
            "utterance": "Is there an album called `` Balls to the Wall '' ?",
            "sql": "select album.* where album.title = value"
        },
        {
            "utterance": "Who made it ?",
            "sql": "select artist.name where album.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which artist has the most albums?",
        "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which artist has the least albums ?",
            "sql": "select artist.name group_by artist.name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the most albums ?",
            "sql": "select artist.name group_by artist.name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of all the tracks that contain the word \"you\".",
        "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
    },
    "interaction": [
        {
            "utterance": "Find the names of all the albums that contain the word `` you '' .",
            "sql": "select album.title where album.title like value"
        },
        {
            "utterance": "Oops , I meant tracks not albums .",
            "sql": "select track.name where track.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    "interaction": [
        {
            "utterance": "What is the longest track ?",
            "sql": "select max ( track.milliseconds )"
        },
        {
            "utterance": "The shortest ?",
            "sql": "select min ( track.milliseconds )"
        },
        {
            "utterance": "Show me both .",
            "sql": "select max ( track.milliseconds ) , min ( track.milliseconds )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the album names, ids and the number of tracks for each album.",
        "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID"
    },
    "interaction": [
        {
            "utterance": "Show me the names and ids of each album .",
            "sql": "select album.title , track.albumid group_by track.albumid"
        },
        {
            "utterance": "Show me the number of tracks each album has as well .",
            "sql": "select album.title , track.albumid , count ( * ) group_by track.albumid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the most common genre in all tracks?",
        "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the 10 most common genres in all tracks .",
            "sql": "select genre.name group_by track.genreid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show me the 10 least common genres .",
            "sql": "select genre.name group_by track.genreid order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Show me the most common one .",
            "sql": "select genre.name group_by track.genreid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the least common media type in all tracks?",
        "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the media types in tracks .",
            "sql": "select mediatype.name group_by track.mediatypeid"
        },
        {
            "utterance": "What is the most common one ?",
            "sql": "select mediatype.name group_by track.mediatypeid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about the least common one ?",
            "sql": "select mediatype.name group_by track.mediatypeid order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"
    },
    "interaction": [
        {
            "utterance": "Show me all the tracks with unit price bigger than 1 .",
            "sql": "select track.name where track.unitprice > value"
        },
        {
            "utterance": "Show me their album names and ids",
            "sql": "select album.title , track.albumid where track.unitprice > value group_by track.albumid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many tracks belong to rock genre?",
        "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    "interaction": [
        {
            "utterance": "Show me tracks that belong to rock genre .",
            "sql": "select track.name where genre.name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the average unit price of tracks that belong to Jazz genre?",
        "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    "interaction": [
        {
            "utterance": "What is the most expensive track with Jazz genre ?",
            "sql": "select max ( track.unitprice ) where genre.name = value"
        },
        {
            "utterance": "Show me the average unit price of all Jazz genre tracks .",
            "sql": "select avg ( track.unitprice ) where genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many customers have email that contains \"gmail.com\"?",
        "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
    },
    "interaction": [
        {
            "utterance": "Show me first name of customers with emails that contain `` gmail.com '' .",
            "sql": "select customer.firstname where customer.email like value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( customer.* ) where customer.email like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the first name and last name employee helps the customer with first name Leonie?",
        "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""
    },
    "interaction": [
        {
            "utterance": "Show me the customer with first name Leonie .",
            "sql": "select customer.* where customer.firstname = value"
        },
        {
            "utterance": "What is the first and last name of the employee assigned to this customer ?",
            "sql": "select employee.firstname , employee.lastname where customer.firstname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What city does the employee who helps the customer with postal code 70174 live in?",
        "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\""
    },
    "interaction": [
        {
            "utterance": "Find me a customer with postal code 70174 .",
            "sql": "select customer.* where customer.postalcode = value"
        },
        {
            "utterance": "Which employee was assigned to this customer ? Give me the first and last names .",
            "sql": "select employee.firstname , employee.lastname where customer.postalcode = value"
        },
        {
            "utterance": "Which city does he/she live ?",
            "sql": "select employee.city where customer.postalcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""
    },
    "interaction": [
        {
            "utterance": "Find all invoice dates of customer named Astrid .",
            "sql": "select invoice.invoicedate where customer.firstname = value"
        },
        {
            "utterance": "Hm , find them for Astrids with last name Gruber .",
            "sql": "select invoice.invoicedate where customer.firstname = value and customer.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find all the customer last names that do not have invoice totals larger than 20.",
        "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20"
    },
    "interaction": [
        {
            "utterance": "Show me first names of all customers that have invoice totals less than 20 .",
            "sql": "select customer.firstname except select customer.lastname where invoice.total < value"
        },
        {
            "utterance": "I meant last names .",
            "sql": "select customer.lastname except select customer.lastname where invoice.total < value"
        },
        {
            "utterance": "Oh I meant invoice totals larger than 20 , not less than .",
            "sql": "select customer.lastname except select customer.lastname where invoice.total > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the first names of all customers that live in Brazil and have an invoice.",
        "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
    },
    "interaction": [
        {
            "utterance": "Find the first names of all customers that live in Brazil",
            "sql": "select distinct customer.firstname where customer.country = value"
        },
        {
            "utterance": "Among them , find ones who have an invoice .",
            "sql": "select distinct customer.firstname where customer.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the address of all customers that live in Germany and have invoice.",
        "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
    },
    "interaction": [
        {
            "utterance": "Find the address of all customers who live in Germany .",
            "sql": "select distinct customer.address where customer.country = value"
        },
        {
            "utterance": "Among those , find the ones who have invoice .",
            "sql": "select distinct customer.address where customer.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 20,
    "final": {
        "utterance": "How many tracks are in the AAC audio file media type?",
        "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
    },
    "interaction": [
        {
            "utterance": "Show me the tracks that are in AAC audio file media type",
            "sql": "select * where mediatype.name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where mediatype.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
    },
    "interaction": [
        {
            "utterance": "What is the average duration of tracks that belong to Latin genre ?",
            "sql": "select avg ( track.milliseconds ) where genre.name = value"
        },
        {
            "utterance": "How about Pop ?",
            "sql": "select avg ( track.milliseconds ) where genre.name = value"
        },
        {
            "utterance": "Show me the average for both genres .",
            "sql": "select avg ( track.milliseconds ) where genre.name = value or genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "Show the first names and ids of employees serving 10 customers .",
            "sql": "select customer.firstname , customer.supportrepid group_by customer.supportrepid having count ( * ) = value"
        },
        {
            "utterance": "Show me those serving at least 10 customers .",
            "sql": "select customer.firstname , customer.supportrepid group_by customer.supportrepid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Please show the employee last names that serves no more than 20 customers.",
        "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"
    },
    "interaction": [
        {
            "utterance": "Show me first names for employees serving 20 customers .",
            "sql": "select customer.firstname group_by customer.supportrepid having count ( * ) = value"
        },
        {
            "utterance": "Show me their last names .",
            "sql": "select customer.lastname group_by customer.supportrepid having count ( * ) = value"
        },
        {
            "utterance": "Show me the same for employees serving no more than 20 customers .",
            "sql": "select customer.lastname group_by customer.supportrepid having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "Show me all artists with at least 3 albums .",
            "sql": "select * group_by album.artistid having count ( * ) > = value"
        },
        {
            "utterance": "Show me their names and ids .",
            "sql": "select artist.name , album.artistid group_by album.artistid having count ( * ) > = value order_by artist.name"
        },
        {
            "utterance": "Sort them in alphabetical order .",
            "sql": "select artist.name , album.artistid group_by album.artistid having count ( * ) > = value order_by artist.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the names of artists that do not have any albums.",
        "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"
    },
    "interaction": [
        {
            "utterance": "How many artists do n't have any albums ?",
            "sql": "select count ( artist.* ) except select artist.name"
        },
        {
            "utterance": "Find me their names .",
            "sql": "select artist.name except select artist.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the average unit price of rock tracks?",
        "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
    },
    "interaction": [
        {
            "utterance": "What is the max unit price of rock tracks ?",
            "sql": "select max ( track.unitprice ) where genre.name = value"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( track.unitprice ) where genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    "interaction": [
        {
            "utterance": "How long is the longest pop track ?",
            "sql": "select max ( track.milliseconds ) where genre.name = value"
        },
        {
            "utterance": "How about the shortest one ?",
            "sql": "select min ( track.milliseconds ) where genre.name = value"
        },
        {
            "utterance": "Show me durations for both of those pop tracks .",
            "sql": "select max ( track.milliseconds ) , min ( track.milliseconds ) where genre.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "chinook_1",
    "interaction_id": 28,
    "final": {
        "utterance": "How many artists do not have any album?",
        "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    "interaction": [
        {
            "utterance": "Show me the names of artists with no album .",
            "sql": "select artist.name except select artist.name"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( artist.* ) where artist.artistid not in ( select album.artistid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
    },
    "interaction": [
        {
            "utterance": "Show me the names of all entrepreneurs .",
            "sql": "select people.name"
        },
        {
            "utterance": "Whose investor is not Rachel Elnaugh ?",
            "sql": "select people.name where entrepreneur.investor != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the weight of the shortest person?",
        "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all people .",
            "sql": "select people.name"
        },
        {
            "utterance": "Who has the shortest height ?",
            "sql": "select people.name order_by people.height asc limit_value"
        },
        {
            "utterance": "What is this people 's weight ?",
            "sql": "select people.weight order_by people.height asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name of the entrepreneur with the greatest weight?",
        "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all entrepreneurs .",
            "sql": "select people.name"
        },
        {
            "utterance": "Who has the greatest weight ?",
            "sql": "select people.name order_by people.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the total money requested by entrepreneurs with height more than 1.85?",
        "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all entrepreneurs .",
            "sql": "select people.name"
        },
        {
            "utterance": "Show me those with height taller than 1.85 .",
            "sql": "select people.name where people.height > value"
        },
        {
            "utterance": "What is the total money requested by them ?",
            "sql": "select sum ( entrepreneur.money_requested ) where people.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
    },
    "interaction": [
        {
            "utterance": "Show me the names of all entrepreneurs .",
            "sql": "select people.name"
        },
        {
            "utterance": "Whose investor is Simon Woodroffe or Peter Jones ?",
            "sql": "select people.name where entrepreneur.investor = value or entrepreneur.investor = value"
        },
        {
            "utterance": "Show me their dates of birth .",
            "sql": "select people.date_of_birth where entrepreneur.investor = value or entrepreneur.investor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the weights of entrepreneurs in descending order of money requested?",
        "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all entrepreneurs .",
            "sql": "select people.name"
        },
        {
            "utterance": "How much money did they each request ?",
            "sql": "select people.name , entrepreneur.money_requested"
        },
        {
            "utterance": "Give me the weights of them only , in descending order of money requested .",
            "sql": "select people.weight order_by entrepreneur.money_requested desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 6,
    "final": {
        "utterance": "Who is the investor that has invested in the most number of entrepreneurs?",
        "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all investors .",
            "sql": "select entrepreneur.investor group_by entrepreneur.investor"
        },
        {
            "utterance": "Who has invested in the most number of entrepreneurs ?",
            "sql": "select entrepreneur.investor group_by entrepreneur.investor order_by count ( entrepreneur.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 7,
    "final": {
        "utterance": "Who are the investors that have invested in at least two entrepreneurs?",
        "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all investors .",
            "sql": "select entrepreneur.investor group_by entrepreneur.investor"
        },
        {
            "utterance": "Who have invested in at least two entrepreneurs ?",
            "sql": "select entrepreneur.investor group_by entrepreneur.investor having count ( entrepreneur.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all entrepreneurs .",
            "sql": "select people.name"
        },
        {
            "utterance": "What are their companies ?",
            "sql": "select people.name , entrepreneur.company"
        },
        {
            "utterance": "List them in descending order of money requested .",
            "sql": "select people.name , entrepreneur.company order_by entrepreneur.money_requested"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 9,
    "final": {
        "utterance": "List the names of people that are not entrepreneurs.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
    },
    "interaction": [
        {
            "utterance": "What are the name of all the people ?",
            "sql": "select people.name"
        },
        {
            "utterance": "Show me those who are not entrepreneurs .",
            "sql": "select people.name where people.people_id not in ( select entrepreneur.people_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entrepreneur",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all investors .",
            "sql": "select entrepreneur.investor group_by entrepreneur.investor"
        },
        {
            "utterance": "Who have been requested more than 140000 by any entrepreneurs ?",
            "sql": "select entrepreneur.investor where entrepreneur.money_requested > value"
        },
        {
            "utterance": "Among them , who have been requested less than 120000 by any entrepreneurs ?",
            "sql": "select entrepreneur.investor where entrepreneur.money_requested > value intersect select entrepreneur.investor where entrepreneur.money_requested < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum number of cows across all farms.",
        "sql": "SELECT max(Cows) ,  min(Cows) FROM farm"
    },
    "interaction": [
        {
            "utterance": "Tell me everything about the farms .",
            "sql": "select farm.*"
        },
        {
            "utterance": "Show me the bulls produced by all the farms .",
            "sql": "select farm.bulls"
        },
        {
            "utterance": "What about the cows ?",
            "sql": "select farm.cows"
        },
        {
            "utterance": "Tell me the maximum and minimum number of cows .",
            "sql": "select max ( farm.cows ) , min ( farm.cows )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 1,
    "final": {
        "utterance": "List the official name and status of the city with the largest population.",
        "sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the official names of all the cities .",
            "sql": "select city.official_name"
        },
        {
            "utterance": "Which of these cities has the largest population ?",
            "sql": "select city.official_name order_by city.population desc limit_value"
        },
        {
            "utterance": "What is its population ?",
            "sql": "select city.official_name , city.population order_by city.population desc limit_value"
        },
        {
            "utterance": "Can you only show the official name and status of this city ?",
            "sql": "select city.official_name , city.status order_by city.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the official names of the cities that have hosted more than one competition.",
        "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List all the city names .",
            "sql": "select city.official_name"
        },
        {
            "utterance": "Can you also show me the competition id of these cities ?",
            "sql": "select city.official_name , farm_competition.competition_id"
        },
        {
            "utterance": "How about the themes of these competitions ?",
            "sql": "select city.official_name , farm_competition.theme"
        },
        {
            "utterance": "Which of these cities hosted more than one competition ?",
            "sql": "select city.official_name group_by farm_competition.host_city_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the status of the city that has hosted the greatest number of competitions.",
        "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all cities",
            "sql": "select city.official_name"
        },
        {
            "utterance": "How many competitions did these cities host ?",
            "sql": "select city.official_name , count ( * ) group_by city.city_id"
        },
        {
            "utterance": "Which of these cities hosted the most competitions ?",
            "sql": "select city.official_name group_by farm_competition.host_city_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Can you only show me its status ?",
            "sql": "select city.status group_by farm_competition.host_city_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 4,
    "final": {
        "utterance": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    "interaction": [
        {
            "utterance": "Show me the information for all of the cities .",
            "sql": "select city.*"
        },
        {
            "utterance": "Which of these cities have a population greater than 1000 ?",
            "sql": "select city.* where city.population > value"
        },
        {
            "utterance": "Show me all the years when a competition was held in these cities .",
            "sql": "select farm_competition.year where city.population > value"
        },
        {
            "utterance": "What about the themes of these competitions ?",
            "sql": "select farm_competition.theme where city.population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the different statuses, ordered by the number of cities that have each.",
        "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
    },
    "interaction": [
        {
            "utterance": "List the official names of all the cities .",
            "sql": "select distinct city.official_name"
        },
        {
            "utterance": "Show me all the status of these cities .",
            "sql": "select distinct city.status"
        },
        {
            "utterance": "What is the number of cities with each status ?",
            "sql": "select city.status , count ( city.* ) group_by city.status"
        },
        {
            "utterance": "Can you show them in increasing order ?",
            "sql": "select city.status group_by city.status order_by count ( city.* ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 6,
    "final": {
        "utterance": "List the most common type of Status across cities.",
        "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the names of all the cities .",
            "sql": "select city.official_name"
        },
        {
            "utterance": "Tell me the city status of `` Grand Falls/Grand-Sault '' .",
            "sql": "select city.status where city.official_name = value"
        },
        {
            "utterance": "Which of the cities are not towns ?",
            "sql": "select city.official_name where city.status != value"
        },
        {
            "utterance": "Which city status is the most common ?",
            "sql": "select city.status group_by city.status order_by count ( city.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 7,
    "final": {
        "utterance": "List the official names of cities that have not held any competition.",
        "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
    },
    "interaction": [
        {
            "utterance": "Show me all the cities .",
            "sql": "select city.*"
        },
        {
            "utterance": "Show me the official names of all the cities .",
            "sql": "select city.official_name"
        },
        {
            "utterance": "Which of these cities have hosted competitions before ?",
            "sql": "select distinct city.official_name"
        },
        {
            "utterance": "Which of them have not ?",
            "sql": "select city.official_name where city.city_id not in ( select farm_competition.host_city_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "farm",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
        "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"
    },
    "interaction": [
        {
            "utterance": "List the names of all the cities .",
            "sql": "select city.official_name"
        },
        {
            "utterance": "Which of these cities have a population bigger than 1500 ?",
            "sql": "select city.official_name where city.population > value"
        },
        {
            "utterance": "Which cities have a population smaller than 500 ?",
            "sql": "select city.official_name where city.population < value"
        },
        {
            "utterance": "Show all statuses that are common between these two types of cities .",
            "sql": "select city.status where city.population > value intersect select city.status where city.population < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
        "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
    },
    "interaction": [
        {
            "utterance": "Can I see the names of the gymnasts ?",
            "sql": "select people.name"
        },
        {
            "utterance": "How old is the gymnast from Bonao ?",
            "sql": "select people.age where people.hometown = value"
        },
        {
            "utterance": "Who is from Miami ?",
            "sql": "select people.name where people.hometown = value"
        },
        {
            "utterance": "How about gymnasts not from `` Santo Domingo '' ?",
            "sql": "select people.name where people.hometown != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the age of the tallest person?",
        "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average height of all people ?",
            "sql": "select avg ( people.height )"
        },
        {
            "utterance": "How about the average height of gymnasts ?",
            "sql": "select avg ( people.height )"
        },
        {
            "utterance": "How old is the tallest among all people ?",
            "sql": "select people.age order_by people.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of the top 5 oldest people.",
        "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "Who is the tallest ?",
            "sql": "select people.name order_by people.height desc limit_value"
        },
        {
            "utterance": "Who is the oldest gymnast ?",
            "sql": "select people.name order_by people.age desc limit_value"
        },
        {
            "utterance": "Please show the top 5 oldest gymnasts .",
            "sql": "select people.name order_by people.age desc limit_value"
        },
        {
            "utterance": "How about the top 5 oldest people ?",
            "sql": "select people.name order_by people.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the total point count of the youngest gymnast?",
        "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all people ?",
            "sql": "select avg ( people.age )"
        },
        {
            "utterance": "How about the average age of all gymnasts ?",
            "sql": "select avg ( people.age )"
        },
        {
            "utterance": "Who is the youngest gymnast ?",
            "sql": "select people.name order_by people.age asc limit_value"
        },
        {
            "utterance": "How many total points does he have ?",
            "sql": "select gymnast.total_points order_by people.age asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5"
    },
    "interaction": [
        {
            "utterance": "What is the average total points of gymnasts ?",
            "sql": "select avg ( gymnast.total_points )"
        },
        {
            "utterance": "How many gymnasts are there that have total points more than 50 ?",
            "sql": "select count ( * ) where gymnast.total_points > value"
        },
        {
            "utterance": "How about the number of gymnasts with total points more than 57.5 ?",
            "sql": "select count ( * ) where gymnast.total_points > value"
        },
        {
            "utterance": "What are the distinct hometowns of these gymnasts ?",
            "sql": "select distinct people.hometown where gymnast.total_points > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"
    },
    "interaction": [
        {
            "utterance": "How many gymnasts are there ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "How many gymnasts are there in each age group ?",
            "sql": "select people.age , count ( * ) group_by people.age"
        },
        {
            "utterance": "How many gymnasts are there in each hometown ?",
            "sql": "select people.hometown , count ( * ) group_by people.hometown"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the most common hometown of gymnasts?",
        "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many distinct hometowns are there ?",
            "sql": "select count ( distinct people.hometown )"
        },
        {
            "utterance": "How many gymnasts are from each town ?",
            "sql": "select people.hometown , count ( * ) group_by people.hometown"
        },
        {
            "utterance": "What is the most common hometown ?",
            "sql": "select people.hometown group_by people.hometown order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the hometowns that are shared by at least two gymnasts?",
        "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many distinct hometowns are there ?",
            "sql": "select count ( distinct people.hometown )"
        },
        {
            "utterance": "How many gymnasts are there in each hometown ?",
            "sql": "select people.hometown , count ( * ) group_by people.hometown"
        },
        {
            "utterance": "Which hometown has more than 1 gymnast ?",
            "sql": "select people.hometown group_by people.hometown having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of gymnasts in ascending order by their heights.",
        "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
    },
    "interaction": [
        {
            "utterance": "Who is the tallest gymnast ?",
            "sql": "select people.name order_by people.height desc limit_value"
        },
        {
            "utterance": "How about the shortest gymnast ?",
            "sql": "select people.name order_by people.height asc limit_value"
        },
        {
            "utterance": "Please show the names of gymnasts in ascending order by their heights .",
            "sql": "select people.name order_by people.height asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 9,
    "final": {
        "utterance": "List the distinct hometowns that are not associated with any gymnast.",
        "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    "interaction": [
        {
            "utterance": "What is the average Floor Exercise Points of gymnasts ?",
            "sql": "select avg ( gymnast.floor_exercise_points )"
        },
        {
            "utterance": "Please show the hometowns of the gymnasts .",
            "sql": "select people.hometown"
        },
        {
            "utterance": "Please show the hometowns of all people .",
            "sql": "select people.hometown"
        },
        {
            "utterance": "What are the distinct hometowns that do not have any gymnasts ?",
            "sql": "select distinct people.hometown except select distinct people.hometown"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gymnast",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the hometowns shared by people older than 23 and younger than 20.",
        "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20"
    },
    "interaction": [
        {
            "utterance": "How many people are older than 23 ?",
            "sql": "select count ( people.* ) where people.age > value"
        },
        {
            "utterance": "How about the number of people younger than 20 ?",
            "sql": "select count ( people.* ) where people.age < value"
        },
        {
            "utterance": "Please show their hometowns .",
            "sql": "select people.hometown where people.age < value"
        },
        {
            "utterance": "How about the hometowns shared by people older than 23 and younger than 20 ?",
            "sql": "select people.hometown where people.age > value intersect select people.hometown where people.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "sql": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\""
    },
    "interaction": [
        {
            "utterance": "What is the average price of phones ?",
            "sql": "select avg ( phone.price )"
        },
        {
            "utterance": "What about their names ?",
            "sql": "select phone.name"
        },
        {
            "utterance": "Of those , only tell me the ones that are either `` Sprint '' or `` TMobile '' carriers .",
            "sql": "select phone.name where phone.carrier = value or phone.carrier = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the carrier of the most expensive phone?",
        "sql": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the memory of the cheapest phone ?",
            "sql": "select phone.memory_in_g order_by phone.price asc limit_value"
        },
        {
            "utterance": "Include the name as well please .",
            "sql": "select phone.name , phone.memory_in_g order_by phone.price asc limit_value"
        },
        {
            "utterance": "What about for the most expensive phone ?",
            "sql": "select phone.name , phone.memory_in_g order_by phone.price desc limit_value"
        },
        {
            "utterance": "Which company carries this ?",
            "sql": "select phone.carrier order_by phone.price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the most frequently used carrier of the phones.",
        "sql": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the cheapest phone ?",
            "sql": "select phone.* order_by phone.price asc limit_value"
        },
        {
            "utterance": "Which carrier has this ?",
            "sql": "select phone.carrier order_by phone.price asc limit_value"
        },
        {
            "utterance": "Which one has the most phones instead ?",
            "sql": "select phone.carrier group_by phone.carrier order_by count ( phone.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "sql": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64"
    },
    "interaction": [
        {
            "utterance": "Show me all the phone carriers .",
            "sql": "select phone.carrier"
        },
        {
            "utterance": "The ones with a phones having a price range of 700 to 900 ?",
            "sql": "select phone.carrier where phone.price > value and phone.price < value"
        },
        {
            "utterance": "How about the ones that have phones both price less than 700 and price more than 900 .",
            "sql": "select phone.carrier where phone.price < value intersect select phone.carrier where phone.price > value"
        },
        {
            "utterance": "What about phones with memory less than 32 and memory greater than 64 ?",
            "sql": "select phone.carrier where phone.memory_in_g < value intersect select phone.carrier where phone.memory_in_g > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of phones and the districts of markets they are on.",
        "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    "interaction": [
        {
            "utterance": "What are the names of the phones available ?",
            "sql": "select phone.name"
        },
        {
            "utterance": "What about those available in Alberta ?",
            "sql": "select phone.name where market.district = value"
        },
        {
            "utterance": "Show the district as well .",
            "sql": "select phone.name , market.district where market.district = value"
        },
        {
            "utterance": "Remove the restriction of those in Alberta only , show all instead .",
            "sql": "select phone.name , market.district"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking"
    },
    "interaction": [
        {
            "utterance": "What are the names and districts of the phones I can find in Ontario ?",
            "sql": "select phone.name , market.district where market.district = value"
        },
        {
            "utterance": "What about for each of the market district ?",
            "sql": "select phone.name , market.district"
        },
        {
            "utterance": "Order those by increasing number of shops .",
            "sql": "select phone.name , market.district order_by market.num_of_shops"
        },
        {
            "utterance": "By ranking instead ?",
            "sql": "select phone.name , market.district order_by market.ranking"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of phones that are on market with number of shops greater than 50.",
        "sql": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50"
    },
    "interaction": [
        {
            "utterance": "What are the markets with at least 30 shops ?",
            "sql": "select market.* where market.num_of_shops > value"
        },
        {
            "utterance": "50 shops ?",
            "sql": "select market.* where market.num_of_shops > value"
        },
        {
            "utterance": "What are their phones ?",
            "sql": "select phone.name where market.num_of_shops > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 7,
    "final": {
        "utterance": "For each phone, show its names and total number of stocks.",
        "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the phones ?",
            "sql": "select phone.name"
        },
        {
            "utterance": "Show me their memory as well .",
            "sql": "select phone.name , phone.memory_in_g"
        },
        {
            "utterance": "Their total stocks ?",
            "sql": "select phone.name , sum ( phone_market.num_of_stock ) group_by phone.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_market",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC"
    },
    "interaction": [
        {
            "utterance": "Show the names of phones and their stocks .",
            "sql": "select phone.name , phone_market.num_of_stock"
        },
        {
            "utterance": "Of those , which have 64 GB memory ?",
            "sql": "select phone.name , phone_market.num_of_stock where phone.memory_in_g = value"
        },
        {
            "utterance": "How about the having total stocks at least 2000 instead ?",
            "sql": "select phone.name , phone_market.num_of_stock group_by phone.name having sum ( phone_market.num_of_stock ) > = value"
        },
        {
            "utterance": "Do n't show their number of stocks .",
            "sql": "select phone.name group_by phone.name having sum ( phone_market.num_of_stock ) > = value"
        },
        {
            "utterance": "Can you sort them in increasing order of total stocks ?",
            "sql": "select phone.name group_by phone.name having sum ( phone_market.num_of_stock ) > = value order_by sum ( phone_market.num_of_stock )"
        },
        {
            "utterance": "Decreasing order instead .",
            "sql": "select phone.name group_by phone.name having sum ( phone_market.num_of_stock ) > = value order_by sum ( phone_market.num_of_stock ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the minimum and maximum vote percents of elections?",
        "sql": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election"
    },
    "interaction": [
        {
            "utterance": "Show me the vote percents of all the elections .",
            "sql": "select election.vote_percent"
        },
        {
            "utterance": "What are the minimum and maximum ones of them ?",
            "sql": "select min ( election.vote_percent ) , max ( election.vote_percent )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the life spans of representatives from New York state or Indiana state?",
        "sql": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\""
    },
    "interaction": [
        {
            "utterance": "Show me the the name of all the representatives .",
            "sql": "select representative.name"
        },
        {
            "utterance": "Only show me those from New York or Indiana .",
            "sql": "select representative.name where representative.state = value or representative.state = value"
        },
        {
            "utterance": "What about their life spans ?",
            "sql": "select representative.lifespan where representative.state = value or representative.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the names of representatives with more than 10000 votes in election?",
        "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the representatives .",
            "sql": "select representative.name"
        },
        {
            "utterance": "What about their votes in their elections ?",
            "sql": "select representative.name , election.votes"
        },
        {
            "utterance": "Only show me the name of those with more than 10000 votes .",
            "sql": "select representative.name where election.votes > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of representatives in descending order of votes?",
        "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the representatives .",
            "sql": "select representative.name"
        },
        {
            "utterance": "What about their votes in their elections ?",
            "sql": "select representative.name , election.votes"
        },
        {
            "utterance": "Show me their names in descending order of votes .",
            "sql": "select representative.name order_by election.votes desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the party of the representative that has the smallest number of votes.",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all parties of the representative .",
            "sql": "select distinct representative.party"
        },
        {
            "utterance": "Show me the names of all the representatives .",
            "sql": "select representative.name"
        },
        {
            "utterance": "What are their votes ?",
            "sql": "select representative.name , election.votes"
        },
        {
            "utterance": "What is the party of the one with the smallest number of votes ?",
            "sql": "select representative.party order_by election.votes asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the lifespans of representatives in descending order of vote percent?",
        "sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the representatives .",
            "sql": "select representative.name"
        },
        {
            "utterance": "What about their lifespans ?",
            "sql": "select representative.name , representative.lifespan"
        },
        {
            "utterance": "Please list them in descending order of their vote percentage .",
            "sql": "select representative.lifespan order_by election.vote_percent desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the average number of votes of representatives from party \"Republican\"?",
        "sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of representatives from Republican party .",
            "sql": "select representative.name where representative.party = value"
        },
        {
            "utterance": "What about their votes ?",
            "sql": "select representative.name , election.votes where representative.party = value"
        },
        {
            "utterance": "Show me the average of them .",
            "sql": "select avg ( election.votes ) where representative.party = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the party that has the largest number of representatives?",
        "sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the name of parties of representatives ?",
            "sql": "select distinct representative.party"
        },
        {
            "utterance": "Show me the number of representatives in each party .",
            "sql": "select representative.party , count ( representative.* ) group_by representative.party"
        },
        {
            "utterance": "Give me the party that has more .",
            "sql": "select representative.party , count ( representative.* ) group_by representative.party order_by count ( representative.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 8,
    "final": {
        "utterance": "What parties have at least three representatives?",
        "sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "What are the name of parties of representatives ?",
            "sql": "select distinct representative.party"
        },
        {
            "utterance": "Show me the number of representatives in each party .",
            "sql": "select representative.party , count ( representative.* ) group_by representative.party"
        },
        {
            "utterance": "Give me the parties that have at least three of them .",
            "sql": "select representative.party group_by representative.party having count ( representative.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 9,
    "final": {
        "utterance": "What states have at least two representatives?",
        "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show me the name of the states of representative .",
            "sql": "select representative.state"
        },
        {
            "utterance": "What about their number of representatives ?",
            "sql": "select representative.state , count ( representative.* ) group_by representative.state"
        },
        {
            "utterance": "Show me the states that have at least of them .",
            "sql": "select representative.state group_by representative.state having count ( representative.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election_representative",
    "interaction_id": 10,
    "final": {
        "utterance": "List the names of representatives that have not participated in elections listed here.",
        "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the representatives .",
            "sql": "select representative.name"
        },
        {
            "utterance": "Who have not participated in elections listed here ?",
            "sql": "select representative.name where representative.representative_id not in ( select election.representative_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the race held most recently?",
        "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the races ?",
            "sql": "select races.*"
        },
        {
            "utterance": "Show the name of the one held most recently .",
            "sql": "select races.name order_by races.date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name and date of the most recent race?",
        "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the races ?",
            "sql": "select races.*"
        },
        {
            "utterance": "What is the most recent one ?",
            "sql": "select races.* order_by races.date desc limit_value"
        },
        {
            "utterance": "Only show its name and date .",
            "sql": "select races.name , races.date order_by races.date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of all races held in 2017.",
        "sql": "SELECT name FROM races WHERE YEAR = 2017"
    },
    "interaction": [
        {
            "utterance": "What are all the races held in 2017 ?",
            "sql": "select races.* where races.year = value"
        },
        {
            "utterance": "Only show their names .",
            "sql": "select races.name where races.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the distinct names of all races held between 2014 and 2017?",
        "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
    },
    "interaction": [
        {
            "utterance": "What are all races held between 2014 and 2017 ?",
            "sql": "select races.* where races.year between value and value"
        },
        {
            "utterance": "Show the distinct names of them .",
            "sql": "select distinct races.name where races.year between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "What about those who once had laptime less than 93000 milliseconds ?",
            "sql": "select * where laptimes.milliseconds < value"
        },
        {
            "utterance": "Show the distinct forename and surname of them .",
            "sql": "select distinct drivers.forename , drivers.surname where laptimes.milliseconds < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "What about those who once had laptime more than 100000 milliseconds ?",
            "sql": "select * where laptimes.milliseconds > value"
        },
        {
            "utterance": "Show the distinct driver id and nationality of them .",
            "sql": "select distinct drivers.driverid , drivers.nationality where laptimes.milliseconds > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the forename and surname of the driver who has the smallest laptime?",
        "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Show the forename and surname of the one with the smallest laptime .",
            "sql": "select drivers.forename , drivers.surname order_by laptimes.milliseconds limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the id and family name of the driver who has the longest laptime?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Show the id and family name of the one with the longest laptime .",
            "sql": "select drivers.driverid , drivers.surname order_by laptimes.milliseconds desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the id, forename and surname of the driver who had the first position in terms of laptime at least twice?",
        "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Which ones of them had the first position in terms of laptime at least twice ?",
            "sql": "select * where laptimes.position = value group_by drivers.driverid having count ( * ) > = value"
        },
        {
            "utterance": "Only show their id , forename and surname",
            "sql": "select drivers.driverid , drivers.forename , drivers.surname where laptimes.position = value group_by drivers.driverid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Which ones of them participated in the race Australian Grand Prix held in 2009 ?",
            "sql": "select count ( * ) where races.name = value and races.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How many drivers did not participate in the races held in 2009?",
        "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Which ones of them did not participate in the races held in 2009 ?",
            "sql": "select count ( distinct results.driverid ) where results.raceid not in ( select races.raceid where races.year != value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
    },
    "interaction": [
        {
            "utterance": "What are all the drivers with forename Lewis ?",
            "sql": "select drivers.* where drivers.forename = value"
        },
        {
            "utterance": "Show the names and years of races that had any of them ?",
            "sql": "select races.name , races.year where drivers.forename = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the forename and surname of drivers whose nationality is German?",
        "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Show the forename and surname of those whose nationality is German .",
            "sql": "select drivers.forename , drivers.surname where drivers.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the ids and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    "interaction": [
        {
            "utterance": "What are the ids and forenames of drivers that participated in races with name Australian Grand Prix ?",
            "sql": "select results.driverid , drivers.forename where races.name = value"
        },
        {
            "utterance": "Among them , show those who also participated the races with name Chinese Grand Prix .",
            "sql": "select results.driverid , drivers.forename where races.name = value intersect select results.driverid , drivers.forename where races.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
        "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    "interaction": [
        {
            "utterance": "What are the forenames and surnames of drivers that participated in races with name Australian Grand Prix ?",
            "sql": "select drivers.forename , drivers.surname where races.name = value"
        },
        {
            "utterance": "Among them , show those who did not participate in the races named Chinese Grand Prix .",
            "sql": "select drivers.forename , drivers.surname where races.name = value except select drivers.forename , drivers.surname where races.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find all the forenames of distinct drivers who was in position 1 as standing and won?",
        "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"
    },
    "interaction": [
        {
            "utterance": "Who are all the drivers who was in position 1 as standing ?",
            "sql": "select * where driverstandings.position = value"
        },
        {
            "utterance": "Among them , show the distinct forenames of those who also won ?",
            "sql": "select distinct drivers.forename where driverstandings.position = value and driverstandings.wins = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
    },
    "interaction": [
        {
            "utterance": "Who are all the drivers who was in position 1 as standing ?",
            "sql": "select * where driverstandings.position = value"
        },
        {
            "utterance": "Among them , show those who also won ?",
            "sql": "select * where driverstandings.position = value and driverstandings.wins = value"
        },
        {
            "utterance": "Furthermore , show the distinct forenames of those who had more than 20 points .",
            "sql": "select distinct drivers.forename where driverstandings.position = value and driverstandings.wins = value and driverstandings.points > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the numbers of constructors for different nationalities?",
        "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"
    },
    "interaction": [
        {
            "utterance": "Who are all the constructors ?",
            "sql": "select constructors.*"
        },
        {
            "utterance": "Show the number of them in terms of each nationality .",
            "sql": "select count ( constructors.* ) , constructors.nationality group_by constructors.nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the numbers of races for each constructor id?",
        "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"
    },
    "interaction": [
        {
            "utterance": "What are all the constructors ?",
            "sql": "select constructors.*"
        },
        {
            "utterance": "How many races did each of them have ?",
            "sql": "select count ( constructorstandings.* ) , constructorstandings.constructorid group_by constructorstandings.constructorid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
    },
    "interaction": [
        {
            "utterance": "What are all the races ?",
            "sql": "select races.*"
        },
        {
            "utterance": "What are the names of those that were held after 2017 ?",
            "sql": "select races.name where races.year > value"
        },
        {
            "utterance": "Among them , show those with their circuits in Spain .",
            "sql": "select races.name where circuits.country = value and races.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
    },
    "interaction": [
        {
            "utterance": "What are all the races ?",
            "sql": "select races.*"
        },
        {
            "utterance": "What are the names of those that were held after 2000 ?",
            "sql": "select races.name where races.year > value"
        },
        {
            "utterance": "Among them , show the distinct name of those with their circuits in Spain .",
            "sql": "select distinct races.name where circuits.country = value and races.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
        "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)"
    },
    "interaction": [
        {
            "utterance": "What is the maximum pit stop duration in the race with id 841 ?",
            "sql": "select max ( pitstops.duration ) where pitstops.raceid = value"
        },
        {
            "utterance": "Find distinct driver ids and stop numbers of all drivers that have a shorter pit stop duration that that one .",
            "sql": "select distinct pitstops.driverid , pitstops.stop where pitstops.duration < ( select max ( pitstops.duration ) where pitstops.raceid = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
        "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)"
    },
    "interaction": [
        {
            "utterance": "What is the minimum pit stop duration in the race with id 841 ?",
            "sql": "select min ( pitstops.duration ) where pitstops.raceid = value"
        },
        {
            "utterance": "Find distinct driver ids and stop numbers of all drivers that have a longer pit stop duration that that one .",
            "sql": "select distinct pitstops.driverid , pitstops.stop where pitstops.duration > ( select min ( pitstops.duration ) where pitstops.raceid = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 23,
    "final": {
        "utterance": "List the forenames of all distinct drivers in alphabetical order?",
        "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
    },
    "interaction": [
        {
            "utterance": "What are the forenames of all the drivers ?",
            "sql": "select drivers.forename"
        },
        {
            "utterance": "Show the distinct of them in alphabetical order .",
            "sql": "select distinct drivers.forename order_by drivers.forename asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 24,
    "final": {
        "utterance": "List the names of all distinct races in reversed  lexicographic order?",
        "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the races ?",
            "sql": "select races.name"
        },
        {
            "utterance": "Show their distinct names in reversed lexicographic order .",
            "sql": "select distinct races.name order_by races.name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the names of races held between 2009 and 2011?",
        "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
    },
    "interaction": [
        {
            "utterance": "What are all the races ?",
            "sql": "select races.*"
        },
        {
            "utterance": "Which of them are held between 2009 and 2011 ?",
            "sql": "select races.name where races.year between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the races ?",
            "sql": "select races.name"
        },
        {
            "utterance": "Which of them are held after 12:00:00 or before 09:00:00 ?",
            "sql": "select races.name where races.time > value or races.time < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 races?",
        "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "What are the first , last names and ids of all the drivers ?",
            "sql": "select drivers.forename , drivers.surname , drivers.driverid"
        },
        {
            "utterance": "Show those who had more than 8 pit stops .",
            "sql": "select drivers.forename , drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) > value"
        },
        {
            "utterance": "Include drivers who participated in more than 5 races",
            "sql": "select drivers.forename , drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) > value union select drivers.forename , drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "What are the last names and ids of all the drivers ?",
            "sql": "select drivers.surname , drivers.driverid"
        },
        {
            "utterance": "Show those who had 11 pit stops .",
            "sql": "select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) = value"
        },
        {
            "utterance": "Among those , who also participated in more than 5 race results ?",
            "sql": "select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) = value intersect select drivers.surname , drivers.driverid group_by drivers.driverid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the id and last name of the driver who participated in the most races after 2010?",
        "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the ids and last names of all the drivers ?",
            "sql": "select drivers.driverid , drivers.surname"
        },
        {
            "utterance": "Who participated in the most races after 2010 ?",
            "sql": "select drivers.driverid , drivers.surname where races.year > value group_by drivers.driverid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the names of circuits that belong to UK or Malaysia?",
        "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the circuits ?",
            "sql": "select circuits.name"
        },
        {
            "utterance": "Which of them belong to UK or Malaysia ?",
            "sql": "select circuits.name where circuits.country = value or circuits.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the id and location of circuits that belong to France or Belgium?",
        "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
    },
    "interaction": [
        {
            "utterance": "What are the ids and locations of all the circuits ?",
            "sql": "select circuits.circuitid , circuits.location"
        },
        {
            "utterance": "Which of them belong to France or Belgium ?",
            "sql": "select circuits.circuitid , circuits.location where circuits.country = value or circuits.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the constructors ?",
            "sql": "select constructors.*"
        },
        {
            "utterance": "Show the names of those who are Japanese .",
            "sql": "select constructors.name where constructors.nationality = value"
        },
        {
            "utterance": "Among those , who have once earned more than 5 points ?",
            "sql": "select constructors.name where constructors.nationality = value and constructorstandings.points > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    "interaction": [
        {
            "utterance": "What is the race named 'Monaco Grand Prix ' in 2008 .",
            "sql": "select races.* where races.year = value and races.name = value"
        },
        {
            "utterance": "What are the fastest lap speed in that race ?",
            "sql": "select results.fastestlapspeed where races.year = value and races.name = value"
        },
        {
            "utterance": "Show the average of them .",
            "sql": "select avg ( results.fastestlapspeed ) where races.year = value and races.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    "interaction": [
        {
            "utterance": "What is the race named 'Monaco Grand Prix ' in 2008 .",
            "sql": "select races.* where races.year = value and races.name = value"
        },
        {
            "utterance": "What are the fastest lap speed in that race ?",
            "sql": "select results.fastestlapspeed where races.year = value and races.name = value"
        },
        {
            "utterance": "Show the maximum of them .",
            "sql": "select max ( results.fastestlapspeed ) where races.year = value and races.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the maximum fastest lap speed in races held after 2014 grouped by race name and ordered by year?",
        "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    "interaction": [
        {
            "utterance": "What are all the races held after 2014 ?",
            "sql": "select races.* where races.year > value"
        },
        {
            "utterance": "What are the maximum fastest lap speed in those races in term of each race ?",
            "sql": "select max ( results.fastestlapspeed ) , races.name , races.year where races.year > value group_by races.name"
        },
        {
            "utterance": "Show them in order of year .",
            "sql": "select max ( results.fastestlapspeed ) , races.name , races.year where races.year > value group_by races.name order_by races.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    "interaction": [
        {
            "utterance": "What are all the races held after 2014 ?",
            "sql": "select races.* where races.year > value"
        },
        {
            "utterance": "What are the average fastest lap speed in those races in term of each race ?",
            "sql": "select avg ( results.fastestlapspeed ) , races.name , races.year where races.year > value group_by races.name"
        },
        {
            "utterance": "Show them in order of year .",
            "sql": "select avg ( results.fastestlapspeed ) , races.name , races.year where races.year > value group_by races.name order_by races.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 37,
    "final": {
        "utterance": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Show the id , forename and number of races of those who have at least participated in two races .",
            "sql": "select drivers.driverid , drivers.forename , count ( * ) group_by drivers.driverid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "formula_1",
    "interaction_id": 38,
    "final": {
        "utterance": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"
    },
    "interaction": [
        {
            "utterance": "Who are all the drivers ?",
            "sql": "select drivers.*"
        },
        {
            "utterance": "Show the id and number of races of those who have at most participated in 30 races .",
            "sql": "select drivers.driverid , count ( * ) group_by drivers.driverid having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "sql": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "tell me the Ram of the chip with model name X5 .",
            "sql": "select chip_model.ram_mib where chip_model.model_name = value"
        },
        {
            "utterance": "How about the X3 Basic 's ?",
            "sql": "select chip_model.ram_mib where chip_model.model_name = value"
        },
        {
            "utterance": "Which model has the least amount of RAM ? List the model name and the amount of RAM .",
            "sql": "select chip_model.model_name , chip_model.ram_mib order_by chip_model.ram_mib asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "sql": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    "interaction": [
        {
            "utterance": "tell me the chip models produced by the company named `` Nokia Corporation '' .",
            "sql": "select phone.chip_model where phone.company_name = value"
        },
        {
            "utterance": "Okay , tell me the RAM size of those chip models .",
            "sql": "select chip_model.ram_mib where phone.company_name = value"
        },
        {
            "utterance": "So , what is maximum and minimum RAM size ?",
            "sql": "select max ( chip_model.ram_mib ) , min ( chip_model.ram_mib ) where phone.company_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    "interaction": [
        {
            "utterance": "tell me the chip model produced by the company named `` Nokia Corporation '' .",
            "sql": "select phone.chip_model where phone.company_name = value"
        },
        {
            "utterance": "Okay , tell me the ROM size of those chip models .",
            "sql": "select chip_model.rom_mib where phone.company_name = value"
        },
        {
            "utterance": "So , what is the average ROM size ?",
            "sql": "select avg ( chip_model.rom_mib ) where phone.company_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 3,
    "final": {
        "utterance": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;"
    },
    "interaction": [
        {
            "utterance": "Tell me the phones that were launched in the year 2002 .",
            "sql": "select phone.hardware_model_name where chip_model.launch_year = value"
        },
        {
            "utterance": "What companies were they produced by ?",
            "sql": "select phone.company_name where chip_model.launch_year = value"
        },
        {
            "utterance": "Give information about the company and hardware model name for phones that have RAM size greater than 32 .",
            "sql": "select phone.hardware_model_name , phone.company_name where chip_model.ram_mib > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "sql": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';"
    },
    "interaction": [
        {
            "utterance": "Tell me the phones that have the word 'Provisional ' in their accreditation types .",
            "sql": "select phone.hardware_model_name where phone.accreditation_type like value"
        },
        {
            "utterance": "How about their company names ?",
            "sql": "select phone.company_name where phone.accreditation_type like value"
        },
        {
            "utterance": "Okay , I want to know the same information of the phones that have word 'Full ' in their accreditation types .",
            "sql": "select phone.hardware_model_name , phone.company_name where phone.accreditation_type like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
        "sql": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"
    },
    "interaction": [
        {
            "utterance": "Tell me the chip model of the phone with hardware model name `` LG-P760 '' .",
            "sql": "select phone.chip_model where phone.hardware_model_name = value"
        },
        {
            "utterance": "How about the Char cells , Pixels and Hardware colours for its screen ?",
            "sql": "select screen_mode.char_cells , screen_mode.pixels , screen_mode.hardware_colours where phone.hardware_model_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 6,
    "final": {
        "utterance": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics\"",
        "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";"
    },
    "interaction": [
        {
            "utterance": "List the hardware model name and company name for the phone whose screen mode type is `` Text '' .",
            "sql": "select phone.hardware_model_name , phone.company_name where screen_mode.type = value"
        },
        {
            "utterance": "How about that with screen mode type `` Graphics '' .",
            "sql": "select phone.hardware_model_name , phone.company_name where screen_mode.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "sql": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Tell me the name of the company that has the largest number of phone models ? Give the count as well .",
            "sql": "select phone.company_name , count ( phone.* ) group_by phone.company_name order_by count ( phone.* ) desc limit_value"
        },
        {
            "utterance": "How about the smallest one ?",
            "sql": "select phone.company_name , count ( phone.* ) group_by phone.company_name order_by count ( phone.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List the name of the company that produced more than one phone model.",
        "sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;"
    },
    "interaction": [
        {
            "utterance": "Tell the name of the company which produced the phone Nokia 700 .",
            "sql": "select phone.company_name where phone.hardware_model_name = value"
        },
        {
            "utterance": "So what is the company which produced the phone LG-P760 ?",
            "sql": "select phone.company_name where phone.hardware_model_name = value"
        },
        {
            "utterance": "Tell me the name of the company that produced more than one phone model .",
            "sql": "select phone.company_name group_by phone.company_name having count ( phone.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 9,
    "final": {
        "utterance": "List the maximum, minimum and average number of used kb in screen mode.",
        "sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;"
    },
    "interaction": [
        {
            "utterance": "Tell me the distinct maps in screen mode .",
            "sql": "select distinct screen_mode.map"
        },
        {
            "utterance": "How about the used kb values ?",
            "sql": "select distinct screen_mode.used_kb"
        },
        {
            "utterance": "Okay , I want to know the maximum , minimum and average number of used kb in screen mode .",
            "sql": "select max ( screen_mode.used_kb ) , min ( screen_mode.used_kb ) , avg ( screen_mode.used_kb )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 10,
    "final": {
        "utterance": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Tell me the the name of the phone model launched in the year 2003 .",
            "sql": "select phone.hardware_model_name where chip_model.launch_year = value"
        },
        {
            "utterance": "How about that in the year 2002 ?",
            "sql": "select phone.hardware_model_name where chip_model.launch_year = value"
        },
        {
            "utterance": "I want to know the one with highest RAM size .",
            "sql": "select phone.hardware_model_name where chip_model.launch_year = value order_by chip_model.ram_mib desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "sql": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"
    },
    "interaction": [
        {
            "utterance": "What are the wifi and screen mode type of the hardware model named `` GT-I9300 '' ?",
            "sql": "select chip_model.wifi , screen_mode.type where phone.hardware_model_name = value"
        },
        {
            "utterance": "How about that of the hardware model named `` Z520e '' ?",
            "sql": "select chip_model.wifi , screen_mode.type where phone.hardware_model_name = value"
        },
        {
            "utterance": "Okay , I want to know that of the hardware model named `` LG-P760 '' .",
            "sql": "select chip_model.wifi , screen_mode.type where phone.hardware_model_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 12,
    "final": {
        "utterance": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
        "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;"
    },
    "interaction": [
        {
            "utterance": "Tell me the hardware model name for the phones that have screen mode type `` Graphics '' .",
            "sql": "select phone.hardware_model_name where screen_mode.type = value"
        },
        {
            "utterance": "So how about the phones that have screen model type `` Text '' ?",
            "sql": "select phone.hardware_model_name where screen_mode.type = value"
        },
        {
            "utterance": "Okay , I want to know the same for the phones that have RAM size greater than 32 .",
            "sql": "select phone.hardware_model_name where chip_model.ram_mib > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\""
    },
    "interaction": [
        {
            "utterance": "Tell me the hardware model name for the phones that have screen mode type `` Graphics '' .",
            "sql": "select distinct phone.hardware_model_name where screen_mode.type = value"
        },
        {
            "utterance": "So how about the phones that have screen model type `` Text '' ?",
            "sql": "select distinct phone.hardware_model_name where screen_mode.type = value"
        },
        {
            "utterance": "Okay , for now I want to know the hardware model name for the phones that were produced by `` Nokia Corporation '' or whose screen mode type is `` Graphics . ''",
            "sql": "select distinct phone.hardware_model_name where screen_mode.type = value or phone.company_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 14,
    "final": {
        "utterance": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";"
    },
    "interaction": [
        {
            "utterance": "List the hardware model name for the phones that were produced by `` Nokia Corporation '' .",
            "sql": "select distinct phone.hardware_model_name where phone.company_name = value"
        },
        {
            "utterance": "For these phones , which ones have screen model Text ?",
            "sql": "select distinct phone.hardware_model_name where phone.company_name = value and screen_mode.type = value"
        },
        {
            "utterance": "How about the ones that do not ?",
            "sql": "select distinct phone.hardware_model_name where phone.company_name = value and screen_mode.type != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 15,
    "final": {
        "utterance": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.",
        "sql": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;"
    },
    "interaction": [
        {
            "utterance": "Tell me the phone hardware model and company name for the phones whose screen usage in kb is larger than 10 .",
            "sql": "select distinct phone.hardware_model_name , phone.company_name where screen_mode.used_kb > value"
        },
        {
            "utterance": "Smaller than 15 ?",
            "sql": "select distinct phone.hardware_model_name , phone.company_name where screen_mode.used_kb < value"
        },
        {
            "utterance": "Okay , now I want to know the phones with screen usage within that range .",
            "sql": "select distinct phone.hardware_model_name , phone.company_name where screen_mode.used_kb between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the accreditation level that more than 3 phones use.",
        "sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "Tell me the accreditation level of the hardware model with name Z520e .",
            "sql": "select phone.accreditation_level where phone.hardware_model_name = value"
        },
        {
            "utterance": "How about that of Nokia 700 ?",
            "sql": "select phone.accreditation_level where phone.hardware_model_name = value"
        },
        {
            "utterance": "Okay , I want to know the accreditation level that more than 3 phones use .",
            "sql": "select phone.accreditation_level group_by phone.accreditation_level having count ( phone.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the average ram mib size of the chip models that are never used by any phone.",
        "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)"
    },
    "interaction": [
        {
            "utterance": "Tell me the ram size of the hardware model with name Nokia 700 .",
            "sql": "select chip_model.ram_mib where phone.hardware_model_name = value"
        },
        {
            "utterance": "How about for the GT-I9300 ?",
            "sql": "select chip_model.ram_mib where phone.hardware_model_name = value"
        },
        {
            "utterance": "Tell me the average ram mib size of the chip models that are never used by any phone .",
            "sql": "select avg ( chip_model.ram_mib ) where chip_model.model_name not in ( select phone.chip_model )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "phone_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'"
    },
    "interaction": [
        {
            "utterance": "Tell me all the chip models .",
            "sql": "select chip_model.model_name"
        },
        {
            "utterance": "Tell me all the chip models that are used by phones with full accreditation type .",
            "sql": "select chip_model.model_name where phone.accreditation_type = value"
        },
        {
            "utterance": "How about not used by any phone with full accreditation type ?",
            "sql": "select chip_model.model_name except select phone.chip_model where phone.accreditation_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Give the first and last names of the staff .",
            "sql": "select staff.first_name , staff.last_name"
        },
        {
            "utterance": "Also list the date of birth .",
            "sql": "select staff.first_name , staff.last_name , staff.date_of_birth"
        },
        {
            "utterance": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn ?",
            "sql": "select staff.date_of_birth where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 1,
    "final": {
        "utterance": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "When did various staff join ?",
            "sql": "select staff.first_name , staff.last_name , staff.date_joined_staff"
        },
        {
            "utterance": "When did the staff member with first name as Janessa and last name as Sawayn join the company ?",
            "sql": "select staff.date_joined_staff where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 2,
    "final": {
        "utterance": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "What was the most recent leaving of the company for any staff member ?",
            "sql": "select max ( staff.date_left_staff )"
        },
        {
            "utterance": "When did the staff member with first name as Janessa and last name as Sawayn leave the company ?",
            "sql": "select staff.date_left_staff where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "How many unique nicknames are there for the staff ?",
            "sql": "select count ( staff.* ) ( select distinct staff.nickname )"
        },
        {
            "utterance": "What is the nickname of staff with first name as Janessa and last name as Sawayn ?",
            "sql": "select staff.nickname where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 4,
    "final": {
        "utterance": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Sort the cities in which the staff live in by alphabetical order .",
            "sql": "select addresses.city order_by addresses.city"
        },
        {
            "utterance": "Which city does staff with first name as Janessa and last name as Sawayn live ?",
            "sql": "select addresses.city where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 5,
    "final": {
        "utterance": "In which country and state does staff with first name as Janessa and last name as Sawayn live?",
        "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Where do the staff live ? Give first and last name and also country and state .",
            "sql": "select staff.first_name , staff.last_name , addresses.country , addresses.state_province_county"
        },
        {
            "utterance": "Narrow that to Janessa Sawayn .",
            "sql": "select addresses.country , addresses.state_province_county where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 6,
    "final": {
        "utterance": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"
    },
    "interaction": [
        {
            "utterance": "Which customer ids took lessons ?",
            "sql": "select distinct lessons.customer_id"
        },
        {
            "utterance": "Sum over the lesson time for those groups . Also count the number of lessons take .",
            "sql": "select lessons.customer_id , sum ( lessons.lesson_time ) , count ( lessons.* ) group_by lessons.customer_id"
        },
        {
            "utterance": "What is the customer id of Rylan Goodwin ?",
            "sql": "select customers.customer_id where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin ?",
            "sql": "select sum ( lessons.lesson_time ) where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the zip code of staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "What is the address id of Janessa Sawayn ?",
            "sql": "select staff.staff_address_id where staff.first_name = value and staff.last_name = value"
        },
        {
            "utterance": "For that address id , give teh zip code .",
            "sql": "select addresses.zip_postcode where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 8,
    "final": {
        "utterance": "Find out the first name and last name of staff living in city Damianfort.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"
    },
    "interaction": [
        {
            "utterance": "Which address ids correspond to the city Damianfort ?",
            "sql": "select addresses.address_id where addresses.city = value"
        },
        {
            "utterance": "Join that with staff to find staff living there . Give first and last name .",
            "sql": "select staff.first_name , staff.last_name where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 9,
    "final": {
        "utterance": "In which city live the most staff? List the city name and number of staff.",
        "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the most common address_id for staff ?",
            "sql": "select staff.staff_address_id order_by staff.staff_address_id desc limit_value"
        },
        {
            "utterance": "List the corresponding city name and number of staff living there .",
            "sql": "select addresses.city , count ( * ) group_by addresses.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 10,
    "final": {
        "utterance": "List the states which have between 2 to 4 staff living there.",
        "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"
    },
    "interaction": [
        {
            "utterance": "List the states and counts of staff living there .",
            "sql": "select addresses.state_province_county , count ( * ) group_by staff.staff_id"
        },
        {
            "utterance": "List the states which have between 2 to 4 staff living there .",
            "sql": "select addresses.state_province_county group_by addresses.state_province_county having count ( * ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the status code, mobile phone number and email address of the customer with last name as Kohler or first name as Marina?",
        "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""
    },
    "interaction": [
        {
            "utterance": "Give records on the customer with last name Kohler .",
            "sql": "select customers.* where customers.last_name = value"
        },
        {
            "utterance": "Also show records for first name 'Marina '",
            "sql": "select customers.* where customers.last_name = value or customers.first_name = value"
        },
        {
            "utterance": "Just show the status code , mobile phone number and email address for the above .",
            "sql": "select customers.customer_status_code , customers.cell_mobile_phone_number , customers.email_address where customers.first_name = value or customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 12,
    "final": {
        "utterance": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"
    },
    "interaction": [
        {
            "utterance": "List the names and date became customer for the customers .",
            "sql": "select customers.first_name , customers.last_name , customers.date_became_customer"
        },
        {
            "utterance": "Limit that to Carole Bernhard , and just show the relevant date .",
            "sql": "select customers.date_became_customer where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 13,
    "final": {
        "utterance": "Which customer status code has least number of customers?",
        "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "List the customer status code with their respective counts .",
            "sql": "select customers.customer_status_code , count ( customers.* ) group_by customers.customer_status_code"
        },
        {
            "utterance": "Sort by ascending counts .",
            "sql": "select customers.customer_status_code , count ( customers.* ) group_by customers.customer_status_code order_by count ( customers.* ) asc"
        },
        {
            "utterance": "Which customer status code has least number of customers ?",
            "sql": "select customers.customer_status_code group_by customers.customer_status_code order_by count ( customers.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 14,
    "final": {
        "utterance": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"
    },
    "interaction": [
        {
            "utterance": "List the lessons taken by each customer first and last name .",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.customer_id"
        },
        {
            "utterance": "Just show that information for the completed status lessons .",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.customer_id where lessons.lesson_status_code = value"
        },
        {
            "utterance": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed ?",
            "sql": "select count ( * ) where customers.first_name = value and customers.last_name = value and lessons.lesson_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 15,
    "final": {
        "utterance": "What is maximum, minimum and average amount of outstanding of customer?",
        "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;"
    },
    "interaction": [
        {
            "utterance": "List names of customers with their amount outstanding .",
            "sql": "select customers.first_name , customers.last_name , customers.amount_outstanding"
        },
        {
            "utterance": "What is maximum , minimum and average amount of outstanding of customer ?",
            "sql": "select max ( customers.amount_outstanding ) , min ( customers.amount_outstanding ) , avg ( customers.amount_outstanding )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 16,
    "final": {
        "utterance": "List first name and last name of customers living in city Lockmanfurt.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"
    },
    "interaction": [
        {
            "utterance": "List records of customers living in city Lockmanfurt .",
            "sql": "select where addresses.city = value"
        },
        {
            "utterance": "Just show the first and last name .",
            "sql": "select customers.first_name , customers.last_name where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 17,
    "final": {
        "utterance": "Which country does customer with first name as Carole and last name as Bernhard live in?",
        "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "Join customer names with their lived-in countries .",
            "sql": "select customers.first_name , customers.last_name , addresses.country"
        },
        {
            "utterance": "Which country does customer with first name as Carole and last name as Bernhard live in ?",
            "sql": "select addresses.country where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 18,
    "final": {
        "utterance": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "What are the customers zip codes ?",
            "sql": "select customers.first_name , customers.last_name , addresses.zip_postcode"
        },
        {
            "utterance": "What is zip code of customer with first name as Carole and last name as Bernhard ?",
            "sql": "select addresses.zip_postcode where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 19,
    "final": {
        "utterance": "Which city has most number of customers?",
        "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Give counts of cities customers live in .",
            "sql": "select addresses.city , count ( * ) group_by addresses.city"
        },
        {
            "utterance": "Which city has most number of customers ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 20,
    "final": {
        "utterance": "How much in total has customer with first name as Carole and last name as Bernhard paid?",
        "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "List a sum of all the payments for all the customers .",
            "sql": "select customers.first_name , customers.last_name , sum ( customer_payments.amount_payment ) group_by customers.customer_id"
        },
        {
            "utterance": "How much in total has customer with first name as Carole and last name as Bernhard paid ?",
            "sql": "select sum ( customer_payments.amount_payment ) where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 21,
    "final": {
        "utterance": "List the number of customers that did not have any payment history.",
        "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );"
    },
    "interaction": [
        {
            "utterance": "Which customer ids have no payment history ?",
            "sql": "select customers.customer_id except select customer_payments.customer_id"
        },
        {
            "utterance": "Count those .",
            "sql": "select count ( customers.* ) where customers.customer_id not in ( select customer_payments.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 22,
    "final": {
        "utterance": "List first name and last name of customers that have more than 2 payments.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
    },
    "interaction": [
        {
            "utterance": "Count the payments per customer .",
            "sql": "select customers.first_name , customers.last_name , count ( customer_payments.amount_payment ) group_by customers.customer_id"
        },
        {
            "utterance": "Just for those with more than 2 payments .",
            "sql": "select customers.first_name , customers.last_name group_by customer_payments.customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 23,
    "final": {
        "utterance": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"
    },
    "interaction": [
        {
            "utterance": "List lesson id of all lessons taught by staff with first name as Janessa",
            "sql": "select lessons.lesson_id where staff.first_name = value"
        },
        {
            "utterance": "Intersect that with last name Sawayn and nickname containing letter 's ' .",
            "sql": "select lessons.lesson_id where staff.first_name = value and staff.last_name = value and staff.nickname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 24,
    "final": {
        "utterance": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
    },
    "interaction": [
        {
            "utterance": "Count the lessons grouped by staff first name .",
            "sql": "select staff.first_name , count ( * ) group_by staff.first_name"
        },
        {
            "utterance": "How many lessons taught by staff whose first name has letter 'a ' in it ?",
            "sql": "select count ( * ) where staff.first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 25,
    "final": {
        "utterance": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Count the lesson time grouped by staff id .",
            "sql": "select staff.staff_id , sum ( lessons.lesson_time ) group_by staff.staff_id"
        },
        {
            "utterance": "Join that sum on the staff with first name Janess and last name Sawayn .",
            "sql": "select sum ( lessons.lesson_time ) where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 26,
    "final": {
        "utterance": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Show the sum of lesson prices per staff .",
            "sql": "select staff.first_name , staff.last_name , sum ( lessons.price ) group_by staff.staff_id"
        },
        {
            "utterance": "Give the average .",
            "sql": "select staff.first_name , staff.last_name , avg ( lessons.price ) group_by staff.staff_id"
        },
        {
            "utterance": "Just for first name as Janessa and last name as Sawayn ?",
            "sql": "select avg ( lessons.price ) where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 27,
    "final": {
        "utterance": "How many lessons did customer with first name Ray take?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
    },
    "interaction": [
        {
            "utterance": "count the lessons taken per customer first name .",
            "sql": "select customers.first_name , count ( * ) group_by customers.first_name"
        },
        {
            "utterance": "How many lessons did customer with first name Ray take ?",
            "sql": "select count ( * ) where customers.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 28,
    "final": {
        "utterance": "Which last names are both used by customers and by staff?",
        "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
    },
    "interaction": [
        {
            "utterance": "What are the distinct last names of staff ?",
            "sql": "select distinct staff.last_name"
        },
        {
            "utterance": "Of customers ?",
            "sql": "select distinct customers.last_name"
        },
        {
            "utterance": "Intersect that .",
            "sql": "select customers.last_name intersect select staff.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the first names of staff who did not give any lesson?",
        "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id"
    },
    "interaction": [
        {
            "utterance": "Which staff gave lessons ? Give their first names .",
            "sql": "select distinct staff.first_name"
        },
        {
            "utterance": "Which staff first names did not ?",
            "sql": "select staff.first_name except select staff.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 30,
    "final": {
        "utterance": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the distinct vehicle ids used in lessons .",
            "sql": "select distinct lessons.vehicle_id"
        },
        {
            "utterance": "For those , give the detail as well .",
            "sql": "select vehicles.vehicle_id , vehicles.vehicle_details group_by vehicles.vehicle_id"
        },
        {
            "utterance": "What is the id and detail of the vehicle used in lessons for most of the times ?",
            "sql": "select vehicles.vehicle_id , vehicles.vehicle_details group_by vehicles.vehicle_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Give the first and last names of the staff .",
            "sql": "select staff.first_name , staff.last_name"
        },
        {
            "utterance": "Also list the date of birth .",
            "sql": "select staff.first_name , staff.last_name , staff.date_of_birth"
        },
        {
            "utterance": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn ?",
            "sql": "select staff.date_of_birth where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 32,
    "final": {
        "utterance": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "When did various staff join ?",
            "sql": "select staff.first_name , staff.last_name , staff.date_joined_staff"
        },
        {
            "utterance": "When did the staff member with first name as Janessa and last name as Sawayn join the company ?",
            "sql": "select staff.date_joined_staff where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 33,
    "final": {
        "utterance": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "What was the most recent leaving of the company for any staff member ?",
            "sql": "select max ( staff.date_left_staff )"
        },
        {
            "utterance": "When did the staff member with first name as Janessa and last name as Sawayn leave the company ?",
            "sql": "select staff.date_left_staff where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "How many unique nicknames are there for the staff ?",
            "sql": "select count ( staff.* ) ( select distinct staff.nickname )"
        },
        {
            "utterance": "What is the nickname of staff with first name as Janessa and last name as Sawayn ?",
            "sql": "select staff.nickname where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 35,
    "final": {
        "utterance": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Sort the cities in which the staff live in by alphabetical order .",
            "sql": "select addresses.city order_by addresses.city"
        },
        {
            "utterance": "Which city does staff with first name as Janessa and last name as Sawayn live ?",
            "sql": "select addresses.city where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 36,
    "final": {
        "utterance": "In which country and state does staff with first name as Janessa and last name as Sawayn live?",
        "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Where do the staff live ? Give first and last name and also country and state .",
            "sql": "select staff.first_name , staff.last_name , addresses.country , addresses.state_province_county"
        },
        {
            "utterance": "Narrow that to Janessa Sawayn .",
            "sql": "select addresses.country , addresses.state_province_county where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 37,
    "final": {
        "utterance": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"
    },
    "interaction": [
        {
            "utterance": "Which customer ids took lessons ?",
            "sql": "select distinct lessons.customer_id"
        },
        {
            "utterance": "Sum over the lesson time for those groups . Also count the number of lessons take .",
            "sql": "select lessons.customer_id , sum ( lessons.lesson_time ) , count ( lessons.* ) group_by lessons.customer_id"
        },
        {
            "utterance": "What is the customer id of Rylan Goodwin ?",
            "sql": "select customers.customer_id where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin ?",
            "sql": "select sum ( lessons.lesson_time ) where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the zip code of staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "What is the address id of Janessa Sawayn ?",
            "sql": "select staff.staff_address_id where staff.first_name = value and staff.last_name = value"
        },
        {
            "utterance": "For that address id , give teh zip code .",
            "sql": "select addresses.zip_postcode where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 39,
    "final": {
        "utterance": "Find out the first name and last name of staff living in city Damianfort.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"
    },
    "interaction": [
        {
            "utterance": "Which address ids correspond to the city Damianfort ?",
            "sql": "select addresses.address_id where addresses.city = value"
        },
        {
            "utterance": "Join that with staff to find staff living there . Give first and last name .",
            "sql": "select staff.first_name , staff.last_name where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 40,
    "final": {
        "utterance": "In which city live the most staff? List the city name and number of staff.",
        "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the most common address_id for staff ?",
            "sql": "select staff.staff_address_id order_by staff.staff_address_id desc limit_value"
        },
        {
            "utterance": "List the corresponding city name and number of staff living there .",
            "sql": "select addresses.city , count ( * ) group_by addresses.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 41,
    "final": {
        "utterance": "List the states which have between 2 to 4 staff living there.",
        "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"
    },
    "interaction": [
        {
            "utterance": "List the states and counts of staff living there .",
            "sql": "select addresses.state_province_county , count ( * ) group_by staff.staff_id"
        },
        {
            "utterance": "List the states which have between 2 to 4 staff living there .",
            "sql": "select addresses.state_province_county group_by addresses.state_province_county having count ( * ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 42,
    "final": {
        "utterance": "What is the status code, mobile phone number and email address of the customer with last name as Kohler or first name as Marina?",
        "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""
    },
    "interaction": [
        {
            "utterance": "Give records on the customer with last name Kohler .",
            "sql": "select customers.* where customers.last_name = value"
        },
        {
            "utterance": "Also show records for first name 'Marina '",
            "sql": "select customers.* where customers.last_name = value or customers.first_name = value"
        },
        {
            "utterance": "Just show the status code , mobile phone number and email address for the above .",
            "sql": "select customers.customer_status_code , customers.cell_mobile_phone_number , customers.email_address where customers.first_name = value or customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 43,
    "final": {
        "utterance": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"
    },
    "interaction": [
        {
            "utterance": "List the names and date became customer for the customers .",
            "sql": "select customers.first_name , customers.last_name , customers.date_became_customer"
        },
        {
            "utterance": "Limit that to Carole Bernhard , and just show the relevant date .",
            "sql": "select customers.date_became_customer where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 44,
    "final": {
        "utterance": "Which customer status code has least number of customers?",
        "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "List the customer status code with their respective counts .",
            "sql": "select customers.customer_status_code , count ( customers.* ) group_by customers.customer_status_code"
        },
        {
            "utterance": "Sort by ascending counts .",
            "sql": "select customers.customer_status_code , count ( customers.* ) group_by customers.customer_status_code order_by count ( customers.* ) asc"
        },
        {
            "utterance": "Which customer status code has least number of customers ?",
            "sql": "select customers.customer_status_code group_by customers.customer_status_code order_by count ( customers.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 45,
    "final": {
        "utterance": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"
    },
    "interaction": [
        {
            "utterance": "List the lessons taken by each customer first and last name .",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.customer_id"
        },
        {
            "utterance": "Just show that information for the completed status lessons .",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.customer_id where lessons.lesson_status_code = value"
        },
        {
            "utterance": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed ?",
            "sql": "select count ( * ) where customers.first_name = value and customers.last_name = value and lessons.lesson_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 46,
    "final": {
        "utterance": "What is maximum, minimum and average amount of outstanding of customer?",
        "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;"
    },
    "interaction": [
        {
            "utterance": "List names of customers with their amount outstanding .",
            "sql": "select customers.first_name , customers.last_name , customers.amount_outstanding"
        },
        {
            "utterance": "What is maximum , minimum and average amount of outstanding of customer ?",
            "sql": "select max ( customers.amount_outstanding ) , min ( customers.amount_outstanding ) , avg ( customers.amount_outstanding )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 47,
    "final": {
        "utterance": "List first name and last name of customers living in city Lockmanfurt.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"
    },
    "interaction": [
        {
            "utterance": "List records of customers living in city Lockmanfurt .",
            "sql": "select * where addresses.city = value"
        },
        {
            "utterance": "Just show the first and last name .",
            "sql": "select customers.first_name , customers.last_name where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 48,
    "final": {
        "utterance": "Which country does customer with first name as Carole and last name as Bernhard live in?",
        "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "Join customer names with their lived-in countries .",
            "sql": "select customers.first_name , customers.last_name , addresses.country"
        },
        {
            "utterance": "Which country does customer with first name as Carole and last name as Bernhard live in ?",
            "sql": "select addresses.country where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 49,
    "final": {
        "utterance": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "What are the customers zip codes ?",
            "sql": "select customers.first_name , customers.last_name , addresses.zip_postcode"
        },
        {
            "utterance": "What is zip code of customer with first name as Carole and last name as Bernhard ?",
            "sql": "select addresses.zip_postcode where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 50,
    "final": {
        "utterance": "Which city has most number of customers?",
        "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Give counts of cities customers live in .",
            "sql": "select addresses.city , count ( * ) group_by addresses.city"
        },
        {
            "utterance": "Which city has most number of customers ?",
            "sql": "select addresses.city group_by addresses.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 51,
    "final": {
        "utterance": "How much in total has customer with first name as Carole and last name as Bernhard paid?",
        "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""
    },
    "interaction": [
        {
            "utterance": "List a sum of all the payments for all the customers .",
            "sql": "select customers.first_name , customers.last_name , sum ( customer_payments.amount_payment ) group_by customers.customer_id"
        },
        {
            "utterance": "How much in total has customer with first name as Carole and last name as Bernhard paid ?",
            "sql": "select sum ( customer_payments.amount_payment ) where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 52,
    "final": {
        "utterance": "List the number of customers that did not have any payment history.",
        "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );"
    },
    "interaction": [
        {
            "utterance": "Which customer ids have no payment history ?",
            "sql": "select customers.customer_id except select customer_payments.customer_id"
        },
        {
            "utterance": "Count those .",
            "sql": "select count ( customers.* ) where customers.customer_id not in ( select customer_payments.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 53,
    "final": {
        "utterance": "List first name and last name of customers that have more than 2 payments.",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
    },
    "interaction": [
        {
            "utterance": "Count the payments per customer .",
            "sql": "select customers.first_name , customers.last_name , count ( customer_payments.amount_payment ) group_by customers.customer_id"
        },
        {
            "utterance": "Just for those with more than 2 payments .",
            "sql": "select customers.first_name , customers.last_name group_by customer_payments.customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 54,
    "final": {
        "utterance": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"
    },
    "interaction": [
        {
            "utterance": "List lesson id of all lessons taught by staff with first name as Janessa",
            "sql": "select lessons.lesson_id where staff.first_name = value"
        },
        {
            "utterance": "Intersect that with last name Sawayn and nickname containing letter 's ' .",
            "sql": "select lessons.lesson_id where staff.first_name = value and staff.last_name = value and staff.nickname like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 55,
    "final": {
        "utterance": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
    },
    "interaction": [
        {
            "utterance": "Count the lessons grouped by staff first name .",
            "sql": "select staff.first_name , count ( * ) group_by staff.first_name"
        },
        {
            "utterance": "How many lessons taught by staff whose first name has letter 'a ' in it ?",
            "sql": "select count ( * ) where staff.first_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 56,
    "final": {
        "utterance": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Count the lesson time grouped by staff id .",
            "sql": "select staff.staff_id , sum ( lessons.lesson_time ) group_by staff.staff_id"
        },
        {
            "utterance": "Join that sum on the staff with first name Janess and last name Sawayn .",
            "sql": "select sum ( lessons.lesson_time ) where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 57,
    "final": {
        "utterance": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
    },
    "interaction": [
        {
            "utterance": "Show the sum of lesson prices per staff .",
            "sql": "select staff.first_name , staff.last_name , sum ( lessons.price ) group_by staff.staff_id"
        },
        {
            "utterance": "Give the average .",
            "sql": "select staff.first_name , staff.last_name , avg ( lessons.price ) group_by staff.staff_id"
        },
        {
            "utterance": "Just for first name as Janessa and last name as Sawayn ?",
            "sql": "select avg ( lessons.price ) where staff.first_name = value and staff.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 58,
    "final": {
        "utterance": "How many lessons did customer with first name Ray take?",
        "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
    },
    "interaction": [
        {
            "utterance": "count the lessons taken per customer first name .",
            "sql": "select customers.first_name , count ( * ) group_by customers.first_name"
        },
        {
            "utterance": "How many lessons did customer with first name Ray take ?",
            "sql": "select count ( * ) where customers.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 59,
    "final": {
        "utterance": "Which last names are both used by customers and by staff?",
        "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
    },
    "interaction": [
        {
            "utterance": "What are the distinct last names of staff ?",
            "sql": "select distinct staff.last_name"
        },
        {
            "utterance": "Of customers ?",
            "sql": "select distinct customers.last_name"
        },
        {
            "utterance": "Intersect that .",
            "sql": "select customers.last_name intersect select staff.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "driving_school",
    "interaction_id": 60,
    "final": {
        "utterance": "What are the first names of staff who did not give any lesson?",
        "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id"
    },
    "interaction": [
        {
            "utterance": "Which staff gave lessons ? Give their first names .",
            "sql": "select distinct staff.first_name"
        },
        {
            "utterance": "Which staff first names did not ?",
            "sql": "select staff.first_name except select staff.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "sql": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the members ?",
            "sql": "select member.name"
        },
        {
            "utterance": "What countries are they each from ?",
            "sql": "select member.name , member.country"
        },
        {
            "utterance": "Now show those from the United States .",
            "sql": "select member.name , member.country where member.country = value"
        },
        {
            "utterance": "Can you also include those from Canada ?",
            "sql": "select member.name where member.country = value or member.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the most common country across members.",
        "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the distinct countries the members belong to ?",
            "sql": "select distinct member.country"
        },
        {
            "utterance": "How many members belong to each one ?",
            "sql": "select member.country , count ( member.* ) group_by member.country"
        },
        {
            "utterance": "Which one has the least number of members ?",
            "sql": "select member.country group_by member.country order_by count ( member.* ) asc limit_value"
        },
        {
            "utterance": "How about the most ?",
            "sql": "select member.country group_by member.country order_by count ( member.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 2,
    "final": {
        "utterance": "Which countries have more than two members?",
        "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the member names and their countries ?",
            "sql": "select member.name , member.country"
        },
        {
            "utterance": "List all the different countries .",
            "sql": "select distinct member.country"
        },
        {
            "utterance": "Which of these have more than one member ?",
            "sql": "select member.country group_by member.country having count ( member.* ) > value"
        },
        {
            "utterance": "How about more than two ?",
            "sql": "select member.country group_by member.country having count ( member.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "sql": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the members in alphabetical order ?",
            "sql": "select member.name order_by member.name asc"
        },
        {
            "utterance": "Also provide their college names .",
            "sql": "select member.name , college.name order_by member.name asc"
        },
        {
            "utterance": "and their college locations !",
            "sql": "select member.name , college.name , college.college_location order_by member.name asc"
        },
        {
            "utterance": "actually , show just the names and locations .",
            "sql": "select member.name , college.college_location order_by member.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\""
    },
    "interaction": [
        {
            "utterance": "Who are all the members from the country Canada ?",
            "sql": "select member.member_id where member.country = value"
        },
        {
            "utterance": "What are the names of the colleges they go to ?",
            "sql": "select member.member_id , college.name where member.country = value"
        },
        {
            "utterance": "Who are the team leaders of these colleges ?",
            "sql": "select member.member_id , college.name , college.leader_name where member.country = value"
        },
        {
            "utterance": "Show me a list of all the different leaders !",
            "sql": "select distinct college.leader_name where member.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of members that have a rank in round higher than 3.",
        "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3"
    },
    "interaction": [
        {
            "utterance": "How many different rounds are there ?",
            "sql": "select count ( distinct round.round_id )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select distinct round.round_id"
        },
        {
            "utterance": "For each , who are the names of the members with ranks in rounds lower than 3 ?",
            "sql": "select member.name where round.rank_in_round < value"
        },
        {
            "utterance": "How about greater than 3 ?",
            "sql": "select member.name where round.rank_in_round > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "decoration_competition",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of members in ascending order of their rank in rounds.",
        "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC"
    },
    "interaction": [
        {
            "utterance": "What are the names of the member that did not made it to any round ?",
            "sql": "select member.name where member.name not in ( select member.name order_by round.rank_in_round )"
        },
        {
            "utterance": "Now show me the other members !",
            "sql": "select member.name"
        },
        {
            "utterance": "Show just the names ordered from greatest to least on their ranks .",
            "sql": "select member.name order_by round.rank_in_round desc"
        },
        {
            "utterance": "Actually , sort least to greatest !",
            "sql": "select member.name order_by round.rank_in_round asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum week on top of all volumes?",
        "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume"
    },
    "interaction": [
        {
            "utterance": "List the information for all volumes .",
            "sql": "select volume.*"
        },
        {
            "utterance": "Order them by weeks on top from the most to the least .",
            "sql": "select volume.* order_by volume.weeks_on_top desc"
        },
        {
            "utterance": "What is the maximum weeks on top for a volume ?",
            "sql": "select max ( volume.weeks_on_top )"
        },
        {
            "utterance": "Include the minimum as well .",
            "sql": "select max ( volume.weeks_on_top ) , min ( volume.weeks_on_top )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 1,
    "final": {
        "utterance": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2"
    },
    "interaction": [
        {
            "utterance": "Order volumes by weeks on top in increasing order .",
            "sql": "select volume.* order_by volume.weeks_on_top"
        },
        {
            "utterance": "Which volumes lasted no more than 2 weeks on top ?",
            "sql": "select volume.volume_id where volume.weeks_on_top < = value"
        },
        {
            "utterance": "Which ones lasted more than 2 weeks on top ?",
            "sql": "select volume.volume_id where volume.weeks_on_top > value"
        },
        {
            "utterance": "What are the ceremony dates for these volumes ?",
            "sql": "select distinct music_festival.date_of_ceremony where volume.weeks_on_top > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the songs that have result \"nominated\" at music festivals.",
        "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\""
    },
    "interaction": [
        {
            "utterance": "List the names of all songs .",
            "sql": "select volume.song"
        },
        {
            "utterance": "Which songs were featured at music festivals ?",
            "sql": "select volume.song"
        },
        {
            "utterance": "Which ones have the result \u201cnominated\u201d ?",
            "sql": "select volume.song where music_festival.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\""
    },
    "interaction": [
        {
            "utterance": "List the names of artists who have released volumes .",
            "sql": "select distinct artist.artist"
        },
        {
            "utterance": "List the information of volumes released by Gorgoroth .",
            "sql": "select * where artist.artist = value"
        },
        {
            "utterance": "What are their issue dates ?",
            "sql": "select volume.issue_date where artist.artist = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the songs in volumes associated with the artist aged 32 or older?",
        "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32"
    },
    "interaction": [
        {
            "utterance": "List all artists .",
            "sql": "select distinct artist.artist"
        },
        {
            "utterance": "Only list those aged 32 or older .",
            "sql": "select distinct artist.artist where artist.age > = value"
        },
        {
            "utterance": "Show the information for volumes associated with these artists .",
            "sql": "select * where artist.age > = value"
        },
        {
            "utterance": "Only show song names .",
            "sql": "select volume.song where artist.age > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25"
    },
    "interaction": [
        {
            "utterance": "List all volumes .",
            "sql": "select volume.*"
        },
        {
            "utterance": "Only show information for volumes associated with artists aged 25 or younger .",
            "sql": "select * where artist.age < = value"
        },
        {
            "utterance": "What is the average weeks on top for these volumes ?",
            "sql": "select avg ( volume.weeks_on_top ) where artist.age < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2"
    },
    "interaction": [
        {
            "utterance": "What are the names of all artists ?",
            "sql": "select distinct artist.artist"
        },
        {
            "utterance": "Which of them have released volumes ?",
            "sql": "select distinct artist.artist"
        },
        {
            "utterance": "Only show those whose volumes spent more than 2 weeks on top .",
            "sql": "select distinct artist.artist where volume.weeks_on_top > value"
        },
        {
            "utterance": "List the famous titles of these artists .",
            "sql": "select artist.famous_title where volume.weeks_on_top > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the famous release date of the artist with the oldest age?",
        "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the names of all artists .",
            "sql": "select distinct artist.artist"
        },
        {
            "utterance": "Order them by decreasing age .",
            "sql": "select distinct artist.artist order_by artist.age desc"
        },
        {
            "utterance": "Who is the oldest artist ?",
            "sql": "select distinct artist.artist order_by artist.age desc limit_value"
        },
        {
            "utterance": "What is his famous release date ?",
            "sql": "select artist.famous_release_date order_by artist.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the most common result of the music festival?",
        "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the names of all music festivals .",
            "sql": "select music_festival.music_festival"
        },
        {
            "utterance": "Include the ID of the volume featured at each music festival .",
            "sql": "select music_festival.music_festival , music_festival.volume"
        },
        {
            "utterance": "Also include the result of each volume .",
            "sql": "select music_festival.music_festival , music_festival.volume , music_festival.result"
        },
        {
            "utterance": "What was the most common result ?",
            "sql": "select music_festival.result group_by music_festival.result order_by count ( music_festival.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 9,
    "final": {
        "utterance": "Please show the categories of the music festivals with count more than 1.",
        "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List all the different categories of music festivals .",
            "sql": "select distinct music_festival.category"
        },
        {
            "utterance": "Order them by decreasing frequency of category .",
            "sql": "select music_festival.category group_by music_festival.category order_by count ( music_festival.* ) desc"
        },
        {
            "utterance": "Only show the categories that appear more than once .",
            "sql": "select music_festival.category group_by music_festival.category having count ( music_festival.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the song in the volume with the maximum weeks on top?",
        "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the song associated with each volume .",
            "sql": "select volume.song"
        },
        {
            "utterance": "Show the weeks on top for each song .",
            "sql": "select volume.song , volume.weeks_on_top"
        },
        {
            "utterance": "Order by decreasing weeks on top .",
            "sql": "select volume.song , volume.weeks_on_top order_by volume.weeks_on_top desc"
        },
        {
            "utterance": "Which song had the most weeks on top ?",
            "sql": "select volume.song order_by volume.weeks_on_top desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the famous titles of artists that do not have any volume.",
        "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)"
    },
    "interaction": [
        {
            "utterance": "List the names of all artists .",
            "sql": "select distinct artist.artist"
        },
        {
            "utterance": "How many artists have not released any volumes ?",
            "sql": "select count ( artist.* ) where artist.artist_id not in ( select volume.artist_id )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select artist.artist where artist.artist_id not in ( select volume.artist_id )"
        },
        {
            "utterance": "How about their famous titles ?",
            "sql": "select artist.famous_title where artist.artist_id not in ( select volume.artist_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
        "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2"
    },
    "interaction": [
        {
            "utterance": "Which artists have released volumes ?",
            "sql": "select distinct artist.artist where artist.artist_id in ( select volume.artist_id )"
        },
        {
            "utterance": "Whose volumes lasted more than 2 weeks on top ?",
            "sql": "select distinct artist.artist where volume.weeks_on_top > value"
        },
        {
            "utterance": "Whose volumes also lasted less than 2 weeks on top ?",
            "sql": "select artist.artist where volume.weeks_on_top > value intersect select artist.artist where volume.weeks_on_top < value"
        },
        {
            "utterance": "What are their famous titles ?",
            "sql": "select artist.famous_title where volume.weeks_on_top > value intersect select artist.famous_title where volume.weeks_on_top < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\""
    },
    "interaction": [
        {
            "utterance": "List the information of all music festivals .",
            "sql": "select music_festival.*"
        },
        {
            "utterance": "Only show festivals with category \u201cBest Song\u201d .",
            "sql": "select music_festival.* where music_festival.category = value"
        },
        {
            "utterance": "Which of those festivals also have the result \u201cAwarded\u201d ?",
            "sql": "select music_festival.* where music_festival.category = value and music_festival.result = value"
        },
        {
            "utterance": "Show their ceremony dates .",
            "sql": "select music_festival.date_of_ceremony where music_festival.category = value and music_festival.result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the issue date of the volume with the minimum weeks on top?",
        "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the information for all volumes .",
            "sql": "select volume.*"
        },
        {
            "utterance": "Order by increasing weeks on top .",
            "sql": "select volume.* order_by volume.weeks_on_top asc"
        },
        {
            "utterance": "Which one had the minimum weeks on top ?",
            "sql": "select volume.volume_id order_by volume.weeks_on_top asc limit_value"
        },
        {
            "utterance": "What was its issue date ?",
            "sql": "select volume.issue_date order_by volume.weeks_on_top asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_4",
    "interaction_id": 15,
    "final": {
        "utterance": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Show the results of all music festivals .",
            "sql": "select music_festival.result"
        },
        {
            "utterance": "What is the total number of each result ?",
            "sql": "select music_festival.result , count ( music_festival.* ) group_by music_festival.result"
        },
        {
            "utterance": "Order by decreasing order .",
            "sql": "select music_festival.result , count ( music_festival.* ) group_by music_festival.result order_by count ( music_festival.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 0,
    "final": {
        "utterance": "what is the full name and id of the college with the largest number of baseball players?",
        "sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many baseball players are there ?",
            "sql": "select count ( player_college.* )"
        },
        {
            "utterance": "How about the number of colleges ?",
            "sql": "select count ( college.* )"
        },
        {
            "utterance": "How many baseball players are there in each college ?",
            "sql": "select college.name_full , count ( * ) group_by college.college_id"
        },
        {
            "utterance": "Can you order the results by the number of baseball players in descending order ?",
            "sql": "select college.name_full , count ( * ) group_by college.college_id order_by count ( * ) desc"
        },
        {
            "utterance": "Please give me the full name and id of the first college .",
            "sql": "select college.name_full , college.college_id group_by college.college_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"
    },
    "interaction": [
        {
            "utterance": "What is the average salary of the players ?",
            "sql": "select avg ( salary.salary )"
        },
        {
            "utterance": "How about for each team ?",
            "sql": "select team.team_id_br , avg ( salary.salary ) group_by team.team_id_br"
        },
        {
            "utterance": "How about for the team 'Boston Red Stockings ' ?",
            "sql": "select avg ( salary.salary ) where team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What are first and last names of players participating in all star game in 1998?",
        "sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998"
    },
    "interaction": [
        {
            "utterance": "How many players have participated in all star games ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "How about in 1998 ?",
            "sql": "select count ( * ) where all_star.year = value"
        },
        {
            "utterance": "Please list the first and last names of these players .",
            "sql": "select player.name_first , player.name_last where all_star.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "sql": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many players have participated in all star games ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "Among these players , how many times did they participate in all star game ?",
            "sql": "select player.name_first , player.name_last , count ( * ) group_by player.player_id"
        },
        {
            "utterance": "Could you please give the top 10 players that have the most all star experience ?",
            "sql": "select player.name_first , player.name_last , count ( * ) group_by player.player_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Please give me the information of the top one .",
            "sql": "select player.name_first , player.name_last , player.player_id , count ( * ) group_by player.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 4,
    "final": {
        "utterance": "In 2014, what are the id and rank of the team that has the largest average number of attendance?",
        "sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the average attendance ?",
            "sql": "select avg ( home_game.attendance )"
        },
        {
            "utterance": "What is the average attendance of each team in 2013 ?",
            "sql": "select team.team_id , avg ( home_game.attendance ) where home_game.year = value group_by home_game.team_id"
        },
        {
            "utterance": "How about in 2014 ?",
            "sql": "select team.team_id , avg ( home_game.attendance ) where home_game.year = value group_by home_game.team_id"
        },
        {
            "utterance": "Please list the id and rank of the team that had the largest average attendance in that year .",
            "sql": "select team.team_id , team.rank where home_game.year = value group_by home_game.team_id order_by avg ( home_game.attendance ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the manager's first name, last name and id who won the most manager award?",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Who are the managers that have won the manager award ?",
            "sql": "select player.name_first , player.name_last"
        },
        {
            "utterance": "How many times did each manager get this award ?",
            "sql": "select player.name_first , player.name_last , count ( * ) group_by manager_award.player_id"
        },
        {
            "utterance": "Who won the most times ?",
            "sql": "select player.name_first , player.name_last , count ( * ) group_by manager_award.player_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Please give their full name and id .",
            "sql": "select player.name_first , player.name_last , manager_award.player_id group_by manager_award.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which 3 players won the most player awards? List their full name and id.",
        "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "How many players have won player awards ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "Please list their full names .",
            "sql": "select player.name_first , player.name_last group_by player.player_id"
        },
        {
            "utterance": "Among them , who won the most player awards ? List their full name and id .",
            "sql": "select player.name_first , player.name_last , player.player_id group_by player.player_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about top 3 ?",
            "sql": "select player.name_first , player.name_last , player.player_id group_by player.player_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 7,
    "final": {
        "utterance": "List three countries which are the origins of the least players.",
        "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "Which countries do players come from ?",
            "sql": "select player.birth_country"
        },
        {
            "utterance": "How many players are from each country ?",
            "sql": "select player.birth_country , count ( player.* ) group_by player.birth_country"
        },
        {
            "utterance": "Which country provided the most players ?",
            "sql": "select player.birth_country group_by player.birth_country order_by count ( player.* ) desc limit_value"
        },
        {
            "utterance": "What are the three countries that provided the fewest players ?",
            "sql": "select player.birth_country group_by player.birth_country order_by count ( player.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 8,
    "final": {
        "utterance": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';"
    },
    "interaction": [
        {
            "utterance": "How many left-handed batters are there ?",
            "sql": "select count ( player.* ) where player.bats = value"
        },
        {
            "utterance": "How about the right-handed batters ?",
            "sql": "select count ( player.* ) where player.bats = value"
        },
        {
            "utterance": "Out of those batters , how many were born in California ?",
            "sql": "select count ( player.* ) where player.birth_state = value and player.bats = value"
        },
        {
            "utterance": "How about those born in the USA ?",
            "sql": "select count ( player.* ) where player.birth_country = value and player.bats = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the average height of the players from the college named 'Yale University'?",
        "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  = T2.college_id WHERE T3.name_full  =  'Yale University';"
    },
    "interaction": [
        {
            "utterance": "What is the average height of all players ?",
            "sql": "select avg ( player.height )"
        },
        {
            "utterance": "What is the average height of players from 'University of Akron ' ?",
            "sql": "select avg ( player.height ) where college.name_full = value"
        },
        {
            "utterance": "How about for those from Yale University ?",
            "sql": "select avg ( player.height ) where college.name_full = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the highest salary among each team? List the team name, id and maximum salary.",
        "sql": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;"
    },
    "interaction": [
        {
            "utterance": "What is the average salary of all teams ?",
            "sql": "select avg ( salary.salary )"
        },
        {
            "utterance": "What is the average salary of each team ?",
            "sql": "select team.name , avg ( salary.salary ) group_by team.team_id"
        },
        {
            "utterance": "What is the highest salary of each team ?",
            "sql": "select team.name , max ( salary.salary ) group_by team.team_id"
        },
        {
            "utterance": "Please also give the team name , id and maximum salary .",
            "sql": "select team.name , team.team_id , max ( salary.salary ) group_by team.team_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the name and id of the team offering the lowest average salary?",
        "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the average salary of all teams ?",
            "sql": "select avg ( salary.salary )"
        },
        {
            "utterance": "What about for each team ?",
            "sql": "select team.name , avg ( salary.salary ) group_by team.team_id"
        },
        {
            "utterance": "Can you order the results by average salary ?",
            "sql": "select team.name , avg ( salary.salary ) group_by team.team_id order_by avg ( salary.salary )"
        },
        {
            "utterance": "Please give the first one with its name and id .",
            "sql": "select team.name , team.team_id group_by team.team_id order_by avg ( salary.salary ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the players' first name and last name who won award both in 1960 and in 1961.",
        "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.Player_id = T2.Player_id WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961"
    },
    "interaction": [
        {
            "utterance": "Which players have won an award ?",
            "sql": "select player.name_first , player.name_last group_by player_award.player_id"
        },
        {
            "utterance": "Who won an award in 1960 ?",
            "sql": "select player.name_first , player.name_last where player_award.year = value group_by player_award.player_id"
        },
        {
            "utterance": "How about in 1961 ?",
            "sql": "select player.name_first , player.name_last where player_award.year = value group_by player_award.player_id"
        },
        {
            "utterance": "Among the players , who won awards both in 1960 and in 1961 ?",
            "sql": "select player.name_first , player.name_last where player_award.year = value intersect select player.name_first , player.name_last where player_award.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List players' first name and last name who have weight greater than 220 or height shorter than 75.",
        "sql": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75"
    },
    "interaction": [
        {
            "utterance": "How many players have a weight greater than 220 ?",
            "sql": "select count ( player.* ) where player.weight > value"
        },
        {
            "utterance": "How about greater than 230 ?",
            "sql": "select count ( player.* ) where player.weight > value"
        },
        {
            "utterance": "How many players have a weight greater than 220 or height shorter than 75 ?",
            "sql": "select count ( player.* ) where player.weight > value or player.height < value"
        },
        {
            "utterance": "Please list their full names .",
            "sql": "select player.name_first , player.name_last where player.weight > value or player.height < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 14,
    "final": {
        "utterance": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';"
    },
    "interaction": [
        {
            "utterance": "How many times did the Boston Red Stockings win in postseason ?",
            "sql": "select count ( * ) where team.name = value"
        },
        {
            "utterance": "What is the average score of the games that it won ?",
            "sql": "select avg ( postseason.wins ) where team.name = value"
        },
        {
            "utterance": "How about the the maximum score ?",
            "sql": "select max ( postseason.wins ) where team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many times did Boston Red Stockings lose in 2009 postseason?",
        "sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;"
    },
    "interaction": [
        {
            "utterance": "How many times did the Boston Red Stockings win in postseason ?",
            "sql": "select count ( * ) where team.name = value"
        },
        {
            "utterance": "How many time did the Chicago White Stockings win in postseason ?",
            "sql": "select count ( * ) where team.name = value"
        },
        {
            "utterance": "How many times did the Boston Red Stockings lose in postseason ?",
            "sql": "select count ( * ) where team.name = value"
        },
        {
            "utterance": "How about the number in 2009 ?",
            "sql": "select count ( * ) where team.name = value and postseason.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the name and id of the team with the most victories in 2008 postseason?",
        "sql": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which teams have had victories ?",
            "sql": "select team.name , postseason.team_id_winner group_by postseason.team_id_winner"
        },
        {
            "utterance": "How about in 2008 postseason ?",
            "sql": "select team.name , postseason.team_id_winner where postseason.year = value group_by postseason.team_id_winner"
        },
        {
            "utterance": "Among the results , which team has had the fewest victories ?",
            "sql": "select team.name , postseason.team_id_winner where postseason.year = value group_by postseason.team_id_winner order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the team with the most victories ?",
            "sql": "select team.name , postseason.team_id_winner where postseason.year = value group_by postseason.team_id_winner order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
        "sql": "SELECT count(*) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"
    },
    "interaction": [
        {
            "utterance": "How many wins does the team Boston Red Stockings have ?",
            "sql": "select count ( * ) where team.name = value"
        },
        {
            "utterance": "How many wins did the team Boston Red Stockings have in 2008 ?",
            "sql": "select count ( * ) , postseason.year where team.name = value and postseason.year = value"
        },
        {
            "utterance": "How about the wins in each year ?",
            "sql": "select count ( * ) , postseason.year where team.name = value group_by postseason.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;"
    },
    "interaction": [
        {
            "utterance": "How many games were there in 1885 ?",
            "sql": "select count ( postseason.* ) where postseason.year = value"
        },
        {
            "utterance": "How about in 1900 ?",
            "sql": "select count ( postseason.* ) where postseason.year = value"
        },
        {
            "utterance": "How many games resulted in ties ?",
            "sql": "select count ( postseason.* ) where postseason.ties = value"
        },
        {
            "utterance": "How about the number in 1885 ?",
            "sql": "select count ( postseason.* ) where postseason.year = value and postseason.ties = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the total salary paid by team Boston Red Stockings in 2010?",
        "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year = 2010"
    },
    "interaction": [
        {
            "utterance": "What is the average salary paid by team Boston Red Stockings ?",
            "sql": "select avg ( salary.salary ) where team.name = value"
        },
        {
            "utterance": "How about the average salary paid in 2010 ?",
            "sql": "select avg ( salary.salary ) where team.name = value and salary.year = value"
        },
        {
            "utterance": "What is the total salary in this year ?",
            "sql": "select sum ( salary.salary ) where team.name = value and salary.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 20,
    "final": {
        "utterance": "How many players were in the team Boston Red Stockings in 2000?",
        "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "Show the player ids of the players in the team Boston Red Stockings in 2001 .",
            "sql": "select salary.player_id where team.name = value and salary.year = value group_by salary.player_id"
        },
        {
            "utterance": "How about in 2000 ?",
            "sql": "select salary.player_id where team.name = value and salary.year = value group_by salary.player_id"
        },
        {
            "utterance": "How many players were there that year ?",
            "sql": "select count ( * ) where team.name = value and salary.year = value group_by salary.player_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 21,
    "final": {
        "utterance": "List the 3 highest salaries of the players in 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;"
    },
    "interaction": [
        {
            "utterance": "What is the highest salary out of all the players ?",
            "sql": "select max ( salary.salary )"
        },
        {
            "utterance": "How about in 2001 ?",
            "sql": "select max ( salary.salary ) where salary.year = value"
        },
        {
            "utterance": "Could you please give the top three highest salaries from that year ?",
            "sql": "select salary.salary where salary.year = value order_by salary.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What were all the salary values of players in 2010 and 2001?",
        "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001"
    },
    "interaction": [
        {
            "utterance": "What were all the salary values of players in 2012 ?",
            "sql": "select salary.salary where salary.year = value"
        },
        {
            "utterance": "How about in 2010 ?",
            "sql": "select salary.salary where salary.year = value"
        },
        {
            "utterance": "What is the average number of these results ?",
            "sql": "select avg ( salary.salary ) where salary.year = value"
        },
        {
            "utterance": "Could please give all the salary values of players in 2010 and 2001 ?",
            "sql": "select salary.salary where salary.year = value union select salary.salary where salary.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 23,
    "final": {
        "utterance": "In which year did the least people enter hall of fame?",
        "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many players are there in the hall of fame ?",
            "sql": "select count ( hall_of_fame.* )"
        },
        {
            "utterance": "How many of them entered each year ?",
            "sql": "select hall_of_fame.yearid , count ( hall_of_fame.* ) group_by hall_of_fame.yearid"
        },
        {
            "utterance": "Which year has the fewest people ?",
            "sql": "select hall_of_fame.yearid group_by hall_of_fame.yearid order_by count ( hall_of_fame.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 24,
    "final": {
        "utterance": "How many games were played in park \"Columbia Park\" in 1907?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"
    },
    "interaction": [
        {
            "utterance": "Which city is `` Columbia Park '' located in ?",
            "sql": "select park.city where park.park_name = value"
        },
        {
            "utterance": "How many games were played in this park ?",
            "sql": "select count ( * ) where park.park_name = value"
        },
        {
            "utterance": "How about in year 1908 ?",
            "sql": "select count ( * ) where home_game.year = value and park.park_name = value"
        },
        {
            "utterance": "How about in year 1907 ?",
            "sql": "select count ( * ) where home_game.year = value and park.park_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 25,
    "final": {
        "utterance": "How many games were played in city Atlanta in 2000?",
        "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"
    },
    "interaction": [
        {
            "utterance": "Which park is located in Atlanta ?",
            "sql": "select park.park_name where park.city = value"
        },
        {
            "utterance": "How many games were played in this city ?",
            "sql": "select count ( * ) where park.city = value"
        },
        {
            "utterance": "How about the number in 2010 ?",
            "sql": "select count ( * ) where home_game.year = value and park.city = value"
        },
        {
            "utterance": "How about the number in 2000 ?",
            "sql": "select count ( * ) where home_game.year = value and park.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
    },
    "interaction": [
        {
            "utterance": "What is the total home game attendance of team Cleveland Forest Citys ?",
            "sql": "select sum ( home_game.attendance ) where team.name = value"
        },
        {
            "utterance": "How about the number for Boston Red Stockings ?",
            "sql": "select sum ( home_game.attendance ) where team.name = value"
        },
        {
            "utterance": "Can you please give the results for 2005 ?",
            "sql": "select sum ( home_game.attendance ) where team.name = value and home_game.year = value"
        },
        {
            "utterance": "How about the number from 2000 to 2010 ?",
            "sql": "select sum ( home_game.attendance ) where team.name = value and home_game.year between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 27,
    "final": {
        "utterance": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
        "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;"
    },
    "interaction": [
        {
            "utterance": "How many players with first name Len and last name Barker are there ?",
            "sql": "select count ( player.* ) where player.name_first = value and player.name_last = value"
        },
        {
            "utterance": "What is the average salary that he won in his career ?",
            "sql": "select avg ( salary.salary ) where player.name_first = value and player.name_last = value"
        },
        {
            "utterance": "What is the total salary that he won in his career ?",
            "sql": "select sum ( salary.salary ) where player.name_first = value and player.name_last = value"
        },
        {
            "utterance": "How about the total salary between 1985 to 1990 ?",
            "sql": "select sum ( salary.salary ) where player.name_first = value and player.name_last = value and salary.year between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 28,
    "final": {
        "utterance": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
    },
    "interaction": [
        {
            "utterance": "In which parks does the team `` Washington Nationals '' play games ?",
            "sql": "select team.park where team.name = value group_by team.park"
        },
        {
            "utterance": "How many players have played for this team ?",
            "sql": "select count ( * ) where team.name = value"
        },
        {
            "utterance": "Could you please list their full names ?",
            "sql": "select player.name_first , player.name_last where team.name = value group_by player.player_id"
        },
        {
            "utterance": "How about names of the players that played for this team in both 2005 and 2007",
            "sql": "select player.name_first , player.name_last where salary.year = value and team.name = value intersect select player.name_first , player.name_last where salary.year = value and team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 29,
    "final": {
        "utterance": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;"
    },
    "interaction": [
        {
            "utterance": "In which parks does the team `` Boston Red Stockings '' play games ?",
            "sql": "select team.park where team.name = value group_by team.park"
        },
        {
            "utterance": "How many home games did the team Boston Red Stockings play ?",
            "sql": "select sum ( home_game.games ) where team.name = value"
        },
        {
            "utterance": "How about the number from 1990 to 2000 ?",
            "sql": "select sum ( home_game.games ) where team.name = value and home_game.year between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Which team had the least number of attendances in home games in 1980?",
        "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many attendances did each team have in 1980 ?",
            "sql": "select team.name , home_game.attendance where home_game.year = value group_by team.name"
        },
        {
            "utterance": "Could you please order the results by the attendance ?",
            "sql": "select team.name where home_game.year = value group_by team.name order_by home_game.attendance asc"
        },
        {
            "utterance": "Which team had the least number of attendances ?",
            "sql": "select team.name where home_game.year = value order_by home_game.attendance asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 31,
    "final": {
        "utterance": "List the names of states that have more than 2 parks.",
        "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;"
    },
    "interaction": [
        {
            "utterance": "How many parks does each state have ?",
            "sql": "select park.state , count ( park.* ) group_by park.state"
        },
        {
            "utterance": "Which states have more than 3 parks ?",
            "sql": "select park.state group_by park.state having count ( park.* ) > value"
        },
        {
            "utterance": "Which states have more than 2 parks ?",
            "sql": "select park.state group_by park.state having count ( park.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "baseball_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Which cities have 2 to 4 parks?",
        "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"
    },
    "interaction": [
        {
            "utterance": "How many parks does each city have ?",
            "sql": "select park.city , count ( park.* ) group_by park.city"
        },
        {
            "utterance": "Which cities have 2 or more parks ?",
            "sql": "select park.city group_by park.city having count ( park.* ) > = value"
        },
        {
            "utterance": "Which cities have 3 or more parks ?",
            "sql": "select park.city group_by park.city having count ( park.* ) > = value"
        },
        {
            "utterance": "How about those with 2 to 4 parks ?",
            "sql": "select park.city group_by park.city having count ( park.* ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 0,
    "final": {
        "utterance": "When was the school with the largest enrollment founded?",
        "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average enrollment ?",
            "sql": "select avg ( university.enrollment )"
        },
        {
            "utterance": "Which school was founded the earliest ?",
            "sql": "select university.school order_by university.founded asc limit_value"
        },
        {
            "utterance": "Which school has the largest enrollment ?",
            "sql": "select university.school order_by university.enrollment desc limit_value"
        },
        {
            "utterance": "When was it founded ?",
            "sql": "select university.founded order_by university.enrollment desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the founded year of the newest non public school.",
        "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which one is the the newest school ?",
            "sql": "select university.school order_by university.founded desc limit_value"
        },
        {
            "utterance": "Among the schools , which ones were founded before 1800 ?",
            "sql": "select university.school where university.founded < value"
        },
        {
            "utterance": "Can you list the school names ordered by year founded in decreasing order ?",
            "sql": "select university.school order_by university.founded desc"
        },
        {
            "utterance": "Please give the year that the first non public school was founded .",
            "sql": "select university.founded where university.affiliation != value order_by university.founded desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the highest acc percent score in the competition?",
        "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many games are there ?",
            "sql": "select count ( basketball_match.* )"
        },
        {
            "utterance": "What is the lowest acc percent among the competitions ?",
            "sql": "select min ( basketball_match.acc_percent )"
        },
        {
            "utterance": "Can you order the schools by acc percent in descending order ?",
            "sql": "select basketball_match.team_name order_by basketball_match.acc_percent desc"
        },
        {
            "utterance": "What is the highest acc percent socre ?",
            "sql": "select basketball_match.acc_percent order_by basketball_match.acc_percent desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Please give me all the acc percent scores .",
            "sql": "select basketball_match.acc_percent"
        },
        {
            "utterance": "Which school has the lowest acc percent score ?",
            "sql": "select university.school order_by basketball_match.acc_percent limit_value"
        },
        {
            "utterance": "What is its primary conference ?",
            "sql": "select university.primary_conference order_by basketball_match.acc_percent limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which schools have participated in a basketball match ?",
            "sql": "select university.school"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( university.school )"
        },
        {
            "utterance": "Which one has been founded for the longest time ?",
            "sql": "select university.school order_by university.founded limit_value"
        },
        {
            "utterance": "Please list its team name and acc regular season score",
            "sql": "select basketball_match.team_name , basketball_match.acc_regular_season order_by university.founded limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the location and all games score of the school that has Clemson as its team name.",
        "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    "interaction": [
        {
            "utterance": "Which school has North Carolina as its team name ?",
            "sql": "select university.school where basketball_match.team_name = value"
        },
        {
            "utterance": "What is its location ?",
            "sql": "select university.location where basketball_match.team_name = value"
        },
        {
            "utterance": "How about the school that has Clemson as its team name ?",
            "sql": "select university.school where basketball_match.team_name = value"
        },
        {
            "utterance": "Please list its location and all games score .",
            "sql": "select basketball_match.all_games , university.location where basketball_match.team_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the enrollment and primary_conference of the oldest college.",
        "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many colleges are there ?",
            "sql": "select count ( university.* )"
        },
        {
            "utterance": "Please order them by founding year .",
            "sql": "select university.school order_by university.founded"
        },
        {
            "utterance": "Which one is the oldest ?",
            "sql": "select university.school order_by university.founded limit_value"
        },
        {
            "utterance": "Please list its enrollment and primary_conference .",
            "sql": "select university.enrollment , university.primary_conference order_by university.founded limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the total and minimum enrollment of all schools?",
        "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university"
    },
    "interaction": [
        {
            "utterance": "What is the average enrollment of all schools ?",
            "sql": "select avg ( university.enrollment )"
        },
        {
            "utterance": "Could you please order the schools by their enrollment ?",
            "sql": "select university.school order_by university.enrollment"
        },
        {
            "utterance": "What is the total enrollment of all schools ?",
            "sql": "select sum ( university.enrollment )"
        },
        {
            "utterance": "Please also list the minimum enrollment .",
            "sql": "select sum ( university.enrollment ) , min ( university.enrollment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 8,
    "final": {
        "utterance": "How many schools do not participate in the basketball match?",
        "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
    },
    "interaction": [
        {
            "utterance": "Which schools have participated in a basketball match ?",
            "sql": "select university.school"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( university.school )"
        },
        {
            "utterance": "How about the schools that have not participated in a basketball match ?",
            "sql": "select university.school where university.school_id not in ( select basketball_match.school_id )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( university.* ) where university.school_id not in ( select basketball_match.school_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the schools that were either founded after 1850 or public.",
        "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
    },
    "interaction": [
        {
            "utterance": "How many public schools are there ?",
            "sql": "select count ( university.school ) where university.affiliation = value"
        },
        {
            "utterance": "Please list their names .",
            "sql": "select university.school where university.affiliation = value"
        },
        {
            "utterance": "Please also list the schools that were founded after 1850 .",
            "sql": "select university.school where university.founded > value or university.affiliation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 10,
    "final": {
        "utterance": "Find how many school locations have the word 'NY'.",
        "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( university.school )"
        },
        {
            "utterance": "Please list the years they were founded .",
            "sql": "select university.founded"
        },
        {
            "utterance": "Please list their locations .",
            "sql": "select university.location"
        },
        {
            "utterance": "how many of them are in NY ?",
            "sql": "select count ( university.* ) where university.location like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
        "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
    },
    "interaction": [
        {
            "utterance": "What is the average enrollment size ?",
            "sql": "select avg ( university.enrollment )"
        },
        {
            "utterance": "Which schools have basketball team ?",
            "sql": "select university.school"
        },
        {
            "utterance": "Please list the enrollment of these schools .",
            "sql": "select university.school , university.enrollment"
        },
        {
            "utterance": "Which of them have enrollments that are smaller than the average enrollment size ?",
            "sql": "select university.school where university.enrollment < ( select avg ( university.enrollment ) )"
        },
        {
            "utterance": "Please list their team names .",
            "sql": "select basketball_match.team_name where university.enrollment < ( select avg ( university.enrollment ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "university_basketball",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation"
    },
    "interaction": [
        {
            "utterance": "What are the different affiliation types of these schools ?",
            "sql": "select distinct university.affiliation"
        },
        {
            "utterance": "Which universities have over a 20000 enrollment size ?",
            "sql": "select university.school where university.enrollment > value"
        },
        {
            "utterance": "Can you also list their affiliation type ?",
            "sql": "select university.school , university.affiliation where university.enrollment > value"
        },
        {
            "utterance": "How many are there in each affiliation group ?",
            "sql": "select count ( university.* ) , university.affiliation where university.enrollment > value group_by university.affiliation"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
        "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\""
    },
    "interaction": [
        {
            "utterance": "Tell me Wilson 's date of registration .",
            "sql": "select students.date_of_registration where students.personal_name = value"
        },
        {
            "utterance": "Tell me the date of his latest logon .",
            "sql": "select students.date_of_latest_logon where students.personal_name = value"
        },
        {
            "utterance": "How about the dates of the latest logon of the students with family name `` Jaskolski '' or `` Langosh '' ?",
            "sql": "select students.date_of_latest_logon where students.family_name = value or students.family_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 1,
    "final": {
        "utterance": "How many students have personal names that contain the word \"son\"?",
        "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\""
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( students.* )"
        },
        {
            "utterance": "How many students have personal names that contain the word `` wel '' ?",
            "sql": "select count ( students.* ) where students.personal_name like value"
        },
        {
            "utterance": "How many students have personal names that contain the word `` son '' ?",
            "sql": "select count ( students.* ) where students.personal_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 2,
    "final": {
        "utterance": "List each test result and its count in descending order of count.",
        "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Tell me the number of tests with result `` Pass '' .",
            "sql": "select count ( student_tests_taken.* ) where student_tests_taken.test_result = value"
        },
        {
            "utterance": "Tell me the number of tests with result `` Fail '' .",
            "sql": "select count ( student_tests_taken.* ) where student_tests_taken.test_result = value"
        },
        {
            "utterance": "List each test result and its count in descending order of count .",
            "sql": "select student_tests_taken.test_result , count ( student_tests_taken.* ) group_by student_tests_taken.test_result order_by count ( student_tests_taken.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the login name of the course author that teaches the course with name \"advanced database\".",
        "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""
    },
    "interaction": [
        {
            "utterance": "Tell me the personal name of the course author that teaches the course with name `` advanced database '' .",
            "sql": "select course_authors_and_tutors.personal_name where courses.course_name = value"
        },
        {
            "utterance": "Tell me the login name of the course author that teaches the course with name `` advanced database '' .",
            "sql": "select course_authors_and_tutors.login_name where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
        "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\""
    },
    "interaction": [
        {
            "utterance": "Tell me the personal name of the course author that teaches the course with name `` operating system '' .",
            "sql": "select course_authors_and_tutors.personal_name where courses.course_name = value"
        },
        {
            "utterance": "How about his address ?",
            "sql": "select course_authors_and_tutors.address_line_1 where courses.course_name = value"
        },
        {
            "utterance": "Tel me the addresses of the course authors who teach the course with name `` operating system '' or `` data structure ''",
            "sql": "select course_authors_and_tutors.address_line_1 where courses.course_name = value or courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the personal name , family name , and author ID of the course author that teaches English .",
            "sql": "select course_authors_and_tutors.personal_name , course_authors_and_tutors.family_name , courses.author_id where courses.course_name = value"
        },
        {
            "utterance": "How about that of course French .",
            "sql": "select course_authors_and_tutors.personal_name , course_authors_and_tutors.family_name , courses.author_id where courses.course_name = value"
        },
        {
            "utterance": "Tell me the personal name , family name , and author ID of the course author that teaches the most courses .",
            "sql": "select course_authors_and_tutors.personal_name , course_authors_and_tutors.family_name , courses.author_id group_by courses.author_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me Julio 's address",
            "sql": "select course_authors_and_tutors.address_line_1 where course_authors_and_tutors.personal_name = value"
        },
        {
            "utterance": "Tell me the number of courses that he teaches .",
            "sql": "select count ( * ) where course_authors_and_tutors.personal_name = value"
        },
        {
            "utterance": "Tell me the addresses and author IDs of the course authors that teach at least two courses .",
            "sql": "select course_authors_and_tutors.address_line_1 , courses.author_id group_by courses.author_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of courses taught by the tutor who has personal name \"Julio\".",
        "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\""
    },
    "interaction": [
        {
            "utterance": "Tell me Julio 's address .",
            "sql": "select course_authors_and_tutors.address_line_1 where course_authors_and_tutors.personal_name = value"
        },
        {
            "utterance": "Tell me the number of courses that he teaches .",
            "sql": "select count ( courses.course_name ) where course_authors_and_tutors.personal_name = value"
        },
        {
            "utterance": "What are they ?",
            "sql": "select courses.course_name where course_authors_and_tutors.personal_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\""
    },
    "interaction": [
        {
            "utterance": "Tell me the names and descriptions of courses that belong to the subject named `` Arts '' .",
            "sql": "select courses.course_name , courses.course_description where subjects.subject_name = value"
        },
        {
            "utterance": "Tell me the names and descriptions of courses that belong to the subject named `` Language '' .",
            "sql": "select courses.course_name , courses.course_description where subjects.subject_name = value"
        },
        {
            "utterance": "Tell me the names and descriptions of courses that belong to the subject named `` Computer Science '' .",
            "sql": "select courses.course_name , courses.course_description where subjects.subject_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id"
    },
    "interaction": [
        {
            "utterance": "Tell me the courses that belong to the subject named `` Computer Science '' .",
            "sql": "select courses.course_name where subjects.subject_name = value"
        },
        {
            "utterance": "Tell me the courses that belong to the subject named `` Arts '' .",
            "sql": "select courses.course_name where subjects.subject_name = value"
        },
        {
            "utterance": "Tell me the subject ID , subject name , and the corresponding number of available courses for each subject .",
            "sql": "select courses.subject_id , subjects.subject_name , count ( * ) group_by courses.subject_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
        "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"
    },
    "interaction": [
        {
            "utterance": "Tell me the number of courses that belong to `` Language '' .",
            "sql": "select count ( courses.course_name ) where subjects.subject_name = value"
        },
        {
            "utterance": "What are they ?",
            "sql": "select courses.course_name where subjects.subject_name = value"
        },
        {
            "utterance": "Tell me the subject ID , name of subject and the corresponding number of courses for each subject , and sort by the course count in ascending order .",
            "sql": "select courses.subject_id , subjects.subject_name , count ( * ) group_by courses.subject_id order_by count ( * ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the date of enrollment of the course named \"Spanish\"?",
        "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""
    },
    "interaction": [
        {
            "utterance": "What is the date of completion of the course named `` machine learning '' ?",
            "sql": "select student_course_enrolment.date_of_completion where courses.course_name = value"
        },
        {
            "utterance": "What is the date of enrollment of that course ?",
            "sql": "select student_course_enrolment.date_of_enrolment where courses.course_name = value"
        },
        {
            "utterance": "So what is the date of enrollment of the course named `` Spanish '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the name of the course that has the most student enrollment?",
        "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students are enrolled in `` English '' ?",
            "sql": "select count ( * ) where courses.course_name = value"
        },
        {
            "utterance": "So what is the name of the course that has the least student enrollment ?",
            "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the course that has the most student enrollment ?",
            "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the names of the courses that have exactly 1 student enrollment?",
        "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "How many students are enrolled in `` French '' ?",
            "sql": "select count ( * ) where courses.course_name = value"
        },
        {
            "utterance": "Okay , how many students are enrolled in `` AI '' ?",
            "sql": "select count ( * ) where courses.course_name = value"
        },
        {
            "utterance": "So what are the names of the courses that have exactly 1 student enrollment ?",
            "sql": "select courses.course_name group_by courses.course_name having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
        "sql": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "How many students are enrolled in `` AI '' ?",
            "sql": "select count ( * ) where courses.course_name = value"
        },
        {
            "utterance": "Okay . Tell me the names of the courses that have student enrollment bigger than 5 ?",
            "sql": "select courses.course_name group_by courses.course_name having count ( * ) > value"
        },
        {
            "utterance": "What are the descriptions and names of the courses that have student enrollment bigger than 2 ?",
            "sql": "select courses.course_description , courses.course_name group_by courses.course_name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the name of each course and the corresponding number of student enrollment?",
        "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( students.* )"
        },
        {
            "utterance": "How many courses are there ?",
            "sql": "select count ( courses.* )"
        },
        {
            "utterance": "What is the name of each course and the corresponding number of student enrollment ?",
            "sql": "select courses.course_name , count ( * ) group_by courses.course_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\""
    },
    "interaction": [
        {
            "utterance": "What are the dates of all the tests that have the result `` Fail '' ?",
            "sql": "select student_tests_taken.date_test_taken where student_tests_taken.test_result = value"
        },
        {
            "utterance": "How about that of all the tests that have the result `` Pass '' ?",
            "sql": "select student_tests_taken.date_test_taken where student_tests_taken.test_result = value"
        },
        {
            "utterance": "So what are the enrollment dates of all the tests that have the result `` Pass '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment where student_tests_taken.test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the completion dates of all the tests that have result \"Fail\"?",
        "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""
    },
    "interaction": [
        {
            "utterance": "How many tests have result `` Fail '' ?",
            "sql": "select count ( student_tests_taken.* ) where student_tests_taken.test_result = value"
        },
        {
            "utterance": "What are the dates of those tests ?",
            "sql": "select student_tests_taken.date_test_taken where student_tests_taken.test_result = value"
        },
        {
            "utterance": "What are the completion dates of all the tests that have result `` Fail '' ?",
            "sql": "select student_course_enrolment.date_of_completion where student_tests_taken.test_result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 18,
    "final": {
        "utterance": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""
    },
    "interaction": [
        {
            "utterance": "Tell me Karson 's registration date .",
            "sql": "select students.date_of_registration where students.personal_name = value"
        },
        {
            "utterance": "When is his enrollment ?",
            "sql": "select student_course_enrolment.date_of_enrolment where students.personal_name = value"
        },
        {
            "utterance": "When is his completion ?",
            "sql": "select student_course_enrolment.date_of_completion where students.personal_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 19,
    "final": {
        "utterance": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""
    },
    "interaction": [
        {
            "utterance": "Tell me Krystel 's date of registration .",
            "sql": "select students.date_of_registration where students.personal_name = value"
        },
        {
            "utterance": "How about her dates of enrollment and completion ?",
            "sql": "select student_course_enrolment.date_of_enrolment , student_course_enrolment.date_of_completion where students.personal_name = value"
        },
        {
            "utterance": "How about the dates of enrollment and completion of the student with family name `` Zieme '' and personal name `` Bernie '' ?",
            "sql": "select student_course_enrolment.date_of_enrolment , student_course_enrolment.date_of_completion where students.family_name = value and students.personal_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the student ID and login name of the student with the most course enrollments",
        "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me how many course enrollments there are ?",
            "sql": "select count ( student_course_enrolment.* )"
        },
        {
            "utterance": "Tell me how many there are for the student named Jewel ?",
            "sql": "select count ( * ) where students.personal_name = value"
        },
        {
            "utterance": "Tell me the student ID and login name of the student with the most course enrollments .",
            "sql": "select student_course_enrolment.student_id , students.login_name group_by student_course_enrolment.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the student ID and personal name of the student with at least two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many students are enrolled in `` AI '' ?",
            "sql": "select count ( * ) where courses.course_name = value"
        },
        {
            "utterance": "Tell me the names of the courses that have student enrollment bigger than 5 .",
            "sql": "select courses.course_name group_by courses.course_name having count ( * ) > value"
        },
        {
            "utterance": "What are the student ID and personal name of the student with at least two enrollments ?",
            "sql": "select student_course_enrolment.student_id , students.personal_name group_by student_course_enrolment.student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the student ID and middle name for all the students with at most two enrollments.",
        "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me all the enrollment information for the student with personal name `` Else '' .",
            "sql": "select * where students.personal_name = value"
        },
        {
            "utterance": "How about that for the personal name `` Wilson '' ?",
            "sql": "select * where students.personal_name = value"
        },
        {
            "utterance": "Tell me the student ID and middle name for all the students with at most two enrollments .",
            "sql": "select student_course_enrolment.student_id , students.middle_name group_by student_course_enrolment.student_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the personal names of students not enrolled in any course.",
        "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id"
    },
    "interaction": [
        {
            "utterance": "Tell me the course description of the course named `` database '' .",
            "sql": "select courses.course_description where courses.course_name = value"
        },
        {
            "utterance": "Tell me the number of students enrolled in this course .",
            "sql": "select courses.course_name , count ( * ) group_by courses.course_name where courses.course_name = value"
        },
        {
            "utterance": "Tell me the personal names of students that not enrolled in any course .",
            "sql": "select students.personal_name except select students.personal_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 24,
    "final": {
        "utterance": "How many students did not have any course enrollment?",
        "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)"
    },
    "interaction": [
        {
            "utterance": "Tell me the course description of the course named art history .",
            "sql": "select courses.course_description where courses.course_name = value"
        },
        {
            "utterance": "Tell me the number of students enrolling this course .",
            "sql": "select courses.course_name , count ( * ) group_by courses.course_name where courses.course_name = value"
        },
        {
            "utterance": "How many students did not have any course enrollment ?",
            "sql": "select count ( students.* ) where students.student_id not in ( select student_course_enrolment.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_learning",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the common login name of course authors and students.",
        "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
    },
    "interaction": [
        {
            "utterance": "Tell me Cary 's login name .",
            "sql": "select students.login_name where students.personal_name = value"
        },
        {
            "utterance": "How about Autumn 's login name .",
            "sql": "select students.login_name where students.personal_name = value"
        },
        {
            "utterance": "Tell me the common login name of course authors and students .",
            "sql": "select course_authors_and_tutors.login_name intersect select students.login_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum number of silver medals for clubs.",
        "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank"
    },
    "interaction": [
        {
            "utterance": "List all the information about the club ranks .",
            "sql": "select club_rank.*"
        },
        {
            "utterance": "What is the average number of gold medals ?",
            "sql": "select avg ( club_rank.gold )"
        },
        {
            "utterance": "What about silver medals ?",
            "sql": "select avg ( club_rank.silver )"
        },
        {
            "utterance": "What about the maximum and minimum number of silver medals ?",
            "sql": "select max ( club_rank.silver ) , min ( club_rank.silver )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of clubs that have players with position \"Right Wing\".",
        "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\""
    },
    "interaction": [
        {
            "utterance": "What are the club names for each player ?",
            "sql": "select club.name , player.name"
        },
        {
            "utterance": "How many players are there in each club ?",
            "sql": "select club.name , count ( * ) group_by club.name"
        },
        {
            "utterance": "Which clubs have players who are the position of `` Right Wing '' .",
            "sql": "select club.name where player.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the average points of players from club with name \"AIB\".",
        "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\""
    },
    "interaction": [
        {
            "utterance": "What are the club names and points for each player ?",
            "sql": "select club.name , player.points , player.name"
        },
        {
            "utterance": "What is the average points for all of them ?",
            "sql": "select avg ( player.points )"
        },
        {
            "utterance": "What about that of the club 'BK Slide ' ?",
            "sql": "select avg ( player.points ) where club.name = value"
        },
        {
            "utterance": "What about club 'AIB ' ?",
            "sql": "select avg ( player.points ) where club.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 3,
    "final": {
        "utterance": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20"
    },
    "interaction": [
        {
            "utterance": "Show all the positions of the players .",
            "sql": "select player.position"
        },
        {
            "utterance": "How many unique positions are there ?",
            "sql": "select count ( distinct player.position )"
        },
        {
            "utterance": "How many players are there for each of them ?",
            "sql": "select player.position , count ( player.* ) group_by player.position"
        },
        {
            "utterance": "What is the average points of all players ?",
            "sql": "select avg ( player.points )"
        },
        {
            "utterance": "What are the positions of the players with average number of points scored by players of that position bigger than 20 ?",
            "sql": "select player.position group_by player.name having avg ( player.points ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 4,
    "final": {
        "utterance": "List the most common type of competition.",
        "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many unique competition types are there ?",
            "sql": "select count ( distinct competition.competition_type )"
        },
        {
            "utterance": "How many competitions are there for each type ?",
            "sql": "select competition.competition_type , count ( competition.* ) group_by competition.competition_type"
        },
        {
            "utterance": "Among those results , which one is the most common one ?",
            "sql": "select competition.competition_type group_by competition.competition_type order_by count ( competition.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 5,
    "final": {
        "utterance": "List the types of competition that have at most five competitions of that type.",
        "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5"
    },
    "interaction": [
        {
            "utterance": "How many unique competition types are there ?",
            "sql": "select count ( distinct competition.competition_type )"
        },
        {
            "utterance": "How many competitions are there for each type ?",
            "sql": "select competition.competition_type , count ( competition.* ) group_by competition.competition_type"
        },
        {
            "utterance": "What are the top 3 competition types ?",
            "sql": "select competition.competition_type group_by competition.competition_type order_by count ( competition.* ) desc limit_value"
        },
        {
            "utterance": "What about the ones that have at most five competitions of that type .",
            "sql": "select competition.competition_type group_by competition.competition_type having count ( competition.* ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 6,
    "final": {
        "utterance": "List the names of clubs that do not have any players.",
        "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    "interaction": [
        {
            "utterance": "What are the club names ?",
            "sql": "select club.name"
        },
        {
            "utterance": "How many of them have at least one player ?",
            "sql": "select count ( club.name ) where club.club_id in ( select player.club_id )"
        },
        {
            "utterance": "Which ones have no players at all ?",
            "sql": "select club.name where club.club_id not in ( select player.club_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the positions with both players having more than 20 points and less than 10 points.",
        "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10"
    },
    "interaction": [
        {
            "utterance": "What is the average value of points ?",
            "sql": "select avg ( player.points )"
        },
        {
            "utterance": "How many players have points less than 20.0 ?",
            "sql": "select count ( player.* ) where player.points < value"
        },
        {
            "utterance": "What are the positions of those players ?",
            "sql": "select player.position where player.points < value"
        },
        {
            "utterance": "What about the positions of those players who have more than 20 points and less than 10 points .",
            "sql": "select player.position where player.points > value intersect select player.position where player.points < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 8,
    "final": {
        "utterance": "what are the name of players who get more than the average points.",
        "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"
    },
    "interaction": [
        {
            "utterance": "What are the maximum and mean values of the points ?",
            "sql": "select max ( player.points ) , avg ( player.points )"
        },
        {
            "utterance": "What are the player names of those who have more points than the average ?",
            "sql": "select player.name where player.points > ( select avg ( player.points ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 9,
    "final": {
        "utterance": "find the number of players whose points are lower than 30 in each position.",
        "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION"
    },
    "interaction": [
        {
            "utterance": "What are the minimum and mean values of the points ?",
            "sql": "select min ( player.points ) , avg ( player.points )"
        },
        {
            "utterance": "What are the player names of those who have fewer points than the average ?",
            "sql": "select player.name where player.points < ( select avg ( player.points ) )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( player.* ) where player.points < ( select avg ( player.points ) )"
        },
        {
            "utterance": "How many players are there whose points are lower than 30 ?",
            "sql": "select count ( player.* ) where player.points < value"
        },
        {
            "utterance": "Among those , how many players are there for each position ?",
            "sql": "select count ( player.* ) , player.position where player.points < value group_by player.position"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 10,
    "final": {
        "utterance": "which country did participated in the most number of Tournament competitions?",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many competitions are there where the competition type is 'Friendly ' ?",
            "sql": "select count ( competition.* ) where competition.competition_type = value"
        },
        {
            "utterance": "What about for the type 'Tournament ' ?",
            "sql": "select count ( competition.* ) where competition.competition_type = value"
        },
        {
            "utterance": "Among those results , how many competitions are there for each country ?",
            "sql": "select competition.country where competition.competition_type = value group_by competition.country"
        },
        {
            "utterance": "Which one is the most popular country ?",
            "sql": "select competition.country where competition.competition_type = value group_by competition.country order_by count ( competition.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "sports_competition",
    "interaction_id": 11,
    "final": {
        "utterance": "which countries did participated in both Friendly and Tournament type competitions.",
        "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'"
    },
    "interaction": [
        {
            "utterance": "How many competitions are there where the competition type is 'Friendly ' ?",
            "sql": "select count ( competition.* ) where competition.competition_type = value"
        },
        {
            "utterance": "Among those results , how many competitions are there for each country ?",
            "sql": "select competition.country where competition.competition_type = value group_by competition.country"
        },
        {
            "utterance": "What about for type 'Tournament ' ?",
            "sql": "select competition.country where competition.competition_type = value group_by competition.country"
        },
        {
            "utterance": "Which countries held both types of competitions ?",
            "sql": "select competition.country where competition.competition_type = value intersect select competition.country where competition.competition_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 0,
    "final": {
        "utterance": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "Which assets have 2 parts ? Show me its id and details .",
            "sql": "select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) = value"
        },
        {
            "utterance": "Which assets have less than 2 fault logs ? Show me its id and details .",
            "sql": "select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) < value"
        },
        {
            "utterance": "Which assets fulfill both of those conditions ? Show me asset id and details .",
            "sql": "select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) = value intersect select assets.asset_id , assets.asset_details group_by assets.asset_id having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 1,
    "final": {
        "utterance": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"
    },
    "interaction": [
        {
            "utterance": "Show me assets each maintenance contract contains .",
            "sql": "select * group_by maintenance_contracts.maintenance_contract_id"
        },
        {
            "utterance": "Show me the number of assets and contract id .",
            "sql": "select count ( * ) , maintenance_contracts.maintenance_contract_id group_by maintenance_contracts.maintenance_contract_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 2,
    "final": {
        "utterance": "How many assets does each third party company supply? List the count and the company id.",
        "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id"
    },
    "interaction": [
        {
            "utterance": "Show me assets supplied by each third party company .",
            "sql": "select * group_by third_party_companies.company_id"
        },
        {
            "utterance": "How many are there for each third party company ? Show me the company id as well .",
            "sql": "select count ( * ) , third_party_companies.company_id group_by third_party_companies.company_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 3,
    "final": {
        "utterance": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which third party companies have at least 2 maintenance engineers ? List the id and name of that company .",
            "sql": "select third_party_companies.company_id , third_party_companies.company_name group_by third_party_companies.company_id having count ( * ) > = value"
        },
        {
            "utterance": "Show me names and ids of third party companies that have at least 2 maintenance contracts as well , along with the previous result .",
            "sql": "select third_party_companies.company_id , third_party_companies.company_name group_by third_party_companies.company_id having count ( * ) > = value union select third_party_companies.company_id , third_party_companies.company_name group_by third_party_companies.company_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "sql": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id"
    },
    "interaction": [
        {
            "utterance": "What is the name and id of the staff who recorded the fault log ?",
            "sql": "select staff.staff_name , staff.staff_id"
        },
        {
            "utterance": "Among those staff members , only show the name and id of staff who has not contacted any visiting engineers .",
            "sql": "select staff.staff_name , staff.staff_id except select staff.staff_name , staff.staff_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 5,
    "final": {
        "utterance": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which engineer has visited the least number of times ? Show the id , first and last names of that engineer .",
            "sql": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name group_by maintenance_engineers.engineer_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Do the same for the engineer who has visited the most times .",
            "sql": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name group_by maintenance_engineers.engineer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 6,
    "final": {
        "utterance": "Which parts have more than 2 faults? Show the part name and id.",
        "sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Which parts have less than 2 faults ? Show the id and name of that part .",
            "sql": "select parts.part_name , parts.part_id group_by parts.part_id having count ( * ) < value"
        },
        {
            "utterance": "Do the same for parts with more than 2 faults .",
            "sql": "select parts.part_name , parts.part_id group_by parts.part_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 7,
    "final": {
        "utterance": "List all every engineer's first name, last name, details and coresponding skill description.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
    },
    "interaction": [
        {
            "utterance": "List all engineers ' first and last names .",
            "sql": "select maintenance_engineers.first_name , maintenance_engineers.last_name"
        },
        {
            "utterance": "List the details of each engineer and corresponding skill descriptions as well , along with the names .",
            "sql": "select maintenance_engineers.first_name , maintenance_engineers.last_name , maintenance_engineers.other_details , skills.skill_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 8,
    "final": {
        "utterance": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "sql": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"
    },
    "interaction": [
        {
            "utterance": "Show me all faults of different parts .",
            "sql": "select part_faults.fault_short_name"
        },
        {
            "utterance": "Give me descriptions of skills required to fix those faults , along with the names of those faults .",
            "sql": "select part_faults.fault_short_name , skills.skill_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 9,
    "final": {
        "utterance": "How many assets can each parts be used in? List the part name and the number.",
        "sql": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name"
    },
    "interaction": [
        {
            "utterance": "Show me all assets each part can be used in . List the part name and the asset details .",
            "sql": "select parts.part_name , assets.asset_details group_by parts.part_name"
        },
        {
            "utterance": "How many assets can each part be used in ? Show me the count and the part name .",
            "sql": "select parts.part_name , count ( * ) group_by parts.part_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 10,
    "final": {
        "utterance": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "sql": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the lowest number of engineer visits for a single fault log ? List the number and log entry id .",
            "sql": "select count ( * ) , fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Do the same for the highest number of engineer visits for a single fault log ?",
            "sql": "select count ( * ) , fault_log.fault_log_entry_id group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 11,
    "final": {
        "utterance": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "sql": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)"
    },
    "interaction": [
        {
            "utterance": "How many engineers have never visited to maintain the assets ?",
            "sql": "select count ( maintenance_engineers.* ) where maintenance_engineers.engineer_id not in ( select engineer_visits.engineer_id )"
        },
        {
            "utterance": "Show me their first and last names .",
            "sql": "select maintenance_engineers.first_name , maintenance_engineers.last_name where maintenance_engineers.engineer_id not in ( select engineer_visits.engineer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 12,
    "final": {
        "utterance": "When was the first asset acquired?",
        "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "When was the latest date that an asset was acquired ?",
            "sql": "select assets.asset_acquired_date order_by assets.asset_acquired_date desc limit_value"
        },
        {
            "utterance": "How about the oldest date ?",
            "sql": "select assets.asset_acquired_date order_by assets.asset_acquired_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 13,
    "final": {
        "utterance": "Which part fault requires the most number of skills to fix? List part id and name.",
        "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the id and name of a fault that needs the least number of skills to be fixed .",
            "sql": "select parts.part_id , parts.part_name group_by parts.part_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the fault that requires the most number of skills to fix ?",
            "sql": "select parts.part_id , parts.part_name group_by parts.part_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 14,
    "final": {
        "utterance": "Which kind of part has the least number of faults? List the part name.",
        "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the name of each part with the number of faults it has .",
            "sql": "select parts.part_name , count ( * ) group_by parts.part_name"
        },
        {
            "utterance": "Show me the name of part with the least number of faults .",
            "sql": "select parts.part_name group_by parts.part_name order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 15,
    "final": {
        "utterance": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the engineers .",
            "sql": "select maintenance_engineers.*"
        },
        {
            "utterance": "Show me id , first and last names of engineers who have visited .",
            "sql": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name group_by maintenance_engineers.engineer_id"
        },
        {
            "utterance": "Among those , which one made the least number of visits .",
            "sql": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name group_by maintenance_engineers.engineer_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 16,
    "final": {
        "utterance": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "sql": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id"
    },
    "interaction": [
        {
            "utterance": "Show me names of all the staff members .",
            "sql": "select staff.staff_name"
        },
        {
            "utterance": "List the first and last names of engineers each staff member has contacted .",
            "sql": "select staff.staff_name , maintenance_engineers.first_name , maintenance_engineers.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 17,
    "final": {
        "utterance": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which fault log included the least number of faulty parts ? List the id , description , and record time of that fault log .",
            "sql": "select fault_log.fault_log_entry_id , fault_log.fault_description , fault_log.fault_log_entry_datetime group_by fault_log.fault_log_entry_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Show the same for the fault log with most number of faulty parts .",
            "sql": "select fault_log.fault_log_entry_id , fault_log.fault_description , fault_log.fault_log_entry_datetime group_by fault_log.fault_log_entry_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 18,
    "final": {
        "utterance": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "sql": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me id and descriptions of all the skills .",
            "sql": "select skills.skill_id , skills.skill_description"
        },
        {
            "utterance": "For each of those skills , show the number of faults each skill is used to fix .",
            "sql": "select skills.skill_id , skills.skill_description , count ( * ) group_by skills.skill_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Which skill is used to fix the most number of faults ?",
            "sql": "select skills.skill_id , skills.skill_description group_by skills.skill_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 19,
    "final": {
        "utterance": "Which part has the least chargeable amount? List the part id and amount.",
        "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show chargeable amount for every part .",
            "sql": "select parts.chargeable_amount"
        },
        {
            "utterance": "Order them by chargeable amount in ascending order .",
            "sql": "select parts.chargeable_amount order_by parts.chargeable_amount asc"
        },
        {
            "utterance": "Show me the id and chargeable amount of the part with the least chargeable amount .",
            "sql": "select parts.part_id , parts.chargeable_amount order_by parts.chargeable_amount asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 20,
    "final": {
        "utterance": "Which company started the earliest the maintenance contract? Show the company name.",
        "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of companies that started the five earliest maintenance contracts .",
            "sql": "select third_party_companies.company_name order_by maintenance_contracts.contract_start_date asc limit_value"
        },
        {
            "utterance": "Show me the same for the earliest one .",
            "sql": "select third_party_companies.company_name order_by maintenance_contracts.contract_start_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 21,
    "final": {
        "utterance": "Which gender makes up the majority of the staff?",
        "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List gender of each staff .",
            "sql": "select staff.gender"
        },
        {
            "utterance": "Which gender do most staff members have ?",
            "sql": "select staff.gender group_by staff.gender order_by count ( staff.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "assets_maintenance",
    "interaction_id": 22,
    "final": {
        "utterance": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name"
    },
    "interaction": [
        {
            "utterance": "Show me engineers each staff has contacted . List the names of contact staff and engineers .",
            "sql": "select staff.staff_name , maintenance_engineers.first_name group_by staff.staff_name"
        },
        {
            "utterance": "How many engineers did each staff contact ? List the count instead of the names of engineers .",
            "sql": "select staff.staff_name , count ( * ) group_by staff.staff_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 0,
    "final": {
        "utterance": "list the local authorities and services provided by all stations.",
        "sql": "SELECT local_authority ,  services FROM station;"
    },
    "interaction": [
        {
            "utterance": "Show me all about stations .",
            "sql": "select station.*"
        },
        {
            "utterance": "What are the network names ?",
            "sql": "select station.network_name"
        },
        {
            "utterance": "How about the local authorities and services provided by all stations .",
            "sql": "select station.local_authority , station.services"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 1,
    "final": {
        "utterance": "show all train numbers and names ordered by their time from early to late.",
        "sql": "SELECT train_number ,  name FROM train ORDER BY TIME;"
    },
    "interaction": [
        {
            "utterance": "Show me the origin of all trains ordered by time early to late .",
            "sql": "select train.origin order_by train.time"
        },
        {
            "utterance": "Now show me the train_number for all trains ordered by time early to late .",
            "sql": "select train.train_number order_by train.time"
        },
        {
            "utterance": "Also provide the train_name for each of the result above .",
            "sql": "select train.train_number , train.name order_by train.time"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 2,
    "final": {
        "utterance": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME;"
    },
    "interaction": [
        {
            "utterance": "What 's time for trains going to Mumbai ?",
            "sql": "select train.time where train.destination = value"
        },
        {
            "utterance": "How about the time and train number for trains going to Chennai ?",
            "sql": "select train.time , train.train_number where train.destination = value"
        },
        {
            "utterance": "Order the result by time .",
            "sql": "select train.time , train.train_number where train.destination = value order_by train.time"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 3,
    "final": {
        "utterance": "How many trains have 'Express' in their names?",
        "sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\";"
    },
    "interaction": [
        {
            "utterance": "Show me the train names .",
            "sql": "select train.name"
        },
        {
            "utterance": "How many distinct names are there ?",
            "sql": "select count ( distinct train.name )"
        },
        {
            "utterance": "How many trains have 'Express ' in their names ?",
            "sql": "select count ( train.* ) where train.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "sql": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur';"
    },
    "interaction": [
        {
            "utterance": "How many trains are going from Chennai to Guruvayur ?",
            "sql": "select count ( train.* ) where train.origin = value and train.destination = value"
        },
        {
            "utterance": "What times are they each going ?",
            "sql": "select train.time where train.origin = value and train.destination = value"
        },
        {
            "utterance": "Find both train number and time .",
            "sql": "select train.train_number , train.time where train.origin = value and train.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the number of trains starting from each origin.",
        "sql": "SELECT origin ,  count(*) FROM train GROUP BY origin;"
    },
    "interaction": [
        {
            "utterance": "What are the origins of all trains ?",
            "sql": "select train.origin"
        },
        {
            "utterance": "Which origin has the most number of trains ?",
            "sql": "select train.origin group_by train.origin order_by count ( train.* ) desc limit_value"
        },
        {
            "utterance": "Find the number of trains starting from each origin .",
            "sql": "select train.origin , count ( train.* ) group_by train.origin"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the train whose route runs through greatest number of stations.",
        "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the station names .",
            "sql": "select station.network_name"
        },
        {
            "utterance": "How about the name of trains and the number of stations each runs through ?",
            "sql": "select train.name , count ( * ) group_by route.train_id"
        },
        {
            "utterance": "Of these , return the name with the greatest number of stations .",
            "sql": "select train.name group_by route.train_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the number of trains for each station, as well as the station network name and services.",
        "sql": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id;"
    },
    "interaction": [
        {
            "utterance": "Can you list the services for each station ?",
            "sql": "select station.services"
        },
        {
            "utterance": "Can you also show the the number of trains for each station ?",
            "sql": "select count ( * ) , station.services group_by route.station_id"
        },
        {
            "utterance": "Also include the the station network name .",
            "sql": "select count ( * ) , station.network_name , station.services group_by route.station_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the average high temperature for each day of week?",
        "sql": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week;"
    },
    "interaction": [
        {
            "utterance": "What 's the average low temperature of Monday ?",
            "sql": "select avg ( weekly_weather.low_temperature ) where weekly_weather.day_of_week = value"
        },
        {
            "utterance": "How about its average high temperature ?",
            "sql": "select avg ( weekly_weather.high_temperature ) where weekly_weather.day_of_week = value"
        },
        {
            "utterance": "Show me the average high temperature for each day of week ?",
            "sql": "select avg ( weekly_weather.high_temperature ) , weekly_weather.day_of_week group_by weekly_weather.day_of_week"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 9,
    "final": {
        "utterance": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "sql": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\";"
    },
    "interaction": [
        {
            "utterance": "Show me the all about weather for all stations .",
            "sql": "select *"
        },
        {
            "utterance": "What 's the maximum low temperature and average precipitation for Bushey station ?",
            "sql": "select max ( weekly_weather.low_temperature ) , avg ( weekly_weather.precipitation ) where station.network_name = value"
        },
        {
            "utterance": "How about for the Amersham station ?",
            "sql": "select max ( weekly_weather.low_temperature ) , avg ( weekly_weather.precipitation ) where station.network_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 10,
    "final": {
        "utterance": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "sql": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\";"
    },
    "interaction": [
        {
            "utterance": "Show me the names of trains that run through a station serviced by Greater Anglia .",
            "sql": "select train.name where station.services = value"
        },
        {
            "utterance": "How about stations for local authority Chiltern ?",
            "sql": "select train.name where station.local_authority = value"
        },
        {
            "utterance": "For these , also provide the times of each train .",
            "sql": "select train.name , train.time where station.local_authority = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 11,
    "final": {
        "utterance": "How many different services are provided by all stations?",
        "sql": "SELECT count(DISTINCT services) FROM station;"
    },
    "interaction": [
        {
            "utterance": "Show me the services provided by all stations .",
            "sql": "select station.services"
        },
        {
            "utterance": "How about the number of services ?",
            "sql": "select count ( station.services )"
        },
        {
            "utterance": "How many distinct ones are there ?",
            "sql": "select count ( distinct station.services )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the id and local authority of the station with has the highest average high temperature.",
        "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What 's the high temperature of each station ?",
            "sql": "select weekly_weather.high_temperature"
        },
        {
            "utterance": "What 's the id of the station with highest average high temperature ?",
            "sql": "select station.id group_by weekly_weather.station_id order_by avg ( weekly_weather.high_temperature ) desc limit_value"
        },
        {
            "utterance": "Also show me the local authority of this station .",
            "sql": "select station.id , station.local_authority group_by weekly_weather.station_id order_by avg ( weekly_weather.high_temperature ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50;"
    },
    "interaction": [
        {
            "utterance": "List the minimum precipitation of each station .",
            "sql": "select min ( weekly_weather.precipitation ) group_by weekly_weather.station_id"
        },
        {
            "utterance": "How about the max precipitation ? Show station id as well .",
            "sql": "select station.id , max ( weekly_weather.precipitation ) group_by weekly_weather.station_id"
        },
        {
            "utterance": "Find the id and local authority of the station whose maximum precipitation is higher than 50 .",
            "sql": "select station.id , station.local_authority group_by weekly_weather.station_id having max ( weekly_weather.precipitation ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "station_weather",
    "interaction_id": 14,
    "final": {
        "utterance": "show the lowest low temperature and highest wind speed in miles per hour.",
        "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather;"
    },
    "interaction": [
        {
            "utterance": "What 's average low_temperature per week ?",
            "sql": "select avg ( weekly_weather.low_temperature )"
        },
        {
            "utterance": "How about the average wind speed per week in miles per hour ?",
            "sql": "select avg ( weekly_weather.wind_speed_mph )"
        },
        {
            "utterance": "Show the weekly lowest low temperature and weekly highest wind speed in miles per hour .",
            "sql": "select min ( weekly_weather.low_temperature ) , max ( weekly_weather.wind_speed_mph )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 0,
    "final": {
        "utterance": "How many book clubs are there?",
        "sql": "SELECT count(*) FROM book_club"
    },
    "interaction": [
        {
            "utterance": "Show information for all book clubs .",
            "sql": "select book_club.*"
        },
        {
            "utterance": "How many of them ?",
            "sql": "select count ( book_club.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 1,
    "final": {
        "utterance": "show the titles, and authors or editors for all books made after the year 1989.",
        "sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989"
    },
    "interaction": [
        {
            "utterance": "Show the title for all books .",
            "sql": "select book_club.book_title"
        },
        {
            "utterance": "Also show the authors or editors for each of them .",
            "sql": "select book_club.book_title , book_club.author_or_editor"
        },
        {
            "utterance": "How about the results for those published after the year 1989 ?",
            "sql": "select book_club.book_title , book_club.author_or_editor where book_club.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all distinct publishers for books.",
        "sql": "SELECT DISTINCT publisher FROM book_club"
    },
    "interaction": [
        {
            "utterance": "Show information for all books .",
            "sql": "select book_club.*"
        },
        {
            "utterance": "What are the distinct publishers for them ?",
            "sql": "select distinct book_club.publisher"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC"
    },
    "interaction": [
        {
            "utterance": "Show the titles of all books .",
            "sql": "select book_club.book_title"
        },
        {
            "utterance": "Also show the year published and the publisher .",
            "sql": "select book_club.year , book_club.book_title , book_club.publisher"
        },
        {
            "utterance": "Order the results in descending order by year .",
            "sql": "select book_club.year , book_club.book_title , book_club.publisher order_by book_club.year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all publishers and the number of books for each publisher.",
        "sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher"
    },
    "interaction": [
        {
            "utterance": "Show the publisher for all books .",
            "sql": "select book_club.publisher"
        },
        {
            "utterance": "Count the number of books published by each of them .",
            "sql": "select book_club.publisher , count ( book_club.* ) group_by book_club.publisher"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the publisher with most number of books?",
        "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the publisher for all books .",
            "sql": "select book_club.publisher"
        },
        {
            "utterance": "For each of them , how many books are published ?",
            "sql": "select book_club.publisher , count ( book_club.* ) group_by book_club.publisher"
        },
        {
            "utterance": "Can you order them by the count in descending order ?",
            "sql": "select book_club.publisher group_by book_club.publisher order_by count ( book_club.* ) desc"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select book_club.publisher group_by book_club.publisher order_by count ( book_club.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all book categories and the number of books in each category.",
        "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category"
    },
    "interaction": [
        {
            "utterance": "How many books are there in total ?",
            "sql": "select count ( book_club.* )"
        },
        {
            "utterance": "Can you break down the count by the book category ?",
            "sql": "select book_club.category , count ( book_club.* ) group_by book_club.category"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 7,
    "final": {
        "utterance": "List categories that have at least two books after year 1989.",
        "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show all categories for books .",
            "sql": "select book_club.category"
        },
        {
            "utterance": "For each of them , count the number of books published after 1989 .",
            "sql": "select book_club.category , count ( book_club.* ) where book_club.year > value group_by book_club.category"
        },
        {
            "utterance": "Which categories have at least two such books ?",
            "sql": "select book_club.category where book_club.year > value group_by book_club.category having count ( book_club.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 8,
    "final": {
        "utterance": "Show publishers with a book published in 1989 and a book in 1990.",
        "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990"
    },
    "interaction": [
        {
            "utterance": "Show the publisher for all books .",
            "sql": "select book_club.publisher"
        },
        {
            "utterance": "Who published a book in 1989 ?",
            "sql": "select book_club.publisher where book_club.year = value"
        },
        {
            "utterance": "Among those , who also published a book in 1990 ?",
            "sql": "select book_club.publisher where book_club.year = value intersect select book_club.publisher where book_club.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 9,
    "final": {
        "utterance": "Show all publishers which do not have a book in 1989.",
        "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989"
    },
    "interaction": [
        {
            "utterance": "Show publishers that published a book in 1989 .",
            "sql": "select book_club.publisher where book_club.year = value"
        },
        {
            "utterance": "Show all publishers who do not have such a book .",
            "sql": "select book_club.publisher except select book_club.publisher where book_club.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all movie titles, years, and directors, ordered by budget.",
        "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million"
    },
    "interaction": [
        {
            "utterance": "Show the title and year for all movies .",
            "sql": "select movie.title , movie.year"
        },
        {
            "utterance": "Also show the director for each of them .",
            "sql": "select movie.title , movie.year , movie.director"
        },
        {
            "utterance": "Order the results by their budgets .",
            "sql": "select movie.title , movie.year , movie.director order_by movie.budget_million"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 11,
    "final": {
        "utterance": "How many movie directors are there?",
        "sql": "SELECT COUNT (DISTINCT director) FROM movie"
    },
    "interaction": [
        {
            "utterance": "Show the director for all movies .",
            "sql": "select movie.director"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct movie.director )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the title and director for all movies .",
            "sql": "select movie.title , movie.director"
        },
        {
            "utterance": "Only show the results for those in the year 2000 or before .",
            "sql": "select movie.title , movie.director where movie.year < = value"
        },
        {
            "utterance": "Order the results by the worldwide gross in descending order .",
            "sql": "select movie.title , movie.director where movie.year < = value order_by movie.gross_worldwide desc"
        },
        {
            "utterance": "Which one has the highest ?",
            "sql": "select movie.title , movie.director where movie.year < = value order_by movie.gross_worldwide desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 13,
    "final": {
        "utterance": "Show all director names who have a movie in both year 1999 and 2000.",
        "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999"
    },
    "interaction": [
        {
            "utterance": "Show all director names .",
            "sql": "select movie.director"
        },
        {
            "utterance": "Who has a movie in 1999 ?",
            "sql": "select movie.director where movie.year = value"
        },
        {
            "utterance": "Who has a movie in 2000 ?",
            "sql": "select movie.director where movie.year = value"
        },
        {
            "utterance": "Who has movies in both years ?",
            "sql": "select movie.director where movie.year = value intersect select movie.director where movie.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 14,
    "final": {
        "utterance": "Show all director names who have a movie in the year 1999 or 2000.",
        "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000"
    },
    "interaction": [
        {
            "utterance": "Show all director names .",
            "sql": "select movie.director"
        },
        {
            "utterance": "Among them , who has a movie in 1999 ?",
            "sql": "select movie.director where movie.year = value"
        },
        {
            "utterance": "Also show those who have a movie in 2000 .",
            "sql": "select movie.director where movie.year = value or movie.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"
    },
    "interaction": [
        {
            "utterance": "Show the budget for all movies .",
            "sql": "select movie.budget_million"
        },
        {
            "utterance": "What about the budget for those before 2000 ?",
            "sql": "select movie.budget_million where movie.year < value"
        },
        {
            "utterance": "Show their average , maximum , and minimum budget .",
            "sql": "select avg ( movie.budget_million ) , max ( movie.budget_million ) , min ( movie.budget_million ) where movie.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 16,
    "final": {
        "utterance": "List all company names with a book published by Alyson.",
        "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"
    },
    "interaction": [
        {
            "utterance": "Show all company names .",
            "sql": "select culture_company.company_name"
        },
        {
            "utterance": "Only show the companies with a book .",
            "sql": "select culture_company.company_name"
        },
        {
            "utterance": "What about the companies with a book published by Alyson ?",
            "sql": "select culture_company.company_name where book_club.publisher = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "culture_company",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the movie titles and book titles for all companies in China.",
        "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'"
    },
    "interaction": [
        {
            "utterance": "Show all movie titles .",
            "sql": "select movie.title"
        },
        {
            "utterance": "Show all movie titles for all companies in China .",
            "sql": "select movie.title where culture_company.incorporated_in = value"
        },
        {
            "utterance": "For those companies , also show all the book titles .",
            "sql": "select movie.title , book_club.book_title where culture_company.incorporated_in = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 0,
    "final": {
        "utterance": "How many architects are female?",
        "sql": "SELECT count(*) FROM architect WHERE gender  =  'female'"
    },
    "interaction": [
        {
            "utterance": "Find all female architects .",
            "sql": "select architect.* where architect.gender = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( architect.* ) where architect.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name"
    },
    "interaction": [
        {
            "utterance": "Return all the male architects .",
            "sql": "select architect.* where architect.gender = value"
        },
        {
            "utterance": "What are their names , nationalities and ids ?",
            "sql": "select architect.name , architect.nationality , architect.id where architect.gender = value"
        },
        {
            "utterance": "Sort them by name .",
            "sql": "select architect.name , architect.nationality , architect.id where architect.gender = value order_by architect.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "sql": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id"
    },
    "interaction": [
        {
            "utterance": "What is the length in meters of each bridge ?",
            "sql": "select bridge.length_meters"
        },
        {
            "utterance": "Find the maximum length .",
            "sql": "select max ( bridge.length_meters )"
        },
        {
            "utterance": "Show the maximum length in meters of the bridges and the name of the architect that made it .",
            "sql": "select max ( bridge.length_meters ) , architect.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average length in feet of the bridges?",
        "sql": "SELECT avg(length_feet) FROM bridge"
    },
    "interaction": [
        {
            "utterance": "What is the length in feet of each bridge ?",
            "sql": "select bridge.length_feet"
        },
        {
            "utterance": "Find the average length .",
            "sql": "select avg ( bridge.length_meters )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "sql": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the mills ?",
            "sql": "select mill.name"
        },
        {
            "utterance": "What are the names of all the mills of 'Grondzeiler ' type ?",
            "sql": "select mill.name where mill.type = value"
        },
        {
            "utterance": "Also show the years that they were built .",
            "sql": "select mill.name , mill.built_year where mill.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the distinct names and nationalities of the architects who have ever built a mill?",
        "sql": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id"
    },
    "interaction": [
        {
            "utterance": "What are the ids of the architects who built a mill ?",
            "sql": "select mill.architect_id"
        },
        {
            "utterance": "What are all their distinct names and nationalities ?",
            "sql": "select distinct architect.name , architect.nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of the mills which are not located in 'Donceel'?",
        "sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'"
    },
    "interaction": [
        {
            "utterance": "Show the information for all mills .",
            "sql": "select mill.*"
        },
        {
            "utterance": "Which mills are not located in 'Donceel ' ?",
            "sql": "select mill.* where mill.location != value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select mill.name where mill.location != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the distinct types of mills that are built by American or Canadian architects?",
        "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'"
    },
    "interaction": [
        {
            "utterance": "Which architects have nationality 'American ' or 'Canadian ' ?",
            "sql": "select architect.* where architect.nationality = value or architect.nationality = value"
        },
        {
            "utterance": "Find all mills that are built by these architects .",
            "sql": "select * where architect.nationality = value or architect.nationality = value"
        },
        {
            "utterance": "What are the distinct types of these mills ?",
            "sql": "select distinct mill.type where architect.nationality = value or architect.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the ids and names of the architects who built at least 3 bridges ?",
        "sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Find the id of the architect who built each bridge .",
            "sql": "select bridge.architect_id"
        },
        {
            "utterance": "How many bridges did each one build ?",
            "sql": "select count ( bridge.* ) group_by bridge.architect_id"
        },
        {
            "utterance": "What are the ids and names of those who built at least 3 bridges ?",
            "sql": "select architect.id , architect.name group_by architect.id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the id, name and nationality of the architect who built most mills?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many mills did each architect build ?",
            "sql": "select count ( mill.* ) group_by mill.architect_id"
        },
        {
            "utterance": "Which architect built the most ?",
            "sql": "select * group_by architect.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are the id , name and nationality of this architect ?",
            "sql": "select architect.id , architect.name , architect.nationality group_by architect.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "How many bridges did each architect build ?",
            "sql": "select count ( bridge.* ) group_by bridge.architect_id"
        },
        {
            "utterance": "What are the ids , names and genders of the architects who built two bridges ?",
            "sql": "select architect.id , architect.name , architect.gender group_by architect.id having count ( * ) = value"
        },
        {
            "utterance": "How about for the architects who built two bridges or one mill ?",
            "sql": "select architect.id , architect.name , architect.gender group_by architect.id having count ( * ) = value union select architect.id , architect.name , architect.gender group_by architect.id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'"
    },
    "interaction": [
        {
            "utterance": "Show the location of each bridge .",
            "sql": "select bridge.location"
        },
        {
            "utterance": "What is it for the bridge named 'Kolob Arch ' ?",
            "sql": "select bridge.location where bridge.name = value"
        },
        {
            "utterance": "How about for the bridges named either 'Kolob Arch ' or 'Rainbow Bridge ' ?",
            "sql": "select bridge.location where bridge.name = value or bridge.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 12,
    "final": {
        "utterance": "Which of the mill names contains the french word 'Moulin'?",
        "sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'"
    },
    "interaction": [
        {
            "utterance": "What are the names of mills ?",
            "sql": "select mill.name"
        },
        {
            "utterance": "Which ones contain the french word 'Moulin ' ?",
            "sql": "select mill.name where mill.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80"
    },
    "interaction": [
        {
            "utterance": "Which bridges have a length above 80 meters ?",
            "sql": "select bridge.* where bridge.length_meters > value"
        },
        {
            "utterance": "Show all the architects that have built each of these bridges .",
            "sql": "select * where bridge.length_meters > value"
        },
        {
            "utterance": "What are the distinct name of the mills built by these architects ?",
            "sql": "select distinct mill.name where bridge.length_meters > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the most common mill type, and how many are there?",
        "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of mill types .",
            "sql": "select count ( mill.* ) group_by mill.type"
        },
        {
            "utterance": "What is the most common mill type ?",
            "sql": "select mill.type group_by mill.type order_by count ( mill.* ) desc limit_value"
        },
        {
            "utterance": "Also provide the number of mills of this type .",
            "sql": "select mill.type , count ( mill.* ) group_by mill.type order_by count ( mill.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 15,
    "final": {
        "utterance": "How many architects haven't built a mill before year 1850?",
        "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );"
    },
    "interaction": [
        {
            "utterance": "Find all mills that were built before year 1850 .",
            "sql": "select mill.* where mill.built_year < value"
        },
        {
            "utterance": "What are the ids of the architects who built a mill before year 1850 ?",
            "sql": "select mill.architect_id where mill.built_year < value"
        },
        {
            "utterance": "How many other architects are there ?",
            "sql": "select count ( architect.* ) where architect.id not in ( select mill.architect_id where mill.built_year < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 16,
    "final": {
        "utterance": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name"
    },
    "interaction": [
        {
            "utterance": "List the names and nationalities of all architects .",
            "sql": "select architect.name , architect.nationality"
        },
        {
            "utterance": "Include their ids as well .",
            "sql": "select architect.name , architect.nationality , architect.id"
        },
        {
            "utterance": "Only include architects who are male .",
            "sql": "select architect.name , architect.nationality , architect.id where architect.gender = value"
        },
        {
            "utterance": "List the names alphabetically .",
            "sql": "select architect.name , architect.nationality , architect.id where architect.gender = value order_by architect.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the distinct types of mills that are built by American or Canadian architects?",
        "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'"
    },
    "interaction": [
        {
            "utterance": "What are the different types of mills ?",
            "sql": "select distinct mill.type"
        },
        {
            "utterance": "Which ones were built by American architects ?",
            "sql": "select distinct mill.type where architect.nationality = value"
        },
        {
            "utterance": "Include those built by Canadian architects as well .",
            "sql": "select distinct mill.type where architect.nationality = value or architect.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the ids and names of the architects who built at least 3 bridges ?",
        "sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of all architects ?",
            "sql": "select architect.id , architect.name"
        },
        {
            "utterance": "How many of those architects built less than 3 bridges ?",
            "sql": "select count ( * ) ( select architect.id , architect.name group_by architect.id having count ( * ) < value )"
        },
        {
            "utterance": "How many built 3 or more bridges ?",
            "sql": "select count ( * ) ( select architect.id , architect.name group_by architect.id having count ( * ) > = value )"
        },
        {
            "utterance": "Please list their ids and names .",
            "sql": "select architect.id , architect.name group_by architect.id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the id, name and nationality of the architect who built most mills?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many mills did each architect build ?",
            "sql": "select architect.name , count ( * ) group_by architect.id order_by count ( * )"
        },
        {
            "utterance": "Order by decreasing number of mills built .",
            "sql": "select architect.name , count ( * ) group_by architect.id order_by count ( * ) desc"
        },
        {
            "utterance": "Which architect built the most mills ?",
            "sql": "select architect.name group_by architect.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Please list his id and nationality as well .",
            "sql": "select architect.id , architect.name , architect.nationality group_by architect.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "List the names of architects who built 2 bridges .",
            "sql": "select architect.name group_by architect.id having count ( * ) = value"
        },
        {
            "utterance": "Include architects who built 1 mill .",
            "sql": "select architect.name group_by architect.id having count ( * ) = value union select architect.name group_by architect.id having count ( * ) = value"
        },
        {
            "utterance": "Include their ids and genders as well .",
            "sql": "select architect.id , architect.name , architect.gender group_by architect.id having count ( * ) = value union select architect.id , architect.name , architect.gender group_by architect.id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'"
    },
    "interaction": [
        {
            "utterance": "List the locations of all bridges .",
            "sql": "select distinct bridge.location"
        },
        {
            "utterance": "Where is the bridge named \u2018Kolob Arch\u2019 located ?",
            "sql": "select bridge.location where bridge.name = value"
        },
        {
            "utterance": "Include the location of the bridge named \u2018Rainbow Bridge\u2019 .",
            "sql": "select bridge.location where bridge.name = value or bridge.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 22,
    "final": {
        "utterance": "Which of the mill names contains the french word 'Moulin'?",
        "sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'"
    },
    "interaction": [
        {
            "utterance": "List all of the mill names .",
            "sql": "select mill.name"
        },
        {
            "utterance": "Just show mill names that contain the word \u2018Moulin\u2019 .",
            "sql": "select mill.name where mill.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80"
    },
    "interaction": [
        {
            "utterance": "Which architects have built bridges ?",
            "sql": "select distinct architect.name"
        },
        {
            "utterance": "Which of them have built bridges longer than 80 meters ?",
            "sql": "select distinct architect.name where bridge.length_meters > value"
        },
        {
            "utterance": "How many of those architects have also built mills ?",
            "sql": "select count ( distinct architect.name ) where bridge.length_meters > value"
        },
        {
            "utterance": "Please list the names of those mills .",
            "sql": "select distinct mill.name where bridge.length_meters > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the most common mill type, and how many are there?",
        "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the different mill types ?",
            "sql": "select distinct mill.type"
        },
        {
            "utterance": "Order by the number of mills of each type in decreasing order .",
            "sql": "select mill.type group_by mill.type order_by count ( mill.* ) desc"
        },
        {
            "utterance": "What is the most common mill type ?",
            "sql": "select mill.type group_by mill.type order_by count ( mill.* ) desc limit_value"
        },
        {
            "utterance": "How many mills of that type are there ?",
            "sql": "select mill.type , count ( mill.* ) group_by mill.type order_by count ( mill.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "architecture",
    "interaction_id": 25,
    "final": {
        "utterance": "How many architects haven't built a mill before year 1850?",
        "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );"
    },
    "interaction": [
        {
            "utterance": "Count the total number of architects .",
            "sql": "select count ( architect.* )"
        },
        {
            "utterance": "How many have built a mill ?",
            "sql": "select count ( architect.* ) where architect.id in ( select mill.architect_id )"
        },
        {
            "utterance": "How many did not build a mill before 1850 ?",
            "sql": "select count ( architect.* ) where architect.id not in ( select mill.architect_id where mill.built_year < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the total and average enrollment of all schools?",
        "sql": "SELECT sum(enrollment) ,  avg(enrollment) FROM school"
    },
    "interaction": [
        {
            "utterance": "What is the maximum enrollment of all schools ?",
            "sql": "select max ( school.enrollment )"
        },
        {
            "utterance": "What is the total enrollment of these schools ?",
            "sql": "select sum ( school.enrollment )"
        },
        {
            "utterance": "Please also show the average enrollment .",
            "sql": "select sum ( school.enrollment ) , avg ( school.enrollment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the mascots for schools with enrollments above the average?",
        "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
    },
    "interaction": [
        {
            "utterance": "How many different mascots are there ?",
            "sql": "select count ( distinct school.mascot )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select distinct school.mascot"
        },
        {
            "utterance": "Which of them are from schools with enrollments above the average ?",
            "sql": "select school.mascot where school.enrollment > ( select avg ( school.enrollment ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name of the school with the smallest enrollment.",
        "sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What school has the largest enrollment ?",
            "sql": "select school.school_name order_by school.enrollment desc limit_value"
        },
        {
            "utterance": "What is its mascot ?",
            "sql": "select school.mascot order_by school.enrollment desc limit_value"
        },
        {
            "utterance": "What school has the smallest enrollment ?",
            "sql": "select school.school_name order_by school.enrollment limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the average, maximum, minimum enrollment of all schools.",
        "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"
    },
    "interaction": [
        {
            "utterance": "What are the 3 largest enrollments of all schools ?",
            "sql": "select school.enrollment order_by school.enrollment desc limit_value"
        },
        {
            "utterance": "What is the largest enrollment ?",
            "sql": "select max ( school.enrollment )"
        },
        {
            "utterance": "Please also show the average and minimum enrollment",
            "sql": "select avg ( school.enrollment ) , max ( school.enrollment ) , min ( school.enrollment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 4,
    "final": {
        "utterance": "Show each county along with the number of schools and total enrollment in each county.",
        "sql": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county"
    },
    "interaction": [
        {
            "utterance": "How many different counties are there ?",
            "sql": "select count ( distinct school.county )"
        },
        {
            "utterance": "How many schools are there in each county ?",
            "sql": "select school.county , count ( school.* ) group_by school.county"
        },
        {
            "utterance": "Please also show the total enrollment in each county .",
            "sql": "select school.county , count ( school.* ) , sum ( school.enrollment ) group_by school.county"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 5,
    "final": {
        "utterance": "How many donors have endowment for school named \"Glenn\"?",
        "sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\""
    },
    "interaction": [
        {
            "utterance": "What is the location of the school named `` Glenn '' ?",
            "sql": "select school.location where school.school_name = value"
        },
        {
            "utterance": "What is the largest endowment amount for this school ?",
            "sql": "select max ( endowment.amount ) where school.school_name = value"
        },
        {
            "utterance": "How many donors have contributed to the endowment for this school ?",
            "sql": "select count ( distinct endowment.donator_name ) where school.school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 6,
    "final": {
        "utterance": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "sql": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"
    },
    "interaction": [
        {
            "utterance": "How many donators are there ?",
            "sql": "select count ( distinct endowment.donator_name )"
        },
        {
            "utterance": "What is the amount of endowment given by each donoator ?",
            "sql": "select endowment.donator_name , sum ( endowment.amount ) group_by endowment.donator_name"
        },
        {
            "utterance": "Please order them by the amount of endowment .",
            "sql": "select endowment.donator_name , sum ( endowment.amount ) group_by endowment.donator_name order_by sum ( endowment.amount ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of the schools without any endowment.",
        "sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)"
    },
    "interaction": [
        {
            "utterance": "How many schools have an endowment ?",
            "sql": "select count ( school.* ) where school.school_id in ( select endowment.school_id )"
        },
        {
            "utterance": "How many schools do not have an endowment ?",
            "sql": "select count ( school.* ) where school.school_id not in ( select endowment.school_id )"
        },
        {
            "utterance": "List the names of these schools .",
            "sql": "select school.school_name where school.school_id not in ( select endowment.school_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 8,
    "final": {
        "utterance": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "sql": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10"
    },
    "interaction": [
        {
            "utterance": "What is the average endowment amount ?",
            "sql": "select avg ( endowment.amount )"
        },
        {
            "utterance": "What is the minimum endowment amount ?",
            "sql": "select min ( endowment.amount )"
        },
        {
            "utterance": "How many endowments are there that have an amount smaller than or equal to 10 ?",
            "sql": "select count ( endowment.* ) where endowment.amount < = value"
        },
        {
            "utterance": "List all the names of schools with this kind of endowment .",
            "sql": "select school.school_name group_by endowment.school_id having sum ( endowment.amount ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of donors who donated to both school \"Glenn\" and \"Triton\"",
        "sql": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'"
    },
    "interaction": [
        {
            "utterance": "Who has donated to `` Glenn '' ?",
            "sql": "select endowment.donator_name where school.school_name = value"
        },
        {
            "utterance": "Who has donated to `` Triton '' ?",
            "sql": "select endowment.donator_name where school.school_name = value"
        },
        {
            "utterance": "Who has donated to both schools ?",
            "sql": "select endowment.donator_name where school.school_name = value intersect select endowment.donator_name where school.school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of all the donors except those whose donation amount less than 9.",
        "sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9"
    },
    "interaction": [
        {
            "utterance": "How many donors are there ?",
            "sql": "select count ( distinct endowment.donator_name )"
        },
        {
            "utterance": "How many donors are there that gave a donation amount less than 9 ?",
            "sql": "select count ( distinct endowment.donator_name ) where endowment.amount < value"
        },
        {
            "utterance": "Show the names of all the donors except these donors .",
            "sql": "select endowment.donator_name except select endowment.donator_name where endowment.amount < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 11,
    "final": {
        "utterance": "List the amount and donor name for the largest amount of donation.",
        "sql": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many endowments are there ?",
            "sql": "select count ( endowment.* )"
        },
        {
            "utterance": "What is the largest endowment amount ?",
            "sql": "select endowment.amount order_by endowment.amount desc limit_value"
        },
        {
            "utterance": "Please also show the donor name .",
            "sql": "select endowment.amount , endowment.donator_name order_by endowment.amount desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 12,
    "final": {
        "utterance": "How many budgets are above 3000 in year 2001 or before?",
        "sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"
    },
    "interaction": [
        {
            "utterance": "What is the average budget ?",
            "sql": "select avg ( budget.budgeted )"
        },
        {
            "utterance": "How many budgets are above 2000 ?",
            "sql": "select count ( budget.* ) where budget.budgeted > value"
        },
        {
            "utterance": "How about the number of budgets that are above 3000 ?",
            "sql": "select count ( budget.* ) where budget.budgeted > value"
        },
        {
            "utterance": "Which of them are in year 2001 or before ?",
            "sql": "select count ( budget.* ) where budget.budgeted > value and budget.year < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 13,
    "final": {
        "utterance": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "sql": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002"
    },
    "interaction": [
        {
            "utterance": "How many schools have a budget ?",
            "sql": "select count ( distinct budget.school_id )"
        },
        {
            "utterance": "How about the number in year 2002 or after ?",
            "sql": "select count ( distinct budget.school_id ) where budget.year > = value"
        },
        {
            "utterance": "Please show school name , its budgeted amount , and invested amount",
            "sql": "select school.school_name , budget.budgeted , budget.invested where budget.year > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the total budget amount for school \"Glenn\" in all years?",
        "sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'"
    },
    "interaction": [
        {
            "utterance": "What is the mascot of the school 'Glenn ' ?",
            "sql": "select school.mascot where school.school_name = value"
        },
        {
            "utterance": "Please show the budget record of school 'Glenn ' .",
            "sql": "select * where school.school_name = value"
        },
        {
            "utterance": "What is total budget amount for this school ?",
            "sql": "select sum ( budget.budgeted ) where school.school_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10"
    },
    "interaction": [
        {
            "utterance": "How many schools are there\uff1f",
            "sql": "select count ( school.* )"
        },
        {
            "utterance": "How many schools are there that have a total budget amount greater than 100 ?",
            "sql": "select count ( * ) ( select count ( distinct school.school_name ) group_by school.school_name having sum ( budget.budgeted ) > value )"
        },
        {
            "utterance": "How many schools are there have a total budget amount greater than 100 or a total endowment greater than 10 ?",
            "sql": "select count ( * ) ( select school.school_name group_by school.school_name having sum ( budget.budgeted ) > value or sum ( endowment.amount ) > value )"
        },
        {
            "utterance": "Show the names of these schools .",
            "sql": "select school.school_name group_by school.school_name having sum ( budget.budgeted ) > value or sum ( endowment.amount ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What is the average donation amount ?",
            "sql": "select avg ( endowment.amount )"
        },
        {
            "utterance": "How many donators does each school have ?",
            "sql": "select school.school_name , count ( * ) group_by endowment.school_id"
        },
        {
            "utterance": "Which schools have more than one donator ?",
            "sql": "select school.school_name , count ( * ) group_by endowment.school_id having count ( * ) > value"
        },
        {
            "utterance": "Among these schools , which schools have one donator with a donation amount above 8.5 ?",
            "sql": "select school.school_name where endowment.amount > value group_by endowment.school_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_finance",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "sql": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  <  8.5 GROUP BY school_id HAVING count(*)  >  1)"
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( school.* )"
        },
        {
            "utterance": "How many donations are there that are less than 8.5 ?",
            "sql": "select count ( endowment.* ) where endowment.amount < value"
        },
        {
            "utterance": "How many schools have more than one donator ?",
            "sql": "select count ( endowment.* ) ( select endowment.* group_by endowment.school_id having count ( endowment.* ) > value )"
        },
        {
            "utterance": "Among these schools , how many of them have more than one donator whose donation amount is less than 8.5 ?",
            "sql": "select count ( endowment.* ) ( select endowment.* where endowment.amount < value group_by endowment.school_id having count ( endowment.* ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum number of cities in all markets.",
        "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"
    },
    "interaction": [
        {
            "utterance": "What countries are there in the market ?",
            "sql": "select market.country"
        },
        {
            "utterance": "What about their number of cities ?",
            "sql": "select market.country , market.number_cities"
        },
        {
            "utterance": "Among those , show me the maximum and minimum .",
            "sql": "select max ( market.number_cities ) , min ( market.number_cities )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the distinct director of films with market estimation in the year of 1995.",
        "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995"
    },
    "interaction": [
        {
            "utterance": "How many film market estimations are there in record ?",
            "sql": "select count ( film_market_estimation.* )"
        },
        {
            "utterance": "Show me the ones in the year of 1995 .",
            "sql": "select film_market_estimation.* where film_market_estimation.year = value"
        },
        {
            "utterance": "Give me the distinct directors of films in those estimations .",
            "sql": "select distinct film.director where film_market_estimation.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
        "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000"
    },
    "interaction": [
        {
            "utterance": "Show me all different market ids in any film market estimation .",
            "sql": "select distinct film_market_estimation.market_id"
        },
        {
            "utterance": "Show me those with a low estimate above 10000 .",
            "sql": "select film_market_estimation.market_id group_by film_market_estimation.market_id having max ( film_market_estimation.low_estimate ) > value"
        },
        {
            "utterance": "What is the average number of cities of them ?",
            "sql": "select avg ( market.number_cities ) where film_market_estimation.low_estimate > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 3,
    "final": {
        "utterance": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC"
    },
    "interaction": [
        {
            "utterance": "How many film market estimations are there ?",
            "sql": "select count ( film_market_estimation.* )"
        },
        {
            "utterance": "Show me the year eash estimation was made .",
            "sql": "select film_market_estimation.year"
        },
        {
            "utterance": "What about those in the market Japan ?",
            "sql": "select film_market_estimation.year where market.country = value"
        },
        {
            "utterance": "List them in descending order .",
            "sql": "select film_market_estimation.year where market.country = value order_by film_market_estimation.year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 4,
    "final": {
        "utterance": "List the name of film studio that have the most number of films.",
        "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many films are there ?",
            "sql": "select count ( film.* )"
        },
        {
            "utterance": "Show me all film studios in record .",
            "sql": "select distinct film.studio"
        },
        {
            "utterance": "How many films does each of them have ?",
            "sql": "select film.studio , count ( film.* ) group_by film.studio"
        },
        {
            "utterance": "Show me the name of the studio that have the most .",
            "sql": "select film.studio group_by film.studio order_by count ( film.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 5,
    "final": {
        "utterance": "List the names of studios that have at least two films.",
        "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many films are there ?",
            "sql": "select count ( film.* )"
        },
        {
            "utterance": "Show me all film studios in record .",
            "sql": "select distinct film.studio"
        },
        {
            "utterance": "How many films does each of them have ?",
            "sql": "select film.studio , count ( film.* ) group_by film.studio"
        },
        {
            "utterance": "Show me the name of the studios that have at least two .",
            "sql": "select film.studio group_by film.studio having count ( film.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 6,
    "final": {
        "utterance": "List the title of films that do not have any market estimation.",
        "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
    },
    "interaction": [
        {
            "utterance": "How many film market estimations are there ?",
            "sql": "select count ( film_market_estimation.* )"
        },
        {
            "utterance": "Show me the id of films that are in one of those estimations .",
            "sql": "select distinct film_market_estimation.film_id"
        },
        {
            "utterance": "Show me the title of films that are not one of those .",
            "sql": "select film.title where film.film_id not in ( select film_market_estimation.film_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""
    },
    "interaction": [
        {
            "utterance": "Show me all film studios in record .",
            "sql": "select distinct film.studio"
        },
        {
            "utterance": "Show me all the directors in record .",
            "sql": "select distinct film.director"
        },
        {
            "utterance": "Which studios have produced films with Nicholas Mayer ?",
            "sql": "select film.studio where film.director = value"
        },
        {
            "utterance": "Among those studios , which of them also have films with Walter Hill ?",
            "sql": "select film.studio where film.director = value intersect select film.studio where film.director = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\""
    },
    "interaction": [
        {
            "utterance": "Show me all film studios in record .",
            "sql": "select distinct film.studio"
        },
        {
            "utterance": "Which ones contain the word `` Universal '' ?",
            "sql": "select distinct film.studio where film.studio like value"
        },
        {
            "utterance": "Show me the titles of their films along with their name .",
            "sql": "select film.title , film.studio where film.studio like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the studios that have not produced films with director \"Walter Hill\".",
        "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all directors .",
            "sql": "select film.director"
        },
        {
            "utterance": "Which studios did Walter Hill work with ?",
            "sql": "select film.studio where film.director = value"
        },
        {
            "utterance": "Show me studios that are not among them .",
            "sql": "select film.studio except select film.studio where film.director = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 10,
    "final": {
        "utterance": "List the studios which average gross is above 4500000.",
        "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000"
    },
    "interaction": [
        {
            "utterance": "Show me all film studios in record .",
            "sql": "select distinct film.studio"
        },
        {
            "utterance": "What are the maximum gross for their films ?",
            "sql": "select film.studio , max ( film.gross_in_dollar ) group_by film.studio"
        },
        {
            "utterance": "What about the average ?",
            "sql": "select film.studio , min ( film.gross_in_dollar ) group_by film.studio"
        },
        {
            "utterance": "Show me the name of studios that have average above 4500000 .",
            "sql": "select film.studio group_by film.studio having avg ( film.gross_in_dollar ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "film_rank",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the title of the film that has the highest high market estimation.",
        "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the title of all films that have market estimation .",
            "sql": "select distinct film.title"
        },
        {
            "utterance": "What are their high market estimations ?",
            "sql": "select film.title , film_market_estimation.high_estimate"
        },
        {
            "utterance": "Show me the film that is the highest of them .",
            "sql": "select film.title order_by film_market_estimation.high_estimate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 0,
    "final": {
        "utterance": "How many parties are there?",
        "sql": "SELECT count(*) FROM party"
    },
    "interaction": [
        {
            "utterance": "What are all the parties ?",
            "sql": "select party.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( party.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 1,
    "final": {
        "utterance": "List the themes of parties in ascending order of number of hosts.",
        "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    "interaction": [
        {
            "utterance": "What are all the parties ?",
            "sql": "select party.*"
        },
        {
            "utterance": "Order them by the number of hosts .",
            "sql": "select party.* order_by party.number_of_hosts asc"
        },
        {
            "utterance": "Only show the Party_Theme in that order .",
            "sql": "select party.party_theme order_by party.number_of_hosts asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the themes and locations of parties?",
        "sql": "SELECT Party_Theme , LOCATION FROM party"
    },
    "interaction": [
        {
            "utterance": "What are all the parties ?",
            "sql": "select party.*"
        },
        {
            "utterance": "what are their themes and locations ?",
            "sql": "select party.party_theme , party.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\""
    },
    "interaction": [
        {
            "utterance": "What are all the parties ?",
            "sql": "select party.*"
        },
        {
            "utterance": "What about those with theme `` Spring '' or `` Teqnology '' ?",
            "sql": "select party.* where party.party_theme = value or party.party_theme = value"
        },
        {
            "utterance": "Show their first year and last year .",
            "sql": "select party.first_year , party.last_year where party.party_theme = value or party.party_theme = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average number of hosts for parties?",
        "sql": "SELECT avg(Number_of_hosts) FROM party"
    },
    "interaction": [
        {
            "utterance": "What are all the parties ?",
            "sql": "select party.*"
        },
        {
            "utterance": "What are their number of hosts ?",
            "sql": "select party.number_of_hosts"
        },
        {
            "utterance": "Show the average of them .",
            "sql": "select avg ( party.number_of_hosts )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the location of the party with the most hosts?",
        "sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the parties ?",
            "sql": "select party.*"
        },
        {
            "utterance": "Order them by the number of hosts .",
            "sql": "select party.* order_by party.number_of_hosts"
        },
        {
            "utterance": "Show the location of the top one .",
            "sql": "select party.location order_by party.number_of_hosts desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 6,
    "final": {
        "utterance": "Show different nationalities along with the number of hosts of each nationality.",
        "sql": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality"
    },
    "interaction": [
        {
            "utterance": "Who are all the hosts ?",
            "sql": "select host.*"
        },
        {
            "utterance": "What are the different nationalities among them ?",
            "sql": "select host.nationality group_by host.nationality"
        },
        {
            "utterance": "Please also show the number of hosts along with each nationality .",
            "sql": "select host.nationality , count ( host.* ) group_by host.nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the most common nationality of hosts.",
        "sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are all the hosts ?",
            "sql": "select host.*"
        },
        {
            "utterance": "What are the different nationalities among them ?",
            "sql": "select host.nationality group_by host.nationality"
        },
        {
            "utterance": "Order them by the number of host in each nationality .",
            "sql": "select host.nationality group_by host.nationality order_by count ( host.* )"
        },
        {
            "utterance": "Show the top one .",
            "sql": "select host.nationality group_by host.nationality order_by count ( host.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
    },
    "interaction": [
        {
            "utterance": "Who are all the hosts ?",
            "sql": "select host.*"
        },
        {
            "utterance": "Show hosts who are older than 45 .",
            "sql": "select host.* where host.age > value"
        },
        {
            "utterance": "Show hosts who are younger than 35 .",
            "sql": "select host.* where host.age < value"
        },
        {
            "utterance": "Show the nations that have hosts from above two results at the same time .",
            "sql": "select host.nationality where host.age > value intersect select host.nationality where host.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the themes of parties and the names of the party hosts.",
        "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    "interaction": [
        {
            "utterance": "Who are all the party hosts ?",
            "sql": "select party_host.*"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select host.name"
        },
        {
            "utterance": "Show the themes of parties they host along with their name .",
            "sql": "select party.party_theme , host.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
    },
    "interaction": [
        {
            "utterance": "Who are all the party hosts ?",
            "sql": "select party_host.*"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select host.name"
        },
        {
            "utterance": "Show the locations of parties they host along with their names .",
            "sql": "select party.location , host.name"
        },
        {
            "utterance": "Order them by the age of the host .",
            "sql": "select party.location , host.name order_by host.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the locations of parties with hosts older than 50.",
        "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
    },
    "interaction": [
        {
            "utterance": "Who are all the party hosts ?",
            "sql": "select party_host.*"
        },
        {
            "utterance": "Show the name of those who are order than 50 .",
            "sql": "select host.name where host.age > value"
        },
        {
            "utterance": "What about the locations of parties they host ?",
            "sql": "select party.location where host.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the host names for parties with number of hosts greater than 20.",
        "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"
    },
    "interaction": [
        {
            "utterance": "Show me all parties .",
            "sql": "select party.*"
        },
        {
            "utterance": "Show those with more than 20 hosts .",
            "sql": "select party.* where party.number_of_hosts > value"
        },
        {
            "utterance": "What are the host names for those parties ?",
            "sql": "select host.name where party.number_of_hosts > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_host",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the name and the nationality of the oldest host.",
        "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are all the hosts ?",
            "sql": "select host.*"
        },
        {
            "utterance": "Who is the oldest one ?",
            "sql": "select host.* order_by host.age desc limit_value"
        },
        {
            "utterance": "Show the name and the nationality of that host .",
            "sql": "select host.name , host.nationality order_by host.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the ships .",
            "sql": "select ship.name"
        },
        {
            "utterance": "Which of them belong to United states ?",
            "sql": "select ship.name where ship.nationality = value"
        },
        {
            "utterance": "Include those that belong to United Kingdom .",
            "sql": "select ship.name where ship.nationality = value or ship.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the ship with the largest tonnage?",
        "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the ships .",
            "sql": "select ship.name"
        },
        {
            "utterance": "Which one has the largest tonnage ?",
            "sql": "select ship.name order_by ship.tonnage desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the most common type of ships.",
        "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the types of ships ?",
            "sql": "select ship.type"
        },
        {
            "utterance": "Which type is the most common ?",
            "sql": "select ship.type group_by ship.type order_by count ( ship.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 3,
    "final": {
        "utterance": "List the nations that have more than two ships.",
        "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What nations are there ?",
            "sql": "select ship.nationality"
        },
        {
            "utterance": "How many ships are there ?",
            "sql": "select count ( ship.* )"
        },
        {
            "utterance": "How many ships does each nation have ?",
            "sql": "select ship.nationality , count ( ship.* ) group_by ship.nationality"
        },
        {
            "utterance": "Show me nations that have more than two ships .",
            "sql": "select ship.nationality group_by ship.nationality having count ( ship.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 4,
    "final": {
        "utterance": "Show names of ships involved in a mission launched after 1928.",
        "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928"
    },
    "interaction": [
        {
            "utterance": "What are the name of all the ships ?",
            "sql": "select ship.name"
        },
        {
            "utterance": "Give me missions that were launched after 1928 .",
            "sql": "select mission.* where mission.launched_year > value"
        },
        {
            "utterance": "Which ships were involved in any of those ?",
            "sql": "select ship.name where mission.launched_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\""
    },
    "interaction": [
        {
            "utterance": "How many ships are there ?",
            "sql": "select count ( ship.* )"
        },
        {
            "utterance": "Which of them are from United States ?",
            "sql": "select ship.* where ship.nationality = value"
        },
        {
            "utterance": "Show me the distinct fate of missions that involve any of those .",
            "sql": "select distinct mission.fate where ship.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "ship_mission",
    "interaction_id": 6,
    "final": {
        "utterance": "List the name of ships that are not involved in any mission",
        "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"
    },
    "interaction": [
        {
            "utterance": "What are all the missions ?",
            "sql": "select mission.*"
        },
        {
            "utterance": "Which ship is involved in any of them ?",
            "sql": "select mission.ship_id"
        },
        {
            "utterance": "Give me the name of ships which are not among those .",
            "sql": "select ship.name where ship.ship_id not in ( select mission.ship_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of companies in the banking or retailing industry?",
        "sql": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\""
    },
    "interaction": [
        {
            "utterance": "Tell me the industry of JPMorgan Chase .",
            "sql": "select company.industry where company.name = value"
        },
        {
            "utterance": "How about its market value ?",
            "sql": "select company.market_value_in_billion where company.name = value"
        },
        {
            "utterance": "Tell me the names of companies in the banking or retailing industry .",
            "sql": "select company.name where company.industry = value or company.industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the maximum and minimum market value of companies?",
        "sql": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company"
    },
    "interaction": [
        {
            "utterance": "Tell me the headquarters of the company HSBC .",
            "sql": "select company.headquarters where company.name = value"
        },
        {
            "utterance": "What is its market value ?",
            "sql": "select company.market_value_in_billion where company.name = value"
        },
        {
            "utterance": "What is the maximum and minimum market value of companies .",
            "sql": "select max ( company.market_value_in_billion ) , min ( company.market_value_in_billion )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the headquarter of the company with the largest sales?",
        "sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the sales of HSBC .",
            "sql": "select company.sales_in_billion where company.name = value"
        },
        {
            "utterance": "How about that of PetroChina ?",
            "sql": "select company.sales_in_billion where company.name = value"
        },
        {
            "utterance": "What is the headquarters of the company with the largest sales ?",
            "sql": "select company.headquarters order_by company.sales_in_billion desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the most common headquarter for companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the profits of the company BP .",
            "sql": "select company.profits_in_billion where company.name = value"
        },
        {
            "utterance": "How about its headquarters ?",
            "sql": "select company.headquarters where company.name = value"
        },
        {
            "utterance": "What is the most common headquarters for companies ?",
            "sql": "select company.headquarters group_by company.headquarters order_by count ( company.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the headquarters that have at least two companies.",
        "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me ExxonMobil 's industry .",
            "sql": "select company.industry where company.name = value"
        },
        {
            "utterance": "What is its headquarters ?",
            "sql": "select company.headquarters where company.name = value"
        },
        {
            "utterance": "Tell me the headquarters that have at least two companies .",
            "sql": "select company.headquarters group_by company.headquarters having count ( company.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "sql": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\""
    },
    "interaction": [
        {
            "utterance": "Tell me the companies in the banking industry .",
            "sql": "select company.name where company.industry = value"
        },
        {
            "utterance": "Where are their headquarters ?",
            "sql": "select company.headquarters where company.industry = value"
        },
        {
            "utterance": "Tell me the headquarters that have both companies in the banking industry and companies in the oil and gas industry .",
            "sql": "select company.headquarters where company.industry = value intersect select company.headquarters where company.industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of companies and of employees.",
        "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID"
    },
    "interaction": [
        {
            "utterance": "Tell me Brad Lohaus 's age .",
            "sql": "select people.age where people.name = value"
        },
        {
            "utterance": "Where does he work ?",
            "sql": "select company.name where people.name = value"
        },
        {
            "utterance": "How about all the names of the companies and of the employees ?",
            "sql": "select company.name , people.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working"
    },
    "interaction": [
        {
            "utterance": "Tell me the people working in HSBC .",
            "sql": "select people.name where company.name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where company.name = value"
        },
        {
            "utterance": "What are the names of the companies and that of the employees in descending order of number of years working for that employee ?",
            "sql": "select company.name , people.name order_by employment.year_working"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of employees that work for companies with sales bigger than 200.",
        "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200"
    },
    "interaction": [
        {
            "utterance": "Tell me the company Tim Naegeli works in .",
            "sql": "select company.name where people.name = value"
        },
        {
            "utterance": "What are this company 's sales numbers ?",
            "sql": "select company.sales_in_billion where people.name = value"
        },
        {
            "utterance": "Tell me the names of the employees that work for the companies with sales bigger than 200 .",
            "sql": "select people.name where company.sales_in_billion > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of companies and the number of employees they have",
        "sql": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name"
    },
    "interaction": [
        {
            "utterance": "What are PetroChina 's assets ?",
            "sql": "select company.assets_in_billion where company.name = value"
        },
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( * ) where company.name = value"
        },
        {
            "utterance": "Tell me the names of the companies and the number of employees they have .",
            "sql": "select company.name , count ( * ) group_by company.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "company_employee",
    "interaction_id": 10,
    "final": {
        "utterance": "List the names of people that are not employed by any company",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)"
    },
    "interaction": [
        {
            "utterance": "How old is David Butler ?",
            "sql": "select people.age where people.name = value"
        },
        {
            "utterance": "Where does he work ?",
            "sql": "select company.name where people.name = value"
        },
        {
            "utterance": "Tell me the names of people that are not employed by any company .",
            "sql": "select people.name where people.people_id not in ( select employment.people_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50"
    },
    "interaction": [
        {
            "utterance": "Show the amount of transactions whose type code is `` PUR ''",
            "sql": "select transactions.amount_of_transaction where transactions.transaction_type_code = value"
        },
        {
            "utterance": "Show average amount of transactions whose type code is `` PUR ''",
            "sql": "select avg ( transactions.amount_of_transaction ) where transactions.transaction_type_code = value"
        },
        {
            "utterance": "Show the minimum amount of transactions whose type code is `` PUR '' and whose share count is bigger than 50 .",
            "sql": "select min ( transactions.amount_of_transaction ) where transactions.transaction_type_code = value and transactions.share_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000"
    },
    "interaction": [
        {
            "utterance": "Show the dates of transactions if the share count is bigger than 100 .",
            "sql": "select transactions.date_of_transaction where transactions.share_count > value"
        },
        {
            "utterance": "Show the dates of transactions if the amount is bigger than 1000 .",
            "sql": "select transactions.date_of_transaction where transactions.amount_of_transaction > value"
        },
        {
            "utterance": "What are the dates of the transactions in these two groups ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count > value or transactions.amount_of_transaction > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10"
    },
    "interaction": [
        {
            "utterance": "Show the transaction type description if the share count is smaller than 10 .",
            "sql": "select ref_transaction_types.transaction_type_description where transactions.share_count < value"
        },
        {
            "utterance": "Please also show their transaction dates .",
            "sql": "select ref_transaction_types.transaction_type_description , transactions.date_of_transaction where transactions.share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 3,
    "final": {
        "utterance": "Show details of all investors if they make any transaction with share count greater than 100.",
        "sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100"
    },
    "interaction": [
        {
            "utterance": "Show the average share count of all investors .",
            "sql": "select avg ( transactions.share_count )"
        },
        {
            "utterance": "Count the number of investors who make any transaction with share count greater than 100 .",
            "sql": "select count ( * ) where transactions.share_count > value"
        },
        {
            "utterance": "Show their details .",
            "sql": "select investors.investor_details where transactions.share_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 4,
    "final": {
        "utterance": "Return the lot details of lots that belong to investors with details \"l\"?",
        "sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\""
    },
    "interaction": [
        {
            "utterance": "Show the lot details of all lots .",
            "sql": "select lots.lot_details"
        },
        {
            "utterance": "Show the ids of investors with details `` l '' .",
            "sql": "select investors.investor_id where investors.investor_details = value"
        },
        {
            "utterance": "Return the lot details of lots that belong to investors with details `` l '' .",
            "sql": "select lots.lot_details where investors.investor_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the purchase details of transactions with amount bigger than 10000?",
        "sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000"
    },
    "interaction": [
        {
            "utterance": "What is the average transaction amount ?",
            "sql": "select avg ( transactions.amount_of_transaction )"
        },
        {
            "utterance": "How many transactions have an amount bigger than 10000 ?",
            "sql": "select count ( transactions.amount_of_transaction ) where transactions.amount_of_transaction > value"
        },
        {
            "utterance": "Please show the purchase details of these transactions .",
            "sql": "select purchases.purchase_details where transactions.amount_of_transaction > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000"
    },
    "interaction": [
        {
            "utterance": "What is the minimum transaction amount ?",
            "sql": "select min ( transactions.amount_of_transaction )"
        },
        {
            "utterance": "How many transactions have an amount smaller than 3000 ?",
            "sql": "select count ( transactions.amount_of_transaction ) where transactions.amount_of_transaction < value"
        },
        {
            "utterance": "Please show the sale details and dates of transactions with amount smaller than 3000 .",
            "sql": "select sales.sales_details , transactions.date_of_transaction where transactions.amount_of_transaction < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50"
    },
    "interaction": [
        {
            "utterance": "What is the average share amount of the transactions ?",
            "sql": "select avg ( transactions.share_count )"
        },
        {
            "utterance": "How many transactions have a share count smaller than 50 ?",
            "sql": "select count ( * ) where transactions.share_count < value"
        },
        {
            "utterance": "What are the lot details of lots associated with transactions with share count smaller than 50 ?",
            "sql": "select lots.lot_details where transactions.share_count < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\""
    },
    "interaction": [
        {
            "utterance": "Show the transaction id of transactions whose share count is bigger than 100 .",
            "sql": "select transactions.transaction_id where transactions.share_count > value"
        },
        {
            "utterance": "How many transactions whose share count is bigger than 100 and whose type code is `` PUR '' ? .",
            "sql": "select count ( transactions.transaction_id ) where transactions.share_count > value and transactions.transaction_type_code = value"
        },
        {
            "utterance": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is `` PUR '' ?",
            "sql": "select lots.lot_details where transactions.share_count > value and transactions.transaction_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the maximum and minimum share count of different transaction types.",
        "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
    },
    "interaction": [
        {
            "utterance": "How many different transaction types are there ?",
            "sql": "select count ( distinct transactions.transaction_type_code )"
        },
        {
            "utterance": "What is the average share count of different transaction types ?",
            "sql": "select transactions.transaction_type_code , avg ( transactions.share_count ) group_by transactions.transaction_type_code"
        },
        {
            "utterance": "Show the maximum and minimum share count of different transaction types .",
            "sql": "select transactions.transaction_type_code , max ( transactions.share_count ) , min ( transactions.share_count ) group_by transactions.transaction_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the average share count of transactions made by each investor, ordered by average share count.",
        "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)"
    },
    "interaction": [
        {
            "utterance": "What is the maximum share count of transactions ?",
            "sql": "select max ( transactions.share_count )"
        },
        {
            "utterance": "What is the average share count of transactions made by each investor ?",
            "sql": "select transactions.investor_id , avg ( transactions.share_count ) group_by transactions.investor_id"
        },
        {
            "utterance": "Please order them by average share count .",
            "sql": "select transactions.investor_id , avg ( transactions.share_count ) group_by transactions.investor_id order_by avg ( transactions.share_count )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the average amount of transactions for different lots.",
        "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id"
    },
    "interaction": [
        {
            "utterance": "Show the max amount of transactions for different lots .",
            "sql": "select max ( transactions.amount_of_transaction )"
        },
        {
            "utterance": "What is the average amount of transactions for all lots ?",
            "sql": "select avg ( transactions.amount_of_transaction )"
        },
        {
            "utterance": "What is the average amount of transactions for the lot with id 1 ?",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) where transactions_lots.lot_id = value group_by transactions_lots.lot_id"
        },
        {
            "utterance": "Show the average amount of transactions for all different lots .",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) group_by transactions_lots.lot_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)"
    },
    "interaction": [
        {
            "utterance": "What is the average amount of transactions for the lot with id 3 ?",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) where transactions_lots.lot_id = value group_by transactions_lots.lot_id"
        },
        {
            "utterance": "Show the average amount of transactions for all different lots .",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) group_by transactions_lots.lot_id"
        },
        {
            "utterance": "Could you please order the results by the average amount of transactions ?",
            "sql": "select transactions_lots.lot_id , avg ( transactions.amount_of_transaction ) group_by transactions_lots.lot_id order_by avg ( transactions.amount_of_transaction )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id"
    },
    "interaction": [
        {
            "utterance": "How many transactions are there with transaction type code `` PUR '' ?",
            "sql": "select count ( transactions.* ) where transactions.transaction_type_code = value"
        },
        {
            "utterance": "Show the number of transactions with transaction type code `` SALE '' .",
            "sql": "select count ( transactions.* ) where transactions.transaction_type_code = value"
        },
        {
            "utterance": "For these transactions , show the number made by each investor .",
            "sql": "select transactions.investor_id , count ( transactions.* ) where transactions.transaction_type_code = value group_by transactions.investor_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the transaction type code that occurs the fewest times.",
        "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the transaction type code that occurs the most times .",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) desc limit_value"
        },
        {
            "utterance": "Show the number of occurances of each transaction type code .",
            "sql": "select transactions.transaction_type_code , count ( transactions.* ) group_by transactions.transaction_type_code"
        },
        {
            "utterance": "Could you please order the transaction type codes by their number of occurances ?",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) asc"
        },
        {
            "utterance": "Show the first one .",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the transaction type code that occurs the most frequently.",
        "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the transaction type code that occurs the fewest times .",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) asc limit_value"
        },
        {
            "utterance": "Show the number of occurances of each transaction type code .",
            "sql": "select transactions.transaction_type_code , count ( transactions.* ) group_by transactions.transaction_type_code"
        },
        {
            "utterance": "Which transaction occurs the most frequently ?",
            "sql": "select transactions.* group_by transactions.transaction_type_code order_by count ( transactions.* ) desc limit_value"
        },
        {
            "utterance": "Show its transaction type code .",
            "sql": "select transactions.transaction_type_code group_by transactions.transaction_type_code order_by count ( transactions.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the description of the transaction type that occurs most frequently.",
        "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Please show the description of the transaction type `` SALE '' .",
            "sql": "select ref_transaction_types.transaction_type_description where ref_transaction_types.transaction_type_code = value"
        },
        {
            "utterance": "How many transaction types are there ?",
            "sql": "select count ( ref_transaction_types.* )"
        },
        {
            "utterance": "Among these transactions , which one occurs most frequently ?",
            "sql": "select ref_transaction_types.transaction_type_code group_by ref_transaction_types.transaction_type_code order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show its description .",
            "sql": "select ref_transaction_types.transaction_type_description group_by ref_transaction_types.transaction_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the id and details of the investor that has the largest number of transactions.",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many investors are there ?",
            "sql": "select count ( investors.* )"
        },
        {
            "utterance": "How many of them have transactions ?",
            "sql": "select count ( distinct investors.investor_id )"
        },
        {
            "utterance": "Could you order these investors according to their number of transactions in decreasing order ?",
            "sql": "select * group_by transactions.investor_id order_by count ( * ) desc"
        },
        {
            "utterance": "Show the id and details of the first investor .",
            "sql": "select transactions.investor_id , investors.investor_details group_by transactions.investor_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the id and details for the investors who have the top 3 number of transactions.",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "How many transactions are there ?",
            "sql": "select count ( transactions.* )"
        },
        {
            "utterance": "Show the id and details for the investor who has the most transactions .",
            "sql": "select transactions.investor_id , investors.investor_details group_by transactions.investor_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about investors with top 3 number of transactions ?",
            "sql": "select transactions.investor_id , investors.investor_details group_by transactions.investor_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the ids of the investors who have at least two transactions.",
        "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which investors have some transactions ?",
            "sql": "select *"
        },
        {
            "utterance": "How many of these investors have at least three transactions ?",
            "sql": "select count ( * ) ( select count ( * ) group_by transactions.investor_id having count ( * ) > = value )"
        },
        {
            "utterance": "Next , how many of these investors have at least two transactions ?",
            "sql": "select count ( * ) ( select count ( * ) group_by transactions.investor_id having count ( * ) > = value )"
        },
        {
            "utterance": "Please give their ids .",
            "sql": "select transactions.investor_id group_by transactions.investor_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which investors have some transactions ?",
            "sql": "select *"
        },
        {
            "utterance": "How many of these investors are there ?",
            "sql": "select count ( distinct investors.investor_id )"
        },
        {
            "utterance": "How about those who have at least two transactions with type code `` SALE '' ?",
            "sql": "select count ( * ) ( select count ( * ) where transactions.transaction_type_code = value group_by transactions.investor_id having count ( * ) > = value )"
        },
        {
            "utterance": "OK\uff0cgive me their ids and details .",
            "sql": "select transactions.investor_id , investors.investor_details where transactions.transaction_type_code = value group_by transactions.investor_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100"
    },
    "interaction": [
        {
            "utterance": "How many transactions are there ?",
            "sql": "select count ( transactions.date_of_transaction )"
        },
        {
            "utterance": "Among these transactions , how many of them have a share count of at least 100 or an amount bigger than 100 ?",
            "sql": "select count ( transactions.date_of_transaction ) where transactions.share_count > = value or transactions.amount_of_transaction > = value"
        },
        {
            "utterance": "Can you please show their dates ?",
            "sql": "select transactions.date_of_transaction where transactions.share_count > = value or transactions.amount_of_transaction > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_share_transactions",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the details of all sales and purchases?",
        "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases"
    },
    "interaction": [
        {
            "utterance": "What are the details of all sales ?",
            "sql": "select sales.sales_details"
        },
        {
            "utterance": "What are the details of all purchases ?",
            "sql": "select purchases.purchase_details"
        },
        {
            "utterance": "Could you please combine them ?",
            "sql": "select sales.sales_details union select purchases.purchase_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of journalists FROM \"England\" or \"Wales\".",
        "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\""
    },
    "interaction": [
        {
            "utterance": "Show me many how many journalists are FROM the nation England ?",
            "sql": "select count ( journalist.* ) where journalist.nationality = value"
        },
        {
            "utterance": "How about Wales ?",
            "sql": "select count ( journalist.* ) where journalist.nationality = value"
        },
        {
            "utterance": "How many are FROM England or Wales ?",
            "sql": "select count ( journalist.* ) where journalist.nationality = value or journalist.nationality = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select journalist.name where journalist.nationality = value or journalist.nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the nationality of the journalist with the largest number of years working?",
        "sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average number of years a journalist works ?",
            "sql": "select avg ( journalist.years_working )"
        },
        {
            "utterance": "What is the greatest ?",
            "sql": "select journalist.years_working order_by journalist.years_working desc limit_value"
        },
        {
            "utterance": "Who is the journalist that has worked this long ?",
            "sql": "select journalist.name order_by journalist.years_working desc limit_value"
        },
        {
            "utterance": "Show me just her nationality ?",
            "sql": "select journalist.nationality order_by journalist.years_working desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the most common nationality for journalists.",
        "sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me every journalists name and nationality .",
            "sql": "select journalist.name , journalist.nationality"
        },
        {
            "utterance": "How many different nationalities are there ?",
            "sql": "select count ( distinct journalist.nationality )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select distinct journalist.nationality"
        },
        {
            "utterance": "Of which one , are the most journalist ?",
            "sql": "select journalist.nationality group_by journalist.nationality order_by count ( journalist.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "sql": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3"
    },
    "interaction": [
        {
            "utterance": "Which journalists have been working for less than 3 years ?",
            "sql": "select journalist.* where journalist.years_working < value"
        },
        {
            "utterance": "Also add those that have been working for over 10 !",
            "sql": "select journalist.* where journalist.years_working < value or journalist.years_working > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select journalist.name where journalist.years_working < value or journalist.years_working > value"
        },
        {
            "utterance": "Actually , list the different nations they are FROM !",
            "sql": "select journalist.nationality where journalist.years_working > value intersect select journalist.nationality where journalist.years_working < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of journalists and the dates of the events they reported.",
        "sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID"
    },
    "interaction": [
        {
            "utterance": "What are names of all the different journalists that have reported on at least one event ?",
            "sql": "select journalist.name group_by news_report.journalist_id"
        },
        {
            "utterance": "For each , show the names of the events they reported on .",
            "sql": "select journalist.name , event.name"
        },
        {
            "utterance": "And also the venues and dates .",
            "sql": "select journalist.name , event.name , event.venue , event.date"
        },
        {
            "utterance": "Now , show just the journalist names and dates of the events !",
            "sql": "select journalist.name , event.date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of journalists and the names of the events they reported in ascending order",
        "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
    },
    "interaction": [
        {
            "utterance": "What are all the event names ?",
            "sql": "select event.name"
        },
        {
            "utterance": "What were the event attendances for each one ?",
            "sql": "select event.name , event.event_attendance"
        },
        {
            "utterance": "Include the names of the journalist working on each event !",
            "sql": "select journalist.name , event.name , event.event_attendance"
        },
        {
            "utterance": "Show me just the names of the journalists and the event names in ascending order !",
            "sql": "select journalist.name , event.name order_by event.event_attendance asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of journalists and the number of events they reported.",
        "sql": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name"
    },
    "interaction": [
        {
            "utterance": "Shoe me the names of all the journalists .",
            "sql": "select journalist.name"
        },
        {
            "utterance": "Now include the names of all the events they each worked on .",
            "sql": "select journalist.name , event.name"
        },
        {
            "utterance": "How many did they each do ?",
            "sql": "select journalist.name , count ( * ) group_by journalist.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of journalists that have reported more than one event.",
        "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show me all the journalist information for each journalist !",
            "sql": "select journalist.*"
        },
        {
            "utterance": "What events have they each reported on .",
            "sql": "select *"
        },
        {
            "utterance": "Count how many each journalist has worked on .",
            "sql": "select journalist.name , count ( * ) group_by journalist.name"
        },
        {
            "utterance": "Show me just the names of the journalists that have reported on more than 1 !",
            "sql": "select journalist.name group_by journalist.name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of journalists who have not reported any event.",
        "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)"
    },
    "interaction": [
        {
            "utterance": "How many events have each journalists reported on ?",
            "sql": "select journalist.name , count ( * ) group_by journalist.name"
        },
        {
            "utterance": "How many journalists have 0 events !",
            "sql": "select count ( journalist.* ) where journalist.journalist_id not in ( select news_report.journalist_id )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select journalist.name where journalist.journalist_id not in ( select news_report.journalist_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 9,
    "final": {
        "utterance": "what are the average and maximum attendances of all events?",
        "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event"
    },
    "interaction": [
        {
            "utterance": "List all the names of the events !",
            "sql": "select event.name"
        },
        {
            "utterance": "Show many attended each one !",
            "sql": "select event.name , event.event_attendance"
        },
        {
            "utterance": "What is the average event _attendance ?",
            "sql": "select avg ( event.event_attendance )"
        },
        {
            "utterance": "Also show the max !",
            "sql": "select avg ( event.event_attendance ) , max ( event.event_attendance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "news_report",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the average age and experience working length of journalists working on different role type.",
        "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    "interaction": [
        {
            "utterance": "What are the different work_types of news reporting ?",
            "sql": "select distinct news_report.work_type"
        },
        {
            "utterance": "How many reporters belong to each type ?",
            "sql": "select count ( * ) , news_report.work_type group_by news_report.work_type"
        },
        {
            "utterance": "What is the average age of the reporters for each type ?",
            "sql": "select avg ( journalist.age ) , news_report.work_type group_by news_report.work_type"
        },
        {
            "utterance": "Also show the average number of years working for each type ?",
            "sql": "select avg ( journalist.age ) , avg ( journalist.years_working ) , news_report.work_type group_by news_report.work_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all region code and region name sorted by the codes.",
        "sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code;"
    },
    "interaction": [
        {
            "utterance": "What are the names of the regions ?",
            "sql": "select region.region_name"
        },
        {
            "utterance": "Show all region code and region name sorted by the region name alphabetically .",
            "sql": "select region.region_code , region.region_name order_by region.region_name asc"
        },
        {
            "utterance": "Order the result by the codes .",
            "sql": "select region.region_code , region.region_name order_by region.region_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 1,
    "final": {
        "utterance": "List all region names in alphabetical order.",
        "sql": "SELECT region_name FROM region ORDER BY region_name;"
    },
    "interaction": [
        {
            "utterance": "How about their names of each region ?",
            "sql": "select region.region_name"
        },
        {
            "utterance": "Order the result in alphabetical order .",
            "sql": "select region.region_name order_by region.region_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 2,
    "final": {
        "utterance": "Show names for all regions except for Denmark.",
        "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark';"
    },
    "interaction": [
        {
            "utterance": "Can you list the id of region named Denmark .",
            "sql": "select region.region_id where region.region_name = value"
        },
        {
            "utterance": "How about the region code for all regions except for Denmark .",
            "sql": "select region.region_code where region.region_name != value"
        },
        {
            "utterance": "List their names .",
            "sql": "select region.region_name where region.region_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 3,
    "final": {
        "utterance": "How many storms had death records?",
        "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0;"
    },
    "interaction": [
        {
            "utterance": "What 's the number of deaths for each storm ?",
            "sql": "select storm.number_deaths"
        },
        {
            "utterance": "Show the average number of deaths .",
            "sql": "select avg ( storm.number_deaths )"
        },
        {
            "utterance": "How many storms had death records ?",
            "sql": "select count ( storm.* ) where storm.number_deaths > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 4,
    "final": {
        "utterance": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "sql": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1;"
    },
    "interaction": [
        {
            "utterance": "Show me the name of the storm where no people died .",
            "sql": "select storm.name where storm.number_deaths = value"
        },
        {
            "utterance": "How about the number of deaths for the rest of the storms ?",
            "sql": "select storm.number_deaths where storm.number_deaths > value"
        },
        {
            "utterance": "List their names and dates active as well .",
            "sql": "select storm.name , storm.dates_active , storm.number_deaths where storm.number_deaths > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000;"
    },
    "interaction": [
        {
            "utterance": "Show me in the maximum damage for storms with max speed no more than 1000 .",
            "sql": "select max ( storm.damage_millions_usd ) where storm.max_speed < = value"
        },
        {
            "utterance": "How about those with max speed higher than 1000 ?",
            "sql": "select max ( storm.damage_millions_usd ) where storm.max_speed > value"
        },
        {
            "utterance": "Show the average and maximum damage for all storms with max speed higher than 1000 .",
            "sql": "select avg ( storm.damage_millions_usd ) , max ( storm.damage_millions_usd ) where storm.max_speed > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
        "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm);"
    },
    "interaction": [
        {
            "utterance": "What 's the average max speed for all storms ?",
            "sql": "select avg ( storm.max_speed )"
        },
        {
            "utterance": "What are the number of deaths and damage for all storms with a max speed greater than the average ?",
            "sql": "select storm.number_deaths , storm.damage_millions_usd where storm.max_speed > ( select avg ( storm.max_speed ) )"
        },
        {
            "utterance": "How about the total death and total damage ?",
            "sql": "select sum ( storm.number_deaths ) , sum ( storm.damage_millions_usd ) where storm.max_speed > ( select avg ( storm.max_speed ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 7,
    "final": {
        "utterance": "List name and damage for all storms in a descending order of max speed.",
        "sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC;"
    },
    "interaction": [
        {
            "utterance": "What 's the date active for all storms ?",
            "sql": "select storm.dates_active"
        },
        {
            "utterance": "How about the name and damage of all storms ?",
            "sql": "select storm.name , storm.damage_millions_usd"
        },
        {
            "utterance": "Order the result by a descending order of max speed .",
            "sql": "select storm.name , storm.damage_millions_usd order_by storm.max_speed desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 8,
    "final": {
        "utterance": "How many regions are affected?",
        "sql": "SELECT count(DISTINCT region_id) FROM affected_region"
    },
    "interaction": [
        {
            "utterance": "How many distinct affected regions are there ?",
            "sql": "select count ( distinct affected_region.region_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name for regions not affected.",
        "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region);"
    },
    "interaction": [
        {
            "utterance": "What are the names of the regions affected ?",
            "sql": "select region.region_name where region.region_id in ( select affected_region.region_id )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( region.region_name ) where region.region_id in ( select affected_region.region_id )"
        },
        {
            "utterance": "How about the names of regions not affected ?",
            "sql": "select region.region_name where region.region_id not in ( select affected_region.region_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the name for regions and the number of storms for each region.",
        "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id;"
    },
    "interaction": [
        {
            "utterance": "Show me the storm ids for each region .",
            "sql": "select affected_region.storm_id group_by region.region_id"
        },
        {
            "utterance": "What 's the maximum number of storms of one region ?",
            "sql": "select count ( affected_region.storm_id ) group_by region.region_id order_by count ( affected_region.storm_id ) desc limit_value"
        },
        {
            "utterance": "Show the region names and the number of storms for each region .",
            "sql": "select region.region_name , count ( * ) group_by region.region_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 11,
    "final": {
        "utterance": "List the name for storms and the number of affected regions for each storm.",
        "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id;"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all storms that affect more than 1 regions ?",
            "sql": "select storm.name group_by storm.storm_id having count ( * ) > value"
        },
        {
            "utterance": "List the name for storms and the number of affected regions for each storm .",
            "sql": "select storm.name , count ( * ) group_by storm.storm_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the storm name and max speed which affected the greatest number of regions?",
        "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the name for storms and the number of affected regions for each storm .",
            "sql": "select storm.name , count ( * ) group_by storm.storm_id"
        },
        {
            "utterance": "Which storm affected the greatest number of regions ?",
            "sql": "select storm.name group_by storm.storm_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show its max speed in addition to its name .",
            "sql": "select storm.name , storm.max_speed group_by storm.storm_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the name of storms which don't have affected region in record.",
        "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region);"
    },
    "interaction": [
        {
            "utterance": "What are the names of the storms that have affected regions in record ?",
            "sql": "select storm.name where storm.storm_id in ( select affected_region.storm_id )"
        },
        {
            "utterance": "How many such storms are there in the result ?",
            "sql": "select count ( storm.name ) where storm.storm_id in ( select affected_region.storm_id )"
        },
        {
            "utterance": "How about the names of storms which do n't have affected region in record .",
            "sql": "select storm.name where storm.storm_id not in ( select affected_region.storm_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 14,
    "final": {
        "utterance": "Show storm name with at least two regions and 10 cities affected.",
        "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10;"
    },
    "interaction": [
        {
            "utterance": "What is the name of the storm affected the most number of cities ?",
            "sql": "select storm.name group_by storm.storm_id order_by sum ( affected_region.number_city_affected ) desc limit_value"
        },
        {
            "utterance": "How about of the storms that affected at least two regions ?",
            "sql": "select storm.name group_by storm.storm_id having count ( * ) > = value"
        },
        {
            "utterance": "Among the result , which one affected at least 10 cities ?",
            "sql": "select storm.name group_by storm.storm_id having count ( * ) > = value intersect select storm.name group_by storm.storm_id having sum ( affected_region.number_city_affected ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all storm names except for those with at least two affected regions.",
        "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2;"
    },
    "interaction": [
        {
            "utterance": "Show me all the storms by name .",
            "sql": "select storm.name"
        },
        {
            "utterance": "List only ones with at least 2 affected regions .",
            "sql": "select storm.name group_by storm.storm_id having count ( * ) = value"
        },
        {
            "utterance": "Show all names of the storms except for these .",
            "sql": "select storm.name except select storm.name group_by storm.storm_id having count ( storm.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the region names affected by the storm with a number of deaths of least 10?",
        "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10;"
    },
    "interaction": [
        {
            "utterance": "Show me the regions affected by a storm with a damage of more than 10 million dollars ?",
            "sql": "select region.region_name where storm.damage_millions_usd > value"
        },
        {
            "utterance": "How about those with affected by storms with no more than 10 deaths ?",
            "sql": "select region.region_name where storm.number_deaths < = value"
        },
        {
            "utterance": "List the region names affected by the storm with a number of deaths of least 10 .",
            "sql": "select region.region_name where storm.number_deaths > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 17,
    "final": {
        "utterance": "Show all storm names affecting region \"Denmark\".",
        "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark';"
    },
    "interaction": [
        {
            "utterance": "Which storm affected region Cyprus ?",
            "sql": "select storm.name where region.region_name = value"
        },
        {
            "utterance": "How about Denmark ?",
            "sql": "select storm.name where region.region_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the region name with at least two storms.",
        "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2;"
    },
    "interaction": [
        {
            "utterance": "Show me the number of regions affected for each storm .",
            "sql": "select storm.name , count ( * ) group_by storm.storm_id"
        },
        {
            "utterance": "How about the number of storms for each region ?",
            "sql": "select region.region_name , count ( * ) group_by region.region_id"
        },
        {
            "utterance": "Show the region name with at least two storms .",
            "sql": "select region.region_name group_by region.region_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "storm_record",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
        "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the number of people killed for each storm .",
            "sql": "select storm.number_deaths"
        },
        {
            "utterance": "What 's the name of the one that killed the most people ?",
            "sql": "select storm.name order_by storm.number_deaths desc limit_value"
        },
        {
            "utterance": "What 's the names of the regions affected by this storm ?",
            "sql": "select region.region_name order_by storm.number_deaths desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 0,
    "final": {
        "utterance": "How many gas companies are there?",
        "sql": "SELECT count(*) FROM company"
    },
    "interaction": [
        {
            "utterance": "Show company information .",
            "sql": "select company.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( company.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 1,
    "final": {
        "utterance": "List the company name and rank for all companies in the decreasing order of their sales.",
        "sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC"
    },
    "interaction": [
        {
            "utterance": "Show the company names .",
            "sql": "select company.company"
        },
        {
            "utterance": "Also show the rank for each .",
            "sql": "select company.company , company.rank"
        },
        {
            "utterance": "Show the results in decreasing order of their sales .",
            "sql": "select company.company , company.rank order_by company.sales_billion desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'"
    },
    "interaction": [
        {
            "utterance": "Show the company name and the main industry for all companies .",
            "sql": "select company.company , company.main_industry"
        },
        {
            "utterance": "Show the results only for those whose headquarters are not from USA .",
            "sql": "select company.company , company.main_industry where company.headquarters != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all company names and headquarters in the descending order of market value.",
        "sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC"
    },
    "interaction": [
        {
            "utterance": "Show all company names and headquarters .",
            "sql": "select company.company , company.headquarters"
        },
        {
            "utterance": "Show them in the descending order of market value .",
            "sql": "select company.company , company.headquarters order_by company.market_value desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 4,
    "final": {
        "utterance": "Show minimum, maximum, and average market value for all companies.",
        "sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company"
    },
    "interaction": [
        {
            "utterance": "Show the market value for all companies .",
            "sql": "select company.market_value"
        },
        {
            "utterance": "What are the minimum , maximum , and average of them ?",
            "sql": "select min ( company.market_value ) , max ( company.market_value ) , avg ( company.market_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all main industry for all companies.",
        "sql": "SELECT DISTINCT main_industry FROM company"
    },
    "interaction": [
        {
            "utterance": "Show the company info .",
            "sql": "select company.*"
        },
        {
            "utterance": "Show the main industry for them .",
            "sql": "select company.main_industry"
        },
        {
            "utterance": "Remove duplicates .",
            "sql": "select distinct company.main_industry"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 6,
    "final": {
        "utterance": "List all headquarters and the number of companies in each headquarter.",
        "sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"
    },
    "interaction": [
        {
            "utterance": "Show all headquarters for companies .",
            "sql": "select company.headquarters"
        },
        {
            "utterance": "For each of them , show the number of companies .",
            "sql": "select company.headquarters , count ( company.* ) group_by company.headquarters"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all main industry and total market value in each industry.",
        "sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry"
    },
    "interaction": [
        {
            "utterance": "Show all main industries for companies .",
            "sql": "select company.main_industry"
        },
        {
            "utterance": "For each of them , also show the total market value .",
            "sql": "select company.main_industry , sum ( company.market_value ) group_by company.main_industry"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 8,
    "final": {
        "utterance": "List the main industry with highest total market value and its number of companies.",
        "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the main industries for companies .",
            "sql": "select company.main_industry"
        },
        {
            "utterance": "Order them in descending order by total market value .",
            "sql": "select company.main_industry group_by company.main_industry order_by sum ( company.market_value ) desc"
        },
        {
            "utterance": "What one has the highest ?",
            "sql": "select company.main_industry group_by company.main_industry order_by sum ( company.market_value ) desc limit_value"
        },
        {
            "utterance": "Also show its number of companies .",
            "sql": "select company.main_industry , count ( company.* ) group_by company.main_industry order_by sum ( company.market_value ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 9,
    "final": {
        "utterance": "Show headquarters with at least two companies in the banking industry.",
        "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show all headquarters .",
            "sql": "select company.headquarters"
        },
        {
            "utterance": "For each of them , also show the number of companies in the banking industry .",
            "sql": "select company.headquarters , count ( company.* ) where company.main_industry = value group_by company.headquarters"
        },
        {
            "utterance": "Which have at least two ?",
            "sql": "select company.headquarters where company.main_industry = value group_by company.headquarters having count ( company.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 10,
    "final": {
        "utterance": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year"
    },
    "interaction": [
        {
            "utterance": "Show the station id for all stations .",
            "sql": "select gas_station.station_id"
        },
        {
            "utterance": "Also show the location and the manager name for each of them .",
            "sql": "select gas_station.station_id , gas_station.location , gas_station.manager_name"
        },
        {
            "utterance": "Order the results by their opening year .",
            "sql": "select gas_station.station_id , gas_station.location , gas_station.manager_name order_by gas_station.open_year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 11,
    "final": {
        "utterance": "How many gas station are opened between 2000 and 2005?",
        "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005"
    },
    "interaction": [
        {
            "utterance": "Show the information for all gas stations .",
            "sql": "select gas_station.*"
        },
        {
            "utterance": "How about those that opened between 2000 and 2005 ?",
            "sql": "select gas_station.* where gas_station.open_year between value and value"
        },
        {
            "utterance": "Show the count .",
            "sql": "select count ( gas_station.* ) where gas_station.open_year between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all locations and the number of gas stations in each location ordered by the count.",
        "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "Show locations for all gas stations .",
            "sql": "select gas_station.location"
        },
        {
            "utterance": "For each of them , show the number of gas stations .",
            "sql": "select gas_station.location , count ( gas_station.* ) group_by gas_station.location"
        },
        {
            "utterance": "Order the results by the count .",
            "sql": "select gas_station.location , count ( gas_station.* ) group_by gas_station.location order_by count ( gas_station.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 13,
    "final": {
        "utterance": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
    },
    "interaction": [
        {
            "utterance": "Show all headquarters .",
            "sql": "select company.headquarters"
        },
        {
            "utterance": "Show headquarters with a company in the banking industry .",
            "sql": "select company.headquarters where company.main_industry = value"
        },
        {
            "utterance": "How about headquarters with a company in oil and gas ?",
            "sql": "select company.headquarters where company.main_industry = value"
        },
        {
            "utterance": "Show headquarters with both .",
            "sql": "select company.headquarters where company.main_industry = value intersect select company.headquarters where company.main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 14,
    "final": {
        "utterance": "Show all headquarters without a company in banking industry.",
        "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"
    },
    "interaction": [
        {
            "utterance": "Show the headquarters with a company in banking industry .",
            "sql": "select company.headquarters where company.main_industry = value"
        },
        {
            "utterance": "How about those without any such company ?",
            "sql": "select company.headquarters except select company.headquarters where company.main_industry = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the company name with the number of gas station.",
        "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id"
    },
    "interaction": [
        {
            "utterance": "Show the company name .",
            "sql": "select company.company"
        },
        {
            "utterance": "For each of them , also show the number of gas station .",
            "sql": "select company.company , count ( * ) group_by station_company.company_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 16,
    "final": {
        "utterance": "Show company name and main industry without a gas station.",
        "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    "interaction": [
        {
            "utterance": "What are company ids with a gas station .",
            "sql": "select station_company.company_id"
        },
        {
            "utterance": "Show the company name without a gas station .",
            "sql": "select company.company where company.company_id not in ( select station_company.company_id )"
        },
        {
            "utterance": "Show also their main industry .",
            "sql": "select company.company , company.main_industry where company.company_id not in ( select station_company.company_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'"
    },
    "interaction": [
        {
            "utterance": "Show the manager name for all gas stations .",
            "sql": "select gas_station.manager_name"
        },
        {
            "utterance": "Show those for gas stations belonging to the ExxonMobil company .",
            "sql": "select gas_station.manager_name where company.company = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 18,
    "final": {
        "utterance": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"
    },
    "interaction": [
        {
            "utterance": "Show locations for all gas stations .",
            "sql": "select gas_station.location"
        },
        {
            "utterance": "Show locations whose company has a market value greater than 100 .",
            "sql": "select gas_station.location where company.market_value > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the manager name with most number of gas stations opened after 2000.",
        "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the manager name for all gas stations .",
            "sql": "select gas_station.manager_name"
        },
        {
            "utterance": "For each of them , also count the number of gas stations opened after 2000 .",
            "sql": "select gas_station.manager_name , count ( gas_station.* ) where gas_station.open_year > value group_by gas_station.manager_name"
        },
        {
            "utterance": "Show the results in the descending order of their count .",
            "sql": "select gas_station.manager_name , count ( gas_station.* ) where gas_station.open_year > value group_by gas_station.manager_name order_by count ( gas_station.* ) desc"
        },
        {
            "utterance": "Which manager name has the most ?",
            "sql": "select gas_station.manager_name where gas_station.open_year > value group_by gas_station.manager_name order_by count ( gas_station.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 20,
    "final": {
        "utterance": "order all gas station locations by the opening year.",
        "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year"
    },
    "interaction": [
        {
            "utterance": "Show the location for all gas stations .",
            "sql": "select gas_station.location"
        },
        {
            "utterance": "Order them by their opening year .",
            "sql": "select gas_station.location order_by gas_station.open_year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "gas_company",
    "interaction_id": 21,
    "final": {
        "utterance": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"
    },
    "interaction": [
        {
            "utterance": "Show the rank , company names , market values of all the companies .",
            "sql": "select company.rank , company.company , company.market_value"
        },
        {
            "utterance": "What about the results for those in the banking industry ?",
            "sql": "select company.rank , company.company , company.market_value where company.main_industry = value"
        },
        {
            "utterance": "Order the results by their sales and profits in billion .",
            "sql": "select company.rank , company.company , company.market_value where company.main_industry = value order_by company.sales_billion , company.profits_billion"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\""
    },
    "interaction": [
        {
            "utterance": "What are the prices of products called `` Trading Policy '' ?",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "How bout `` Dining '' ?",
            "sql": "select products.product_price where products.product_name = value"
        },
        {
            "utterance": "Show those together , please .",
            "sql": "select products.product_price where products.product_name = value or products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the product with the highest price?",
        "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the prices of the products ?",
            "sql": "select products.product_name , products.product_price"
        },
        {
            "utterance": "Can you sort that by descending product price ?",
            "sql": "select products.product_name , products.product_price order_by products.product_price desc"
        },
        {
            "utterance": "Just show the product name with the highest price",
            "sql": "select products.product_name order_by products.product_price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "solvency_ii",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the most common type code across products.",
        "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the type codes for products ?",
            "sql": "select products.product_name , products.product_type_code"
        },
        {
            "utterance": "Can you count the products for each type code ?",
            "sql": "select products.product_type_code , count ( products.* ) group_by products.product_type_code"
        },
        {
            "utterance": "Which is most common ?",
            "sql": "select products.product_type_code group_by products.product_type_code order_by count ( products.* ) desc limit_value"
        },
        {
            "utterance": "Show the ones with at least two products .",
            "sql": "select products.product_type_code group_by products.product_type_code having count ( products.* ) > = value"
        },
        {
            "utterance": "Show those ones that have products with price higher than 4500 and products with price lower than 3000 .",
            "sql": "select products.product_type_code where products.product_price > value intersect select products.product_type_code where products.product_price < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all the locations where no cinema has capacity over 800.",
        "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"
    },
    "interaction": [
        {
            "utterance": "Show the locations for all cinemas .",
            "sql": "select cinema.location"
        },
        {
            "utterance": "What are the locations for the cinemas that have a capacity over 800 ?",
            "sql": "select cinema.location where cinema.capacity > value"
        },
        {
            "utterance": "Show all locations except for those .",
            "sql": "select cinema.location except select cinema.location where cinema.capacity > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011"
    },
    "interaction": [
        {
            "utterance": "List the locations where a cinema was opened in 2010 .",
            "sql": "select cinema.location where cinema.openning_year = value"
        },
        {
            "utterance": "How about the locations where of cinema was opened in 2011 ?",
            "sql": "select cinema.location where cinema.openning_year = value"
        },
        {
            "utterance": "Show the locations that belong to both groups .",
            "sql": "select cinema.location where cinema.openning_year = value intersect select cinema.location where cinema.openning_year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 2,
    "final": {
        "utterance": "How many cinema do we have?",
        "sql": "SELECT count(*) FROM cinema"
    },
    "interaction": [
        {
            "utterance": "Show all cinemas .",
            "sql": "select cinema.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( cinema.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 3,
    "final": {
        "utterance": "Show name, opening year, and capacity for each cinema.",
        "sql": "SELECT name ,  openning_year ,  capacity FROM cinema"
    },
    "interaction": [
        {
            "utterance": "Show all information for cinemas .",
            "sql": "select cinema.*"
        },
        {
            "utterance": "Only list name , opening year , and capacity for them .",
            "sql": "select cinema.name , cinema.openning_year , cinema.capacity"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the cinema name and location for cinemas with capacity above average.",
        "sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"
    },
    "interaction": [
        {
            "utterance": "What is are the capacities for cinemas ?",
            "sql": "select cinema.capacity"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( cinema.capacity )"
        },
        {
            "utterance": "Show the name and location for any cinemas with a capacity above this .",
            "sql": "select cinema.name , cinema.location where cinema.capacity > ( select avg ( cinema.capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 5,
    "final": {
        "utterance": "What are all the locations with a cinema?",
        "sql": "SELECT DISTINCT LOCATION FROM cinema"
    },
    "interaction": [
        {
            "utterance": "Show all information for cinemas .",
            "sql": "select cinema.*"
        },
        {
            "utterance": "Show all distinct locations containing cinemas .",
            "sql": "select distinct cinema.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all the cinema names and opening years in descending order of opening year.",
        "sql": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC"
    },
    "interaction": [
        {
            "utterance": "Show name and opening year for each cinema .",
            "sql": "select cinema.name , cinema.openning_year"
        },
        {
            "utterance": "Sort them in descending order by opening year .",
            "sql": "select cinema.name , cinema.openning_year order_by cinema.openning_year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the name and location of the cinema with the largest capacity?",
        "sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show name and location for all cinemas .",
            "sql": "select cinema.name , cinema.location"
        },
        {
            "utterance": "Order by them their capacity in descending order .",
            "sql": "select cinema.name , cinema.location order_by cinema.capacity desc"
        },
        {
            "utterance": "What is the top cinema in the list ?",
            "sql": "select cinema.name , cinema.location order_by cinema.capacity desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "sql": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011"
    },
    "interaction": [
        {
            "utterance": "Show the capacities for all cinemas .",
            "sql": "select cinema.capacity"
        },
        {
            "utterance": "How about the capacities for those that opened in 2011 or later ?",
            "sql": "select cinema.capacity where cinema.openning_year > = value"
        },
        {
            "utterance": "What is the average , minimum , and maximum among these ?",
            "sql": "select avg ( cinema.capacity ) , min ( cinema.capacity ) , max ( cinema.capacity ) where cinema.openning_year > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 9,
    "final": {
        "utterance": "Show each location and the number of cinemas there.",
        "sql": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION"
    },
    "interaction": [
        {
            "utterance": "Show all locations for cinemas .",
            "sql": "select cinema.location"
        },
        {
            "utterance": "Also show the number of cinemas in each location .",
            "sql": "select cinema.location , count ( cinema.* ) group_by cinema.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the location with the most cinemas opened in year 2010 or later?",
        "sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all locations with cinemas .",
            "sql": "select cinema.location"
        },
        {
            "utterance": "How about locations for those that opened in year 2010 or later ?",
            "sql": "select cinema.location where cinema.openning_year > = value"
        },
        {
            "utterance": "What is the location with the most such cinemas ?",
            "sql": "select cinema.location where cinema.openning_year > = value group_by cinema.location order_by count ( cinema.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all the locations with at least two cinemas with capacity above 300.",
        "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show all locations of cinemas .",
            "sql": "select cinema.location"
        },
        {
            "utterance": "What are locations for the cinemas with a capacity above 300 ?",
            "sql": "select cinema.location where cinema.capacity > value"
        },
        {
            "utterance": "What are locations with at least two such cinemas ?",
            "sql": "select cinema.location where cinema.capacity > value group_by cinema.location having count ( cinema.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the title and director for all films.",
        "sql": "SELECT title ,  directed_by FROM film"
    },
    "interaction": [
        {
            "utterance": "Show all information of films .",
            "sql": "select film.*"
        },
        {
            "utterance": "How about the title and director for those ?",
            "sql": "select film.title , film.directed_by"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 13,
    "final": {
        "utterance": "Show all directors.",
        "sql": "SELECT DISTINCT directed_by FROM film"
    },
    "interaction": [
        {
            "utterance": "Show the information for all films .",
            "sql": "select film.*"
        },
        {
            "utterance": "Who are the directors for those ?",
            "sql": "select distinct film.directed_by"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 14,
    "final": {
        "utterance": "List all directors along with the number of films directed by each director.",
        "sql": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by"
    },
    "interaction": [
        {
            "utterance": "Show directors for all films .",
            "sql": "select film.directed_by"
        },
        {
            "utterance": "Also show the number of films made by each director .",
            "sql": "select film.directed_by , count ( film.* ) group_by film.directed_by"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 15,
    "final": {
        "utterance": "What is total number of show times per day for each cinema?",
        "sql": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id"
    },
    "interaction": [
        {
            "utterance": "Show the names for all cinemas .",
            "sql": "select cinema.name"
        },
        {
            "utterance": "Also show the showtimes per day for those cinemas .",
            "sql": "select cinema.name , schedule.show_times_per_day"
        },
        {
            "utterance": "For each cinema , also show the total number of showtimes per day .",
            "sql": "select cinema.name , sum ( schedule.show_times_per_day ) group_by schedule.cinema_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the title and maximum price of each film?",
        "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    "interaction": [
        {
            "utterance": "Show the title for each film .",
            "sql": "select film.title"
        },
        {
            "utterance": "Also show the prices for each of them .",
            "sql": "select film.title , schedule.price"
        },
        {
            "utterance": "What is the maximum price for each ?",
            "sql": "select film.title , max ( schedule.price ) group_by schedule.film_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 17,
    "final": {
        "utterance": "Show cinema name, film title, date, and price for each record in schedule.",
        "sql": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id"
    },
    "interaction": [
        {
            "utterance": "Show the title for films .",
            "sql": "select film.title"
        },
        {
            "utterance": "Show the name for cinemas .",
            "sql": "select cinema.name"
        },
        {
            "utterance": "Show all the schedule record .",
            "sql": "select schedule.*"
        },
        {
            "utterance": "How about the date and the price for each of those records along with the film title and cinema name .",
            "sql": "select cinema.name , film.title , schedule.date , schedule.price"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the title and director of the films without any schedule?",
        "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)"
    },
    "interaction": [
        {
            "utterance": "Show all film ids in the schedule .",
            "sql": "select schedule.film_id"
        },
        {
            "utterance": "Show the title and director for all films .",
            "sql": "select film.title , film.directed_by"
        },
        {
            "utterance": "Only show the title and director for films not in the schedule .",
            "sql": "select film.title , film.directed_by where film.film_id not in ( select schedule.film_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 19,
    "final": {
        "utterance": "Show director with the largest number of show times in total.",
        "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the directors .",
            "sql": "select film.directed_by"
        },
        {
            "utterance": "List those directors in descending order by the total number of showtimes .",
            "sql": "select film.directed_by group_by film.directed_by order_by sum ( schedule.show_times_per_day ) desc"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select film.directed_by group_by film.directed_by order_by sum ( schedule.show_times_per_day ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cinema",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the locations that have more than one movie theater with capacity above 300.",
        "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show all locations for the cinemas .",
            "sql": "select cinema.location"
        },
        {
            "utterance": "Only show locations of cinemas with a capacity above 300 .",
            "sql": "select cinema.location where cinema.capacity > value"
        },
        {
            "utterance": "How about locations with more than one such cinema ?",
            "sql": "select cinema.location where cinema.capacity > value group_by cinema.location having count ( cinema.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 0,
    "final": {
        "utterance": "How many bookings do we have?",
        "sql": "SELECT count(*) FROM BOOKINGS"
    },
    "interaction": [
        {
            "utterance": "What are all the bookings ?",
            "sql": "select bookings.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( bookings.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 1,
    "final": {
        "utterance": "List the order dates of all the bookings.",
        "sql": "SELECT Order_Date FROM BOOKINGS"
    },
    "interaction": [
        {
            "utterance": "What are all the bookings ?",
            "sql": "select bookings.*"
        },
        {
            "utterance": "What are their order dates ?",
            "sql": "select bookings.order_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS"
    },
    "interaction": [
        {
            "utterance": "What are all the bookings ?",
            "sql": "select bookings.*"
        },
        {
            "utterance": "What are their planned delivery dates and actual delivery dates ?",
            "sql": "select bookings.planned_delivery_date , bookings.actual_delivery_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 3,
    "final": {
        "utterance": "How many customers do we have?",
        "sql": "SELECT count(*) FROM CUSTOMERS"
    },
    "interaction": [
        {
            "utterance": "What are all the customers ?",
            "sql": "select customers.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( customers.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the phone and email for customer Harold?",
        "sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\""
    },
    "interaction": [
        {
            "utterance": "What are all the customers ?",
            "sql": "select customers.*"
        },
        {
            "utterance": "Who is Harold ?",
            "sql": "select customers.* where customers.customer_name = value"
        },
        {
            "utterance": "Show Harold 's phone and email .",
            "sql": "select customers.customer_phone , customers.customer_email_address where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all the Store_Name of drama workshop groups.",
        "sql": "SELECT Store_Name FROM Drama_Workshop_Groups"
    },
    "interaction": [
        {
            "utterance": "What are all the drama workshop groups ?",
            "sql": "select drama_workshop_groups.*"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select drama_workshop_groups.store_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the minimum, average, maximum order quantity of all invoices.",
        "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES"
    },
    "interaction": [
        {
            "utterance": "What are all the invoices ?",
            "sql": "select invoices.*"
        },
        {
            "utterance": "What are their order quantities ?",
            "sql": "select invoices.order_quantity"
        },
        {
            "utterance": "Show the minimum , average , maximum of them .",
            "sql": "select min ( invoices.order_quantity ) , avg ( invoices.order_quantity ) , max ( invoices.order_quantity )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the distinct payment method codes in all the invoices?",
        "sql": "SELECT DISTINCT payment_method_code FROM INVOICES"
    },
    "interaction": [
        {
            "utterance": "What are all the invoices ?",
            "sql": "select invoices.*"
        },
        {
            "utterance": "What are their payment method codes ?",
            "sql": "select invoices.payment_method_code"
        },
        {
            "utterance": "Only show the distinct ones .",
            "sql": "select distinct invoices.payment_method_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the description of the marketing region China?",
        "sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\""
    },
    "interaction": [
        {
            "utterance": "What are all the marketing regions ?",
            "sql": "select marketing_regions.*"
        },
        {
            "utterance": "Show me the region named China .",
            "sql": "select marketing_regions.* where marketing_regions.marketing_region_name = value"
        },
        {
            "utterance": "Show the description of it .",
            "sql": "select marketing_regions.marketing_region_descriptrion where marketing_regions.marketing_region_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 9,
    "final": {
        "utterance": "Show all the distinct product names with price higher than the average.",
        "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)"
    },
    "interaction": [
        {
            "utterance": "What are all the products ?",
            "sql": "select products.*"
        },
        {
            "utterance": "What about those with price higher than average ?",
            "sql": "select products.* where products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "Show their distinct names .",
            "sql": "select distinct products.product_name where products.product_price > ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of the most expensive product?",
        "sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the products ?",
            "sql": "select products.*"
        },
        {
            "utterance": "which is the one with the highest price ?",
            "sql": "select products.* order_by products.product_price desc limit_value"
        },
        {
            "utterance": "Only show its name .",
            "sql": "select products.product_name order_by products.product_price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the phone number of the performer Ashley?",
        "sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\""
    },
    "interaction": [
        {
            "utterance": "What are all the performers ?",
            "sql": "select performers.*"
        },
        {
            "utterance": "Show the phone number of the performer whose name is Ashley .",
            "sql": "select performers.customer_phone where performers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all payment method codes and the number of orders for each code.",
        "sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code"
    },
    "interaction": [
        {
            "utterance": "What are all the invoices ?",
            "sql": "select invoices.*"
        },
        {
            "utterance": "Show all kinds of payment method codes among them .",
            "sql": "select invoices.payment_method_code group_by invoices.payment_method_code"
        },
        {
            "utterance": "How many orders are there for each of them ?",
            "sql": "select invoices.payment_method_code , count ( invoices.* ) group_by invoices.payment_method_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the payment method code used by the most orders?",
        "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the invoices ?",
            "sql": "select invoices.*"
        },
        {
            "utterance": "Show all kinds of payment method codes among them .",
            "sql": "select invoices.payment_method_code group_by invoices.payment_method_code"
        },
        {
            "utterance": "Which one is used by most orders ?",
            "sql": "select invoices.payment_method_code group_by invoices.payment_method_code order_by count ( invoices.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 14,
    "final": {
        "utterance": "Which city is the address of the store named \"FJA Filming\" located in?",
        "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""
    },
    "interaction": [
        {
            "utterance": "Show me information about the store named `` FJA Filming '' .",
            "sql": "select stores.* where stores.store_name = value"
        },
        {
            "utterance": "Which city is that store located in ?",
            "sql": "select addresses.city_town where stores.store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\""
    },
    "interaction": [
        {
            "utterance": "What are the stores with marketing region code `` CA '' ?",
            "sql": "select stores.* where stores.marketing_region_code = value"
        },
        {
            "utterance": "What are their addresses ?",
            "sql": "select addresses.line_1 , addresses.line_2 where stores.marketing_region_code = value"
        },
        {
            "utterance": "What are the states or counties those addresses belong to ?",
            "sql": "select addresses.state_county where stores.marketing_region_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\""
    },
    "interaction": [
        {
            "utterance": "Show me information about the store named Rob Dinning ?",
            "sql": "select stores.* where stores.store_name = value"
        },
        {
            "utterance": "What is the name of its marketing region ?",
            "sql": "select marketing_regions.marketing_region_name where stores.store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the descriptions of the service types with product price above 100?",
        "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100"
    },
    "interaction": [
        {
            "utterance": "What are the services with product price above 100 ?",
            "sql": "select services.* where services.product_price > value"
        },
        {
            "utterance": "What are the descriptions of the service types of them ?",
            "sql": "select ref_service_types.service_type_description where services.product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the description, code and the corresponding count of each service type?",
        "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code"
    },
    "interaction": [
        {
            "utterance": "What are all the service types ?",
            "sql": "select ref_service_types.*"
        },
        {
            "utterance": "For each of them , what is the description , code and the corresponding count of service ?",
            "sql": "select ref_service_types.service_type_description , services.service_type_code , count ( * ) group_by services.service_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the description and code of the type of service that is performed the most often?",
        "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the service types ?",
            "sql": "select ref_service_types.*"
        },
        {
            "utterance": "How many times has each of them being performed ?",
            "sql": "select ref_service_types.service_type_description , ref_service_types.service_type_code , count ( * ) group_by ref_service_types.service_type_code"
        },
        {
            "utterance": "Show the description and code of the one that is performed the most often .",
            "sql": "select ref_service_types.service_type_description , ref_service_types.service_type_code group_by ref_service_types.service_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the phones and emails of workshop groups in which services are performed?",
        "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID"
    },
    "interaction": [
        {
            "utterance": "What are all the workshop groups ?",
            "sql": "select drama_workshop_groups.*"
        },
        {
            "utterance": "What about those that services are performed ?",
            "sql": "select *"
        },
        {
            "utterance": "Show their phones and emails .",
            "sql": "select drama_workshop_groups.store_phone , drama_workshop_groups.store_email_address"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the names of workshop groups in which services with product name \"film\" are performed?",
        "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\""
    },
    "interaction": [
        {
            "utterance": "What are all the services with product name `` film '' ?",
            "sql": "select services.* where services.product_name = value"
        },
        {
            "utterance": "What are the names of workshop groups in which they are performed ?",
            "sql": "select drama_workshop_groups.store_phone , drama_workshop_groups.store_email_address where services.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the different product names? What is the average product price for each of them?",
        "sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"
    },
    "interaction": [
        {
            "utterance": "What are all the products ?",
            "sql": "select products.*"
        },
        {
            "utterance": "Show all product names .",
            "sql": "select products.product_name group_by products.product_name"
        },
        {
            "utterance": "Show the average price for each name .",
            "sql": "select products.product_name , avg ( products.product_price ) group_by products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the product names with average product price smaller than 1000000?",
        "sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000"
    },
    "interaction": [
        {
            "utterance": "What are the names for all products ?",
            "sql": "select products.product_name group_by products.product_name"
        },
        {
            "utterance": "Show the one that has average price smaller than 1000000 .",
            "sql": "select products.product_name group_by products.product_name having avg ( products.product_price ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the total order quantities of photo products?",
        "sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\""
    },
    "interaction": [
        {
            "utterance": "What are all the photo products ?",
            "sql": "select products.* where products.product_name = value"
        },
        {
            "utterance": "What are the total order quantities of them ?",
            "sql": "select sum ( order_items.order_quantity ) where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the order details of the products with price higher than 2000?",
        "sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000"
    },
    "interaction": [
        {
            "utterance": "What are all the products with price higher than 2000 ?",
            "sql": "select products.* where products.product_price > value"
        },
        {
            "utterance": "What are the order details of them ?",
            "sql": "select order_items.other_item_details where products.product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the actual delivery dates of orders with quantity 1?",
        "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"
    },
    "interaction": [
        {
            "utterance": "What are the orders with quantity 1 ?",
            "sql": "select order_items.* where order_items.order_quantity = value"
        },
        {
            "utterance": "Show the actual delivery dates of them .",
            "sql": "select customer_orders.actual_delivery_date where order_items.order_quantity = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the order dates of orders with price higher than 1000?",
        "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000"
    },
    "interaction": [
        {
            "utterance": "What are the products with price higher than 1000 ?",
            "sql": "select products.* where products.product_price > value"
        },
        {
            "utterance": "What are their order dates ?",
            "sql": "select customer_orders.order_date where products.product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 28,
    "final": {
        "utterance": "How many distinct currency codes are there for all drama workshop groups?",
        "sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"
    },
    "interaction": [
        {
            "utterance": "What are the currency codes for all drama workshop groups ?",
            "sql": "select drama_workshop_groups.currency_code"
        },
        {
            "utterance": "Only show the distinct ones .",
            "sql": "select distinct drama_workshop_groups.currency_code"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct drama_workshop_groups.currency_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""
    },
    "interaction": [
        {
            "utterance": "What are the addresses in Feliciaberg city ?",
            "sql": "select addresses.* where addresses.city_town = value"
        },
        {
            "utterance": "Show the drama workshop groups that are in those addresses .",
            "sql": "select drama_workshop_groups.store_name where addresses.city_town = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the email addresses of the drama workshop groups with address in Alaska state?",
        "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\""
    },
    "interaction": [
        {
            "utterance": "What are the addresses in Alaska state ?",
            "sql": "select addresses.* where addresses.state_county = value"
        },
        {
            "utterance": "Show the names of drama workshop groups that are using those addresses ?",
            "sql": "select drama_workshop_groups.store_email_address where addresses.state_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 31,
    "final": {
        "utterance": "Show all cities along with the number of drama workshop groups in each city.",
        "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"
    },
    "interaction": [
        {
            "utterance": "What are all the cities ?",
            "sql": "select addresses.city_town group_by addresses.city_town"
        },
        {
            "utterance": "How many drama workshop groups are in each of them ?",
            "sql": "select addresses.city_town , count ( * ) group_by addresses.city_town"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 32,
    "final": {
        "utterance": "What is the marketing region code that has the most drama workshop groups?",
        "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the market region codes of all the drama workshop groups ?",
            "sql": "select drama_workshop_groups.marketing_region_code group_by drama_workshop_groups.marketing_region_code"
        },
        {
            "utterance": "Which one of them has the most drama workshop groups ?",
            "sql": "select drama_workshop_groups.marketing_region_code group_by drama_workshop_groups.marketing_region_code order_by count ( drama_workshop_groups.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 33,
    "final": {
        "utterance": "Show all cities where at least one customer lives in but no performer lives in.",
        "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"
    },
    "interaction": [
        {
            "utterance": "Show me all the cities .",
            "sql": "select addresses.city_town"
        },
        {
            "utterance": "Which ones of them has at least one customer ?",
            "sql": "select addresses.city_town"
        },
        {
            "utterance": "Among those cities , show ones that has no performer .",
            "sql": "select addresses.city_town except select addresses.city_town"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the most frequent status of bookings?",
        "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the status of all the bookings ?",
            "sql": "select distinct bookings.status_code"
        },
        {
            "utterance": "Which one of them is the most frequent one ?",
            "sql": "select bookings.status_code group_by bookings.status_code order_by count ( bookings.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""
    },
    "interaction": [
        {
            "utterance": "Which bookings have status code `` stop '' ?",
            "sql": "select bookings.* where bookings.status_code = value"
        },
        {
            "utterance": "Show the names of the workshop groups that have those bookings .",
            "sql": "select drama_workshop_groups.store_name where bookings.status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 36,
    "final": {
        "utterance": "Show the names of all the clients with no booking.",
        "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the clients ?",
            "sql": "select clients.customer_name"
        },
        {
            "utterance": "How about those who have no booking ?",
            "sql": "select clients.customer_name except select clients.customer_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\""
    },
    "interaction": [
        {
            "utterance": "What are all the invoices using `` MasterCard '' ?",
            "sql": "select invoices.* where invoices.payment_method_code = value"
        },
        {
            "utterance": "Show the average quantities of them .",
            "sql": "select avg ( invoices.order_quantity ) where invoices.payment_method_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Drama_Workshop_Groups",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the product ID of the most frequently ordered item on invoices?",
        "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the product IDs of all the invoices ?",
            "sql": "select invoices.product_id"
        },
        {
            "utterance": "Show the one that has been ordered the most .",
            "sql": "select invoices.product_id group_by invoices.product_id order_by count ( invoices.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1"
    },
    "interaction": [
        {
            "utterance": "How many hotels have 5 star ratings ?",
            "sql": "select count ( hotels.* ) where hotels.star_rating_code = value"
        },
        {
            "utterance": "Among the results , how many are hotels that allow pets ?",
            "sql": "select count ( hotels.* ) where hotels.star_rating_code = value and hotels.pets_allowed_yn = value"
        },
        {
            "utterance": "What one has the highest price range ?",
            "sql": "select hotels.hotel_id where hotels.star_rating_code = value and hotels.pets_allowed_yn = value order_by hotels.price_range desc limit_value"
        },
        {
            "utterance": "Please show the average price range of these hotels .",
            "sql": "select avg ( hotels.price_range ) where hotels.star_rating_code = value and hotels.pets_allowed_yn = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 1,
    "final": {
        "utterance": "Which location names contain the word \"film\"?",
        "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""
    },
    "interaction": [
        {
            "utterance": "Please show the location names .",
            "sql": "select locations.location_name"
        },
        {
            "utterance": "Which one contains the word `` UK '' ?",
            "sql": "select locations.location_name where locations.location_name like value"
        },
        {
            "utterance": "Then , which one contains the word `` film '' ?",
            "sql": "select locations.location_name where locations.location_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions are there ?",
            "sql": "select count ( tourist_attractions.* )"
        },
        {
            "utterance": "How many of them could be accessed by bus or walking ?",
            "sql": "select count ( tourist_attractions.* ) where tourist_attractions.how_to_get_there = value or tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Please show their names and opening hours .",
            "sql": "select tourist_attractions.name , tourist_attractions.opening_hours where tourist_attractions.how_to_get_there = value or tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the star rating descriptions of the hotels with price above 10000?",
        "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000"
    },
    "interaction": [
        {
            "utterance": "How many hotels are there ?",
            "sql": "select count ( hotels.* )"
        },
        {
            "utterance": "What is the average price range of these hotels ?",
            "sql": "select avg ( hotels.price_range )"
        },
        {
            "utterance": "How many of hotels have a price above 10000 ?",
            "sql": "select count ( hotels.* ) where hotels.price_range > value"
        },
        {
            "utterance": "Please show the star rating descriptions of these hotels .",
            "sql": "select ref_hotel_star_ratings.star_rating_description where hotels.price_range > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions are there ?",
            "sql": "select count ( tourist_attractions.* )"
        },
        {
            "utterance": "How many of them are associated with the photo `` fun1 '' ?",
            "sql": "select count ( * ) where photos.name = value"
        },
        {
            "utterance": "How about the photo `` game1 '' ?",
            "sql": "select count ( * ) where photos.name = value"
        },
        {
            "utterance": "Please show the name of these tourist attractions ?",
            "sql": "select tourist_attractions.name where photos.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""
    },
    "interaction": [
        {
            "utterance": "How can I get to the tourist attraction `` film festival '' ?",
            "sql": "select tourist_attractions.how_to_get_there where tourist_attractions.name = value"
        },
        {
            "utterance": "How many photos have been taken at this tourist attraction ?",
            "sql": "select count ( * ) where tourist_attractions.name = value"
        },
        {
            "utterance": "Please show its name and descriptions .",
            "sql": "select photos.name , photos.description where tourist_attractions.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the details of the shops that can be accessed by walk?",
        "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "How many shops are there ?",
            "sql": "select count ( shops.* )"
        },
        {
            "utterance": "How many of them could be accessed by bus ?",
            "sql": "select count ( * ) where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "How about the number of those that could be accessed by walking ?",
            "sql": "select count ( * ) where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Please show the details of these shops .",
            "sql": "select shops.shop_details where tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
        "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\""
    },
    "interaction": [
        {
            "utterance": "Please show the description of the the attraction named `` US museum '' .",
            "sql": "select tourist_attractions.description where tourist_attractions.name = value"
        },
        {
            "utterance": "How can I get to this place ?",
            "sql": "select tourist_attractions.how_to_get_there where tourist_attractions.name = value"
        },
        {
            "utterance": "Who is in charge of it ?",
            "sql": "select staff.name where tourist_attractions.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the details of the markets that can be accessed by walk or bus?",
        "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\""
    },
    "interaction": [
        {
            "utterance": "How many markets are there ?",
            "sql": "select count ( street_markets.* )"
        },
        {
            "utterance": "How many of them could be accessed by shuttle ?",
            "sql": "select count ( * ) where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "How about the number of those that could be accessed by walking or bus ?",
            "sql": "select count ( * ) where tourist_attractions.how_to_get_there = value or tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Please show the details of these markets .",
            "sql": "select street_markets.market_details where tourist_attractions.how_to_get_there = value or tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""
    },
    "interaction": [
        {
            "utterance": "How many visitors are there ?",
            "sql": "select count ( visitors.* )"
        },
        {
            "utterance": "What is the Tourist_ID of the visitor whose detail is 'Vincent ' ?",
            "sql": "select visitors.tourist_id where visitors.tourist_details = value"
        },
        {
            "utterance": "Please show his visit date and detail .",
            "sql": "select visits.visit_date , visits.visit_details where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 10,
    "final": {
        "utterance": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\""
    },
    "interaction": [
        {
            "utterance": "What is the Tourist_ID of the visitor whose detail is 'Vivian ' ?",
            "sql": "select visitors.tourist_id where visitors.tourist_details = value"
        },
        {
            "utterance": "Which tourist attractions does she visit ?",
            "sql": "select tourist_attractions.name where visitors.tourist_details = value"
        },
        {
            "utterance": "How about Vincent ?",
            "sql": "select tourist_attractions.name where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions has Vincent visited ?",
            "sql": "select count ( * ) where visitors.tourist_details = value"
        },
        {
            "utterance": "How about Vivian ?",
            "sql": "select count ( * ) where visitors.tourist_details = value"
        },
        {
            "utterance": "Among these attractions , please show the names and dates of the ones that Vincent or Vivian has visited .",
            "sql": "select tourist_attractions.name , visits.visit_date where visitors.tourist_details = value or visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the details of the top 3 most expensive hotels.",
        "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What is the price range of the most expensive hotel ?",
            "sql": "select hotels.price_range order_by hotels.price_range desc limit_value"
        },
        {
            "utterance": "How about the top 3 ?",
            "sql": "select hotels.price_range order_by hotels.price_range desc limit_value"
        },
        {
            "utterance": "Please show the details .",
            "sql": "select hotels.other_hotel_details order_by hotels.price_range desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the details and star ratings of the 3 least expensive hotels.",
        "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What is the lowest price range of the hotels ?",
            "sql": "select hotels.price_range order_by hotels.price_range limit_value"
        },
        {
            "utterance": "How about the last 3 ?",
            "sql": "select hotels.price_range order_by hotels.price_range limit_value"
        },
        {
            "utterance": "Please show the details and star ratings of these three hotels .",
            "sql": "select hotels.other_hotel_details , hotels.star_rating_code order_by hotels.price_range asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the transportation method most people choose to get to tourist attractions.",
        "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many people choose to get to the tourist attractions by walking ?",
            "sql": "select count ( tourist_attractions.* ) where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "How about by bus ?",
            "sql": "select count ( tourist_attractions.* ) where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Then , which transportation method is the most popular ?",
            "sql": "select tourist_attractions.how_to_get_there group_by tourist_attractions.how_to_get_there order_by count ( tourist_attractions.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the description and code of the attraction type most tourist attractions belong to.",
        "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many attraction types are there ?",
            "sql": "select count ( ref_attraction_types.* )"
        },
        {
            "utterance": "What is the description of the attraction with attraction type code being 2 ?",
            "sql": "select ref_attraction_types.attraction_type_description where ref_attraction_types.attraction_type_code = value"
        },
        {
            "utterance": "For each attraction type , how many attractions are there ?",
            "sql": "select tourist_attractions.attraction_type_code , count ( * ) group_by tourist_attractions.attraction_type_code"
        },
        {
            "utterance": "Please show the description and code of the attraction type that includes the most tourist attractions .",
            "sql": "select ref_attraction_types.attraction_type_description , tourist_attractions.attraction_type_code group_by tourist_attractions.attraction_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 16,
    "final": {
        "utterance": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions are there ?",
            "sql": "select count ( tourist_attractions.* )"
        },
        {
            "utterance": "For each attraction , how many visits does it have ?",
            "sql": "select tourist_attractions.name , count ( * ) group_by visits.tourist_attraction_id"
        },
        {
            "utterance": "Please also show the ids of these attractions .",
            "sql": "select tourist_attractions.name , visits.tourist_attraction_id , count ( * ) group_by visits.tourist_attraction_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the names and ids of tourist attractions that are visited at least two times.",
        "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions have been visited at least once ?",
            "sql": "select count ( * ) ( select tourist_attractions.name group_by visits.tourist_attraction_id having count ( * ) > = value )"
        },
        {
            "utterance": "How about the number of those that have been visited at least two times ?",
            "sql": "select count ( * ) ( select tourist_attractions.name group_by visits.tourist_attraction_id having count ( * ) > = value )"
        },
        {
            "utterance": "Please show their names and ids .",
            "sql": "select tourist_attractions.name , visits.tourist_attraction_id group_by visits.tourist_attraction_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions are there at address 660 Shea Crescent ?",
            "sql": "select count ( * ) where locations.address = value"
        },
        {
            "utterance": "How many tourist attractions can be reached by walking ?",
            "sql": "select count ( tourist_attractions.* ) where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Please show the names of these tourist attractions or those that are at address 660 Shea Crescent .",
            "sql": "select tourist_attractions.name where locations.address = value or tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'"
    },
    "interaction": [
        {
            "utterance": "How many features could be provided by tourist attractions ?",
            "sql": "select count ( features.* )"
        },
        {
            "utterance": "Please show their details .",
            "sql": "select features.feature_details"
        },
        {
            "utterance": "How many tourist attractions have parking as their feature details ?",
            "sql": "select count ( * ) where features.feature_details = value"
        },
        {
            "utterance": "How about the number of those that have either parking or shopping as their feature details ?",
            "sql": "select count ( * ) ( select tourist_attractions.name where features.feature_details = value union select tourist_attractions.name where features.feature_details = value )"
        },
        {
            "utterance": "Please show the names of these attractions .",
            "sql": "select tourist_attractions.name where features.feature_details = value union select tourist_attractions.name where features.feature_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions can be reached by bus ?",
            "sql": "select count ( tourist_attractions.* ) where tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "How about the number of tourist attractions that can be reached by bus or are at address 254 Ottilie Junction ?",
            "sql": "select count ( * ) where locations.address = value or tourist_attractions.how_to_get_there = value"
        },
        {
            "utterance": "Please show the names of these tourist attractions .",
            "sql": "select tourist_attractions.name where locations.address = value or tourist_attractions.how_to_get_there = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Theme_park",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""
    },
    "interaction": [
        {
            "utterance": "How many tourist attractions are there that Alison has visited ?",
            "sql": "select count ( * ) where visitors.tourist_details = value"
        },
        {
            "utterance": "Please show their names .",
            "sql": "select tourist_attractions.name where visitors.tourist_details = value"
        },
        {
            "utterance": "What are the names of tourist attractions that Rosalind has visited ?",
            "sql": "select tourist_attractions.name where visitors.tourist_details = value"
        },
        {
            "utterance": "How about the names of tourist attractions that Alison visited but Rosalind did not visit ?",
            "sql": "select tourist_attractions.name where visitors.tourist_details = value except select tourist_attractions.name where visitors.tourist_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 0,
    "final": {
        "utterance": "Which poll resource provided the most number of candidate information?",
        "sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what different poll resources exist ?",
            "sql": "select distinct candidate.poll_source"
        },
        {
            "utterance": "how many are there ?",
            "sql": "select count ( distinct candidate.poll_source )"
        },
        {
            "utterance": "which one provides the greatest amount of candidate information ?",
            "sql": "select candidate.poll_source group_by candidate.poll_source order_by count ( candidate.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 1,
    "final": {
        "utterance": "what are the top 3 highest support rates?",
        "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "what is the highest support rate ?",
            "sql": "select candidate.support_rate order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "show me the top 3 .",
            "sql": "select candidate.support_rate order_by candidate.support_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the id of the candidate who got the lowest oppose rate.",
        "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the id of the candidate who got the highest oppose rate .",
            "sql": "select candidate.candidate_id order_by candidate.oppose_rate desc limit_value"
        },
        {
            "utterance": "how about the one with the lowest oppose rate ?",
            "sql": "select candidate.candidate_id order_by candidate.oppose_rate limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 3,
    "final": {
        "utterance": "which poll source does the highest oppose rate come from?",
        "sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which candidate has the highest oppose rate ?",
            "sql": "select candidate.* order_by candidate.oppose_rate desc limit_value"
        },
        {
            "utterance": "just show the poll source .",
            "sql": "select candidate.poll_source order_by candidate.oppose_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the average height and weight for all males (sex is M).",
        "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"
    },
    "interaction": [
        {
            "utterance": "show all males .",
            "sql": "select people.* where people.sex = value"
        },
        {
            "utterance": "what is their average height ?",
            "sql": "select avg ( people.height ) where people.sex = value"
        },
        {
            "utterance": "also what is the average weight ?",
            "sql": "select avg ( people.height ) , avg ( people.weight ) where people.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 5,
    "final": {
        "utterance": "find the names of people who are taller than 200 or lower than 190.",
        "sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    "interaction": [
        {
            "utterance": "show the info of people who are taller than 200 .",
            "sql": "select people.* where people.height > value"
        },
        {
            "utterance": "also list the people whose height is lower than 190 .",
            "sql": "select people.* where people.height > value or people.height < value"
        },
        {
            "utterance": "just show their names .",
            "sql": "select people.name where people.height > value or people.height < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the average and minimum weight for each gender.",
        "sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "what is the average weight ?",
            "sql": "select avg ( people.weight )"
        },
        {
            "utterance": "what is the minimum ?",
            "sql": "select min ( people.weight )"
        },
        {
            "utterance": "show these values for each gender .",
            "sql": "select avg ( people.weight ) , min ( people.weight ) , people.sex group_by people.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name and gender of the candidate who got the highest support rate.",
        "sql": "SELECT t1.name,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "order the candidate table by support rate from high to the low .",
            "sql": "select candidate.* order_by candidate.support_rate desc"
        },
        {
            "utterance": "what is the name of the candidate in first place ?",
            "sql": "select people.name order_by candidate.support_rate desc limit_value"
        },
        {
            "utterance": "show the gender as well .",
            "sql": "select people.name , people.sex order_by candidate.support_rate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    "interaction": [
        {
            "utterance": "what are the names of all candidates ?",
            "sql": "select people.name"
        },
        {
            "utterance": "among them , whose oppose percentage is the lowest ?",
            "sql": "select people.name order_by candidate.oppose_rate limit_value"
        },
        {
            "utterance": "for each gender ?",
            "sql": "select people.name , people.sex , min ( candidate.oppose_rate ) group_by people.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 9,
    "final": {
        "utterance": "which gender got the highest average uncertain ratio.",
        "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average uncertain ratio of all candidates ?",
            "sql": "select avg ( candidate.unsure_rate )"
        },
        {
            "utterance": "what are the numbers for each sex ?",
            "sql": "select people.sex , avg ( candidate.unsure_rate ) group_by people.sex"
        },
        {
            "utterance": "which gender got the higher number ?",
            "sql": "select people.sex group_by people.sex order_by avg ( candidate.unsure_rate ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 10,
    "final": {
        "utterance": "what are the names of people who did not participate in the candidate election.",
        "sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"
    },
    "interaction": [
        {
            "utterance": "give me info of all candidates .",
            "sql": "select candidate.*"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select people.name"
        },
        {
            "utterance": "how about those who were not candidates in the election ?",
            "sql": "select people.name where people.people_id not in ( select candidate.people_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"
    },
    "interaction": [
        {
            "utterance": "show the name of all candidates with their support and oppose percentages .",
            "sql": "select people.name , candidate.support_rate , candidate.oppose_rate"
        },
        {
            "utterance": "just show those whose support percentage is higher than their oppose rate .",
            "sql": "select people.name , candidate.support_rate , candidate.oppose_rate where candidate.support_rate > candidate.oppose_rate"
        },
        {
            "utterance": "no need to show the support and oppose rates .",
            "sql": "select people.name where candidate.support_rate > candidate.oppose_rate"
        },
        {
            "utterance": "how about those whose support percentage is lower than their oppose rate .",
            "sql": "select people.name where candidate.support_rate < candidate.oppose_rate"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 12,
    "final": {
        "utterance": "how many people are there whose weight is higher than 85 for each gender?",
        "sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "what are the names of people whose weight is less than 85 ?",
            "sql": "select people.name where people.weight < value"
        },
        {
            "utterance": "how about those whose weight is greater than 85 ?",
            "sql": "select people.name where people.weight > value"
        },
        {
            "utterance": "how many are there in total ?",
            "sql": "select count ( people.* ) where people.weight > value"
        },
        {
            "utterance": "what is the number for each gender ?",
            "sql": "select count ( people.* ) , people.sex where people.weight > value group_by people.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 13,
    "final": {
        "utterance": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
    },
    "interaction": [
        {
            "utterance": "what is the highest support percentage for all candidates ?",
            "sql": "select max ( candidate.support_rate )"
        },
        {
            "utterance": "how about the lowest consider rate and oppose rate ?",
            "sql": "select min ( candidate.consider_rate ) , min ( candidate.oppose_rate )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "candidate_poll",
    "interaction_id": 14,
    "final": {
        "utterance": "list all female (sex is F) candidate names in the alphabetical order.",
        "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"
    },
    "interaction": [
        {
            "utterance": "show info for all females ( sex is F ) .",
            "sql": "select people.* where people.sex = value"
        },
        {
            "utterance": "who are candidates among them ? Just show their names .",
            "sql": "select people.name where people.sex = value"
        },
        {
            "utterance": "list the result in the alphabetical order .",
            "sql": "select people.name where people.sex = value order_by people.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
    },
    "interaction": [
        {
            "utterance": "How many users are there ?",
            "sql": "select count ( user_profiles.* )"
        },
        {
            "utterance": "Please list their names and email .",
            "sql": "select user_profiles.name , user_profiles.email"
        },
        {
            "utterance": "Among these names , whose name contains \u2018Swift\u2019 ?",
            "sql": "select user_profiles.name , user_profiles.email where user_profiles.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"
    },
    "interaction": [
        {
            "utterance": "How many users are there ?",
            "sql": "select count ( user_profiles.* )"
        },
        {
            "utterance": "Please list their names and email .",
            "sql": "select user_profiles.name , user_profiles.email"
        },
        {
            "utterance": "How many followers do they have ?",
            "sql": "select user_profiles.name , user_profiles.email , user_profiles.followers"
        },
        {
            "utterance": "How many users ' emails contain \u2018superstar\u2019 or \u2018edu\u2019 ?",
            "sql": "select count ( user_profiles.* ) where user_profiles.email like value or user_profiles.email like value"
        },
        {
            "utterance": "Please list their names .",
            "sql": "select user_profiles.name where user_profiles.email like value or user_profiles.email like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Return the text of tweets about the topic 'intern'.",
        "sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    "interaction": [
        {
            "utterance": "How many tweets are there ?",
            "sql": "select count ( tweets.* )"
        },
        {
            "utterance": "Among these tweets , how many of them are about the topic 'intern ' ?",
            "sql": "select count ( tweets.* ) where tweets.text like value"
        },
        {
            "utterance": "Please show their texts .",
            "sql": "select tweets.text where tweets.text like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')"
    },
    "interaction": [
        {
            "utterance": "How many followers does the user named `` Tyler Swift '' have ?",
            "sql": "select count ( * ) where user_profiles.name = value"
        },
        {
            "utterance": "How many users are there whose number of followers is greater than that of the user named `` Tyler Swift '' ?",
            "sql": "select count ( * ) ( select user_profiles.name group_by follows.f1 having count ( * ) > ( select count ( * ) where user_profiles.name = value ) )"
        },
        {
            "utterance": "Show the names of these users .",
            "sql": "select user_profiles.name group_by follows.f1 having count ( * ) > ( select count ( * ) where user_profiles.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name and email for the users who have more than one follower.",
        "sql": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Who has the least number of followers ?",
            "sql": "select user_profiles.name order_by user_profiles.followers limit_value"
        },
        {
            "utterance": "How many users have more than one follower ?",
            "sql": "select count ( * ) ( select user_profiles.name group_by follows.f1 having count ( * ) > value )"
        },
        {
            "utterance": "Show their names and emails .",
            "sql": "select user_profiles.name , user_profiles.email group_by follows.f1 having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the names of users who have more than one tweet.",
        "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many tweets are there ?",
            "sql": "select count ( tweets.* )"
        },
        {
            "utterance": "What is the text of the tweet with id 1 ?",
            "sql": "select tweets.text where tweets.id = value"
        },
        {
            "utterance": "How many tweets does each user have ?",
            "sql": "select user_profiles.name , count ( * ) group_by tweets.uid"
        },
        {
            "utterance": "Who has more than one tweet ?",
            "sql": "select user_profiles.name group_by tweets.uid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the id of users who are followed by Mary or Susan.",
        "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""
    },
    "interaction": [
        {
            "utterance": "How many followers does Mary have ?",
            "sql": "select user_profiles.followers where user_profiles.name = value"
        },
        {
            "utterance": "How about that of Susan ?",
            "sql": "select user_profiles.followers where user_profiles.name = value"
        },
        {
            "utterance": "Who is followed by either one of them ?",
            "sql": "select user_profiles.name where user_profiles.name = value or user_profiles.name = value"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select follows.f1 where user_profiles.name = value or user_profiles.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name and email of the user followed by the least number of people.",
        "sql": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who has the most followers ?",
            "sql": "select user_profiles.name order_by user_profiles.followers desc limit_value"
        },
        {
            "utterance": "What is the minimum number of followers of all users ?",
            "sql": "select user_profiles.followers order_by user_profiles.followers limit_value"
        },
        {
            "utterance": "Please show the name of the user with that number of followers .",
            "sql": "select user_profiles.name order_by user_profiles.followers limit_value"
        },
        {
            "utterance": "Please also show the email .",
            "sql": "select user_profiles.name , user_profiles.email order_by user_profiles.followers limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of 5 users followed by the largest number of other users.",
        "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "How many followers does each user have ?",
            "sql": "select user_profiles.name , user_profiles.followers"
        },
        {
            "utterance": "Who has the most followers ?",
            "sql": "select user_profiles.name order_by user_profiles.followers desc limit_value"
        },
        {
            "utterance": "Which top 5 users have the most followers ?",
            "sql": "select user_profiles.name order_by user_profiles.followers desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of each user and number of tweets tweeted by each of them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"
    },
    "interaction": [
        {
            "utterance": "How many users are there ?",
            "sql": "select count ( user_profiles.* )"
        },
        {
            "utterance": "Show their names .",
            "sql": "select user_profiles.name"
        },
        {
            "utterance": "Please also show the number of tweets tweeted by each of them .",
            "sql": "select user_profiles.name , count ( * ) group_by tweets.uid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and partition id for users who tweeted less than twice.",
        "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
    },
    "interaction": [
        {
            "utterance": "How many users tweeted less than twice ?",
            "sql": "select count ( * ) ( select count ( * ) group_by tweets.uid having count ( * ) < value )"
        },
        {
            "utterance": "Show their names .",
            "sql": "select user_profiles.name group_by tweets.uid having count ( * ) < value"
        },
        {
            "utterance": "Please also show their partition id",
            "sql": "select user_profiles.name , user_profiles.partitionid group_by tweets.uid having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many users have some tweets ?",
            "sql": "select count ( user_profiles.* ) where user_profiles.uid in ( select tweets.uid )"
        },
        {
            "utterance": "How about the number of users that have tweeted more than once ?",
            "sql": "select count ( * ) ( select count ( * ) group_by tweets.uid having count ( * ) > value )"
        },
        {
            "utterance": "Show their names and number of tweets tweeted by them .",
            "sql": "select user_profiles.name , count ( * ) group_by tweets.uid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "twitter_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the average number of followers for the users who had some tweets.",
        "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
    },
    "interaction": [
        {
            "utterance": "How many users have some tweets ?",
            "sql": "select count ( user_profiles.* ) where user_profiles.uid in ( select tweets.uid )"
        },
        {
            "utterance": "Show the name of these users and their number of followers .",
            "sql": "select user_profiles.name , user_profiles.followers where user_profiles.uid in ( select tweets.uid )"
        },
        {
            "utterance": "What is the average number of followers for these users ?",
            "sql": "select avg ( user_profiles.followers ) where user_profiles.uid in ( select tweets.uid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the id of the most recent order?",
        "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id of the customer who made the most recent order ?",
            "sql": "select orders.customer_id order_by orders.date_order_placed desc limit_value"
        },
        {
            "utterance": "What 's its status ?",
            "sql": "select orders.order_status order_by orders.date_order_placed desc limit_value"
        },
        {
            "utterance": "What 's its id ?",
            "sql": "select orders.order_id order_by orders.date_order_placed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 1,
    "final": {
        "utterance": "what are the order id and customer id of the oldest order?",
        "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "When was the oldest order placed ?",
            "sql": "select orders.date_order_placed order_by orders.date_order_placed limit_value"
        },
        {
            "utterance": "What 's the id of the customer who placed it ?",
            "sql": "select orders.customer_id order_by orders.date_order_placed limit_value"
        },
        {
            "utterance": "What 's the id of the order ?",
            "sql": "select orders.order_id order_by orders.date_order_placed limit_value"
        },
        {
            "utterance": "Show me both id 's .",
            "sql": "select orders.order_id , orders.customer_id order_by orders.date_order_placed limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
    },
    "interaction": [
        {
            "utterance": "Show me all the orders with status `` Packing ''",
            "sql": "select orders.* where orders.order_status = value"
        },
        {
            "utterance": "Who made those orders ?",
            "sql": "select customers.customer_name where orders.order_status = value"
        },
        {
            "utterance": "Show me the distinct customer names .",
            "sql": "select distinct customers.customer_name where orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""
    },
    "interaction": [
        {
            "utterance": "Show me all the orders with status `` On Road ''",
            "sql": "select orders.* where orders.order_status = value"
        },
        {
            "utterance": "Who made those orders ?",
            "sql": "select customers.customer_name where orders.order_status = value"
        },
        {
            "utterance": "Show me the distinct customer names .",
            "sql": "select distinct customers.customer_name where orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the customer who has the most orders?",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id of the customer who has the most orders ?",
            "sql": "select customers.customer_id group_by customers.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show me details",
            "sql": "select customers.customer_details group_by customers.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show me his or her name .",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the customer id of the customer who has the most orders?",
        "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the customer who has the most orders ?",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What 's his or her id ?",
            "sql": "select customers.customer_id group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 6,
    "final": {
        "utterance": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
    },
    "interaction": [
        {
            "utterance": "Any customer named Jeramie ?",
            "sql": "select customers.* where customers.customer_name = value"
        },
        {
            "utterance": "Show me the status of his orders",
            "sql": "select orders.order_status where customers.customer_name = value"
        },
        {
            "utterance": "Show me the id 's of his orders as well .",
            "sql": "select orders.order_id , orders.order_status where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
    },
    "interaction": [
        {
            "utterance": "Any customer named Jeramie ?",
            "sql": "select customers.* where customers.customer_name = value"
        },
        {
            "utterance": "Show me the status of his orders",
            "sql": "select orders.order_status where customers.customer_name = value"
        },
        {
            "utterance": "Now show me the dates of those orders .",
            "sql": "select orders.date_order_placed where customers.customer_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 8,
    "final": {
        "utterance": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
    },
    "interaction": [
        {
            "utterance": "Show me the orders placed between 2009-01-01 and 2010-01-01 .",
            "sql": "select orders.* where orders.date_order_placed > = value and orders.date_order_placed < = value"
        },
        {
            "utterance": "Show me the customers who made those orders .",
            "sql": "select customers.customer_name where orders.date_order_placed > = value and orders.date_order_placed < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 9,
    "final": {
        "utterance": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""
    },
    "interaction": [
        {
            "utterance": "Show me the orders placed between 1975-01-01 and 1976-01-01 .",
            "sql": "select orders.* where orders.date_order_placed > = value and orders.date_order_placed < = value"
        },
        {
            "utterance": "Show me the product ids of those orders .",
            "sql": "select distinct order_items.product_id where orders.date_order_placed > = value and orders.date_order_placed < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    "interaction": [
        {
            "utterance": "Find me customers who have order status `` On Road '' .",
            "sql": "select customers.customer_name where orders.order_status = value"
        },
        {
            "utterance": "Now find me customers who have order status `` Shipped '' .",
            "sql": "select customers.customer_name where orders.order_status = value"
        },
        {
            "utterance": "Now show me customers with both of those order statuses .",
            "sql": "select customers.customer_name where orders.order_status = value intersect select customers.customer_name where orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
        "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
    },
    "interaction": [
        {
            "utterance": "Find me ids of customers who have order status `` On Road '' .",
            "sql": "select customers.customer_id where orders.order_status = value"
        },
        {
            "utterance": "Now find me ids of customers who have order status `` Shipped '' .",
            "sql": "select customers.customer_id where orders.order_status = value"
        },
        {
            "utterance": "Now show me ids of customers with both of those order statuses .",
            "sql": "select customers.customer_id where orders.order_status = value intersect select customers.customer_name where orders.order_status = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 12,
    "final": {
        "utterance": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
    },
    "interaction": [
        {
            "utterance": "Show me the order with shipment tracking number 3452 .",
            "sql": "select * where shipments.shipment_tracking_number = value"
        },
        {
            "utterance": "When was that order placed ?",
            "sql": "select orders.date_order_placed where shipments.shipment_tracking_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the placement date of the order whose invoice number is 10?",
        "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
    },
    "interaction": [
        {
            "utterance": "Show me the order with invoice number 10 .",
            "sql": "select * where shipments.invoice_number = value"
        },
        {
            "utterance": "When was that order placed ? Give me the date .",
            "sql": "select orders.date_order_placed where shipments.invoice_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 14,
    "final": {
        "utterance": "List the count and id of each product in all the orders.",
        "sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
    },
    "interaction": [
        {
            "utterance": "Show me all the products .",
            "sql": "select products.*"
        },
        {
            "utterance": "Show me only the products that have been ordered .",
            "sql": "select * group_by products.product_id"
        },
        {
            "utterance": "Show me only the count and id of each product",
            "sql": "select count ( * ) , products.product_id group_by products.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 15,
    "final": {
        "utterance": "List the name and count of each product in all orders.",
        "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
    },
    "interaction": [
        {
            "utterance": "Show me all the products .",
            "sql": "select products.*"
        },
        {
            "utterance": "Show me only the products that have been ordered .",
            "sql": "select * group_by products.product_id"
        },
        {
            "utterance": "Show me only the name and count of each product",
            "sql": "select products.product_name , count ( * ) group_by products.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the id of the order which is shipped most recently.",
        "sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)"
    },
    "interaction": [
        {
            "utterance": "Show me the 10 most recently shipped orders .",
            "sql": "select shipments.* order_by shipments.shipment_date desc limit_value"
        },
        {
            "utterance": "Ok , show me only the most recent one .",
            "sql": "select shipments.* order_by shipments.shipment_date desc limit_value"
        },
        {
            "utterance": "Show me its id .",
            "sql": "select shipments.order_id where shipments.shipment_date = ( select max ( shipments.shipment_date ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the id of the order which has the most items?",
        "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who ordered the order with most items ?",
            "sql": "select orders.customer_id group_by orders.order_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is its order id ?",
            "sql": "select orders.order_id group_by orders.order_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the name of the customer who has the largest number of orders?",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id of the order with the most items ?",
            "sql": "select orders.order_id group_by orders.order_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the id of the customer who ordered it ?",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
    },
    "interaction": [
        {
            "utterance": "Show me all the dates between 1989-09-03 and 2007-12-25 that invoice number was created .",
            "sql": "select invoices.invoice_date where invoices.invoice_date > value and invoices.invoice_date < value"
        },
        {
            "utterance": "Sorry , I meant dates before 1989-09-03 and after 2007-12-25 .",
            "sql": "select invoices.invoice_date where invoices.invoice_date < value or invoices.invoice_date > value"
        },
        {
            "utterance": "Now show me their invoice numbers .",
            "sql": "select invoices.invoice_number where invoices.invoice_date < value or invoices.invoice_date > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
    },
    "interaction": [
        {
            "utterance": "Show me all the details of invoices created between 1989-09-03 and 2007-12-25 .",
            "sql": "select invoices.invoice_date where invoices.invoice_date > value and invoices.invoice_date < value"
        },
        {
            "utterance": "Now show me the distinct details of all the other invoices .",
            "sql": "select distinct invoices.invoice_details where invoices.invoice_date < value or invoices.invoice_date > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 21,
    "final": {
        "utterance": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all customers who have at least two orders .",
            "sql": "select customers.customer_name group_by customers.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "Show me the number of orders each of them made as well .",
            "sql": "select customers.customer_name , count ( * ) group_by customers.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the name of the customers who have at most two orders.",
        "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all customers who have at least two orders .",
            "sql": "select customers.customer_name group_by customers.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "Now show me names of customers who have at most two orders .",
            "sql": "select customers.customer_name group_by customers.customer_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_orders",
    "interaction_id": 23,
    "final": {
        "utterance": "List the names of the customers who have once bought product \"food\".",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "List the ids of the customers who have once bought product `` food '' .",
            "sql": "select customers.customer_id where products.product_name = value group_by customers.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "Now list the names .",
            "sql": "select customers.customer_name where products.product_name = value group_by customers.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the id of the problem log that is created most recently?",
        "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most recent log_entry_date ?",
            "sql": "select problem_log.log_entry_date order_by problem_log.log_entry_date asc limit_value"
        },
        {
            "utterance": "the latest ?",
            "sql": "select problem_log.log_entry_date order_by problem_log.log_entry_date desc limit_value"
        },
        {
            "utterance": "what is the product id that has this ?",
            "sql": "select problem_log.problem_log_id order_by problem_log.log_entry_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the oldest log id and its corresponding problem id?",
        "sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many problem logs are there ?",
            "sql": "select count ( problem_log.* )"
        },
        {
            "utterance": "Of those , what is the oldest entry date used ?",
            "sql": "select problem_log.log_entry_date order_by problem_log.log_entry_date limit_value"
        },
        {
            "utterance": "Show all the problem_log information for this date !",
            "sql": "select problem_log.* order_by problem_log.log_entry_date limit_value"
        },
        {
            "utterance": "Actually , just show the log id and problem id .",
            "sql": "select problem_log.problem_log_id , problem_log.problem_id order_by problem_log.log_entry_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 2,
    "final": {
        "utterance": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"
    },
    "interaction": [
        {
            "utterance": "How many problem logs have to do with problem id 1 ?",
            "sql": "select count ( problem_log.* ) where problem_log.problem_id = value"
        },
        {
            "utterance": "Show the log ids , dates , descriptions for these .",
            "sql": "select problem_log.problem_log_id , problem_log.log_entry_date , problem_log.log_entry_description where problem_log.problem_id = value"
        },
        {
            "utterance": "Also show the staff for each .",
            "sql": "select problem_log.problem_log_id , problem_log.log_entry_date , problem_log.log_entry_description , problem_log.assigned_to_staff_id where problem_log.problem_id = value"
        },
        {
            "utterance": "Can you give me a distinct list of the names of all staff members !",
            "sql": "select distinct staff.staff_first_name , staff.staff_last_name where problem_log.problem_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 3,
    "final": {
        "utterance": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\""
    },
    "interaction": [
        {
            "utterance": "What are the problem reported by named Ryan Homenick .",
            "sql": "select * where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "How about the problems on which closure is authorized by him ?",
            "sql": "select where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "Actually can you show the different problem_logs that he is assigned to !",
            "sql": "select * where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "For these , show the distinct problem ids and log ids !",
            "sql": "select distinct problem_log.problem_id , problem_log.problem_log_id where staff.staff_first_name = value and staff.staff_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 4,
    "final": {
        "utterance": "How many problems are there for product voluptatem?",
        "sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\""
    },
    "interaction": [
        {
            "utterance": "Show me all the problems on the product with name voluptatem .",
            "sql": "select * where product.product_name = value"
        },
        {
            "utterance": "What are the statuses of each ?",
            "sql": "select * , problem_log.problem_status_code where product.product_name = value"
        },
        {
            "utterance": "How many are solved ?",
            "sql": "select count ( * ) where product.product_name = value and problem_log.problem_status_code = value"
        },
        {
            "utterance": "Actually how many are there in total ?",
            "sql": "select count ( * ) where product.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 5,
    "final": {
        "utterance": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many problems are there ?",
            "sql": "select count ( problems.* )"
        },
        {
            "utterance": "What products are they associated with ?",
            "sql": "select *"
        },
        {
            "utterance": "Now show how many problems exist per product name ?",
            "sql": "select count ( * ) , product.product_id group_by product.product_id"
        },
        {
            "utterance": "Which one has the most problems ?",
            "sql": "select count ( * ) , product.product_name group_by product.product_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 6,
    "final": {
        "utterance": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
    },
    "interaction": [
        {
            "utterance": "How many staff members have the first name Christop .",
            "sql": "select count ( staff.* ) where staff.staff_first_name = value"
        },
        {
            "utterance": "What problem are these members authorized to close !",
            "sql": "select * where staff.staff_first_name = value"
        },
        {
            "utterance": "How about what problems have these members reported !",
            "sql": "select * where staff.staff_first_name = value"
        },
        {
            "utterance": "List just the problem descriptions for each ?",
            "sql": "select problems.problem_description where staff.staff_first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""
    },
    "interaction": [
        {
            "utterance": "List all the problem ids !",
            "sql": "select problems.problem_id"
        },
        {
            "utterance": "What are the names of the staff members that reported each !",
            "sql": "select problems.problem_id , staff.staff_first_name , staff.staff_last_name"
        },
        {
            "utterance": "Show me the ids of those reported by the last name Bosco !",
            "sql": "select problems.problem_id where staff.staff_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 8,
    "final": {
        "utterance": "For each product which has problems, what are the number of problems and the product id?",
        "sql": "SELECT count(*),  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"
    },
    "interaction": [
        {
            "utterance": "How many products do not have any problems ?",
            "sql": "select count ( product.* ) where product.product_id not in ( select problems.product_id )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select product.product_id where product.product_id not in ( select problems.product_id )"
        },
        {
            "utterance": "Show all the different ids of the products other than these !",
            "sql": "select distinct problems.product_id"
        },
        {
            "utterance": "Also provide the number of problems they each have !",
            "sql": "select count ( * ) , product.product_id group_by product.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 9,
    "final": {
        "utterance": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"
    },
    "interaction": [
        {
            "utterance": "How many problems were reported on or before 1986-11-13 ?",
            "sql": "select count ( problems.* ) where problems.date_problem_reported < = value"
        },
        {
            "utterance": "how about after ?",
            "sql": "select count ( problems.* ) where problems.date_problem_reported > value"
        },
        {
            "utterance": "Show me their problem ids and product ids !",
            "sql": "select problems.problem_id , problems.product_id where problems.date_problem_reported > value"
        },
        {
            "utterance": "For these , show the number of problems by product id !",
            "sql": "select count ( * ) , product.product_id where problems.date_problem_reported > value group_by product.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
    },
    "interaction": [
        {
            "utterance": "What are all the products reported by staff named Jolie Weber ?",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "How about Dameon Fami ?",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "Which products are reported by either one ?",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "What are their ids ?",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value union select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""
    },
    "interaction": [
        {
            "utterance": "For each problem , What are the different names of staff members who can authorize closure !",
            "sql": "select distinct staff.staff_first_name , staff.staff_last_name"
        },
        {
            "utterance": "Also provide the product_ids !",
            "sql": "select problems.product_id , staff.staff_first_name , staff.staff_last_name"
        },
        {
            "utterance": "Show me the product ids that have closure authorized by Ashley Medhurst !",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "Of those , only those that were reported by Christop Beege !",
            "sql": "select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value intersect select problems.product_id where staff.staff_first_name = value and staff.staff_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"
    },
    "interaction": [
        {
            "utterance": "How many problems has staff named Lysanne Turcotte reported ?",
            "sql": "select count ( * ) where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "Show me their ids , and problem descriptions .",
            "sql": "select problems.problem_id , problems.problem_description where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "What is the oldest date these were reported ?",
            "sql": "select min ( problems.date_problem_reported ) where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "Show me the ids of all the other problems that were reported before this date ! :",
            "sql": "select problems.problem_id where problems.date_problem_reported < ( select min ( problems.date_problem_reported ) where staff.staff_first_name = value and staff.staff_last_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"
    },
    "interaction": [
        {
            "utterance": "What are all the names of the staff members that have reported problems ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name"
        },
        {
            "utterance": "What was the problem id and date of the last problem they each reported ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name , problems.problem_id , max ( problems.date_problem_reported ) group_by staff.staff_first_name , staff.staff_last_name"
        },
        {
            "utterance": "Show me the date for staff named Ryan Homenick",
            "sql": "select max ( problems.date_problem_reported ) where staff.staff_first_name = value and staff.staff_last_name = value"
        },
        {
            "utterance": "Now show any problem id that was reported after this date !",
            "sql": "select problems.problem_id where problems.date_problem_reported > ( select max ( problems.date_problem_reported ) where staff.staff_first_name = value and staff.staff_last_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the top 3 products which have the largest number of problems?",
        "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show me all different products with problems !",
            "sql": "select *"
        },
        {
            "utterance": "How many problems do they each have for each product name ?",
            "sql": "select product.product_name , count ( * ) group_by product.product_name"
        },
        {
            "utterance": "Show me the names of the products in the bottom 3 !",
            "sql": "select product.product_name group_by product.product_name order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "What about the top 3 ?",
            "sql": "select product.product_name group_by product.product_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 15,
    "final": {
        "utterance": "List the ids of the problems FROM the product \"voluptatem\" that are reported after 1995?",
        "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""
    },
    "interaction": [
        {
            "utterance": "What are all the problems that are reported after 1995 ?",
            "sql": "select problems.* where problems.date_problem_reported > value"
        },
        {
            "utterance": "Show the product names that each are associated with ?",
            "sql": "select * , product.product_name where problems.date_problem_reported > value"
        },
        {
            "utterance": "Show the ids of the ones with the product named Rose .",
            "sql": "select problems.problem_id where product.product_name = value and problems.date_problem_reported > value"
        },
        {
            "utterance": "How about those with the product named voluptatem",
            "sql": "select problems.problem_id where product.product_name = value and problems.date_problem_reported > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_software_problems",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the first and last name of the staff members who reported problems FROM the product \"rem\" but not \"aut\"?",
        "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
    },
    "interaction": [
        {
            "utterance": "What are first and last names of all the staff members ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name"
        },
        {
            "utterance": "Which ones reported on problems with products named `` rem '' or `` aut '' ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name where product.product_name = value or product.product_name = value"
        },
        {
            "utterance": "Of these , who reported on `` rem '' ?",
            "sql": "select staff.staff_first_name , staff.staff_last_name where product.product_name = value"
        },
        {
            "utterance": "Of these , who did not report on `` aut ''",
            "sql": "select staff.staff_first_name , staff.staff_last_name where product.product_name = value except select staff.staff_first_name , staff.staff_last_name where product.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 0,
    "final": {
        "utterance": "which course has most number of registered students?",
        "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the course names ?",
            "sql": "select courses.course_name"
        },
        {
            "utterance": "Which course has the least number of registered students ?",
            "sql": "select courses.course_name group_by courses.course_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Most number ?",
            "sql": "select courses.course_name group_by courses.course_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 1,
    "final": {
        "utterance": "what is id of students who registered some courses but the least number of courses in these students?",
        "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the course ids that students registered for ?",
            "sql": "select student_course_registrations.course_id"
        },
        {
            "utterance": "What about student ids .",
            "sql": "select student_course_registrations.student_id"
        },
        {
            "utterance": "Which one registered for the least number of courses .",
            "sql": "select student_course_registrations.student_id group_by student_course_registrations.student_id order_by count ( student_course_registrations.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 2,
    "final": {
        "utterance": "List the id of students who never attends courses?",
        "sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    "interaction": [
        {
            "utterance": "Who are the students ? Give the id and details .",
            "sql": "select students.student_id , students.student_details"
        },
        {
            "utterance": "Which students attend courses ?",
            "sql": "select students.student_id , students.student_details where students.student_id in ( select student_course_attendance.student_id )"
        },
        {
            "utterance": "Which ones do not ? Just give the student id .",
            "sql": "select students.student_id where students.student_id not in ( select student_course_attendance.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 3,
    "final": {
        "utterance": "What is detail of the student who most recently registered course?",
        "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the course id of the most recent course registration ?",
            "sql": "select student_course_registrations.course_id order_by student_course_registrations.registration_date desc limit_value"
        },
        {
            "utterance": "Give the student id instead .",
            "sql": "select student_course_registrations.student_id order_by student_course_registrations.registration_date desc limit_value"
        },
        {
            "utterance": "Give the student details .",
            "sql": "select students.student_details order_by student_course_registrations.registration_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 4,
    "final": {
        "utterance": "How many students attend course English?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    "interaction": [
        {
            "utterance": "Which students attended the course with course id 301 ?",
            "sql": "select student_course_attendance.student_id where student_course_attendance.course_id = value"
        },
        {
            "utterance": "Count how many did so .",
            "sql": "select count ( student_course_attendance.* ) where student_course_attendance.course_id = value"
        },
        {
            "utterance": "What about the course English ?",
            "sql": "select count ( * ) where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 5,
    "final": {
        "utterance": "How many courses do the student whose id is 171 attend?",
        "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
    },
    "interaction": [
        {
            "utterance": "What are the dates of attendance for the student with id 141 ?",
            "sql": "select student_course_attendance.date_of_attendance where student_course_attendance.student_id = value"
        },
        {
            "utterance": "With id 171 ?",
            "sql": "select student_course_attendance.date_of_attendance where student_course_attendance.student_id = value"
        },
        {
            "utterance": "What are the courses that this student attends ? Give the course names .",
            "sql": "select courses.course_name where student_course_attendance.student_id = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where student_course_attendance.student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 6,
    "final": {
        "utterance": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
    },
    "interaction": [
        {
            "utterance": "What is the first name of the candidate with login name mkou ?",
            "sql": "select people.first_name where people.login_name = value"
        },
        {
            "utterance": "Give the candidate id instead .",
            "sql": "select candidates.candidate_id where people.login_name = value"
        },
        {
            "utterance": "Find the same for the candidate with emailstanley.monahan @ example.org .",
            "sql": "select candidates.candidate_id where people.email_address = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 7,
    "final": {
        "utterance": "Find id of the candidate who most recently accessed the course?",
        "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the oldest date of assessment of the candidates ?",
            "sql": "select candidate_assessments.assessment_date order_by candidate_assessments.assessment_date asc limit_value"
        },
        {
            "utterance": "Most recent ?",
            "sql": "select candidate_assessments.assessment_date order_by candidate_assessments.assessment_date desc limit_value"
        },
        {
            "utterance": "Give the candidate id instead .",
            "sql": "select candidate_assessments.candidate_id order_by candidate_assessments.assessment_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the details of the student who registered the most number of courses?",
        "sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which student registered for the least number of courses ? Give the student id .",
            "sql": "select student_course_registrations.student_id group_by student_course_registrations.student_id order_by count ( student_course_registrations.* ) asc limit_value"
        },
        {
            "utterance": "Most number of courses ?",
            "sql": "select student_course_registrations.student_id group_by student_course_registrations.student_id order_by count ( student_course_registrations.* ) desc limit_value"
        },
        {
            "utterance": "Give the student details .",
            "sql": "select students.student_details group_by students.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 9,
    "final": {
        "utterance": "List the id of students who registered some courses and the number of their registered courses?",
        "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    "interaction": [
        {
            "utterance": "How many students registered for each course ?",
            "sql": "select count ( student_course_registrations.* ) group_by student_course_registrations.course_id"
        },
        {
            "utterance": "How many courses did each student register for ?",
            "sql": "select count ( student_course_registrations.* ) group_by student_course_registrations.student_id"
        },
        {
            "utterance": "Give the student id as well .",
            "sql": "select students.student_id , count ( * ) group_by students.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 10,
    "final": {
        "utterance": "How many registered students does each course have? List course name and the number of their registered students.",
        "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
    },
    "interaction": [
        {
            "utterance": "How many registered students are there ?",
            "sql": "select count ( distinct student_course_registrations.student_id )"
        },
        {
            "utterance": "How many are there for each course ?",
            "sql": "select count ( student_course_registrations.* ) group_by student_course_registrations.course_id"
        },
        {
            "utterance": "Give the course name as well .",
            "sql": "select courses.course_name , count ( * ) group_by student_course_registrations.course_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    "interaction": [
        {
            "utterance": "Find the qualifications of the candidates with assessment code `` Pass ''",
            "sql": "select candidate_assessments.qualification where candidate_assessments.asessment_outcome_code = value"
        },
        {
            "utterance": "Give their candidate details instead .",
            "sql": "select candidates.candidate_details where candidate_assessments.asessment_outcome_code = value"
        },
        {
            "utterance": "What about with assessment code `` Fail ''",
            "sql": "select candidates.candidate_details where candidate_assessments.asessment_outcome_code = value"
        },
        {
            "utterance": "Find the cell mobile number instead .",
            "sql": "select people.cell_mobile_number where candidate_assessments.asessment_outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the id of the student who most recently attended course is 301?",
        "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give the most recently attended course .",
            "sql": "select student_course_attendance.course_id order_by student_course_attendance.date_of_attendance desc limit_value"
        },
        {
            "utterance": "What about for the course 301 ?",
            "sql": "select student_course_attendance.course_id where student_course_attendance.course_id = value order_by student_course_attendance.date_of_attendance desc limit_value"
        },
        {
            "utterance": "Give the student id instead .",
            "sql": "select student_course_attendance.student_id where student_course_attendance.course_id = value order_by student_course_attendance.date_of_attendance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 13,
    "final": {
        "utterance": "Find distinct cities of address of students?",
        "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    "interaction": [
        {
            "utterance": "What are the distinct address ids of the people ?",
            "sql": "select distinct people_addresses.address_id"
        },
        {
            "utterance": "Give the same for the students .",
            "sql": "select distinct people_addresses.address_id"
        },
        {
            "utterance": "Give their cities of addresses too .",
            "sql": "select distinct addresses.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the id of students who registered courses or attended courses?",
        "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    "interaction": [
        {
            "utterance": "What are the ids of students who registered courses ?",
            "sql": "select student_course_registrations.student_id"
        },
        {
            "utterance": "What about for students who also attended courses ?",
            "sql": "select student_course_registrations.student_id intersect select student_course_attendance.student_id"
        },
        {
            "utterance": "Give the ids for students who did either .",
            "sql": "select student_course_registrations.student_id union select student_course_attendance.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the id of courses which are registered or attended by student whose id is 121?",
        "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
    },
    "interaction": [
        {
            "utterance": "Find the course ids of the courses registered by the student with id 171 .",
            "sql": "select student_course_registrations.course_id where student_course_registrations.student_id = value"
        },
        {
            "utterance": "Find the same for the student with id 121 .",
            "sql": "select student_course_registrations.course_id where student_course_registrations.student_id = value"
        },
        {
            "utterance": "Give also the id of courses which are attended by that student .",
            "sql": "select student_course_registrations.course_id where student_course_registrations.student_id = value union select student_course_attendance.course_id where student_course_attendance.student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 16,
    "final": {
        "utterance": "What are all info of students who registered courses but not attended courses?",
        "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    "interaction": [
        {
            "utterance": "How many students registered for courses ?",
            "sql": "select count ( student_course_registrations.* )"
        },
        {
            "utterance": "Of them , how many did not attend course 301 ?",
            "sql": "select count ( student_course_registrations.* ) where student_course_registrations.student_id not in ( select student_course_attendance.student_id where student_course_attendance.course_id = value )"
        },
        {
            "utterance": "How many did not even attend any course ?",
            "sql": "select count ( student_course_registrations.* ) where student_course_registrations.student_id not in ( select student_course_attendance.student_id )"
        },
        {
            "utterance": "Give all the info instead .",
            "sql": "select student_course_registrations.* where student_course_registrations.student_id not in ( select student_course_attendance.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_assessment",
    "interaction_id": 17,
    "final": {
        "utterance": "List the id of students who registered course statistics in the order of registration date.",
        "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    "interaction": [
        {
            "utterance": "Give the registration dates of registrations for the course 305 .",
            "sql": "select student_course_registrations.registration_date where student_course_registrations.course_id = value"
        },
        {
            "utterance": "How about for the course statistics ?",
            "sql": "select student_course_registrations.registration_date where courses.course_name = value"
        },
        {
            "utterance": "Give the student ids , ordered by the registration date .",
            "sql": "select student_course_registrations.student_id where courses.course_name = value order_by student_course_registrations.registration_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the wrestler with the fewest days held?",
        "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the wrestlers ?",
            "sql": "select wrestler.name"
        },
        {
            "utterance": "Who has the most number of days held",
            "sql": "select wrestler.name order_by wrestler.days_held desc limit_value"
        },
        {
            "utterance": "Least number instead .",
            "sql": "select wrestler.name order_by wrestler.days_held asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC"
    },
    "interaction": [
        {
            "utterance": "What are the teams in elimination ?",
            "sql": "select elimination.team"
        },
        {
            "utterance": "Show the respective names of the wrestlers .",
            "sql": "select wrestler.name , elimination.team"
        },
        {
            "utterance": "Order this by increasing time .",
            "sql": "select wrestler.name , elimination.team order_by elimination.time asc"
        },
        {
            "utterance": "Decreasing instead .",
            "sql": "select wrestler.name , elimination.team order_by elimination.time desc"
        },
        {
            "utterance": "Sort by days held in the same order .",
            "sql": "select wrestler.name , elimination.team order_by wrestler.days_held desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 2,
    "final": {
        "utterance": "List the time of elimination of the wrestlers with largest days held.",
        "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which wrestler has the largest reign ?",
            "sql": "select wrestler.name order_by wrestler.reign desc limit_value"
        },
        {
            "utterance": "Largest days held instead .",
            "sql": "select wrestler.name order_by wrestler.days_held desc limit_value"
        },
        {
            "utterance": "List the elimination move of this , not the name .",
            "sql": "select elimination.elimination_move order_by wrestler.days_held desc limit_value"
        },
        {
            "utterance": "List the elimination time instead .",
            "sql": "select elimination.time order_by wrestler.days_held desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 3,
    "final": {
        "utterance": "Show times of elimination of wrestlers with days held more than 50.",
        "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"
    },
    "interaction": [
        {
            "utterance": "What are the names of the wrestlers who have more than 1 reign ?",
            "sql": "select wrestler.name where wrestler.reign > value"
        },
        {
            "utterance": "More than 50 days held instead .",
            "sql": "select wrestler.name where wrestler.days_held > value"
        },
        {
            "utterance": "Give the times of elimination only .",
            "sql": "select elimination.time where wrestler.days_held > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 4,
    "final": {
        "utterance": "Show teams that have suffered more than three eliminations.",
        "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "What are the teams who have suffered elimination ?",
            "sql": "select elimination.team"
        },
        {
            "utterance": "Which ones have had only two eliminations ?",
            "sql": "select elimination.team group_by elimination.team having count ( elimination.* ) = value"
        },
        {
            "utterance": "Which ones have had more than three ?",
            "sql": "select elimination.team group_by elimination.team having count ( elimination.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the most common reigns of wrestlers.",
        "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the reigns of the wrestlers .",
            "sql": "select wrestler.reign"
        },
        {
            "utterance": "What is the least common reign ?",
            "sql": "select wrestler.reign group_by wrestler.reign order_by count ( wrestler.* ) asc limit_value"
        },
        {
            "utterance": "Opposite ?",
            "sql": "select wrestler.reign group_by wrestler.reign order_by count ( wrestler.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 6,
    "final": {
        "utterance": "List the locations that are shared by more than two wrestlers.",
        "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "List the events of the wrestlers .",
            "sql": "select wrestler.event"
        },
        {
            "utterance": "Locations instead .",
            "sql": "select wrestler.location"
        },
        {
            "utterance": "Which ones are shared by one wrestler ?",
            "sql": "select wrestler.location group_by wrestler.location having count ( wrestler.* ) = value"
        },
        {
            "utterance": "More than two instead ?",
            "sql": "select wrestler.location group_by wrestler.location having count ( wrestler.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of wrestlers that have not been eliminated.",
        "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"
    },
    "interaction": [
        {
            "utterance": "Show the names of the wrestlers .",
            "sql": "select wrestler.name"
        },
        {
            "utterance": "Who has been eliminated ?",
            "sql": "select wrestler.name where wrestler.wrestler_id in ( select elimination.wrestler_id )"
        },
        {
            "utterance": "Who has n't been ?",
            "sql": "select wrestler.name where wrestler.wrestler_id not in ( select elimination.wrestler_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wrestler",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    "interaction": [
        {
            "utterance": "Give the teams that have wrestlers eliminated by the move `` Go To Sleep ''",
            "sql": "select elimination.team where elimination.elimination_move = value"
        },
        {
            "utterance": "How about the ones eliminated by `` Orton ''",
            "sql": "select elimination.team where elimination.eliminated_by = value"
        },
        {
            "utterance": "Give the ones that were also eliminated by `` Benjamin ''",
            "sql": "select elimination.team where elimination.eliminated_by = value intersect select elimination.team where elimination.eliminated_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 0,
    "final": {
        "utterance": "How many residents does each property have? List property id and resident count.",
        "sql": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id"
    },
    "interaction": [
        {
            "utterance": "How many residents are there total ?",
            "sql": "select count ( residents.* )"
        },
        {
            "utterance": "How many different properties are there ?",
            "sql": "select count ( distinct properties.property_id )"
        },
        {
            "utterance": "Show the property id and count of residents for the property with the most residents .",
            "sql": "select properties.property_id , count ( * ) group_by properties.property_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show this data for each property .",
            "sql": "select properties.property_id , count ( * ) group_by properties.property_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"
    },
    "interaction": [
        {
            "utterance": "What is the id of the parent organization to the 'Robel-Schulist Group ' ?",
            "sql": "select organizations.parent_organization_id where organizations.organization_details = value"
        },
        {
            "utterance": "What is the detail of this organization id ?",
            "sql": "select organizations.organization_details where organizations.organization_id = ( select organizations.parent_organization_id where organizations.organization_details = value )"
        },
        {
            "utterance": "What are the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party ' ?",
            "sql": "select distinct services.service_type_code where organizations.organization_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 2,
    "final": {
        "utterance": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "sql": "SELECT t1.resident_id ,  t1.other_details ,  count(*) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id  =  t2.resident_id GROUP BY t1.resident_id ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many residential services were requested ?",
            "sql": "select count ( residents_services.* )"
        },
        {
            "utterance": "How about for each resident ?",
            "sql": "select residents.resident_id , count ( * ) group_by residents.resident_id"
        },
        {
            "utterance": "Also show the other details for each resident .",
            "sql": "select residents.resident_id , residents.other_details , count ( * ) group_by residents.resident_id"
        },
        {
            "utterance": "Order the previous table in descending order of the number of requests .",
            "sql": "select residents.resident_id , residents.other_details , count ( * ) group_by residents.resident_id order_by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the maximum number that a certain service is provided? List the service id, details and number.",
        "sql": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the ID numbers for all the different services that are available .",
            "sql": "select distinct services.service_id"
        },
        {
            "utterance": "How many times has a resident service of the type 'Moving Out ' been provided ?",
            "sql": "select count ( * ) where services.service_type_code = value"
        },
        {
            "utterance": "Which services have not been provided , if any ?",
            "sql": "select count ( services.* ) where services.service_id not in ( select distinct services.service_id )"
        },
        {
            "utterance": "What is the most number of times any particular service was provided ?",
            "sql": "select count ( * ) group_by services.service_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What service was it ? Show the service_id and service_details .",
            "sql": "select services.service_id , services.service_details , count ( * ) group_by services.service_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the id and details of the customers who have at least 3 events?",
        "sql": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Show the customer id numbers for those who have events .",
            "sql": "select customers.customer_id"
        },
        {
            "utterance": "How about those with at least 3 ?",
            "sql": "select customers.customer_id group_by customers.customer_id having count ( * ) > = value"
        },
        {
            "utterance": "Also show customer details .",
            "sql": "select customers.customer_id , customers.customer_details group_by customers.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 5,
    "final": {
        "utterance": "Which events have the number of notes between one and three? List the event id and the property id.",
        "sql": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3"
    },
    "interaction": [
        {
            "utterance": "Show any customer event id numbers that have corresponding notes .",
            "sql": "select customer_events.customer_event_id"
        },
        {
            "utterance": "How many appear have more than 5 notes ?",
            "sql": "select customer_events.customer_event_id group_by customer_events.customer_event_id having count ( * ) > value"
        },
        {
            "utterance": "How about between 1 and 3 notes ? Also show property id .",
            "sql": "select customer_events.customer_event_id , customer_events.property_id group_by customer_events.customer_event_id having count ( * ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"
    },
    "interaction": [
        {
            "utterance": "What is the earliest status record date ?",
            "sql": "select min ( timed_status_of_things.date_and_date )"
        },
        {
            "utterance": "Which things have a status record before the date '2017-06-19 02:59:21 ' ?",
            "sql": "select timed_status_of_things.* where timed_status_of_things.date_and_date < value"
        },
        {
            "utterance": "Also show the things that have the status 'Close ' .",
            "sql": "select timed_status_of_things.* where timed_status_of_things.status_of_thing_code = value or timed_status_of_things.date_and_date < value"
        },
        {
            "utterance": "Show the distinct ids and also the type of thing .",
            "sql": "select distinct things.thing_id , things.type_of_thing_code where timed_status_of_things.status_of_thing_code = value or timed_status_of_things.date_and_date < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 7,
    "final": {
        "utterance": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'"
    },
    "interaction": [
        {
            "utterance": "What are all the different types of service details for things ?",
            "sql": "select distinct things.service_details"
        },
        {
            "utterance": "How many of each ?",
            "sql": "select count ( things.* ) , things.service_details group_by things.service_details"
        },
        {
            "utterance": "Show only the things with the detail being 'Unsatisfied ' .",
            "sql": "select things.* where things.service_details = value"
        },
        {
            "utterance": "At how many distinct locations have they been located ?",
            "sql": "select count ( distinct timed_locations_of_things.location_code ) where things.service_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 8,
    "final": {
        "utterance": "Which organizations are not a parent organization of others? List the organization id.",
        "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations"
    },
    "interaction": [
        {
            "utterance": "What are all the different parent organization ids ?",
            "sql": "select distinct organizations.parent_organization_id"
        },
        {
            "utterance": "How many organizations are their own parent ?",
            "sql": "select count ( organizations.* ) where organizations.parent_organization_id = organizations.organization_id"
        },
        {
            "utterance": "Which organizations are not a parent to any others ?",
            "sql": "select organizations.organization_id except select organizations.parent_organization_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_and_lot",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the resident details containing the substring 'Miss'?",
        "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'"
    },
    "interaction": [
        {
            "utterance": "Order the resident list alphabetically by other details .",
            "sql": "select residents.* order_by residents.other_details"
        },
        {
            "utterance": "How many residents have the title of 'Prof ' ?",
            "sql": "select count ( residents.* ) where residents.other_details like value"
        },
        {
            "utterance": "Alright , what about 'Miss ' ?",
            "sql": "select residents.other_details where residents.other_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "What are the different attribute data types ?",
            "sql": "select distinct attribute_definitions.attribute_data_type"
        },
        {
            "utterance": "How many attributes are of each type ?",
            "sql": "select attribute_definitions.attribute_data_type , count ( attribute_definitions.* ) group_by attribute_definitions.attribute_data_type"
        },
        {
            "utterance": "What datatypes have more than 1 ?",
            "sql": "select attribute_definitions.attribute_data_type group_by attribute_definitions.attribute_data_type having count ( attribute_definitions.* ) > value"
        },
        {
            "utterance": "How about more than 3 ?",
            "sql": "select attribute_definitions.attribute_data_type group_by attribute_definitions.attribute_data_type having count ( attribute_definitions.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 1,
    "final": {
        "utterance": "Find all the catalog publishers whose name contains \"Murray\"",
        "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
    },
    "interaction": [
        {
            "utterance": "How many different catalog publishers are there ?",
            "sql": "select count ( distinct catalogs.catalog_publisher )"
        },
        {
            "utterance": "How many have a name that contaSELECT count ( distinct ( catalog_publisher ) ) FROM catalogs WHERE catalog_publisher LIKE `` % Murray % '' ins `` Murray ''",
            "sql": "select count ( distinct catalogs.catalog_publisher ) where catalogs.catalog_publisher like value"
        },
        {
            "utterance": "Which ones ?",
            "sql": "select distinct ( catalogs.catalog_publisher ) where catalogs.catalog_publisher like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 2,
    "final": {
        "utterance": "Which catalog publisher has published the most catalogs?",
        "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the catalog ids and their respective catalog publisher ?",
            "sql": "select catalogs.catalog_id , catalogs.catalog_publisher"
        },
        {
            "utterance": "How many catalogs have each publisher published ?",
            "sql": "select catalogs.catalog_publisher , count ( catalogs.* ) group_by catalogs.catalog_publisher"
        },
        {
            "utterance": "Which publisher has the least ?",
            "sql": "select catalogs.catalog_publisher group_by catalogs.catalog_publisher order_by count ( catalogs.* ) asc limit_value"
        },
        {
            "utterance": "How about the most ?",
            "sql": "select catalogs.catalog_publisher group_by catalogs.catalog_publisher order_by count ( catalogs.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"
    },
    "interaction": [
        {
            "utterance": "Show all the catalog information and their respective levels numbers !",
            "sql": "select *"
        },
        {
            "utterance": "Show me only those with a level number greater than five .",
            "sql": "select * where catalog_structure.catalog_level_number > value"
        },
        {
            "utterance": "Show me just the names of these catalogs ?",
            "sql": "select catalogs.catalog_name where catalog_structure.catalog_level_number > value"
        },
        {
            "utterance": "Also show their publication dates .",
            "sql": "select catalogs.catalog_name , catalogs.date_of_publication where catalog_structure.catalog_level_number > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the entry names of catalog with the attribute possessed by most entries.",
        "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "How many different attributes are there ?",
            "sql": "select count ( attribute_definitions.* )"
        },
        {
            "utterance": "What is the id of the one that is used in the most catalog content entries ?",
            "sql": "select catalog_contents_additional_attributes.attribute_id group_by catalog_contents_additional_attributes.attribute_id order_by count ( catalog_contents_additional_attributes.* ) desc limit_value"
        },
        {
            "utterance": "Which catalog content entries use this attribute value ?",
            "sql": "select catalog_contents_additional_attributes.* where catalog_contents_additional_attributes.attribute_id = ( select catalog_contents_additional_attributes.attribute_id group_by catalog_contents_additional_attributes.attribute_id order_by count ( catalog_contents_additional_attributes.* ) desc limit_value )"
        },
        {
            "utterance": "Show me just their catalog entry names ?",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents_additional_attributes.attribute_id = ( select catalog_contents_additional_attributes.attribute_id group_by catalog_contents_additional_attributes.attribute_id order_by count ( catalog_contents_additional_attributes.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the entry name of the most expensive catalog (in USD)?",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are prices of each catalog entry id ?",
            "sql": "select catalog_contents.catalog_entry_id , catalog_contents.price_in_dollars , catalog_contents.price_in_euros , catalog_contents.price_in_pounds"
        },
        {
            "utterance": "Show me only the prices in USD !",
            "sql": "select catalog_contents.catalog_entry_id , catalog_contents.price_in_dollars"
        },
        {
            "utterance": "Which are the contents of the catalog with the highest one ?",
            "sql": "select catalog_contents.* order_by catalog_contents.price_in_dollars desc limit_value"
        },
        {
            "utterance": "What is its entry name ?",
            "sql": "select catalog_contents.catalog_entry_name order_by catalog_contents.price_in_dollars desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the level name of the cheapest catalog (in USD)?",
        "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the prices of each catalog in USD ?",
            "sql": "select catalog_contents.catalog_entry_id , catalog_contents.price_in_dollars"
        },
        {
            "utterance": "What is the one with the highest price ?",
            "sql": "select * order_by catalog_contents.price_in_dollars desc limit_value"
        },
        {
            "utterance": "How about the lowest ?",
            "sql": "select * order_by catalog_contents.price_in_dollars limit_value"
        },
        {
            "utterance": "What is its catalog level name ?",
            "sql": "select catalog_structure.catalog_level_name order_by catalog_contents.price_in_dollars limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the average and minimum price (in Euro) of all products?",
        "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"
    },
    "interaction": [
        {
            "utterance": "What are all the catalog entry names ?",
            "sql": "select catalog_contents.catalog_entry_name"
        },
        {
            "utterance": "What are the prices in euros of each ?",
            "sql": "select catalog_contents.catalog_entry_name , catalog_contents.price_in_euros"
        },
        {
            "utterance": "Show me the average price in euros !",
            "sql": "select avg ( catalog_contents.price_in_euros )"
        },
        {
            "utterance": "Also provide the lowest price !",
            "sql": "select avg ( catalog_contents.price_in_euros ) , min ( catalog_contents.price_in_euros )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the product with the highest height? Give me the catalog entry name.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name , length , height , and width of every catalog product .",
            "sql": "select catalog_contents.catalog_entry_name , catalog_contents.height , catalog_contents.width , catalog_contents.length"
        },
        {
            "utterance": "Can you show me the list sorted on width FROM greatest to least !",
            "sql": "select catalog_contents.catalog_entry_name , catalog_contents.height , catalog_contents.width , catalog_contents.length order_by catalog_contents.width desc"
        },
        {
            "utterance": "How about based on height !",
            "sql": "select catalog_contents.catalog_entry_name , catalog_contents.height , catalog_contents.width , catalog_contents.length order_by catalog_contents.height desc"
        },
        {
            "utterance": "Show me the entry_name of just the first row !",
            "sql": "select catalog_contents.catalog_entry_name order_by catalog_contents.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of the product that has the smallest capacity.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the distinct capacity each catalog can have ?",
            "sql": "select distinct catalog_contents.capacity"
        },
        {
            "utterance": "Which one is the most common ?",
            "sql": "select catalog_contents.capacity group_by catalog_contents.capacity order_by count ( catalog_contents.* ) desc limit_value"
        },
        {
            "utterance": "Which one is the smallest ?",
            "sql": "select catalog_contents.capacity order_by catalog_contents.capacity asc limit_value"
        },
        {
            "utterance": "What is the name of a catalog product that has this ?",
            "sql": "select catalog_contents.catalog_entry_name order_by catalog_contents.capacity asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of all the products whose stock number starts with \"2\".",
        "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
    },
    "interaction": [
        {
            "utterance": "What are all the names of all the catalog products ?",
            "sql": "select catalog_contents.catalog_entry_name"
        },
        {
            "utterance": "Could you also show me their product stock numbers ? !",
            "sql": "select catalog_contents.catalog_entry_name , catalog_contents.product_stock_number"
        },
        {
            "utterance": "How many have stock number that starts with `` 2 '' ?",
            "sql": "select count ( catalog_contents.* ) where catalog_contents.product_stock_number like value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents.product_stock_number like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of catalog entries with level number 8.",
        "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
    },
    "interaction": [
        {
            "utterance": "Show me each catalog entry id and their catalog level numbers .",
            "sql": "select catalog_contents_additional_attributes.catalog_entry_id , catalog_contents_additional_attributes.catalog_level_number"
        },
        {
            "utterance": "Which ones have more than one catalog level number ?",
            "sql": "select catalog_contents_additional_attributes.catalog_entry_id , catalog_contents_additional_attributes.catalog_level_number group_by catalog_contents_additional_attributes.catalog_entry_id having count ( distinct catalog_contents_additional_attributes.catalog_level_number ) > value"
        },
        {
            "utterance": "Which ones have a catalog level number of 8 ?",
            "sql": "select catalog_contents_additional_attributes.catalog_entry_id , catalog_contents_additional_attributes.catalog_level_number where catalog_contents_additional_attributes.catalog_level_number = value"
        },
        {
            "utterance": "Show me the entry names of each !",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents_additional_attributes.catalog_level_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    "interaction": [
        {
            "utterance": "What catalog products have a length smaller than 3 ?",
            "sql": "select catalog_contents.* where catalog_contents.length < value"
        },
        {
            "utterance": "Show me their names !",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents.length < value"
        },
        {
            "utterance": "Also include those with a height that are greater than 5 !",
            "sql": "select catalog_contents.catalog_entry_name where catalog_contents.length < value or catalog_contents.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "product_catalog",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"
    },
    "interaction": [
        {
            "utterance": "For each catalog id , show the attribute ids and values ! !",
            "sql": "select catalog_contents_additional_attributes.attribute_id , catalog_contents_additional_attributes.attribute_value"
        },
        {
            "utterance": "Show me just those that a value of 1 !",
            "sql": "select catalog_contents_additional_attributes.attribute_id , catalog_contents_additional_attributes.attribute_value where catalog_contents_additional_attributes.attribute_value = value"
        },
        {
            "utterance": "Actually , how about those with a value of 0 ?",
            "sql": "select catalog_contents_additional_attributes.attribute_id , catalog_contents_additional_attributes.attribute_value where catalog_contents_additional_attributes.attribute_value = value"
        },
        {
            "utterance": "What are the just the names and attribute IDs of each ?",
            "sql": "select attribute_definitions.attribute_name , attribute_definitions.attribute_id where catalog_contents_additional_attributes.attribute_value = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the location of the festival with the largest number of audience?",
        "sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What festivals are there ?",
            "sql": "select festival_detail.festival_name"
        },
        {
            "utterance": "What is the audience size for each of these festivals ?",
            "sql": "select festival_detail.festival_name , festival_detail.num_of_audience"
        },
        {
            "utterance": "Which of these festivals has the largest audience ?",
            "sql": "select festival_detail.festival_name where festival_detail.num_of_audience = ( select max ( festival_detail.num_of_audience ) )"
        },
        {
            "utterance": "Where is this festival located ?",
            "sql": "select festival_detail.location order_by festival_detail.num_of_audience desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of the three most recent festivals.",
        "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Tell me the names of all the festivals available .",
            "sql": "select festival_detail.festival_name"
        },
        {
            "utterance": "When did these festivals occur ?",
            "sql": "select festival_detail.festival_name , festival_detail.year"
        },
        {
            "utterance": "Which one of these festivals occurred most recently ?",
            "sql": "select festival_detail.festival_name order_by festival_detail.year desc limit_value"
        },
        {
            "utterance": "Ok , what about the top three most recent ones ?",
            "sql": "select festival_detail.festival_name order_by festival_detail.year desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 2,
    "final": {
        "utterance": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "sql": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID"
    },
    "interaction": [
        {
            "utterance": "Show me the names of the artworks .",
            "sql": "select artwork.name"
        },
        {
            "utterance": "Can you also tell me the types of these artworks ?",
            "sql": "select artwork.name , artwork.type"
        },
        {
            "utterance": "Which of these artworks were nominated in some festival ?",
            "sql": "select artwork.name"
        },
        {
            "utterance": "What were the names of these festivals ?",
            "sql": "select artwork.name , festival_detail.festival_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 3,
    "final": {
        "utterance": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007"
    },
    "interaction": [
        {
            "utterance": "Tell me about the names of all the artworks .",
            "sql": "select artwork.name"
        },
        {
            "utterance": "What are the types of all these artworks ?",
            "sql": "select distinct artwork.type"
        },
        {
            "utterance": "Which of these were nominated ?",
            "sql": "select distinct artwork.type"
        },
        {
            "utterance": "Which of these were nominated in 2007 ?",
            "sql": "select distinct artwork.type where festival_detail.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of artworks in ascending order of the year they are nominated in.",
        "sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year"
    },
    "interaction": [
        {
            "utterance": "List the names of all the artworks .",
            "sql": "select artwork.name"
        },
        {
            "utterance": "At which festivals were these artworks nominated ?",
            "sql": "select artwork.name , festival_detail.festival_name"
        },
        {
            "utterance": "What year were these artworks nominated ?",
            "sql": "select artwork.name , festival_detail.year"
        },
        {
            "utterance": "Can you list them in ascending order ?",
            "sql": "select artwork.name order_by festival_detail.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the festivals ?",
            "sql": "select festival_detail.festival_name"
        },
        {
            "utterance": "What are the nominated artworks of these festivals ?",
            "sql": "select festival_detail.festival_name , artwork.name"
        },
        {
            "utterance": "Show the types of these artworks given these festivals .",
            "sql": "select festival_detail.festival_name , artwork.type"
        },
        {
            "utterance": "Which of these festivals have type `` Program Talent Show '' ?",
            "sql": "select festival_detail.festival_name where artwork.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "List the names of the festivals .",
            "sql": "select festival_detail.festival_name"
        },
        {
            "utterance": "Show me the names of the nominated artworks for the festivals listed .",
            "sql": "select festival_detail.festival_name , artwork.name"
        },
        {
            "utterance": "Which of these festivals have at least two nominations for artworks ?",
            "sql": "select festival_detail.festival_name group_by festival_detail.festival_id having count ( * ) > = value"
        },
        {
            "utterance": "Show me their ids as well .",
            "sql": "select nomination.festival_id , festival_detail.festival_name group_by nomination.festival_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the id, name of each festival and the number of artworks it has nominated.",
        "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID"
    },
    "interaction": [
        {
            "utterance": "Show me the ids of the festivals .",
            "sql": "select festival_detail.festival_id"
        },
        {
            "utterance": "Show me the names as well .",
            "sql": "select festival_detail.festival_id , festival_detail.festival_name"
        },
        {
            "utterance": "Add in the artworks nominated as well .",
            "sql": "select festival_detail.festival_id , festival_detail.festival_name , artwork.name"
        },
        {
            "utterance": "Instead of showing the artworks nominated , show me the number of nominated artworks for each of these festivals .",
            "sql": "select nomination.festival_id , festival_detail.festival_name , count ( * ) group_by nomination.festival_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 8,
    "final": {
        "utterance": "List the most common type of artworks.",
        "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the artworks .",
            "sql": "select artwork.name"
        },
        {
            "utterance": "Show me their types as well .",
            "sql": "select artwork.name , artwork.type"
        },
        {
            "utterance": "What is the number of artworks for each type ?",
            "sql": "select artwork.type , count ( artwork.* ) group_by artwork.type"
        },
        {
            "utterance": "Which of these types is the most common ?",
            "sql": "select artwork.type group_by artwork.type order_by count ( artwork.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 9,
    "final": {
        "utterance": "List the year in which there are more than one festivals.",
        "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show all the names of all the festivals .",
            "sql": "select festival_detail.festival_name"
        },
        {
            "utterance": "Show me the corresponding year for these festivals .",
            "sql": "select festival_detail.festival_name , festival_detail.year"
        },
        {
            "utterance": "What were the amount of festivals for each of these years ?",
            "sql": "select festival_detail.year , count ( festival_detail.* ) group_by festival_detail.year"
        },
        {
            "utterance": "Which of these years has more than one festival ?",
            "sql": "select festival_detail.year group_by festival_detail.year having count ( festival_detail.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 10,
    "final": {
        "utterance": "List the name of artworks that are not nominated.",
        "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)"
    },
    "interaction": [
        {
            "utterance": "Tell me everything about all the artworks .",
            "sql": "select artwork.*"
        },
        {
            "utterance": "List only the names of all these artworks .",
            "sql": "select artwork.name"
        },
        {
            "utterance": "Which of these were nominated ?",
            "sql": "select artwork.name"
        },
        {
            "utterance": "Which of those were n't ?",
            "sql": "select artwork.name where artwork.artwork_id not in ( select nomination.artwork_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "entertainment_awards",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the number of audience in year 2008 or 2010.",
        "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the festivals .",
            "sql": "select festival_detail.festival_name"
        },
        {
            "utterance": "Show the year for each of them .",
            "sql": "select festival_detail.festival_name , festival_detail.year"
        },
        {
            "utterance": "Can you only show the audience size for year 2008 ?",
            "sql": "select festival_detail.num_of_audience where festival_detail.year = value"
        },
        {
            "utterance": "Can you only show the audience sizes for year 2008 and 2010 ?",
            "sql": "select festival_detail.num_of_audience where festival_detail.year = value or festival_detail.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""
    },
    "interaction": [
        {
            "utterance": "Show me the mobile number of the student Emma Rohan .",
            "sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value"
        },
        {
            "utterance": "What about her email ?",
            "sql": "select students.email_address where students.first_name = value and students.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the maximum and minimum monthly rental for all student addresses.",
        "sql": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all students .",
            "sql": "select students.first_name , students.last_name"
        },
        {
            "utterance": "What are their monthly rentals ?",
            "sql": "select students.first_name , students.last_name , student_addresses.monthly_rental"
        },
        {
            "utterance": "Show me the maximum and minimum of them .",
            "sql": "select max ( student_addresses.monthly_rental ) , min ( student_addresses.monthly_rental )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the first names of teachers whose email address contains the word \"man\".",
        "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all teachers .",
            "sql": "select teachers.first_name , teachers.last_name"
        },
        {
            "utterance": "What are their mobile numbers ?",
            "sql": "select teachers.first_name , teachers.last_name , teachers.cell_mobile_number"
        },
        {
            "utterance": "What about email addresses ?",
            "sql": "select teachers.first_name , teachers.last_name , teachers.email_address"
        },
        {
            "utterance": "Which ones contain the word `` man '' ?",
            "sql": "select teachers.first_name , teachers.last_name , teachers.email_address where teachers.email_address like value"
        },
        {
            "utterance": "Show me the first name only .",
            "sql": "select teachers.first_name where teachers.email_address like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the id and first name of the student that has the most number of assessment notes?",
        "sql": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many assessment notes are there ?",
            "sql": "select count ( assessment_notes.* )"
        },
        {
            "utterance": "How many does each student have ?",
            "sql": "select assessment_notes.student_id , count ( assessment_notes.* ) group_by assessment_notes.student_id"
        },
        {
            "utterance": "Give me the id and first name of the student with the largest number of them .",
            "sql": "select assessment_notes.student_id , students.first_name group_by assessment_notes.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "How many assessment notes are there ?",
            "sql": "select count ( assessment_notes.* )"
        },
        {
            "utterance": "How many does each teacher have ?",
            "sql": "select assessment_notes.teacher_id , count ( assessment_notes.* ) group_by assessment_notes.teacher_id"
        },
        {
            "utterance": "List them in the descending order of number of assessment notes .",
            "sql": "select assessment_notes.teacher_id , count ( assessment_notes.* ) group_by assessment_notes.teacher_id order_by count ( assessment_notes.* ) desc"
        },
        {
            "utterance": "Show me the ids and first name of the top 3 teachers .",
            "sql": "select assessment_notes.teacher_id , teachers.first_name group_by assessment_notes.teacher_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the id and last name of the student that has the most behavior incidents?",
        "sql": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What behavior incident types are there ?",
            "sql": "select behavior_incident.incident_type_code group_by behavior_incident.incident_type_code"
        },
        {
            "utterance": "How many behavior incidents are there ?",
            "sql": "select count ( behavior_incident.* )"
        },
        {
            "utterance": "How many does each student have ?",
            "sql": "select behavior_incident.student_id , count ( behavior_incident.* ) group_by behavior_incident.student_id"
        },
        {
            "utterance": "Show me the id and last name of the one with the largest number .",
            "sql": "select behavior_incident.student_id , students.last_name group_by behavior_incident.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "sql": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many detentions are there ?",
            "sql": "select count ( detention.* )"
        },
        {
            "utterance": "What about detentions with type code `` AFTER '' ?",
            "sql": "select count ( detention.* ) where detention.detention_type_code = value"
        },
        {
            "utterance": "How many does each teacher have ?",
            "sql": "select detention.teacher_id , teachers.last_name , count ( * ) where detention.detention_type_code = value group_by detention.teacher_id"
        },
        {
            "utterance": "Give me the id and last name of the teacher with the largest number .",
            "sql": "select detention.teacher_id , teachers.last_name where detention.detention_type_code = value group_by detention.teacher_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "sql": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the first name of all students .",
            "sql": "select students.first_name"
        },
        {
            "utterance": "What are their monthly rentals ?",
            "sql": "select students.first_name , student_addresses.monthly_rental"
        },
        {
            "utterance": "What about each student 's average rentals across different address ?",
            "sql": "select students.first_name , avg ( student_addresses.monthly_rental ) group_by students.first_name"
        },
        {
            "utterance": "Give me the id and first name of the student with the highest of them .",
            "sql": "select student_addresses.student_id , students.first_name group_by student_addresses.student_id order_by avg ( student_addresses.monthly_rental ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the id and city of the student address with the highest average monthly rental.",
        "sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the monthly rentals from student addresses .",
            "sql": "select student_addresses.monthly_rental"
        },
        {
            "utterance": "Give me the average monthly rental in terms of each address .",
            "sql": "select student_addresses.address_id , avg ( student_addresses.monthly_rental ) group_by student_addresses.address_id"
        },
        {
            "utterance": "Show me their cities .",
            "sql": "select addresses.city , student_addresses.address_id , avg ( student_addresses.monthly_rental ) group_by student_addresses.address_id"
        },
        {
            "utterance": "Give me the id and city of the one with largest average monthly rental .",
            "sql": "select student_addresses.address_id , addresses.city group_by student_addresses.address_id order_by avg ( student_addresses.monthly_rental ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the code and description of the most frequent behavior incident type?",
        "sql": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What behavior incident types are there ?",
            "sql": "select behavior_incident.incident_type_code group_by behavior_incident.incident_type_code"
        },
        {
            "utterance": "How many behavior incidents are there in terms of each type ?",
            "sql": "select behavior_incident.incident_type_code , count ( behavior_incident.* ) group_by behavior_incident.incident_type_code"
        },
        {
            "utterance": "Show me the code and description of the most frequent one of them .",
            "sql": "select behavior_incident.incident_type_code , ref_incident_type.incident_type_description group_by behavior_incident.incident_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the code and description of the least frequent detention type ?",
        "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What detention types are there ?",
            "sql": "select detention.detention_type_code group_by detention.detention_type_code"
        },
        {
            "utterance": "How many detentions are there in terms of each type ?",
            "sql": "select detention.detention_type_code , count ( detention.* ) group_by detention.detention_type_code"
        },
        {
            "utterance": "Show me the code and description of the least frequent one of them .",
            "sql": "select detention.detention_type_code , ref_detention_type.detention_type_description group_by detention.detention_type_code order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\""
    },
    "interaction": [
        {
            "utterance": "How many assessment notes are there ?",
            "sql": "select count ( assessment_notes.* )"
        },
        {
            "utterance": "Show me the first name of students that had assessment notes in record .",
            "sql": "select students.first_name"
        },
        {
            "utterance": "When did Fanny have assessment nodes ?",
            "sql": "select assessment_notes.date_of_notes where students.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\""
    },
    "interaction": [
        {
            "utterance": "How many assessment notes are there ?",
            "sql": "select count ( assessment_notes.* )"
        },
        {
            "utterance": "Show me the last name of teachers that had assessment notes in record .",
            "sql": "select teachers.last_name"
        },
        {
            "utterance": "Give me the texts of assessment notes that Schuster had .",
            "sql": "select assessment_notes.text_of_notes where teachers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\""
    },
    "interaction": [
        {
            "utterance": "How many behavior incidents are there in record ?",
            "sql": "select count ( behavior_incident.* )"
        },
        {
            "utterance": "Show me the last name of students that were in any incidents .",
            "sql": "select students.last_name"
        },
        {
            "utterance": "Give me the start and end dates of Fahey 's ones .",
            "sql": "select behavior_incident.date_incident_start , behavior_incident.date_incident_end where students.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the start and end dates of detentions of teachers with last name \"Schultz\".",
        "sql": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\""
    },
    "interaction": [
        {
            "utterance": "How many detentions are there in record ?",
            "sql": "select count ( detention.* )"
        },
        {
            "utterance": "Show me the last name of teachers that were in any detentions .",
            "sql": "select teachers.last_name"
        },
        {
            "utterance": "Give me the start and end dates of Schultz 's ones .",
            "sql": "select detention.datetime_detention_start , detention.datetime_detention_end where teachers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the id and zip code of the address with the highest monthly rental?",
        "sql": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the monthly rentals for all student addresses .",
            "sql": "select student_addresses.address_id , student_addresses.monthly_rental"
        },
        {
            "utterance": "Give me the id of address with highest monthly rental .",
            "sql": "select student_addresses.address_id order_by student_addresses.monthly_rental desc limit_value"
        },
        {
            "utterance": "What about its zip code ?",
            "sql": "select student_addresses.address_id , addresses.zip_postcode order_by student_addresses.monthly_rental desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the cell phone number of the student whose address has the lowest monthly rental?",
        "sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the monthly rentals for all student addresses .",
            "sql": "select student_addresses.address_id , student_addresses.monthly_rental"
        },
        {
            "utterance": "Give me the id of student with the lowest of them .",
            "sql": "select student_addresses.student_id order_by student_addresses.monthly_rental asc limit_value"
        },
        {
            "utterance": "What about that student 's cell phone number ?",
            "sql": "select students.cell_mobile_number order_by student_addresses.monthly_rental asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the monthly rentals of student addresses in Texas state?",
        "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""
    },
    "interaction": [
        {
            "utterance": "Show me the monthly rentals for all student addresses .",
            "sql": "select student_addresses.address_id , student_addresses.monthly_rental"
        },
        {
            "utterance": "What are their corresponding state , province , or county ?",
            "sql": "select student_addresses.address_id , student_addresses.monthly_rental , addresses.state_province_county"
        },
        {
            "utterance": "Show me the monthly rentals from Texas .",
            "sql": "select student_addresses.monthly_rental where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the first names and last names of students with address in Wisconsin state?",
        "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\""
    },
    "interaction": [
        {
            "utterance": "How many students are there in the record ?",
            "sql": "select count ( students.* )"
        },
        {
            "utterance": "What about those with address in Wisconsin ?",
            "sql": "select count ( * ) where addresses.state_province_county = value"
        },
        {
            "utterance": "Show me the first and last names of those students .",
            "sql": "select students.first_name , students.last_name where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the line 1 and average monthly rentals of all student addresses?",
        "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id"
    },
    "interaction": [
        {
            "utterance": "How many students are there in file ?",
            "sql": "select count ( students.* )"
        },
        {
            "utterance": "What about student addresses ?",
            "sql": "select count ( student_addresses.* )"
        },
        {
            "utterance": "Show me the line 1 and average montly rentals of those addresses .",
            "sql": "select addresses.line_1 , avg ( student_addresses.monthly_rental ) group_by student_addresses.address_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\""
    },
    "interaction": [
        {
            "utterance": "Show me the first name of all teachers .",
            "sql": "select teachers.first_name"
        },
        {
            "utterance": "Which city does Lyla live ?",
            "sql": "select addresses.city where teachers.first_name = value"
        },
        {
            "utterance": "What about the zip code ?",
            "sql": "select addresses.zip_postcode where teachers.first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\""
    },
    "interaction": [
        {
            "utterance": "Show me the first name of all teachers .",
            "sql": "select teachers.first_name"
        },
        {
            "utterance": "Who live in addresses with zip code 918 ?",
            "sql": "select teachers.first_name where addresses.zip_postcode = value"
        },
        {
            "utterance": "What about their email addresses ?",
            "sql": "select teachers.email_address where addresses.zip_postcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 22,
    "final": {
        "utterance": "How many students are not involved in any behavior incident?",
        "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )"
    },
    "interaction": [
        {
            "utterance": "How many students are there in file ?",
            "sql": "select count ( students.* )"
        },
        {
            "utterance": "Give me the id of the students involved in any behavior incident .",
            "sql": "select distinct behavior_incident.student_id"
        },
        {
            "utterance": "How many students are not among those ?",
            "sql": "select count ( students.* ) where students.student_id not in ( select behavior_incident.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "behavior_monitoring",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the last names of teachers who are not involved in any detention.",
        "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id"
    },
    "interaction": [
        {
            "utterance": "Show me the last name of all teachers in file .",
            "sql": "select teachers.last_name"
        },
        {
            "utterance": "How many teachers are involved in any detention ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "Give me the last name of teachers who are not one of those .",
            "sql": "select teachers.last_name except select teachers.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 0,
    "final": {
        "utterance": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name"
    },
    "interaction": [
        {
            "utterance": "Show information for all individuals .",
            "sql": "select individuals.*"
        },
        {
            "utterance": "What are their first names , middle names and last names ?",
            "sql": "select individuals.individual_first_name , individuals.individual_middle_name , individuals.individual_last_name order_by individuals.individual_last_name"
        },
        {
            "utterance": "Order the results by the last name .",
            "sql": "select individuals.individual_first_name , individuals.individual_middle_name , individuals.individual_last_name order_by individuals.individual_last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 1,
    "final": {
        "utterance": "List all the types of forms.",
        "sql": "SELECT DISTINCT form_type_code FROM forms"
    },
    "interaction": [
        {
            "utterance": "Show all the forms .",
            "sql": "select forms.*"
        },
        {
            "utterance": "What are the distinct type codes of forms ?",
            "sql": "select distinct forms.form_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the name of the most popular party form.",
        "sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the party forms .",
            "sql": "select party_forms.*"
        },
        {
            "utterance": "Show the form name of each party form .",
            "sql": "select forms.form_name"
        },
        {
            "utterance": "Which one is the most popular party form ?",
            "sql": "select forms.form_name group_by party_forms.form_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
        "sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\""
    },
    "interaction": [
        {
            "utterance": "Return all the information for each party .",
            "sql": "select parties.*"
        },
        {
            "utterance": "Show me the information for the one with email `` enrico09 @ example.com '' .",
            "sql": "select parties.* where parties.party_email = value"
        },
        {
            "utterance": "What are their payment method and phone number ?",
            "sql": "select parties.payment_method_code , parties.party_phone where parties.party_email = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the emails of parties with the most popular party form.",
        "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What is the most popular party form ?",
            "sql": "select party_forms.* group_by party_forms.form_id order_by count ( party_forms.* ) desc limit_value"
        },
        {
            "utterance": "Find the emails of parties using this form .",
            "sql": "select parties.party_email where party_forms.form_id = ( select party_forms.form_id group_by party_forms.form_id order_by count ( party_forms.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 5,
    "final": {
        "utterance": "List all the name of organizations in order of the date formed.",
        "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC"
    },
    "interaction": [
        {
            "utterance": "Show all the organizations .",
            "sql": "select organizations.*"
        },
        {
            "utterance": "Sort them in order of the date formed .",
            "sql": "select organizations.* order_by organizations.date_formed asc"
        },
        {
            "utterance": "Just show the organization names .",
            "sql": "select organizations.organization_name order_by organizations.date_formed asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the youngest organization.",
        "sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "When was each organization formed ?",
            "sql": "select organizations.date_formed"
        },
        {
            "utterance": "Find the name of the organization formed most recently .",
            "sql": "select organizations.organization_name order_by organizations.date_formed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the organization whose name is `` Labour Party '' .",
            "sql": "select organizations.* where organizations.organization_name = value"
        },
        {
            "utterance": "What are the contact individuals for this organization ?",
            "sql": "select * where organizations.organization_name = value"
        },
        {
            "utterance": "Of these , find the last name of the latest contact individual .",
            "sql": "select individuals.individual_last_name where organizations.organization_name = value order_by organization_contact_individuals.date_contact_to desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the highest UK Vat number ?",
            "sql": "select max ( organizations.uk_vat_number )"
        },
        {
            "utterance": "Show the contact persons of the organization with this UK Vat number .",
            "sql": "select organizations.* where organizations.uk_vat_number = ( select max ( organizations.uk_vat_number ) )"
        },
        {
            "utterance": "From the results , find the last name of the first ever contact person .",
            "sql": "select individuals.individual_last_name where organizations.uk_vat_number = ( select max ( organizations.uk_vat_number ) ) order_by organization_contact_individuals.date_contact_to asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of the services that have never been used.",
        "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"
    },
    "interaction": [
        {
            "utterance": "List all the available service names .",
            "sql": "select services.service_name"
        },
        {
            "utterance": "Which of these have been used in some party service ?",
            "sql": "select services.service_name"
        },
        {
            "utterance": "How about those never used in any party service ?",
            "sql": "select services.service_name except select services.service_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of all the cities and states.",
        "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
    },
    "interaction": [
        {
            "utterance": "Show all the address information .",
            "sql": "select addresses.*"
        },
        {
            "utterance": "Find the names of all the cities .",
            "sql": "select addresses.town_city"
        },
        {
            "utterance": "Find the names of all the cities and states .",
            "sql": "select addresses.town_city union select addresses.state_province_county"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 11,
    "final": {
        "utterance": "How many cities are there in state \"Colorado\"?",
        "sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\""
    },
    "interaction": [
        {
            "utterance": "How many addresses are there ?",
            "sql": "select count ( addresses.* )"
        },
        {
            "utterance": "How many are in the state `` Colorado '' ?",
            "sql": "select count ( addresses.* ) where addresses.state_province_county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the payment method code used by more than 3 parties.",
        "sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "Show the payment method codes used by parties .",
            "sql": "select parties.payment_method_code"
        },
        {
            "utterance": "Which of them are used by more than 3 parties",
            "sql": "select parties.payment_method_code group_by parties.payment_method_code having count ( parties.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of organizations whose names contain \"Party\".",
        "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\""
    },
    "interaction": [
        {
            "utterance": "Find all the organization names .",
            "sql": "select organizations.organization_name"
        },
        {
            "utterance": "Which of them contain the string `` Party '' ?",
            "sql": "select organizations.organization_name where organizations.organization_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 14,
    "final": {
        "utterance": "How many distinct payment methods are used by parties?",
        "sql": "SELECT count(DISTINCT payment_method_code) FROM parties"
    },
    "interaction": [
        {
            "utterance": "What is the payment method code used by each party ?",
            "sql": "select parties.payment_method_code"
        },
        {
            "utterance": "How many distinct payment methods are used by parties ?",
            "sql": "select count ( distinct parties.payment_method_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 15,
    "final": {
        "utterance": "Which is the email of the party that has used the services the most number of times?",
        "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many times did each party use services ?",
            "sql": "select count ( * ) group_by parties.party_id"
        },
        {
            "utterance": "Which party used party services the most number of times ?",
            "sql": "select * group_by parties.party_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is their email ?",
            "sql": "select parties.party_email group_by parties.party_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 16,
    "final": {
        "utterance": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""
    },
    "interaction": [
        {
            "utterance": "What is the state of each address ?",
            "sql": "select addresses.state_province_county"
        },
        {
            "utterance": "What one has building name that contains `` 6862 Kaitlyn Knolls '' ?",
            "sql": "select addresses.state_province_county where addresses.line_1_number_building like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "e_government",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the name of organization that has the greatest number of contact individuals?",
        "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many contact individuals does each organization have ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "What is the name of organization that has the greatest number of contact individuals ?",
            "sql": "select organizations.organization_name group_by organizations.organization_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 0,
    "final": {
        "utterance": "Are the customers holding coupons with amount 500 bad or good?",
        "sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500"
    },
    "interaction": [
        {
            "utterance": "Show me the name of customers .",
            "sql": "select customers.first_name , customers.last_name"
        },
        {
            "utterance": "What about their coupon amounts ?",
            "sql": "select customers.first_name , customers.last_name , discount_coupons.coupon_amount"
        },
        {
            "utterance": "Show me those with amount 500 .",
            "sql": "select customers.first_name , customers.last_name , discount_coupons.coupon_amount where discount_coupons.coupon_amount = value"
        },
        {
            "utterance": "Show me if they are bad or good .",
            "sql": "select customers.good_or_bad_customer where discount_coupons.coupon_amount = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 1,
    "final": {
        "utterance": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "sql": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    "interaction": [
        {
            "utterance": "Show me the first name of all customers .",
            "sql": "select customers.first_name"
        },
        {
            "utterance": "How many bookings are there in record ?",
            "sql": "select count ( bookings.* )"
        },
        {
            "utterance": "What about that in terms of those customers ?",
            "sql": "select customers.first_name , count ( * ) group_by customers.customer_id"
        },
        {
            "utterance": "Could you also show me those customers ' ids ?",
            "sql": "select customers.customer_id , customers.first_name , count ( * ) group_by customers.customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "sql": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many payment records are there ?",
            "sql": "select count ( payments.* )"
        },
        {
            "utterance": "Show me the maximum amount paid ?",
            "sql": "select payments.amount_paid order_by payments.amount_paid desc limit_value"
        },
        {
            "utterance": "What about the total maximum amount paid by a single customer ?",
            "sql": "select sum ( payments.amount_paid ) group_by payments.customer_id order_by sum ( payments.amount_paid ) desc limit_value"
        },
        {
            "utterance": "Show me the customer id also .",
            "sql": "select payments.customer_id , sum ( payments.amount_paid ) group_by payments.customer_id order_by sum ( payments.amount_paid ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "sql": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many payments are there in record ?",
            "sql": "select count ( payments.* )"
        },
        {
            "utterance": "How many did each booking incur ?",
            "sql": "select payments.booking_id , count ( payments.* ) group_by payments.booking_id"
        },
        {
            "utterance": "Which one has the largest number ?",
            "sql": "select payments.booking_id group_by payments.booking_id order_by count ( payments.* ) desc limit_value"
        },
        {
            "utterance": "Show me its id and the amount of refund .",
            "sql": "select bookings.booking_id , bookings.amount_of_refund group_by bookings.booking_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the id of the product that is booked for 3 times?",
        "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3"
    },
    "interaction": [
        {
            "utterance": "Show me the number of products that have been booked .",
            "sql": "select products_booked.product_id"
        },
        {
            "utterance": "How many times has each of them been booked ?",
            "sql": "select products_booked.product_id , count ( products_booked.* ) group_by products_booked.product_id"
        },
        {
            "utterance": "Show me the id of the product with 3 bookings .",
            "sql": "select products_booked.product_id group_by products_booked.product_id having count ( products_booked.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the product description of the product booked with an amount of 102.76?",
        "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76"
    },
    "interaction": [
        {
            "utterance": "What are the product that have been booked ?",
            "sql": "select distinct products_booked.product_id"
        },
        {
            "utterance": "Show me the one with booked amount 102.76 .",
            "sql": "select products_booked.product_id where products_booked.booked_amount = value"
        },
        {
            "utterance": "What about its description ?",
            "sql": "select products_for_hire.product_description where products_booked.booked_amount = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "sql": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the products in file .",
            "sql": "select products_for_hire.product_name"
        },
        {
            "utterance": "How many times has Book collection A been booked ?",
            "sql": "select count ( * ) where products_for_hire.product_name = value"
        },
        {
            "utterance": "What are the start date and end date of those bookings ?",
            "sql": "select bookings.booking_start_date , bookings.booking_end_date where products_for_hire.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of products whose availability equals to 1?",
        "sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the products in file .",
            "sql": "select products_for_hire.product_name"
        },
        {
            "utterance": "Show me those with availability equal to 1 .",
            "sql": "select products_for_hire.product_name where view_product_availability.available_yn = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "sql": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the customers .",
            "sql": "select customers.first_name , customers.last_name"
        },
        {
            "utterance": "What about those good customers ?",
            "sql": "select customers.first_name , customers.last_name where customers.good_or_bad_customer = value"
        },
        {
            "utterance": "Also show me their genders .",
            "sql": "select customers.first_name , customers.last_name , customers.gender_mf where customers.good_or_bad_customer = value"
        },
        {
            "utterance": "Order them by their last name .",
            "sql": "select customers.first_name , customers.last_name , customers.gender_mf where customers.good_or_bad_customer = value order_by customers.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the maximum, minimum, and average booked count for the products booked?",
        "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked"
    },
    "interaction": [
        {
            "utterance": "How many times has any product been booked ?",
            "sql": "select count ( products_booked.* )"
        },
        {
            "utterance": "Show me the product at each time .",
            "sql": "select products_booked.product_id"
        },
        {
            "utterance": "What about their booked amount ?",
            "sql": "select products_booked.booked_count"
        },
        {
            "utterance": "Show me the maximum , minimum , and average of them .",
            "sql": "select max ( products_booked.booked_count ) , min ( products_booked.booked_count ) , avg ( products_booked.booked_count )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'"
    },
    "interaction": [
        {
            "utterance": "Show me all the product names .",
            "sql": "select products_for_hire.product_name"
        },
        {
            "utterance": "What are their description ?",
            "sql": "select products_for_hire.product_name , products_for_hire.product_description"
        },
        {
            "utterance": "What about their daily hire costs ?",
            "sql": "select products_for_hire.product_name , products_for_hire.daily_hire_cost"
        },
        {
            "utterance": "Only show the cost of those which has 'Book ' in its name .",
            "sql": "select products_for_hire.daily_hire_cost where products_for_hire.product_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 11,
    "final": {
        "utterance": "How many products are never booked with amount higher than 200?",
        "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )"
    },
    "interaction": [
        {
            "utterance": "Show me the id of products that have been booked .",
            "sql": "select distinct products_booked.product_id"
        },
        {
            "utterance": "Show me their maximum booked amount .",
            "sql": "select products_booked.product_id , max ( products_booked.booked_amount ) group_by products_booked.product_id"
        },
        {
            "utterance": "Give me the id of those which has been booked with amount higher than 200 .",
            "sql": "select products_booked.product_id where products_booked.booked_amount > value"
        },
        {
            "utterance": "What about the id of products which are not one of those ?",
            "sql": "select products_for_hire.product_id where products_for_hire.product_id not in ( select products_booked.product_id where products_booked.booked_amount > value )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( products_for_hire.* ) where products_for_hire.product_id not in ( select products_booked.product_id where products_booked.booked_amount > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"
    },
    "interaction": [
        {
            "utterance": "Show me the first name of good customers .",
            "sql": "select customers.first_name where customers.good_or_bad_customer = value"
        },
        {
            "utterance": "What coupon amounts did they own ?",
            "sql": "select discount_coupons.coupon_amount where customers.good_or_bad_customer = value"
        },
        {
            "utterance": "What about those owned by bad customers ?",
            "sql": "select discount_coupons.coupon_amount where customers.good_or_bad_customer = value"
        },
        {
            "utterance": "Show me the coupon amounts owned by both of them .",
            "sql": "select discount_coupons.coupon_amount where customers.good_or_bad_customer = value intersect select discount_coupons.coupon_amount where customers.good_or_bad_customer = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "products_for_hire",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "sql": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'"
    },
    "interaction": [
        {
            "utterance": "How many payment types are there ?",
            "sql": "select distinct payments.payment_type_code"
        },
        {
            "utterance": "Show me the date of payments using Check as payment type .",
            "sql": "select payments.payment_date where payments.payment_type_code = value"
        },
        {
            "utterance": "Also include those with amount paid higher than 300 .",
            "sql": "select payments.payment_date where payments.amount_paid > value or payments.payment_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of editors of age either 24 or 25.",
        "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25"
    },
    "interaction": [
        {
            "utterance": "Tell me Kamila Porczyk 's age .",
            "sql": "select editor.age where editor.name = value"
        },
        {
            "utterance": "How about Mariusz Zalejski 's age ?",
            "sql": "select editor.age where editor.name = value"
        },
        {
            "utterance": "Tell me the names of editors of age either 24 or 25 .",
            "sql": "select editor.name where editor.age = value or editor.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the youngest editor?",
        "sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me Szymon Wydra 's journal 's themes .",
            "sql": "select journal.theme where editor.name = value"
        },
        {
            "utterance": "How old is he ?",
            "sql": "select editor.age where editor.name = value"
        },
        {
            "utterance": "What is the name of the youngest editor ?",
            "sql": "select editor.name order_by editor.age asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the most common age of editors.",
        "sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the work types of Anna Powierza .",
            "sql": "select journal_committee.work_type where editor.name = value"
        },
        {
            "utterance": "What is her age ?",
            "sql": "select editor.age where editor.name = value"
        },
        {
            "utterance": "Tell me the most common age of editors .",
            "sql": "select editor.age group_by editor.age order_by count ( editor.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of editors and the theme of journals for which they serve on committees.",
        "sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID"
    },
    "interaction": [
        {
            "utterance": "Tell me the number of journals of editor Szymon Wydra ?",
            "sql": "select count ( * ) where editor.name = value"
        },
        {
            "utterance": "Tell me about the sales of journals of editor Szymon Wydra .",
            "sql": "select journal.sales where editor.name = value"
        },
        {
            "utterance": "What are the names of editors and the theme of journals for which they serve on committees ?",
            "sql": "select editor.name , journal.theme"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "sql": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC"
    },
    "interaction": [
        {
            "utterance": "Tell me the date of the journal with the theme Tampa Bay Buccaneers .",
            "sql": "select journal.date where journal.theme = value"
        },
        {
            "utterance": "Who is its editor ?",
            "sql": "select editor.name where journal.theme = value"
        },
        {
            "utterance": "I want to know the names and ages of editors and the theme of journals for which they serve on committees , in ascending alphabetical order of theme .",
            "sql": "select editor.name , editor.age , journal.theme order_by journal.theme asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000"
    },
    "interaction": [
        {
            "utterance": "Tell me Anna Powierza 's journal 's themes .",
            "sql": "select journal.theme where editor.name = value"
        },
        {
            "utterance": "How about her sales ?",
            "sql": "select journal.sales where editor.name = value"
        },
        {
            "utterance": "What are the names of editors that are on the committee of journals with sales bigger than 3000 ?",
            "sql": "select editor.name where journal.sales > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the id, name of each editor and the number of journal committees they are on.",
        "sql": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id"
    },
    "interaction": [
        {
            "utterance": "Tell me Marek Siudym 's age .",
            "sql": "select editor.age where editor.name = value"
        },
        {
            "utterance": "Show me his journals .",
            "sql": "select journal.theme where editor.name = value"
        },
        {
            "utterance": "Okay , now I want to know the id , name of each editor and the number of journal committees they are on .",
            "sql": "select editor.editor_id , editor.name , count ( * ) group_by editor.editor_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of editors that are on at least two journal committees.",
        "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me the sales of the journal with theme Jacksonville Jaguars .",
            "sql": "select journal.sales where journal.theme = value"
        },
        {
            "utterance": "Who is its editor ?",
            "sql": "select editor.name where journal.theme = value"
        },
        {
            "utterance": "tell me the names of editors that are on at least two journal committees .",
            "sql": "select editor.name group_by editor.name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of editors that are not on any journal committee.",
        "sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)"
    },
    "interaction": [
        {
            "utterance": "tell me the number of journal committees of editor Kamila Porczyk .",
            "sql": "select count ( * ) where editor.name = value"
        },
        {
            "utterance": "Okay , I want to know the themes of his journals .",
            "sql": "select journal.theme where editor.name = value"
        },
        {
            "utterance": "Tell me the names of editors that are not on any journal committee .",
            "sql": "select editor.name where editor.editor_id not in ( select journal_committee.editor_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "journal_committee",
    "interaction_id": 9,
    "final": {
        "utterance": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "sql": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID"
    },
    "interaction": [
        {
            "utterance": "Tell me the themes of Marek Siudym 's journals .",
            "sql": "select journal.theme where editor.name = value"
        },
        {
            "utterance": "Okay , tell me the date of the journal with theme `` at Jacksonville Jaguars '' .",
            "sql": "select journal.date where journal.theme = value"
        },
        {
            "utterance": "list the date , theme and sales of the journal which did not have any of the listed editors serving on committee .",
            "sql": "select journal.date , journal.theme , journal.sales except select journal.date , journal.theme , journal.sales"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the ids of the top three products that were purchased in the largest amount?",
        "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What is the total amount purchased for each product ?",
            "sql": "select product_suppliers.product_id , product_suppliers.total_amount_purchased"
        },
        {
            "utterance": "List the ids of products in decreasing order of their total amount purchased .",
            "sql": "select product_suppliers.product_id order_by product_suppliers.total_amount_purchased desc"
        },
        {
            "utterance": "Just give me the top three .",
            "sql": "select product_suppliers.product_id order_by product_suppliers.total_amount_purchased desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the product id and product type of the cheapest product?",
        "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the product ids .",
            "sql": "select products.product_id"
        },
        {
            "utterance": "Order them by the product price .",
            "sql": "select products.product_id order_by products.product_price"
        },
        {
            "utterance": "Show the product id and product type of the cheapest product .",
            "sql": "select products.product_id , products.product_type_code order_by products.product_price limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the number of different product types.",
        "sql": "SELECT count(DISTINCT product_type_code) FROM products"
    },
    "interaction": [
        {
            "utterance": "What are all the product types ?",
            "sql": "select products.product_type_code"
        },
        {
            "utterance": "Show me all the distinct product types .",
            "sql": "select distinct products.product_type_code"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct products.product_type_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 3,
    "final": {
        "utterance": "Return the address of customer 10.",
        "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10"
    },
    "interaction": [
        {
            "utterance": "Show all the information about customer addresses .",
            "sql": "select customer_addresses.*"
        },
        {
            "utterance": "What is the address id of customer 10 ?",
            "sql": "select customer_addresses.address_id where customer_addresses.customer_id = value"
        },
        {
            "utterance": "What are address details of customer 10 ?",
            "sql": "select addresses.address_details where customer_addresses.customer_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\""
    },
    "interaction": [
        {
            "utterance": "Show all staff information .",
            "sql": "select staff.*"
        },
        {
            "utterance": "What are the staff ids and genders of all staffs ?",
            "sql": "select staff.staff_id , staff.staff_gender"
        },
        {
            "utterance": "What are the staff ids and genders of all staffs whose job title is Department Manager ?",
            "sql": "select staff.staff_id , staff.staff_gender where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 5,
    "final": {
        "utterance": "For each payment method, return how many customers use it.",
        "sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code"
    },
    "interaction": [
        {
            "utterance": "Show all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "For each payment method , find how many customers use it .",
            "sql": "select customers.payment_method_code , count ( customers.* ) group_by customers.payment_method_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the id of the product that was ordered the most often?",
        "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the order items .",
            "sql": "select order_items.*"
        },
        {
            "utterance": "Show the number of times each product was ordered .",
            "sql": "select count ( order_items.* ) group_by order_items.product_id"
        },
        {
            "utterance": "What is the id of the product that was ordered the most often ?",
            "sql": "select order_items.product_id group_by order_items.product_id order_by count ( order_items.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the customer information .",
            "sql": "select customers.*"
        },
        {
            "utterance": "How many orders did each customer make ?",
            "sql": "select count ( customer_orders.* ) group_by customer_orders.customer_id"
        },
        {
            "utterance": "Which customer made the largest number of orders ?",
            "sql": "select * group_by customer_orders.customer_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What are the name , phone number and email address of this customer ?",
            "sql": "select customers.customer_name , customers.customer_phone , customers.customer_email group_by customer_orders.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the average price for each type of product?",
        "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all the products .",
            "sql": "select products.*"
        },
        {
            "utterance": "Group all the products by product type .",
            "sql": "select products.* group_by products.product_type_code"
        },
        {
            "utterance": "What is the average price for each type of product ?",
            "sql": "select products.product_type_code , avg ( products.product_price ) group_by products.product_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 9,
    "final": {
        "utterance": "How many department stores does the store chain South have?",
        "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
    },
    "interaction": [
        {
            "utterance": "What are all the department stores ?",
            "sql": "select department_stores.*"
        },
        {
            "utterance": "What are all the department stores that the store chain South has ?",
            "sql": "select * where department_store_chain.dept_store_chain_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where department_store_chain.dept_store_chain_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name and job title of the staff who was assigned the latest?",
        "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the staff .",
            "sql": "select staff.*"
        },
        {
            "utterance": "Sort all the staff by their assigned date in a descending manner .",
            "sql": "select * order_by staff_department_assignments.date_assigned_to desc limit_value"
        },
        {
            "utterance": "What is the name and job title of the staff who was assigned the latest ?",
            "sql": "select staff.staff_name , staff_department_assignments.job_title_code order_by staff_department_assignments.date_assigned_to desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 11,
    "final": {
        "utterance": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3"
    },
    "interaction": [
        {
            "utterance": "What are all the products ?",
            "sql": "select products.*"
        },
        {
            "utterance": "Which products are supplied by supplier id 3 ?",
            "sql": "select * where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "Give me the product type , name and price for these products .",
            "sql": "select products.product_type_code , products.product_name , products.product_price where product_suppliers.supplier_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 12,
    "final": {
        "utterance": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Find all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "Which customers have order status Pending ? Show their names .",
            "sql": "select distinct customers.customer_name where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Sort them in the order of customer id .",
            "sql": "select distinct customers.customer_name where customer_orders.order_status_code = value order_by customer_orders.customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name and address of the customers who have both New and Pending orders.",
        "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
    },
    "interaction": [
        {
            "utterance": "Show all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "Which customers have both New and Pending orders ?",
            "sql": "select * where customer_orders.order_status_code = value intersect select * where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Show these customers ' names and addresses .",
            "sql": "select customers.customer_name , customers.customer_address where customer_orders.order_status_code = value intersect select customers.customer_name , customers.customer_address where customer_orders.order_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 14,
    "final": {
        "utterance": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "Show me all the products .",
            "sql": "select products.*"
        },
        {
            "utterance": "Which products are supplied by supplier id 2 ?",
            "sql": "select product_suppliers.product_id where product_suppliers.supplier_id = value"
        },
        {
            "utterance": "Which products are more expensive than the average price of all products ?",
            "sql": "select products.product_id where products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products .",
            "sql": "select product_suppliers.product_id where product_suppliers.supplier_id = value and products.product_price > ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the id and name of the department store that has both marketing and managing department?",
        "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""
    },
    "interaction": [
        {
            "utterance": "Which department store has a marketing department ?",
            "sql": "select * where departments.department_name = value"
        },
        {
            "utterance": "Which department store has both a marketing and a managing department ?",
            "sql": "select * where departments.department_name = value intersect select * where departments.department_name = value"
        },
        {
            "utterance": "Give me their id and name .",
            "sql": "select department_stores.dept_store_id , department_stores.store_name where departments.department_name = value intersect select department_stores.dept_store_id , department_stores.store_name where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the ids of the two department store chains with the largest number of department stores?",
        "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"
    },
    "interaction": [
        {
            "utterance": "Count the number of department stores each department store chain has .",
            "sql": "select count ( department_stores.* ) group_by department_stores.dept_store_chain_id"
        },
        {
            "utterance": "Which department store chain has the largest number of department stores ?",
            "sql": "select department_stores.* group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value"
        },
        {
            "utterance": "What are the ids of the top two department store chains by number of department stores ?",
            "sql": "select department_stores.dept_store_chain_id group_by department_stores.dept_store_chain_id order_by count ( department_stores.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the id of the department with the least number of staff?",
        "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of staff for each department .",
            "sql": "select count ( staff_department_assignments.* ) group_by staff_department_assignments.department_id"
        },
        {
            "utterance": "Which department has the least number of staff ?",
            "sql": "select staff_department_assignments.* group_by staff_department_assignments.department_id order_by count ( staff_department_assignments.* ) limit_value"
        },
        {
            "utterance": "What is the id of this department ?",
            "sql": "select staff_department_assignments.department_id group_by staff_department_assignments.department_id order_by count ( staff_department_assignments.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 18,
    "final": {
        "utterance": "For each product type, return the maximum and minimum price.",
        "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all the product types .",
            "sql": "select products.product_type_code"
        },
        {
            "utterance": "Order all the products by their types .",
            "sql": "select products.* order_by products.product_type_code"
        },
        {
            "utterance": "Give me the maximum and minimum price for each product type .",
            "sql": "select products.product_type_code , max ( products.product_price ) , min ( products.product_price ) group_by products.product_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the product type whose average price is higher than the average price of all products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What are all the product types ?",
            "sql": "select products.product_type_code"
        },
        {
            "utterance": "What is the average price of products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "Find the product type whose average price is higher than the average price of all products .",
            "sql": "select products.product_type_code group_by products.product_type_code having avg ( products.product_price ) > ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the id and name of the staff who has been assigned for the shortest period.",
        "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the staff .",
            "sql": "select staff.*"
        },
        {
            "utterance": "What is the assignment period for each staff ?",
            "sql": "select staff_department_assignments.date_assigned_to - staff_department_assignments.date_assigned_from"
        },
        {
            "utterance": "Find the id and name of the staff who has been assigned for the shortest period .",
            "sql": "select staff.staff_id , staff.staff_name order_by staff_department_assignments.date_assigned_to - staff_department_assignments.date_assigned_from limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 21,
    "final": {
        "utterance": "Return the names and ids of all products whose price is between 600 and 700.",
        "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700"
    },
    "interaction": [
        {
            "utterance": "What is the price of each product ?",
            "sql": "select products.product_price"
        },
        {
            "utterance": "Which product costs between 600 and 700 ?",
            "sql": "select products.* where products.product_price between value and value"
        },
        {
            "utterance": "Give me their product names and ids .",
            "sql": "select products.product_name , products.product_id where products.product_price between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"
    },
    "interaction": [
        {
            "utterance": "Show all distinct customer ids .",
            "sql": "select distinct customer_orders.customer_id"
        },
        {
            "utterance": "When was the first time some orders were cancelled ?",
            "sql": "select min ( customer_orders.order_date ) where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Find the ids of all distinct customers who made orders after this date .",
            "sql": "select distinct customer_orders.customer_id where customer_orders.order_date > ( select min ( customer_orders.order_date ) where customer_orders.order_status_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 23,
    "final": {
        "utterance": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')"
    },
    "interaction": [
        {
            "utterance": "Show the information about all the staff department assignments .",
            "sql": "select staff_department_assignments.*"
        },
        {
            "utterance": "When was the latest department assignment of Clerical Staff ?",
            "sql": "select max ( staff_department_assignments.date_assigned_to ) where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What is id of the staff who had a Staff Department Assignment earlier than this date ?",
            "sql": "select staff_department_assignments.staff_id where staff_department_assignments.date_assigned_to < ( select max ( staff_department_assignments.date_assigned_to ) where staff_department_assignments.job_title_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names and ids of customers whose address contains TN?",
        "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\""
    },
    "interaction": [
        {
            "utterance": "Give me the information about all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "Which customers have an address that contains TN ?",
            "sql": "select customers.* where customers.customer_address like value"
        },
        {
            "utterance": "What are their names and ids ?",
            "sql": "select customers.customer_name , customers.customer_id where customers.customer_address like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 25,
    "final": {
        "utterance": "Return the name and gender of the staff who was assigned in 2016.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""
    },
    "interaction": [
        {
            "utterance": "Show all the staff department assignments .",
            "sql": "select staff_department_assignments.*"
        },
        {
            "utterance": "Which staff was assigned in 2016 ?",
            "sql": "select staff_department_assignments.* where staff_department_assignments.date_assigned_from like value"
        },
        {
            "utterance": "What are their names and genders ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.date_assigned_from like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 26,
    "final": {
        "utterance": "List the name of staff who has been assigned multiple jobs.",
        "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Return all the staff department assignments .",
            "sql": "select staff_department_assignments.*"
        },
        {
            "utterance": "Count the number of assignments for each staff .",
            "sql": "select count ( staff_department_assignments.* ) group_by staff_department_assignments.staff_id"
        },
        {
            "utterance": "List the names of staff who have been assigned multiple jobs .",
            "sql": "select staff.staff_name group_by staff_department_assignments.staff_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 27,
    "final": {
        "utterance": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details"
    },
    "interaction": [
        {
            "utterance": "Find the information about all the suppliers .",
            "sql": "select suppliers.*"
        },
        {
            "utterance": "Sort them in the alphabetical order of their addresses .",
            "sql": "select * order_by addresses.address_details"
        },
        {
            "utterance": "Show the name and phone number of all suppliers in the alphabetical order of their addresses .",
            "sql": "select suppliers.supplier_name , suppliers.supplier_phone order_by addresses.address_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the phone numbers of all customers and suppliers?",
        "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"
    },
    "interaction": [
        {
            "utterance": "Show all the customers .",
            "sql": "select customers.*"
        },
        {
            "utterance": "What are the phone numbers of all customers ?",
            "sql": "select customers.customer_phone"
        },
        {
            "utterance": "What are the phone numbers of all customers and suppliers ?",
            "sql": "select customers.customer_phone union select suppliers.supplier_phone"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 29,
    "final": {
        "utterance": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000"
    },
    "interaction": [
        {
            "utterance": "Which products were ordered more than three times ?",
            "sql": "select order_items.* group_by order_items.product_id having count ( order_items.* ) > value"
        },
        {
            "utterance": "Which products were purchased for a total amount of more than 80000 ?",
            "sql": "select product_suppliers.* group_by product_suppliers.product_id having sum ( product_suppliers.total_amount_purchased ) > value"
        },
        {
            "utterance": "Find the ids of all products that were ordered more than three times or purchased for a total amount of more than 80000 .",
            "sql": "select order_items.product_id group_by order_items.product_id having count ( order_items.* ) > value union select product_suppliers.product_id group_by product_suppliers.product_id having sum ( product_suppliers.total_amount_purchased ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 30,
    "final": {
        "utterance": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of all products ?",
            "sql": "select products.product_id , products.product_name"
        },
        {
            "utterance": "How about those with a price lower than 600 ?",
            "sql": "select products.product_id , products.product_name where products.product_price < value"
        },
        {
            "utterance": "How about those with price above 600 or below 900 ?",
            "sql": "select products.product_id , products.product_name where products.product_price < value or products.product_price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all suppliers ?",
            "sql": "select product_suppliers.supplier_id"
        },
        {
            "utterance": "What is the average of total amount purchased ?",
            "sql": "select avg ( product_suppliers.total_amount_purchased )"
        },
        {
            "utterance": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000 .",
            "sql": "select product_suppliers.supplier_id group_by product_suppliers.supplier_id having avg ( product_suppliers.total_amount_purchased ) > value or avg ( product_suppliers.total_amount_purchased ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the average amount purchased and value purchased for the supplier who supplies the most products.",
        "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "How many products does each suppler supply ?",
            "sql": "select count ( product_suppliers.* ) group_by product_suppliers.supplier_id"
        },
        {
            "utterance": "Which suppler supplies the most products ? Give me the supplier id .",
            "sql": "select product_suppliers.supplier_id group_by product_suppliers.supplier_id order_by count ( product_suppliers.* ) desc limit_value"
        },
        {
            "utterance": "What are the average amount purchased and value purchased for this supplier .",
            "sql": "select avg ( product_suppliers.total_amount_purchased ) , avg ( product_suppliers.total_value_purchased ) where product_suppliers.supplier_id = ( select product_suppliers.supplier_id group_by product_suppliers.supplier_id order_by count ( product_suppliers.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the largest and smallest customer codes?",
        "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers"
    },
    "interaction": [
        {
            "utterance": "Show all the customer codes .",
            "sql": "select customers.customer_code"
        },
        {
            "utterance": "What is the largest code among those ?",
            "sql": "select max ( customers.customer_code )"
        },
        {
            "utterance": "Show me both the largest and smallest codes .",
            "sql": "select max ( customers.customer_code ) , min ( customers.customer_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 34,
    "final": {
        "utterance": "List the names of all the distinct customers who bought a keyboard.",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\""
    },
    "interaction": [
        {
            "utterance": "Find the information for the product `` keyboard '' .",
            "sql": "select products.* where products.product_name = value"
        },
        {
            "utterance": "Return all the distinct customers who bought a keyboard .",
            "sql": "select distinct * where products.product_name = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct customers.customer_name where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 35,
    "final": {
        "utterance": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\""
    },
    "interaction": [
        {
            "utterance": "Show the information for the product `` red jeans '' .",
            "sql": "select products.* where products.product_name = value"
        },
        {
            "utterance": "Find all the distinct suppliers who supply red jeans .",
            "sql": "select distinct * where products.product_name = value"
        },
        {
            "utterance": "What are their names and phone numbers ?",
            "sql": "select distinct suppliers.supplier_name , suppliers.supplier_phone where products.product_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the highest and lowest prices of products ?",
            "sql": "select max ( products.product_price ) , min ( products.product_price )"
        },
        {
            "utterance": "What are the highest and lowest prices of products , grouped by product type ?",
            "sql": "select max ( products.product_price ) , min ( products.product_price ) , products.product_type_code group_by products.product_type_code"
        },
        {
            "utterance": "Sort the results by the product type .",
            "sql": "select max ( products.product_price ) , min ( products.product_price ) , products.product_type_code group_by products.product_type_code order_by products.product_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 37,
    "final": {
        "utterance": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date"
    },
    "interaction": [
        {
            "utterance": "Find customer orders whose status is `` Cancelled '' .",
            "sql": "select customer_orders.* where customer_orders.order_status_code = value"
        },
        {
            "utterance": "List the order id , customer id for orders in Cancelled status .",
            "sql": "select customer_orders.order_id , customer_orders.customer_id where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Sort the results by the order date .",
            "sql": "select customer_orders.order_id , customer_orders.customer_id where customer_orders.order_status_code = value order_by customer_orders.order_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 38,
    "final": {
        "utterance": "Find the names of products that were bought by at least two distinct customers.",
        "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many customers bought each product ?",
            "sql": "select count ( distinct customer_orders.customer_id ) group_by products.product_id"
        },
        {
            "utterance": "Which products were bought by at least two distinct customers ?",
            "sql": "select * group_by products.product_id having count ( distinct customer_orders.customer_id ) > = value"
        },
        {
            "utterance": "What are the product names ?",
            "sql": "select distinct products.product_name group_by products.product_id having count ( distinct customer_orders.customer_id ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 39,
    "final": {
        "utterance": "Find the names of customers who have bought at least three distinct products.",
        "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Count the number of distinct products each customer ordered .",
            "sql": "select count ( order_items.product_id ) group_by customers.customer_id"
        },
        {
            "utterance": "Find customers who have bought at least three distinct products .",
            "sql": "select distinct * group_by customers.customer_id having count ( distinct order_items.product_id ) > = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct customers.customer_name group_by customers.customer_id having count ( distinct order_items.product_id ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
    },
    "interaction": [
        {
            "utterance": "What are the name and gender of each staff ?",
            "sql": "select staff.staff_name , staff.staff_gender"
        },
        {
            "utterance": "What about the staff that has been assigned the job of Sales Person ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        },
        {
            "utterance": "What about the staff who has been assigned the job of Sales Person but never Clerical Staff ?",
            "sql": "select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value except select staff.staff_name , staff.staff_gender where staff_department_assignments.job_title_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 41,
    "final": {
        "utterance": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
    },
    "interaction": [
        {
            "utterance": "What are the id and name of each customer ?",
            "sql": "select customers.customer_id , customers.customer_name"
        },
        {
            "utterance": "Only return those for customers whose address contains WY .",
            "sql": "select customers.customer_id , customers.customer_name where customers.customer_address like value"
        },
        {
            "utterance": "Find the ids and names of customers whose address contains WY state and do not use credit cards for payment .",
            "sql": "select customers.customer_id , customers.customer_name where customers.customer_address like value and customers.payment_method_code != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "department_store",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the average price of all product clothes.",
        "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
    },
    "interaction": [
        {
            "utterance": "Show me all the products .",
            "sql": "select products.*"
        },
        {
            "utterance": "What is the average price of all products ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "What is the average price of all products whose type is Clothes .",
            "sql": "select avg ( products.product_price ) where products.product_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 0,
    "final": {
        "utterance": "How many camera lenses have a focal length longer than 15 mm?",
        "sql": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15"
    },
    "interaction": [
        {
            "utterance": "Find camera lens whose focal length is longer than 15 mm .",
            "sql": "select camera_lens.* where camera_lens.focal_length_mm > value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( camera_lens.* ) where camera_lens.focal_length_mm > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
        "sql": "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC"
    },
    "interaction": [
        {
            "utterance": "What are the brand and name of each camera lens ?",
            "sql": "select camera_lens.brand , camera_lens.name"
        },
        {
            "utterance": "Sort the results in descending order of the lens ' maximum aperture .",
            "sql": "select camera_lens.brand , camera_lens.name order_by camera_lens.max_aperture desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 2,
    "final": {
        "utterance": "List the id, color scheme, and name for all the photos.",
        "sql": "SELECT id ,  color ,  name FROM photos"
    },
    "interaction": [
        {
            "utterance": "Give me the information for all photos .",
            "sql": "select photos.*"
        },
        {
            "utterance": "List the id , color scheme , and name for each .",
            "sql": "select photos.id , photos.color , photos.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and average height of the mountains?",
        "sql": "SELECT height FROM mountain"
    },
    "interaction": [
        {
            "utterance": "What is the height of each mountain ?",
            "sql": "select max ( mountain.height ) , avg ( mountain.height )"
        },
        {
            "utterance": "What is the maximum height ?",
            "sql": "select max ( mountain.height )"
        },
        {
            "utterance": "Also show the average height .",
            "sql": "select max ( mountain.height ) , avg ( mountain.height )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the average prominence of the mountains in country 'Morocco'?",
        "sql": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'"
    },
    "interaction": [
        {
            "utterance": "What is the prominence of each mountain ?",
            "sql": "select mountain.prominence"
        },
        {
            "utterance": "What is the prominence of mountains in country 'Morocco ' ?",
            "sql": "select mountain.prominence where mountain.country = value"
        },
        {
            "utterance": "What is the average of them ?",
            "sql": "select avg ( mountain.prominence ) where mountain.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
        "sql": "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'"
    },
    "interaction": [
        {
            "utterance": "Show all the mountains .",
            "sql": "select mountain.*"
        },
        {
            "utterance": "Which mountains do not belong to the range 'Aberdare Range ' ?",
            "sql": "select mountain.* where mountain.range != value"
        },
        {
            "utterance": "What are those mountains ' name , height and prominence ?",
            "sql": "select mountain.name , mountain.height , mountain.prominence where mountain.range != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the id and name of mountains that have photos and height above 4000?",
        "sql": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000"
    },
    "interaction": [
        {
            "utterance": "Show the id and name of all mountains .",
            "sql": "select mountain.id , mountain.name"
        },
        {
            "utterance": "Show the id and name of all the mountains that have photos .",
            "sql": "select mountain.id , mountain.name"
        },
        {
            "utterance": "What are the id and name of mountains that have photos and heights above 4000 ?",
            "sql": "select mountain.id , mountain.name where mountain.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the id and name of the mountains that have at least 2 photos?",
        "sql": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the ids and names of all mountains .",
            "sql": "select mountain.id , mountain.name"
        },
        {
            "utterance": "Show the ids and names of those that have photos .",
            "sql": "select mountain.id , mountain.name"
        },
        {
            "utterance": "Which ones have at least 2 photos ?",
            "sql": "select mountain.id , mountain.name group_by mountain.id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the names of the cameras that have taken picture of the most mountains?",
        "sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the id of the camera lens that has taken picture of each mountain .",
            "sql": "select photos.camera_lens_id"
        },
        {
            "utterance": "Which one has taken pictures of the most mountains .",
            "sql": "select photos.camera_lens_id group_by photos.camera_lens_id order_by count ( photos.* ) desc limit_value"
        },
        {
            "utterance": "What is the name of this camera ?",
            "sql": "select camera_lens.name group_by camera_lens.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "sql": "SELECT T2.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'"
    },
    "interaction": [
        {
            "utterance": "For each photo , show the id of the camera lens that has taken it .",
            "sql": "select photos.camera_lens_id"
        },
        {
            "utterance": "Which photos were taken with the lens brand 'Sigma ' or 'Olympus ' ?",
            "sql": "select * where camera_lens.brand = value or camera_lens.brand = value"
        },
        {
            "utterance": "Give me the photo names .",
            "sql": "select photos.name where camera_lens.brand = value or camera_lens.brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 10,
    "final": {
        "utterance": "How many different kinds of lens brands are there?",
        "sql": "SELECT count(DISTINCT brand) FROM camera_lens"
    },
    "interaction": [
        {
            "utterance": "What is the brand of each camera lens ?",
            "sql": "select camera_lens.brand"
        },
        {
            "utterance": "How many different kinds are there ?",
            "sql": "select count ( distinct camera_lens.brand )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 11,
    "final": {
        "utterance": "How many camera lenses are not used in taking any photos?",
        "sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )"
    },
    "interaction": [
        {
            "utterance": "Show the id of all the camera lenses used for taking photos .",
            "sql": "select photos.camera_lens_id"
        },
        {
            "utterance": "Which camera lenses were not used for taking any photos ?",
            "sql": "select camera_lens.* where camera_lens.id not in ( select photos.camera_lens_id )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( camera_lens.* ) where camera_lens.id not in ( select photos.camera_lens_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 12,
    "final": {
        "utterance": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'"
    },
    "interaction": [
        {
            "utterance": "Which mountains are in the country 'Ethiopia ' ?",
            "sql": "select mountain.* where mountain.country = value"
        },
        {
            "utterance": "Which camera lenses are used to take photos of these mountains ? Return the camera lens ids .",
            "sql": "select photos.camera_lens_id where mountain.country = value"
        },
        {
            "utterance": "How many distinct kinds of camera lenses are there , among these ?",
            "sql": "select count ( distinct photos.camera_lens_id ) where mountain.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 13,
    "final": {
        "utterance": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
        "sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'"
    },
    "interaction": [
        {
            "utterance": "Which mountains are in the range 'Toubkal Atlas ' ?",
            "sql": "select mountain.* where mountain.range = value"
        },
        {
            "utterance": "Find the brands of lenses that took a picture of mountains with range 'Toubkal Atlas '",
            "sql": "select camera_lens.brand where mountain.range = value"
        },
        {
            "utterance": "Of these , which ones have also taken a picture of mountains with range 'Lasta Massif '",
            "sql": "select camera_lens.brand where mountain.range = value intersect select camera_lens.brand where mountain.range = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
        "sql": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'"
    },
    "interaction": [
        {
            "utterance": "Which pictures are taken by a lens of brand 'Sigma ' ?",
            "sql": "select * where camera_lens.brand = value"
        },
        {
            "utterance": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma ' .",
            "sql": "select mountain.name , mountain.prominence except select mountain.name , mountain.prominence where camera_lens.brand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "mountain_photos",
    "interaction_id": 15,
    "final": {
        "utterance": "List the camera lens names containing substring \"Digital\".",
        "sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\""
    },
    "interaction": [
        {
            "utterance": "Show the name of each camera lens .",
            "sql": "select camera_lens.name"
        },
        {
            "utterance": "Find the camera lens names containing substring `` Digital '' .",
            "sql": "select camera_lens.name where camera_lens.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 0,
    "final": {
        "utterance": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"
    },
    "interaction": [
        {
            "utterance": "Tell me claim 143 's settled amount .",
            "sql": "select claims.amount_settled where claims.claim_id = value"
        },
        {
            "utterance": "Tell me its number of settlements .",
            "sql": "select count ( * ) where claims.claim_id = value"
        },
        {
            "utterance": "Which claims caused more than 2 settlements or have the maximum claim value ? List the date the claim was made and the claim id .",
            "sql": "select claims.date_claim_made , claims.claim_id group_by claims.claim_id having count ( claims.* ) > value union select claims.date_claim_made , claims.claim_id where claims.amount_claimed = ( select max ( claims.amount_claimed ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 1,
    "final": {
        "utterance": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id"
    },
    "interaction": [
        {
            "utterance": "Tell me the claims id of the customer named Ellsworth Paucek .",
            "sql": "select claims.claim_id where customers.customer_details = value"
        },
        {
            "utterance": "Tell me the number of policies of the customer named Ellsworth Paucek .",
            "sql": "select count ( * ) where customers.customer_details = value"
        },
        {
            "utterance": "Which customer had at least 2 policies but did not file any claims ? List the customer details and id .",
            "sql": "select customers.customer_details , customers.customer_id group_by customers.customer_id having count ( * ) > = value except select customers.customer_details , customers.customer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 2,
    "final": {
        "utterance": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the claim settled date of the claim with id 571 .",
            "sql": "select claims.date_claim_settled where claims.claim_id = value"
        },
        {
            "utterance": "What is its settlement amount ?",
            "sql": "select claims.amount_settled where claims.claim_id = value"
        },
        {
            "utterance": "Among all the claims , what is the settlement amount of the claim with the largest claim amount ? List both the settlement amount and claim amount",
            "sql": "select claims.amount_settled , claims.amount_claimed order_by claims.amount_claimed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 3,
    "final": {
        "utterance": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the claims id of the customer named Dr. Diana Rathk .",
            "sql": "select claims.claim_id where customers.customer_details = value"
        },
        {
            "utterance": "What was their claim amount ?",
            "sql": "select claims.amount_claimed where customers.customer_details = value"
        },
        {
            "utterance": "Among all the claims , what is the amount claimed in the claim with the least amount settled ? List both the settlement amount and claim amount",
            "sql": "select claims.amount_settled , claims.amount_claimed order_by claims.amount_settled asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 4,
    "final": {
        "utterance": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )"
    },
    "interaction": [
        {
            "utterance": "Among all the claims , which one has the largest claim amount ?",
            "sql": "select claims.claim_id order_by claims.amount_settled asc limit_value"
        },
        {
            "utterance": "Which one has the least claim amount ?",
            "sql": "select claims.claim_id order_by claims.amount_settled desc limit_value"
        },
        {
            "utterance": "Which claims have a claimed amount larger than the average ? Tell me the date the claim was made and the date it was settled .",
            "sql": "select claims.date_claim_made , claims.date_claim_settled where claims.amount_claimed > ( select avg ( claims.amount_claimed ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 5,
    "final": {
        "utterance": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",
        "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )"
    },
    "interaction": [
        {
            "utterance": "Tell me claim 563 's claim amount .",
            "sql": "select claims.amount_claimed where claims.claim_id = value"
        },
        {
            "utterance": "How about that of claim 621 ?",
            "sql": "select claims.amount_claimed where claims.claim_id = value"
        },
        {
            "utterance": "Among all the claims , which settlements have a claimed amount that is no more than the average ? List the claim start date .",
            "sql": "select claims.date_claim_made where claims.amount_settled < = ( select avg ( claims.amount_settled ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 6,
    "final": {
        "utterance": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"
    },
    "interaction": [
        {
            "utterance": "Tell me claim 621 's claim amount .",
            "sql": "select claims.amount_claimed where claims.claim_id = value"
        },
        {
            "utterance": "How about its settlement claim amount ?",
            "sql": "select settlements.amount_claimed where claims.claim_id = value"
        },
        {
            "utterance": "How many settlements does each claim correspond to ? List the claim id and the number of settlements .",
            "sql": "select claims.claim_id , count ( * ) group_by claims.claim_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 7,
    "final": {
        "utterance": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the number of settlements of claim 957",
            "sql": "select count ( * ) where claims.claim_id = value"
        },
        {
            "utterance": "How about the settlement claim amount ?",
            "sql": "select settlements.amount_claimed where claims.claim_id = value"
        },
        {
            "utterance": "Which claim incurred the most number of settlements ? List the claim id , the date the claim was made , and the number",
            "sql": "select claims.claim_id , claims.date_claim_made , count ( * ) group_by claims.claim_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 8,
    "final": {
        "utterance": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
        "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the settlement amount of settlement 564 .",
            "sql": "select settlements.amount_settled where settlements.settlement_id = value"
        },
        {
            "utterance": "What is the date on which the claim was made ?",
            "sql": "select settlements.date_claim_made where settlements.settlement_id = value"
        },
        {
            "utterance": "How many settlements were made on the claim with the most recent claim settlement date ? Tell me the number and the claim id .",
            "sql": "select count ( * ) , claims.claim_id group_by claims.claim_id order_by claims.date_claim_settled desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 9,
    "final": {
        "utterance": "Of all the claims, what was the earliest date when any claim was made?",
        "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me which claim has the largest claim amount .",
            "sql": "select claims.claim_id order_by claims.amount_settled asc limit_value"
        },
        {
            "utterance": "How about the latest one ?",
            "sql": "select claims.date_claim_made order_by claims.date_claim_made desc limit_value"
        },
        {
            "utterance": "How about the earliest one ?",
            "sql": "select claims.date_claim_made order_by claims.date_claim_made asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 10,
    "final": {
        "utterance": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Tell me the policy types of the customer named Augustine Kerluke",
            "sql": "select customer_policies.policy_type_code where customers.customer_details = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( customer_policies.policy_type_code ) where customers.customer_details = value"
        },
        {
            "utterance": "Who are the customers that have had more than 1 policy ?",
            "sql": "select customers.customer_details , customers.customer_id group_by customers.customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the most popular payment method?",
        "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me payment method code of the most recent payment .",
            "sql": "select payments.payment_method_code order_by payments.date_payment_made desc limit_value"
        },
        {
            "utterance": "Tell me the amount of the most recent payment .",
            "sql": "select payments.amount_payment order_by payments.date_payment_made desc limit_value"
        },
        {
            "utterance": "What is the most popular payment method ?",
            "sql": "select payments.payment_method_code group_by payments.payment_method_code order_by count ( payments.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 12,
    "final": {
        "utterance": "With which kind of payment method were the least number of payments processed?",
        "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me how many payments are processed by MasterCard ?",
            "sql": "select count ( payments.* ) where payments.payment_method_code = value"
        },
        {
            "utterance": "How about that of Discover Card ?",
            "sql": "select count ( payments.* ) where payments.payment_method_code = value"
        },
        {
            "utterance": "With which kind of payment method were the least number of payments processed ?",
            "sql": "select payments.payment_method_code group_by payments.payment_method_code order_by count ( payments.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 13,
    "final": {
        "utterance": "Which kind of policy type was chosen by the most customers?",
        "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the policy types of the customer named Augustine Kerluke .",
            "sql": "select customer_policies.policy_type_code where customers.customer_details = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( customer_policies.policy_type_code ) where customers.customer_details = value"
        },
        {
            "utterance": "Which kind of policy type was chosen by the most customers ?",
            "sql": "select customer_policies.policy_type_code group_by customer_policies.policy_type_code order_by count ( customer_policies.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_policies",
    "interaction_id": 14,
    "final": {
        "utterance": "List the details of the customers who do not have any policies.",
        "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Tell me the policy types of the customer named Selena Gerhold .",
            "sql": "select * where customers.customer_details = value"
        },
        {
            "utterance": "How about that of the customer named Sydnie Friesen ?",
            "sql": "select * where customers.customer_details = value"
        },
        {
            "utterance": "Tell me the details of the customers who do not have any policies .",
            "sql": "select customers.customer_details except select customers.customer_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 0,
    "final": {
        "utterance": "How many train stations are there?",
        "sql": "SELECT count(*) FROM station"
    },
    "interaction": [
        {
            "utterance": "Show information for all train stations .",
            "sql": "select station.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( station.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name, location, and number of platforms for all stations.",
        "sql": "SELECT name ,  LOCATION ,  number_of_platforms FROM station"
    },
    "interaction": [
        {
            "utterance": "Show the name for all stations .",
            "sql": "select station.name"
        },
        {
            "utterance": "Also show the location for them .",
            "sql": "select station.name , station.location"
        },
        {
            "utterance": "Also add the number of platforms for each .",
            "sql": "select station.name , station.location , station.number_of_platforms"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 2,
    "final": {
        "utterance": "What are all locations of train stations?",
        "sql": "SELECT DISTINCT LOCATION FROM station"
    },
    "interaction": [
        {
            "utterance": "Show the location for each train station .",
            "sql": "select station.location"
        },
        {
            "utterance": "Show only distinct results .",
            "sql": "select distinct station.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names and total passengers for all train stations not in London.",
        "sql": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'"
    },
    "interaction": [
        {
            "utterance": "Show the name for all train stations .",
            "sql": "select station.name"
        },
        {
            "utterance": "Also show the total passenger for them .",
            "sql": "select station.name , station.total_passengers"
        },
        {
            "utterance": "How about the results for those stations not in London ?",
            "sql": "select station.name , station.total_passengers where station.location != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names and main services for train stations that have the top three total number of passengers.",
        "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show the names of the stations .",
            "sql": "select station.name"
        },
        {
            "utterance": "Also show the main services for them .",
            "sql": "select station.name , station.main_services"
        },
        {
            "utterance": "Order the results by the total number of passengers , descending .",
            "sql": "select station.name , station.main_services order_by station.total_passengers desc"
        },
        {
            "utterance": "Only show the top three .",
            "sql": "select station.name , station.main_services order_by station.total_passengers desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average and maximum number of total passengers for train stations in London or Glasgow?",
        "sql": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'"
    },
    "interaction": [
        {
            "utterance": "Show the total passengers for all train stations .",
            "sql": "select station.total_passengers"
        },
        {
            "utterance": "Show the total passengers for those in either London or Glasgow .",
            "sql": "select station.total_passengers where station.location = value or station.location = value"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( station.total_passengers ) where station.location = value or station.location = value"
        },
        {
            "utterance": "Also show the maximum .",
            "sql": "select avg ( station.total_passengers ) , max ( station.total_passengers ) where station.location = value or station.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 6,
    "final": {
        "utterance": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "sql": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION"
    },
    "interaction": [
        {
            "utterance": "Show the location for train stations .",
            "sql": "select station.location"
        },
        {
            "utterance": "For each location of them , show the total number of platforms .",
            "sql": "select station.location , sum ( station.number_of_platforms ) group_by station.location"
        },
        {
            "utterance": "For each of them , also show the total number of passengers .",
            "sql": "select station.location , sum ( station.number_of_platforms ) , sum ( station.total_passengers ) group_by station.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25"
    },
    "interaction": [
        {
            "utterance": "Show locations for stations .",
            "sql": "select station.location"
        },
        {
            "utterance": "Show locations for stations with at least 15 platforms .",
            "sql": "select station.location where station.number_of_platforms > = value"
        },
        {
            "utterance": "Among those , which locations also have stations with more than 25 total passengers ?",
            "sql": "select station.location where station.number_of_platforms > = value and station.total_passengers > value"
        },
        {
            "utterance": "Show distinct locations of them .",
            "sql": "select distinct station.location where station.number_of_platforms > = value and station.total_passengers > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all locations which don't have a train station with at least 15 platforms.",
        "sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"
    },
    "interaction": [
        {
            "utterance": "Show all locations of train stations .",
            "sql": "select station.location"
        },
        {
            "utterance": "Show locations with a station having at least 15 platforms .",
            "sql": "select station.location where station.number_of_platforms > = value"
        },
        {
            "utterance": "Show all locations that do n't .",
            "sql": "select station.location except select station.location where station.number_of_platforms > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the location with most number of train stations.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the location for all train stations .",
            "sql": "select station.location"
        },
        {
            "utterance": "Show them in descending order of the number of train stations .",
            "sql": "select station.location group_by station.location order_by count ( station.* ) desc"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select station.location group_by station.location order_by count ( station.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the name, time, and service for all trains.",
        "sql": "SELECT name ,  TIME ,  service FROM train"
    },
    "interaction": [
        {
            "utterance": "Show the name for all trains .",
            "sql": "select train.name"
        },
        {
            "utterance": "Also show the time and service for them .",
            "sql": "select train.name , train.time , train.service"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the number of trains",
        "sql": "SELECT count(*) FROM train"
    },
    "interaction": [
        {
            "utterance": "Show information for all trains .",
            "sql": "select train.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( train.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the name and service for all trains in order by time.",
        "sql": "SELECT name ,  service FROM train ORDER BY TIME"
    },
    "interaction": [
        {
            "utterance": "Show the names of the trains .",
            "sql": "select train.name"
        },
        {
            "utterance": "Also show the services .",
            "sql": "select train.name , train.service"
        },
        {
            "utterance": "Order the result by time .",
            "sql": "select train.name , train.service order_by train.time"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the station name and number of trains in each station.",
        "sql": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id"
    },
    "interaction": [
        {
            "utterance": "Show the name for each station .",
            "sql": "select station.name"
        },
        {
            "utterance": "For each station name , also count the number of trains .",
            "sql": "select station.name , count ( * ) group_by train_station.station_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 14,
    "final": {
        "utterance": "show the train name and station name for each train.",
        "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id"
    },
    "interaction": [
        {
            "utterance": "Show the name for each train .",
            "sql": "select train.name"
        },
        {
            "utterance": "For each train , also show the station name .",
            "sql": "select station.name , train.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 15,
    "final": {
        "utterance": "Show all train names and times in stations in London in descending order by train time.",
        "sql": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC"
    },
    "interaction": [
        {
            "utterance": "Show all train names and times .",
            "sql": "select train.name , train.time"
        },
        {
            "utterance": "Show the results only for trains in stations in London .",
            "sql": "select train.name , train.time where station.location = value"
        },
        {
            "utterance": "Order them in descending order by train time .",
            "sql": "select train.name , train.time where station.location = value order_by train.time desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the station name with greatest number of trains.",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name for all train stations .",
            "sql": "select station.name"
        },
        {
            "utterance": "Order those names in descending order of the number of trains .",
            "sql": "select station.name group_by train_station.station_id order_by count ( * ) desc"
        },
        {
            "utterance": "Which one has the most ?",
            "sql": "select station.name group_by train_station.station_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the station name with at least two trains.",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "List the name for all stations .",
            "sql": "select station.name"
        },
        {
            "utterance": "Also count the number of trains for each .",
            "sql": "select station.name , count ( * ) group_by train_station.station_id"
        },
        {
            "utterance": "Show those names with at least two trains .",
            "sql": "select station.name group_by train_station.station_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 18,
    "final": {
        "utterance": "Show all locations with only 1 station.",
        "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Show the location for all stations .",
            "sql": "select station.location"
        },
        {
            "utterance": "What are those locations with only 1 station ?",
            "sql": "select station.location group_by station.location having count ( station.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 19,
    "final": {
        "utterance": "Show station names without any trains.",
        "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)"
    },
    "interaction": [
        {
            "utterance": "Show station id for all stations with a train .",
            "sql": "select train_station.station_id"
        },
        {
            "utterance": "Show the name of stations without any train .",
            "sql": "select station.name where station.station_id not in ( select train_station.station_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 20,
    "final": {
        "utterance": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\""
    },
    "interaction": [
        {
            "utterance": "What are the names for all the stations ?",
            "sql": "select station.name"
        },
        {
            "utterance": "What are the names for those serving `` Ananthapuri Express '' trains ?",
            "sql": "select station.name where train.name = value"
        },
        {
            "utterance": "How about those serving `` Guruvayur Express '' ?",
            "sql": "select station.name where train.name = value"
        },
        {
            "utterance": "Which serve both ?",
            "sql": "select station.name where train.name = value intersect select station.name where train.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "train_station",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the names of the trains that do not pass any station located in London.",
        "sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")"
    },
    "interaction": [
        {
            "utterance": "Show station ids for stations located in London .",
            "sql": "select station.station_id where station.location = value"
        },
        {
            "utterance": "Show the names for all trains .",
            "sql": "select train.name"
        },
        {
            "utterance": "Only show the names for the trains that do not pass any station located in London .",
            "sql": "select train.name where train_station.station_id not in ( select station.station_id where station.location = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "sql": "SELECT t3.Lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubName  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "Tell me the age of the student named Tracy .",
            "sql": "select student.age where student.fname = value"
        },
        {
            "utterance": "Tell me the club she is in .",
            "sql": "select club.clubname where student.fname = value"
        },
        {
            "utterance": "Tell me the last names of the members of the club `` Bootup Baltimore '' ?",
            "sql": "select student.lname where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
        "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\""
    },
    "interaction": [
        {
            "utterance": "Tell me the description of the club named `` Hopkins Student Enterprises '' .",
            "sql": "select club.clubdesc where club.clubname = value"
        },
        {
            "utterance": "How about its location ?",
            "sql": "select club.clublocation where club.clubname = value"
        },
        {
            "utterance": "Tell me who are the members of the club named `` Hopkins Student Enterprises '' ? Show me the last name .",
            "sql": "select student.lname where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many members does the club \"Tennis Club\" has?",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""
    },
    "interaction": [
        {
            "utterance": "Tell me the major of the student named `` Eric '' .",
            "sql": "select student.major where student.fname = value"
        },
        {
            "utterance": "What club did he join ?",
            "sql": "select club.clubname where student.fname = value"
        },
        {
            "utterance": "How many members does the club `` Tennis Club '' have ?",
            "sql": "select count ( * ) where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the number of members of club \"Pen and Paper Gaming\".",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""
    },
    "interaction": [
        {
            "utterance": "Tell me the positions of the student named Lisa .",
            "sql": "select member_of_club.position where student.fname = value"
        },
        {
            "utterance": "Tell me the club she is in .",
            "sql": "select club.clubname where student.fname = value"
        },
        {
            "utterance": "Show me the the number of members of club `` Pen and Paper Gaming '' .",
            "sql": "select count ( * ) where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 4,
    "final": {
        "utterance": "How many clubs does \"Linda Smith\" belong to?",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\""
    },
    "interaction": [
        {
            "utterance": "Tell me the advisor of `` Linda Smith '' .",
            "sql": "select student.advisor where student.lname = value and student.fname = value"
        },
        {
            "utterance": "Tell me her age .",
            "sql": "select student.age where student.lname = value and student.fname = value"
        },
        {
            "utterance": "How many clubs does `` Linda Smith '' belong to ?",
            "sql": "select count ( * ) where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the number of clubs where \"Tracy Kim\" is a member.",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\""
    },
    "interaction": [
        {
            "utterance": "Tell me Paul 's sex .",
            "sql": "select student.sex where student.fname = value"
        },
        {
            "utterance": "Tell me the number of clubs where he is a member .",
            "sql": "select count ( * ) where student.fname = value"
        },
        {
            "utterance": "What is the number of clubs where `` Tracy Kim '' is a member ?",
            "sql": "select count ( * ) where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "Tell me the location of club `` Tennis Club '' .",
            "sql": "select club.clublocation where club.clubname = value"
        },
        {
            "utterance": "What is the first name of the members in it ?",
            "sql": "select student.fname where club.clubname = value"
        },
        {
            "utterance": "Tell me all the female members of the club `` Bootup Baltimore '' . Show the first name and last name .",
            "sql": "select student.fname , student.lname where club.clubname = value and student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\""
    },
    "interaction": [
        {
            "utterance": "What is the description of the club named `` Hopkins Student Enterprises '' ?",
            "sql": "select club.clubdesc where club.clubname = value"
        },
        {
            "utterance": "What are all the female members of the club ? Show me the first name .",
            "sql": "select student.fname where club.clubname = value and student.sex = value"
        },
        {
            "utterance": "Who are the male members of the club ? Show me the first name and last name .",
            "sql": "select student.fname , student.lname where club.clubname = value and student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\""
    },
    "interaction": [
        {
            "utterance": "Tell me the first names of all the female students .",
            "sql": "select student.fname where student.sex = value"
        },
        {
            "utterance": "Tell me their majors .",
            "sql": "select student.major where student.sex = value"
        },
        {
            "utterance": "Find all members of `` Bootup Baltimore '' whose major is `` 600 '' . Show the first name and last name",
            "sql": "select student.fname , student.lname where club.clubname = value and student.major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which club has the most members majoring in \"600\"?",
        "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the first names of students whose advisor is 1121 .",
            "sql": "select student.fname where student.advisor = value"
        },
        {
            "utterance": "Tell me the last names of students whose major is 600 .",
            "sql": "select student.lname where student.major = value"
        },
        {
            "utterance": "Tell me which club has the most members majoring in `` 600 '' .",
            "sql": "select club.clubname where student.major = value group_by club.clubname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of the club that has the most female students.",
        "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the club Andy is in .",
            "sql": "select club.clubname where student.fname = value"
        },
        {
            "utterance": "What is Andy 's sex ?",
            "sql": "select student.sex where student.fname = value"
        },
        {
            "utterance": "What is the name of the club that has the most female students .",
            "sql": "select club.clubname where student.sex = value group_by club.clubname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\""
    },
    "interaction": [
        {
            "utterance": "How many students are in club `` Bootup Baltimore '' ?",
            "sql": "select count ( * ) where club.clubname = value"
        },
        {
            "utterance": "Tell me its location .",
            "sql": "select club.clublocation where club.clubname = value"
        },
        {
            "utterance": "What is the first and last name of the president of this club ?",
            "sql": "select student.fname , student.lname where club.clubname = value and member_of_club.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
    },
    "interaction": [
        {
            "utterance": "Tell me the position of the student Jandy .",
            "sql": "select member_of_club.position where student.fname = value"
        },
        {
            "utterance": "Tell me the club she is in .",
            "sql": "select club.clubname where student.fname = value"
        },
        {
            "utterance": "Who is the `` CTO '' of club `` Hopkins Student Enterprises '' ? Show the first name and last name .",
            "sql": "select student.fname , student.lname where club.clubname = value and member_of_club.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many different roles are there in the club \"Bootup Baltimore\"?",
        "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "How many clubs are there in AKW ?",
            "sql": "select count ( club.* ) where club.clublocation = value"
        },
        {
            "utterance": "Tell me their name .",
            "sql": "select club.clubname where club.clublocation = value"
        },
        {
            "utterance": "How many different roles are there in the club `` Bootup Baltimore '' ?",
            "sql": "select count ( distinct member_of_club.position ) where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 14,
    "final": {
        "utterance": "How many members of \"Bootup Baltimore\" are older than 18?",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18"
    },
    "interaction": [
        {
            "utterance": "How many students are there living in NYC ?",
            "sql": "select count ( student.* ) where student.city_code = value"
        },
        {
            "utterance": "Tell me the clubs they are in .",
            "sql": "select club.clubname where student.city_code = value"
        },
        {
            "utterance": "Tell me how many members of `` Bootup Baltimore '' are older than 18 ?",
            "sql": "select count ( * ) where club.clubname = value and student.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many members of club \"Bootup Baltimore\" are younger than 18?",
        "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18"
    },
    "interaction": [
        {
            "utterance": "What 's the age of the student named Derek ?",
            "sql": "select student.age where student.fname = value"
        },
        {
            "utterance": "Tell me the age of students in the club `` Bootup Baltimore '' ?",
            "sql": "select student.age where club.clubname = value"
        },
        {
            "utterance": "How many members of that club are younger than 18 ?",
            "sql": "select count ( * ) where club.clubname = value and student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\""
    },
    "interaction": [
        {
            "utterance": "Tell me first names of the students living in the city with city code `` LON ''",
            "sql": "select student.fname where student.city_code = value"
        },
        {
            "utterance": "How about that of city with city code `` BAL ''",
            "sql": "select student.fname where student.city_code = value"
        },
        {
            "utterance": "Tell me the names of all the clubs that have at least a member from the city with city code `` BAL '' .",
            "sql": "select distinct club.clubname where student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\""
    },
    "interaction": [
        {
            "utterance": "Tell me the location of the club `` Bootup Baltimore '' .",
            "sql": "select club.clublocation where club.clubname = value"
        },
        {
            "utterance": "Tell me the city code of the cities where at least a member of that club live in .",
            "sql": "select student.city_code where club.clubname = value"
        },
        {
            "utterance": "What are the names of the clubs that have at least a member from the city with the city code `` HOU '' ?",
            "sql": "select distinct club.clubname where student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many clubs does the student named \"Eric Tai\" belong to?",
        "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
    },
    "interaction": [
        {
            "utterance": "Tell me the age of the student named `` Eric Tai '' .",
            "sql": "select student.age where student.fname = value and student.lname = value"
        },
        {
            "utterance": "How about his advisor ?",
            "sql": "select student.advisor where student.fname = value and student.lname = value"
        },
        {
            "utterance": "How many clubs does the student named `` Eric Tai '' belong to ?",
            "sql": "select count ( distinct club.clubname ) where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 19,
    "final": {
        "utterance": "List the clubs having \"Davis Steven\" as a member.",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\""
    },
    "interaction": [
        {
            "utterance": "Tell me the city code of the city where `` Davis Steven '' lives .",
            "sql": "select student.city_code where student.lname = value and student.fname = value"
        },
        {
            "utterance": "What is his major ?",
            "sql": "select student.major where student.lname = value and student.fname = value"
        },
        {
            "utterance": "Tell me the clubs having `` Davis Steven '' as a member .",
            "sql": "select distinct club.clubname where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 20,
    "final": {
        "utterance": "List the clubs that have at least a member with advisor \"1121\".",
        "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121"
    },
    "interaction": [
        {
            "utterance": "What is the student id of the student with first name `` Arthur '' ?",
            "sql": "select student.stuid where student.fname = value"
        },
        {
            "utterance": "Who is his advisor ?",
            "sql": "select student.advisor where student.fname = value"
        },
        {
            "utterance": "Tell me the clubs that have at least a member with advisor `` 1121 '' .",
            "sql": "select distinct club.clubname where student.advisor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""
    },
    "interaction": [
        {
            "utterance": "Tell me the age of the members of the club `` Tennis Club '' .",
            "sql": "select student.age where club.clubname = value"
        },
        {
            "utterance": "How about that of the club `` Bootup Baltimore '' ?",
            "sql": "select student.age where club.clubname = value"
        },
        {
            "utterance": "Can you show me the average number ?",
            "sql": "select avg ( student.age ) where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "club_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the average age of members of the club \"Hopkins Student Enterprises\".",
        "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\""
    },
    "interaction": [
        {
            "utterance": "Tell me the number of females in club `` Hopkins Student Enterprises '' .",
            "sql": "select count ( * ) where club.clubname = value and student.sex = value"
        },
        {
            "utterance": "How about that of the members with age > 18 ?",
            "sql": "select count ( * ) where club.clubname = value and student.age > value"
        },
        {
            "utterance": "I want to know the average age of members in that club .",
            "sql": "select avg ( student.age ) where club.clubname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 0,
    "final": {
        "utterance": "How many churches opened before 1850 are there?",
        "sql": "SELECT count(*) FROM Church WHERE Open_Date  <  1850"
    },
    "interaction": [
        {
            "utterance": "How many churches are there ?",
            "sql": "select count ( church.* )"
        },
        {
            "utterance": "What if we only count those opened before 1850 ?",
            "sql": "select count ( church.* ) where church.open_date < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name, open date, and organizer for all churches.",
        "sql": "SELECT name ,  open_date ,  organized_by FROM Church"
    },
    "interaction": [
        {
            "utterance": "Show all churches .",
            "sql": "select church.*"
        },
        {
            "utterance": "Give me their name , open data , and organizer .",
            "sql": "select church.name , church.open_date , church.organized_by"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 2,
    "final": {
        "utterance": "List all church names in descending order of opening date.",
        "sql": "SELECT name FROM church ORDER BY open_date DESC"
    },
    "interaction": [
        {
            "utterance": "Show all churches .",
            "sql": "select church.*"
        },
        {
            "utterance": "Sort them in descending order of opening date .",
            "sql": "select church.* order_by church.open_date desc"
        },
        {
            "utterance": "Show the church names .",
            "sql": "select church.name order_by church.open_date desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the opening year in which at least two churches opened.",
        "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What is the opening date of each church ?",
            "sql": "select church.open_date"
        },
        {
            "utterance": "Show the opening year in which at least two churches opened .",
            "sql": "select church.open_date group_by church.open_date having count ( church.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "sql": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840"
    },
    "interaction": [
        {
            "utterance": "Which churches opened between 1830 and 1840 ?",
            "sql": "select church.* where church.open_date between value and value"
        },
        {
            "utterance": "Show their names and organizers .",
            "sql": "select church.organized_by , church.name where church.open_date between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all opening years and the number of churches that opened in that year.",
        "sql": "SELECT open_date ,  count(*) FROM church GROUP BY open_date"
    },
    "interaction": [
        {
            "utterance": "What is the opening year of each church ?",
            "sql": "select church.open_date"
        },
        {
            "utterance": "Show all opening years and the number of churches that opened in that year .",
            "sql": "select church.open_date , count ( church.* ) group_by church.open_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and opening year for three churches that opened most recently.",
        "sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What is the opening date of each church ?",
            "sql": "select church.open_date"
        },
        {
            "utterance": "Which churches opened most recently ?",
            "sql": "select church.* order_by church.open_date desc limit_value"
        },
        {
            "utterance": "Show the name and opening year for three churches that opened most recently .",
            "sql": "select church.name , church.open_date order_by church.open_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 7,
    "final": {
        "utterance": "How many female people are older than 30 in our record?",
        "sql": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30"
    },
    "interaction": [
        {
            "utterance": "Count the number of people in the record .",
            "sql": "select count ( people.* )"
        },
        {
            "utterance": "How many are female ?",
            "sql": "select count ( people.* ) where people.is_male = value"
        },
        {
            "utterance": "How many of them are older than 30 ?",
            "sql": "select count ( people.* ) where people.is_male = value and people.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the country where people older than 30 and younger than 25 are from.",
        "sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30"
    },
    "interaction": [
        {
            "utterance": "Show all people whose age is below 25 .",
            "sql": "select people.* where people.age < value"
        },
        {
            "utterance": "What are their countries ?",
            "sql": "select people.country where people.age < value"
        },
        {
            "utterance": "Which of these countries also have people older than 30 ?",
            "sql": "select people.country where people.age < value intersect select people.country where people.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the minimum, maximum, and average age for all people.",
        "sql": "SELECT min(age) ,  max(age) ,  avg(age) FROM people"
    },
    "interaction": [
        {
            "utterance": "What is the age of each person ?",
            "sql": "select people.age"
        },
        {
            "utterance": "What is the average age ?",
            "sql": "select min ( people.age )"
        },
        {
            "utterance": "What are the minimum , maximum , and average age ?",
            "sql": "select min ( people.age ) , max ( people.age ) , avg ( people.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the name and country for all people whose age is smaller than the average.",
        "sql": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)"
    },
    "interaction": [
        {
            "utterance": "What is the average age of people ?",
            "sql": "select min ( people.age )"
        },
        {
            "utterance": "Show people whose age is smaller than the average .",
            "sql": "select people.* where people.age < ( select avg ( people.age ) )"
        },
        {
            "utterance": "What are their names and countries ?",
            "sql": "select people.name , people.country where people.age < ( select avg ( people.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the pair of male and female names in all weddings after year 2014",
        "sql": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014"
    },
    "interaction": [
        {
            "utterance": "Show the information about weddings after year 2014 .",
            "sql": "select wedding.* where wedding.year > value"
        },
        {
            "utterance": "Show the male names in all weddings after 2014 .",
            "sql": "select people.name where wedding.year > value"
        },
        {
            "utterance": "Show the pair of male and female names in all weddings after year 2014 .",
            "sql": "select people.name , people.name where wedding.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the name and age for all male people who don't have a wedding.",
        "sql": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)"
    },
    "interaction": [
        {
            "utterance": "What are the ids of the males who had a wedding ?",
            "sql": "select wedding.male_id"
        },
        {
            "utterance": "Show all the male people who have not had a wedding .",
            "sql": "select people.* where people.is_male = value and people.people_id not in ( select wedding.male_id )"
        },
        {
            "utterance": "What are their names and ages ?",
            "sql": "select people.name , people.age where people.is_male = value and people.people_id not in ( select wedding.male_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 13,
    "final": {
        "utterance": "Show all church names except for those that had a wedding in year 2015.",
        "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015"
    },
    "interaction": [
        {
            "utterance": "Which churches had a wedding in year 2015 ?",
            "sql": "select * where wedding.year = value"
        },
        {
            "utterance": "Show all names of the churches except for those .",
            "sql": "select church.name except select church.name where wedding.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 14,
    "final": {
        "utterance": "Show all church names that have hosted least two weddings.",
        "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many weddings were hosted in each church ?",
            "sql": "select count ( * ) group_by church.church_id"
        },
        {
            "utterance": "Show all church names that have hosted least two weddings .",
            "sql": "select church.name group_by church.church_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the names for all females from Canada having a wedding in year 2016.",
        "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'"
    },
    "interaction": [
        {
            "utterance": "Show all female people from Canada .",
            "sql": "select people.* where people.is_male = value and people.country = value"
        },
        {
            "utterance": "Show those that had a wedding in year 2016 .",
            "sql": "select * where wedding.year = value and people.is_male = value and people.country = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select people.name where wedding.year = value and people.is_male = value and people.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 16,
    "final": {
        "utterance": "How many weddings are there in year 2016?",
        "sql": "SELECT count(*) FROM wedding WHERE YEAR  =  2016"
    },
    "interaction": [
        {
            "utterance": "How many weddings are there in total ?",
            "sql": "select count ( wedding.* )"
        },
        {
            "utterance": "What about in the year 2016 ?",
            "sql": "select count ( wedding.* ) where wedding.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the church names for the weddings of all people older than 30.",
        "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30"
    },
    "interaction": [
        {
            "utterance": "Show all people older than 30 .",
            "sql": "select people.* where people.age > value"
        },
        {
            "utterance": "Show all the weddings of people older than 30 .",
            "sql": "select * where people.age > value or people.age > value"
        },
        {
            "utterance": "Show the church names for the weddings of all people older than 30 .",
            "sql": "select church.name where people.age > value or people.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wedding",
    "interaction_id": 18,
    "final": {
        "utterance": "Show all countries and the number of people from each country.",
        "sql": "SELECT country ,  count(*) FROM people GROUP BY country"
    },
    "interaction": [
        {
            "utterance": "Show the country of each person .",
            "sql": "select people.country"
        },
        {
            "utterance": "Count the number of people from each country .",
            "sql": "select count ( people.* ) group_by people.country"
        },
        {
            "utterance": "Also show the country name .",
            "sql": "select people.country , count ( people.* ) group_by people.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of people aged either 35 or 36.",
        "sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36"
    },
    "interaction": [
        {
            "utterance": "How many people are there ?",
            "sql": "select count ( people.* )"
        },
        {
            "utterance": "How many people aged 40 ?",
            "sql": "select count ( people.* ) where people.age = value"
        },
        {
            "utterance": "How many people aged either 35 or 36 ?",
            "sql": "select count ( people.* ) where people.age = value or people.age = value"
        },
        {
            "utterance": "Please show their names .",
            "sql": "select people.name where people.age = value or people.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the party of the youngest people?",
        "sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who is the oldest person ?",
            "sql": "select people.name order_by people.age desc limit_value"
        },
        {
            "utterance": "Who is the youngest person ?",
            "sql": "select people.name order_by people.age asc limit_value"
        },
        {
            "utterance": "What is his party ?",
            "sql": "select people.party order_by people.age asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the party that has the most people.",
        "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many parties are there ?",
            "sql": "select count ( distinct people.party )"
        },
        {
            "utterance": "How many people are there in each party ?",
            "sql": "select people.party , count ( people.* ) group_by people.party"
        },
        {
            "utterance": "Which party has the most people ?",
            "sql": "select people.party group_by people.party order_by count ( people.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID"
    },
    "interaction": [
        {
            "utterance": "How many people have been on the negative side ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "How about the affirmative side ?",
            "sql": "select count ( * )"
        },
        {
            "utterance": "Please give their full names .",
            "sql": "select people.name"
        },
        {
            "utterance": "Please also show the dates and venues of debates .",
            "sql": "select people.name , debate.date , debate.venue"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC"
    },
    "interaction": [
        {
            "utterance": "Show the names of people that won the debate on the nagative side .",
            "sql": "select people.name where debate_people.if_affirmative_win = value"
        },
        {
            "utterance": "Please list the names of people who have been on the negative side .",
            "sql": "select people.name"
        },
        {
            "utterance": "Please also show the dates and venues of debates",
            "sql": "select people.name , debate.date , debate.venue"
        },
        {
            "utterance": "Could you please order the results in ascending alphabetical order of name ?",
            "sql": "select people.name , debate.date , debate.venue order_by people.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200"
    },
    "interaction": [
        {
            "utterance": "How many people have ever been on the affirmative side of debates ?",
            "sql": "select count ( people.* ) where people.people_id in ( select debate_people.affirmative )"
        },
        {
            "utterance": "What is the average size of the audience in a debate ?",
            "sql": "select avg ( debate.num_of_audience )"
        },
        {
            "utterance": "How many debates have an audience size bigger than 200 ?",
            "sql": "select count ( debate.* ) where debate.num_of_audience > value"
        },
        {
            "utterance": "Show the names of people that are on the affirmative side of these debates .",
            "sql": "select people.name where debate.num_of_audience > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "How many people have ever been on the affirmative side of debates ?",
            "sql": "select count ( people.* ) where people.people_id in ( select debate_people.affirmative )"
        },
        {
            "utterance": "Please show their names .",
            "sql": "select people.name where people.people_id in ( select debate_people.affirmative )"
        },
        {
            "utterance": "Please also show the number of times they have been on the affirmative side of debates .",
            "sql": "select people.name , count ( * ) group_by people.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "debate",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of people who have been on the negative side of debates at least twice.",
        "sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many people have ever been on the negative side of debates ?",
            "sql": "select count ( distinct people.people_id )"
        },
        {
            "utterance": "How many times have they been on the negative side of debates ?",
            "sql": "select people.name , count ( * ) group_by people.name"
        },
        {
            "utterance": "How many of them have been on the negative side of debates at least twice ?",
            "sql": "select count ( distinct people.name ) group_by people.name having count ( * ) > = value"
        },
        {
            "utterance": "Show their names .",
            "sql": "select people.name group_by people.name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200"
    },
    "interaction": [
        {
            "utterance": "Show me all the companies .",
            "sql": "select operate_company.name"
        },
        {
            "utterance": "Which of these companies operate flights ?",
            "sql": "select distinct operate_company.name"
        },
        {
            "utterance": "Which companies operated flights with velocity less than 200 ?",
            "sql": "select distinct operate_company.name where flight.velocity < value"
        },
        {
            "utterance": "What are the distinct types of these companies ?",
            "sql": "select distinct operate_company.type where flight.velocity < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the ids and names of the companies that operated more than one flight?",
        "sql": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List the names of all the companies .",
            "sql": "select operate_company.name"
        },
        {
            "utterance": "How many flights did each of these companies operate ?",
            "sql": "select operate_company.name , count ( * ) group_by operate_company.id"
        },
        {
            "utterance": "Show me only the companies that operated more than one flight .",
            "sql": "select operate_company.name , count ( * ) group_by operate_company.id having count ( * ) > value"
        },
        {
            "utterance": "Show me only the ids and the names of these companies .",
            "sql": "select operate_company.id , operate_company.name group_by operate_company.id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the id, name and IATA code of the airport that had most number of flights?",
        "sql": "SELECT T1.id, T1.name, T1.IATA FROM airport as t1 JOIN flight AS t2 ON t1.id = t2.airport_id  GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the airports",
            "sql": "select airport.name"
        },
        {
            "utterance": "What are the number of flights for each of these airports ?",
            "sql": "select airport.name , count ( * ) group_by airport.id"
        },
        {
            "utterance": "Which airport had the most number of flights ?",
            "sql": "select airport.name group_by airport.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show me the id and IATA code of this airport as well .",
            "sql": "select airport.id , airport.name , airport.iata group_by airport.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the pilots .",
            "sql": "select distinct flight.pilot"
        },
        {
            "utterance": "Which of these pilots piloted a flight in the United States ?",
            "sql": "select distinct flight.pilot where airport.country = value"
        },
        {
            "utterance": "What about the pilots who did it at 'Billund Airport ' ?",
            "sql": "select distinct flight.pilot where airport.name = value"
        },
        {
            "utterance": "Which pilots did either one of those ?",
            "sql": "select distinct flight.pilot where airport.country = value or airport.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the most common company type, and how many are there?",
        "sql": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show me all the company names .",
            "sql": "select operate_company.name"
        },
        {
            "utterance": "What are the types of these companies ?",
            "sql": "select operate_company.name , operate_company.type"
        },
        {
            "utterance": "How many companies have type 'Joint Venture ' ?",
            "sql": "select count ( operate_company.* ) group_by operate_company.type having operate_company.type = value"
        },
        {
            "utterance": "Tell me the most common company type .",
            "sql": "select operate_company.type , count ( operate_company.* ) group_by operate_company.type order_by count ( operate_company.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 5,
    "final": {
        "utterance": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );"
    },
    "interaction": [
        {
            "utterance": "List the names of all the pilots .",
            "sql": "select distinct flight.pilot"
        },
        {
            "utterance": "Which companies did Thompson fly for ?",
            "sql": "select distinct operate_company.name"
        },
        {
            "utterance": "List all the airports where he drove an aircraft .",
            "sql": "select distinct airport.name"
        },
        {
            "utterance": "What is the total number of airports where he has not driven an aircraft ?",
            "sql": "select count ( airport.* ) where airport.id not in ( select flight.airport_id where flight.pilot = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 6,
    "final": {
        "utterance": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the pilots",
            "sql": "select flight.pilot"
        },
        {
            "utterance": "Which of these pilots flied for a company that runs 'Cargo ' activities ?",
            "sql": "select * where operate_company.principal_activities = value"
        },
        {
            "utterance": "Which pilots flied for a company that runs 'Catering services ' activities ?",
            "sql": "select * where operate_company.principal_activities = value"
        },
        {
            "utterance": "Which pilots flied for companies that ran both of those activities ?",
            "sql": "select flight.pilot where operate_company.principal_activities = value intersect select flight.pilot where operate_company.principal_activities = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 7,
    "final": {
        "utterance": "Which of the airport names contains the word 'international'?",
        "sql": "SELECT name FROM airport WHERE name LIKE '%international%'"
    },
    "interaction": [
        {
            "utterance": "Show me all the airports .",
            "sql": "select airport.*"
        },
        {
            "utterance": "Show me the names of all airports .",
            "sql": "select airport.name"
        },
        {
            "utterance": "Which of these airports start with the word 'international ' ?",
            "sql": "select airport.name where airport.name like value"
        },
        {
            "utterance": "What about the ones that contains the word `` international '' ?",
            "sql": "select airport.name where airport.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 8,
    "final": {
        "utterance": "How many companies operates airlines in each airport?",
        "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id"
    },
    "interaction": [
        {
            "utterance": "Tell me about all the airports .",
            "sql": "select airport.*"
        },
        {
            "utterance": "Tell me the names of these airports .",
            "sql": "select airport.name"
        },
        {
            "utterance": "How many companies operate in `` Akureyi airport '' ?",
            "sql": "select count ( flight.company_id ) group_by airport.id having airport.name = value"
        },
        {
            "utterance": "What about for each airport ?",
            "sql": "select airport.id , count ( * ) group_by airport.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_company",
    "interaction_id": 9,
    "final": {
        "utterance": "which countries have more than 2 airports?",
        "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show me everything about the airports .",
            "sql": "select airport.*"
        },
        {
            "utterance": "What are the countries with these airports ?",
            "sql": "select distinct airport.country"
        },
        {
            "utterance": "Which of these countries have more than 1 airport ?",
            "sql": "select airport.country group_by airport.country having count ( airport.* ) > value"
        },
        {
            "utterance": "Which of them have more than 2 ?",
            "sql": "select airport.country group_by airport.country having count ( airport.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 0,
    "final": {
        "utterance": "How many counties are there in total?",
        "sql": "SELECT count(*) FROM county"
    },
    "interaction": [
        {
            "utterance": "What is all the information about the counties ?",
            "sql": "select county.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( county.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the county name and population of all counties.",
        "sql": "SELECT County_name ,  Population FROM county"
    },
    "interaction": [
        {
            "utterance": "Show me all the information about counties .",
            "sql": "select county.*"
        },
        {
            "utterance": "I want to now the names of these counties .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "I also want to know their population .",
            "sql": "select county.population"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the average population of all counties.",
        "sql": "SELECT avg(Population) FROM county"
    },
    "interaction": [
        {
            "utterance": "Show me all the information about counties .",
            "sql": "select county.*"
        },
        {
            "utterance": "I also want to know their population .",
            "sql": "select county.population"
        },
        {
            "utterance": "Tell me the average number .",
            "sql": "select avg ( county.population )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 3,
    "final": {
        "utterance": "Return the maximum and minimum population among all counties.",
        "sql": "SELECT max(Population) ,  min(Population) FROM county"
    },
    "interaction": [
        {
            "utterance": "Please show me the information of population about all counties .",
            "sql": "select county.population"
        },
        {
            "utterance": "What 's the maximum one ?",
            "sql": "select max ( county.population )"
        },
        {
            "utterance": "I want to know the minimum one .",
            "sql": "select min ( county.population )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all the distinct districts for elections.",
        "sql": "SELECT DISTINCT District FROM election"
    },
    "interaction": [
        {
            "utterance": "Please tell me all the information about elections .",
            "sql": "select election.*"
        },
        {
            "utterance": "I only want to know the districts .",
            "sql": "select election.district"
        },
        {
            "utterance": "Give me the unique ones .",
            "sql": "select distinct election.district"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the zip code of the county with name \"Howard\".",
        "sql": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""
    },
    "interaction": [
        {
            "utterance": "Please tell me the information about all counties .",
            "sql": "select county.*"
        },
        {
            "utterance": "I want to know the county `` Howard '' specifically .",
            "sql": "select county.* where county.county_name = value"
        },
        {
            "utterance": "Just show me the zip code of that county ?",
            "sql": "select county.zip_code where county.county_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the delegate from district 1 in election.",
        "sql": "SELECT Delegate FROM election WHERE District  =  1"
    },
    "interaction": [
        {
            "utterance": "Please tell me the information about elections .",
            "sql": "select election.*"
        },
        {
            "utterance": "Just give me the information about delegates .",
            "sql": "select election.delegate"
        },
        {
            "utterance": "How about the one from district 1 ?",
            "sql": "select election.delegate where election.district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the delegate and committee information of elections.",
        "sql": "SELECT Delegate ,  Committee FROM election"
    },
    "interaction": [
        {
            "utterance": "Please tell me all the information about elections .",
            "sql": "select election.*"
        },
        {
            "utterance": "Just give me the information about delegate",
            "sql": "select election.delegate"
        },
        {
            "utterance": "I also want to know the committees .",
            "sql": "select election.delegate , election.committee"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 8,
    "final": {
        "utterance": "How many distinct governors are there?",
        "sql": "SELECT count(DISTINCT Governor) FROM party"
    },
    "interaction": [
        {
            "utterance": "Tell me the information about all parties",
            "sql": "select party.*"
        },
        {
            "utterance": "Who are the governors of those parties",
            "sql": "select party.governor"
        },
        {
            "utterance": "Just give me the distinct results .",
            "sql": "select distinct party.governor"
        },
        {
            "utterance": "Give the number of those governors .",
            "sql": "select count ( distinct party.governor )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the lieutenant governor and comptroller from the democratic party.",
        "sql": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    "interaction": [
        {
            "utterance": "Tell me the information about all parties",
            "sql": "select party.*"
        },
        {
            "utterance": "I want to know the information about the Democratic party specifically .",
            "sql": "select party.* where party.party = value"
        },
        {
            "utterance": "Who is their lieutenant governor ?",
            "sql": "select party.lieutenant_governor where party.party = value"
        },
        {
            "utterance": "Tell me the comptroller of that party .",
            "sql": "select party.comptroller where party.party = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 10,
    "final": {
        "utterance": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\""
    },
    "interaction": [
        {
            "utterance": "Tell me all the information about parties whose governor is Eliot Spitzer .",
            "sql": "select party.* where party.governor = value"
        },
        {
            "utterance": "I want to know the years in which he was the governor .",
            "sql": "select party.year where party.governor = value"
        },
        {
            "utterance": "Excellent . Just tell me the distinct ones .",
            "sql": "select distinct party.year where party.governor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all the information about election.",
        "sql": "SELECT * FROM election"
    },
    "interaction": [
        {
            "utterance": "Please tell me all the information about elections .",
            "sql": "select election.*"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the delegates and the names of county they belong to.",
        "sql": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District"
    },
    "interaction": [
        {
            "utterance": "Tell me all the names of the counties .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "I want to know their delegates including their names .",
            "sql": "select election.delegate , county.county_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 13,
    "final": {
        "utterance": "Which delegates are from counties with population smaller than 100000?",
        "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"
    },
    "interaction": [
        {
            "utterance": "Tell me all the names of the counties .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "Okay . I want to know their delegates .",
            "sql": "select election.delegate"
        },
        {
            "utterance": "Furthermore , please tell me which ones ' population is smaller than 100000 ?",
            "sql": "select election.delegate where county.population < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 14,
    "final": {
        "utterance": "How many distinct delegates are from counties with population larger than 50000?",
        "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"
    },
    "interaction": [
        {
            "utterance": "Tell me all the names of the counties .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "Okay . I want to know their delegates .",
            "sql": "select election.delegate"
        },
        {
            "utterance": "Furthermore , please tell me which ones ' population is larger than 50000 ?",
            "sql": "select election.delegate where county.population > value"
        },
        {
            "utterance": "Wonderful ! How many unique ones are there ?",
            "sql": "select count ( distinct election.delegate ) where county.population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\""
    },
    "interaction": [
        {
            "utterance": "Tell me all the names of the counties .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "Okay . I want to know their delegates .",
            "sql": "select election.delegate"
        },
        {
            "utterance": "Which one 's committee is `` Appropriations '' ?",
            "sql": "select county.county_name where election.committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the delegates and the names of the party they belong to.",
        "sql": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID"
    },
    "interaction": [
        {
            "utterance": "Tell me all the information about the democratic party .",
            "sql": "select party.* where party.party = value"
        },
        {
            "utterance": "Okay . I want to know all the party delegates and names .",
            "sql": "select election.delegate , party.party"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 17,
    "final": {
        "utterance": "Who were the governors of the parties associated with delegates from district 1?",
        "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1"
    },
    "interaction": [
        {
            "utterance": "I want to know the governor of the liberal party .",
            "sql": "select party.governor where party.party = value"
        },
        {
            "utterance": "Which one 's delegate is from district 1 .",
            "sql": "select * where election.district = value"
        },
        {
            "utterance": "Who is its governor ?",
            "sql": "select party.governor where election.district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 18,
    "final": {
        "utterance": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2"
    },
    "interaction": [
        {
            "utterance": "Tell me all the parties .",
            "sql": "select party.*"
        },
        {
            "utterance": "Which one 's delegates are from district 1 or district 2 ?",
            "sql": "select * where election.district = value or election.district = value"
        },
        {
            "utterance": "Who were these parties ' comptrollers ?",
            "sql": "select party.comptroller where election.district = value or election.district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 19,
    "final": {
        "utterance": "Return all the committees that have delegates from Democratic party.",
        "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\""
    },
    "interaction": [
        {
            "utterance": "Tell me the delegates from committees Appropriations ?",
            "sql": "select election.delegate where election.committee = value"
        },
        {
            "utterance": "which ones have delegates from Democratic party .",
            "sql": "select election.committee where party.party = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the name of each county along with the corresponding number of delegates from that county.",
        "sql": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id"
    },
    "interaction": [
        {
            "utterance": "Tell me all the information about the counties .",
            "sql": "select county.*"
        },
        {
            "utterance": "For now , I just want to know these counties ' names .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "I also want to know the number of delegates of these counties",
            "sql": "select county.county_name , count ( * ) group_by county.county_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the name of each party and the corresponding number of delegates from that party.",
        "sql": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"
    },
    "interaction": [
        {
            "utterance": "Tell me all the information about the counties .",
            "sql": "select county.*"
        },
        {
            "utterance": "For now , I just want to know the parties .",
            "sql": "select distinct county.county_name , party.party"
        },
        {
            "utterance": "I also want to know the number of delegates of these parties .",
            "sql": "select party.party , count ( * ) group_by election.party"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 22,
    "final": {
        "utterance": "Return the names of all counties sorted by population in ascending order.",
        "sql": "SELECT County_name FROM county ORDER BY Population ASC"
    },
    "interaction": [
        {
            "utterance": "tell me the population of the county named Howard ?",
            "sql": "select county.population where county.county_name = value"
        },
        {
            "utterance": "I want to know all the counties ' names .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "Sort them in ascending order by population .",
            "sql": "select county.county_name order_by county.population asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 23,
    "final": {
        "utterance": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "sql": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    "interaction": [
        {
            "utterance": "Tell me the county with zip code D21 .",
            "sql": "select county.county_name where county.zip_code = value"
        },
        {
            "utterance": "Okay . I want to know all the names of the counties .",
            "sql": "select county.county_name"
        },
        {
            "utterance": "Sort them in descending alphabetical order .",
            "sql": "select county.county_name order_by county.county_name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 24,
    "final": {
        "utterance": "Show the name of the county with the biggest population.",
        "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the population of the county named Colony .",
            "sql": "select county.population where county.county_name = value"
        },
        {
            "utterance": "How about the one named Mansfield ?",
            "sql": "select county.population where county.county_name = value"
        },
        {
            "utterance": "Just show me which county has the biggest population .",
            "sql": "select county.county_name order_by county.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 25,
    "final": {
        "utterance": "Show the 3 counties with the smallest population.",
        "sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Tell me the population of the county named Colony .",
            "sql": "select county.population where county.county_name = value"
        },
        {
            "utterance": "How about Mansfield 's",
            "sql": "select county.population where county.county_name = value"
        },
        {
            "utterance": "just show me 3 ones which have the smallest population .",
            "sql": "select county.county_name order_by county.population asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 26,
    "final": {
        "utterance": "Show the names of counties that have at least two delegates.",
        "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me the delegates of the county named Howard .",
            "sql": "select election.delegate where county.county_name = value"
        },
        {
            "utterance": "How about its committees ?",
            "sql": "select election.committee where county.county_name = value"
        },
        {
            "utterance": "just show me the counties which have at least two delegates .",
            "sql": "select county.county_name group_by county.county_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 27,
    "final": {
        "utterance": "Show the name of the party that has at least two records.",
        "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Tell me the information of all the parties .",
            "sql": "select party.*"
        },
        {
            "utterance": "I just want to know their names .",
            "sql": "select party.party"
        },
        {
            "utterance": "just show me the ones which have at least two records .",
            "sql": "select party.party group_by party.party having count ( party.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the name of the party that has the most delegates.",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the delegates of county Howard .",
            "sql": "select election.delegate where county.county_name = value"
        },
        {
            "utterance": "How about that of the county Colony ?",
            "sql": "select election.delegate where county.county_name = value"
        },
        {
            "utterance": "just show me the county which has the most delegates .",
            "sql": "select party.party group_by election.party order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 29,
    "final": {
        "utterance": "Show the people that have been governor the most times.",
        "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me who is the governor of the liberal party .",
            "sql": "select party.governor where party.party = value"
        },
        {
            "utterance": "Okay , tell me how many times he has been governor .",
            "sql": "select count ( party.* ) where party.governor = value"
        },
        {
            "utterance": "Which governor has been governor the most times ?",
            "sql": "select party.governor group_by party.governor order_by count ( party.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 30,
    "final": {
        "utterance": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the comptrollers of the Independence party .",
            "sql": "select party.comptroller where party.party = value"
        },
        {
            "utterance": "Okay , how about that of the Liberal party ?",
            "sql": "select party.comptroller where party.party = value"
        },
        {
            "utterance": "Which ones have been comptroller the most times ? Show also the corresponding number of times .",
            "sql": "select party.comptroller , count ( party.* ) group_by party.comptroller order_by count ( party.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the names of parties that do not have delegates in election?",
        "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
    },
    "interaction": [
        {
            "utterance": "Tell me the information of all the parties .",
            "sql": "select party.*"
        },
        {
            "utterance": "which parties have delegates in the election ?",
            "sql": "select party.party where party.party_id in ( select election.party )"
        },
        {
            "utterance": "Which ones do not ?",
            "sql": "select party.party where party.party_id not in ( select election.party )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "election",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the names of parties that have both delegates on \"Appropriations\" committee and \"Economic Matters\" committee",
        "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""
    },
    "interaction": [
        {
            "utterance": "tell me which parties have delegates on the `` Appropriations '' committee ?",
            "sql": "select party.party where election.committee = value"
        },
        {
            "utterance": "So how about the ones with delegates on the `` Economic Matters '' committee ?",
            "sql": "select party.party where election.committee = value"
        },
        {
            "utterance": "Okay . I want to know which ones have delegates on both .",
            "sql": "select party.party where election.committee = value intersect select party.party where election.committee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 0,
    "final": {
        "utterance": "List the name of all different customers who have an loan sorted by their total loan amount.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)"
    },
    "interaction": [
        {
            "utterance": "List the names of all different customers who have an loan .",
            "sql": "select distinct customer.cust_name"
        },
        {
            "utterance": "For each customer , what is their total amount of loans ?",
            "sql": "select customer.cust_name , sum ( loan.amount ) group_by customer.cust_name"
        },
        {
            "utterance": "sort the result by the total amount , and no need to show the total amount .",
            "sql": "select customer.cust_name group_by customer.cust_name order_by sum ( loan.amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'"
    },
    "interaction": [
        {
            "utterance": "what are the names of the customers ?",
            "sql": "select customer.cust_name"
        },
        {
            "utterance": "just show customers who have the letter \u2018a\u2019 in their name .",
            "sql": "select customer.cust_name where customer.cust_name like value"
        },
        {
            "utterance": "list their account balances too .",
            "sql": "select customer.cust_name , customer.acc_bal where customer.cust_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the total account balance of each customer from Utah or Texas.",
        "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"
    },
    "interaction": [
        {
            "utterance": "which states are the customers from ?",
            "sql": "select distinct customer.state"
        },
        {
            "utterance": "find the names of customers from Utah or Texas .",
            "sql": "select customer.cust_name where customer.state = value or customer.state = value"
        },
        {
            "utterance": "what is their total account balance ?",
            "sql": "select sum ( customer.acc_bal ) where customer.state = value or customer.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of customers who have both saving and checking account types.",
        "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'"
    },
    "interaction": [
        {
            "utterance": "find the names of customers who have a saving account .",
            "sql": "select customer.cust_name where customer.acc_type = value"
        },
        {
            "utterance": "how about those who have a checking account ?",
            "sql": "select customer.cust_name where customer.acc_type = value"
        },
        {
            "utterance": "which of them have both kinds of accounts ?",
            "sql": "select customer.cust_name where customer.acc_type = value intersect select customer.cust_name where customer.acc_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of customers who do not have a saving account.",
        "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
    },
    "interaction": [
        {
            "utterance": "how many customers have a saving account ?",
            "sql": "select count ( customer.* ) where customer.acc_type = value"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select customer.cust_name where customer.acc_type = value"
        },
        {
            "utterance": "who are those who do not have a savings account ?",
            "sql": "select customer.cust_name except select customer.cust_name where customer.acc_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'"
    },
    "interaction": [
        {
            "utterance": "Find the names of customers who have a mortgage loan .",
            "sql": "select customer.cust_name where loan.loan_type = value"
        },
        {
            "utterance": "who are those who do not have a mortgage ?",
            "sql": "select customer.cust_name except select customer.cust_name where loan.loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of customers who have loans of both Mortgages and Auto.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"
    },
    "interaction": [
        {
            "utterance": "find the names of customers who have a loan .",
            "sql": "select distinct customer.cust_name"
        },
        {
            "utterance": "which of them have a mortgage loan ?",
            "sql": "select customer.cust_name where loan.loan_type = value"
        },
        {
            "utterance": "among them , who has an Auto loan as well ?",
            "sql": "select customer.cust_name where loan.loan_type = value intersect select customer.cust_name where loan.loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)"
    },
    "interaction": [
        {
            "utterance": "what is the average credit score of all customers ?",
            "sql": "select avg ( customer.credit_score )"
        },
        {
            "utterance": "list customers whose credit score is below the average .",
            "sql": "select customer.* where customer.credit_score < ( select avg ( customer.credit_score ) )"
        },
        {
            "utterance": "just list their names .",
            "sql": "select customer.cust_name where customer.credit_score < ( select avg ( customer.credit_score ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the branch name of the bank that has the most number of customers.",
        "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the name and number of customers for each bank branch .",
            "sql": "select bank.bname , bank.no_of_customers"
        },
        {
            "utterance": "order the result by the number of customers in descending order .",
            "sql": "select bank.bname , bank.no_of_customers order_by bank.no_of_customers desc"
        },
        {
            "utterance": "Find the branch name of the bank that has the most customers .",
            "sql": "select bank.bname order_by bank.no_of_customers desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name of customer who has the lowest credit score.",
        "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the names of all customers ?",
            "sql": "select customer.cust_name"
        },
        {
            "utterance": "which one has the lowest credit score ?",
            "sql": "select customer.cust_name order_by customer.credit_score limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the customer with the lowest credit score ?",
            "sql": "select customer.cust_name order_by customer.credit_score limit_value"
        },
        {
            "utterance": "how about the one who has the highest credit score ?",
            "sql": "select customer.cust_name order_by customer.credit_score desc limit_value"
        },
        {
            "utterance": "show their account types and balances as well .",
            "sql": "select customer.cust_name , customer.acc_type , customer.acc_bal order_by customer.credit_score desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name of customer who has the highest amount of loans.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average amount of all loans ?",
            "sql": "select avg ( loan.amount )"
        },
        {
            "utterance": "how about the total amount ?",
            "sql": "select sum ( loan.amount )"
        },
        {
            "utterance": "Find the names of customer who have loans .",
            "sql": "select distinct customer.cust_name"
        },
        {
            "utterance": "who has the largest amount of loans ?",
            "sql": "select customer.cust_name group_by customer.cust_name order_by sum ( loan.amount ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the state which has the most number of customers.",
        "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show all different states where banks are located .",
            "sql": "select distinct bank.state"
        },
        {
            "utterance": "which state has the most bank customers ?",
            "sql": "select bank.state group_by bank.state order_by sum ( bank.no_of_customers ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"
    },
    "interaction": [
        {
            "utterance": "what are the names of customers with a credit score lower than 50 ?",
            "sql": "select customer.cust_name where customer.credit_score < value"
        },
        {
            "utterance": "what is their average account balance ?",
            "sql": "select avg ( customer.acc_bal ) where customer.credit_score < value"
        },
        {
            "utterance": "find their average account balance for each different account type .",
            "sql": "select avg ( customer.acc_bal ) , customer.acc_type where customer.credit_score < value group_by customer.acc_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 14,
    "final": {
        "utterance": "For each state, find the total account balance of customers whose credit score is above 100.",
        "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"
    },
    "interaction": [
        {
            "utterance": "what states are the customers from ?",
            "sql": "select distinct customer.state"
        },
        {
            "utterance": "For each state , how many customers have a credit score above 100 ?",
            "sql": "select count ( customer.* ) , customer.state where customer.credit_score > value group_by customer.state"
        },
        {
            "utterance": "find their total account balances .",
            "sql": "select sum ( customer.acc_bal ) , customer.state where customer.credit_score > value group_by customer.state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the total amount of loans offered by each bank branch.",
        "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"
    },
    "interaction": [
        {
            "utterance": "how many bank branches are not in the state of New York ?",
            "sql": "select count ( bank.* ) where bank.state != value"
        },
        {
            "utterance": "what is the total number of bank branches ?",
            "sql": "select count ( bank.* )"
        },
        {
            "utterance": "how many loans are offered by each branch ?",
            "sql": "select count ( * ) , bank.bname group_by bank.bname"
        },
        {
            "utterance": "what is the total amount of loans offered by each of them ?",
            "sql": "select sum ( loan.amount ) , bank.bname group_by bank.bname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of customers who have more than one loan.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "how many loans are there ?",
            "sql": "select count ( loan.* )"
        },
        {
            "utterance": "what is the total amount of loans ?",
            "sql": "select sum ( loan.amount )"
        },
        {
            "utterance": "Find the names of customers who have at least one loan .",
            "sql": "select customer.cust_name"
        },
        {
            "utterance": "which of them have more than one loan ?",
            "sql": "select customer.cust_name group_by customer.cust_name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"
    },
    "interaction": [
        {
            "utterance": "Find the names of customers who have at least one loan .",
            "sql": "select distinct customer.cust_name"
        },
        {
            "utterance": "which of them have loans with a total amount of more than 5000 ?",
            "sql": "select customer.cust_name group_by customer.cust_name having sum ( loan.amount ) > value"
        },
        {
            "utterance": "also show their account balances .",
            "sql": "select customer.cust_name , customer.acc_type group_by customer.cust_name having sum ( loan.amount ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the name of bank branch that provided the greatest total amount of loans.",
        "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the total amount of all loans ?",
            "sql": "select sum ( loan.amount )"
        },
        {
            "utterance": "find the names of bank branches that provided these loans .",
            "sql": "select bank.bname"
        },
        {
            "utterance": "which one offered the greatest total amount of loans ?",
            "sql": "select bank.bname group_by bank.bname order_by sum ( loan.amount ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the names of customers whose credit score is higher than 200 ?",
            "sql": "select customer.cust_name where customer.credit_score > value"
        },
        {
            "utterance": "how about those whose credit score is less than 100 ?",
            "sql": "select customer.cust_name where customer.credit_score < value"
        },
        {
            "utterance": "what are the names of bank branches that provided any loans to them ?",
            "sql": "select bank.bname where customer.credit_score < value"
        },
        {
            "utterance": "which bank branch gave the greatest total amount of loans to a customer whose credit score is less than 100 ?",
            "sql": "select bank.bname where customer.credit_score < value group_by bank.bname order_by sum ( loan.amount ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the the name of the customers who have a loan with amount more than 3000.",
        "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"
    },
    "interaction": [
        {
            "utterance": "how many loans have an amount greater than 3000 ?",
            "sql": "select count ( loan.* ) where loan.amount > value"
        },
        {
            "utterance": "what are their types ?",
            "sql": "select distinct loan.loan_type where loan.amount > value"
        },
        {
            "utterance": "Find the names of the customers who own these loans .",
            "sql": "select customer.cust_name where loan.amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the city and name of bank branches that provide business loans.",
        "sql": "SELECT T1.bname,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
    },
    "interaction": [
        {
            "utterance": "what is the total amount of all business loans ?",
            "sql": "select sum ( loan.amount ) where loan.loan_type = value"
        },
        {
            "utterance": "what are the names of bank branches that provide these loans ?",
            "sql": "select bank.bname where loan.loan_type = value"
        },
        {
            "utterance": "which cities are these banks located at ?",
            "sql": "select bank.city where loan.loan_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100"
    },
    "interaction": [
        {
            "utterance": "show the name and credit score of all customers .",
            "sql": "select customer.cust_name , customer.credit_score"
        },
        {
            "utterance": "which of them have a credit score below 100 ?",
            "sql": "select customer.cust_name where customer.credit_score < value"
        },
        {
            "utterance": "Find the names of bank branches that have provided a loan to them .",
            "sql": "select bank.bname where customer.credit_score < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the total amount of loans provided by bank branches in the state of New York.",
        "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'"
    },
    "interaction": [
        {
            "utterance": "how many bank branches does the state of New York have ?",
            "sql": "select count ( bank.* ) where bank.state = value"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select bank.bname where bank.state = value"
        },
        {
            "utterance": "what is the total amount of loans provided by them ?",
            "sql": "select sum ( loan.amount ) where bank.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "loan_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the average credit score of the customers who have some loan.",
        "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
    },
    "interaction": [
        {
            "utterance": "how many customers have at least one loan ?",
            "sql": "select count ( customer.* ) where customer.cust_id in ( select loan.cust_id )"
        },
        {
            "utterance": "which states are they from ?",
            "sql": "select customer.state where customer.cust_id in ( select loan.cust_id )"
        },
        {
            "utterance": "show their credit scores .",
            "sql": "select customer.credit_score where customer.cust_id in ( select loan.cust_id )"
        },
        {
            "utterance": "what is the average ?",
            "sql": "select avg ( customer.credit_score ) where customer.cust_id in ( select loan.cust_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many aircrafts do we have?",
        "sql": "SELECT count(*) FROM Aircraft"
    },
    "interaction": [
        {
            "utterance": "Show all the aircraft information .",
            "sql": "select aircraft.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( aircraft.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Show name and distance for all aircrafts.",
        "sql": "SELECT name ,  distance FROM Aircraft"
    },
    "interaction": [
        {
            "utterance": "Show the names of all aircraft .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "Also show the distances for each of them .",
            "sql": "select aircraft.name , aircraft.distance"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show ids for all aircrafts with more than 1000 distance.",
        "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000"
    },
    "interaction": [
        {
            "utterance": "Show the id for all aircrafts .",
            "sql": "select aircraft.aid"
        },
        {
            "utterance": "Only show the results for those with a distance longer than 1000 .",
            "sql": "select aircraft.aid where aircraft.distance > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many aircrafts have distance between 1000 and 5000?",
        "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
    },
    "interaction": [
        {
            "utterance": "How many aircraft are there ?",
            "sql": "select count ( aircraft.* )"
        },
        {
            "utterance": "How many of them have a distance between 1000 and 5000 ?",
            "sql": "select count ( aircraft.* ) where aircraft.distance between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name and distance for aircraft with id 12?",
        "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
    },
    "interaction": [
        {
            "utterance": "Show the name for all aircraft .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "What about the one with id 12 ?",
            "sql": "select aircraft.name where aircraft.aid = value"
        },
        {
            "utterance": "Also show its distance .",
            "sql": "select aircraft.name , aircraft.distance where aircraft.aid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the minimum, average, and maximum distance of all aircrafts.",
        "sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"
    },
    "interaction": [
        {
            "utterance": "Show the distance for all aircrafts .",
            "sql": "select aircraft.distance"
        },
        {
            "utterance": "Wnat is the minimum ?",
            "sql": "select min ( aircraft.distance )"
        },
        {
            "utterance": "Also show the average and maximum .",
            "sql": "select min ( aircraft.distance ) , avg ( aircraft.distance ) , max ( aircraft.distance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the id and name of the aircraft with the maximum distance.",
        "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the id and name for all aircraft .",
            "sql": "select aircraft.aid , aircraft.name"
        },
        {
            "utterance": "Order the results in descending order of distance .",
            "sql": "select aircraft.aid , aircraft.name order_by aircraft.distance desc"
        },
        {
            "utterance": "Which one has the maximum ?",
            "sql": "select aircraft.aid , aircraft.name order_by aircraft.distance desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name of aircrafts with top three lowest distances.",
        "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show the name for all aircrafts .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "Order them by the distance .",
            "sql": "select aircraft.name order_by aircraft.distance"
        },
        {
            "utterance": "Which three have the lowest ?",
            "sql": "select aircraft.name order_by aircraft.distance limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Show names for all aircrafts with distances more than the average.",
        "sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"
    },
    "interaction": [
        {
            "utterance": "What is the average distance ?",
            "sql": "select avg ( aircraft.distance )"
        },
        {
            "utterance": "Show the name for all aircrafts with a distance above it .",
            "sql": "select aircraft.name where aircraft.distance > ( select avg ( aircraft.distance ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many employees do we have?",
        "sql": "SELECT count(*) FROM Employee"
    },
    "interaction": [
        {
            "utterance": "Show information for all employees .",
            "sql": "select employee.*"
        },
        {
            "utterance": "Show the number of them .",
            "sql": "select count ( employee.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show name and salary for all employees sorted by salary.",
        "sql": "SELECT name ,  salary FROM Employee ORDER BY salary"
    },
    "interaction": [
        {
            "utterance": "Show the name for all employees .",
            "sql": "select employee.name"
        },
        {
            "utterance": "Also show their salaries .",
            "sql": "select employee.name , employee.salary"
        },
        {
            "utterance": "Order the results by their salary .",
            "sql": "select employee.name , employee.salary order_by employee.salary"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Show ids for all employees with at least 100000 salary.",
        "sql": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    "interaction": [
        {
            "utterance": "Show the id for all employees .",
            "sql": "select employee.eid"
        },
        {
            "utterance": "Which of them have a salary above 100000 ?",
            "sql": "select employee.eid where employee.salary > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many employees have salary between 100000 and 200000?",
        "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
    },
    "interaction": [
        {
            "utterance": "Show the total number of employees .",
            "sql": "select count ( employee.* )"
        },
        {
            "utterance": "How many of them have a salary between 100000 and 200000 ?",
            "sql": "select count ( employee.* ) where employee.salary between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the name and salary for employee with id 242518965?",
        "sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"
    },
    "interaction": [
        {
            "utterance": "Show the information for the employee with id 242518965 .",
            "sql": "select employee.* where employee.eid = value"
        },
        {
            "utterance": "What is the name and salary for this employee ?",
            "sql": "select employee.name , employee.salary where employee.eid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is average and maximum salary of all employees.",
        "sql": "SELECT avg(salary) ,  max(salary) FROM Employee"
    },
    "interaction": [
        {
            "utterance": "What is the salary for all employees .",
            "sql": "select employee.salary"
        },
        {
            "utterance": "What are the average and maximum salaries .",
            "sql": "select avg ( employee.salary ) , max ( employee.salary )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the id and name of the employee with maximum salary.",
        "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the id and name of the employees .",
            "sql": "select employee.eid , employee.name"
        },
        {
            "utterance": "Order them by salary .",
            "sql": "select employee.eid , employee.name order_by employee.salary"
        },
        {
            "utterance": "Who has the maximum salary ?",
            "sql": "select employee.eid , employee.name order_by employee.salary desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the name of employees with three lowest salaries.",
        "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show the names of all employees .",
            "sql": "select employee.name"
        },
        {
            "utterance": "Order the results by their salaries .",
            "sql": "select employee.name order_by employee.salary"
        },
        {
            "utterance": "Which three have the lowest ?",
            "sql": "select employee.name order_by employee.salary asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Show names for all employees with salary more than the average.",
        "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
    },
    "interaction": [
        {
            "utterance": "Show the salaries for all employees .",
            "sql": "select employee.salary"
        },
        {
            "utterance": "What is the average of them ?",
            "sql": "select avg ( employee.salary )"
        },
        {
            "utterance": "Show the name for all employees with a salary above that .",
            "sql": "select employee.name where employee.salary > ( select avg ( employee.salary ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the id and salary of Mark Young.",
        "sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"
    },
    "interaction": [
        {
            "utterance": "Show ids for all the employees .",
            "sql": "select employee.eid"
        },
        {
            "utterance": "Show the id for employee Mark Young .",
            "sql": "select employee.eid where employee.name = value"
        },
        {
            "utterance": "Also show his salary .",
            "sql": "select employee.eid , employee.salary where employee.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 19,
    "final": {
        "utterance": "How many flights do we have?",
        "sql": "SELECT count(*) FROM Flight"
    },
    "interaction": [
        {
            "utterance": "Show the info for all flights .",
            "sql": "select flight.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( flight.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"
    },
    "interaction": [
        {
            "utterance": "Show the flight number of all flights .",
            "sql": "select flight.flno"
        },
        {
            "utterance": "Also show the origin and destination for them .",
            "sql": "select flight.flno , flight.origin , flight.destination"
        },
        {
            "utterance": "Order them in the alphabetical order of the departure cities .",
            "sql": "select flight.flno , flight.origin , flight.destination order_by flight.origin"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Show all flight number from Los Angeles.",
        "sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    "interaction": [
        {
            "utterance": "Show all flight numbers",
            "sql": "select flight.flno"
        },
        {
            "utterance": "Filter for only those from Los Angeles ?",
            "sql": "select flight.flno where flight.origin = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Show origins of all flights with destination Honolulu.",
        "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "Show the origin for all flights .",
            "sql": "select flight.origin"
        },
        {
            "utterance": "How about the origin for those with destination Honolulu ?",
            "sql": "select flight.origin where flight.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "Show the departure date and arrival date for all flights .",
            "sql": "select flight.departure_date , flight.arrival_date"
        },
        {
            "utterance": "How about those from Los Angeles ?",
            "sql": "select flight.departure_date , flight.arrival_date where flight.origin = value"
        },
        {
            "utterance": "From these results , only show those flying to Honolulu .",
            "sql": "select flight.departure_date , flight.arrival_date where flight.origin = value and flight.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Show flight number for all flights with more than 2000 distance.",
        "sql": "SELECT flno FROM Flight WHERE distance  >  2000"
    },
    "interaction": [
        {
            "utterance": "Show the flight numbers for all flights .",
            "sql": "select flight.flno"
        },
        {
            "utterance": "How about those with distance longer than 2000 ?",
            "sql": "select flight.flno where flight.distance > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the average price for flights from Los Angeles to Honolulu.",
        "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    "interaction": [
        {
            "utterance": "Show the price for all flights .",
            "sql": "select flight.price"
        },
        {
            "utterance": "How about those from Los Angeles to Honolulu ?",
            "sql": "select flight.price where flight.origin = value and flight.destination = value"
        },
        {
            "utterance": "What is the average of them ?",
            "sql": "select avg ( flight.price ) where flight.origin = value and flight.destination = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Show origin and destination for flights with price higher than 300.",
        "sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300"
    },
    "interaction": [
        {
            "utterance": "Show the origin for all flights .",
            "sql": "select flight.origin"
        },
        {
            "utterance": "How about those with a price higher than 300 ?",
            "sql": "select flight.origin where flight.price > value"
        },
        {
            "utterance": "For each of them , also show the destination .",
            "sql": "select flight.origin , flight.destination where flight.price > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Show the flight number and distance of the flight with maximum price.",
        "sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the flight number and distance of all the flights .",
            "sql": "select flight.flno , flight.distance"
        },
        {
            "utterance": "List them in the descending order of the price .",
            "sql": "select flight.flno , flight.distance order_by flight.price desc"
        },
        {
            "utterance": "Which has the maximum price ?",
            "sql": "select flight.flno , flight.distance order_by flight.price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the flight number of flights with three lowest distances.",
        "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show all flight numbers .",
            "sql": "select flight.flno"
        },
        {
            "utterance": "Order them by the distance .",
            "sql": "select flight.flno order_by flight.distance"
        },
        {
            "utterance": "Show the three shortest .",
            "sql": "select flight.flno order_by flight.distance asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the average distance and average price for flights from Los Angeles.",
        "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    "interaction": [
        {
            "utterance": "Show the distance and price for all flights .",
            "sql": "select flight.distance , flight.price"
        },
        {
            "utterance": "Show the result only for those from Los Angeles .",
            "sql": "select flight.distance , flight.price where flight.origin = value"
        },
        {
            "utterance": "What is the average distance and average price for them ?",
            "sql": "select avg ( flight.distance ) , avg ( flight.price ) where flight.origin = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Show all origins and the number of flights from each origin.",
        "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    "interaction": [
        {
            "utterance": "Show the number of flights in total .",
            "sql": "select count ( flight.* )"
        },
        {
            "utterance": "Breakdown the count by the origin .",
            "sql": "select flight.origin , count ( flight.* ) group_by flight.origin"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Show all destinations and the number of flights to each destination.",
        "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination"
    },
    "interaction": [
        {
            "utterance": "Show the destination for all flights .",
            "sql": "select flight.destination"
        },
        {
            "utterance": "For each of them , what is the number of flights ?",
            "sql": "select flight.destination , count ( flight.* ) group_by flight.destination"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Which origin has most number of flights?",
        "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the origin for all flights .",
            "sql": "select flight.origin"
        },
        {
            "utterance": "For each city , how many flights are departing from there ?",
            "sql": "select flight.origin , count ( flight.* ) group_by flight.origin"
        },
        {
            "utterance": "Order them in descending order of number of departures .",
            "sql": "select flight.origin group_by flight.origin order_by count ( flight.* ) desc"
        },
        {
            "utterance": "Which origin has the most ?",
            "sql": "select flight.origin group_by flight.origin order_by count ( flight.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Which destination has least number of flights?",
        "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the destination for all flights .",
            "sql": "select flight.destination"
        },
        {
            "utterance": "For each destination , show the number of flights arriving there .",
            "sql": "select flight.destination , count ( flight.* ) group_by flight.destination"
        },
        {
            "utterance": "Which destination has the fewest ?",
            "sql": "select flight.destination group_by flight.destination order_by count ( flight.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the aircraft name for the flight with number 99",
        "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
    },
    "interaction": [
        {
            "utterance": "Show the name for all aircraft .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "Which one of them is being taken on flight 99 ?",
            "sql": "select aircraft.name where flight.flno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Show all flight numbers with aircraft Airbus A340-300.",
        "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
    },
    "interaction": [
        {
            "utterance": "Show all flight numbers .",
            "sql": "select flight.flno"
        },
        {
            "utterance": "Which of them are on aircraft Airbus A340-300 ?",
            "sql": "select flight.flno where aircraft.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Show aircraft names and number of flights for each aircraft.",
        "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
    },
    "interaction": [
        {
            "utterance": "Show the name for all aircraft .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "For each of them , count the number of flights .",
            "sql": "select aircraft.name , count ( * ) group_by flight.aid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 37,
    "final": {
        "utterance": "Show names for all aircraft with at least two flights.",
        "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
    },
    "interaction": [
        {
            "utterance": "Show names for all aircraft .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "For each of them , also show the number of flights .",
            "sql": "select aircraft.name , count ( * ) group_by flight.aid"
        },
        {
            "utterance": "Which two have the fewest ?",
            "sql": "select aircraft.name group_by flight.aid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 38,
    "final": {
        "utterance": "How many employees have certificate.",
        "sql": "SELECT count(DISTINCT eid) FROM Certificate"
    },
    "interaction": [
        {
            "utterance": "Show employee ids for all certificates .",
            "sql": "select certificate.eid"
        },
        {
            "utterance": "What are the distinct ids among them ?",
            "sql": "select distinct certificate.eid"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct certificate.eid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 39,
    "final": {
        "utterance": "Show ids for all employees who do not have a certificate.",
        "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    "interaction": [
        {
            "utterance": "Show the employee ids with a certificate .",
            "sql": "select certificate.eid"
        },
        {
            "utterance": "Show the employee ids without any .",
            "sql": "select employee.eid except select certificate.eid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Show names for all aircrafts of which John Williams has certificates.",
        "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
    },
    "interaction": [
        {
            "utterance": "Show the name for all aircraft .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "For each , also show the names of employees with a certificate on it .",
            "sql": "select aircraft.name , employee.name"
        },
        {
            "utterance": "What are the names of aircraft of which John Williams has certificates ?",
            "sql": "select aircraft.name where employee.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 41,
    "final": {
        "utterance": "Show names for all employees who have certificate of Boeing 737-800.",
        "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
    },
    "interaction": [
        {
            "utterance": "Show names for all employees .",
            "sql": "select employee.name"
        },
        {
            "utterance": "Also show the name of aircraft on which they have a certificate .",
            "sql": "select employee.name , aircraft.name"
        },
        {
            "utterance": "Which of those employees have certificate of Boeing 737-800 ?",
            "sql": "select employee.name where aircraft.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
        "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\""
    },
    "interaction": [
        {
            "utterance": "Show names for all employees .",
            "sql": "select employee.name"
        },
        {
            "utterance": "Which of those have certificates on Boeing 737-800 ?",
            "sql": "select employee.name where aircraft.name = value"
        },
        {
            "utterance": "How about those with certificates on Airbus A340-300 ?",
            "sql": "select employee.name where aircraft.name = value"
        },
        {
            "utterance": "Who have both ?",
            "sql": "select employee.name where aircraft.name = value intersect select employee.name where aircraft.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 43,
    "final": {
        "utterance": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""
    },
    "interaction": [
        {
            "utterance": "Show the names of employees with a certificate .",
            "sql": "select employee.name"
        },
        {
            "utterance": "Which of them have a certificate on Boeing 737-800 ?",
            "sql": "select employee.name where aircraft.name = value"
        },
        {
            "utterance": "Show the names for all employees without this particular certificate .",
            "sql": "select employee.name except select employee.name where aircraft.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 44,
    "final": {
        "utterance": "Show the name of aircraft which fewest people have its certificate.",
        "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name of all aircrafts .",
            "sql": "select aircraft.name"
        },
        {
            "utterance": "Also show the number of people with a certificate on each one .",
            "sql": "select aircraft.name , count ( * ) group_by certificate.aid"
        },
        {
            "utterance": "Order the aircraft by these counts .",
            "sql": "select aircraft.name group_by certificate.aid order_by count ( * )"
        },
        {
            "utterance": "Which of them has the fewest ?",
            "sql": "select aircraft.name group_by certificate.aid order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 45,
    "final": {
        "utterance": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "sql": "SELECT T2.name, T2.distance FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
    },
    "interaction": [
        {
            "utterance": "Show the name and distance of the aircrafts .",
            "sql": "select aircraft.name , aircraft.distance"
        },
        {
            "utterance": "How about those with a distance longer than 5000 ?",
            "sql": "select aircraft.name , aircraft.distance where aircraft.distance > value"
        },
        {
            "utterance": "Which also have at least 5 people with the certificate ?",
            "sql": "select aircraft.name , aircraft.distance where aircraft.distance > value group_by certificate.aid order_by count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_1",
    "interaction_id": 46,
    "final": {
        "utterance": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the employee names with their corresponding counts of aircraft certificates .",
            "sql": "select employee.name , count ( * ) group_by employee.eid"
        },
        {
            "utterance": "Order the employees by these counts .",
            "sql": "select employee.name , count ( * ) group_by employee.eid order_by count ( * )"
        },
        {
            "utterance": "Who has the most certificates ?",
            "sql": "select employee.name group_by employee.eid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is the name and salary of this employee ?",
            "sql": "select employee.name , employee.salary group_by employee.eid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the minister who took office after 1961 or before 1959.",
        "sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"
    },
    "interaction": [
        {
            "utterance": "Show me a list of party ministers .",
            "sql": "select party.minister"
        },
        {
            "utterance": "Which ones took office between 1959 and 1961 ?",
            "sql": "select party.minister where party.took_office > = value and party.took_office < = value"
        },
        {
            "utterance": "How about the others except those ?",
            "sql": "select party.minister where party.took_office > value or party.took_office < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 1,
    "final": {
        "utterance": "Return the minister who left office at the latest time.",
        "sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are all the ministers ?",
            "sql": "select party.minister"
        },
        {
            "utterance": "When did they each start ?",
            "sql": "select party.minister , party.took_office"
        },
        {
            "utterance": "When did they each leave ?",
            "sql": "select party.minister , party.left_office"
        },
        {
            "utterance": "Who left most recently ?",
            "sql": "select party.minister order_by party.left_office desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all party names and the number of members in each party.",
        "sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    "interaction": [
        {
            "utterance": "What are all the party names ?",
            "sql": "select party.party_name"
        },
        {
            "utterance": "Show me all the members each have .",
            "sql": "select *"
        },
        {
            "utterance": "How many does each party have ?",
            "sql": "select party.party_name , count ( * ) group_by party.party_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name of party with most number of members?",
        "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What about the least number ?",
            "sql": "select count ( * ) group_by member.party_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the max ?",
            "sql": "select count ( * ) group_by member.party_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of the party that has this number per party ?",
            "sql": "select party.party_name group_by member.party_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 4,
    "final": {
        "utterance": "Show names of parties that does not have any members.",
        "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"
    },
    "interaction": [
        {
            "utterance": "What are the names of all parties ?",
            "sql": "select party.party_name"
        },
        {
            "utterance": "How many have no members ?",
            "sql": "select count ( party.* ) where party.party_id not in ( select member.party_id )"
        },
        {
            "utterance": "Which ones ?",
            "sql": "select party.party_name where party.party_id not in ( select member.party_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the member names which are in both the party with id 3 and the party with id 1.",
        "sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1"
    },
    "interaction": [
        {
            "utterance": "What are all the member names ?",
            "sql": "select member.member_name"
        },
        {
            "utterance": "Which ones are in party with id 1 ?",
            "sql": "select member.member_name where member.party_id = value"
        },
        {
            "utterance": "How about in party with id 3 ?",
            "sql": "select member.member_name where member.party_id = value"
        },
        {
            "utterance": "Can you show me those in both ?",
            "sql": "select member.member_name where member.party_id = value intersect select member.member_name where member.party_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 6,
    "final": {
        "utterance": "Show member names that are not in the Progress Party.",
        "sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\""
    },
    "interaction": [
        {
            "utterance": "How many members are there ?",
            "sql": "select count ( member.* )"
        },
        {
            "utterance": "How many are in the Progressive party ?",
            "sql": "select count ( * ) where party.party_name = value"
        },
        {
            "utterance": "How many are not ?",
            "sql": "select count ( * ) where party.party_name != value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select member.member_name where party.party_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 7,
    "final": {
        "utterance": "Show party names and the number of events for each party.",
        "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    "interaction": [
        {
            "utterance": "What are the names and ids of all the party events ?",
            "sql": "select party_events.event_id , party_events.event_name"
        },
        {
            "utterance": "What parties are each event affiliated with ?",
            "sql": "select party_events.event_id , party_events.event_name , party_events.party_id"
        },
        {
            "utterance": "Just show me a distinct list of the names these parties .",
            "sql": "select distinct party.party_name"
        },
        {
            "utterance": "Also show how many events each of them !",
            "sql": "select party.party_name , count ( * ) group_by party_events.party_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 8,
    "final": {
        "utterance": "Show all member names who are not in charge of any event.",
        "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id"
    },
    "interaction": [
        {
            "utterance": "Show me all the information for all the party events ?",
            "sql": "select party_events.*"
        },
        {
            "utterance": "Also show all the distinct member information of those in charge of them ?",
            "sql": "select *"
        },
        {
            "utterance": "Now just show me the distinct members information for all the members other than those ?",
            "sql": "select member.* except select member.*"
        },
        {
            "utterance": "Just show me their names !",
            "sql": "select member.member_name except select member.member_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of parties with at least 2 events?",
        "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What parties do not host any events ?",
            "sql": "select party.* except select party.*"
        },
        {
            "utterance": "Which ones host at least one event ?",
            "sql": "select distinct *"
        },
        {
            "utterance": "How about 2 ?",
            "sql": "select * group_by party_events.party_id having count ( * ) > = value"
        },
        {
            "utterance": "Show just the names of these !",
            "sql": "select party.party_name group_by party_events.party_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of member in charge of greatest number of events?",
        "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different member in charges are there for all party_events ?",
            "sql": "select count ( distinct party_events.member_in_charge_id )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select member.member_name group_by party_events.member_in_charge_id"
        },
        {
            "utterance": "How many events are they each in charge of ?",
            "sql": "select member.member_name , count ( * ) group_by party_events.member_in_charge_id"
        },
        {
            "utterance": "Who has the greatest number ?",
            "sql": "select member.member_name group_by party_events.member_in_charge_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "party_people",
    "interaction_id": 11,
    "final": {
        "utterance": "find the event names that have more than 2 records.",
        "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show me all the event ids , event names and party id for each party_event .",
            "sql": "select party_events.event_id , party_events.event_name , party_events.party_id"
        },
        {
            "utterance": "How events are there for every party ?",
            "sql": "select party_events.party_id , count ( party_events.* ) group_by party_events.party_id"
        },
        {
            "utterance": "How about for every event name ?",
            "sql": "select party_events.event_name , count ( party_events.* ) group_by party_events.event_name"
        },
        {
            "utterance": "Which event names have at least 2 ?",
            "sql": "select party_events.event_name group_by party_events.event_name having count ( party_events.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 0,
    "final": {
        "utterance": "List the locations of schools in ascending order of enrollment.",
        "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC"
    },
    "interaction": [
        {
            "utterance": "What are the locations of each school ordered in the date founded , oldest first ?",
            "sql": "select school.location order_by school.founded asc"
        },
        {
            "utterance": "Actually , order the result in ascending order of enrollment .",
            "sql": "select school.location order_by school.enrollment asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 1,
    "final": {
        "utterance": "List the locations of schools in descending order of founded year.",
        "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC;"
    },
    "interaction": [
        {
            "utterance": "What are the locations of each school ?",
            "sql": "select school.location"
        },
        {
            "utterance": "Order the result in descending order of founded year .",
            "sql": "select school.location order_by school.founded desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
        "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\";"
    },
    "interaction": [
        {
            "utterance": "What is the denomination of each school ?",
            "sql": "select school.denomination"
        },
        {
            "utterance": "What are the enrollments of schools whose denomination is `` Catholic '' ?",
            "sql": "select school.enrollment where school.denomination = value"
        },
        {
            "utterance": "How about non-Catholic ?",
            "sql": "select school.enrollment where school.denomination != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average enrollment of schools?",
        "sql": "SELECT avg(Enrollment) FROM school;"
    },
    "interaction": [
        {
            "utterance": "What is the combined total enrollment of all schools ?",
            "sql": "select sum ( school.enrollment )"
        },
        {
            "utterance": "How about the maximum enrollment ?",
            "sql": "select school.enrollment order_by school.enrollment limit_value"
        },
        {
            "utterance": "Show me the average enrollment .",
            "sql": "select avg ( school.enrollment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the teams of the players, sorted in ascending alphabetical order?",
        "sql": "SELECT Team FROM player ORDER BY Team ASC;"
    },
    "interaction": [
        {
            "utterance": "What are the ages of the players ?",
            "sql": "select player.age"
        },
        {
            "utterance": "Show their teams instead .",
            "sql": "select player.team"
        },
        {
            "utterance": "Sort the result in ascending alphabetical order .",
            "sql": "select player.team order_by player.team asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the team of the player of the highest age.",
        "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me all about each player .",
            "sql": "select player.*"
        },
        {
            "utterance": "Who is the oldest among them ?",
            "sql": "select player.player order_by player.age desc limit_value"
        },
        {
            "utterance": "What 's his team ?",
            "sql": "select player.team order_by player.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 6,
    "final": {
        "utterance": "List the teams of the players with the top 5 largest ages.",
        "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( player.* )"
        },
        {
            "utterance": "What 's their average age ?",
            "sql": "select avg ( player.age )"
        },
        {
            "utterance": "List the teams of the players with the top 5 largest ages .",
            "sql": "select player.team order_by player.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 7,
    "final": {
        "utterance": "For each player, show the team and the location of school they belong to.",
        "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID;"
    },
    "interaction": [
        {
            "utterance": "Show me the location of each school .",
            "sql": "select school.location"
        },
        {
            "utterance": "For each player , show the location of the school they belong to .",
            "sql": "select school.location"
        },
        {
            "utterance": "Also provide , the team name .",
            "sql": "select player.team , school.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the locations of schools that have more than 1 player.",
        "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1;"
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( school.* )"
        },
        {
            "utterance": "Show me their locations .",
            "sql": "select school.location"
        },
        {
            "utterance": "Which of them have more than 3 players ?",
            "sql": "select school.location group_by player.school_id having count ( * ) > value"
        },
        {
            "utterance": "How about more than 1 player ?",
            "sql": "select school.location group_by player.school_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the denomination of the school that has the most players.",
        "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which school has the least number of players ?",
            "sql": "select school.school group_by player.school_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about with the most players ?",
            "sql": "select school.school group_by player.school_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show me the denomination of this school .",
            "sql": "select school.denomination group_by player.school_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 10,
    "final": {
        "utterance": "Show locations and nicknames of schools.",
        "sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID;"
    },
    "interaction": [
        {
            "utterance": "Show me the school details .",
            "sql": "select school_details.*"
        },
        {
            "utterance": "What 's each school 's color ?",
            "sql": "select school_details.colors"
        },
        {
            "utterance": "List the location and nickname of each school .",
            "sql": "select school.location , school_details.nickname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 11,
    "final": {
        "utterance": "Please show different denominations and the corresponding number of schools.",
        "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination"
    },
    "interaction": [
        {
            "utterance": "Show me whether each school is a boys ' or girls ' school .",
            "sql": "select school.boys_or_girls"
        },
        {
            "utterance": "What are the distinct school denominations ?",
            "sql": "select distinct ( school.denomination )"
        },
        {
            "utterance": "For each denomination , how many schools are there ?",
            "sql": "select school.denomination , count ( school.* ) group_by school.denomination"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 12,
    "final": {
        "utterance": "Please show different denominations and the corresponding number of schools in descending order.",
        "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "How many different denominations does each school have ?",
            "sql": "select count ( distinct school.denomination )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select distinct school.denomination"
        },
        {
            "utterance": "How many schools are there for every denomination . Show Denomination and number of schools .",
            "sql": "select school.denomination , count ( school.* ) group_by school.denomination"
        },
        {
            "utterance": "Show the results in descending order !",
            "sql": "select school.denomination , count ( school.* ) group_by school.denomination order_by count ( school.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 13,
    "final": {
        "utterance": "List the school color of the school that has the largest enrollment.",
        "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What school has the largest enrollment ?",
            "sql": "select school.* order_by school.enrollment desc limit_value"
        },
        {
            "utterance": "What are its school colors ?",
            "sql": "select school.school_colors order_by school.enrollment desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 14,
    "final": {
        "utterance": "List the locations of schools that do not have any player.",
        "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)"
    },
    "interaction": [
        {
            "utterance": "How many schools are there ?",
            "sql": "select count ( school.* )"
        },
        {
            "utterance": "How many do n't have any players ?",
            "sql": "select count ( school.* ) where school.school_id not in ( select player.school_id )"
        },
        {
            "utterance": "Which ones do n't have any players ?",
            "sql": "select school.* where school.school_id not in ( select player.school_id )"
        },
        {
            "utterance": "Show their locations .",
            "sql": "select school.location where school.school_id not in ( select player.school_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900;"
    },
    "interaction": [
        {
            "utterance": "Show the denominations of schools .",
            "sql": "select school.denomination"
        },
        {
            "utterance": "Also provide their founding year ?",
            "sql": "select school.denomination , school.founded"
        },
        {
            "utterance": "List the denomination shared by schools founded before 1890 and schools founded after 1900 .",
            "sql": "select school.denomination where school.founded < value intersect select school.denomination where school.founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "school_player",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the nicknames of schools that are not in division 1.",
        "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\";"
    },
    "interaction": [
        {
            "utterance": "Show me the school names in division 1 .",
            "sql": "select school.school where school_details.division = value"
        },
        {
            "utterance": "How about those not in division 1 ?",
            "sql": "select school.school where school_details.division != value"
        },
        {
            "utterance": "List their nicknames .",
            "sql": "select school_details.nickname where school_details.division != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the list of page size which have more than 3 product listed",
        "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3"
    },
    "interaction": [
        {
            "utterance": "What are the products available in the stores ?",
            "sql": "select product.product"
        },
        {
            "utterance": "What about the maximum page sizes supported by these products ?",
            "sql": "select product.product , product.max_page_size"
        },
        {
            "utterance": "Which products have a maximum page size A4 ?",
            "sql": "select product.product where product.max_page_size = value"
        },
        {
            "utterance": "Which maximum page sizes are the maximum page size for more than 3 products ?",
            "sql": "select product.max_page_size group_by product.max_page_size having count ( product.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000"
    },
    "interaction": [
        {
            "utterance": "What are the districts out there ?",
            "sql": "select district.district_name"
        },
        {
            "utterance": "What is the name of the headquartered city of each district ?",
            "sql": "select district.district_name , district.headquartered_city"
        },
        {
            "utterance": "Which of these given districts have a city population larger than 100000 ?",
            "sql": "select district.district_name where district.city_population > value"
        },
        {
            "utterance": "Also show the districts that have a city area greater than 10 .",
            "sql": "select district.district_name where district.city_area > value or district.city_population > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 2,
    "final": {
        "utterance": "Which district has the largest population?",
        "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you give me the names of the districts .",
            "sql": "select district.district_name"
        },
        {
            "utterance": "Tell me the city population of these districts .",
            "sql": "select district.district_name , district.city_population"
        },
        {
            "utterance": "Which of these cities have an above average population ?",
            "sql": "select district.district_name where district.city_population > ( select avg ( district.city_population ) )"
        },
        {
            "utterance": "Which district has the largest city population ?",
            "sql": "select district.district_name order_by district.city_population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 3,
    "final": {
        "utterance": "Which district has the least area?",
        "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the districts out there ?",
            "sql": "select district.district_name"
        },
        {
            "utterance": "Tell me the city area of these districts .",
            "sql": "select district.district_name , district.city_area"
        },
        {
            "utterance": "Of all these districts , which ones have a below average city area ?",
            "sql": "select district.district_name where district.city_area < ( select avg ( district.city_area ) )"
        },
        {
            "utterance": "Which of these districts has the least city area ?",
            "sql": "select district.district_name where district.city_area = ( select min ( district.city_area ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the names of all stores in Khanewal District.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the districts ?",
            "sql": "select district.district_name"
        },
        {
            "utterance": "Tell me which of these districts have stores .",
            "sql": "select distinct district.district_name"
        },
        {
            "utterance": "What are the store names of the Hafizabad District ?",
            "sql": "select store.store_name where district.district_name = value"
        },
        {
            "utterance": "What about the store names of the Khanewal District ?",
            "sql": "select store.store_name where district.district_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 5,
    "final": {
        "utterance": "Find all the stores in the district with the most population.",
        "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are the populations of the districts ?",
            "sql": "select district.city_population"
        },
        {
            "utterance": "Can you also tell me the stores in each district along with the population ?",
            "sql": "select store.store_name , district.city_population"
        },
        {
            "utterance": "Which of these stores are from the districts with above average population ?",
            "sql": "select store.store_name where district.city_population > ( select avg ( district.city_population ) )"
        },
        {
            "utterance": "What about the stores from the district with the most population ?",
            "sql": "select store.store_name where district.district_id = ( select district.district_id order_by district.city_population desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 6,
    "final": {
        "utterance": "Which city is the headquarter of the store named \"Blackville\" in?",
        "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""
    },
    "interaction": [
        {
            "utterance": "Can you tell me about the names of all the stores ?",
            "sql": "select store.store_name"
        },
        {
            "utterance": "What is the type of the store `` Blackville '' ?",
            "sql": "select store.type where store.store_name = value"
        },
        {
            "utterance": "In which district is `` Blackville '' located ?",
            "sql": "select district.district_name where store.store_name = value"
        },
        {
            "utterance": "Which city is `` Blackville '' headquartered in ?",
            "sql": "select district.headquartered_city where store.store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the number of stores in each city.",
        "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the cities .",
            "sql": "select district.headquartered_city"
        },
        {
            "utterance": "How about the names of all the stores ?",
            "sql": "select store.store_name"
        },
        {
            "utterance": "Which cities have these stores ?",
            "sql": "select distinct district.headquartered_city"
        },
        {
            "utterance": "What is the number of stores for each of these cities ?",
            "sql": "select district.headquartered_city , count ( * ) group_by district.headquartered_city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the city with the most number of stores.",
        "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me all the cities and their respective stores .",
            "sql": "select district.headquartered_city , store.store_name"
        },
        {
            "utterance": "How many stores are there for each city ?",
            "sql": "select district.headquartered_city , count ( * ) group_by district.headquartered_city"
        },
        {
            "utterance": "Which city has the least number of stores ?",
            "sql": "select district.headquartered_city group_by district.headquartered_city order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "What about the one with the most ?",
            "sql": "select district.headquartered_city group_by district.headquartered_city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 9,
    "final": {
        "utterance": "What products are available at store named \"Miramichi\"?",
        "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\""
    },
    "interaction": [
        {
            "utterance": "Can you list all the stores ?",
            "sql": "select store.store_name"
        },
        {
            "utterance": "Which ones have products ?",
            "sql": "select distinct store.store_name"
        },
        {
            "utterance": "What products do they sell ?",
            "sql": "select product.product"
        },
        {
            "utterance": "Out of those products , which ones are available at `` Miramichi '' ?",
            "sql": "select product.product where store.store_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 10,
    "final": {
        "utterance": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5"
    },
    "interaction": [
        {
            "utterance": "What are the products out there ?",
            "sql": "select product.product"
        },
        {
            "utterance": "Tell me the page per minute color of these products .",
            "sql": "select product.product , product.pages_per_minute_color"
        },
        {
            "utterance": "Which of these have a pages per minute color smaller than 5 ?",
            "sql": "select product.product where product.pages_per_minute_color < value"
        },
        {
            "utterance": "Which of these listed products also have a max page size `` A4 '' ?",
            "sql": "select product.product where product.max_page_size = value and product.pages_per_minute_color < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 11,
    "final": {
        "utterance": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5"
    },
    "interaction": [
        {
            "utterance": "Give me the list of the products .",
            "sql": "select product.product"
        },
        {
            "utterance": "Tell me the max page size of these products .",
            "sql": "select product.product , product.max_page_size"
        },
        {
            "utterance": "Which of these have a max page size of `` A4 '' ?",
            "sql": "select product.product where product.max_page_size = value"
        },
        {
            "utterance": "Also include those that have a pages per minute color smaller than 5 .",
            "sql": "select product.product where product.max_page_size = value or product.pages_per_minute_color < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 12,
    "final": {
        "utterance": "Find all the product whose name contains the word \"Scanner\".",
        "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\""
    },
    "interaction": [
        {
            "utterance": "List the available products .",
            "sql": "select product.product"
        },
        {
            "utterance": "Which of these products contains the word word `` Canon '' ?",
            "sql": "select product.product where product.product like value"
        },
        {
            "utterance": "How about the word `` Fujitsu '' ?",
            "sql": "select product.product where product.product like value"
        },
        {
            "utterance": "How about the word `` Scanner '' ?",
            "sql": "select product.product where product.product like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the most prominent max page size among all the products.",
        "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me all the max page sizes available .",
            "sql": "select distinct product.max_page_size"
        },
        {
            "utterance": "Give me the names of all products .",
            "sql": "select product.product"
        },
        {
            "utterance": "What are the corresponding max page sizes of these products ?",
            "sql": "select product.product , product.max_page_size"
        },
        {
            "utterance": "Which max page sizes are the most prominent ?",
            "sql": "select product.max_page_size group_by product.max_page_size order_by count ( product.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the products that are not using the most frequently-used max page size.",
        "sql": "SELECT product FROM product WHERE max_page_size != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "Can you show me all the products ?",
            "sql": "select product.product"
        },
        {
            "utterance": "Give me the max page sizes for each of these products .",
            "sql": "select product.product , product.max_page_size"
        },
        {
            "utterance": "Which of these max page sizes is most frequently used ?",
            "sql": "select product.max_page_size group_by product.max_page_size order_by count ( product.* ) desc limit_value"
        },
        {
            "utterance": "Which products do not use this max page size ?",
            "sql": "select product.product where product.max_page_size != ( select product.max_page_size group_by product.max_page_size order_by count ( product.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_product",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the total population of the districts where the area is bigger than the average city area.",
        "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)"
    },
    "interaction": [
        {
            "utterance": "Show me all the districts .",
            "sql": "select district.district_name"
        },
        {
            "utterance": "What is the average city area of these districts ?",
            "sql": "select avg ( district.city_area )"
        },
        {
            "utterance": "Which districts have a higher than average city area ?",
            "sql": "select district.district_name where district.city_area > ( select avg ( district.city_area ) )"
        },
        {
            "utterance": "What is the total population of these districts ?",
            "sql": "select sum ( district.city_population ) where district.city_area > ( select avg ( district.city_area ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 0,
    "final": {
        "utterance": "How many friends does Dan have?",
        "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
    },
    "interaction": [
        {
            "utterance": "How old is Dan ?",
            "sql": "select person.age where person.name = value"
        },
        {
            "utterance": "What city is she from ?",
            "sql": "select person.city where person.name = value"
        },
        {
            "utterance": "Show all friends of Dan .",
            "sql": "select personfriend.* where personfriend.name = value"
        },
        {
            "utterance": "How many friends is this ?",
            "sql": "select count ( personfriend.friend ) where person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Who is the oldest person?",
        "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)"
    },
    "interaction": [
        {
            "utterance": "Show all ages of people .",
            "sql": "select person.age"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( person.age )"
        },
        {
            "utterance": "What is the maximum ?",
            "sql": "select max ( person.age )"
        },
        {
            "utterance": "What is the name of the person with this age ?",
            "sql": "select person.name where person.age = ( select max ( person.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Who is the oldest person whose job is student?",
        "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )"
    },
    "interaction": [
        {
            "utterance": "How many distinct jobs do the people have ?",
            "sql": "select count ( distinct person.job )"
        },
        {
            "utterance": "What are these jobs ?",
            "sql": "select distinct person.job"
        },
        {
            "utterance": "List the names of all students .",
            "sql": "select person.name where person.job = value"
        },
        {
            "utterance": "What is the maximum age of students ?",
            "sql": "select max ( person.age ) where person.job = value"
        },
        {
            "utterance": "Print the name of the student with this age .",
            "sql": "select person.name where person.job = value and person.age = ( select max ( person.age ) where person.job = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Who is the youngest male?",
        "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )"
    },
    "interaction": [
        {
            "utterance": "List all female names .",
            "sql": "select person.name where person.gender = value"
        },
        {
            "utterance": "How about males ?",
            "sql": "select person.name where person.gender = value"
        },
        {
            "utterance": "What are the maximum ages for each gender ?",
            "sql": "select person.gender , max ( person.age ) group_by person.gender"
        },
        {
            "utterance": "Who is the youngest male ?",
            "sql": "select person.name where person.gender = value and person.age = ( select min ( person.age ) where person.gender = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 4,
    "final": {
        "utterance": "How old is the doctor named Zach?",
        "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'"
    },
    "interaction": [
        {
            "utterance": "What is the last name alphabetically ?",
            "sql": "select person.name order_by person.name desc limit_value"
        },
        {
            "utterance": "What is the occupation for Zach ?",
            "sql": "select person.job where person.name = value"
        },
        {
            "utterance": "How old is the doctor named Zach ?",
            "sql": "select person.age where person.job = value and person.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 5,
    "final": {
        "utterance": "How many people whose age is greater 30 and job is engineer?",
        "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"
    },
    "interaction": [
        {
            "utterance": "How many people are older than 20 ?",
            "sql": "select count ( person.* ) where person.age > value"
        },
        {
            "utterance": "How about 30 ?",
            "sql": "select count ( person.* ) where person.age > value"
        },
        {
            "utterance": "How many engineers are there ?",
            "sql": "select count ( person.* ) where person.job = value"
        },
        {
            "utterance": "How many people are both engineers and are over 30 years old ?",
            "sql": "select count ( person.* ) where person.age > value and person.job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 6,
    "final": {
        "utterance": "What is average age of male for different job title?",
        "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job"
    },
    "interaction": [
        {
            "utterance": "What is the sum of ages for men ?",
            "sql": "select sum ( person.age ) where person.gender = value"
        },
        {
            "utterance": "What about the average ?",
            "sql": "select avg ( person.age ) where person.gender = value"
        },
        {
            "utterance": "What is the average for each job ?",
            "sql": "select avg ( person.age ) where person.gender = value group_by person.job"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the number of people who is under 40 for each gender.",
        "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"
    },
    "interaction": [
        {
            "utterance": "How many different people are over 40 ?",
            "sql": "select count ( distinct person.name ) where person.age > value"
        },
        {
            "utterance": "How about under ?",
            "sql": "select count ( distinct person.name ) where person.age < value"
        },
        {
            "utterance": "How many are male ?",
            "sql": "select count ( distinct person.name ) where person.age < value and person.gender = value"
        },
        {
            "utterance": "What is the count under 40 for each gender ?",
            "sql": "select count ( person.* ) , person.gender where person.age < value group_by person.gender"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "What is the minimum age of engineers ?",
            "sql": "select min ( person.age ) where person.job = value"
        },
        {
            "utterance": "List all information for people older than this .",
            "sql": "select person.* where person.age > ( select min ( person.age ) where person.job = value )"
        },
        {
            "utterance": "Just show their name .",
            "sql": "select person.name where person.age > ( select min ( person.age ) where person.job = value )"
        },
        {
            "utterance": "Sort this group in order of ascending age .",
            "sql": "select person.name where person.age > ( select min ( person.age ) where person.job = value ) order_by person.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the number of people whose age is greater than all engineers.",
        "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
    },
    "interaction": [
        {
            "utterance": "What is the maximum age of engineers ?",
            "sql": "select max ( person.age ) where person.job = value"
        },
        {
            "utterance": "List all information for people older than this .",
            "sql": "select person.* where person.age > ( select min ( person.age ) where person.job = value )"
        },
        {
            "utterance": "Where are they all from ?",
            "sql": "select person.city where person.age > ( select min ( person.age ) where person.job = value )"
        },
        {
            "utterance": "How many are there in total ?",
            "sql": "select count ( person.* ) where person.age > ( select max ( person.age ) where person.job = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and age of all males in order of their age.",
        "sql": "SELECT name, age FROM Person WHERE gender  =  'male' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "Show all names of the men .",
            "sql": "select person.name where person.gender = value"
        },
        {
            "utterance": "Order them by descending age .",
            "sql": "select person.name where person.gender = value order_by person.age desc"
        },
        {
            "utterance": "Reverse the oder .",
            "sql": "select person.name where person.gender = value order_by person.age"
        },
        {
            "utterance": "Also show the ages .",
            "sql": "select person.name , person.age where person.gender = value order_by person.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "Show name and age of the people who are friends with Dan .",
            "sql": "select person.name , person.age where personfriend.friend = value"
        },
        {
            "utterance": "How about the friends of Alice ?",
            "sql": "select person.name , person.age where personfriend.friend = value"
        },
        {
            "utterance": "Show the union of the sets .",
            "sql": "select person.name , person.age where personfriend.friend = value union select person.name , person.age where personfriend.friend = value"
        },
        {
            "utterance": "How about the intersections ?",
            "sql": "select person.name , person.age where personfriend.friend = value intersect select person.name , person.age where personfriend.friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name and age of the person who is a friend of Dan or Alice.",
        "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"
    },
    "interaction": [
        {
            "utterance": "How many people are friends with Dan ?",
            "sql": "select count ( personfriend.* ) where personfriend.friend = value"
        },
        {
            "utterance": "How about for Alice ?",
            "sql": "select count ( personfriend.* ) where personfriend.friend = value"
        },
        {
            "utterance": "Show the name and age of poeple who are friends with either .",
            "sql": "select distinct person.name , person.age where personfriend.friend = value or personfriend.friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the person who has friends with age above 40 and under age 30?",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
    },
    "interaction": [
        {
            "utterance": "Show how many friends each person in the set has .",
            "sql": "select personfriend.name , count ( personfriend.* ) group_by personfriend.name"
        },
        {
            "utterance": "Who has the most friends ?",
            "sql": "select personfriend.name group_by personfriend.name order_by count ( personfriend.* ) desc limit_value"
        },
        {
            "utterance": "Who is friends with someone who is above 40 ?",
            "sql": "select person.name where personfriend.friend in ( select person.name where person.age > value )"
        },
        {
            "utterance": "Who among them is also friends with someone who is under 30 ?",
            "sql": "select person.name where personfriend.friend in ( select person.name where person.age > value ) intersect select person.name where personfriend.friend in ( select person.name where person.age < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the person who has friends with age above 40 but not under age 30?",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
    },
    "interaction": [
        {
            "utterance": "Who has exactly 1 friend ?",
            "sql": "select personfriend.name group_by personfriend.name having count ( personfriend.* ) = value"
        },
        {
            "utterance": "What about more than 1 ?",
            "sql": "select personfriend.name group_by personfriend.name having count ( personfriend.* ) > value"
        },
        {
            "utterance": "Who has a friend who is at least 40 years old ?",
            "sql": "select person.name where personfriend.friend in ( select person.name where person.age > value )"
        },
        {
            "utterance": "Who among them do not also have a friend under 30 ?",
            "sql": "select person.name where personfriend.friend in ( select person.name where person.age > value ) except select person.name where personfriend.friend in ( select person.name where person.age < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the name of the person who has no student friends.",
        "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'"
    },
    "interaction": [
        {
            "utterance": "Show all student names .",
            "sql": "select person.name where person.job = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( person.* ) where person.job = value"
        },
        {
            "utterance": "Show all people friends with students .",
            "sql": "select personfriend.name where person.name = value"
        },
        {
            "utterance": "Show all people except these .",
            "sql": "select person.name except select personfriend.name where person.job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the person who has exactly one friend.",
        "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Who has the longest-running friend ?",
            "sql": "select personfriend.name order_by personfriend.year desc limit_value"
        },
        {
            "utterance": "Who has more than 1 friend ?",
            "sql": "select personfriend.name group_by personfriend.name having count ( personfriend.* ) > value"
        },
        {
            "utterance": "Who has no friends ?",
            "sql": "select person.name where person.name not in ( select personfriend.name )"
        },
        {
            "utterance": "Who has exactly 1 ?",
            "sql": "select personfriend.name group_by personfriend.name having count ( personfriend.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 17,
    "final": {
        "utterance": "Who are the friends of Bob?",
        "sql": "SELECT friend FROM PersonFriend WHERE name  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "How many people does Bob consider a friend ?",
            "sql": "select count ( personfriend.* ) where personfriend.name = value"
        },
        {
            "utterance": "How long have they been friends ?",
            "sql": "select personfriend.friend , personfriend.year where personfriend.name = value"
        },
        {
            "utterance": "Only show the name .",
            "sql": "select personfriend.friend where personfriend.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the name of persons who are friends with Bob.",
        "sql": "SELECT name FROM PersonFriend WHERE friend  =  'Bob'"
    },
    "interaction": [
        {
            "utterance": "How many friendships are there ?",
            "sql": "select count ( personfriend.* )"
        },
        {
            "utterance": "How many distinct people consider Bob to be their friend ?",
            "sql": "select count ( distinct personfriend.name ) where personfriend.friend = value"
        },
        {
            "utterance": "Who has considered him a friend for the shortest amount of time ?",
            "sql": "select personfriend.name where personfriend.friend = value order_by personfriend.year"
        },
        {
            "utterance": "Show the names of everyone who thinks he is their friend .",
            "sql": "select personfriend.name where personfriend.friend = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the names of females who are friends with Zach",
        "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'"
    },
    "interaction": [
        {
            "utterance": "Who does Zach consider to be his friend ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "How about the other way around ?",
            "sql": "select personfriend.name where personfriend.friend = value"
        },
        {
            "utterance": "Find the names of those among them who are male .",
            "sql": "select person.name where personfriend.friend = value and person.gender = value"
        },
        {
            "utterance": "And female ?",
            "sql": "select person.name where personfriend.friend = value and person.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the female friends of Alice.",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"
    },
    "interaction": [
        {
            "utterance": "Who considers Alice to be their friend ?",
            "sql": "select personfriend.name where personfriend.friend = value"
        },
        {
            "utterance": "How about the other way around ?",
            "sql": "select personfriend.friend where personfriend.name = value"
        },
        {
            "utterance": "Find the names of those among them who are male .",
            "sql": "select personfriend.friend where personfriend.name = value and person.gender = value"
        },
        {
            "utterance": "And female ?",
            "sql": "select personfriend.friend where personfriend.name = value and person.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the male friend of Alice whose job is a doctor?",
        "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'"
    },
    "interaction": [
        {
            "utterance": "How many people are a friend of Alice ?",
            "sql": "select count ( personfriend.* ) where personfriend.name = value"
        },
        {
            "utterance": "How many people are not a friend of Alice ?",
            "sql": "select count ( person.* ) where person.name not in ( select personfriend.friend where personfriend.name = value )"
        },
        {
            "utterance": "Who among the friends of Alice is male ?",
            "sql": "select personfriend.friend where personfriend.name = value and person.gender = value"
        },
        {
            "utterance": "Only show those who are also a doctor ?",
            "sql": "select personfriend.friend where personfriend.name = value and person.gender = value and person.job = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 22,
    "final": {
        "utterance": "Who has a friend that is from new york city?",
        "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'"
    },
    "interaction": [
        {
            "utterance": "Who is from Chicago ?",
            "sql": "select person.name where person.city = value"
        },
        {
            "utterance": "How about New York City ?",
            "sql": "select person.name where person.city = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( person.* ) where person.city = value"
        },
        {
            "utterance": "Who is friends with these people ?",
            "sql": "select personfriend.name where person.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 23,
    "final": {
        "utterance": "Who has friends that are younger than the average age?",
        "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)"
    },
    "interaction": [
        {
            "utterance": "What is the minimum age ?",
            "sql": "select min ( person.age )"
        },
        {
            "utterance": "Who has it ?",
            "sql": "select person.name where person.age = ( select min ( person.age ) )"
        },
        {
            "utterance": "What is the average age ?",
            "sql": "select avg ( person.age )"
        },
        {
            "utterance": "Who is younger than this ?",
            "sql": "select person.name where person.age < ( select avg ( person.age ) )"
        },
        {
            "utterance": "Who calls these people friends ?",
            "sql": "select distinct personfriend.name where person.age < ( select avg ( person.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 24,
    "final": {
        "utterance": "Who has friends that are older than the average age? Print their friends and their ages as well",
        "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)"
    },
    "interaction": [
        {
            "utterance": "How many people are there ?",
            "sql": "select count ( person.* )"
        },
        {
            "utterance": "How many are younger than the average age ?",
            "sql": "select count ( person.* ) where person.age < ( select avg ( person.age ) )"
        },
        {
            "utterance": "What about older ?",
            "sql": "select count ( person.* ) where person.age > ( select avg ( person.age ) )"
        },
        {
            "utterance": "Who is friends with these people ? Show their names and ages .",
            "sql": "select distinct personfriend.name , personfriend.friend , person.age where person.age > ( select avg ( person.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Who is the friend of Zach with longest year relationship?",
        "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "How many people is Zach friends with ?",
            "sql": "select count ( personfriend.* ) where personfriend.name = value"
        },
        {
            "utterance": "Who are they ?",
            "sql": "select personfriend.name where personfriend.name = value"
        },
        {
            "utterance": "Also show how long they have been freinds .",
            "sql": "select personfriend.name , personfriend.year where personfriend.name = value"
        },
        {
            "utterance": "Show the name of the person who has been freinds with him the longest .",
            "sql": "select personfriend.friend where personfriend.name = value and personfriend.year = ( select max ( personfriend.year ) where personfriend.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 26,
    "final": {
        "utterance": "What is the age of the friend of Zach with longest year relationship?",
        "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
    },
    "interaction": [
        {
            "utterance": "Who has the shortest relationship among the people Zach is friends with ?",
            "sql": "select personfriend.name where personfriend.name = value order_by personfriend.year limit_value"
        },
        {
            "utterance": "How about the longest ?",
            "sql": "select personfriend.name where personfriend.name = value order_by personfriend.year desc limit_value"
        },
        {
            "utterance": "Also show how long have they been freinds .",
            "sql": "select personfriend.name , personfriend.year where personfriend.name = value order_by personfriend.year desc limit_value"
        },
        {
            "utterance": "How old are they ?",
            "sql": "select person.age where personfriend.name = value and personfriend.year = ( select max ( personfriend.year ) where personfriend.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the name of persons who are friends with Alice for the shortest years.",
        "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')"
    },
    "interaction": [
        {
            "utterance": "What is the length of the shortest friendship ?",
            "sql": "select min ( personfriend.year )"
        },
        {
            "utterance": "WHat is the minimum among friendships with Alice ?",
            "sql": "select min ( personfriend.year ) where personfriend.friend = value"
        },
        {
            "utterance": "What is the name of the person who has held this friendship ?",
            "sql": "select personfriend.name where personfriend.friend = value and personfriend.year = ( select min ( personfriend.year ) where personfriend.friend = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')"
    },
    "interaction": [
        {
            "utterance": "What is the maximum length of friendships with Alice ?",
            "sql": "select max ( personfriend.year ) where personfriend.friend = value"
        },
        {
            "utterance": "Who holds a relationship of that length ?",
            "sql": "select person.name where personfriend.friend = value and personfriend.year = ( select max ( personfriend.year ) where personfriend.friend = value )"
        },
        {
            "utterance": "Also show age and job title .",
            "sql": "select person.name , person.age , person.job where personfriend.friend = value and personfriend.year = ( select max ( personfriend.year ) where personfriend.friend = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Who is the person that has no friend?",
        "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend"
    },
    "interaction": [
        {
            "utterance": "How many people are there in total ?",
            "sql": "select count ( person.* )"
        },
        {
            "utterance": "How many people are in the friendship database ?",
            "sql": "select count ( distinct personfriend.name )"
        },
        {
            "utterance": "Who is not in it ?",
            "sql": "select person.name except select personfriend.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 30,
    "final": {
        "utterance": "Which person whose friends have the oldest average age?",
        "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all people ?",
            "sql": "select avg ( person.age )"
        },
        {
            "utterance": "What is the average age of the friends ?",
            "sql": "select avg ( person.age )"
        },
        {
            "utterance": "Show the average friend age for each person .",
            "sql": "select personfriend.name , avg ( person.age ) group_by personfriend.name"
        },
        {
            "utterance": "Who has the highest ?",
            "sql": "select personfriend.name , avg ( person.age ) group_by personfriend.name order_by avg ( person.age ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_2",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the total number of people who has no friend living in the city of Austin.",
        "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "Show all cities alphabetically .",
            "sql": "select person.city order_by person.city"
        },
        {
            "utterance": "How many people live in Austin ?",
            "sql": "select count ( person.* ) where person.city = value"
        },
        {
            "utterance": "Who is friends with them ?",
            "sql": "select personfriend.name where personfriend.friend in ( select person.name where person.city = value )"
        },
        {
            "utterance": "How many people are not friends with them ?",
            "sql": "select count ( distinct personfriend.name ) where personfriend.friend not in ( select person.name where person.city = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the maximum, minimum and average market share of the listed browsers?",
        "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser"
    },
    "interaction": [
        {
            "utterance": "What are the names and market shares of browsers ?",
            "sql": "select browser.name , browser.market_share"
        },
        {
            "utterance": "What is the name of the browser with the maximum market share ?",
            "sql": "select browser.name order_by browser.market_share desc limit_value"
        },
        {
            "utterance": "What is the maximum , minimum and average market share of the listed browsers ?",
            "sql": "select max ( browser.market_share ) , min ( browser.market_share ) , avg ( browser.market_share )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998"
    },
    "interaction": [
        {
            "utterance": "Which browsers are compatible with CProxy ?",
            "sql": "select browser.name where web_client_accelerator.name = value"
        },
        {
            "utterance": "Which of those became compatible after year 1998 ?",
            "sql": "select browser.name where web_client_accelerator.name = value and accelerator_compatible_browser.compatible_since_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which accelerators are compatible with at least one browser ?",
            "sql": "select web_client_accelerator.name where web_client_accelerator.id in ( select accelerator_compatible_browser.accelerator_id )"
        },
        {
            "utterance": "Which are compatible with none ?",
            "sql": "select web_client_accelerator.name where web_client_accelerator.id not in ( select accelerator_compatible_browser.accelerator_id )"
        },
        {
            "utterance": "What are the ids and names of the web accelerators that are compatible with two or more browsers ?",
            "sql": "select web_client_accelerator.id , web_client_accelerator.name group_by web_client_accelerator.id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "sql": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which browsers are compatible with some accelerator ( s ) ?",
            "sql": "select browser.name where browser.id in ( select accelerator_compatible_browser.browser_id )"
        },
        {
            "utterance": "Which is compatible with the most ?",
            "sql": "select browser.id , browser.name group_by browser.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 4,
    "final": {
        "utterance": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
        "sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'"
    },
    "interaction": [
        {
            "utterance": "How many times did CACHEbox and Internet Explorer become compatible ?",
            "sql": "select count ( * ) where web_client_accelerator.name = value and browser.name = value"
        },
        {
            "utterance": "What year did they become compatible ?",
            "sql": "select accelerator_compatible_browser.compatible_since_year where web_client_accelerator.name = value and browser.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 5,
    "final": {
        "utterance": "How many accelerators are not compatible with the browsers listed ?",
        "sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );"
    },
    "interaction": [
        {
            "utterance": "Which accelerator ids are not compatible with any browsers ?",
            "sql": "select web_client_accelerator.id where web_client_accelerator.id not in ( select accelerator_compatible_browser.accelerator_id )"
        },
        {
            "utterance": "Count those .",
            "sql": "select count ( web_client_accelerator.* ) where web_client_accelerator.id not in ( select accelerator_compatible_browser.accelerator_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 6,
    "final": {
        "utterance": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;"
    },
    "interaction": [
        {
            "utterance": "Which browsers have market share greater than 15 ?",
            "sql": "select browser.name where browser.market_share > value"
        },
        {
            "utterance": "Which of those are compatible with some accelerator ?",
            "sql": "select browser.name where browser.market_share > value and browser.id in ( select accelerator_compatible_browser.browser_id )"
        },
        {
            "utterance": "What distinct accelerator names are compatible with the browswers that have market share higher than 15 ?",
            "sql": "select distinct web_client_accelerator.name where browser.market_share > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"
    },
    "interaction": [
        {
            "utterance": "Which browser ids are compatible with CACHEbox ?",
            "sql": "select web_client_accelerator.id where web_client_accelerator.name = value"
        },
        {
            "utterance": "Name those browsers .",
            "sql": "select browser.name where web_client_accelerator.name = value"
        },
        {
            "utterance": "Intersect that with those compatible with Fasterfox .",
            "sql": "select browser.name where web_client_accelerator.name = value intersect select browser.name where web_client_accelerator.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'"
    },
    "interaction": [
        {
            "utterance": "Which accelerator ids are not compatible with Opera ?",
            "sql": "select web_client_accelerator.id where web_client_accelerator.id not in ( select accelerator_compatible_browser.accelerator_id where browser.name = value )"
        },
        {
            "utterance": "For these , show the names and supporting operating systems .",
            "sql": "select web_client_accelerator.name , web_client_accelerator.operating_system except select web_client_accelerator.name , web_client_accelerator.operating_system where browser.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "browser_web",
    "interaction_id": 9,
    "final": {
        "utterance": "Which accelerator name contains substring \"Opera\"?",
        "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    "interaction": [
        {
            "utterance": "Which accelerator name contains substring `` Free '' ?",
            "sql": "select web_client_accelerator.name where web_client_accelerator.name like value"
        },
        {
            "utterance": "How about `` Opera ''",
            "sql": "select web_client_accelerator.name where web_client_accelerator.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100"
    },
    "interaction": [
        {
            "utterance": "What are the status of all the roller coasters ?",
            "sql": "select roller_coaster.status"
        },
        {
            "utterance": "Give me the status of those longer than 3300 .",
            "sql": "select roller_coaster.status where roller_coaster.length > value"
        },
        {
            "utterance": "Also show those higher than 100 .",
            "sql": "select roller_coaster.status where roller_coaster.length > value or roller_coaster.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the speed of the longest roller coaster?",
        "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are name of all the roller coasters ?",
            "sql": "select roller_coaster.name"
        },
        {
            "utterance": "Which of them is the longest ?",
            "sql": "select roller_coaster.name order_by roller_coaster.length desc limit_value"
        },
        {
            "utterance": "Give me its speed .",
            "sql": "select roller_coaster.speed order_by roller_coaster.length desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the most common status of roller coasters.",
        "sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are name of all the roller coasters ?",
            "sql": "select roller_coaster.name"
        },
        {
            "utterance": "Give me their status .",
            "sql": "select roller_coaster.name , roller_coaster.status"
        },
        {
            "utterance": "What is the most common status ?",
            "sql": "select roller_coaster.status group_by roller_coaster.status order_by count ( roller_coaster.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 3,
    "final": {
        "utterance": "List the status shared by more than two roller coasters.",
        "sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What are name of all the roller coasters ?",
            "sql": "select roller_coaster.name"
        },
        {
            "utterance": "Give me their status .",
            "sql": "select roller_coaster.name , roller_coaster.status"
        },
        {
            "utterance": "Show me the those that are shared by more than two roller coasters .",
            "sql": "select roller_coaster.status group_by roller_coaster.status having count ( roller_coaster.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the park of the roller coaster with the highest speed.",
        "sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are name of all the roller coasters ?",
            "sql": "select roller_coaster.name"
        },
        {
            "utterance": "Give me their speed .",
            "sql": "select roller_coaster.name , roller_coaster.speed"
        },
        {
            "utterance": "Which one is the highest ?",
            "sql": "select roller_coaster.name , roller_coaster.speed order_by roller_coaster.speed desc limit_value"
        },
        {
            "utterance": "Show me its park .",
            "sql": "select roller_coaster.park order_by roller_coaster.speed desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the names of countries that have more than one roller coaster.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "What countries are there that have roller coasters ?",
            "sql": "select country.name"
        },
        {
            "utterance": "Give me those that have more than one roller coaster .",
            "sql": "select country.name group_by country.name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and population of the country that has the highest roller coaster.",
        "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are name of all the roller coasters ?",
            "sql": "select roller_coaster.name"
        },
        {
            "utterance": "Give me their height .",
            "sql": "select roller_coaster.name , roller_coaster.height"
        },
        {
            "utterance": "Which one is the highest ?",
            "sql": "select roller_coaster.name , roller_coaster.height order_by roller_coaster.height desc limit_value"
        },
        {
            "utterance": "Show me the name and population of the country that has it .",
            "sql": "select country.name , country.population order_by roller_coaster.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of countries and the average speed of roller coasters from each country.",
        "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"
    },
    "interaction": [
        {
            "utterance": "Show the names of countries that have more than one roller coaster .",
            "sql": "select country.name"
        },
        {
            "utterance": "What are the speed of all roller coasters ?",
            "sql": "select roller_coaster.name , roller_coaster.speed"
        },
        {
            "utterance": "Give me a average of them in term of different countries .",
            "sql": "select country.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "roller_coaster",
    "interaction_id": 8,
    "final": {
        "utterance": "How many countries do not have an roller coaster longer than 3000?",
        "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"
    },
    "interaction": [
        {
            "utterance": "What are name of all the roller coasters ?",
            "sql": "select roller_coaster.name"
        },
        {
            "utterance": "Give me their length .",
            "sql": "select roller_coaster.name , roller_coaster.length"
        },
        {
            "utterance": "Show me the roller coasters that are longer than 3000 .",
            "sql": "select roller_coaster.name , roller_coaster.length where roller_coaster.length > value"
        },
        {
            "utterance": "How many countries do not have any of them ?",
            "sql": "select count ( country.* ) where country.country_id not in ( select roller_coaster.country_id where roller_coaster.length > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many female students (sex is F) whose age is below 25?",
        "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
    },
    "interaction": [
        {
            "utterance": "how many students are below age 25 ?",
            "sql": "select count ( student.* ) where student.age < value"
        },
        {
            "utterance": "how many of them are female ( sex is F ) ?",
            "sql": "select count ( student.* ) where student.sex = value and student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25"
    },
    "interaction": [
        {
            "utterance": "what are the codes of all different cities where students are from ?",
            "sql": "select distinct student.city_code"
        },
        {
            "utterance": "how many students are living in city PHL ?",
            "sql": "select count ( student.* ) where student.city_code = value"
        },
        {
            "utterance": "among them , how many are between ages 20 and 25 ?",
            "sql": "select count ( student.* ) where student.city_code = value and student.age between value and value"
        },
        {
            "utterance": "show their first names .",
            "sql": "select student.fname where student.city_code = value and student.age between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the average and total capacity of dorms for the students with gender X.",
        "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'"
    },
    "interaction": [
        {
            "utterance": "what are the different gender types of all dorms ?",
            "sql": "select distinct dorm.gender"
        },
        {
            "utterance": "show student capacity of the dorms with gender X .",
            "sql": "select dorm.student_capacity where dorm.gender = value"
        },
        {
            "utterance": "what is their average capacity ?",
            "sql": "select avg ( dorm.student_capacity ) where dorm.gender = value"
        },
        {
            "utterance": "how about the total as well ?",
            "sql": "select avg ( dorm.student_capacity ) , sum ( dorm.student_capacity ) where dorm.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of dorms that do not have any amenity.",
        "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"
    },
    "interaction": [
        {
            "utterance": "list all dorm amenities .",
            "sql": "select dorm_amenity.amenity_name"
        },
        {
            "utterance": "Find the names of dorms that have some of these amenities .",
            "sql": "select dorm.dorm_name where dorm.dormid in ( select has_amenity.dormid )"
        },
        {
            "utterance": "Find the names of dorms that do not have any amenities .",
            "sql": "select dorm.dorm_name where dorm.dormid not in ( select has_amenity.dormid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "sql": "SELECT student_capacity,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
    },
    "interaction": [
        {
            "utterance": "show the names of all dorms .",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "just list the dorm whose name has substring \u2018Donor\u2019 .",
            "sql": "select dorm.dorm_name where dorm.dorm_name like value"
        },
        {
            "utterance": "what is its capacity and gender type ?",
            "sql": "select dorm.student_capacity , dorm.gender where dorm.dorm_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "sql": "SELECT dorm_name,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"
    },
    "interaction": [
        {
            "utterance": "Find the name and gender type of all dorms .",
            "sql": "select dorm.dorm_name , dorm.gender"
        },
        {
            "utterance": "which of them have a capacity greater than 300 ?",
            "sql": "select dorm.dorm_name , dorm.gender where dorm.student_capacity > value"
        },
        {
            "utterance": "also show the dorms with a capacity less than 100 .",
            "sql": "select dorm.dorm_name , dorm.gender where dorm.student_capacity > value or dorm.student_capacity < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the numbers of different majors and cities.",
        "sql": "SELECT count(DISTINCT major),  count(DISTINCT city_code) FROM student"
    },
    "interaction": [
        {
            "utterance": "show the info of all students .",
            "sql": "select student.*"
        },
        {
            "utterance": "how many distinct majors are there ?",
            "sql": "select count ( distinct student.major )"
        },
        {
            "utterance": "also count the number of different cities .",
            "sql": "select count ( distinct student.major ) , count ( distinct student.city_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
    },
    "interaction": [
        {
            "utterance": "what are the names of all dorms ?",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "what are all of the different amenities ?",
            "sql": "select dorm_amenity.amenity_name"
        },
        {
            "utterance": "Find the names of dorms that have a TV Lounge .",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "how about those that also have a Study Room ?",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value intersect select dorm.dorm_name where dorm_amenity.amenity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"
    },
    "interaction": [
        {
            "utterance": "find the names of dorms that do not have a Study Room .",
            "sql": "select dorm.dorm_name except select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "among them , which ones have a TV Lounge ?",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value except select dorm.dorm_name where dorm_amenity.amenity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"
    },
    "interaction": [
        {
            "utterance": "how many female students are living in the city of code BAL ?",
            "sql": "select count ( student.* ) where student.sex = value and student.city_code = value"
        },
        {
            "utterance": "how many male students are less than 20 years old ?",
            "sql": "select count ( student.* ) where student.sex = value and student.age < value"
        },
        {
            "utterance": "what is the total number of students in these two groups ?",
            "sql": "select count ( student.* ) ( select student.* where student.sex = value and student.age < value union select student.* where student.sex = value and student.city_code = value )"
        },
        {
            "utterance": "what are their last names ?",
            "sql": "select student.lname where student.sex = value and student.city_code = value union select student.lname where student.sex = value and student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name of the dorm with the largest capacity.",
        "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the total student capacity of all dorms .",
            "sql": "select sum ( dorm.student_capacity )"
        },
        {
            "utterance": "which dorm has the largest capacity ?",
            "sql": "select dorm.* order_by dorm.student_capacity"
        },
        {
            "utterance": "just list its name .",
            "sql": "select dorm.dorm_name order_by dorm.student_capacity desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the code of city where most of students are living in.",
        "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many students are there ?",
            "sql": "select count ( student.* )"
        },
        {
            "utterance": "which cities are they living in ?",
            "sql": "select distinct student.city_code"
        },
        {
            "utterance": "Find the code of the city where most of them are living .",
            "sql": "select student.city_code group_by student.city_code order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the first and last name of students whose age is younger than the average age.",
        "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"
    },
    "interaction": [
        {
            "utterance": "show the first and last name of all students .",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "what are their ages ?",
            "sql": "select student.fname , student.lname , student.age"
        },
        {
            "utterance": "what is the average age ?",
            "sql": "select avg ( student.age )"
        },
        {
            "utterance": "list the students whose age is younger than that . List their first and last names .",
            "sql": "select student.fname , student.lname where student.age < ( select avg ( student.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "sql": "SELECT fname,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"
    },
    "interaction": [
        {
            "utterance": "show the codes of all different cities where students are living .",
            "sql": "select distinct student.city_code"
        },
        {
            "utterance": "find the number of students who are not living in the city with code HKG .",
            "sql": "select count ( student.* ) where student.city_code != value"
        },
        {
            "utterance": "what are their first and last names ?",
            "sql": "select student.fname , student.lname where student.city_code != value"
        },
        {
            "utterance": "sort the result by their ages .",
            "sql": "select student.fname , student.lname where student.city_code != value order_by student.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 14,
    "final": {
        "utterance": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name"
    },
    "interaction": [
        {
            "utterance": "list the info of all dorms .",
            "sql": "select dorm.*"
        },
        {
            "utterance": "what is the capacity of Anonymous Donor Hall ?",
            "sql": "select dorm.student_capacity where dorm.dorm_name = value"
        },
        {
            "utterance": "List all of the amenities that it has .",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value"
        },
        {
            "utterance": "sort the results in alphabetic order .",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value order_by dorm_amenity.amenity_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the number of dorms and total capacity for each gender.",
        "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender"
    },
    "interaction": [
        {
            "utterance": "find the total number of dorms .",
            "sql": "select count ( dorm.* )"
        },
        {
            "utterance": "what is the total student capacity of all dorms ?",
            "sql": "select sum ( dorm.student_capacity )"
        },
        {
            "utterance": "how about for each gender ?",
            "sql": "select sum ( dorm.student_capacity ) , dorm.gender group_by dorm.gender"
        },
        {
            "utterance": "also show the number of dorms for each gender .",
            "sql": "select count ( dorm.* ) , sum ( dorm.student_capacity ) , dorm.gender group_by dorm.gender"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the average and oldest age for students with different sex.",
        "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "how many students of each gender are there ?",
            "sql": "select count ( student.* ) , student.sex group_by student.sex"
        },
        {
            "utterance": "Find the average and oldest age for each gender .",
            "sql": "select avg ( student.age ) , max ( student.age ) , student.sex group_by student.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the number and average age of students living in each city.",
        "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code"
    },
    "interaction": [
        {
            "utterance": "how many different cities are there ?",
            "sql": "select count ( distinct student.city_code )"
        },
        {
            "utterance": "find the number of students living in each city .",
            "sql": "select count ( student.* ) , student.city_code group_by student.city_code"
        },
        {
            "utterance": "also find the average age of students living in each city .",
            "sql": "select count ( student.* ) , avg ( student.age ) , student.city_code group_by student.city_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the average age and number of male students (with sex M) from each city.",
        "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
    },
    "interaction": [
        {
            "utterance": "find the number of students living in each city .",
            "sql": "select count ( student.* ) , student.city_code group_by student.city_code"
        },
        {
            "utterance": "how many of them are male ( with sex M ) ?",
            "sql": "select count ( student.* ) , student.city_code where student.sex = value group_by student.city_code"
        },
        {
            "utterance": "Include their average age as well .",
            "sql": "select count ( student.* ) , avg ( student.age ) , student.city_code where student.sex = value group_by student.city_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the number of students for the cities where have more than one student.",
        "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Find the number of students living in each city .",
            "sql": "select count ( student.* ) , student.city_code group_by student.city_code"
        },
        {
            "utterance": "just show the results of cities that have more than one student living in it .",
            "sql": "select count ( student.* ) , student.city_code group_by student.city_code having count ( student.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the first and last name of students who are not in the largest major.",
        "sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "list all of the different majors .",
            "sql": "select distinct student.major"
        },
        {
            "utterance": "which major has the fewest students ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) limit_value"
        },
        {
            "utterance": "what is the most popular major ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "how many students are not this major ?",
            "sql": "select count ( student.* ) where student.major != ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        },
        {
            "utterance": "show their first and last names .",
            "sql": "select student.fname , student.lname where student.major != ( select student.major group_by student.major order_by count ( student.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the number of students whose age is older than the average age for each gender.",
        "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "what is the average age for each gender ?",
            "sql": "select avg ( student.age ) , student.sex group_by student.sex"
        },
        {
            "utterance": "find the number of students whose age is older than the average age of these two groups .",
            "sql": "select count ( student.* ) , student.sex where student.age > ( select avg ( student.age ) ) group_by student.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the average age of students living in each dorm and the name of dorm.",
        "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"
    },
    "interaction": [
        {
            "utterance": "what are the names of all of the dorms ?",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "how many students are living in each dorm ? Group by names of dorms .",
            "sql": "select count ( * ) , dorm.dorm_name group_by dorm.dorm_name"
        },
        {
            "utterance": "find the average age of students living in each dorm .",
            "sql": "select avg ( student.age ) , dorm.dorm_name group_by dorm.dorm_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid"
    },
    "interaction": [
        {
            "utterance": "find the names of dorms that can accommodate more than 100 students .",
            "sql": "select dorm.dorm_name where dorm.student_capacity > value"
        },
        {
            "utterance": "what is the average capacity of these dorms ?",
            "sql": "select avg ( dorm.student_capacity ) where dorm.student_capacity > value"
        },
        {
            "utterance": "Find the number of amenities for each of these dorms .",
            "sql": "select count ( * ) , dorm.dormid where dorm.student_capacity > value group_by dorm.dormid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the number of students who is older than 20 in each dorm.",
        "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name"
    },
    "interaction": [
        {
            "utterance": "what are the names of all dorms ?",
            "sql": "select dorm.dorm_name"
        },
        {
            "utterance": "how many students are living in each dorm ? Group by names of dorms .",
            "sql": "select count ( * ) , dorm.dorm_name group_by dorm.dorm_name"
        },
        {
            "utterance": "how many students are older than 20 years old in each dorm ?",
            "sql": "select count ( * ) , dorm.dorm_name where student.age > value group_by dorm.dorm_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the first name of students who are living in the Smith Hall.",
        "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'"
    },
    "interaction": [
        {
            "utterance": "how many students are living in Smith Hall ?",
            "sql": "select count ( * ) where dorm.dorm_name = value"
        },
        {
            "utterance": "show their last names and room numbers .",
            "sql": "select student.lname , lives_in.room_number where dorm.dorm_name = value"
        },
        {
            "utterance": "what are their first names ?",
            "sql": "select student.fname where dorm.dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the average age of students who are living in the dorm with the largest capacity.",
        "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
    },
    "interaction": [
        {
            "utterance": "show the name and capacity of all dorms .",
            "sql": "select dorm.dorm_name , dorm.student_capacity"
        },
        {
            "utterance": "find the name of the dorm with the largest capacity .",
            "sql": "select dorm.dorm_name order_by dorm.student_capacity desc limit_value"
        },
        {
            "utterance": "how many students are living in there ?",
            "sql": "select count ( dorm.* ) where dorm.student_capacity = ( select max ( dorm.student_capacity ) )"
        },
        {
            "utterance": "what is the average age of these students ?",
            "sql": "select avg ( student.age ) where dorm.student_capacity = ( select max ( dorm.student_capacity ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the total number of students living in the male dorm (with gender M).",
        "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'"
    },
    "interaction": [
        {
            "utterance": "list the names of all male dorms ( with gender M ) .",
            "sql": "select dorm.dorm_name where dorm.gender = value"
        },
        {
            "utterance": "how many are there ?",
            "sql": "select count ( dorm.* ) where dorm.gender = value"
        },
        {
            "utterance": "Find the total number of students living in these dorms .",
            "sql": "select count ( * ) where dorm.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of female students (with F sex) living in Smith Hall",
        "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"
    },
    "interaction": [
        {
            "utterance": "what is the capacity of Smith Hall dorm ?",
            "sql": "select dorm.student_capacity where dorm.dorm_name = value"
        },
        {
            "utterance": "how many students are living in there ?",
            "sql": "select count ( * ) where dorm.dorm_name = value"
        },
        {
            "utterance": "how many of them are female ?",
            "sql": "select count ( * ) where dorm.dorm_name = value and student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the name of amenities Smith Hall dorm have.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'"
    },
    "interaction": [
        {
            "utterance": "how many students are living in Smith Hall dorm ?",
            "sql": "select count ( * ) where dorm.dorm_name = value"
        },
        {
            "utterance": "Find the number of amenities it has .",
            "sql": "select count ( * ) where dorm.dorm_name = value"
        },
        {
            "utterance": "what are these amenities ?",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name"
    },
    "interaction": [
        {
            "utterance": "What are the amenities in Smith Hall ?",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value"
        },
        {
            "utterance": "order the results by amenity names .",
            "sql": "select dorm_amenity.amenity_name where dorm.dorm_name = value order_by dorm_amenity.amenity_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the name of amenity that is the most common in all dorms.",
        "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show the names of all different amenities .",
            "sql": "select dorm_amenity.amenity_name"
        },
        {
            "utterance": "find the total number of each amenity in all of the dorms .",
            "sql": "select count ( * ) , has_amenity.amenid group_by has_amenity.amenid"
        },
        {
            "utterance": "which one is the most common amenity used in all dorms ? List its name .",
            "sql": "select dorm_amenity.amenity_name group_by has_amenity.amenid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "what is the id of the dorm that has the most amenities ?",
            "sql": "select dorm.dormid group_by dorm.dormid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what is its name ?",
            "sql": "select dorm.dorm_name group_by dorm.dormid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "how many students are living in that dorm ?",
            "sql": "select count ( * ) where lives_in.dormid in ( select dorm.dormid group_by dorm.dormid order_by count ( * ) desc limit_value )"
        },
        {
            "utterance": "find their first names .",
            "sql": "select student.fname where lives_in.dormid in ( select dorm.dormid group_by dorm.dormid order_by count ( * ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the name and capacity of the dorm with least number of amenities.",
        "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the number of amenities in each dorm .",
            "sql": "select dorm.dormid , count ( * ) group_by has_amenity.dormid"
        },
        {
            "utterance": "which dorm has the fewest amenities ? List its name .",
            "sql": "select dorm.dorm_name group_by has_amenity.dormid order_by count ( * ) limit_value"
        },
        {
            "utterance": "what is its capacity ?",
            "sql": "select dorm.student_capacity group_by has_amenity.dormid order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the name of dorms that do not have amenity TV Lounge.",
        "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"
    },
    "interaction": [
        {
            "utterance": "how many dorms have a TV Lounge ?",
            "sql": "select count ( * ) where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "what are the names of dorms that do not have it ?",
            "sql": "select dorm.dorm_name except select dorm.dorm_name where dorm_amenity.amenity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
    },
    "interaction": [
        {
            "utterance": "how many dorms have a TV Lounge ?",
            "sql": "select count ( * ) where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "what is the total capacity of these dorms ?",
            "sql": "select sum ( dorm.student_capacity ) where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "how many students are living in these dorms ?",
            "sql": "select count ( * ) where lives_in.dormid in ( select has_amenity.dormid where dorm_amenity.amenity_name = value )"
        },
        {
            "utterance": "list their first and last names .",
            "sql": "select student.fname , student.lname where lives_in.dormid in ( select has_amenity.dormid where dorm_amenity.amenity_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dorm_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
    },
    "interaction": [
        {
            "utterance": "Find the names of dorms that do not have a TV Lounge .",
            "sql": "select dorm.dorm_name except select dorm.dorm_name where dorm_amenity.amenity_name = value"
        },
        {
            "utterance": "Find the first name and age of students living in these dorms .",
            "sql": "select student.fname , student.age where lives_in.dormid not in ( select has_amenity.dormid where dorm_amenity.amenity_name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 0,
    "final": {
        "utterance": "What document status codes do we have?",
        "sql": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    "interaction": [
        {
            "utterance": "Show me all about documents .",
            "sql": "select documents.*"
        },
        {
            "utterance": "What document types are there ?",
            "sql": "select ref_document_types.document_type_code"
        },
        {
            "utterance": "How about document status codes ?",
            "sql": "select ref_document_status.document_status_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the description of document status code 'working'?",
        "sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";"
    },
    "interaction": [
        {
            "utterance": "How many document status codes there ?",
            "sql": "select count ( ref_document_status.document_status_code )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select ref_document_status.document_status_code"
        },
        {
            "utterance": "What is the description of document status code 'working ' ?",
            "sql": "select ref_document_status.document_status_description where ref_document_status.document_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 2,
    "final": {
        "utterance": "What document type codes do we have?",
        "sql": "SELECT document_type_code FROM Ref_Document_Types;"
    },
    "interaction": [
        {
            "utterance": "Show me all about document types .",
            "sql": "select ref_document_types.*"
        },
        {
            "utterance": "Show me the descriptions of document types .",
            "sql": "select ref_document_types.document_type_description"
        },
        {
            "utterance": "Now , show the document type codes .",
            "sql": "select ref_document_types.document_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the description of document type 'Paper'?",
        "sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";"
    },
    "interaction": [
        {
            "utterance": "Show me the shipping agent code of documents ?",
            "sql": "select ref_shipping_agents.shipping_agent_code"
        },
        {
            "utterance": "How about the document type code ?",
            "sql": "select ref_document_types.document_type_code"
        },
        {
            "utterance": "Among those , what is the description of document type 'Paper ' ?",
            "sql": "select ref_document_types.document_type_description where ref_document_types.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the shipping agent names?",
        "sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;"
    },
    "interaction": [
        {
            "utterance": "What are the shipping agents ' codes ?",
            "sql": "select ref_shipping_agents.shipping_agent_code"
        },
        {
            "utterance": "How about their descriptions ?",
            "sql": "select ref_shipping_agents.shipping_agent_description"
        },
        {
            "utterance": "Show me their names instead .",
            "sql": "select ref_shipping_agents.shipping_agent_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the shipping agent code of shipping agent UPS?",
        "sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";"
    },
    "interaction": [
        {
            "utterance": "Show me the the shipping agent code of shipping agent Fedex .",
            "sql": "select ref_shipping_agents.shipping_agent_code where ref_shipping_agents.shipping_agent_name = value"
        },
        {
            "utterance": "How about the shipping agent description of shipping agent UPS ?",
            "sql": "select ref_shipping_agents.shipping_agent_description where ref_shipping_agents.shipping_agent_name = value"
        },
        {
            "utterance": "What is the shipping agent code of this shipping agent ?",
            "sql": "select ref_shipping_agents.shipping_agent_code where ref_shipping_agents.shipping_agent_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 6,
    "final": {
        "utterance": "What are all role codes?",
        "sql": "SELECT role_code FROM ROLES;"
    },
    "interaction": [
        {
            "utterance": "Show me all the descriptions for each role ?",
            "sql": "select roles.role_description"
        },
        {
            "utterance": "Now show all the role codes .",
            "sql": "select roles.role_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the description of role code ED?",
        "sql": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    "interaction": [
        {
            "utterance": "How many employees have role code ED ?",
            "sql": "select count ( employees.* ) where employees.role_code = value"
        },
        {
            "utterance": "What is the description for this role code ?",
            "sql": "select roles.role_description where roles.role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 8,
    "final": {
        "utterance": "How many employees do we have?",
        "sql": "SELECT count(*) FROM Employees;"
    },
    "interaction": [
        {
            "utterance": "What are the employees ' names ?",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( employees.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the role of the employee named Koby?",
        "sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"
    },
    "interaction": [
        {
            "utterance": "Show me the names of the employee .",
            "sql": "select employees.employee_name"
        },
        {
            "utterance": "What is the role code of the employee named Koby ?",
            "sql": "select roles.role_code where employees.employee_name = value"
        },
        {
            "utterance": "How about his role description ?",
            "sql": "select roles.role_description where employees.employee_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 10,
    "final": {
        "utterance": "List all document ids and receipt dates of documents.",
        "sql": "SELECT document_id ,  receipt_date FROM Documents;"
    },
    "interaction": [
        {
            "utterance": "Show me all information about the documents .",
            "sql": "select documents.*"
        },
        {
            "utterance": "List document ids and receipt dates of all documents",
            "sql": "select documents.document_id , documents.receipt_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 11,
    "final": {
        "utterance": "How many employees does each role have? List role description, id and number of employees.",
        "sql": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;"
    },
    "interaction": [
        {
            "utterance": "What are the role codes ?",
            "sql": "select roles.role_code"
        },
        {
            "utterance": "How about their corresponding role_description ?",
            "sql": "select roles.role_code , roles.role_description"
        },
        {
            "utterance": "List role description , role code and number of employees of each role ?",
            "sql": "select roles.role_description , employees.role_code , count ( * ) group_by employees.role_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 12,
    "final": {
        "utterance": "List roles that have more than one employee. List the role description and number of employees.",
        "sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;"
    },
    "interaction": [
        {
            "utterance": "What are the employees ' id ?",
            "sql": "select employees.employee_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the document status description of the document with id 1?",
        "sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the document with id 2 .",
            "sql": "select documents.* where documents.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 14,
    "final": {
        "utterance": "How many documents have the status code done?",
        "sql": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";"
    },
    "interaction": [
        {
            "utterance": "Show me all the information about the documents .",
            "sql": "select documents.*"
        },
        {
            "utterance": "List all the documents with status code working ?",
            "sql": "select documents.* where documents.document_status_code = value"
        },
        {
            "utterance": "How about the status code done ?",
            "sql": "select documents.* where documents.document_status_code = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( documents.* ) where documents.document_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 15,
    "final": {
        "utterance": "List the document type code for the document with the id 2.",
        "sql": "SELECT document_type_code FROM Documents WHERE document_id = 2;"
    },
    "interaction": [
        {
            "utterance": "Show me document with id 1 .",
            "sql": "select documents.* where documents.document_id = value"
        },
        {
            "utterance": "What is the document status code of this document ?",
            "sql": "select documents.document_type_code where documents.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 16,
    "final": {
        "utterance": "List the document ids for any documents with the status code done and the type code paper.",
        "sql": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";"
    },
    "interaction": [
        {
            "utterance": "How many documents are there ?",
            "sql": "select count ( documents.* )"
        },
        {
            "utterance": "Show me ones with status code done .",
            "sql": "select documents.* where documents.document_status_code = value"
        },
        {
            "utterance": "List the document ids for any documents with the status code done and the type code paper .",
            "sql": "select documents.document_id where documents.document_status_code = value and documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the name of the shipping agent of the document with id 2?",
        "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;"
    },
    "interaction": [
        {
            "utterance": "Show all the documents with shipping agent named USPS ?",
            "sql": "select * where ref_shipping_agents.shipping_agent_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 18,
    "final": {
        "utterance": "How many documents were shipped by USPS?",
        "sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    "interaction": [
        {
            "utterance": "How many documents are there ?",
            "sql": "select count ( documents.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the receipt date of the document with id 3?",
        "sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;"
    },
    "interaction": [
        {
            "utterance": "Show me the receipt number of the documents ?",
            "sql": "select documents.receipt_number"
        },
        {
            "utterance": "How about receipt date ?",
            "sql": "select documents.receipt_date"
        },
        {
            "utterance": "Show me that for document with id 2 ?",
            "sql": "select documents.receipt_date where documents.document_id = value"
        },
        {
            "utterance": "How about for document with id 3 ?",
            "sql": "select documents.receipt_date where documents.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 20,
    "final": {
        "utterance": "What address was the document with id 4 mailed to?",
        "sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;"
    },
    "interaction": [
        {
            "utterance": "Show me the receipt_date of document with id 4 ?",
            "sql": "select documents.receipt_date where documents.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the mail date of the document with id 7?",
        "sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;"
    },
    "interaction": [
        {
            "utterance": "Show me document with id 7 .",
            "sql": "select documents.*"
        },
        {
            "utterance": "How about its mailing date ?",
            "sql": "select documents_mailed.mailing_date where documents_mailed.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 22,
    "final": {
        "utterance": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    "interaction": [
        {
            "utterance": "Show me document ids of documents with status working .",
            "sql": "select documents.document_id where documents.document_status_code = value"
        },
        {
            "utterance": "How about documents with the status done and type Paper ?",
            "sql": "select documents.document_id where documents.document_status_code = value and documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 23,
    "final": {
        "utterance": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    "interaction": [
        {
            "utterance": "What are document types of document with status done ?",
            "sql": "select documents.document_type_code where documents.document_status_code = value"
        },
        {
            "utterance": "Show me the document id of those whose document status is done and document type is Paper .",
            "sql": "select documents.document_id where documents.document_status_code = value and documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 24,
    "final": {
        "utterance": "What is draft detail of the document with id 7?",
        "sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;"
    },
    "interaction": [
        {
            "utterance": "Show me all about the documents .",
            "sql": "select documents.*"
        },
        {
            "utterance": "Only list document with id 7 .",
            "sql": "select documents.* where documents.document_id = value"
        },
        {
            "utterance": "What are its draft details ?",
            "sql": "select document_drafts.draft_details where document_drafts.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 25,
    "final": {
        "utterance": "How many draft copies does the document with id 2 have?",
        "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"
    },
    "interaction": [
        {
            "utterance": "Show me everything about draft copies .",
            "sql": "select draft_copies.*"
        },
        {
            "utterance": "What 's the draft number of document with id 2 ?",
            "sql": "select draft_copies.draft_number where draft_copies.document_id = value"
        },
        {
            "utterance": "How many draft copies does it have ?",
            "sql": "select count ( draft_copies.* ) where draft_copies.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 26,
    "final": {
        "utterance": "Which document has the most draft copies? List its document id and number of draft copies.",
        "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What 's draft number of the documents ?",
            "sql": "select draft_copies.draft_number"
        },
        {
            "utterance": "How about the draft copies ? Show me how many draft copies each document has ?",
            "sql": "select draft_copies.document_id , count ( draft_copies.copy_number ) group_by draft_copies.document_id"
        },
        {
            "utterance": "Which of the result has the most draft copies ?",
            "sql": "select draft_copies.document_id , count ( draft_copies.copy_number ) group_by draft_copies.document_id order_by count ( draft_copies.copy_number ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 27,
    "final": {
        "utterance": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;"
    },
    "interaction": [
        {
            "utterance": "How many draft copies does each document have ? List the id of documents .",
            "sql": "select draft_copies.document_id , count ( draft_copies.* ) group_by draft_copies.document_id"
        },
        {
            "utterance": "Which one has the maximum number of draft copies ?",
            "sql": "select draft_copies.document_id , count ( draft_copies.* ) group_by draft_copies.document_id order_by draft_copies.draft_number desc limit_value"
        },
        {
            "utterance": "How about ones with more than 1 draft copies ?",
            "sql": "select draft_copies.document_id , count ( draft_copies.* ) group_by draft_copies.document_id having count ( draft_copies.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 28,
    "final": {
        "utterance": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;"
    },
    "interaction": [
        {
            "utterance": "Show me all about the document with id 1 .",
            "sql": "select documents.* where documents.document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Control_Systems",
    "interaction_id": 29,
    "final": {
        "utterance": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me about the Circulation History .",
            "sql": "select circulation_history.*"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 0,
    "final": {
        "utterance": "How many addresses are there in country USA?",
        "sql": "SELECT count(*) FROM addresses WHERE country  =  'USA'"
    },
    "interaction": [
        {
            "utterance": "Show all the address information .",
            "sql": "select addresses.*"
        },
        {
            "utterance": "How about those in country USA ?",
            "sql": "select addresses.* where addresses.country = value"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( addresses.* ) where addresses.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 1,
    "final": {
        "utterance": "Show all distinct cities in the address record.",
        "sql": "SELECT DISTINCT city FROM addresses"
    },
    "interaction": [
        {
            "utterance": "Show all cities in the addresses .",
            "sql": "select addresses.city"
        },
        {
            "utterance": "Only show unique names .",
            "sql": "select distinct addresses.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 2,
    "final": {
        "utterance": "Show each state and the number of addresses in each state.",
        "sql": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county"
    },
    "interaction": [
        {
            "utterance": "Show the state for each address .",
            "sql": "select addresses.state_province_county"
        },
        {
            "utterance": "Also show the number of addresses in each of them .",
            "sql": "select addresses.state_province_county , count ( addresses.* ) group_by addresses.state_province_county"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 3,
    "final": {
        "utterance": "Show names and phones of customers who do not have address information.",
        "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)"
    },
    "interaction": [
        {
            "utterance": "Show the ids of all customers .",
            "sql": "select customers.customer_id"
        },
        {
            "utterance": "What about those who have address information ?",
            "sql": "select customer_address_history.customer_id"
        },
        {
            "utterance": "Show the names of those who do n't have it .",
            "sql": "select customers.customer_name where customers.customer_id not in ( select customer_address_history.customer_id )"
        },
        {
            "utterance": "Also show their phone numbers .",
            "sql": "select customers.customer_name , customers.customer_phone where customers.customer_id not in ( select customer_address_history.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the name of the customer who has the most orders.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the names of all customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Also show the number of orders each of them has .",
            "sql": "select customers.customer_name , count ( * ) group_by customers.customer_id"
        },
        {
            "utterance": "Sort the names in descending order of the number of orders .",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select customers.customer_name group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the product type codes which have at least two products.",
        "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the product type code for all products .",
            "sql": "select products.product_type_code"
        },
        {
            "utterance": "For each of them , count the number of products .",
            "sql": "select products.product_type_code , count ( products.* ) group_by products.product_type_code"
        },
        {
            "utterance": "Which of them have at least two products ?",
            "sql": "select products.product_type_code group_by products.product_type_code having count ( products.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the names of customers who have both an order in completed status and an order in part status.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'"
    },
    "interaction": [
        {
            "utterance": "Show the names of all customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Who has an order in completed status ?",
            "sql": "select customers.customer_name where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Who has an order in part status ?",
            "sql": "select customers.customer_name where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Who has both ?",
            "sql": "select customers.customer_name where customer_orders.order_status_code = value intersect select customers.customer_name where customer_orders.order_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "sql": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC"
    },
    "interaction": [
        {
            "utterance": "Show the name for all customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Also show their phone number and payment method code .",
            "sql": "select customers.customer_name , customers.customer_phone , customers.payment_method_code"
        },
        {
            "utterance": "Sort the results in descending order of customer number .",
            "sql": "select customers.customer_name , customers.customer_phone , customers.payment_method_code order_by customers.customer_number desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the product name and total order quantity for each product.",
        "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
    },
    "interaction": [
        {
            "utterance": "Show the product name for all products .",
            "sql": "select products.product_name"
        },
        {
            "utterance": "Show the product name and all the order quantities for each product .",
            "sql": "select products.product_name , order_items.order_quantity"
        },
        {
            "utterance": "For each of those products , what is the total order quantity ?",
            "sql": "select products.product_name , sum ( order_items.order_quantity ) group_by products.product_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the minimum, maximum, average price for all products.",
        "sql": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products"
    },
    "interaction": [
        {
            "utterance": "Show the price for all products .",
            "sql": "select products.product_price"
        },
        {
            "utterance": "What is the minimum , maximum , and average of them ?",
            "sql": "select min ( products.product_price ) , max ( products.product_price ) , avg ( products.product_price )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 10,
    "final": {
        "utterance": "How many products have a price higher than the average?",
        "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
    },
    "interaction": [
        {
            "utterance": "What is the average price for prodcuts ?",
            "sql": "select avg ( products.product_price )"
        },
        {
            "utterance": "Show product information for products more expensive than the average .",
            "sql": "select products.* where products.product_price > ( select avg ( products.product_price ) )"
        },
        {
            "utterance": "How many such products are there ?",
            "sql": "select count ( products.* ) where products.product_price > ( select avg ( products.product_price ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id"
    },
    "interaction": [
        {
            "utterance": "Show the date from and date to for each customer address history .",
            "sql": "select customer_address_history.date_from , customer_address_history.date_to"
        },
        {
            "utterance": "For each of those records , also show the customer name .",
            "sql": "select customers.customer_name , customer_address_history.date_from , customer_address_history.date_to"
        },
        {
            "utterance": "For each of those , also show the customer address city .",
            "sql": "select customers.customer_name , addresses.city , customer_address_history.date_from , customer_address_history.date_to"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show the names of all customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Count the number of orders each of them has made .",
            "sql": "select customers.customer_name , count ( * ) group_by customers.customer_id"
        },
        {
            "utterance": "For each of them , how many of their orders use Credit Card payment method ?",
            "sql": "select customers.customer_name , count ( * ) where customers.payment_method_code = value group_by customers.customer_id"
        },
        {
            "utterance": "Show the names of those who have more than 2 such orders .",
            "sql": "select customers.customer_name where customers.payment_method_code = value group_by customers.customer_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_and_products_contacts",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the name and phone of the customer with the most ordered product quantity?",
        "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the names of all customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Also show their phone numbers .",
            "sql": "select customers.customer_name , customers.customer_phone"
        },
        {
            "utterance": "For each of them , what is the total product quantity of their orders ?",
            "sql": "select customers.customer_name , customers.customer_phone , sum ( order_items.order_quantity ) group_by customers.customer_id"
        },
        {
            "utterance": "Sort the results in descending order of the quantity .",
            "sql": "select customers.customer_name , customers.customer_phone , sum ( order_items.order_quantity ) group_by customers.customer_id order_by sum ( order_items.order_quantity ) desc"
        },
        {
            "utterance": "What are the name and phone number of the customer with the most ?",
            "sql": "select customers.customer_name , customers.customer_phone group_by customers.customer_id order_by sum ( order_items.order_quantity ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the last names of the teachers that teach fifth grade.",
        "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
    },
    "interaction": [
        {
            "utterance": "Show me the last names of all teachers .",
            "sql": "select teachers.lastname"
        },
        {
            "utterance": "Show me the student grade in each classroom .",
            "sql": "select distinct list.classroom , list.grade"
        },
        {
            "utterance": "Which classrooms do fifth grade students have ?",
            "sql": "select distinct list.classroom where list.grade = value"
        },
        {
            "utterance": "Show me the teachers who teach in any of those classrooms .",
            "sql": "select distinct teachers.lastname where list.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the first names of the teachers that teach first grade.",
        "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1"
    },
    "interaction": [
        {
            "utterance": "Show me the first names of all teachers .",
            "sql": "select teachers.firstname"
        },
        {
            "utterance": "Show me the student grade in each classroom .",
            "sql": "select distinct list.classroom , list.grade"
        },
        {
            "utterance": "Which classrooms do first grade students have ?",
            "sql": "select distinct list.classroom where list.grade = value"
        },
        {
            "utterance": "Show me the teachers who teach in any of those classrooms .",
            "sql": "select distinct teachers.firstname where list.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all teachers in record .",
            "sql": "select teachers.firstname , teachers.lastname"
        },
        {
            "utterance": "Which classrooms does OTHA MOYER teach in ?",
            "sql": "select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "Show me the name of students who are in those classrooms .",
            "sql": "select list.firstname , list.lastname where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all teachers in record .",
            "sql": "select teachers.firstname , teachers.lastname"
        },
        {
            "utterance": "Which classrooms does MARROTTE KIRK teach in ?",
            "sql": "select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "Show me the name of students who are in those classrooms .",
            "sql": "select list.firstname , list.lastname where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\""
    },
    "interaction": [
        {
            "utterance": "How many students are there in the file ?",
            "sql": "select count ( list.* )"
        },
        {
            "utterance": "Give me the classroom EVELINA BROMLEY is in .",
            "sql": "select list.classroom where list.firstname = value and list.lastname = value"
        },
        {
            "utterance": "Show me the name of teachers that teach in that classroom .",
            "sql": "select teachers.firstname , teachers.lastname where list.firstname = value and list.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the last names of all the teachers that teach GELL TAMI.",
        "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""
    },
    "interaction": [
        {
            "utterance": "How many students are there in the file ?",
            "sql": "select count ( list.* )"
        },
        {
            "utterance": "Give me the classroom GELL TAMI is in .",
            "sql": "select list.classroom where list.firstname = value and list.lastname = value"
        },
        {
            "utterance": "Show me the last name of teachers that teach in that classroom .",
            "sql": "select teachers.lastname where list.firstname = value and list.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many students does LORIA ONDERSMA teaches?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all teachers in record .",
            "sql": "select teachers.firstname , teachers.lastname"
        },
        {
            "utterance": "Which classrooms does LORIA ONDERSMA teach in ?",
            "sql": "select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "How many students study in those classrooms ?",
            "sql": "select count ( * ) where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many students does KAWA GORDON teaches?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all teachers in record .",
            "sql": "select teachers.firstname , teachers.lastname"
        },
        {
            "utterance": "Which classrooms does KAWA GORDON teach in ?",
            "sql": "select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "How many students study in those classrooms ?",
            "sql": "select count ( * ) where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of students taught by TARRING LEIA.",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all teachers in record .",
            "sql": "select teachers.firstname , teachers.lastname"
        },
        {
            "utterance": "Which classrooms does TARRING LEIA teach in ?",
            "sql": "select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "How many students study in those classrooms ?",
            "sql": "select count ( * ) where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many teachers does the student named CHRISSY NABOZNY have?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\""
    },
    "interaction": [
        {
            "utterance": "How many teachers are there in record ?",
            "sql": "select count ( teachers.* )"
        },
        {
            "utterance": "What classrooms is CHRISSY NABOZNY in ?",
            "sql": "select list.classroom where list.firstname = value and list.lastname = value"
        },
        {
            "utterance": "How many are they ?",
            "sql": "select count ( * ) where list.firstname = value and list.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How many teachers does the student named MADLOCK RAY have?",
        "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\""
    },
    "interaction": [
        {
            "utterance": "How many teachers are there in record ?",
            "sql": "select count ( teachers.* )"
        },
        {
            "utterance": "What classrooms is MADLOCK RAY in ?",
            "sql": "select list.classroom where list.firstname = value and list.lastname = value"
        },
        {
            "utterance": "How many are they ?",
            "sql": "select count ( * ) where list.firstname = value and list.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( teachers.* )"
        },
        {
            "utterance": "Show me the classroom of OTHA MOYER .",
            "sql": "select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "What about classrooms other than that ?",
            "sql": "select distinct list.classroom where list.classroom not in select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "Give me the name of all first-grade students who are in any of those classrooms .",
            "sql": "select distinct list.firstname , list.lastname where list.grade = value except select list.firstname , list.lastname where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( teachers.* )"
        },
        {
            "utterance": "Show me the classroom of OTHA MOYER .",
            "sql": "select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "What about classrooms other than that ?",
            "sql": "select distinct list.classroom where list.classroom not in select teachers.classroom where teachers.firstname = value and teachers.lastname = value"
        },
        {
            "utterance": "Give me the name of all first-grade students who are in any of those classrooms .",
            "sql": "select distinct list.firstname , list.lastname where list.grade = value except select list.firstname , list.lastname where teachers.firstname = value and teachers.lastname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade"
    },
    "interaction": [
        {
            "utterance": "How many students are there in record ?",
            "sql": "select count ( list.* )"
        },
        {
            "utterance": "What about that in terms of each grade ?",
            "sql": "select list.grade , count ( list.* ) group_by list.grade"
        },
        {
            "utterance": "Also include number of classrooms .",
            "sql": "select list.grade , count ( distinct list.classroom ) , count ( list.* ) group_by list.grade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which classroom has the most students?",
        "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many classrooms are there ?",
            "sql": "select distinct list.classroom"
        },
        {
            "utterance": "How many students does each of them have ?",
            "sql": "select list.classroom , count ( list.* ) group_by list.classroom"
        },
        {
            "utterance": "Give me the classroom with the most of them .",
            "sql": "select list.classroom group_by list.classroom order_by count ( list.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 15,
    "final": {
        "utterance": "For each grade 0 classroom, report the total number of students.",
        "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
    },
    "interaction": [
        {
            "utterance": "How many classrooms are there ?",
            "sql": "select distinct list.classroom"
        },
        {
            "utterance": "Show me the classrooms that any zero grade is in .",
            "sql": "select distinct list.classroom where list.grade = value"
        },
        {
            "utterance": "How many students are in each of those classrooms ?",
            "sql": "select list.classroom , count ( list.* ) where list.grade = value group_by list.classroom"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Report the total number of students for each fourth-grade classroom.",
        "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom"
    },
    "interaction": [
        {
            "utterance": "How many classrooms are there ?",
            "sql": "select distinct list.classroom"
        },
        {
            "utterance": "Show me the classrooms that any fourth-grade is in .",
            "sql": "select distinct list.classroom where list.grade = value"
        },
        {
            "utterance": "How many students are in each of those classrooms ?",
            "sql": "select list.classroom , count ( list.* ) where list.grade = value group_by list.classroom"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the maximum and minimum age of students with major 600?",
        "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"
    },
    "interaction": [
        {
            "utterance": "How many students have major 600 ?",
            "sql": "select count ( student.* ) where student.major = value"
        },
        {
            "utterance": "What is the maximum age of these students ?",
            "sql": "select max ( student.age ) where student.major = value"
        },
        {
            "utterance": "Please show the minimum age as well .",
            "sql": "select max ( student.age ) , min ( student.age ) where student.major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\""
    },
    "interaction": [
        {
            "utterance": "How many students have secretary votes ?",
            "sql": "select count ( distinct student.stuid )"
        },
        {
            "utterance": "How many of those are from the fall election cycle ?",
            "sql": "select count ( distinct student.stuid ) where voting_record.election_cycle = value"
        },
        {
            "utterance": "What are the names of those students ?",
            "sql": "select distinct student.fname , student.lname where voting_record.election_cycle = value"
        },
        {
            "utterance": "What are their ages ?",
            "sql": "select distinct student.age where voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "How many students have treasurer votes ?",
            "sql": "select count ( distinct student.stuid )"
        },
        {
            "utterance": "How many of those are from the spring election cycle ?",
            "sql": "select count ( distinct student.stuid ) where voting_record.election_cycle = value"
        },
        {
            "utterance": "Please list their names .",
            "sql": "select distinct student.fname , student.lname where voting_record.election_cycle = value"
        },
        {
            "utterance": "Who are their advisors ?",
            "sql": "select distinct student.advisor where voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "How many students have president votes ?",
            "sql": "select count ( distinct student.stuid )"
        },
        {
            "utterance": "How many of them are female ?",
            "sql": "select count ( distinct student.stuid ) where student.sex = value"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select distinct student.fname , student.lname where student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
    },
    "interaction": [
        {
            "utterance": "How many students have vice President votes ?",
            "sql": "select count ( distinct student.stuid )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct student.fname , student.lname"
        },
        {
            "utterance": "How many of them are 18 years old ?",
            "sql": "select count ( distinct student.stuid ) where student.age = value"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select distinct student.fname , student.lname where student.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 5,
    "final": {
        "utterance": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\""
    },
    "interaction": [
        {
            "utterance": "How many students have class senator votes ?",
            "sql": "select count ( distinct student.stuid )"
        },
        {
            "utterance": "How many of those votes are from the fall election cycle ?",
            "sql": "select count ( distinct student.stuid ) where voting_record.election_cycle = value"
        },
        {
            "utterance": "How many are for male students ?",
            "sql": "select count ( * ) where student.sex = value and voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "Count the number of students whose city code is NYC .",
            "sql": "select count ( student.* ) where student.city_code = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select student.fname , student.lname where student.city_code = value"
        },
        {
            "utterance": "How many of those students have class senator votes ?",
            "sql": "select count ( * ) where student.city_code = value"
        },
        {
            "utterance": "How many of those votes are from the spring election cycle ?",
            "sql": "select count ( * ) where student.city_code = value and voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "Count the number of students whose city code is NYC .",
            "sql": "select count ( student.* ) where student.city_code = value"
        },
        {
            "utterance": "How many have secretary votes ?",
            "sql": "select count ( distinct student.stuid ) where student.city_code = value"
        },
        {
            "utterance": "Which of those students have votes from the spring election cycle ? List their names .",
            "sql": "select distinct student.fname , student.lname where student.city_code = value and voting_record.election_cycle = value"
        },
        {
            "utterance": "What is their average age ?",
            "sql": "select avg ( student.age ) where student.city_code = value and voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""
    },
    "interaction": [
        {
            "utterance": "How many female students are there ?",
            "sql": "select count ( student.* ) where student.sex = value"
        },
        {
            "utterance": "How many have secretary votes ?",
            "sql": "select count ( distinct student.stuid ) where student.sex = value"
        },
        {
            "utterance": "Which of them have votes from the spring election cycle ? List their names .",
            "sql": "select count ( distinct student.stuid ) where student.sex = value and voting_record.election_cycle = value"
        },
        {
            "utterance": "What is their average age ?",
            "sql": "select avg ( student.age ) where student.sex = value and voting_record.election_cycle = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\""
    },
    "interaction": [
        {
            "utterance": "How many students have Vice President votes ?",
            "sql": "select count ( distinct student.stuid )"
        },
        {
            "utterance": "Count the number of those students whose city code is not PIT .",
            "sql": "select count ( distinct student.stuid ) where student.city_code != value"
        },
        {
            "utterance": "Please list their names .",
            "sql": "select distinct student.fname , student.lname except select distinct student.fname , student.lname where student.city_code = value"
        },
        {
            "utterance": "Please only list their first names .",
            "sql": "select distinct student.fname except select distinct student.fname where student.city_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\""
    },
    "interaction": [
        {
            "utterance": "Which students have president votes ?",
            "sql": "select distinct student.fname , student.lname"
        },
        {
            "utterance": "How many of those students do not have advisor 2192 ?",
            "sql": "select count ( distinct student.stuid ) where student.advisor != value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct student.fname , student.lname except select distinct student.fname , student.lname where student.advisor = value"
        },
        {
            "utterance": "Please only list last names .",
            "sql": "select distinct student.lname except select distinct student.lname where student.advisor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""
    },
    "interaction": [
        {
            "utterance": "How many students have president votes ?",
            "sql": "select count ( distinct student.stuid )"
        },
        {
            "utterance": "How many of those students have advisor 8741 ?",
            "sql": "select count ( distinct student.stuid ) where student.advisor = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select distinct student.fname , student.lname where student.advisor = value"
        },
        {
            "utterance": "Please only list last names .",
            "sql": "select distinct student.lname intersect select distinct student.lname where student.advisor = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Report all advisors that advise more than 2 students.",
        "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What are all of the advisors ?",
            "sql": "select distinct student.advisor"
        },
        {
            "utterance": "How many advise 2 students or less ?",
            "sql": "select count ( student.* ) ( select student.advisor group_by student.advisor having count ( student.* ) < = value )"
        },
        {
            "utterance": "How many advise more than 2 students ?",
            "sql": "select count ( student.* ) ( select student.advisor group_by student.advisor having count ( student.* ) > value )"
        },
        {
            "utterance": "Please report these advisors .",
            "sql": "select student.advisor group_by student.advisor having count ( student.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Report all majors that have less than 3 students.",
        "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "Report all majors .",
            "sql": "select distinct student.major"
        },
        {
            "utterance": "How many have 3 students or more ?",
            "sql": "select count ( student.* ) ( select student.major group_by student.major having count ( student.* ) > = value )"
        },
        {
            "utterance": "How many have less than 3 students ?",
            "sql": "select count ( student.* ) ( select student.major group_by student.major having count ( student.* ) < value )"
        },
        {
            "utterance": "Report those majors with less than 3 students .",
            "sql": "select student.major group_by student.major having count ( student.* ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Which major has the most students?",
        "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Report all majors .",
            "sql": "select distinct student.major"
        },
        {
            "utterance": "Report the number of students per major as well .",
            "sql": "select student.major , count ( student.* ) group_by student.major"
        },
        {
            "utterance": "Order the majors by decreasing number of students .",
            "sql": "select student.major , count ( student.* ) group_by student.major order_by count ( student.* ) desc"
        },
        {
            "utterance": "Which major has the most students ?",
            "sql": "select student.major group_by student.major order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the most common major among female (sex is F) students?",
        "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the majors of female students .",
            "sql": "select distinct student.major where student.sex = value"
        },
        {
            "utterance": "Order the majors by decreasing number of students .",
            "sql": "select distinct student.major where student.sex = value group_by student.major order_by count ( student.* ) desc"
        },
        {
            "utterance": "What is the most common major ?",
            "sql": "select student.major where student.sex = value group_by student.major order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_2",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the city_code of the city that the most students live in?",
        "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many students live in each city ?",
            "sql": "select student.city_code , count ( student.* ) group_by student.city_code"
        },
        {
            "utterance": "List the cities from the one with the most students to the one with the least students .",
            "sql": "select student.city_code group_by student.city_code order_by count ( student.* ) desc"
        },
        {
            "utterance": "How many students live in the most popular city ?",
            "sql": "select count ( student.* ) group_by student.city_code order_by count ( student.* ) desc limit_value"
        },
        {
            "utterance": "What is the city code of the most popular city ?",
            "sql": "select student.city_code group_by student.city_code order_by count ( student.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
    },
    "interaction": [
        {
            "utterance": "Give me movies that are directed by James Cameron .",
            "sql": "select movie.title where movie.director = value"
        },
        {
            "utterance": "What about those that also produced after 2000 at the same time ?",
            "sql": "select movie.title where movie.director = value and movie.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
        "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
    },
    "interaction": [
        {
            "utterance": "Give me the name of all reviewers .",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "Whose name contains `` Mike '' ?",
            "sql": "select reviewer.name where reviewer.name like value"
        },
        {
            "utterance": "What about his id ?",
            "sql": "select reviewer.rid where reviewer.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the lowest and highest rating star?",
        "sql": "SELECT max(stars) ,  min(stars) FROM Rating"
    },
    "interaction": [
        {
            "utterance": "What are the ratings ?",
            "sql": "select rating.*"
        },
        {
            "utterance": "Show me the lowest and highest stars .",
            "sql": "select max ( rating.stars ) , min ( rating.stars )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",
        "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all movies .",
            "sql": "select movie.title"
        },
        {
            "utterance": "What about their ratings ?",
            "sql": "select movie.title , rating.stars"
        },
        {
            "utterance": "Only show those with a rating of 4 or 5 .",
            "sql": "select movie.title , rating.stars where rating.stars > = value"
        },
        {
            "utterance": "Give me all years that have any of those movies in the order of year .",
            "sql": "select distinct movie.year where rating.stars > = value order_by movie.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all movies .",
            "sql": "select movie.title"
        },
        {
            "utterance": "What about those with 5 star rating ?",
            "sql": "select movie.title where rating.stars = value"
        },
        {
            "utterance": "Who directed those movies ?",
            "sql": "select movie.director , movie.title where rating.stars = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average rating star for each reviewer?",
        "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "Who are all the reviewers ?",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "What is their highest rating ?",
            "sql": "select reviewer.name , max ( rating.stars ) group_by reviewer.name"
        },
        {
            "utterance": "What is their lowest rating ?",
            "sql": "select reviewer.name , min ( rating.stars ) group_by reviewer.name"
        },
        {
            "utterance": "What about their average rating ?",
            "sql": "select reviewer.name , avg ( rating.stars ) group_by reviewer.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the titles of all movies that have no ratings.",
        "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
    },
    "interaction": [
        {
            "utterance": "What are the title of all movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "What about those without any rating ?",
            "sql": "select movie.title where movie.mid not in ( select rating.mid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the average rating stars and title for the oldest movie?",
        "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "What are the titles of all movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "Which one is the oldest ?",
            "sql": "select movie.title where movie.year = ( select min ( movie.year ) )"
        },
        {
            "utterance": "What is its average rating stars ?",
            "sql": "select avg ( rating.stars ) , movie.title where movie.year = ( select min ( movie.year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the most recent movie?",
        "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "What are the titles of all movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "Which one is the most recent ?",
            "sql": "select movie.title where movie.year = ( select max ( movie.year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the maximum stars and year for the most recent movie?",
        "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)"
    },
    "interaction": [
        {
            "utterance": "What are the titles of all movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "Which one is the most recent ?",
            "sql": "select movie.title where movie.year = ( select max ( movie.year ) )"
        },
        {
            "utterance": "What is its highest rating stars ?",
            "sql": "select max ( rating.stars ) , movie.title where movie.year = ( select max ( movie.year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the names of movies whose created year is after all movies directed by Steven Spielberg?",
        "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")"
    },
    "interaction": [
        {
            "utterance": "Show me the movies directed by Steven Spielberg .",
            "sql": "select movie.title where movie.director = value"
        },
        {
            "utterance": "What about their years ?",
            "sql": "select movie.title , movie.year where movie.director = value"
        },
        {
            "utterance": "Show me the movies that were created after all of the above movies .",
            "sql": "select movie.title where movie.year > ( select max ( movie.year ) where movie.director = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
        "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")"
    },
    "interaction": [
        {
            "utterance": "Show me the movies directed by James Cameron .",
            "sql": "select movie.title where movie.director = value"
        },
        {
            "utterance": "What about their rating stars ?",
            "sql": "select rating.stars where movie.director = value"
        },
        {
            "utterance": "Show me the average of them .",
            "sql": "select avg ( rating.stars ) where movie.director = value"
        },
        {
            "utterance": "Give me the titles and directors of movies whose star is greater than that .",
            "sql": "select movie.title , movie.director where rating.stars > ( select avg ( rating.stars ) where movie.director = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Return reviewer name, movie title, stars, and rating date. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
        "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars"
    },
    "interaction": [
        {
            "utterance": "What are the titles of all movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "Show me their reviewer 's name , stars , and rating date .",
            "sql": "select reviewer.name , movie.title , rating.stars , rating.ratingdate"
        },
        {
            "utterance": "Sort them first by reviewer name , then by movie title , and lastly by number of stars .",
            "sql": "select reviewer.name , movie.title , rating.stars , rating.ratingdate order_by reviewer.name , movie.title , rating.stars"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the names of all reviewers who have contributed three or more ratings.",
        "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "Show me the names of all the reviewers .",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "What about the ratings they have contributed ?",
            "sql": "select *"
        },
        {
            "utterance": "Show me the reviewers who have contributed three or more ratings .",
            "sql": "select reviewer.name group_by rating.rid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the names of all reviewers who rated Gone with the Wind.",
        "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'"
    },
    "interaction": [
        {
            "utterance": "Show me the ratings for Gone with the Wind .",
            "sql": "select * where movie.title = value"
        },
        {
            "utterance": "Give me the names of reviewers who gave those ratings .",
            "sql": "select distinct reviewer.name where movie.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    "interaction": [
        {
            "utterance": "Show me all the ratings given by Sarah Martinez .",
            "sql": "select * where reviewer.name = value"
        },
        {
            "utterance": "What movies are those ratings about ?",
            "sql": "select distinct movie.title where reviewer.name = value"
        },
        {
            "utterance": "Show me the directors of those movies .",
            "sql": "select distinct movie.director where reviewer.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 16,
    "final": {
        "utterance": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    "interaction": [
        {
            "utterance": "Show me the titles of all the movies .",
            "sql": "select movie.title"
        },
        {
            "utterance": "What about the name of their reviewers and directors ?",
            "sql": "select reviewer.name , movie.title , movie.director"
        },
        {
            "utterance": "Show those who have the same names .",
            "sql": "select reviewer.name , movie.title , movie.director where movie.director = reviewer.name"
        },
        {
            "utterance": "Give me the reviewer name , movie title , and number of stars .",
            "sql": "select distinct reviewer.name , movie.title , rating.stars where movie.director = reviewer.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Return all reviewer names and movie names together in a single list.",
        "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"
    },
    "interaction": [
        {
            "utterance": "Give me the names of all reviewers .",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "Show me the title of all movies together in a single list .",
            "sql": "select reviewer.name union select movie.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the titles of all movies not reviewed by Chris Jackson.",
        "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'"
    },
    "interaction": [
        {
            "utterance": "Give me the ratings given by Chris Jackson .",
            "sql": "select *"
        },
        {
            "utterance": "What movies are they about ?",
            "sql": "select movie.title where reviewer.name = value"
        },
        {
            "utterance": "Show me the movies other than those .",
            "sql": "select distinct movie.title except select movie.title where reviewer.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 19,
    "final": {
        "utterance": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
        "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"
    },
    "interaction": [
        {
            "utterance": "What are all the directors ?",
            "sql": "select distinct movie.director"
        },
        {
            "utterance": "How many movies did each of them direct ?",
            "sql": "select count ( movie.* ) , movie.director group_by movie.director"
        },
        {
            "utterance": "Show me those who directed more than one movie .",
            "sql": "select movie.director group_by movie.director having count ( movie.* ) > value"
        },
        {
            "utterance": "Show me their directed movies ' titles , in the order of director name , then movie title .",
            "sql": "select movie.title , movie.director where movie.title != movie.title order_by movie.director , movie.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 20,
    "final": {
        "utterance": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
        "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title"
    },
    "interaction": [
        {
            "utterance": "What are all the directors ?",
            "sql": "select distinct movie.director"
        },
        {
            "utterance": "How many movies did each of them direct ?",
            "sql": "select count ( movie.* ) , movie.director group_by movie.director"
        },
        {
            "utterance": "Show me those who directed more than one movie .",
            "sql": "select movie.director group_by movie.director having count ( movie.* ) > value"
        },
        {
            "utterance": "Give me the titles and produced years of all movies directed by them .",
            "sql": "select movie.title , movie.year where movie.title != movie.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the names of the directors who made exactly one movie?",
        "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "What are all the directors ?",
            "sql": "select distinct movie.director"
        },
        {
            "utterance": "How many movies did each of them direct ?",
            "sql": "select count ( movie.* ) , movie.director group_by movie.director"
        },
        {
            "utterance": "Show me those who directed exactly one movie .",
            "sql": "select movie.director group_by movie.director having count ( movie.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "What are all the directors ?",
            "sql": "select distinct movie.director"
        },
        {
            "utterance": "How many movies did each of them direct ?",
            "sql": "select count ( movie.* ) , movie.director group_by movie.director"
        },
        {
            "utterance": "Show me those who directed exactly one movie other than NULL .",
            "sql": "select movie.director where movie.director != value group_by movie.director having count ( movie.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 23,
    "final": {
        "utterance": "How many movie reviews does each director get?",
        "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director"
    },
    "interaction": [
        {
            "utterance": "What are all the directors ?",
            "sql": "select distinct movie.director"
        },
        {
            "utterance": "How many movie reviews does each of them get ?",
            "sql": "select count ( * ) , movie.director group_by movie.director"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "What are their average ratings ?",
            "sql": "select movie.title , avg ( rating.stars ) group_by rating.mid"
        },
        {
            "utterance": "Give me the movies with the highest average rating .",
            "sql": "select movie.title , avg ( rating.stars ) group_by rating.mid order_by avg ( rating.stars ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "What are their average ratings ?",
            "sql": "select movie.title , avg ( rating.stars ) group_by rating.mid"
        },
        {
            "utterance": "Give me the movies with the lowest average rating .",
            "sql": "select movie.title , avg ( rating.stars ) group_by rating.mid order_by avg ( rating.stars ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the names and years of the movies that has the top 3 highest rating star?",
        "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show me the titles all the movies .",
            "sql": "select movie.title"
        },
        {
            "utterance": "What are their ratings ?",
            "sql": "select movie.title , rating.stars"
        },
        {
            "utterance": "Show me the names and years of the movies that has the top 3 rating star .",
            "sql": "select movie.title , movie.year order_by rating.stars desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 27,
    "final": {
        "utterance": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
        "sql": "SELECT T2.title ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"
    },
    "interaction": [
        {
            "utterance": "What are all the directors excluding NULL ?",
            "sql": "select distinct movie.director where movie.director != value"
        },
        {
            "utterance": "What about the highest rating their movies have ever received ?",
            "sql": "select movie.director , max ( rating.stars ) where movie.director != value group_by movie.director"
        },
        {
            "utterance": "Also give me those movies ' title .",
            "sql": "select movie.title , rating.stars , movie.director , max ( rating.stars ) where movie.director != value group_by movie.director"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"
    },
    "interaction": [
        {
            "utterance": "What are the name of all the reviewers ?",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "What are the least rating stars they ever gave ?",
            "sql": "select min ( rating.stars ) group_by rating.rid"
        },
        {
            "utterance": "Also show me the title of the movies that correspond to those rating stars .",
            "sql": "select movie.title , rating.rid , rating.stars , min ( rating.stars ) group_by rating.rid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
        "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"
    },
    "interaction": [
        {
            "utterance": "Who are all the directors ?",
            "sql": "select distinct movie.director"
        },
        {
            "utterance": "What about the lowest rating their movies have ever received ?",
            "sql": "select movie.director , min ( rating.stars ) group_by movie.director"
        },
        {
            "utterance": "Also give me those movies ' title .",
            "sql": "select movie.title , rating.stars , movie.director , min ( rating.stars ) group_by movie.director"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What is the name of the movie that is rated by most of times?",
        "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "How many ratings did each of them have ?",
            "sql": "select count ( * ) group_by rating.mid"
        },
        {
            "utterance": "Give me the name of the movie that has the most ratings .",
            "sql": "select movie.title , rating.mid group_by rating.mid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the titles of all movies that have rating star is between 3 and 5?",
        "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    "interaction": [
        {
            "utterance": "What are the name of all movies ?",
            "sql": "select movie.title"
        },
        {
            "utterance": "What rating star did each of them have ?",
            "sql": "select movie.title , rating.stars"
        },
        {
            "utterance": "Give me the movies that have rating star between 3 and 5 .",
            "sql": "select movie.title where rating.stars between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the names of reviewers who had given higher than 3 stars ratings.",
        "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the reviewers ?",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "Who had given ratings higher than 3 stars ?",
            "sql": "select reviewer.name where rating.stars > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the average rating star for each movie that are not reviewed by Brittany Harris.",
        "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID"
    },
    "interaction": [
        {
            "utterance": "What are the name of all the reviewers ?",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "What are the movies that are reviewed by Brittany Harris ?",
            "sql": "select rating.mid where reviewer.name = value"
        },
        {
            "utterance": "Show me the average rating star for all other movies except those .",
            "sql": "select rating.mid , avg ( rating.stars ) where rating.mid not in ( select rating.mid where reviewer.name = value ) group_by rating.mid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What are the ids of the movies that are not reviewed by Brittany Harris.",
        "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""
    },
    "interaction": [
        {
            "utterance": "What are the name of all the reviewers ?",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "What are the ids of the movies that are reviewed by Brittany Harris ?",
            "sql": "select rating.mid where reviewer.name = value"
        },
        {
            "utterance": "Show me the ids of movies except those .",
            "sql": "select rating.mid except select rating.mid where reviewer.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the average rating star for each movie that received at least 2 ratings.",
        "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the rating star for all the movies ?",
            "sql": "select rating.mid , rating.stars"
        },
        {
            "utterance": "Give me the average rating star for each movie .",
            "sql": "select rating.mid , avg ( rating.stars ) group_by rating.mid"
        },
        {
            "utterance": "Only show those that received at least 2 ratings .",
            "sql": "select rating.mid , avg ( rating.stars ) group_by rating.mid having count ( rating.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 36,
    "final": {
        "utterance": "find the ids of reviewers who did not give 4 star.",
        "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    "interaction": [
        {
            "utterance": "What are all the ratings ?",
            "sql": "select rating.*"
        },
        {
            "utterance": "Show me the ids of reviewers who gave 4 star .",
            "sql": "select distinct rating.rid where rating.stars = value"
        },
        {
            "utterance": "Give me the ids of reviewers except those .",
            "sql": "select rating.rid except select rating.rid where rating.stars = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the movies .",
            "sql": "select movie.title"
        },
        {
            "utterance": "What about those that were made after 2000 ?",
            "sql": "select movie.title where movie.year > value"
        },
        {
            "utterance": "Please also include those that were reviewed by Brittany Harris .",
            "sql": "select distinct movie.title where reviewer.name = value or movie.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the movies .",
            "sql": "select movie.title"
        },
        {
            "utterance": "What about those that were made before 1980 ?",
            "sql": "select movie.title where movie.year < value"
        },
        {
            "utterance": "Please also include those that were directed by James Cameron .",
            "sql": "select movie.title where movie.director = value or movie.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "movie_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the names of reviewers who had rated 3 star and 4 star?",
        "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4"
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the reviewers .",
            "sql": "select reviewer.name"
        },
        {
            "utterance": "What about the rating star they had given ?",
            "sql": "select reviewer.name , rating.stars"
        },
        {
            "utterance": "Show me the reviewers who had rated 3 star and 4 star .",
            "sql": "select reviewer.name where rating.stars = value intersect select reviewer.name where rating.stars = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the average and maximum rating of all reviews.",
        "sql": "SELECT avg(rating) ,  max(rating) FROM review"
    },
    "interaction": [
        {
            "utterance": "List the ratings for all of the reviews .",
            "sql": "select review.rating"
        },
        {
            "utterance": "What was the average rating ?",
            "sql": "select avg ( review.rating )"
        },
        {
            "utterance": "Include the maximum as well .",
            "sql": "select avg ( review.rating ) , max ( review.rating )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of items that did not receive any review.",
        "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "Show all items .",
            "sql": "select item.title"
        },
        {
            "utterance": "Which ones received reviews ?",
            "sql": "select item.title where item.i_id in ( select review.i_id )"
        },
        {
            "utterance": "How about those that did not receive any reviews ?",
            "sql": "select item.title where item.i_id not in ( select review.i_id )"
        },
        {
            "utterance": "How many unreviewed items were there ?",
            "sql": "select count ( item.* ) where item.i_id not in ( select review.i_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the names of goods that receive a rating of 10.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10"
    },
    "interaction": [
        {
            "utterance": "List the ratings of all goods .",
            "sql": "select review.rating"
        },
        {
            "utterance": "Include the names of the goods .",
            "sql": "select item.title , review.rating"
        },
        {
            "utterance": "How many received a rating of 10 ?",
            "sql": "select count ( * ) where review.rating = value"
        },
        {
            "utterance": "What are the names of these goods ?",
            "sql": "select item.title where review.rating = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)"
    },
    "interaction": [
        {
            "utterance": "What is the average rating of all items ?",
            "sql": "select avg ( review.rating )"
        },
        {
            "utterance": "How many items have a rating lower than the average ?",
            "sql": "select count ( review.* ) where review.rating < ( select avg ( review.rating ) )"
        },
        {
            "utterance": "How about higher than the average ?",
            "sql": "select count ( review.* ) where review.rating > ( select avg ( review.rating ) )"
        },
        {
            "utterance": "What are the names of those items ?",
            "sql": "select item.title where review.rating > ( select avg ( review.rating ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the titles of items that received any rating below 5.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5"
    },
    "interaction": [
        {
            "utterance": "List the title and rating for each item .",
            "sql": "select item.title , review.rating"
        },
        {
            "utterance": "Order by increasing rating .",
            "sql": "select item.title , review.rating order_by review.rating asc"
        },
        {
            "utterance": "How many received a rating below 5 ?",
            "sql": "select count ( * ) where review.rating < value"
        },
        {
            "utterance": "What are the names of these items ?",
            "sql": "select item.title where review.rating < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5"
    },
    "interaction": [
        {
            "utterance": "What is the title and rating for each item ?",
            "sql": "select item.title , review.rating"
        },
        {
            "utterance": "Which ones received a rating higher than 8 ?",
            "sql": "select item.title where review.rating > value"
        },
        {
            "utterance": "Out of those items , which ones also received a rating less than 5 ?",
            "sql": "select item.title where review.rating > value intersect select item.title where review.rating < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5"
    },
    "interaction": [
        {
            "utterance": "What items were ranked ?",
            "sql": "select distinct item.title"
        },
        {
            "utterance": "How many have a rank that is greater than 3 ?",
            "sql": "select count ( distinct item.title ) where review.rank > value"
        },
        {
            "utterance": "List the names of these items .",
            "sql": "select distinct item.title where review.rank > value"
        },
        {
            "utterance": "Out of these items , which ones also have an average rating that is above 5 ?",
            "sql": "select item.title where review.rank > value intersect select item.title group_by review.i_id having avg ( review.rating ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of the item with the lowest average rating.",
        "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the names of all items",
            "sql": "select item.title"
        },
        {
            "utterance": "Show the average rating of each one as well .",
            "sql": "select item.title , avg ( review.rating ) group_by review.i_id"
        },
        {
            "utterance": "Order by increasing average rating .",
            "sql": "select item.title , avg ( review.rating ) group_by review.i_id order_by avg ( review.rating )"
        },
        {
            "utterance": "Which one has the lowest ?",
            "sql": "select item.title group_by review.i_id order_by avg ( review.rating ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name of the user who gives the most reviews.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all users ?",
            "sql": "select useracct.name"
        },
        {
            "utterance": "How many reviews were given by each user ?",
            "sql": "select useracct.name , count ( * ) group_by review.u_id"
        },
        {
            "utterance": "Order by the number of reviews given , from the greatest to the least .",
            "sql": "select useracct.name , count ( * ) group_by review.u_id order_by count ( * ) desc"
        },
        {
            "utterance": "Who gave the most reviews ?",
            "sql": "select useracct.name group_by review.u_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and id of the item with the highest average rating.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the name of each item that received a rating .",
            "sql": "select item.title group_by review.i_id"
        },
        {
            "utterance": "Include the item ID as well .",
            "sql": "select item.title , item.i_id group_by review.i_id"
        },
        {
            "utterance": "Order items by decreasing average rating .",
            "sql": "select item.title , item.i_id group_by review.i_id order_by avg ( review.rating ) desc"
        },
        {
            "utterance": "Which item had the highest ? Include its ID as well .",
            "sql": "select item.title , item.i_id group_by review.i_id order_by avg ( review.rating ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and id of the good with the highest average rank.",
        "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which items have a rank ?",
            "sql": "select item.title group_by review.i_id"
        },
        {
            "utterance": "Also include their IDs .",
            "sql": "select item.title , item.i_id group_by review.i_id"
        },
        {
            "utterance": "Order them by average rank from highest to lowest .",
            "sql": "select item.title , item.i_id group_by review.i_id order_by avg ( review.rank )"
        },
        {
            "utterance": "What is the name and ID of the item that received the highest average rank ?",
            "sql": "select item.title , item.i_id group_by review.i_id order_by avg ( review.rank ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 11,
    "final": {
        "utterance": "For each user, return the name and the average rating of reviews given by them.",
        "sql": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    "interaction": [
        {
            "utterance": "List the names of all users .",
            "sql": "select useracct.name"
        },
        {
            "utterance": "Only show those who gave reviews .",
            "sql": "select distinct useracct.name"
        },
        {
            "utterance": "Include the ratings given by each of them .",
            "sql": "select useracct.name , review.rating"
        },
        {
            "utterance": "Only show their name and the average rating given by each of them .",
            "sql": "select useracct.name , avg ( review.rating ) group_by review.u_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 12,
    "final": {
        "utterance": "For each user, find their name and the number of reviews written by them.",
        "sql": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of the users ?",
            "sql": "select useracct.name"
        },
        {
            "utterance": "How many wrote reviews ?",
            "sql": "select count ( distinct useracct.name )"
        },
        {
            "utterance": "List their names ?",
            "sql": "select distinct useracct.name"
        },
        {
            "utterance": "Include the number of reviews written by each of them .",
            "sql": "select useracct.name , count ( * ) group_by review.u_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the user who gave the highest rating.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the names of users who gave ratings .",
            "sql": "select distinct useracct.name"
        },
        {
            "utterance": "Include the ratings that they gave as well .",
            "sql": "select useracct.name , review.rating"
        },
        {
            "utterance": "Order by highest to lowest rating .",
            "sql": "select useracct.name order_by review.rating desc"
        },
        {
            "utterance": "Who gave the highest rating ?",
            "sql": "select useracct.name order_by review.rating desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of the source user with the highest average trust score.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all of the users\u2019 names ?",
            "sql": "select useracct.name"
        },
        {
            "utterance": "Only show the names of source users .",
            "sql": "select distinct useracct.name"
        },
        {
            "utterance": "Order them by decreasing average trust score .",
            "sql": "select useracct.name group_by trust.source_u_id order_by avg ( trust.trust ) desc"
        },
        {
            "utterance": "Who has the highest average trust score ?",
            "sql": "select useracct.name group_by trust.source_u_id order_by avg ( trust.trust ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Find each target user's name and average trust score.",
        "sql": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id"
    },
    "interaction": [
        {
            "utterance": "List the names of all target users .",
            "sql": "select distinct useracct.name"
        },
        {
            "utterance": "Include the trust scores for each target user .",
            "sql": "select useracct.name , trust.trust"
        },
        {
            "utterance": "List the name and average trust score for each target user .",
            "sql": "select useracct.name , avg ( trust.trust ) group_by trust.target_u_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of the target user with the lowest trust score.",
        "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all users ?",
            "sql": "select useracct.name"
        },
        {
            "utterance": "Only show the target users .",
            "sql": "select distinct useracct.name"
        },
        {
            "utterance": "Order them by increasing trust score .",
            "sql": "select useracct.name order_by trust.trust"
        },
        {
            "utterance": "Who has the lowest trust score ?",
            "sql": "select useracct.name order_by trust.trust limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Find the names of the items that did not receive any review.",
        "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "List the names of all items .",
            "sql": "select item.title"
        },
        {
            "utterance": "How many did not receive any reviews ?",
            "sql": "select count ( item.* ) where item.i_id not in ( select review.i_id )"
        },
        {
            "utterance": "List their names .",
            "sql": "select item.title where item.i_id not in ( select review.i_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "epinions_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the names of users who did not leave any review.",
        "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
    },
    "interaction": [
        {
            "utterance": "What are all of the users\u2019 names ?",
            "sql": "select useracct.name"
        },
        {
            "utterance": "How many wrote reviews ?",
            "sql": "select count ( useracct.* ) where useracct.u_id in ( select review.u_id )"
        },
        {
            "utterance": "How many did not write reviews ?",
            "sql": "select count ( useracct.* ) where useracct.u_id not in ( select review.u_id )"
        },
        {
            "utterance": "List their names .",
            "sql": "select useracct.name where useracct.u_id not in ( select review.u_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 0,
    "final": {
        "utterance": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
        "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which cities have customer_type_code of `` Good Credit Rating '' ?",
            "sql": "select distinct customers.town_city where customers.customer_type_code = value"
        },
        {
            "utterance": "Which ones do not ?",
            "sql": "select distinct customers.town_city where customers.customer_type_code != value"
        },
        {
            "utterance": "Give the counts of the town city groups of customers in that first query .",
            "sql": "select customers.town_city , count ( customers.* ) where customers.customer_type_code = value group_by customers.town_city"
        },
        {
            "utterance": "Just return the town city with the least number .",
            "sql": "select customers.town_city where customers.customer_type_code = value group_by customers.town_city order_by count ( customers.* ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of all products along with the number of complaints that they have received.",
        "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"
    },
    "interaction": [
        {
            "utterance": "Which product ids have received complaints ?",
            "sql": "select distinct complaints.product_id"
        },
        {
            "utterance": "What are the names of those products ?",
            "sql": "select distinct products.product_name"
        },
        {
            "utterance": "Speaking of those names , count the number of complaints about them .",
            "sql": "select products.product_name , count ( * ) group_by products.product_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the email of the customer who has filed the most complaints.",
        "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which customer ids have filed complaints ?",
            "sql": "select distinct complaints.customer_id"
        },
        {
            "utterance": "What are the emails of these customers ?",
            "sql": "select distinct customers.email_address"
        },
        {
            "utterance": "Sum the complaints of each customer email address .",
            "sql": "select customers.email_address , count ( * ) group_by customers.customer_id"
        },
        {
            "utterance": "Find the email of the customer who has filed the most complaints .",
            "sql": "select customers.email_address group_by customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 3,
    "final": {
        "utterance": "Which products has been complained by the customer who has filed least amount of complaints?",
        "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which customer id filed the least number of complaints ? How many ?",
            "sql": "select complaints.customer_id , count ( complaints.* ) group_by complaints.customer_id order_by count ( complaints.* ) asc limit_value"
        },
        {
            "utterance": "Which product names did this customer complain about ?",
            "sql": "select distinct products.product_name group_by customers.customer_id order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the phone number of the customer who has filed the most recent complaint?",
        "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the customer id of the customer who has filed the most recent complaint ?",
            "sql": "select complaints.customer_id order_by complaints.date_complaint_raised desc limit_value"
        },
        {
            "utterance": "What is this customers city ?",
            "sql": "select customers.town_city order_by complaints.date_complaint_raised desc limit_value"
        },
        {
            "utterance": "How about their phone number ?",
            "sql": "select customers.phone_number order_by complaints.date_complaint_raised desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the email and phone number of the customers who have never filed a complaint before.",
        "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"
    },
    "interaction": [
        {
            "utterance": "Find the email of the customers who have never filed a complaint before .",
            "sql": "select customers.email_address where customers.customer_id not in ( select complaints.customer_id )"
        },
        {
            "utterance": "Also the phone number .",
            "sql": "select customers.email_address , customers.phone_number where customers.customer_id not in ( select complaints.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the phone number of all the customers and staff.",
        "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"
    },
    "interaction": [
        {
            "utterance": "What are the phone numbers of customers ?",
            "sql": "select customers.phone_number"
        },
        {
            "utterance": "How about staff ?",
            "sql": "select staff.phone_number"
        },
        {
            "utterance": "Union those .",
            "sql": "select customers.phone_number union select staff.phone_number"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name and category of the most expensive product.",
        "sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the product records by descending price .",
            "sql": "select products.* order_by products.product_price desc"
        },
        {
            "utterance": "Just show the product names and category codes .",
            "sql": "select products.product_name , products.product_category_code order_by products.product_price desc"
        },
        {
            "utterance": "Only for the most expensive product .",
            "sql": "select products.product_name , products.product_category_code order_by products.product_price desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the prices of products which has never received a single complaint.",
        "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"
    },
    "interaction": [
        {
            "utterance": "Which product ids have never been complained about ?",
            "sql": "select products.product_id where products.product_id not in ( select complaints.product_id )"
        },
        {
            "utterance": "Which ones have been complained about ?",
            "sql": "select distinct complaints.product_id"
        },
        {
            "utterance": "Find the prices of products which has never received a single complaint .",
            "sql": "select products.product_price where products.product_id not in ( select complaints.product_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the last names of the staff members who processed complaints about the cheapest product.",
        "sql": "SELECT last_name from staff where staff_id in (SELECT staff_id from complaints WHERE product_id in (SELECT product_id FROM products ORDER BY product_price ASC LIMIT 1))"
    },
    "interaction": [
        {
            "utterance": "What is the name of the cheapest product ?",
            "sql": "select products.product_name order_by products.product_price asc limit_value"
        },
        {
            "utterance": "Show records where this product was complained about .",
            "sql": "select complaints.* where complaints.product_id in ( select products.product_id order_by products.product_price asc limit_value )"
        },
        {
            "utterance": "Find the last name of the staff member who processed a complaint of this cheapest product .",
            "sql": "select staff.last_name where staff.staff_id in ( select complaints.staff_id where complaints.product_id in ( select products.product_id order_by products.product_price asc limit_value ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 10,
    "final": {
        "utterance": "Which complaint status has more than 3 records on file?",
        "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "Count the various complaint status codes .",
            "sql": "select complaints.complaint_status_code , count ( complaints.* ) group_by complaints.complaint_status_code"
        },
        {
            "utterance": "Only show counts greater than 3 .",
            "sql": "select complaints.complaint_status_code group_by complaints.complaint_status_code having count ( complaints.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the last name of the staff whose email address contains \"wrau\".",
        "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\""
    },
    "interaction": [
        {
            "utterance": "What are the email addresses of the staff ?",
            "sql": "select staff.email_address"
        },
        {
            "utterance": "Find the last name of the staff whose email address contains `` wrau '' .",
            "sql": "select staff.last_name where staff.email_address like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 12,
    "final": {
        "utterance": "How many customers are there in the customer type with the most customers?",
        "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common customer type ?",
            "sql": "select customers.customer_type_code group_by customers.customer_type_code order_by count ( customers.* ) desc limit_value"
        },
        {
            "utterance": "How many are there in this group ?",
            "sql": "select count ( customers.* ) group_by customers.customer_type_code order_by count ( customers.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the last name of the staff who has handled the first ever complaint?",
        "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the id of the first complaint ?",
            "sql": "select complaints.complaint_id order_by complaints.date_complaint_raised asc limit_value"
        },
        {
            "utterance": "Which staff id was there for it ?",
            "sql": "select complaints.staff_id order_by complaints.date_complaint_raised asc limit_value"
        },
        {
            "utterance": "What was the last name of this staff member ?",
            "sql": "select staff.last_name order_by complaints.date_complaint_raised limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the number of complaints with Product Failure type for each complaint status.",
        "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code"
    },
    "interaction": [
        {
            "utterance": "Which complaints have type Product Failure ?",
            "sql": "select complaints.* where complaints.complaint_type_code = value"
        },
        {
            "utterance": "Which complaint statuses are among those records ?",
            "sql": "select distinct complaints.complaint_status_code where complaints.complaint_status_code in ( select complaints.complaint_status_code where complaints.complaint_type_code = value )"
        },
        {
            "utterance": "Count the occurrences of each complaint status in the above .",
            "sql": "select complaints.complaint_status_code , count ( complaints.* ) where complaints.complaint_type_code = value group_by complaints.complaint_status_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customer_complaints",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the first names of the top 5 staff who have handled the greatest number of complaints?",
        "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "What are the staff ids of the top 5 staff who have handled the greatest number of complaints ?",
            "sql": "select complaints.staff_id group_by complaints.staff_id order_by count ( complaints.* ) limit_value"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select staff.first_name group_by complaints.staff_id order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which restaurant has highest rating? List the restaurant name and its rating.",
        "sql": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Give the names and ratings of Restaurants .",
            "sql": "select restaurant.resname , restaurant.rating"
        },
        {
            "utterance": "Sort by descending order .",
            "sql": "select restaurant.resname , restaurant.rating order_by restaurant.rating desc"
        },
        {
            "utterance": "Just give the most highly rated restaurant name and rating .",
            "sql": "select restaurant.resname , restaurant.rating order_by restaurant.rating desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the age of student Linda Smith?",
        "sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "List the last names , first names , and ages of students .",
            "sql": "select student.lname , student.fname , student.age"
        },
        {
            "utterance": "Narrow that down to last name `` Smith '' and first name `` Linda ''",
            "sql": "select student.lname , student.fname , student.age where student.fname = value and student.lname = value"
        },
        {
            "utterance": "What is the age of student Linda Smith ?",
            "sql": "select student.age where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the gender of the student Linda Smith?",
        "sql": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "What is Linda Smith 's Major ?",
            "sql": "select student.major where student.fname = value and student.lname = value"
        },
        {
            "utterance": "How about Linda Smith 's Adivisor ?",
            "sql": "select student.advisor where student.fname = value and student.lname = value"
        },
        {
            "utterance": "Give her gender .",
            "sql": "select student.sex where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which city does student Linda Smith live in?",
        "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    "interaction": [
        {
            "utterance": "Give the student id of linda smith .",
            "sql": "select student.stuid where student.fname = value and student.lname = value"
        },
        {
            "utterance": "Now for Tracy Kim .",
            "sql": "select student.stuid where student.fname = value and student.lname = value"
        },
        {
            "utterance": "Which city does student Linda Smith live in ?",
            "sql": "select student.city_code where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which Advisor has most of students? List advisor and the number of students.",
        "sql": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Give the distinct advisors of students .",
            "sql": "select distinct student.advisor"
        },
        {
            "utterance": "Which of those advises the most students ?",
            "sql": "select student.advisor group_by student.advisor order_by count ( student.advisor ) desc limit_value"
        },
        {
            "utterance": "Give the count , too .",
            "sql": "select student.advisor , count ( student.* ) group_by student.advisor order_by count ( student.advisor ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which major has least number of students? List the major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Give distinct majors .",
            "sql": "select distinct student.major"
        },
        {
            "utterance": "Which has the most number of students ?",
            "sql": "select student.major group_by student.major order_by count ( student.major ) desc limit_value"
        },
        {
            "utterance": "Which has the least ?",
            "sql": "select student.major group_by student.major order_by count ( student.major ) asc limit_value"
        },
        {
            "utterance": "Give the count to prove it .",
            "sql": "select student.major , count ( student.* ) group_by student.major order_by count ( student.major ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"
    },
    "interaction": [
        {
            "utterance": "Which major has between 2 and 30 number of students ?",
            "sql": "select student.major group_by student.major having count ( student.major ) between value and value"
        },
        {
            "utterance": "Count that , too .",
            "sql": "select student.major , count ( student.* ) group_by student.major having count ( student.major ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;"
    },
    "interaction": [
        {
            "utterance": "What are the student ids of students majoring in 600 ?",
            "sql": "select student.stuid where student.major = value"
        },
        {
            "utterance": "Only show those whose age is 18 .",
            "sql": "select student.stuid where student.age > value and student.major = value"
        },
        {
            "utterance": "Just show the first and last names .",
            "sql": "select student.fname , student.lname where student.age > value and student.major = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List all female students older than 18 who are not majoring in 600. List students' first name and last name.",
        "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';"
    },
    "interaction": [
        {
            "utterance": "Give information for students older than 18 .",
            "sql": "select student.* where student.age > value"
        },
        {
            "utterance": "List all female students older than 18 who are not majoring in 600 . List students ' first name and last name .",
            "sql": "select student.fname , student.lname where student.age > value and student.major != value and student.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "restaurant_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many restaurant is the Sandwich type restaurant?",
        "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
    },
    "interaction": [
        {
            "utterance": "How many types of restaurant have the name `` Sandwich '' ?",
            "sql": "select count ( restaurant_type.* ) where restaurant_type.restypename = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 0,
    "final": {
        "utterance": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
    },
    "interaction": [
        {
            "utterance": "What is the start and end dates of all policies ?",
            "sql": "select policies.start_date , policies.end_date"
        },
        {
            "utterance": "For the policies of `` Dayana Robel '' ?",
            "sql": "select policies.start_date , policies.end_date where customers.customer_details = value"
        },
        {
            "utterance": "What about the policy type code instead .",
            "sql": "select policies.policy_type_code where customers.customer_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 1,
    "final": {
        "utterance": "Which type of policy is most frequently used? Give me the policy type code.",
        "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the policy type codes ?",
            "sql": "select policies.policy_type_code"
        },
        {
            "utterance": "What are the least frequent ones ?",
            "sql": "select policies.policy_type_code group_by policies.policy_type_code order_by count ( policies.* ) asc limit_value"
        },
        {
            "utterance": "Most frequent ?",
            "sql": "select policies.policy_type_code group_by policies.policy_type_code order_by count ( policies.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 2,
    "final": {
        "utterance": "Find all the policy types that are used by more than 2 customers.",
        "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "What are the policies ?",
            "sql": "select policies.*"
        },
        {
            "utterance": "Which ones have been used only once ?",
            "sql": "select policies.policy_type_code group_by policies.policy_type_code having count ( policies.* ) = value"
        },
        {
            "utterance": "How about more than twice ?",
            "sql": "select policies.policy_type_code group_by policies.policy_type_code having count ( policies.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the total and average amount paid in claim headers.",
        "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"
    },
    "interaction": [
        {
            "utterance": "What are the claim type codes in the claim headers ?",
            "sql": "select claim_headers.claim_type_code"
        },
        {
            "utterance": "The amounts paid ?",
            "sql": "select claim_headers.amount_piad"
        },
        {
            "utterance": "What is the sum of that ?",
            "sql": "select sum ( claim_headers.amount_piad )"
        },
        {
            "utterance": "Show the average as well .",
            "sql": "select sum ( claim_headers.amount_piad ) , avg ( claim_headers.amount_piad )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the total amount claimed in the most recently created document.",
        "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    "interaction": [
        {
            "utterance": "What are the claim documents ?",
            "sql": "select claims_documents.*"
        },
        {
            "utterance": "Which was created most recently ?",
            "sql": "select claims_documents.* where claims_documents.created_date = ( select claims_documents.created_date order_by claims_documents.created_date limit_value )"
        },
        {
            "utterance": "Show the claim headers for this as well .",
            "sql": "select claims_documents.* where claims_documents.created_date = ( select claims_documents.created_date order_by claims_documents.created_date limit_value )"
        },
        {
            "utterance": "What is the total claim amount for these ?",
            "sql": "select sum ( claim_headers.amount_claimed ) where claims_documents.created_date = ( select claims_documents.created_date order_by claims_documents.created_date limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"
    },
    "interaction": [
        {
            "utterance": "What was the smallest policy amount paid ?",
            "sql": "select min ( claim_headers.amount_piad )"
        },
        {
            "utterance": "Claim amount instead ?",
            "sql": "select min ( claim_headers.amount_claimed )"
        },
        {
            "utterance": "Which was the policy for this ?",
            "sql": "select claim_headers.* where claim_headers.amount_claimed = ( select min ( claim_headers.amount_claimed ) )"
        },
        {
            "utterance": "For the largest claim amount instead ?",
            "sql": "select claim_headers.* where claim_headers.amount_claimed = ( select max ( claim_headers.amount_claimed ) )"
        },
        {
            "utterance": "Which customer owns this policy ?",
            "sql": "select customers.customer_details where claim_headers.amount_claimed = ( select max ( claim_headers.amount_claimed ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"
    },
    "interaction": [
        {
            "utterance": "What is the largest claim amount ?",
            "sql": "select max ( claim_headers.amount_claimed )"
        },
        {
            "utterance": "What was the policy for this ?",
            "sql": "select claim_headers.* where claim_headers.amount_claimed = ( select max ( claim_headers.amount_claimed ) )"
        },
        {
            "utterance": "What about for the smallest payment amount instead ?",
            "sql": "select claim_headers.* where claim_headers.amount_piad = ( select min ( claim_headers.amount_piad ) )"
        },
        {
            "utterance": "Who owned this policy ?",
            "sql": "select customers.customer_details where claim_headers.amount_piad = ( select min ( claim_headers.amount_piad ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the names of customers who have no policies associated.",
        "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    "interaction": [
        {
            "utterance": "Who are the customers ?",
            "sql": "select customers.customer_details"
        },
        {
            "utterance": "What are their policies ?",
            "sql": "select *"
        },
        {
            "utterance": "Who does n't have policies ?",
            "sql": "select customers.customer_details except select customers.customer_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the claim processing stage that most of the claims are on?",
        "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the least frequent claim outcome ?",
            "sql": "select claims_processing.claim_outcome_code group_by claims_processing.claim_outcome_code order_by count ( claims_processing.claim_outcome_code ) asc limit_value"
        },
        {
            "utterance": "Most frequent ?",
            "sql": "select claims_processing.claim_outcome_code group_by claims_processing.claim_outcome_code order_by count ( claims_processing.claim_outcome_code ) desc limit_value"
        },
        {
            "utterance": "Show for claim status instead .",
            "sql": "select claims_processing_stages.claim_status_name group_by claims_processing.claim_stage_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of customers whose name contains \"Diana\".",
        "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    "interaction": [
        {
            "utterance": "Who are the customers ?",
            "sql": "select customers.*"
        },
        {
            "utterance": "Only show their names .",
            "sql": "select customers.customer_details"
        },
        {
            "utterance": "Of these , which one contain `` III ''",
            "sql": "select customers.customer_details where customers.customer_details like value"
        },
        {
            "utterance": "Containing `` Diana '' instead ?",
            "sql": "select customers.customer_details where customers.customer_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the names of the customers who have an deputy policy.",
        "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""
    },
    "interaction": [
        {
            "utterance": "What are all the start and end dates of the policies ?",
            "sql": "select policies.start_date , policies.end_date"
        },
        {
            "utterance": "Give me the policy types instead .",
            "sql": "select policies.policy_type_code"
        },
        {
            "utterance": "Just the deputy policies .",
            "sql": "select policies.policy_type_code where policies.policy_type_code = value"
        },
        {
            "utterance": "Which customers have this policy ? Give their names .",
            "sql": "select distinct customers.customer_details where policies.policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniformed\""
    },
    "interaction": [
        {
            "utterance": "What are the policies of each customer ? Give the names and policy type codes .",
            "sql": "select customers.customer_details , policies.policy_type_code"
        },
        {
            "utterance": "Of these , show only those with jurisdiction policies .",
            "sql": "select customers.customer_details , policies.policy_type_code where policies.policy_type_code = value"
        },
        {
            "utterance": "How about either deputy policy or uniformed policy ?",
            "sql": "select customers.customer_details , policies.policy_type_code where policies.policy_type_code = value or policies.policy_type_code = value"
        },
        {
            "utterance": "Now show just the unique names for these .",
            "sql": "select distinct customers.customer_details where policies.policy_type_code = value or policies.policy_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the names of all the customers and staff members.",
        "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    "interaction": [
        {
            "utterance": "Who are the staff members ?",
            "sql": "select staff.staff_details"
        },
        {
            "utterance": "Customers ?",
            "sql": "select customers.customer_details"
        },
        {
            "utterance": "Who are both customers and staff ?",
            "sql": "select customers.customer_details intersect select staff.staff_details"
        },
        {
            "utterance": "How about either of them ?",
            "sql": "select customers.customer_details union select staff.staff_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "insurance_and_eClaims",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the name of the customer that has been involved in the most policies.",
        "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are the customers ?",
            "sql": "select customers.customer_details"
        },
        {
            "utterance": "Which customers have more than 1 policy ?",
            "sql": "select customers.customer_details group_by customers.customer_details having count ( * ) > value"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select customers.customer_details group_by customers.customer_details order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
    },
    "interaction": [
        {
            "utterance": "How many total passengers are in any airport with the word London in its name ?",
            "sql": "select sum ( airport.total_passengers ) where airport.airport_name like value"
        },
        {
            "utterance": "How many International ?",
            "sql": "select sum ( airport.international_passengers ) where airport.airport_name like value"
        },
        {
            "utterance": "How about Transit ?",
            "sql": "select sum ( airport.transit_passengers ) where airport.airport_name like value"
        },
        {
            "utterance": "How about Domestic ?",
            "sql": "select sum ( airport.domestic_passengers ) where airport.airport_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the maximum and minimum number of transit passengers of all airports.",
        "sql": "SELECT max(Transit_Passengers), min(Transit_Passengers) FROM airport"
    },
    "interaction": [
        {
            "utterance": "How many transit passengers does each airport have ?",
            "sql": "select airport.airport_id , airport.transit_passengers"
        },
        {
            "utterance": "What is the average number ?",
            "sql": "select avg ( airport.transit_passengers )"
        },
        {
            "utterance": "How about the maximum ?",
            "sql": "select max ( airport.transit_passengers )"
        },
        {
            "utterance": "Please , show the minimum as well .",
            "sql": "select max ( airport.transit_passengers ) , min ( airport.transit_passengers )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 2,
    "final": {
        "utterance": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC"
    },
    "interaction": [
        {
            "utterance": "Show all the pilot names and ages ?",
            "sql": "select pilot.name , pilot.age"
        },
        {
            "utterance": "What are the names that are older younger than 50 ?",
            "sql": "select pilot.name where pilot.age < = value"
        },
        {
            "utterance": "How about 30 or younger ?",
            "sql": "select pilot.name where pilot.age < = value"
        },
        {
            "utterance": "Sort them in reverse alphabetical order ?",
            "sql": "select pilot.name where pilot.age < = value order_by pilot.name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 3,
    "final": {
        "utterance": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    "interaction": [
        {
            "utterance": "Is there an airport with the name `` London Gatwick '' ?",
            "sql": "select airport.* where airport.airport_name = value"
        },
        {
            "utterance": "How many aircrafts movements happen at this airport ?",
            "sql": "select airport.aircraft_movements where airport.airport_name = value"
        },
        {
            "utterance": "Also , how many aircrafts is the airport associated with ?",
            "sql": "select count ( * ) where airport.airport_name = value"
        },
        {
            "utterance": "What is its name ?",
            "sql": "select aircraft.aircraft where airport.airport_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 4,
    "final": {
        "utterance": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000"
    },
    "interaction": [
        {
            "utterance": "Show me a list of all the different airports !",
            "sql": "select airport.*"
        },
        {
            "utterance": "What ones have more than 10000000 total passengers ?",
            "sql": "select airport.* where airport.total_passengers > value"
        },
        {
            "utterance": "Show all the aircrafts associated with each of these airports .",
            "sql": "select * where airport.total_passengers > value"
        },
        {
            "utterance": "Show only the names and descriptions .",
            "sql": "select aircraft.aircraft , aircraft.description where airport.total_passengers > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
        "sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\""
    },
    "interaction": [
        {
            "utterance": "Tell me more information about the aircraft called `` Robinson R-22 '' !",
            "sql": "select aircraft.* where aircraft.aircraft = value"
        },
        {
            "utterance": "How many airports use this aircraft ?",
            "sql": "select * where aircraft.aircraft = value"
        },
        {
            "utterance": "What are their names , and total passengers ?",
            "sql": "select airport.airport_name , airport.total_passengers where aircraft.aircraft = value"
        },
        {
            "utterance": "What is the average total number passengers ?",
            "sql": "select avg ( airport.total_passengers ) where aircraft.aircraft = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 6,
    "final": {
        "utterance": "List the name of the aircraft that has been named winning aircraft the most number of times.",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the winning pilots ?",
            "sql": "select pilot.name"
        },
        {
            "utterance": "What are the names of the aircrafts that they used ?",
            "sql": "select pilot.name , aircraft.aircraft"
        },
        {
            "utterance": "What one of the aircrafts won the most ?",
            "sql": "select aircraft.aircraft group_by match.winning_aircraft order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of aircrafts and the number of times it won matches.",
        "sql": "SELECT T1.Aircraft,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft"
    },
    "interaction": [
        {
            "utterance": "How many aircrafts are there ?",
            "sql": "select count ( aircraft.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select aircraft.aircraft"
        },
        {
            "utterance": "Which ones have won ?",
            "sql": "select aircraft.aircraft"
        },
        {
            "utterance": "How any times have each won ?",
            "sql": "select aircraft.aircraft , count ( * ) group_by match.winning_aircraft"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of aircrafts and that won matches at least twice.",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many matches have taken place ?",
            "sql": "select count ( match.* )"
        },
        {
            "utterance": "How many of them have been won by the same aircraft ?",
            "sql": "select count ( * ) ( select aircraft.aircraft , count ( * ) group_by match.winning_aircraft having count ( * ) > value )"
        },
        {
            "utterance": "Which aircrafts ?",
            "sql": "select aircraft.aircraft group_by match.winning_aircraft having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 9,
    "final": {
        "utterance": "List the names of aircrafts and that did not win any match.",
        "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)"
    },
    "interaction": [
        {
            "utterance": "What are all the aircraft names ?",
            "sql": "select aircraft.aircraft"
        },
        {
            "utterance": "How many matches have each won ?",
            "sql": "select aircraft.aircraft , count ( * ) group_by match.winning_aircraft"
        },
        {
            "utterance": "How about those that have not won any matches ?",
            "sql": "select aircraft.aircraft where aircraft.aircraft_id not in ( select match.winning_aircraft )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""
    },
    "interaction": [
        {
            "utterance": "What airports have `` London '' in its name ?",
            "sql": "select airport.airport_name where airport.airport_name like value"
        },
        {
            "utterance": "What aircraft names are associated with these airports ?",
            "sql": "select aircraft.aircraft where airport.airport_name like value"
        },
        {
            "utterance": "Which ones are associated with an airport with `` London Heathrow ''",
            "sql": "select aircraft.aircraft where airport.airport_name = value"
        },
        {
            "utterance": "Which of these aircrafts are also associated with an airport named `` London Gatwick ''",
            "sql": "select aircraft.aircraft where airport.airport_name = value intersect select aircraft.aircraft where airport.airport_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all information on the airport that has the largest number of international passengers.",
        "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the number of international passengers per airport ?",
            "sql": "select airport.airport_id , airport.international_passengers"
        },
        {
            "utterance": "What are all the airport details with the minimum ?",
            "sql": "select airport.* order_by airport.international_passengers asc limit_value"
        },
        {
            "utterance": "With the maximum ?",
            "sql": "select airport.* order_by airport.international_passengers desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 12,
    "final": {
        "utterance": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "sql": "SELECT t1.name,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many pilots are under 30 ?",
            "sql": "select count ( pilot.* ) where pilot.age < value"
        },
        {
            "utterance": "What are their names and ages ?",
            "sql": "select pilot.name , pilot.age where pilot.age < value"
        },
        {
            "utterance": "How many times have they each won ?",
            "sql": "select pilot.name , pilot.age , count ( * ) group_by match.winning_pilot"
        },
        {
            "utterance": "Show me the name and age of the one that has won the most times .",
            "sql": "select pilot.name , pilot.age where pilot.age < value group_by match.winning_pilot order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "aircraft",
    "interaction_id": 13,
    "final": {
        "utterance": "what is the name and age of the youngest winning pilot?",
        "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the information for all the pilots !",
            "sql": "select pilot.*"
        },
        {
            "utterance": "Show me only the winning-pilots !",
            "sql": "select *"
        },
        {
            "utterance": "What is the name and age of the oldest one ?",
            "sql": "select pilot.name , pilot.age order_by pilot.age desc limit_value"
        },
        {
            "utterance": "How about the youngest one ?",
            "sql": "select pilot.name , pilot.age order_by pilot.age asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all account ids and account details.",
        "sql": "SELECT account_id ,  account_details FROM Accounts"
    },
    "interaction": [
        {
            "utterance": "Show all account information .",
            "sql": "select accounts.*"
        },
        {
            "utterance": "Show the ids for them .",
            "sql": "select accounts.account_id"
        },
        {
            "utterance": "Also show the account details .",
            "sql": "select accounts.account_id , accounts.account_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 1,
    "final": {
        "utterance": "How many statements do we have?",
        "sql": "SELECT count(*) FROM Statements"
    },
    "interaction": [
        {
            "utterance": "Show the info for all statements .",
            "sql": "select statements.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( statements.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 2,
    "final": {
        "utterance": "List all statement ids and statement details.",
        "sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements"
    },
    "interaction": [
        {
            "utterance": "Show info for all statements .",
            "sql": "select statements.*"
        },
        {
            "utterance": "Show their ids and statement details .",
            "sql": "select statements.statement_id , statements.statement_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 3,
    "final": {
        "utterance": "Show statement id, statement detail, account detail for accounts.",
        "sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id"
    },
    "interaction": [
        {
            "utterance": "Show the details of each account .",
            "sql": "select accounts.account_details"
        },
        {
            "utterance": "Also show the statement ids and statement details for them .",
            "sql": "select accounts.statement_id , statements.statement_details , accounts.account_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all statement id and the number of accounts for each statement.",
        "sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID"
    },
    "interaction": [
        {
            "utterance": "Show the statement ids from all accounts .",
            "sql": "select accounts.statement_id"
        },
        {
            "utterance": "For each of them , also show the number of accounts .",
            "sql": "select accounts.statement_id , count ( accounts.* ) group_by accounts.statement_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the ids and details for statments .",
            "sql": "select statements.statement_id , statements.statement_details"
        },
        {
            "utterance": "For each of them , also show the number of accounts .",
            "sql": "select accounts.statement_id , statements.statement_details , count ( * ) group_by accounts.statement_id"
        },
        {
            "utterance": "Sort the results in the descending order of the number of accounts .",
            "sql": "select accounts.statement_id , statements.statement_details group_by accounts.statement_id order_by count ( * ) desc"
        },
        {
            "utterance": "Show the id and details for the statment with the most accounts .",
            "sql": "select accounts.statement_id , statements.statement_details group_by accounts.statement_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the number of documents.",
        "sql": "SELECT count(*) FROM Documents"
    },
    "interaction": [
        {
            "utterance": "Show information for all documents .",
            "sql": "select documents.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( documents.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 7,
    "final": {
        "utterance": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'"
    },
    "interaction": [
        {
            "utterance": "List the type codes , names , and descriptions for all documents .",
            "sql": "select documents.document_type_code , documents.document_name , documents.document_description"
        },
        {
            "utterance": "How about for the document named 'Noel CV ' .",
            "sql": "select documents.document_type_code , documents.document_name , documents.document_description where documents.document_name = value"
        },
        {
            "utterance": "Also include results for the document named 'King Book ' .",
            "sql": "select documents.document_type_code , documents.document_name , documents.document_description where documents.document_name = value or documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the ids and names of all documents.",
        "sql": "SELECT document_id ,  document_name FROM Documents"
    },
    "interaction": [
        {
            "utterance": "Show all information for documents .",
            "sql": "select documents.*"
        },
        {
            "utterance": "Show just the ids .",
            "sql": "select documents.document_id"
        },
        {
            "utterance": "Also show their names .",
            "sql": "select documents.document_id , documents.document_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 9,
    "final": {
        "utterance": "Find names and ids of all documents with document type code BK.",
        "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\""
    },
    "interaction": [
        {
            "utterance": "Show all document names .",
            "sql": "select documents.document_name"
        },
        {
            "utterance": "What are the names for the documents with type code BK ?",
            "sql": "select documents.document_name where documents.document_type_code = value"
        },
        {
            "utterance": "Also find their ids .",
            "sql": "select documents.document_name , documents.document_id where documents.document_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 10,
    "final": {
        "utterance": "How many documents are with document type code BK for each product id?",
        "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id"
    },
    "interaction": [
        {
            "utterance": "Show the project id for documents .",
            "sql": "select documents.project_id"
        },
        {
            "utterance": "Show the ids only for the documents with type code BK .",
            "sql": "select documents.project_id where documents.document_type_code = value"
        },
        {
            "utterance": "For each project id , show the number of such documents .",
            "sql": "select count ( documents.* ) , documents.project_id where documents.document_type_code = value group_by documents.project_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
    },
    "interaction": [
        {
            "utterance": "Show the name and date for all documents .",
            "sql": "select documents.document_name , documents.document_date"
        },
        {
            "utterance": "For those documents , also show their project details .",
            "sql": "select documents.document_name , documents.document_date , projects.project_details"
        },
        {
            "utterance": "What are the names and dates for documents with 'Graph Database project ' as their details ?",
            "sql": "select documents.document_name , documents.document_date where projects.project_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 12,
    "final": {
        "utterance": "Show project ids and the number of documents in each project.",
        "sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id"
    },
    "interaction": [
        {
            "utterance": "Show the project id for the documents .",
            "sql": "select documents.project_id"
        },
        {
            "utterance": "For each of id , count the number of documents .",
            "sql": "select documents.project_id , count ( documents.* ) group_by documents.project_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the id of the project with least number of documents?",
        "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the project id for all documents .",
            "sql": "select documents.project_id"
        },
        {
            "utterance": "For each of them , count the number of documents .",
            "sql": "select documents.project_id , count ( documents.* ) group_by documents.project_id"
        },
        {
            "utterance": "Sort the ids by these counts .",
            "sql": "select documents.project_id group_by documents.project_id order_by count ( documents.* )"
        },
        {
            "utterance": "Which project id has the fewest ?",
            "sql": "select documents.project_id group_by documents.project_id order_by count ( documents.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the ids for projects with at least 2 documents.",
        "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the project ids for documents .",
            "sql": "select documents.project_id"
        },
        {
            "utterance": "For each of them , also show the number of documents .",
            "sql": "select documents.project_id , count ( documents.* ) group_by documents.project_id"
        },
        {
            "utterance": "Which of them have at least 2 documents ?",
            "sql": "select documents.project_id group_by documents.project_id having count ( documents.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 15,
    "final": {
        "utterance": "List document type codes and the number of documents in each code.",
        "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code"
    },
    "interaction": [
        {
            "utterance": "Show the type code for all documents .",
            "sql": "select documents.document_type_code"
        },
        {
            "utterance": "For each of these codes , also show the number of documents .",
            "sql": "select documents.document_type_code , count ( documents.* ) group_by documents.document_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the document type code with most number of documents?",
        "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the type codes for all documents .",
            "sql": "select documents.document_type_code"
        },
        {
            "utterance": "For each of the codes , count the number of documents .",
            "sql": "select documents.document_type_code , count ( documents.* ) group_by documents.document_type_code"
        },
        {
            "utterance": "Which code has the most documents ?",
            "sql": "select documents.document_type_code group_by documents.document_type_code order_by count ( documents.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the document type code with fewer than 3 documents.",
        "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3"
    },
    "interaction": [
        {
            "utterance": "Show the type code for all documents .",
            "sql": "select documents.document_type_code"
        },
        {
            "utterance": "For each of the codes , also count the number of documents .",
            "sql": "select documents.document_type_code , count ( documents.* ) group_by documents.document_type_code"
        },
        {
            "utterance": "Which codes have fewer than 3 documents ?",
            "sql": "select documents.document_type_code group_by documents.document_type_code having count ( documents.* ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"
    },
    "interaction": [
        {
            "utterance": "Show the details for all statements .",
            "sql": "select statements.statement_details"
        },
        {
            "utterance": "Also show their corresponding document names .",
            "sql": "select statements.statement_details , documents.document_name"
        },
        {
            "utterance": "Only show the results for the statement with detail 'Private Project ' .",
            "sql": "select statements.statement_details , documents.document_name where statements.statement_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 19,
    "final": {
        "utterance": "Show all document type codes, document type names, document type descriptions.",
        "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types"
    },
    "interaction": [
        {
            "utterance": "Show the type codes for all documents .",
            "sql": "select ref_document_types.document_type_code"
        },
        {
            "utterance": "Also show the document type names and descriptions .",
            "sql": "select ref_document_types.document_type_code , ref_document_types.document_type_name , ref_document_types.document_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the document type description for document type named Film?",
        "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\""
    },
    "interaction": [
        {
            "utterance": "Show the descriptions for all document types .",
            "sql": "select ref_document_types.document_type_description"
        },
        {
            "utterance": "Only show the result for the document type `` Film '' .",
            "sql": "select ref_document_types.document_type_description where ref_document_types.document_type_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the document type name and the document type description and creation date for all the documents?",
        "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the creation dates for all documents ?",
            "sql": "select documents.document_date"
        },
        {
            "utterance": "Also show their document type names and descriptions .",
            "sql": "select ref_document_types.document_type_name , ref_document_types.document_type_description , documents.document_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the number of projects.",
        "sql": "SELECT count(*) FROM Projects"
    },
    "interaction": [
        {
            "utterance": "Show the information for all projects .",
            "sql": "select projects.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( projects.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 23,
    "final": {
        "utterance": "List ids and details for all projects.",
        "sql": "SELECT project_id ,  project_details FROM Projects"
    },
    "interaction": [
        {
            "utterance": "Show the id for all projects .",
            "sql": "select projects.project_id"
        },
        {
            "utterance": "Also show their details .",
            "sql": "select projects.project_id , projects.project_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the project id and detail for the project with at least two documents?",
        "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show the ids and details for all projects .",
            "sql": "select projects.project_id , projects.project_details"
        },
        {
            "utterance": "For each of them , also show the number of documents .",
            "sql": "select projects.project_id , projects.project_details , count ( * ) group_by projects.project_id"
        },
        {
            "utterance": "Which of them have at least two documents ?",
            "sql": "select projects.project_id , projects.project_details group_by projects.project_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the project detail for the project with document \"King Book\"?",
        "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\""
    },
    "interaction": [
        {
            "utterance": "What are all the details from projects ?",
            "sql": "select projects.project_details"
        },
        {
            "utterance": "Also show the document names corresponding to the projects .",
            "sql": "select projects.project_details , documents.document_name"
        },
        {
            "utterance": "Show those details only for projects with a document named `` King Book '' .",
            "sql": "select projects.project_details where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 26,
    "final": {
        "utterance": "How many budget types do we have?",
        "sql": "SELECT count(*) FROM Ref_budget_codes"
    },
    "interaction": [
        {
            "utterance": "Show the information for budget codes .",
            "sql": "select ref_budget_codes.*"
        },
        {
            "utterance": "How many of them do we have ?",
            "sql": "select count ( ref_budget_codes.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 27,
    "final": {
        "utterance": "List all budget type codes and descriptions.",
        "sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
    },
    "interaction": [
        {
            "utterance": "List all budget type codes .",
            "sql": "select ref_budget_codes.budget_type_code"
        },
        {
            "utterance": "Add their descriptions .",
            "sql": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 28,
    "final": {
        "utterance": "What is the description for the budget type with code ORG?",
        "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\""
    },
    "interaction": [
        {
            "utterance": "What are the descriptions for the budget codes ?",
            "sql": "select ref_budget_codes.budget_type_description"
        },
        {
            "utterance": "How about the description for the budget with code ORG ?",
            "sql": "select ref_budget_codes.budget_type_description where ref_budget_codes.budget_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 29,
    "final": {
        "utterance": "How many documents have expenses?",
        "sql": "SELECT count(*) FROM Documents_with_expenses"
    },
    "interaction": [
        {
            "utterance": "Show information for all documents with expenses .",
            "sql": "select documents_with_expenses.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( documents_with_expenses.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the document ids for the budget type code 'SF'?",
        "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'"
    },
    "interaction": [
        {
            "utterance": "Show the ids for documents with expenses .",
            "sql": "select documents_with_expenses.document_id"
        },
        {
            "utterance": "Also show their budget type code .",
            "sql": "select documents_with_expenses.document_id , documents_with_expenses.budget_type_code"
        },
        {
            "utterance": "What is the id for the documents with the budget type code 'SF ' ?",
            "sql": "select documents_with_expenses.document_id where documents_with_expenses.budget_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 31,
    "final": {
        "utterance": "Show the budget type code and description and the corresponding document id.",
        "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code"
    },
    "interaction": [
        {
            "utterance": "Show the budget type code and description for all budget types .",
            "sql": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description"
        },
        {
            "utterance": "Also show the corresponding document ids for them .",
            "sql": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description , documents_with_expenses.document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 32,
    "final": {
        "utterance": "Show ids for all documents with budget types described as 'Government'.",
        "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\""
    },
    "interaction": [
        {
            "utterance": "Show ids for all documents .",
            "sql": "select documents_with_expenses.document_id"
        },
        {
            "utterance": "Also show their budget type descriptions .",
            "sql": "select documents_with_expenses.document_id , ref_budget_codes.budget_type_description"
        },
        {
            "utterance": "Show ids for those documents with budget types described as 'Government ' .",
            "sql": "select documents_with_expenses.document_id where ref_budget_codes.budget_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 33,
    "final": {
        "utterance": "Show budget type codes and the number of documents in each budget type.",
        "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all the budget type codes for documents with expenses .",
            "sql": "select documents_with_expenses.budget_type_code"
        },
        {
            "utterance": "For each code , show the number of corresponding documents .",
            "sql": "select documents_with_expenses.budget_type_code , count ( documents_with_expenses.* ) group_by documents_with_expenses.budget_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the budget type code with most number of documents.",
        "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the budget type codes for documents with expenses .",
            "sql": "select documents_with_expenses.budget_type_code"
        },
        {
            "utterance": "For each code , show the number of documents .",
            "sql": "select documents_with_expenses.budget_type_code , count ( documents_with_expenses.* ) group_by documents_with_expenses.budget_type_code"
        },
        {
            "utterance": "Sort the codes in descending order of the count .",
            "sql": "select documents_with_expenses.budget_type_code group_by documents_with_expenses.budget_type_code order_by count ( documents_with_expenses.* ) desc"
        },
        {
            "utterance": "Which has the most ?",
            "sql": "select documents_with_expenses.budget_type_code group_by documents_with_expenses.budget_type_code order_by count ( documents_with_expenses.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the ids of documents which don't have expense budgets?",
        "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses"
    },
    "interaction": [
        {
            "utterance": "Show document ids with an expense budget .",
            "sql": "select documents_with_expenses.document_id"
        },
        {
            "utterance": "Show all document ids .",
            "sql": "select documents.document_id"
        },
        {
            "utterance": "Among them , which documents do n't have expense budgets ?",
            "sql": "select documents.document_id except select documents_with_expenses.document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 36,
    "final": {
        "utterance": "Show ids for all documents in type CV without expense budgets.",
        "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"
    },
    "interaction": [
        {
            "utterance": "Show all document ids with an expense budget .",
            "sql": "select documents_with_expenses.document_id"
        },
        {
            "utterance": "Show ids for all documents in type CV .",
            "sql": "select documents.document_id where documents.document_type_code = value"
        },
        {
            "utterance": "Which of them do n't have expense budgets ?",
            "sql": "select documents.document_id where documents.document_type_code = value except select documents_with_expenses.document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"
    },
    "interaction": [
        {
            "utterance": "Show ids for all documents .",
            "sql": "select documents.document_id"
        },
        {
            "utterance": "How about those with the letter 's ' in the name ?",
            "sql": "select documents.document_id where documents.document_name like value"
        },
        {
            "utterance": "Which of them have any expense budgets .",
            "sql": "select documents.document_id where documents.document_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 38,
    "final": {
        "utterance": "How many documents do not have any expense?",
        "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
    },
    "interaction": [
        {
            "utterance": "Show the ids of documents with expenses .",
            "sql": "select documents_with_expenses.document_id"
        },
        {
            "utterance": "Show ids for those which do n't .",
            "sql": "select documents.document_id where documents.document_id not in ( select documents_with_expenses.document_id )"
        },
        {
            "utterance": "How many of such documents are there ?",
            "sql": "select count ( documents.* ) where documents.document_id not in ( select documents_with_expenses.document_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Docs_and_Epenses",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'"
    },
    "interaction": [
        {
            "utterance": "What are the dates of all documents ?",
            "sql": "select documents.document_date"
        },
        {
            "utterance": "What about those with 'GV ' type expenses ?",
            "sql": "select documents.document_date where documents_with_expenses.budget_type_code = value"
        },
        {
            "utterance": "What about those with 'SF ' type expenses ?",
            "sql": "select documents.document_date where documents_with_expenses.budget_type_code = value"
        },
        {
            "utterance": "Show the dates for the documents with both types .",
            "sql": "select documents.document_date where documents_with_expenses.budget_type_code = value intersect select documents.document_date where documents_with_expenses.budget_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the average, maximum and total revenues of all companies?",
        "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"
    },
    "interaction": [
        {
            "utterance": "show the name and revenue of all companies .",
            "sql": "select manufacturers.name , manufacturers.revenue"
        },
        {
            "utterance": "what is their average revenue ?",
            "sql": "select avg ( manufacturers.revenue )"
        },
        {
            "utterance": "please return maximum and total revenues too .",
            "sql": "select avg ( manufacturers.revenue ) , max ( manufacturers.revenue ) , sum ( manufacturers.revenue )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'"
    },
    "interaction": [
        {
            "utterance": "find the names of manufactures that are based in Tokyo .",
            "sql": "select manufacturers.name where manufacturers.headquarter = value"
        },
        {
            "utterance": "how about in Beijing ?",
            "sql": "select manufacturers.name where manufacturers.headquarter = value"
        },
        {
            "utterance": "what is the total number of companies based in these two places ?",
            "sql": "select count ( manufacturers.* ) where manufacturers.headquarter = value or manufacturers.headquarter = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the founder of the company whose name begins with the letter 'S'.",
        "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
    },
    "interaction": [
        {
            "utterance": "list the names of all manufacturers .",
            "sql": "select manufacturers.name"
        },
        {
            "utterance": "show the names of manufacturers that begin with the letter 'S ' .",
            "sql": "select manufacturers.name where manufacturers.name like value"
        },
        {
            "utterance": "who are their founders ?",
            "sql": "select manufacturers.founder where manufacturers.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
        "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'"
    },
    "interaction": [
        {
            "utterance": "find the names of companies whose main office is in Tokyo .",
            "sql": "select manufacturers.name where manufacturers.headquarter = value"
        },
        {
            "utterance": "What is the total revenue of these companies ?",
            "sql": "select sum ( manufacturers.revenue ) where manufacturers.headquarter = value"
        },
        {
            "utterance": "add the revenue of Taiwan companies too .",
            "sql": "select sum ( manufacturers.revenue ) where manufacturers.headquarter = value or manufacturers.headquarter = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name of product that is produced by both companies Creative Labs and Sony.",
        "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'"
    },
    "interaction": [
        {
            "utterance": "list the names of all of the products .",
            "sql": "select products.name"
        },
        {
            "utterance": "which products are produced by the company Creative Labs ?",
            "sql": "select products.name where manufacturers.name = value"
        },
        {
            "utterance": "among them , find the products that Sony also produces .",
            "sql": "select products.name where manufacturers.name = value intersect select products.name where manufacturers.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
        "sql": "SELECT name,  headquarter,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the name of the company that earned the least revenue .",
            "sql": "select manufacturers.name order_by manufacturers.revenue limit_value"
        },
        {
            "utterance": "show its headquarter location and founder too .",
            "sql": "select manufacturers.name , manufacturers.headquarter , manufacturers.founder order_by manufacturers.revenue limit_value"
        },
        {
            "utterance": "what is the info for the company with the highest revenue ?",
            "sql": "select manufacturers.name , manufacturers.headquarter , manufacturers.founder order_by manufacturers.revenue desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"
    },
    "interaction": [
        {
            "utterance": "how many companies are there ?",
            "sql": "select count ( manufacturers.* )"
        },
        {
            "utterance": "What is their average revenue ?",
            "sql": "select avg ( manufacturers.revenue )"
        },
        {
            "utterance": "Find the names of companies whose revenue is greater than the average .",
            "sql": "select manufacturers.name where manufacturers.revenue > ( select avg ( manufacturers.revenue ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "how many companies are based in Austin ?",
            "sql": "select count ( manufacturers.* ) where manufacturers.headquarter = value"
        },
        {
            "utterance": "show their revenues",
            "sql": "select manufacturers.revenue where manufacturers.headquarter = value"
        },
        {
            "utterance": "Find the names of companies whose revenue is smaller than all of those revenues .",
            "sql": "select manufacturers.name where manufacturers.revenue < ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"
    },
    "interaction": [
        {
            "utterance": "what are the names of the companies based in Austin ?",
            "sql": "select manufacturers.name where manufacturers.headquarter = value"
        },
        {
            "utterance": "find the names of companies whose revenue is larger than the largest revenue of those companies .",
            "sql": "select manufacturers.name where manufacturers.revenue > ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        },
        {
            "utterance": "return the total revenue of the resulting companies .",
            "sql": "select sum ( manufacturers.revenue ) where manufacturers.revenue > ( select min ( manufacturers.revenue ) where manufacturers.headquarter = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the average prices of all products from each manufacture, and list each company's name.",
        "sql": "SELECT avg(T1.price),  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "find the number of all products from each manufacture . list each company 's name .",
            "sql": "select count ( * ) , manufacturers.name group_by manufacturers.name"
        },
        {
            "utterance": "show the average price of each company\u2019s products .",
            "sql": "select avg ( products.price ) , manufacturers.name group_by manufacturers.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the number of different products that are produced by companies at different headquarter cities.",
        "sql": "SELECT count(DISTINCT T1.name),  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"
    },
    "interaction": [
        {
            "utterance": "how many different headquarter cities are there ?",
            "sql": "select count ( distinct manufacturers.headquarter )"
        },
        {
            "utterance": "Find the number of different products that are from companies at each headquarter .",
            "sql": "select count ( distinct products.name ) , manufacturers.headquarter group_by manufacturers.headquarter"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find number of products which Sony does not make.",
        "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"
    },
    "interaction": [
        {
            "utterance": "find the name of all products .",
            "sql": "select products.name"
        },
        {
            "utterance": "which of them does Sony make .",
            "sql": "select products.name where manufacturers.name = value"
        },
        {
            "utterance": "Find the number of products that Sony does not make .",
            "sql": "select count ( distinct products.name ) where products.name not in ( select products.name where manufacturers.name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of companies that do not make DVD drive.",
        "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'"
    },
    "interaction": [
        {
            "utterance": "Find the names of companies that produce DVD drives .",
            "sql": "select manufacturers.name where products.name = value"
        },
        {
            "utterance": "how about the companies that do not make them ?",
            "sql": "select manufacturers.name except select manufacturers.name where products.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the number of products for each manufacturer, showing the name of each company.",
        "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "how many products are in the record ?",
            "sql": "select count ( products.* )"
        },
        {
            "utterance": "find the number for each manufacturer , showing the name of each company .",
            "sql": "select count ( * ) , manufacturers.name group_by manufacturers.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Select the name and price of all products with a price larger than or equal to 180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "sql": "SELECT name,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"
    },
    "interaction": [
        {
            "utterance": "Select the name of all products .",
            "sql": "select products.name"
        },
        {
            "utterance": "which one is the most expensive ?",
            "sql": "select products.name order_by products.price desc limit_value"
        },
        {
            "utterance": "also show its price .",
            "sql": "select products.name , products.price order_by products.price desc limit_value"
        },
        {
            "utterance": "how about the products with a price larger than or equal to 180 ?",
            "sql": "select products.name , products.price where products.price > = value"
        },
        {
            "utterance": "sort the result by price ( in descending order ) .",
            "sql": "select products.name , products.price where products.price > = value order_by products.price desc"
        },
        {
            "utterance": "then order by name ( in ascending order ) .",
            "sql": "select products.name , products.price where products.price > = value order_by products.price desc , products.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Select the average price of each manufacturer's products, showing the manufacturer's name.",
        "sql": "SELECT avg(T1.Price),  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
    },
    "interaction": [
        {
            "utterance": "Show the names of all manufacturers .",
            "sql": "select manufacturers.name"
        },
        {
            "utterance": "how many products do each of them produce ?",
            "sql": "select count ( * ) , manufacturers.name group_by manufacturers.name"
        },
        {
            "utterance": "what are their average prices ?",
            "sql": "select avg ( products.price ) , manufacturers.name group_by manufacturers.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
    },
    "interaction": [
        {
            "utterance": "find the name of products with a price higher than or equal to $ 150 .",
            "sql": "select products.name where products.price > = value"
        },
        {
            "utterance": "what are the names of manufacturers that produce these products ?",
            "sql": "select distinct manufacturers.name where products.price > = value"
        },
        {
            "utterance": "Select the names of manufacturer whose products have an average price higher than or equal to $ 150 .",
            "sql": "select avg ( products.price ) , manufacturers.name group_by manufacturers.name having avg ( products.price ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "manufactory_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Select the name and price of the cheapest product.",
        "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the name of the most expensive product ?",
            "sql": "select products.name order_by products.price desc limit_value"
        },
        {
            "utterance": "how about the cheapest product ?",
            "sql": "select products.name order_by products.price asc limit_value"
        },
        {
            "utterance": "show its price as well .",
            "sql": "select products.name , products.price order_by products.price asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the name of the airports located in Cuba or Argentina.",
        "sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'"
    },
    "interaction": [
        {
            "utterance": "show all different countries that have airports in the record .",
            "sql": "select distinct airports.country"
        },
        {
            "utterance": "could you please list the names of airports in Cuba ?",
            "sql": "select airports.name where airports.country = value"
        },
        {
            "utterance": "also list Argentina 's airports .",
            "sql": "select airports.name where airports.country = value or airports.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the country of the airlines whose name starts with 'Orbit'.",
        "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'"
    },
    "interaction": [
        {
            "utterance": "what are all of the airline names ?",
            "sql": "select distinct airlines.name"
        },
        {
            "utterance": "which of them start with 'Orbit ' ?",
            "sql": "select distinct airlines.name where airlines.name like value"
        },
        {
            "utterance": "how many are there ?",
            "sql": "select count ( airlines.* ) where airlines.name like value"
        },
        {
            "utterance": "Find the country of these airlines .",
            "sql": "select distinct airlines.country where airlines.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 2,
    "final": {
        "utterance": "Which country is the airport that has the highest altitude located in?",
        "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many airports are there ?",
            "sql": "select count ( airports.* )"
        },
        {
            "utterance": "which airport has the lowest elevation ?",
            "sql": "select airports.* order_by airports.elevation limit_value"
        },
        {
            "utterance": "how about the one with the highest elevation ?",
            "sql": "select airports.* order_by airports.elevation desc limit_value"
        },
        {
            "utterance": "which country is it located in ?",
            "sql": "select airports.country order_by airports.elevation desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the number of airports whose name contain the word 'International'.",
        "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'"
    },
    "interaction": [
        {
            "utterance": "please show all airport names .",
            "sql": "select airports.name"
        },
        {
            "utterance": "what is the total number of airports ?",
            "sql": "select count ( airports.* )"
        },
        {
            "utterance": "among them , how many contain the word 'International ' in their name ?",
            "sql": "select count ( airports.* ) where airports.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the number of routes operated by American Airlines.",
        "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "what is the icao code for American Airlines ?",
            "sql": "select airlines.icao where airlines.name = value"
        },
        {
            "utterance": "which routes are operated by American Airlines ?",
            "sql": "select * where airlines.name = value"
        },
        {
            "utterance": "please count the number of routes .",
            "sql": "select count ( * ) where airlines.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the number of routes whose destination airports are in Canada.",
        "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"
    },
    "interaction": [
        {
            "utterance": "how many airports does each country have ?",
            "sql": "select count ( airports.* ) , airports.country group_by airports.country"
        },
        {
            "utterance": "how many does Canada have ?",
            "sql": "select count ( airports.* ) where airports.country = value"
        },
        {
            "utterance": "what is the total number of routes that end there ?",
            "sql": "select count ( * ) where airports.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name, city, and country of the airport that has the lowest altitude.",
        "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the lowest elevation of all airports ?",
            "sql": "select min ( airports.elevation )"
        },
        {
            "utterance": "what is the name of that airport ?",
            "sql": "select airports.name order_by airports.elevation limit_value"
        },
        {
            "utterance": "also show the city and country where it is located .",
            "sql": "select airports.name , airports.city , airports.country order_by airports.elevation limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name, city, and country of the airport that has the highest latitude.",
        "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the average elevation of all airports ?",
            "sql": "select avg ( airports.elevation )"
        },
        {
            "utterance": "order the airport info by latitude from highest to lowest .",
            "sql": "select airports.* order_by airports.elevation desc"
        },
        {
            "utterance": "just show name , city , and country of the highest one .",
            "sql": "select airports.name , airports.city , airports.country order_by airports.elevation desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the name and city of the airport which is the destination of the most number of routes.",
        "sql": "SELECT T1.name,  T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many routes are there ?",
            "sql": "select count ( routes.* )"
        },
        {
            "utterance": "find the number of routes for each destination .",
            "sql": "select count ( routes.* ) , routes.dst_apid group_by routes.dst_apid"
        },
        {
            "utterance": "what is the name and city of the destination airport that has the most routes ending there ?",
            "sql": "select airports.name , airports.city group_by routes.dst_apid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of the top 10 airlines that operate the most number of routes.",
        "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"
    },
    "interaction": [
        {
            "utterance": "Provide the names of all airlines .",
            "sql": "select airlines.name"
        },
        {
            "utterance": "Find the number of routes provided by each airline . Show airline name .",
            "sql": "select count ( * ) , airlines.name group_by airlines.name"
        },
        {
            "utterance": "which airline operates the most routes ?",
            "sql": "select airlines.name group_by routes.alid order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "what are the top 10 airlines ?",
            "sql": "select airlines.name group_by routes.alid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the name and city of the airport which is the source for the most number of flight routes.",
        "sql": "SELECT T1.name, T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name and city of all airports .",
            "sql": "select airports.name , airports.city"
        },
        {
            "utterance": "Show the number of flight routes for each of them as a source airport .",
            "sql": "select airports.name , airports.city , count ( * ) group_by routes.src_apid"
        },
        {
            "utterance": "which of them has the most routes ?",
            "sql": "select airports.name , airports.city group_by routes.src_apid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the number of different airports which are the destinations of the American Airlines.",
        "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "how many routes does American Airlines have ?",
            "sql": "select count ( * ) where airlines.name = value"
        },
        {
            "utterance": "How many destinations do these routes go to ?",
            "sql": "select count ( distinct routes.dst_apid ) where airlines.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 12,
    "final": {
        "utterance": "Which countries has the most number of airlines?",
        "sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many countries have airlines ?",
            "sql": "select count ( distinct airlines.country )"
        },
        {
            "utterance": "how many airlines does each country have ?",
            "sql": "select count ( airlines.* ) , airlines.country group_by airlines.country"
        },
        {
            "utterance": "show the one that has the most .",
            "sql": "select airlines.country group_by airlines.country order_by count ( airlines.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 13,
    "final": {
        "utterance": "Which countries has the most number of airlines whose active status is 'Y'?",
        "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the different active codes ?",
            "sql": "select distinct airlines.active"
        },
        {
            "utterance": "show the name of airlines whose active status is 'Y ' .",
            "sql": "select airlines.name where airlines.active = value"
        },
        {
            "utterance": "Which country has the largest number of these airlines ?",
            "sql": "select airlines.country where airlines.active = value group_by airlines.country order_by count ( airlines.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 14,
    "final": {
        "utterance": "List all countries and their number of airlines in the descending order of number of airlines.",
        "sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "List all countries and the number of airlines for each one .",
            "sql": "select airlines.country , count ( airlines.* ) group_by airlines.country"
        },
        {
            "utterance": "list them in ascending order of number of airlines .",
            "sql": "select airlines.country , count ( airlines.* ) group_by airlines.country order_by count ( airlines.* )"
        },
        {
            "utterance": "list in descending order .",
            "sql": "select airlines.country , count ( airlines.* ) group_by airlines.country order_by count ( airlines.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 15,
    "final": {
        "utterance": "How many airports are there per country? Order the countries by decreasing number of airports.",
        "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "how many airports are in the record ?",
            "sql": "select count ( airports.* )"
        },
        {
            "utterance": "how many airports are in each country ?",
            "sql": "select count ( airports.* ) , airports.country group_by airports.country"
        },
        {
            "utterance": "order them by number of airports in decreasing order .",
            "sql": "select count ( airports.* ) , airports.country group_by airports.country order_by count ( airports.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 16,
    "final": {
        "utterance": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "how many airports does the US has ?",
            "sql": "select count ( airports.* ) where airports.country = value"
        },
        {
            "utterance": "what is the number of airports in each city in the US ?",
            "sql": "select count ( airports.* ) , airports.city where airports.country = value group_by airports.city"
        },
        {
            "utterance": "Order the cities by decreasing number of airports .",
            "sql": "select count ( airports.* ) , airports.city where airports.country = value group_by airports.city order_by count ( airports.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 17,
    "final": {
        "utterance": "Return the cities with more than 3 airports in the United States.",
        "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"
    },
    "interaction": [
        {
            "utterance": "show all cities that have an airport .",
            "sql": "select airports.city"
        },
        {
            "utterance": "which of them are in the United States ?",
            "sql": "select airports.city where airports.country = value"
        },
        {
            "utterance": "just show cities that have more than 2 airports .",
            "sql": "select airports.city where airports.country = value group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "how about more than 3 ?",
            "sql": "select airports.city where airports.country = value group_by airports.city having count ( airports.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 18,
    "final": {
        "utterance": "How many cities are there that have more than 3 airports?",
        "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)"
    },
    "interaction": [
        {
            "utterance": "which cities have more than 3 airports ?",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "how many are there ?",
            "sql": "select count ( airports.* ) ( select airports.city group_by airports.city having count ( airports.* ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 19,
    "final": {
        "utterance": "List the cities which have more than one airport and number of airports.",
        "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "list all cities .",
            "sql": "select airports.city"
        },
        {
            "utterance": "how many airports does each city have ?",
            "sql": "select airports.city , count ( airports.* ) group_by airports.city"
        },
        {
            "utterance": "just show cities that have more than one airport .",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "include the number of airports per city .",
            "sql": "select airports.city , count ( airports.* ) group_by airports.city having count ( airports.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 20,
    "final": {
        "utterance": "List the cities which have more than 2 airports sorted by the number of airports.",
        "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
    },
    "interaction": [
        {
            "utterance": "how many cities have more than 2 airports ?",
            "sql": "select count ( airports.* ) ( select airports.city group_by airports.city having count ( airports.* ) > value )"
        },
        {
            "utterance": "what are these cities ?",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "sort the results by the number of airports .",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > value order_by count ( airports.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the number of routes for each source airport and the airport name.",
        "sql": "SELECT count(*),  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
    },
    "interaction": [
        {
            "utterance": "list the names of all airports .",
            "sql": "select airports.name"
        },
        {
            "utterance": "also list the number of routes that list them as the source airport .",
            "sql": "select count ( * ) , airports.name group_by airports.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
        "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"
    },
    "interaction": [
        {
            "utterance": "how many routes are there ?",
            "sql": "select count ( routes.* )"
        },
        {
            "utterance": "what are their source airports ? List airport names .",
            "sql": "select airports.name"
        },
        {
            "utterance": "For each of those airports , how many routes does it have ?",
            "sql": "select count ( * ) , airports.name group_by airports.name"
        },
        {
            "utterance": "order the result by decreasing number of routes",
            "sql": "select count ( * ) , airports.name group_by airports.name order_by count ( * ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the cities which have exactly two airports.",
        "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
    },
    "interaction": [
        {
            "utterance": "which cities have more than one airport ?",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) > value"
        },
        {
            "utterance": "ok , which of them have exactly two ?",
            "sql": "select airports.city group_by airports.city having count ( airports.* ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 24,
    "final": {
        "utterance": "For each country and airline name, how many routes are there?",
        "sql": "SELECT T1.country,  T1.name,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country,  T1.name"
    },
    "interaction": [
        {
            "utterance": "how many routes are there ?",
            "sql": "select count ( routes.* )"
        },
        {
            "utterance": "please list the number of routes for each country and airline .",
            "sql": "select airlines.country , airlines.name , count ( * ) group_by airlines.country , airlines.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the number of routes with destination airports in Italy.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
    },
    "interaction": [
        {
            "utterance": "how many airports are in Italy ?",
            "sql": "select count ( airports.* ) where airports.country = value"
        },
        {
            "utterance": "show the info of routes listing those airports as destinations .",
            "sql": "select * where airports.country = value"
        },
        {
            "utterance": "count the total number .",
            "sql": "select count ( * ) where airports.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 26,
    "final": {
        "utterance": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"
    },
    "interaction": [
        {
            "utterance": "how many routes are operated by the airline with name 'American Airlines ' .",
            "sql": "select count ( * ) where airlines.name = value"
        },
        {
            "utterance": "how many of them list the US as the destination ?",
            "sql": "select count ( * ) where airports.country = value and airlines.name = value"
        },
        {
            "utterance": "how about for Italy ?",
            "sql": "select count ( * ) where airports.country = value and airlines.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the number of routes that list John F Kennedy International Airport as a destination.",
        "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"
    },
    "interaction": [
        {
            "utterance": "which city is John F Kennedy International Airport located in ?",
            "sql": "select airports.city where airports.name = value"
        },
        {
            "utterance": "which routes list it as a destination airport ?",
            "sql": "select * where airports.name = value"
        },
        {
            "utterance": "how many of those routes are there ?",
            "sql": "select count ( * ) where airports.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of routes from the United States to Canada.",
        "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
    },
    "interaction": [
        {
            "utterance": "Find the number of routes from the United States .",
            "sql": "select count ( routes.* ) where routes.src_apid in ( select airports.apid where airports.country = value )"
        },
        {
            "utterance": "how many of them end up in Canada ?",
            "sql": "select count ( routes.* ) where routes.dst_apid in ( select airports.apid where airports.country = value ) and routes.src_apid in ( select airports.apid where airports.country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 29,
    "final": {
        "utterance": "Find the id of routes whose source and destination airports are in the United States.",
        "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
    },
    "interaction": [
        {
            "utterance": "how many routes end in the United States ?",
            "sql": "select count ( routes.* ) where routes.dst_apid in ( select airports.apid where airports.country = value )"
        },
        {
            "utterance": "among them , how many fly from the United States ?",
            "sql": "select count ( routes.* ) where routes.dst_apid in ( select airports.apid where airports.country = value ) and routes.src_apid in ( select airports.apid where airports.country = value )"
        },
        {
            "utterance": "what are their ids ?",
            "sql": "select routes.rid where routes.dst_apid in ( select airports.apid where airports.country = value ) and routes.src_apid in ( select airports.apid where airports.country = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the name of airline which runs the most number of routes.",
        "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show info of all airlines .",
            "sql": "select airlines.*"
        },
        {
            "utterance": "find the number of routes for each airline . Show their names .",
            "sql": "select count ( * ) , airlines.name group_by airlines.name"
        },
        {
            "utterance": "which airline has the most routes ?",
            "sql": "select airlines.name group_by airlines.name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_4",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the busiest source airport that runs most number of routes in China.",
        "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "show all airports in China .",
            "sql": "select airports.* where airports.country = value"
        },
        {
            "utterance": "which one is listed as the source airport of the most routes ?",
            "sql": "select airports.name where airports.country = value group_by airports.name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 0,
    "final": {
        "utterance": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "Show me all the information from invoices !",
            "sql": "select invoices.*"
        },
        {
            "utterance": "What is the country with the least number of invoices ?",
            "sql": "select invoices.billing_country , count ( invoices.* ) group_by invoices.billing_country order_by count ( invoices.* ) asc limit_value"
        },
        {
            "utterance": "How about the one with the most !",
            "sql": "select invoices.billing_country , count ( invoices.* ) group_by invoices.billing_country order_by count ( invoices.* ) desc limit_value"
        },
        {
            "utterance": "How about the top 5 ?",
            "sql": "select invoices.billing_country , count ( invoices.* ) group_by invoices.billing_country order_by count ( invoices.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 1,
    "final": {
        "utterance": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
    },
    "interaction": [
        {
            "utterance": "Show me the number of invoices by country !",
            "sql": "select invoices.billing_country , count ( invoices.* ) group_by invoices.billing_country"
        },
        {
            "utterance": "What is the total invoice for each !",
            "sql": "select invoices.billing_country , count ( invoices.* ) , sum ( invoices.total ) group_by invoices.billing_country"
        },
        {
            "utterance": "Can you show me this sorted from greatest to least by total invoice size !",
            "sql": "select invoices.billing_country , count ( invoices.* ) , sum ( invoices.total ) group_by invoices.billing_country order_by sum ( invoices.total ) desc"
        },
        {
            "utterance": "Now , show me just the billing country and total for the top 8 !",
            "sql": "select invoices.billing_country , sum ( invoices.total ) group_by invoices.billing_country order_by sum ( invoices.total ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 2,
    "final": {
        "utterance": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "Can you show me the total invoice size per country !",
            "sql": "select invoices.billing_country , sum ( invoices.total ) group_by invoices.billing_country"
        },
        {
            "utterance": "Instead , display the average per country !",
            "sql": "select invoices.billing_country , avg ( invoices.total ) group_by invoices.billing_country"
        },
        {
            "utterance": "Just , show the top 15 by average invoice size .",
            "sql": "select invoices.billing_country , avg ( invoices.total ) group_by invoices.billing_country order_by avg ( invoices.total ) desc limit_value"
        },
        {
            "utterance": "Actually , just list the top 10 !",
            "sql": "select invoices.billing_country , avg ( invoices.total ) group_by invoices.billing_country order_by avg ( invoices.total ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "Show all the ids , customer ids , and invoice dates from invoices .",
            "sql": "select invoices.id , invoices.customer_id , invoices.invoice_date"
        },
        {
            "utterance": "Could you show me them in order of most recently purchased ?",
            "sql": "select invoices.id , invoices.customer_id , invoices.invoice_date order_by invoices.invoice_date desc"
        },
        {
            "utterance": "Also include the customer names of each purchase ! !",
            "sql": "select customers.first_name , customers.last_name , invoices.id , invoices.customer_id , invoices.invoice_date order_by invoices.invoice_date desc"
        },
        {
            "utterance": "Show just the first name and last names of the 5 most recent purchases .",
            "sql": "select customers.first_name , customers.last_name order_by invoices.invoice_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "How many orders have each customer created by customer name ?",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.id"
        },
        {
            "utterance": "Show the entry with the lowest ?",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the highest !",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about the top 10 !",
            "sql": "select customers.first_name , customers.last_name , count ( * ) group_by customers.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "Show all the customer ids , and names !",
            "sql": "select customers.id , customers.first_name , customers.last_name"
        },
        {
            "utterance": "How any invoices do each of them have ?",
            "sql": "select customers.id , customers.first_name , customers.last_name , count ( * ) group_by customers.id"
        },
        {
            "utterance": "What are their total gross sales ?",
            "sql": "select customers.id , customers.first_name , customers.last_name , count ( * ) , sum ( invoices.total ) group_by customers.id"
        },
        {
            "utterance": "Show just the names of the customers , and their total gross sales for the top 10 in gross sales !",
            "sql": "select customers.first_name , customers.last_name , sum ( invoices.total ) group_by customers.id order_by sum ( invoices.total ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 6,
    "final": {
        "utterance": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
    },
    "interaction": [
        {
            "utterance": "How many tracks are there ?",
            "sql": "select count ( tracks.* )"
        },
        {
            "utterance": "What are the names , composers , and genre names of each ?",
            "sql": "select tracks.name , tracks.composer , genres.name"
        },
        {
            "utterance": "Show how many tracks there are per genre !",
            "sql": "select genres.name , count ( * ) group_by genres.id"
        },
        {
            "utterance": "Show the genre names , and number of tracks of the top 5 by number of tracks !",
            "sql": "select genres.name , count ( * ) group_by genres.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 7,
    "final": {
        "utterance": "List every album whose title starts with A in alphabetical order.",
        "sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"
    },
    "interaction": [
        {
            "utterance": "What are all the albums titles ?",
            "sql": "select albums.title"
        },
        {
            "utterance": "Which ones start with A ?",
            "sql": "select albums.title where albums.title like value"
        },
        {
            "utterance": "Can you order them in alphabetical order ?",
            "sql": "select albums.title where albums.title like value order_by albums.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 8,
    "final": {
        "utterance": "List the customers first and last name of 10 least expensive invoices.",
        "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "What are the invoices of each customer ?",
            "sql": "select * , invoices.total"
        },
        {
            "utterance": "Show me the names of the customers with the top 15 totals !",
            "sql": "select customers.first_name , customers.last_name order_by invoices.total desc limit_value"
        },
        {
            "utterance": "How about the bottom 15 !",
            "sql": "select customers.first_name , customers.last_name order_by invoices.total limit_value"
        },
        {
            "utterance": "How about the bottom 10 !",
            "sql": "select customers.first_name , customers.last_name order_by invoices.total limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 9,
    "final": {
        "utterance": "List total amount of  invoice from Chicago, IL.",
        "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    "interaction": [
        {
            "utterance": "What are the different cities , and states that have invoices ?",
            "sql": "select distinct invoices.billing_city , invoices.billing_state"
        },
        {
            "utterance": "What are the number of invoices for each city and state ?",
            "sql": "select invoices.billing_city , invoices.billing_state , count ( invoices.* ) group_by invoices.billing_city , invoices.billing_state"
        },
        {
            "utterance": "Also provide the total invoice !",
            "sql": "select invoices.billing_city , invoices.billing_state , count ( invoices.* ) , sum ( invoices.total ) group_by invoices.billing_city , invoices.billing_state"
        },
        {
            "utterance": "Can you how just the total invoice for the city Chicago in state IL ?",
            "sql": "select sum ( invoices.total ) where invoices.billing_city = value and invoices.billing_state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 10,
    "final": {
        "utterance": "List the number of invoices from Chicago, IL.",
        "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    "interaction": [
        {
            "utterance": "Show all the invoices for the city Chicago in the state Illinois !",
            "sql": "select invoices.* where invoices.billing_city = value and invoices.billing_state = value"
        },
        {
            "utterance": "What is the total invoice ?",
            "sql": "select sum ( invoices.total ) where invoices.billing_city = value and invoices.billing_state = value"
        },
        {
            "utterance": "How about the number of different customers ?",
            "sql": "select count ( distinct invoices.customer_id ) where invoices.billing_city = value and invoices.billing_state = value"
        },
        {
            "utterance": "How about the number of invoices ?",
            "sql": "select count ( invoices.* ) where invoices.billing_city = value and invoices.billing_state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 11,
    "final": {
        "utterance": "List the number of invoices from the US, grouped by state.",
        "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"
    },
    "interaction": [
        {
            "utterance": "Show me all the ids , country and states for all the invoices !",
            "sql": "select invoices.id , invoices.billing_country , invoices.billing_state"
        },
        {
            "utterance": "Show me only those from the US ?",
            "sql": "select invoices.id , invoices.billing_country , invoices.billing_state where invoices.billing_country = value"
        },
        {
            "utterance": "What are the different states these comes from ?",
            "sql": "select distinct invoices.billing_state where invoices.billing_country = value"
        },
        {
            "utterance": "How many USA invoices are from each of them !",
            "sql": "select invoices.billing_state , count ( invoices.* ) where invoices.billing_country = value group_by invoices.billing_state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 12,
    "final": {
        "utterance": "List the state in the US with the most invoices.",
        "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are the different states in the US that have invoices ?",
            "sql": "select distinct invoices.billing_state where invoices.billing_country = value"
        },
        {
            "utterance": "Which one has the least number of invoices ?",
            "sql": "select invoices.billing_state , count ( invoices.* ) where invoices.billing_country = value group_by invoices.billing_state order_by count ( invoices.* ) asc limit_value"
        },
        {
            "utterance": "How about the most ?",
            "sql": "select invoices.billing_state , count ( invoices.* ) where invoices.billing_country = value group_by invoices.billing_state order_by count ( invoices.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the number of invoices and the invoice total from California.",
        "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
    },
    "interaction": [
        {
            "utterance": "Show me all the information about the invoices in California !",
            "sql": "select invoices.* where invoices.billing_state = value"
        },
        {
            "utterance": "Actually just show the billing_state , billing_city , and billing_country .",
            "sql": "select invoices.billing_state , invoices.billing_city , invoices.billing_country where invoices.billing_state = value"
        },
        {
            "utterance": "Can you show the billing_state and the total invoice of these ?",
            "sql": "select invoices.billing_state , sum ( invoices.total ) where invoices.billing_state = value"
        },
        {
            "utterance": "Also provide the number of invoices .",
            "sql": "select invoices.billing_state , count ( invoices.* ) , sum ( invoices.total ) where invoices.billing_state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 14,
    "final": {
        "utterance": "List Aerosmith's albums.",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"
    },
    "interaction": [
        {
            "utterance": "How many different albums are there ?",
            "sql": "select count ( albums.* )"
        },
        {
            "utterance": "What are the titles of the albums ?",
            "sql": "select albums.title"
        },
        {
            "utterance": "What are the names of the artists for each !",
            "sql": "select albums.title , artists.name"
        },
        {
            "utterance": "Show me only the album titles by the artist named Aerosmith !",
            "sql": "select albums.title where artists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many albums does Billy Cobham has?",
        "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    "interaction": [
        {
            "utterance": "How many albums are there ?",
            "sql": "select count ( albums.* )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select albums.*"
        },
        {
            "utterance": "Which ones are made by Billy Cobham ?",
            "sql": "select * where artists.name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where artists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Eduardo Martins is a customer at which company?",
        "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
    },
    "interaction": [
        {
            "utterance": "How many customers have the first name Eduardo and last name Martins ?",
            "sql": "select count ( customers.* ) where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Show me all his customer information !",
            "sql": "select customers.* where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Just show the company !",
            "sql": "select customers.company where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is Astrid Gruber's email and phone number?",
        "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
    },
    "interaction": [
        {
            "utterance": "Show me the id of customer with first name Astrid , and last name Gruber !",
            "sql": "select customers.id where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "What is her address ?",
            "sql": "select customers.address where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "How about her company ?",
            "sql": "select customers.company where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Just show me her email and phone number ?",
            "sql": "select customers.email , customers.phone where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What country does Roberto Almeida live?",
        "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    "interaction": [
        {
            "utterance": "How many different countries are the customers from ?",
            "sql": "select count ( distinct customers.country )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select distinct customers.country"
        },
        {
            "utterance": "Show the customer names for each !",
            "sql": "select customers.country , customers.first_name , customers.last_name"
        },
        {
            "utterance": "Which country has name Roberto Almeida ?",
            "sql": "select customers.country where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 19,
    "final": {
        "utterance": "List the name of albums that are released by artist whose name has 'Led'",
        "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"
    },
    "interaction": [
        {
            "utterance": "How many different artists are there ?",
            "sql": "select count ( artists.* )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select artists.name"
        },
        {
            "utterance": "Show all the album titles for the one named Led !",
            "sql": "select albums.title where artists.name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 20,
    "final": {
        "utterance": "How many customers does Steve Johnson support?",
        "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
    },
    "interaction": [
        {
            "utterance": "What is the title of the employee with first name Steve and last name Johnson ?",
            "sql": "select employees.title where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Who does he report to ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "What customers does he support ?",
            "sql": "select customers.first_name , customers.last_name where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( * ) where employees.first_name = value and employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the title, phone and hire date of Nancy Edwards?",
        "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "Tell me the phone number and email of employee named Nancy Edwards ?",
            "sql": "select employees.phone , employees.email where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "What is her birth date ?",
            "sql": "select employees.birth_date where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "How about her address ?",
            "sql": "select employees.address where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Show her title , phone number , and hire date !",
            "sql": "select employees.title , employees.phone , employees.hire_date where employees.first_name = value and employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 22,
    "final": {
        "utterance": "find the full name of employees who report to Nancy Edwards?",
        "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "What is the title of Nancy Edwards ?",
            "sql": "select employees.title where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Who does she report to ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "How many report to her ?",
            "sql": "select count ( employees.* ) where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select employees.first_name , employees.last_name where employees.first_name = value and employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the address of employee Nancy Edwards?",
        "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "Show all the employee ids and addresses !",
            "sql": "select employees.id , employees.address"
        },
        {
            "utterance": "Order by country , state , and city !",
            "sql": "select employees.id , employees.address order_by employees.country , employees.state , employees.city"
        },
        {
            "utterance": "Also provide employee name !",
            "sql": "select employees.first_name , employees.last_name , employees.id , employees.address order_by employees.country , employees.state , employees.city"
        },
        {
            "utterance": "Just show the address of customer named Nancy Edwards !",
            "sql": "select employees.address where employees.first_name = value and employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the full name of employee who supported the most number of customers.",
        "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who are the employees that actually support customers ?",
            "sql": "select employees.first_name , customers.last_name"
        },
        {
            "utterance": "How about the most ?",
            "sql": "select count ( * ) group_by employees.id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "What is the name of the employee that supports this many !",
            "sql": "select employees.first_name , employees.last_name group_by employees.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is employee Nancy Edwards's phone number?",
        "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    "interaction": [
        {
            "utterance": "Show the employee information on employee with name Nancy Edwards !",
            "sql": "select employees.* where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Show just her email !",
            "sql": "select employees.email where employees.first_name = value and employees.last_name = value"
        },
        {
            "utterance": "Actually show just her phone !",
            "sql": "select employees.phone where employees.first_name = value and employees.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Who is the youngest employee in the company? List employee's first and last name.",
        "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show all the employe information ordered by oldest to youngest !",
            "sql": "select employees.* order_by employees.birth_date asc"
        },
        {
            "utterance": "Just show the birthdate of the oldest !",
            "sql": "select employees.birth_date order_by employees.birth_date asc limit_value"
        },
        {
            "utterance": "How about that of the youngest !",
            "sql": "select employees.birth_date order_by employees.birth_date desc limit_value"
        },
        {
            "utterance": "What is the youngest 's name ?",
            "sql": "select employees.first_name , employees.last_name order_by employees.birth_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 27,
    "final": {
        "utterance": "List top 10 employee work longest in the company. List employee's first and last name.",
        "sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;"
    },
    "interaction": [
        {
            "utterance": "What is the name of the most recent employee ?",
            "sql": "select employees.first_name , employees.last_name order_by employees.hire_date asc limit_value"
        },
        {
            "utterance": "How about the first employee ?",
            "sql": "select employees.first_name , employees.last_name order_by employees.hire_date desc limit_value"
        },
        {
            "utterance": "How about the most recent 10 most recent employees ?",
            "sql": "select employees.first_name , employees.last_name order_by employees.hire_date desc limit_value"
        },
        {
            "utterance": "List first 10 employees !",
            "sql": "select employees.first_name , employees.last_name order_by employees.hire_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of employees whose title is IT Staff from each city?",
        "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
    },
    "interaction": [
        {
            "utterance": "Show all the different cities that employees are from .",
            "sql": "select distinct employees.city"
        },
        {
            "utterance": "How many are from each one !",
            "sql": "select count ( employees.* ) , employees.city group_by employees.city"
        },
        {
            "utterance": "How many are of the title Sales Support Agent ?",
            "sql": "select count ( employees.* ) , employees.city where employees.title = value group_by employees.city"
        },
        {
            "utterance": "How about IT Staff ?",
            "sql": "select count ( employees.* ) , employees.city where employees.title = value group_by employees.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are the name of the employees that do not manage any other employees ?",
            "sql": "select employees.first_name , employees.last_name where employees.id in ( select employees.id except select employees.reports_to )"
        },
        {
            "utterance": "Show me all the names of all the others !",
            "sql": "select employees.first_name , employees.last_name , count ( employees.reports_to )"
        },
        {
            "utterance": "Who manages the max number of people ?",
            "sql": "select employees.first_name , employees.last_name group_by employees.reports_to order_by count ( employees.reports_to ) desc limit_value"
        },
        {
            "utterance": "Also provide the number of people managed !",
            "sql": "select employees.first_name , employees.last_name , count ( employees.reports_to ) group_by employees.reports_to order_by count ( employees.reports_to ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many orders does Lucas Mancini has?",
        "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    "interaction": [
        {
            "utterance": "For all the invoices , show the invoice ids and customer ids !",
            "sql": "select invoices.id , invoices.customer_id"
        },
        {
            "utterance": "How many have each customer ordered !",
            "sql": "select customers.id , count ( * ) group_by customers.id"
        },
        {
            "utterance": "Show their names for each !",
            "sql": "select customers.first_name , customers.last_name , customers.id , count ( * ) group_by customers.id"
        },
        {
            "utterance": "Show the number for customer named Lucas Mancini !",
            "sql": "select count ( * ) where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the total amount of money spent by Lucas Mancini?",
        "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    "interaction": [
        {
            "utterance": "Show the number of orders for each customer name !",
            "sql": "select count ( * ) , customers.first_name , customers.last_name group_by customers.id"
        },
        {
            "utterance": "Also include the total amount each has spent !",
            "sql": "select sum ( invoices.total ) , count ( * ) , customers.first_name , customers.last_name group_by customers.id"
        },
        {
            "utterance": "Show the entry for customer named Lucas Mancini .",
            "sql": "select sum ( invoices.total ) , count ( * ) , customers.first_name , customers.last_name where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "Actually , just show the total amount of money !",
            "sql": "select sum ( invoices.total ) where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What is the name of tracks whose genre is Rock?",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    "interaction": [
        {
            "utterance": "For each track , show the track name and album name !",
            "sql": "select tracks.name , albums.title"
        },
        {
            "utterance": "Also include the genre name !",
            "sql": "select genres.name , tracks.name , albums.title"
        },
        {
            "utterance": "Show just the ones of the genre named Rock !",
            "sql": "select genres.name , tracks.name , albums.title where genres.name = value"
        },
        {
            "utterance": "Show just the track names !",
            "sql": "select tracks.name where genres.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is title of album which track Balls to the Wall belongs to?",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name = \"Balls to the Wall\";"
    },
    "interaction": [
        {
            "utterance": "Who is the composer for track named `` Balls to the Wall '' ;",
            "sql": "select tracks.composer where tracks.name = value"
        },
        {
            "utterance": "How long is it ?",
            "sql": "select tracks.milliseconds where tracks.name = value"
        },
        {
            "utterance": "How about its price ?",
            "sql": "select tracks.unit_price where tracks.name = value"
        },
        {
            "utterance": "the title of the album it belongs to ?",
            "sql": "select albums.title where tracks.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 34,
    "final": {
        "utterance": "List name of all tracks in Balls to the Wall.",
        "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
    },
    "interaction": [
        {
            "utterance": "What are all the album names and respective track names ?",
            "sql": "select albums.title , tracks.name"
        },
        {
            "utterance": "Show them ordered by album name !",
            "sql": "select albums.title , tracks.name order_by albums.title"
        },
        {
            "utterance": "Show just the track names for album called `` Balls to the Wall ''",
            "sql": "select tracks.name where albums.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 35,
    "final": {
        "utterance": "List title of albums have the number of tracks greater than 10.",
        "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
    },
    "interaction": [
        {
            "utterance": "How many have greater than 5 ?",
            "sql": "select count ( * ) ( select * group_by albums.id having count ( albums.id ) > value )"
        },
        {
            "utterance": "greater than 10 ?",
            "sql": "select count ( * ) ( select * group_by albums.id having count ( albums.id ) > value )"
        },
        {
            "utterance": "What are their titles ?",
            "sql": "select albums.title group_by albums.id having count ( albums.id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 36,
    "final": {
        "utterance": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"
    },
    "interaction": [
        {
            "utterance": "Show me all the tracks names and their media types !",
            "sql": "select tracks.name , media_types.name"
        },
        {
            "utterance": "Which ones are MPEG files ?",
            "sql": "select tracks.name , media_types.name where media_types.name = value"
        },
        {
            "utterance": "Also provide the genres for each of these ! !",
            "sql": "select genres.name , tracks.name , media_types.name where media_types.name = value"
        },
        {
            "utterance": "Which names of the ones are in the genre Rock ?",
            "sql": "select tracks.name where genres.name = value and media_types.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 37,
    "final": {
        "utterance": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"
    },
    "interaction": [
        {
            "utterance": "Show the names of each track and their genre names !",
            "sql": "select tracks.name , genres.name"
        },
        {
            "utterance": "Show me the names of the tracks that are in the genre Rock !",
            "sql": "select tracks.name where genres.name = value"
        },
        {
            "utterance": "Show me any names of tracks whose media type is an MPEG audio file !",
            "sql": "select tracks.name where media_types.name = value"
        },
        {
            "utterance": "Can you show a list of both of these names ?",
            "sql": "select tracks.name where genres.name = value or media_types.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 38,
    "final": {
        "utterance": "List the name of tracks belongs to genre Rock or genre Jazz.",
        "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""
    },
    "interaction": [
        {
            "utterance": "What genre names for each track by track name !",
            "sql": "select genres.name , tracks.name where genres.name = value"
        },
        {
            "utterance": "Show us all the tracks that belong to genre Rock .",
            "sql": "select tracks.name where genres.name = value"
        },
        {
            "utterance": "How about those that belong to genre Jazz .",
            "sql": "select tracks.name where genres.name = value"
        },
        {
            "utterance": "Which ones belong to either one ?",
            "sql": "select tracks.name where genres.name = value or genres.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 39,
    "final": {
        "utterance": "List the name of all tracks in the playlists of Movies.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    "interaction": [
        {
            "utterance": "How many tracks are there ?",
            "sql": "select count ( tracks.* )"
        },
        {
            "utterance": "How many are in a playlist of a Movie ?",
            "sql": "select count ( * ) where playlists.name = value"
        },
        {
            "utterance": "Which ones ?",
            "sql": "select tracks.name where playlists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 40,
    "final": {
        "utterance": "List the name of playlist which has number of tracks greater than 100.",
        "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the playlist ?",
            "sql": "select playlists.name"
        },
        {
            "utterance": "For each , what are the names of their tracks ?",
            "sql": "select tracks.name , playlists.name"
        },
        {
            "utterance": "For each playlist name , count the number of tracks !",
            "sql": "select playlists.name , count ( playlist_tracks.track_id ) group_by playlist_tracks.playlist_id"
        },
        {
            "utterance": "Show the only the names of the playlists with more than 100 !",
            "sql": "select playlists.name group_by playlist_tracks.playlist_id having count ( playlist_tracks.track_id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 41,
    "final": {
        "utterance": "List all tracks bought by customer Daan Peeters.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    "interaction": [
        {
            "utterance": "Show me the customer information about a customer named Daan Peeters .",
            "sql": "select customers.* where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "How many invoices has he had ?",
            "sql": "select count ( * ) where customers.first_name = value and customers.last_name = value"
        },
        {
            "utterance": "In each invoice , how many tracks did he buy ?",
            "sql": "select invoices.id , count ( * ) where customers.first_name = value and customers.last_name = value group_by invoices.id"
        },
        {
            "utterance": "Can you show just all the names of these tracks !",
            "sql": "select tracks.name where customers.first_name = value and customers.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "What different types of playlists are there ?",
            "sql": "select playlists.name"
        },
        {
            "utterance": "What are the names of the tracks are in the movie playlist ?",
            "sql": "select tracks.name , playlists.name where playlists.name = value"
        },
        {
            "utterance": "Which of these are also in the music playl",
            "sql": "select tracks.name where playlists.name = value intersect select tracks.name where playlists.name = value"
        },
        {
            "utterance": "How about those that are not !",
            "sql": "select tracks.name where playlists.name = value except select tracks.name where playlists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "store_1",
    "interaction_id": 43,
    "final": {
        "utterance": "Find the name of tracks which are in both Movies and music playlists.",
        "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    "interaction": [
        {
            "utterance": "How many different playlist are there ?",
            "sql": "select count ( playlists.* )"
        },
        {
            "utterance": "What are they ?",
            "sql": "select playlists.name"
        },
        {
            "utterance": "What are the tracks in each one ?",
            "sql": "select tracks.name , playlists.name"
        },
        {
            "utterance": "What are the names of the ones are in both Movies and music !",
            "sql": "select tracks.name where playlists.name = value intersect select tracks.name where playlists.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the tallest building?",
        "sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the heights of buildings ?",
            "sql": "select building.height_feet"
        },
        {
            "utterance": "give the max .",
            "sql": "select max ( building.height_feet )"
        },
        {
            "utterance": "What is its name ?",
            "sql": "select building.name order_by building.height_feet desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the average, maximum, and minimum number of floors for all buildings?",
        "sql": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building"
    },
    "interaction": [
        {
            "utterance": "How many floors does each building name have ?",
            "sql": "select building.name , building.floors"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( building.floors )"
        },
        {
            "utterance": "Give statistics about the avg , max , and min .",
            "sql": "select avg ( building.floors ) , max ( building.floors ) , min ( building.floors )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the number of buildings with a height above the average or a number of floors above the average.",
        "sql": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)"
    },
    "interaction": [
        {
            "utterance": "How many buildings have height abouve average ?",
            "sql": "select count ( building.* ) where building.height_feet > ( select avg ( building.height_feet ) )"
        },
        {
            "utterance": "What about floors above average ?",
            "sql": "select count ( building.* ) where building.height_feet > ( select avg ( building.floors ) )"
        },
        {
            "utterance": "Give the union of the above .",
            "sql": "select count ( building.* ) where building.height_feet > ( select avg ( building.height_feet ) ) or building.floors > ( select avg ( building.floors ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "sql": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20"
    },
    "interaction": [
        {
            "utterance": "Which buildings are taller than 200 ?",
            "sql": "select building.name where building.height_feet > = value"
        },
        {
            "utterance": "Which have floors greater or equal to 20 ?",
            "sql": "select building.name where building.floors > = value"
        },
        {
            "utterance": "Intersect those .",
            "sql": "select building.name where building.height_feet > = value and building.floors > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "sql": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'"
    },
    "interaction": [
        {
            "utterance": "What are the names and founded dates for the institutions ?",
            "sql": "select institution.institution , institution.founded"
        },
        {
            "utterance": "Also show the private/public status .",
            "sql": "select institution.institution , institution.founded , institution.type"
        },
        {
            "utterance": "Show the names and locations of institutions that are founded after 1990 and have the type `` Private '' .",
            "sql": "select institution.institution , institution.location where institution.founded > value and institution.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 5,
    "final": {
        "utterance": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "sql": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE"
    },
    "interaction": [
        {
            "utterance": "What are the unique types of institution ?",
            "sql": "select distinct institution.type"
        },
        {
            "utterance": "Count those .",
            "sql": "select institution.type , count ( institution.* ) group_by institution.type"
        },
        {
            "utterance": "Also sum over enrollment .",
            "sql": "select institution.type , count ( institution.* ) , sum ( institution.enrollment ) group_by institution.type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the institution type with the largest number of institutions.",
        "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many institutions have type Tribal ?",
            "sql": "select count ( institution.* ) where institution.type = value"
        },
        {
            "utterance": "Show the institution type with the largest number of institutions .",
            "sql": "select institution.type group_by institution.type order_by count ( institution.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "sql": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000"
    },
    "interaction": [
        {
            "utterance": "Which institutions were founded after 1990 ?",
            "sql": "select institution.institution where institution.founded > value"
        },
        {
            "utterance": "What are their types ?",
            "sql": "select institution.institution , institution.type where institution.founded > value"
        },
        {
            "utterance": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment .",
            "sql": "select institution.type where institution.founded > value and institution.enrollment > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of buildings that do not have any institution.",
        "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
    },
    "interaction": [
        {
            "utterance": "which building ids have an institution ?",
            "sql": "select distinct institution.building_id"
        },
        {
            "utterance": "Which do not ?",
            "sql": "select building.building_id where building.building_id not in ( select institution.building_id )"
        },
        {
            "utterance": "Give just their names .",
            "sql": "select building.name where building.building_id not in ( select institution.building_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of buildings except for those having an institution founded in 2003.",
        "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003"
    },
    "interaction": [
        {
            "utterance": "Which institutions were founded in 2003 ?",
            "sql": "select institution.institution where institution.founded = value"
        },
        {
            "utterance": "What are the corresponding building ids ?",
            "sql": "select institution.building_id where institution.founded = value"
        },
        {
            "utterance": "What are the names of these buildings ?",
            "sql": "select building.name where institution.founded = value"
        },
        {
            "utterance": "Which building names are not in there ?",
            "sql": "select building.name except select building.name where institution.founded = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 10,
    "final": {
        "utterance": "For each building, show the name of the building and the number of institutions in it.",
        "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
    },
    "interaction": [
        {
            "utterance": "How many institutions are in Citizens Bank Building ?",
            "sql": "select count ( * ) group_by building.building_id having building.name = value"
        },
        {
            "utterance": "Generalize this process for all buildings .",
            "sql": "select building.name , count ( * ) group_by building.building_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "sql": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which institutions were founded after 1880 ?",
            "sql": "select institution.institution where institution.founded > value"
        },
        {
            "utterance": "Give the building ids of these buildings .",
            "sql": "select institution.building_id , institution.institution where institution.founded > value"
        },
        {
            "utterance": "Only show the building ids that appear twice or more on that list .",
            "sql": "select institution.building_id where institution.founded > value group_by institution.building_id having count ( institution.* ) > = value"
        },
        {
            "utterance": "Give the names and heights of those buildings .",
            "sql": "select building.name , building.height_feet where institution.founded > value group_by building.building_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 12,
    "final": {
        "utterance": "Show institution names along with the number of proteins for each institution.",
        "sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
    },
    "interaction": [
        {
            "utterance": "Show the institution names joined with the protein names .",
            "sql": "select institution.institution , protein.protein_name"
        },
        {
            "utterance": "Aggregate , count , over the institution names .",
            "sql": "select institution.institution , count ( * ) group_by institution.institution_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 13,
    "final": {
        "utterance": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    "interaction": [
        {
            "utterance": "Which proteins are associated with institutions founded after 1880 ?",
            "sql": "select protein.protein_name where institution.founded > value"
        },
        {
            "utterance": "And which are associated with an institution with type `` Private '' ?",
            "sql": "select protein.protein_name where institution.type = value"
        },
        {
            "utterance": "Union those .",
            "sql": "select protein.protein_name where institution.founded > value or institution.type = value"
        },
        {
            "utterance": "Count the union .",
            "sql": "select count ( * ) where institution.founded > value or institution.type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "protein_institute",
    "interaction_id": 14,
    "final": {
        "utterance": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20"
    },
    "interaction": [
        {
            "utterance": "Which protein names are associated with an institution in a building with at least 20 floors ?",
            "sql": "select protein.protein_name where building.floors > = value"
        },
        {
            "utterance": "Which of those have common name equal to 'Tropical Clawed Frog ' ?",
            "sql": "select protein.protein_name where building.floors > = value and protein.common_name = value"
        },
        {
            "utterance": "Give a count of the proteins in the first query .",
            "sql": "select count ( * ) where building.floors > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 0,
    "final": {
        "utterance": "Give me the names of members whose address is in Harford or Waterbury.",
        "sql": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'"
    },
    "interaction": [
        {
            "utterance": "show all the different member addresses .",
            "sql": "select distinct member.address"
        },
        {
            "utterance": "who is living in Harford ?",
            "sql": "select member.name where member.address = value"
        },
        {
            "utterance": "also include the members living in Waterbury .",
            "sql": "select member.name where member.address = value or member.address = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the ids and names of members who are under age 30 or with black membership card.",
        "sql": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30"
    },
    "interaction": [
        {
            "utterance": "how many members are under age 30 ?",
            "sql": "select count ( member.* ) where member.age < value"
        },
        {
            "utterance": "how about the number of members with a black membership card ?",
            "sql": "select count ( member.* ) where member.membership_card = value"
        },
        {
            "utterance": "what is the total number between these two groups of members ?",
            "sql": "select count ( member.* ) where member.membership_card = value or member.age < value"
        },
        {
            "utterance": "what are their ids and names ?",
            "sql": "select member.name , member.member_id where member.membership_card = value or member.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 2,
    "final": {
        "utterance": "Which membership card has more than 5 members?",
        "sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    "interaction": [
        {
            "utterance": "what are all the different membership cards ?",
            "sql": "select distinct member.membership_card"
        },
        {
            "utterance": "how many members does each of them have ?",
            "sql": "select count ( member.* ) , member.membership_card group_by member.membership_card"
        },
        {
            "utterance": "which ones have more than 3 members ?",
            "sql": "select member.membership_card group_by member.membership_card having count ( member.* ) > value"
        },
        {
            "utterance": "how about 5 ?",
            "sql": "select member.membership_card group_by member.membership_card having count ( member.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 3,
    "final": {
        "utterance": "Which address has both members younger than 30 and members older than 40?",
        "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"
    },
    "interaction": [
        {
            "utterance": "show all info about members .",
            "sql": "select member.*"
        },
        {
            "utterance": "which of them are older than 40 ?",
            "sql": "select member.* where member.age > value"
        },
        {
            "utterance": "for those who are younger than 30 ?",
            "sql": "select member.* where member.age < value"
        },
        {
            "utterance": "Which addresses have members in both groups ?",
            "sql": "select member.address where member.age < value intersect select member.address where member.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "sql": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'"
    },
    "interaction": [
        {
            "utterance": "show the names of members living in Hartford .",
            "sql": "select member.name where member.address = value"
        },
        {
            "utterance": "also those living in Waterbury .",
            "sql": "select member.name where member.address = value"
        },
        {
            "utterance": "which membership cards are held by members living in these two places ?",
            "sql": "select member.membership_card where member.address = value intersect select member.membership_card where member.address = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 5,
    "final": {
        "utterance": "Which address do not have any member with the black membership card?",
        "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    "interaction": [
        {
            "utterance": "what are different membership cards ?",
            "sql": "select distinct member.membership_card"
        },
        {
            "utterance": "how many black ones are there ?",
            "sql": "select count ( member.* ) where member.membership_card = value"
        },
        {
            "utterance": "show addresses for those who have one .",
            "sql": "select member.address where member.membership_card = value"
        },
        {
            "utterance": "how about those who do not have one ?",
            "sql": "select member.address except select member.address where member.membership_card = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the average score and average staff number of all shops?",
        "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
    },
    "interaction": [
        {
            "utterance": "show the scores and staff numbers for all shops .",
            "sql": "select shop.num_of_staff , shop.score"
        },
        {
            "utterance": "what are the averages for these two columns ?",
            "sql": "select avg ( shop.num_of_staff ) , avg ( shop.score )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the id and address of the shops whose score is below the average score.",
        "sql": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)"
    },
    "interaction": [
        {
            "utterance": "what is the highest score for all shops ?",
            "sql": "select max ( shop.score )"
        },
        {
            "utterance": "how about the average ?",
            "sql": "select avg ( shop.score )"
        },
        {
            "utterance": "what are the id and addresses of the shops whose scores are below this ?",
            "sql": "select shop.shop_id , shop.address where shop.score < ( select avg ( shop.score ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the address and staff number of the shops that do not have any happy hour.",
        "sql": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)"
    },
    "interaction": [
        {
            "utterance": "Find the addresses of the shops where they have happy hour .",
            "sql": "select shop.address"
        },
        {
            "utterance": "also return the staff numbers .",
            "sql": "select shop.address , shop.num_of_staff"
        },
        {
            "utterance": "how about those where there is no happy hour ?",
            "sql": "select shop.address , shop.num_of_staff where shop.shop_id not in ( select happy_hour.shop_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the id and address of the shops which have a happy hour in May?",
        "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'"
    },
    "interaction": [
        {
            "utterance": "show the id of the shops that have a happy hour .",
            "sql": "select happy_hour.shop_id"
        },
        {
            "utterance": "just show those that have happy hours in May .",
            "sql": "select happy_hour.shop_id where happy_hour.month = value"
        },
        {
            "utterance": "return their addresses too .",
            "sql": "select shop.address , shop.shop_id where happy_hour.month = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 10,
    "final": {
        "utterance": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the number of happy hours in each shop . Also show shop id .",
            "sql": "select happy_hour.shop_id , count ( happy_hour.* ) group_by happy_hour.shop_id"
        },
        {
            "utterance": "which of them has happy hour most often ?",
            "sql": "select happy_hour.shop_id group_by happy_hour.shop_id order_by count ( happy_hour.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "coffee_shop",
    "interaction_id": 11,
    "final": {
        "utterance": "Which month has the most happy hours?",
        "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many happy hour shops are there ?",
            "sql": "select count ( happy_hour.* )"
        },
        {
            "utterance": "for each month ?",
            "sql": "select count ( happy_hour.* ) group_by happy_hour.month"
        },
        {
            "utterance": "Which month has the most ?",
            "sql": "select happy_hour.month group_by happy_hour.month order_by count ( happy_hour.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 0,
    "final": {
        "utterance": "How many premises are there?",
        "sql": "SELECT count(*) FROM premises"
    },
    "interaction": [
        {
            "utterance": "Show information for all premises .",
            "sql": "select premises.*"
        },
        {
            "utterance": "How many of them are there ?",
            "sql": "select count ( premises.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 1,
    "final": {
        "utterance": "What are all the distinct premise types?",
        "sql": "SELECT DISTINCT premises_type FROM premises"
    },
    "interaction": [
        {
            "utterance": "Show information for premises .",
            "sql": "select premises.*"
        },
        {
            "utterance": "Only show the premise type for all of them .",
            "sql": "select premises.premises_type"
        },
        {
            "utterance": "What are the distinct types among them ?",
            "sql": "select distinct premises.premises_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the types and details for all premises and order by the premise type.",
        "sql": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type"
    },
    "interaction": [
        {
            "utterance": "Show the type for all premises .",
            "sql": "select premises.premises_type"
        },
        {
            "utterance": "Also add their details .",
            "sql": "select premises.premises_type , premises.premise_details"
        },
        {
            "utterance": "Order them by the premise type .",
            "sql": "select premises.premises_type , premises.premise_details order_by premises.premises_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 3,
    "final": {
        "utterance": "Show each premise type and the number of premises in that type.",
        "sql": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type"
    },
    "interaction": [
        {
            "utterance": "Show all premise types .",
            "sql": "select premises.premises_type"
        },
        {
            "utterance": "Show the number of premises in each type .",
            "sql": "select premises.premises_type , count ( premises.* ) group_by premises.premises_type"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all distinct product categories along with the number of mailshots in each category.",
        "sql": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category"
    },
    "interaction": [
        {
            "utterance": "Show the number of mailshot campaigns .",
            "sql": "select count ( mailshot_campaigns.* )"
        },
        {
            "utterance": "Breakdown the number by product category .",
            "sql": "select mailshot_campaigns.product_category , count ( mailshot_campaigns.* ) group_by mailshot_campaigns.product_category"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the name and phone of the customer without any mailshot.",
        "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)"
    },
    "interaction": [
        {
            "utterance": "Show all customers id with a mailshot .",
            "sql": "select mailshot_customers.customer_id"
        },
        {
            "utterance": "How about customer ids without any ?",
            "sql": "select customers.customer_id where customers.customer_id not in ( select mailshot_customers.customer_id )"
        },
        {
            "utterance": "Display the name and phone number for those customers .",
            "sql": "select customers.customer_name , customers.customer_phone where customers.customer_id not in ( select mailshot_customers.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "sql": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "Show the name and phone for all customers .",
            "sql": "select customers.customer_name , customers.customer_phone"
        },
        {
            "utterance": "Only show the results for those customers with a mailshot .",
            "sql": "select customers.customer_name , customers.customer_phone"
        },
        {
            "utterance": "Among those , how about the results for customers also with the outcome code 'No Response ' .",
            "sql": "select customers.customer_name , customers.customer_phone where mailshot_customers.outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "sql": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code"
    },
    "interaction": [
        {
            "utterance": "Show the outcome code for all mailshot customers .",
            "sql": "select mailshot_customers.outcome_code"
        },
        {
            "utterance": "Show the count of the number of mailshots in each of those codes .",
            "sql": "select mailshot_customers.outcome_code , count ( mailshot_customers.* ) group_by mailshot_customers.outcome_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the names of customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "How about the names for those who have an outcome code 'Order ' of mailshots .",
            "sql": "select customers.customer_name where mailshot_customers.outcome_code = value"
        },
        {
            "utterance": "Only show the names of those who have at least two such codes .",
            "sql": "select customers.customer_name where mailshot_customers.outcome_code = value group_by mailshot_customers.customer_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of customers who have the most mailshots.",
        "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name of customers with a mailshot .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Order them by the number of mailshots in descending order .",
            "sql": "select customers.customer_name group_by mailshot_customers.customer_id order_by count ( * ) desc"
        },
        {
            "utterance": "Who has the most mailshots among them ?",
            "sql": "select customers.customer_name group_by mailshot_customers.customer_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"
    },
    "interaction": [
        {
            "utterance": "Show the name for customers .",
            "sql": "select customers.customer_name"
        },
        {
            "utterance": "Also show their payment methods .",
            "sql": "select customers.customer_name , customers.payment_method"
        },
        {
            "utterance": "How about the results for those haing mailshots in 'Order ' outcome",
            "sql": "select customers.customer_name , customers.payment_method where mailshot_customers.outcome_code = value"
        },
        {
            "utterance": "What about those also having mailshots in 'No Response ' outcome ?",
            "sql": "select customers.customer_name , customers.payment_method where mailshot_customers.outcome_code = value intersect select customers.customer_name , customers.payment_method where mailshot_customers.outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the premise type and address type code for all customer addresses.",
        "sql": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id"
    },
    "interaction": [
        {
            "utterance": "Show the address type code for all customer addresses .",
            "sql": "select customer_addresses.address_type_code"
        },
        {
            "utterance": "For each of them , also show the premise type .",
            "sql": "select premises.premises_type , customer_addresses.address_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the distinct address type codes for all customer addresses?",
        "sql": "SELECT DISTINCT address_type_code FROM customer_addresses"
    },
    "interaction": [
        {
            "utterance": "Show information for all customer addresses .",
            "sql": "select customer_addresses.*"
        },
        {
            "utterance": "Show the address type code for all customer addresses .",
            "sql": "select customer_addresses.address_type_code"
        },
        {
            "utterance": "Filter for distinctness .",
            "sql": "select distinct customer_addresses.address_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_campaigns_ecommerce",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'"
    },
    "interaction": [
        {
            "utterance": "List the shipping charge and customer id for all customer orders .",
            "sql": "select customer_orders.order_shipping_charges , customer_orders.customer_id"
        },
        {
            "utterance": "How about the results with order status 'Cancelled ' ?",
            "sql": "select customer_orders.order_shipping_charges , customer_orders.customer_id where customer_orders.order_status_code = value"
        },
        {
            "utterance": "How about the results with order status 'Paid ' .",
            "sql": "select customer_orders.order_shipping_charges , customer_orders.customer_id where customer_orders.order_status_code = value"
        },
        {
            "utterance": "Show the results of both .",
            "sql": "select customer_orders.order_shipping_charges , customer_orders.customer_id where customer_orders.order_status_code = value or customer_orders.order_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 0,
    "final": {
        "utterance": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'"
    },
    "interaction": [
        {
            "utterance": "What are all the cross reference codes ?",
            "sql": "select cmi_cross_references.source_system_code group_by cmi_cross_references.source_system_code"
        },
        {
            "utterance": "Show me the cross references with code as Tax .",
            "sql": "select cmi_cross_references.* where cmi_cross_references.source_system_code = value"
        },
        {
            "utterance": "What are the details of the cmi masters of them ?",
            "sql": "select customer_master_index.cmi_details where cmi_cross_references.source_system_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "sql": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "Show me all the council tax entries .",
            "sql": "select council_tax.*"
        },
        {
            "utterance": "Show me distinct cmi cross reference ids in those .",
            "sql": "select council_tax.cmi_cross_ref_id group_by council_tax.cmi_cross_ref_id"
        },
        {
            "utterance": "What about their corresponding source system code ?",
            "sql": "select cmi_cross_references.cmi_cross_ref_id , cmi_cross_references.source_system_code group_by cmi_cross_references.cmi_cross_ref_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 2,
    "final": {
        "utterance": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the number of business rates.",
        "sql": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id"
    },
    "interaction": [
        {
            "utterance": "How many business rates are there ?",
            "sql": "select count ( business_rates.* )"
        },
        {
            "utterance": "What are the distinct cmi cross reference ids in those business rates ?",
            "sql": "select business_rates.cmi_cross_ref_id group_by business_rates.cmi_cross_ref_id"
        },
        {
            "utterance": "Show me the number of business rates related to each of them .",
            "sql": "select business_rates.cmi_cross_ref_id , count ( business_rates.* ) group_by business_rates.cmi_cross_ref_id"
        },
        {
            "utterance": "Include the master customer id too .",
            "sql": "select cmi_cross_references.cmi_cross_ref_id , cmi_cross_references.master_customer_id , count ( * ) group_by cmi_cross_references.cmi_cross_ref_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the tax source system code related to the benefits and overpayments? List the code and the benefit id, order by benefit id.",
        "sql": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"
    },
    "interaction": [
        {
            "utterance": "What are the cmi cross reference ids that are related to the benefits and overpayments .",
            "sql": "select benefits_overpayments.cmi_cross_ref_id"
        },
        {
            "utterance": "Show me their source system codes along with the benefit id .",
            "sql": "select cmi_cross_references.source_system_code , benefits_overpayments.council_tax_id"
        },
        {
            "utterance": "Order them by the benefit id .",
            "sql": "select cmi_cross_references.source_system_code , benefits_overpayments.council_tax_id order_by benefits_overpayments.council_tax_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"
    },
    "interaction": [
        {
            "utterance": "Show me the detail of all the customer master indices .",
            "sql": "select customer_master_index.cmi_details"
        },
        {
            "utterance": "Show me the id of those whose detial is not 'Schmidt , Kertzmann and Lubowitz ' .",
            "sql": "select customer_master_index.master_customer_id where customer_master_index.cmi_details != value"
        },
        {
            "utterance": "What are the renting arears tax ids related to them ?",
            "sql": "select rent_arrears.council_tax_id where customer_master_index.cmi_details != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all the electoral register ?",
            "sql": "select electoral_register.electoral_register_id"
        },
        {
            "utterance": "What about their cross reference source system codes ?",
            "sql": "select electoral_register.electoral_register_id , cmi_cross_references.source_system_code"
        },
        {
            "utterance": "Show me those with source system code 'Electoral ' or 'Tax ' .",
            "sql": "select electoral_register.electoral_register_id where cmi_cross_references.source_system_code = value or cmi_cross_references.source_system_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb, Becker and Wyman'"
    },
    "interaction": [
        {
            "utterance": "What are the details of all the master customers ?",
            "sql": "select customer_master_index.cmi_details"
        },
        {
            "utterance": "Show me the id of one with details 'Gottlieb , Becker and Wyman ' .",
            "sql": "select customer_master_index.master_customer_id where customer_master_index.cmi_details = value"
        },
        {
            "utterance": "Show me the distinct cross reference source system codes related to it .",
            "sql": "select distinct cmi_cross_references.source_system_code where customer_master_index.cmi_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_mdm",
    "interaction_id": 7,
    "final": {
        "utterance": "Which cmi cross reference id is not related to any parking taxes?",
        "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines"
    },
    "interaction": [
        {
            "utterance": "Show me all the cmi cross reference ids .",
            "sql": "select cmi_cross_references.cmi_cross_ref_id"
        },
        {
            "utterance": "What about those not related to any parking taxes ?",
            "sql": "select cmi_cross_references.cmi_cross_ref_id except select parking_fines.cmi_cross_ref_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Which campus was opened between 1935 and 1939?",
        "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    "interaction": [
        {
            "utterance": "How many campuses opened after 1935 ?",
            "sql": "select count ( campuses.* ) where campuses.year > = value"
        },
        {
            "utterance": "Among these campuses , how many of them opened before 1939 ?",
            "sql": "select count ( campuses.* ) where campuses.year > = value and campuses.year < = value"
        },
        {
            "utterance": "Show its name .",
            "sql": "select campuses.campus where campuses.year > = value and campuses.year < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    "interaction": [
        {
            "utterance": "Which campuses are in Northridge , Los Angeles ?",
            "sql": "select campuses.campus where campuses.location = value and campuses.county = value"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( campuses.* ) where campuses.location = value and campuses.county = value"
        },
        {
            "utterance": "How about the number of campuses that are in San Francisco , San Francisco ?",
            "sql": "select count ( campuses.* ) where campuses.location = value and campuses.county = value"
        },
        {
            "utterance": "Please add them .",
            "sql": "select count ( campuses.* ) ( select campuses.campus where campuses.location = value and campuses.county = value union select campuses.campus where campuses.location = value and campuses.county = value )"
        },
        {
            "utterance": "Show the names of the campuses .",
            "sql": "select campuses.campus where campuses.location = value and campuses.county = value union select campuses.campus where campuses.location = value and campuses.county = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996"
    },
    "interaction": [
        {
            "utterance": "What is the campus fee of `` California State University-Channel Islands '' in year 2003 ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value and csu_fees.year = value"
        },
        {
            "utterance": "How about `` San Jose State University '' in year 1995 ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value and csu_fees.year = value"
        },
        {
            "utterance": "How about `` San Jose State University '' in year 1996 ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value and csu_fees.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996"
    },
    "interaction": [
        {
            "utterance": "Show the campus fee of all campuses in year 1996 .",
            "sql": "select csu_fees.campusfee where csu_fees.year = value"
        },
        {
            "utterance": "What is the highest among them ?",
            "sql": "select max ( csu_fees.campusfee ) where csu_fees.year = value"
        },
        {
            "utterance": "What is the fee of `` San Francisco State University '' ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value and csu_fees.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"
    },
    "interaction": [
        {
            "utterance": "What is the maximum campus fee ?",
            "sql": "select max ( csu_fees.campusfee )"
        },
        {
            "utterance": "How many universities are there ?",
            "sql": "select count ( csu_fees.* )"
        },
        {
            "utterance": "How about the number of universities whose campus fee is greater than the average campus fee ?",
            "sql": "select count ( csu_fees.* ) where csu_fees.campusfee > ( select avg ( csu_fees.campusfee ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Which university is in Los Angeles county and opened after 1950?",
        "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"
    },
    "interaction": [
        {
            "utterance": "How many universities are in Los Angeles ?",
            "sql": "select count ( campuses.campus ) where campuses.county = value"
        },
        {
            "utterance": "How many of them opened after 1950 ?",
            "sql": "select count ( campuses.* ) where campuses.county = value and campuses.year > value"
        },
        {
            "utterance": "Please show their names .",
            "sql": "select campuses.campus where campuses.county = value and campuses.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which year has the most degrees conferred?",
        "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the total number of degrees conferred ?",
            "sql": "select sum ( degrees.degrees )"
        },
        {
            "utterance": "How many degrees are conferred in each year ?",
            "sql": "select degrees.year , count ( degrees.* ) group_by degrees.year"
        },
        {
            "utterance": "Which year has the most degrees conferred ?",
            "sql": "select degrees.year group_by degrees.year order_by sum ( degrees.degrees ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Which campus has the most degrees conferred in all times?",
        "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many campuses are there that have degrees conferred ?",
            "sql": "select count ( distinct degrees.campus )"
        },
        {
            "utterance": "How many degrees does each campus confer ?",
            "sql": "select degrees.campus , count ( degrees.* ) group_by degrees.campus"
        },
        {
            "utterance": "Which campus had the most degrees conferred in 1990 ?",
            "sql": "select degrees.campus where degrees.year = value group_by degrees.campus order_by sum ( degrees.degrees ) desc limit_value"
        },
        {
            "utterance": "How about overall ?",
            "sql": "select degrees.campus group_by degrees.campus order_by sum ( degrees.degrees ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which campus has the most faculties in year 2003?",
        "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many faculties are there in Campus 1 in year 2002 ?",
            "sql": "select faculty.faculty where faculty.year = value and faculty.campus = value"
        },
        {
            "utterance": "Which campus had the most faculty in year 2002 ?",
            "sql": "select campuses.campus where faculty.year = value order_by faculty.faculty desc limit_value"
        },
        {
            "utterance": "How about in year 2003 ?",
            "sql": "select campuses.campus where faculty.year = value order_by faculty.faculty desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 9,
    "final": {
        "utterance": "report the total number of degrees granted between 1998 and 2002 in each campus.",
        "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus"
    },
    "interaction": [
        {
            "utterance": "How many different campuses are there ?",
            "sql": "select count ( campuses.* )"
        },
        {
            "utterance": "How many degrees are granted in each campus over all years ?",
            "sql": "select campuses.campus , sum ( degrees.degrees ) group_by campuses.campus"
        },
        {
            "utterance": "How about between 1998 and 2002 ?",
            "sql": "select campuses.campus , sum ( degrees.degrees ) where degrees.year > = value and degrees.year < = value group_by campuses.campus"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 10,
    "final": {
        "utterance": "For each Orange county campus, report the number of degrees granted after 2000.",
        "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    "interaction": [
        {
            "utterance": "How many campuses are in Orange county ?",
            "sql": "select count ( campuses.* ) where campuses.county = value"
        },
        {
            "utterance": "How many degrees have these campuses granted over all years ?",
            "sql": "select campuses.campus , sum ( degrees.degrees ) where campuses.county = value group_by campuses.campus"
        },
        {
            "utterance": "How about the number after year 2000 ?",
            "sql": "select campuses.campus , sum ( degrees.degrees ) where campuses.county = value and degrees.year > = value group_by campuses.campus"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
        "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")"
    },
    "interaction": [
        {
            "utterance": "How many campuses are there in Orange county ?",
            "sql": "select count ( campuses.* ) where campuses.county = value"
        },
        {
            "utterance": "How many faculties are there in each campus in 2002 ?",
            "sql": "select campuses.campus , faculty.faculty where faculty.year = value"
        },
        {
            "utterance": "What campus has the largest faculty in Orange county in year 2002 ?",
            "sql": "select max ( faculty.faculty ) where faculty.year = value and campuses.county = value"
        },
        {
            "utterance": "Which campus has more faculties than this number ?",
            "sql": "select campuses.campus where faculty.year = value and faculty.faculty > ( select max ( faculty.faculty ) where faculty.year = value and campuses.county = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"
    },
    "interaction": [
        {
            "utterance": "Show the total enrollment of campus with id 1 in each year .",
            "sql": "select enrollments.totalenrollment_ay where enrollments.campus = value"
        },
        {
            "utterance": "What is the average of these numbers ?",
            "sql": "select avg ( enrollments.totalenrollment_ay ) where enrollments.campus = value"
        },
        {
            "utterance": "What campuses had more than 400 total enrollment in year 1956 ?",
            "sql": "select campuses.campus where enrollments.year = value and enrollments.totalenrollment_ay > value"
        },
        {
            "utterance": "Among them , which campuses have more than 200 full time enrollment ?",
            "sql": "select campuses.campus where enrollments.year = value and enrollments.totalenrollment_ay > value and enrollments.fte_ay > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "What is the total number of degrees that are conferred in `` California State University-Channel Islands '' ?",
            "sql": "select sum ( degrees.degrees ) where campuses.campus = value"
        },
        {
            "utterance": "How about `` San Jose State University '' over all years ?",
            "sql": "select sum ( degrees.degrees ) where campuses.campus = value"
        },
        {
            "utterance": "How about in year 2001 ?",
            "sql": "select degrees.degrees where campuses.campus = value and degrees.year = value"
        },
        {
            "utterance": "How about in year 2000 ?",
            "sql": "select degrees.degrees where campuses.campus = value and degrees.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\""
    },
    "interaction": [
        {
            "utterance": "Show the faculty lines in campus `` Humboldt State University '' in every year .",
            "sql": "select faculty.year , faculty.faculty where campuses.campus = value"
        },
        {
            "utterance": "How about those in campus `` Long Beach State University '' ?",
            "sql": "select faculty.year , faculty.faculty where campuses.campus = value"
        },
        {
            "utterance": "What is the number of faculty lines in this university in 2003 ?",
            "sql": "select faculty.faculty where faculty.year = value and campuses.campus = value"
        },
        {
            "utterance": "How about in 2002 ?",
            "sql": "select faculty.faculty where faculty.year = value and campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 15,
    "final": {
        "utterance": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T2.year  =  2004"
    },
    "interaction": [
        {
            "utterance": "How many campuses have faculty lines ?",
            "sql": "select count ( distinct campuses.campus )"
        },
        {
            "utterance": "Show their faculty lines in year 2004 .",
            "sql": "select faculty.faculty where faculty.year = value"
        },
        {
            "utterance": "How many of them are between 600 and 1000 ?",
            "sql": "select count ( * ) where faculty.faculty > = value and faculty.faculty < = value and faculty.year = value"
        },
        {
            "utterance": "Show the names of these campuses .",
            "sql": "select campuses.campus where faculty.faculty > = value and faculty.faculty < = value and faculty.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 16,
    "final": {
        "utterance": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many degrees were conferred in each university in year 2002 ?",
            "sql": "select campuses.campus , degrees.degrees where faculty.year = value"
        },
        {
            "utterance": "Among the results , which university conferred the most degrees ?",
            "sql": "select campuses.campus where faculty.year = value order_by degrees.degrees desc limit_value"
        },
        {
            "utterance": "What are its faculty lines ?",
            "sql": "select faculty.faculty where faculty.year = value order_by degrees.degrees desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\""
    },
    "interaction": [
        {
            "utterance": "When did `` San Jose State University '' open ?",
            "sql": "select campuses.year where campuses.campus = value"
        },
        {
            "utterance": "How many undergraduates were there in `` San Jose State University '' in year 2000 ?",
            "sql": "select sum ( discipline_enrollments.undergraduate ) where discipline_enrollments.year = value and campuses.campus = value"
        },
        {
            "utterance": "How about in year 2004 ?",
            "sql": "select sum ( discipline_enrollments.undergraduate ) where discipline_enrollments.year = value and campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
    },
    "interaction": [
        {
            "utterance": "Which county is `` San Francisco State University '' located ?",
            "sql": "select campuses.county where campuses.campus = value"
        },
        {
            "utterance": "How many graduates were there in this university in year 2003 ?",
            "sql": "select sum ( discipline_enrollments.graduate ) where discipline_enrollments.year = value and campuses.campus = value"
        },
        {
            "utterance": "How about in 2004 ?",
            "sql": "select sum ( discipline_enrollments.graduate ) where discipline_enrollments.year = value and campuses.campus = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "csu_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    "interaction": [
        {
            "utterance": "What is the location of `` San Francisco State University '' ?",
            "sql": "select campuses.location where campuses.campus = value"
        },
        {
            "utterance": "What are its campus fees over all years ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value"
        },
        {
            "utterance": "How about in year 2000 ?",
            "sql": "select csu_fees.campusfee where campuses.campus = value and csu_fees.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many faculty do we have?",
        "sql": "SELECT count(*) FROM Faculty"
    },
    "interaction": [
        {
            "utterance": "Show the information for all faculty .",
            "sql": "select faculty.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( faculty.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What ranks do we have for faculty?",
        "sql": "SELECT DISTINCT rank FROM Faculty"
    },
    "interaction": [
        {
            "utterance": "Show the rank for each member of faculty .",
            "sql": "select faculty.rank"
        },
        {
            "utterance": "What different ranks are there ?",
            "sql": "select distinct faculty.rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all the distinct buildings that have faculty rooms.",
        "sql": "SELECT DISTINCT building FROM Faculty"
    },
    "interaction": [
        {
            "utterance": "Show the building for each faculty member .",
            "sql": "select faculty.building"
        },
        {
            "utterance": "Show the distinct results among these .",
            "sql": "select distinct faculty.building"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the rank, first name, and last name for all the faculty.",
        "sql": "SELECT rank ,  Fname ,  Lname FROM Faculty"
    },
    "interaction": [
        {
            "utterance": "Show the first name of faculty .",
            "sql": "select faculty.fname"
        },
        {
            "utterance": "Also show the last name for them .",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Also show the rank for them .",
            "sql": "select faculty.rank , faculty.fname , faculty.lname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the first name, last name, and phone number for all female faculty members.",
        "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'"
    },
    "interaction": [
        {
            "utterance": "Show the information for all faculty .",
            "sql": "select faculty.*"
        },
        {
            "utterance": "Filter for female faculty members .",
            "sql": "select faculty.* where faculty.sex = value"
        },
        {
            "utterance": "Only show the first name , last name , and phone number for them .",
            "sql": "select faculty.fname , faculty.lname , faculty.phone where faculty.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show ids for all the male faculty.",
        "sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'"
    },
    "interaction": [
        {
            "utterance": "Show ids for all faculty .",
            "sql": "select faculty.facid"
        },
        {
            "utterance": "Only show the ids for male .",
            "sql": "select faculty.facid where faculty.sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many female Professors do we have?",
        "sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\""
    },
    "interaction": [
        {
            "utterance": "How many faculty are there ?",
            "sql": "select count ( faculty.* )"
        },
        {
            "utterance": "What about female ones ?",
            "sql": "select count ( faculty.* ) where faculty.sex = value"
        },
        {
            "utterance": "What about female professors ?",
            "sql": "select count ( faculty.* ) where faculty.sex = value and faculty.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\""
    },
    "interaction": [
        {
            "utterance": "Show the information for all faculty .",
            "sql": "select faculty.*"
        },
        {
            "utterance": "Only show the information for the faculty named Jerry Prince .",
            "sql": "select faculty.* where faculty.fname = value and faculty.lname = value"
        },
        {
            "utterance": "Show the phone , room , and building for this person .",
            "sql": "select faculty.phone , faculty.room , faculty.building where faculty.fname = value and faculty.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 8,
    "final": {
        "utterance": "How many Professors are in building NEB?",
        "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""
    },
    "interaction": [
        {
            "utterance": "What is the total count of faculty members ?",
            "sql": "select count ( faculty.* )"
        },
        {
            "utterance": "How many are Professors ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value"
        },
        {
            "utterance": "How many of these are in building NEB ?",
            "sql": "select count ( faculty.* ) where faculty.rank = value and faculty.building = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the first name and last name for all the instructors.",
        "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\""
    },
    "interaction": [
        {
            "utterance": "Show the first name and last name for all faculty .",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "What about those with rank as Instructor ?",
            "sql": "select faculty.fname , faculty.lname where faculty.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all the buildings along with the number of faculty members the buildings have.",
        "sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building"
    },
    "interaction": [
        {
            "utterance": "Show the building for all Faculty .",
            "sql": "select faculty.building"
        },
        {
            "utterance": "Show how many faculty members each building houses .",
            "sql": "select faculty.building , count ( faculty.* ) group_by faculty.building"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Which building has most faculty members?",
        "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the building for all Faculty .",
            "sql": "select faculty.building"
        },
        {
            "utterance": "Show the number of faculty members for each of those buildings .",
            "sql": "select faculty.building , count ( faculty.* ) group_by faculty.building"
        },
        {
            "utterance": "List them in descending order of the count .",
            "sql": "select faculty.building , count ( faculty.* ) group_by faculty.building order_by count ( faculty.* ) desc"
        },
        {
            "utterance": "Which building has the most ?",
            "sql": "select faculty.building group_by faculty.building order_by count ( faculty.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all the buildings that have at least 10 professors.",
        "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
    },
    "interaction": [
        {
            "utterance": "Show the building for all Faculty .",
            "sql": "select faculty.building"
        },
        {
            "utterance": "How about those for professors ?",
            "sql": "select faculty.building where faculty.rank = value"
        },
        {
            "utterance": "For each of the buildings , show the number of professors .",
            "sql": "select faculty.building , count ( faculty.* ) where faculty.rank = value group_by faculty.building"
        },
        {
            "utterance": "Which of them have at least 10 ?",
            "sql": "select faculty.building where faculty.rank = value group_by faculty.building having count ( faculty.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For each faculty rank, show the number of faculty members who have it.",
        "sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank"
    },
    "interaction": [
        {
            "utterance": "Show the rank for all faculty members .",
            "sql": "select faculty.rank"
        },
        {
            "utterance": "For each of them , show the number of faculty members .",
            "sql": "select faculty.rank , count ( faculty.* ) group_by faculty.rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show all the ranks and the number of male and female faculty for each rank.",
        "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"
    },
    "interaction": [
        {
            "utterance": "Show all rank and sex for each faculty member .",
            "sql": "select faculty.rank , faculty.sex"
        },
        {
            "utterance": "Show the counts of faculty grouped by both rank and sex .",
            "sql": "select faculty.rank , faculty.sex , count ( faculty.* ) group_by faculty.rank , faculty.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which rank has the smallest number of faculty members?",
        "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the rank for all Faculty .",
            "sql": "select faculty.rank"
        },
        {
            "utterance": "For each of them , show the number of faculty members .",
            "sql": "select faculty.rank , count ( faculty.* ) group_by faculty.rank"
        },
        {
            "utterance": "Order them by the number .",
            "sql": "select faculty.rank group_by faculty.rank order_by count ( faculty.* )"
        },
        {
            "utterance": "Which rank has the smallest number ?",
            "sql": "select faculty.rank group_by faculty.rank order_by count ( faculty.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the number of male and female assistant professors.",
        "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"
    },
    "interaction": [
        {
            "utterance": "Show the sex for each Faculty member .",
            "sql": "select faculty.sex"
        },
        {
            "utterance": "Show the result for only assistant professors .",
            "sql": "select faculty.sex where faculty.rank = value"
        },
        {
            "utterance": "How many assistant professors are there of each sex ?",
            "sql": "select faculty.sex , count ( faculty.* ) where faculty.rank = value group_by faculty.sex"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the first name and last name of Linda Smith's advisor?",
        "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""
    },
    "interaction": [
        {
            "utterance": "Show the first name and last name for all Faculty .",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Also show the names of students that each one advises .",
            "sql": "select faculty.fname , faculty.lname , student.fname , student.lname"
        },
        {
            "utterance": "Who is Linda Smith 's advisor ?",
            "sql": "select faculty.fname , faculty.lname where student.fname = value and student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the ids of students whose advisors are professors.",
        "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\""
    },
    "interaction": [
        {
            "utterance": "Show the student ids .",
            "sql": "select student.stuid"
        },
        {
            "utterance": "Also show the ranks of their advisors .",
            "sql": "select student.stuid , faculty.rank"
        },
        {
            "utterance": "Show the student id for those whose advisors are professors ?",
            "sql": "select student.stuid where faculty.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Show first name and last name for all the students advised by Michael Goodrich.",
        "sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\""
    },
    "interaction": [
        {
            "utterance": "Show first name and last name for all the students .",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "Also show their advisor 's first name and last name .",
            "sql": "select student.fname , student.lname , faculty.fname , faculty.lname"
        },
        {
            "utterance": "Who are advised by Michael Goodrich ?",
            "sql": "select student.fname , student.lname where faculty.fname = value and faculty.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"
    },
    "interaction": [
        {
            "utterance": "Show the faculty id of each faculty member",
            "sql": "select faculty.facid"
        },
        {
            "utterance": "For each of them , also show the number of students he or she advises .",
            "sql": "select faculty.facid , count ( * ) group_by faculty.facid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Show all the faculty ranks and the number of students advised by each rank.",
        "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"
    },
    "interaction": [
        {
            "utterance": "Show all the faculty ranks",
            "sql": "select faculty.rank"
        },
        {
            "utterance": "For each of those ranks , show the number of students advised .",
            "sql": "select faculty.rank , count ( * ) group_by faculty.rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the first and last name of the faculty who has the most students?",
        "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the first and last name of the faculty .",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "For each faculty member , also count the number of students advised .",
            "sql": "select faculty.fname , faculty.lname , count ( * ) group_by faculty.facid"
        },
        {
            "utterance": "Show the names in descending order of the number .",
            "sql": "select faculty.fname , faculty.lname group_by faculty.facid order_by count ( * ) desc"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select faculty.fname , faculty.lname group_by faculty.facid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Show the ids for all the faculty members who have at least 2 students.",
        "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the ids for all the faculty members",
            "sql": "select faculty.facid"
        },
        {
            "utterance": "For each of them , also count the number of students advised .",
            "sql": "select faculty.facid , count ( * ) group_by faculty.facid"
        },
        {
            "utterance": "Who have at least 2 students ?",
            "sql": "select faculty.facid group_by faculty.facid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Show ids for the faculty members who don't advise any student.",
        "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student"
    },
    "interaction": [
        {
            "utterance": "Show all faculty members advising a student .",
            "sql": "select student.advisor"
        },
        {
            "utterance": "Show ids for those who do n't .",
            "sql": "select faculty.facid except select student.advisor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What activities do we have?",
        "sql": "SELECT activity_name FROM Activity"
    },
    "interaction": [
        {
            "utterance": "Show information for all activities .",
            "sql": "select activity.*"
        },
        {
            "utterance": "Show the name for those .",
            "sql": "select activity.activity_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many activities do we have?",
        "sql": "SELECT count(*) FROM Activity"
    },
    "interaction": [
        {
            "utterance": "Show info for all activities .",
            "sql": "select activity.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( activity.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 27,
    "final": {
        "utterance": "How many faculty members participate in an activity?",
        "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"
    },
    "interaction": [
        {
            "utterance": "Show the faculty id of members participating in an activity .",
            "sql": "select faculty_participates_in.facid"
        },
        {
            "utterance": "How many such members are there ?",
            "sql": "select count ( distinct faculty_participates_in.facid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the ids of the faculty who don't participate in any activity.",
        "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in"
    },
    "interaction": [
        {
            "utterance": "Show the ids of the faculty who participate in an activity .",
            "sql": "select faculty_participates_in.facid"
        },
        {
            "utterance": "Show the ids for those who do n't .",
            "sql": "select faculty.facid except select faculty_participates_in.facid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"
    },
    "interaction": [
        {
            "utterance": "Show the ids of all the faculty members who participate in an activity .",
            "sql": "select faculty_participates_in.facid"
        },
        {
            "utterance": "Show the ids of all the faculty members who advise a student .",
            "sql": "select student.advisor"
        },
        {
            "utterance": "Show the ids of all the faculty members who do both .",
            "sql": "select faculty_participates_in.facid intersect select student.advisor"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many activities does Mark Giuliano participate in?",
        "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
    },
    "interaction": [
        {
            "utterance": "Show first and last name and activity ids for all faculty participating in activities .",
            "sql": "select faculty.fname , faculty.lname , faculty_participates_in.actid"
        },
        {
            "utterance": "How many activities does Mark Giuliano participate in ?",
            "sql": "select count ( * ) where faculty.fname = value and faculty.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Show the names of all the activities Mark Giuliano participates in.",
        "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all the activities .",
            "sql": "select activity.activity_name"
        },
        {
            "utterance": "Show the names of those with faculty participation .",
            "sql": "select activity.activity_name , faculty.fname , faculty.lname"
        },
        {
            "utterance": "What are those activities which Mark Giuliano participates in ?",
            "sql": "select activity.activity_name where faculty.fname = value and faculty.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"
    },
    "interaction": [
        {
            "utterance": "Show the first and last name of all the faculty members .",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "Which of those have participated in some activity ?",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "For each of them , also show the number of activities they participated in .",
            "sql": "select faculty.fname , faculty.lname , count ( * ) group_by faculty.facid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Show all the activity names and the number of faculty involved in each activity.",
        "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
    },
    "interaction": [
        {
            "utterance": "Show all the activity names .",
            "sql": "select activity.activity_name"
        },
        {
            "utterance": "For each of them , how many faculty are involved ?",
            "sql": "select activity.activity_name , count ( * ) group_by activity.actid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the first and last name of the faculty participating in the most activities?",
        "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the first and last name for all faculty .",
            "sql": "select faculty.fname , faculty.lname"
        },
        {
            "utterance": "For each of them , also count the number of activities they participate in .",
            "sql": "select faculty.fname , faculty.lname , count ( * ) group_by faculty.facid"
        },
        {
            "utterance": "Sort the names in the descending order of this count .",
            "sql": "select faculty.fname , faculty.lname group_by faculty.facid order_by count ( * ) desc"
        },
        {
            "utterance": "Who participates in the most activities ?",
            "sql": "select faculty.fname , faculty.lname group_by faculty.facid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What is the name of the activity that has the most faculty members involved in?",
        "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all activity names .",
            "sql": "select activity.activity_name"
        },
        {
            "utterance": "For each of them , also show the number of faculty members involved .",
            "sql": "select activity.activity_name , count ( * ) group_by activity.actid"
        },
        {
            "utterance": "Sort the names in the descending order of the faculty counts .",
            "sql": "select activity.activity_name group_by activity.actid order_by count ( * ) desc"
        },
        {
            "utterance": "Which activity has the most ?",
            "sql": "select activity.activity_name group_by activity.actid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Show the ids of the students who don't participate in any activity.",
        "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in"
    },
    "interaction": [
        {
            "utterance": "Show the student ids who participate in an activity .",
            "sql": "select participates_in.stuid"
        },
        {
            "utterance": "Show the ids of those who do n't .",
            "sql": "select student.stuid except select participates_in.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 37,
    "final": {
        "utterance": "Show the ids for all the students who participate in an activity and are under 20.",
        "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20"
    },
    "interaction": [
        {
            "utterance": "Show the ids for the students who participate in an activity .",
            "sql": "select participates_in.stuid"
        },
        {
            "utterance": "Among those , who are under 20 ?",
            "sql": "select participates_in.stuid intersect select student.stuid where student.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the first and last name of the student participating in the most activities?",
        "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the first and last name of the student .",
            "sql": "select student.fname , student.lname"
        },
        {
            "utterance": "For each of them , count the number of activities .",
            "sql": "select student.fname , student.lname , count ( * ) group_by student.stuid"
        },
        {
            "utterance": "Sort the names in descending order by the number of activities .",
            "sql": "select student.fname , student.lname group_by student.stuid order_by count ( * ) desc"
        },
        {
            "utterance": "Who has the most ?",
            "sql": "select student.fname , student.lname group_by student.stuid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the name of the activity with the most students?",
        "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the names of activities .",
            "sql": "select activity.activity_name"
        },
        {
            "utterance": "For each of them , also show the number of students .",
            "sql": "select activity.activity_name , count ( * ) group_by activity.actid"
        },
        {
            "utterance": "Sort the names in descending order by this number .",
            "sql": "select activity.activity_name group_by activity.actid order_by count ( * ) desc"
        },
        {
            "utterance": "Which has the most ?",
            "sql": "select activity.activity_name group_by activity.actid order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "sql": "SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Show the first names of the faculty members .",
            "sql": "select faculty.fname"
        },
        {
            "utterance": "Which of them participate in canoeing ?",
            "sql": "select distinct faculty.fname where activity.activity_name = value"
        },
        {
            "utterance": "How about Kayaking ?",
            "sql": "select distinct faculty.fname where activity.activity_name = value"
        },
        {
            "utterance": "Show the first names for those participating in either of the two .",
            "sql": "select distinct faculty.fname where activity.activity_name = value or activity.activity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 41,
    "final": {
        "utterance": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "sql": "SELECT fname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Show the first name of faculty and their activity names .",
            "sql": "select faculty.fname , activity.activity_name"
        },
        {
            "utterance": "Which of them practice canoeing or kayaking ?",
            "sql": "select distinct faculty.fname where activity.activity_name = value or activity.activity_name = value"
        },
        {
            "utterance": "Which of them do not ?",
            "sql": "select faculty.fname except select distinct faculty.fname where activity.activity_name = value or activity.activity_name = value"
        },
        {
            "utterance": "Who among these are professors ?",
            "sql": "select faculty.fname where faculty.rank = value except select distinct faculty.fname where activity.activity_name = value or activity.activity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "activity_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "sql": "SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'"
    },
    "interaction": [
        {
            "utterance": "Find the first names of the faculty members",
            "sql": "select faculty.fname"
        },
        {
            "utterance": "Show the activity names for them .",
            "sql": "select faculty.fname , activity.activity_name"
        },
        {
            "utterance": "Which of them participate in canoeing ?",
            "sql": "select faculty.fname where activity.activity_name = value"
        },
        {
            "utterance": "Which of them participate in kayaking ?",
            "sql": "select faculty.fname where activity.activity_name = value"
        },
        {
            "utterance": "Which of them participate in both .",
            "sql": "select faculty.fname where activity.activity_name = value intersect select faculty.fname where activity.activity_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\""
    },
    "interaction": [
        {
            "utterance": "How many authors are from college `` Florida '' ?",
            "sql": "select count ( submission.author ) where submission.college = value"
        },
        {
            "utterance": "How about the college `` Temple '' ?",
            "sql": "select count ( submission.author ) where submission.college = value"
        },
        {
            "utterance": "What is the sum of the number of authors from these two colleges ?",
            "sql": "select count ( submission.author ) where submission.college = value or submission.college = value"
        },
        {
            "utterance": "Please show the authors ' names .",
            "sql": "select submission.author where submission.college = value or submission.college = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the author of the submission with the highest score?",
        "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many authors have sumbitted their work ?",
            "sql": "select count ( submission.author )"
        },
        {
            "utterance": "Please show their names .",
            "sql": "select submission.author"
        },
        {
            "utterance": "What is the author of the submission with the lowest score ?",
            "sql": "select submission.author order_by submission.scores asc limit_value"
        },
        {
            "utterance": "How about the highest score ?",
            "sql": "select submission.author order_by submission.scores desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the most common college of authors of submissions.",
        "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many authors have sumbitted their work ?",
            "sql": "select count ( submission.author )"
        },
        {
            "utterance": "Please show their colleges .",
            "sql": "select submission.college"
        },
        {
            "utterance": "How many unique colleges are there ?",
            "sql": "select count ( distinct submission.college )"
        },
        {
            "utterance": "Among these colleges , which one has the most submissions ?",
            "sql": "select submission.college group_by submission.college order_by count ( submission.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.",
        "sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80"
    },
    "interaction": [
        {
            "utterance": "What is the largest submission score ?",
            "sql": "select max ( submission.scores )"
        },
        {
            "utterance": "How many submissions have a score larger than 90 ?",
            "sql": "select count ( submission.* ) where submission.scores > value"
        },
        {
            "utterance": "How about the number of submissions with a score less than 80 ?",
            "sql": "select count ( submission.* ) where submission.scores < value"
        },
        {
            "utterance": "What are the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80 ?",
            "sql": "select submission.college where submission.scores > value intersect select submission.college where submission.scores < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the result of the submission with the highest score.",
        "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many submissions have been accepted ?",
            "sql": "select count ( acceptance.* ) where acceptance.result = value"
        },
        {
            "utterance": "What is the average submission score of these works ?",
            "sql": "select avg ( submission.scores ) where acceptance.result = value"
        },
        {
            "utterance": "Which submission has the highest score ? Show its submission ID .",
            "sql": "select submission.submission_id order_by submission.scores desc limit_value"
        },
        {
            "utterance": "How about its submission result ?",
            "sql": "select acceptance.result order_by submission.scores desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 5,
    "final": {
        "utterance": "Show each author and the number of workshops they submitted to.",
        "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author"
    },
    "interaction": [
        {
            "utterance": "How many different workshops are there ?",
            "sql": "select count ( workshop.* )"
        },
        {
            "utterance": "How many authors are there ?",
            "sql": "select count ( submission.author )"
        },
        {
            "utterance": "Show each author and the number of workshops they submitted to .",
            "sql": "select submission.author , count ( distinct acceptance.workshop_id ) group_by submission.author"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "workshop_paper",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the authors who have submissions to more than one workshop.",
        "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which workshops happened in New York USA ?",
            "sql": "select workshop.name where workshop.venue = value"
        },
        {
            "utterance": "How many workshops have been held ?",
            "sql": "select count ( workshop.* )"
        },
        {
            "utterance": "How many authors have submitted to more than one workshop ?",
            "sql": "select count ( distinct submission.author ) group_by submission.author having count ( distinct acceptance.workshop_id ) > value"
        },
        {
            "utterance": "Please show their names .",
            "sql": "select submission.author group_by submission.author having count ( distinct acceptance.workshop_id ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 0,
    "final": {
        "utterance": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
    },
    "interaction": [
        {
            "utterance": "List all the information about the tracks .",
            "sql": "select track.*"
        },
        {
            "utterance": "Which names and seatings of the tracks that are opened later than the year 1950 ?",
            "sql": "select track.name , track.seating where track.year_opened > value"
        },
        {
            "utterance": "What about after the year 2000 ?",
            "sql": "select track.name , track.seating where track.year_opened > value"
        },
        {
            "utterance": "Order them by seating .",
            "sql": "select track.name , track.seating where track.year_opened > value order_by track.seating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name, location and seating for the most recently opened track?",
        "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order all the tracks by the year of opening , from the most recent to the least recent .",
            "sql": "select track.* order_by track.year_opened desc"
        },
        {
            "utterance": "Which 4 are the most recent ones ? Show the name , location and seating .",
            "sql": "select track.name , track.location , track.seating order_by track.year_opened desc limit_value"
        },
        {
            "utterance": "What about the most recent 1 ?",
            "sql": "select track.name , track.location , track.seating order_by track.year_opened desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the minimum, maximum, and average seating for all tracks.",
        "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track"
    },
    "interaction": [
        {
            "utterance": "What is the total seating numbers from the track ?",
            "sql": "select sum ( track.seating )"
        },
        {
            "utterance": "What about the minimum , maximum , and average ?",
            "sql": "select min ( track.seating ) , max ( track.seating ) , avg ( track.seating )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name, location, open year for all tracks with a seating higher than the average.",
        "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)"
    },
    "interaction": [
        {
            "utterance": "What is the total seating numbers from the track ?",
            "sql": "select sum ( track.seating )"
        },
        {
            "utterance": "What about the average value ?",
            "sql": "select avg ( track.seating )"
        },
        {
            "utterance": "Which tracks have a higher seating number than that ?",
            "sql": "select track.* where track.seating > ( select avg ( track.seating ) )"
        },
        {
            "utterance": "Only keep the name , location , open year of them .",
            "sql": "select track.name , track.location , track.year_opened where track.seating > ( select avg ( track.seating ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the race class with most number of races.",
        "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the classes from the race .",
            "sql": "select race.*"
        },
        {
            "utterance": "For each class , show the number of races for each .",
            "sql": "select race.class , count ( race.* ) group_by race.class"
        },
        {
            "utterance": "How many are there for the class 'GT ' ?",
            "sql": "select race.class , count ( race.* ) group_by race.class having race.class = value"
        },
        {
            "utterance": "Which one has the most number of races ?",
            "sql": "select race.class group_by race.class order_by count ( race.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 5,
    "final": {
        "utterance": "List the race class with at least two races.",
        "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "For each class , show the number of races for each .",
            "sql": "select race.class , count ( race.* ) group_by race.class"
        },
        {
            "utterance": "Which race classes have more than 3 races ?",
            "sql": "select race.class group_by race.class having count ( race.* ) > value"
        },
        {
            "utterance": "What about at least two ?",
            "sql": "select race.class group_by race.class having count ( race.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names for tracks without a race in class 'GT'.",
        "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"
    },
    "interaction": [
        {
            "utterance": "How many races has the class 'GT ' ?",
            "sql": "select count ( race.* ) where race.class = value"
        },
        {
            "utterance": "What about without that class ?",
            "sql": "select count ( race.* ) where race.class != value"
        },
        {
            "utterance": "What are the track names of them ?",
            "sql": "select track.name except select track.name where race.class = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 7,
    "final": {
        "utterance": "Show all track names that have had no races.",
        "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"
    },
    "interaction": [
        {
            "utterance": "What are the names and locations of the tracks ?",
            "sql": "select track.name , track.location"
        },
        {
            "utterance": "Which names of the tracks have at least one race ?",
            "sql": "select track.name where track.track_id in ( select race.track_id )"
        },
        {
            "utterance": "What about no races ?",
            "sql": "select track.name where track.track_id not in ( select race.track_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of track and the number of races in each track.",
        "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of the tracks for each race ?",
            "sql": "select track.name , race.name"
        },
        {
            "utterance": "How many races for the track name 'Auto Club Speedway ' ?",
            "sql": "select track.name , race.name , count ( * ) group_by race.track_id having track.name = value"
        },
        {
            "utterance": "For each track name , how many races are there ?",
            "sql": "select track.name , count ( * ) group_by race.track_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name of track with most number of races.",
        "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the tracks for each race ?",
            "sql": "select track.name , race.name"
        },
        {
            "utterance": "For each track , what is the number of races ?",
            "sql": "select track.name , race.name , count ( * ) group_by race.track_id"
        },
        {
            "utterance": "Which track name has the most number of races ?",
            "sql": "select track.name group_by race.track_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "race_track",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the name and location of track with 1 race.",
        "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the tracks for each race ?",
            "sql": "select track.name , race.name"
        },
        {
            "utterance": "For each track name , how many races for each ?",
            "sql": "select track.name , count ( * ) group_by race.track_id"
        },
        {
            "utterance": "How many tracks have at least two races ?",
            "sql": "select count ( * ) group_by race.track_id having count ( * ) > = value"
        },
        {
            "utterance": "What about only one race ? Show the track name and location ?",
            "sql": "select track.name , track.location group_by race.track_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 0,
    "final": {
        "utterance": "How many apartment bookings are there in total?",
        "sql": "SELECT count(*) FROM Apartment_Bookings"
    },
    "interaction": [
        {
            "utterance": "List all the apartment booking records .",
            "sql": "select apartment_bookings.*"
        },
        {
            "utterance": "How many are there in total ?",
            "sql": "select count ( apartment_bookings.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the start dates and end dates of all the apartment bookings.",
        "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings"
    },
    "interaction": [
        {
            "utterance": "List all the apartment booking records .",
            "sql": "select apartment_bookings.*"
        },
        {
            "utterance": "How many in total ?",
            "sql": "select count ( apartment_bookings.* )"
        },
        {
            "utterance": "For each of the record , only show the start dates and end dates .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_end_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 2,
    "final": {
        "utterance": "Show all distinct building descriptions.",
        "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings"
    },
    "interaction": [
        {
            "utterance": "What are the information about all the apartment buildings",
            "sql": "select apartment_buildings.*"
        },
        {
            "utterance": "How many unique building descriptions are there ?",
            "sql": "select count ( distinct apartment_buildings.building_description )"
        },
        {
            "utterance": "Show their details .",
            "sql": "select distinct apartment_buildings.building_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the short names of the buildings managed by \"Emma\".",
        "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\""
    },
    "interaction": [
        {
            "utterance": "List all the building manager names .",
            "sql": "select apartment_buildings.building_manager"
        },
        {
            "utterance": "How many are manged by `` Brenden '' ?",
            "sql": "select count ( apartment_buildings.building_manager ) where apartment_buildings.building_manager = value"
        },
        {
            "utterance": "What about `` Emma '' ?",
            "sql": "select count ( apartment_buildings.building_manager ) where apartment_buildings.building_manager = value"
        },
        {
            "utterance": "List the short names of the buildings managed by her .",
            "sql": "select apartment_buildings.building_short_name where apartment_buildings.building_manager = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\""
    },
    "interaction": [
        {
            "utterance": "List all the building manager names .",
            "sql": "select apartment_buildings.building_manager"
        },
        {
            "utterance": "How many are manged by `` Emma '' ?",
            "sql": "select count ( apartment_buildings.building_manager ) where apartment_buildings.building_manager = value"
        },
        {
            "utterance": "What about `` Brenden '' ?",
            "sql": "select count ( apartment_buildings.building_manager ) where apartment_buildings.building_manager = value"
        },
        {
            "utterance": "What are the addresses and phones of all the buildings managed by him ?",
            "sql": "select apartment_buildings.building_address , apartment_buildings.building_phone where apartment_buildings.building_manager = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the building full names that contain the word \"court\"?",
        "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    "interaction": [
        {
            "utterance": "List all the building full names .",
            "sql": "select apartment_buildings.building_full_name"
        },
        {
            "utterance": "Show the ones if there is the full name with `` The Eugene '' .",
            "sql": "select apartment_buildings.building_full_name where apartment_buildings.building_full_name like value"
        },
        {
            "utterance": "What are the building full names which contain the word `` court '' ?",
            "sql": "select apartment_buildings.building_full_name where apartment_buildings.building_full_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
    },
    "interaction": [
        {
            "utterance": "List the number of bathrooms for each apartment .",
            "sql": "select apartments.bathroom_count"
        },
        {
            "utterance": "What is the average number of bathrooms ?",
            "sql": "select avg ( apartments.bathroom_count )"
        },
        {
            "utterance": "List the minimum and maximum number .",
            "sql": "select min ( apartments.bathroom_count ) , max ( apartments.bathroom_count )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the average number of bedrooms of all apartments?",
        "sql": "SELECT avg(bedroom_count) FROM Apartments"
    },
    "interaction": [
        {
            "utterance": "List the number of bathrooms for each apartment .",
            "sql": "select apartments.bathroom_count"
        },
        {
            "utterance": "What about the minimum and maximum number ?",
            "sql": "select min ( apartments.bathroom_count ) , max ( apartments.bathroom_count )"
        },
        {
            "utterance": "How about the average ?",
            "sql": "select avg ( apartments.bedroom_count )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 8,
    "final": {
        "utterance": "Return the apartment number and the number of rooms for each apartment.",
        "sql": "SELECT apt_number ,  room_count FROM Apartments"
    },
    "interaction": [
        {
            "utterance": "Show the number of rooms with each apartment number in the beginning .",
            "sql": "select apartments.apt_number , apartments.room_count"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    "interaction": [
        {
            "utterance": "How many type codes are there ?",
            "sql": "select count ( distinct apartments.apt_type_code )"
        },
        {
            "utterance": "For each one , show how many apartments .",
            "sql": "select apartments.apt_type_code , count ( apartments.* ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "How many apartments have the type code `` Studio '' ?",
            "sql": "select count ( apartments.* ) where apartments.apt_type_code = value"
        },
        {
            "utterance": "Among those apartments , what is the average number of rooms ?",
            "sql": "select avg ( apartments.room_count ) where apartments.apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 10,
    "final": {
        "utterance": "Return the apartment numbers of the apartments with type code \"Flat\".",
        "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    "interaction": [
        {
            "utterance": "How many type codes are there ?",
            "sql": "select count ( distinct apartments.apt_type_code )"
        },
        {
            "utterance": "For each type code , show how many apartments .",
            "sql": "select apartments.apt_type_code , count ( apartments.* ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "What are the apartment numbers of the apartments with type code `` Studio '' ?",
            "sql": "select apartments.apt_number where apartments.apt_type_code = value"
        },
        {
            "utterance": "What about type code `` Flat '' ?",
            "sql": "select apartments.apt_number where apartments.apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the first names and last names of all guests",
        "sql": "SELECT guest_first_name ,  guest_last_name FROM Guests"
    },
    "interaction": [
        {
            "utterance": "How many guests are there ?",
            "sql": "select count ( guests.* )"
        },
        {
            "utterance": "Keep the first and last names of them .",
            "sql": "select guests.guest_first_name , guests.guest_last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 12,
    "final": {
        "utterance": "Return the date of birth for all the guests with gender code \"Male\".",
        "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    "interaction": [
        {
            "utterance": "How many female guests are there ?",
            "sql": "select count ( guests.* ) where guests.gender_code = value"
        },
        {
            "utterance": "What about male ?",
            "sql": "select count ( guests.* ) where guests.gender_code = value"
        },
        {
            "utterance": "What are the date of birth of them ?",
            "sql": "select guests.date_of_birth where guests.gender_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
        "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    "interaction": [
        {
            "utterance": "For each apartment booking , show the start date , and end date .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        },
        {
            "utterance": "Also show the apartment numbers with each record .",
            "sql": "select apartments.apt_number , apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the booking start and end dates of the apartments with type code \"Duplex\"?",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\""
    },
    "interaction": [
        {
            "utterance": "For each apartment booking , show the start date , and end date .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        },
        {
            "utterance": "Also show the type code with each record .",
            "sql": "select apartments.apt_type_code , apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        },
        {
            "utterance": "What are the booking start and end dates of the apartments with type code `` Studio '' ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.apt_type_code = value"
        },
        {
            "utterance": "How about the type code `` Duplex '' ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.apt_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "List all the booking start and end dates .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        },
        {
            "utterance": "Also show the bedroom number of each record .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date , apartments.bedroom_count"
        },
        {
            "utterance": "Keep the ones that have 3 bedrooms , show the booking start and end dates only ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.bedroom_count = value"
        },
        {
            "utterance": "What about more than 2 bedrooms ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where apartments.bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    "interaction": [
        {
            "utterance": "List all the unique booking status codes .",
            "sql": "select distinct apartment_bookings.booking_status_code"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct apartment_bookings.booking_status_code )"
        },
        {
            "utterance": "Show these codes with apartment numbers .",
            "sql": "select apartment_bookings.booking_status_code , apartments.apt_number"
        },
        {
            "utterance": "What is the code of the apartment with apartment number `` Suite 634 '' ?",
            "sql": "select apartment_bookings.booking_status_code where apartments.apt_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "How many rooms are there in total ?",
            "sql": "select sum ( apartments.room_count )"
        },
        {
            "utterance": "What about apartments ?",
            "sql": "select count ( apartments.* )"
        },
        {
            "utterance": "Show all the apartment numbers and the status code for each one .",
            "sql": "select apartments.apt_number , apartment_bookings.booking_status_code"
        },
        {
            "utterance": "Show the distinct apartment numbers of the apartments where the status code is not `` Confirmed '' .",
            "sql": "select distinct apartments.apt_number where apartment_bookings.booking_status_code != value"
        },
        {
            "utterance": "How about the status code is `` Confirmed '' .",
            "sql": "select distinct apartments.apt_number where apartment_bookings.booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    "interaction": [
        {
            "utterance": "How many rooms are there in total ?",
            "sql": "select sum ( apartments.room_count )"
        },
        {
            "utterance": "Show all the booking status codes and number of apartments for each .",
            "sql": "select apartment_bookings.booking_status_code , count ( apartment_bookings.* ) group_by apartment_bookings.booking_status_code"
        },
        {
            "utterance": "What about the average room count of the apartments that have booking status code `` Confirmed '' ?",
            "sql": "select avg ( apartments.room_count ) where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "What about the booking status code `` Provisional '' ?",
            "sql": "select avg ( apartments.room_count ) where apartment_bookings.booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
        "sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    "interaction": [
        {
            "utterance": "List all the guests ' first and last names .",
            "sql": "select guests.guest_first_name , guests.guest_last_name"
        },
        {
            "utterance": "Also show the booking status code of each one .",
            "sql": "select guests.guest_first_name , guests.guest_last_name , apartment_bookings.booking_status_code"
        },
        {
            "utterance": "What are the first names , start dates , and end dates of all the apartment bookings ?",
            "sql": "select guests.guest_first_name , apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""
    },
    "interaction": [
        {
            "utterance": "List all the booking start and end dates .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        },
        {
            "utterance": "Show the bedroom number of each record .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date , apartments.bedroom_count"
        },
        {
            "utterance": "Show the start and end dates of the apartment bookings made by male guests .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where guests.gender_code = value"
        },
        {
            "utterance": "What about female guests ?",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date where guests.gender_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 21,
    "final": {
        "utterance": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
        "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    "interaction": [
        {
            "utterance": "List all the guests ' first and last names .",
            "sql": "select guests.guest_first_name , guests.guest_last_name"
        },
        {
            "utterance": "Among all the guests , which of them have `` Provisional '' the apartment bookings ?",
            "sql": "select guests.guest_first_name , guests.guest_last_name where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "How about `` Confirmed '' ?",
            "sql": "select guests.guest_first_name , guests.guest_last_name where apartment_bookings.booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the facility codes of apartments with more than 4 bedrooms.",
        "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    "interaction": [
        {
            "utterance": "List all the unique facility codes .",
            "sql": "select distinct apartment_facilities.facility_code"
        },
        {
            "utterance": "List all the apartments and the facility codes of them .",
            "sql": "select *"
        },
        {
            "utterance": "How many of them have more than 3 bedrooms ?",
            "sql": "select count ( * ) where apartments.bedroom_count > value"
        },
        {
            "utterance": "Show the facility codes of those where there are more than 4 bedrooms .",
            "sql": "select apartment_facilities.facility_code where apartments.bedroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 23,
    "final": {
        "utterance": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""
    },
    "interaction": [
        {
            "utterance": "List all unique facility codes .",
            "sql": "select distinct apartment_facilities.facility_code"
        },
        {
            "utterance": "List all the apartments and the facility codes of them .",
            "sql": "select *"
        },
        {
            "utterance": "Calculate how many rooms are there for those apartments with facility code `` Gym '' .",
            "sql": "select sum ( apartments.room_count ) where apartment_facilities.facility_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 24,
    "final": {
        "utterance": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""
    },
    "interaction": [
        {
            "utterance": "What is the minimum number of rooms for the apartments ?",
            "sql": "select min ( apartments.room_count )"
        },
        {
            "utterance": "List all the short names of each building .",
            "sql": "select apartment_buildings.building_short_name"
        },
        {
            "utterance": "For each short name , show the room count .",
            "sql": "select apartment_buildings.building_short_name , apartments.room_count"
        },
        {
            "utterance": "Only keep the result of `` Columbus Square '' .",
            "sql": "select sum ( apartments.room_count ) where apartment_buildings.building_short_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 25,
    "final": {
        "utterance": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
    },
    "interaction": [
        {
            "utterance": "List all the addresses of the buildings .",
            "sql": "select apartment_buildings.building_address"
        },
        {
            "utterance": "Show the building address for each apartment id .",
            "sql": "select apartment_buildings.building_address , apartments.apt_id"
        },
        {
            "utterance": "Only show the addresses of the buildings that have apartments with more than 3 bathrooms .",
            "sql": "select apartment_buildings.building_address where apartments.bathroom_count > value"
        },
        {
            "utterance": "How about more than 2 ?",
            "sql": "select apartment_buildings.building_address where apartments.bathroom_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 26,
    "final": {
        "utterance": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "For each apartment booking , show the start date , and end date .",
            "sql": "select apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        },
        {
            "utterance": "Also show the type code with each record .",
            "sql": "select apartments.apt_type_code , apartment_bookings.booking_start_date , apartment_bookings.booking_start_date"
        },
        {
            "utterance": "What the apartment type codes and apartment numbers in the buildings managed by `` Kyle '' ?",
            "sql": "select apartments.apt_type_code , apartments.apt_number where apartment_buildings.building_manager = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 27,
    "final": {
        "utterance": "Show the booking status code and the corresponding number of bookings.",
        "sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
    },
    "interaction": [
        {
            "utterance": "List all the unique booking status codes .",
            "sql": "select distinct apartment_bookings.booking_status_code"
        },
        {
            "utterance": "How many apartments are there for each one ?",
            "sql": "select apartment_bookings.booking_status_code , count ( apartment_bookings.* ) group_by apartment_bookings.booking_status_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 28,
    "final": {
        "utterance": "Return all the apartment numbers sorted by the room count in ascending order.",
        "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC"
    },
    "interaction": [
        {
            "utterance": "List all the apartment numbers .",
            "sql": "select apartments.apt_number"
        },
        {
            "utterance": "Order those results by number of bedrooms in descending order .",
            "sql": "select apartments.apt_number order_by apartments.bedroom_count desc"
        },
        {
            "utterance": "Order them by room count in descending order .",
            "sql": "select apartments.apt_number order_by apartments.room_count asc"
        },
        {
            "utterance": "What about in ascending order ?",
            "sql": "select apartments.apt_number order_by apartments.room_count asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 29,
    "final": {
        "utterance": "Return the apartment number with the largest number of bedrooms.",
        "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the apartment numbers .",
            "sql": "select apartments.apt_number"
        },
        {
            "utterance": "Order them by the number of bedrooms in descending order .",
            "sql": "select apartments.apt_number order_by apartments.bedroom_count desc"
        },
        {
            "utterance": "Which ones are top 4 ?",
            "sql": "select apartments.apt_number order_by apartments.bedroom_count desc limit_value"
        },
        {
            "utterance": "What about the top 1 ?",
            "sql": "select apartments.apt_number order_by apartments.bedroom_count desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 30,
    "final": {
        "utterance": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
    },
    "interaction": [
        {
            "utterance": "List all the apartment type codes with the counts of apartments .",
            "sql": "select apartments.apt_type_code , count ( apartments.* ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "Order those results by the number of apartments in ascending order .",
            "sql": "select apartments.apt_type_code , count ( apartments.* ) group_by apartments.apt_type_code order_by count ( apartments.* ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 31,
    "final": {
        "utterance": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "List all the apartment type codes with the counts of apartments .",
            "sql": "select apartments.apt_type_code , count ( apartments.* ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "Order the apartments by the average number of rooms in descending order .",
            "sql": "select apartments.* group_by apartments.apt_type_code order_by avg ( apartments.room_count ) desc"
        },
        {
            "utterance": "From those results , only keep the top 5 .",
            "sql": "select apartments.* group_by apartments.apt_type_code order_by avg ( apartments.room_count ) desc limit_value"
        },
        {
            "utterance": "What about top 3 ?",
            "sql": "select apartments.* group_by apartments.apt_type_code order_by avg ( apartments.room_count ) desc limit_value"
        },
        {
            "utterance": "What are the apartment type codes from those results ?",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by avg ( apartments.room_count ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 32,
    "final": {
        "utterance": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the information about the apartments .",
            "sql": "select apartments.*"
        },
        {
            "utterance": "Order those records by the number of total rooms .",
            "sql": "select apartments.* order_by apartments.room_count"
        },
        {
            "utterance": "Which is the apartment type code that has the largest number of total rooms ?",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by sum ( apartments.room_count ) desc limit_value"
        },
        {
            "utterance": "Order the apartment type code by the number of total rooms .",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by sum ( apartments.room_count ) desc"
        },
        {
            "utterance": "Add the number of bathrooms and number of bedrooms to the results .",
            "sql": "select apartments.apt_type_code , apartments.bathroom_count , apartments.bedroom_count group_by apartments.apt_type_code order_by sum ( apartments.room_count ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 33,
    "final": {
        "utterance": "Show the most common apartment type code.",
        "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many unique apartment type codes are there ?",
            "sql": "select count ( distinct apartments.apt_type_code )"
        },
        {
            "utterance": "Show the number of apartments for each code .",
            "sql": "select apartments.apt_type_code , count ( apartments.* ) group_by apartments.apt_type_code"
        },
        {
            "utterance": "Which are the most two common apartment type codes ?",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by count ( apartments.* ) desc limit_value"
        },
        {
            "utterance": "How about the top 1 ?",
            "sql": "select apartments.apt_type_code group_by apartments.apt_type_code order_by count ( apartments.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 34,
    "final": {
        "utterance": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many unique apartment type codes are there ?",
            "sql": "select count ( distinct apartments.apt_type_code )"
        },
        {
            "utterance": "What is the minimum room count for the departments ?",
            "sql": "select min ( apartments.room_count )"
        },
        {
            "utterance": "What is the minimum bathroom count for the departments ?",
            "sql": "select min ( apartments.bathroom_count )"
        },
        {
            "utterance": "How many apartments have more than 2 bathrooms ?",
            "sql": "select count ( apartments.* ) where apartments.bathroom_count > value"
        },
        {
            "utterance": "How about more than 1 ?",
            "sql": "select count ( apartments.* ) where apartments.bathroom_count > value"
        },
        {
            "utterance": "Among those apartments , which apartment type is the most popular one ?",
            "sql": "select apartments.apt_type_code where apartments.bathroom_count > value group_by apartments.apt_type_code order_by count ( apartments.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 35,
    "final": {
        "utterance": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    "interaction": [
        {
            "utterance": "How many unique apartment type codes are there ?",
            "sql": "select count ( distinct apartments.apt_type_code )"
        },
        {
            "utterance": "What is the minimum room count for the departments ?",
            "sql": "select min ( apartments.room_count )"
        },
        {
            "utterance": "List the apartment type code and the maximum and minimum number of rooms for each one .",
            "sql": "select apartments.apt_type_code , max ( apartments.room_count ) , min ( apartments.room_count ) group_by apartments.apt_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 36,
    "final": {
        "utterance": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Show all the guests information .",
            "sql": "select guests.*"
        },
        {
            "utterance": "How many genders are there in total ?",
            "sql": "select count ( distinct guests.gender_code )"
        },
        {
            "utterance": "Has `` Rebeca '' ever visited , show the related information .",
            "sql": "select guests.* where guests.guest_first_name = value"
        },
        {
            "utterance": "Count how many guests for each gender , and list them in descending order .",
            "sql": "select guests.gender_code , count ( guests.* ) group_by guests.gender_code order_by count ( guests.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 37,
    "final": {
        "utterance": "How many apartments do not have any facility?",
        "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
    },
    "interaction": [
        {
            "utterance": "Show all the information about the facilities .",
            "sql": "select apartment_facilities.*"
        },
        {
            "utterance": "How many records are there ?",
            "sql": "select count ( apartment_facilities.* )"
        },
        {
            "utterance": "Which apartments have no facility , show ids ?",
            "sql": "select apartments.apt_id where apartments.apt_id not in ( select apartment_facilities.apt_id )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( apartments.* ) where apartments.apt_id not in ( select apartment_facilities.apt_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "apartment_rentals",
    "interaction_id": 38,
    "final": {
        "utterance": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""
    },
    "interaction": [
        {
            "utterance": "How many apartments are there ?",
            "sql": "select count ( apartments.apt_number )"
        },
        {
            "utterance": "What are the status codes ?",
            "sql": "select apartment_bookings.booking_status_code"
        },
        {
            "utterance": "How many apartments have the status code to be `` Confirmed '' ?",
            "sql": "select count ( apartments.apt_number ) where apartment_bookings.booking_status_code = value"
        },
        {
            "utterance": "What about that of `` Provisional '' or `` Confirmed '' ?",
            "sql": "select apartments.apt_number where apartment_bookings.booking_status_code = value intersect select apartments.apt_number where apartment_bookings.booking_status_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 0,
    "final": {
        "utterance": "Show all official native languages that contain the word \"English\".",
        "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    "interaction": [
        {
            "utterance": "List all the country names and their languages .",
            "sql": "select country.country_name , country.official_native_language"
        },
        {
            "utterance": "How many official languages that contain the word `` English '' ?",
            "sql": "select count ( country.* ) where country.official_native_language like value"
        },
        {
            "utterance": "Which countries are they ?",
            "sql": "select country.official_native_language where country.official_native_language like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the distinct position of players from college UCLA or Duke.",
        "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    "interaction": [
        {
            "utterance": "Show all the information about the match season .",
            "sql": "select match_season.*"
        },
        {
            "utterance": "List the positions .",
            "sql": "select match_season.position"
        },
        {
            "utterance": "How many distinct positions are there ?",
            "sql": "select count ( distinct match_season.position )"
        },
        {
            "utterance": "What are the distinct position of players from college Virginia ?",
            "sql": "select distinct match_season.position where match_season.college = value"
        },
        {
            "utterance": "What about UCLA or Duke ?",
            "sql": "select distinct match_season.position where match_season.college = value or match_season.college = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 2,
    "final": {
        "utterance": "Which players are from Indonesia?",
        "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\""
    },
    "interaction": [
        {
            "utterance": "Show the match season and the corresponding country .",
            "sql": "select match_season.season , country.country_name"
        },
        {
            "utterance": "How many distinct countries in total ?",
            "sql": "select count ( distinct country.country_name )"
        },
        {
            "utterance": "List the player names who are from Ireland .",
            "sql": "select match_season.player where country.country_name = value"
        },
        {
            "utterance": "How about Indonesia ?",
            "sql": "select match_season.player where country.country_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    "interaction": [
        {
            "utterance": "Show the country whose capital is Baghdad .",
            "sql": "select country.country_name where country.capital = value"
        },
        {
            "utterance": "What about Dublin ?",
            "sql": "select country.country_name where country.capital = value"
        },
        {
            "utterance": "List all the positions corresponding to that country .",
            "sql": "select match_season.position where country.capital = value"
        },
        {
            "utterance": "What about the distinct positions ?",
            "sql": "select distinct match_season.position where country.capital = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the official languages of the countries of players from Maryland or Duke college?",
        "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\""
    },
    "interaction": [
        {
            "utterance": "What are the distinct position of players from college Furman ?",
            "sql": "select distinct match_season.position where match_season.college = value"
        },
        {
            "utterance": "What about the players who come from college of Maryland or Duke ?",
            "sql": "select match_season.player where match_season.college = value or match_season.college = value"
        },
        {
            "utterance": "What are the official languages of them ?",
            "sql": "select country.official_native_language where match_season.college = value or match_season.college = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 5,
    "final": {
        "utterance": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "List the players and their country names .",
            "sql": "select match_season.player , country.country_name where match_season.position = value"
        },
        {
            "utterance": "Which ones have the position of Forward ?",
            "sql": "select match_season.player , country.country_name where match_season.position = value where match_season.position = value"
        },
        {
            "utterance": "What about the official languages of them ?",
            "sql": "select country.official_native_language where match_season.position = value"
        },
        {
            "utterance": "How many official languages in total for the defenders ?",
            "sql": "select count ( distinct country.official_native_language ) where match_season.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""
    },
    "interaction": [
        {
            "utterance": "List the player , position and the corresponding team for each player .",
            "sql": "select match_season.player , match_season.position , team.name"
        },
        {
            "utterance": "Which ones are from the team 'Evalyn Feil ' , show the positions only ?",
            "sql": "select match_season.position where team.name = value"
        },
        {
            "utterance": "What about the team name `` Ryley Goldner '' ?",
            "sql": "select match_season.position where team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 7,
    "final": {
        "utterance": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
        "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    "interaction": [
        {
            "utterance": "List the college and the corresponding team name .",
            "sql": "select match_season.college , team.name"
        },
        {
            "utterance": "How many unique colleges are there for team 'Miami Fusion ' ?",
            "sql": "select count ( distinct match_season.college ) where team.name = value"
        },
        {
            "utterance": "What about the team `` Columbus Crew '' ?",
            "sql": "select count ( distinct match_season.college ) where team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the players and years played for players from team \"Columbus Crew\".",
        "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    "interaction": [
        {
            "utterance": "For each player , show the name and the team .",
            "sql": "select player.player , player.years_played"
        },
        {
            "utterance": "What about adding the corresponding team name for each record ?",
            "sql": "select player.player , player.years_played , team.name where team.name = value"
        },
        {
            "utterance": "What are the players and years played for those who are from team `` Brown Erdman '' ?",
            "sql": "select player.player , player.years_played where team.name = value"
        },
        {
            "utterance": "What about that of `` Columbus Crew '' ?",
            "sql": "select player.player , player.years_played where team.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the country names and the corresponding number of players.",
        "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
    },
    "interaction": [
        {
            "utterance": "List all the country names .",
            "sql": "select country.country_name"
        },
        {
            "utterance": "For all players , show their country names .",
            "sql": "select match_season.player , country.country_name group_by country.country_name"
        },
        {
            "utterance": "For each country , how many players are there ?",
            "sql": "select country.country_name , count ( * ) group_by country.country_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the most common position of players in match seasons.",
        "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the number of the positions for each type ?",
            "sql": "select match_season.position , count ( match_season.* ) group_by match_season.position"
        },
        {
            "utterance": "Among those , which one is the list popular one ?",
            "sql": "select match_season.position group_by match_season.position order_by count ( match_season.* ) asc limit_value"
        },
        {
            "utterance": "How about the most popular one ?",
            "sql": "select match_season.position group_by match_season.position order_by count ( match_season.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the top 3 most common colleges of players in match seasons.",
        "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the number of the players in the match season for each college ?",
            "sql": "select match_season.college , count ( match_season.* ) group_by match_season.college"
        },
        {
            "utterance": "Which ones have the least players , keep the least 5 colleges .",
            "sql": "select match_season.college group_by match_season.college order_by count ( match_season.* ) asc limit_value"
        },
        {
            "utterance": "What about the top 3 ?",
            "sql": "select match_season.college group_by match_season.college order_by count ( match_season.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the name of colleges that have at least two players.",
        "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many unique colleges are there in the match season ?",
            "sql": "select count ( distinct match_season.college )"
        },
        {
            "utterance": "Which countries have only one player ?",
            "sql": "select match_season.college group_by match_season.college having count ( match_season.* ) = value"
        },
        {
            "utterance": "What about at least two ?",
            "sql": "select match_season.college group_by match_season.college having count ( match_season.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    "interaction": [
        {
            "utterance": "How many distinct colleges are there in the match season ?",
            "sql": "select count ( distinct match_season.college )"
        },
        {
            "utterance": "Which countries have only one player ?",
            "sql": "select match_season.college group_by match_season.college having count ( match_season.* ) = value"
        },
        {
            "utterance": "What about at least two ?",
            "sql": "select match_season.college group_by match_season.college having count ( match_season.* ) > = value"
        },
        {
            "utterance": "Show the result in descending alphabetical order .",
            "sql": "select match_season.college group_by match_season.college having count ( match_season.* ) > = value order_by match_season.college desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the names of teams that do no have match season record?",
        "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    "interaction": [
        {
            "utterance": "Show the team names .",
            "sql": "select team.name"
        },
        {
            "utterance": "Which of them have at least one record in the match season ?",
            "sql": "select team.name where team.team_id in ( select match_season.team )"
        },
        {
            "utterance": "Which are not ?",
            "sql": "select team.name where team.team_id not in ( select match_season.team )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "match_season",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the names of countries that have both players with position forward and players with position defender?",
        "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    "interaction": [
        {
            "utterance": "List the positions from all seasons .",
            "sql": "select match_season.position"
        },
        {
            "utterance": "How many are there for each position ?",
            "sql": "select match_season.position , count ( match_season.* ) group_by match_season.position"
        },
        {
            "utterance": "Show the positions and the corresponding country .",
            "sql": "select match_season.position , country.country_name"
        },
        {
            "utterance": "Keep the country names that have both forward and defender as position .",
            "sql": "select country.country_name where match_season.position = value intersect select country.country_name where match_season.position = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the name of the song that was released in the most recent year?",
        "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the song names and their release date .",
            "sql": "select song.song_name , song.releasedate"
        },
        {
            "utterance": "How many different releasing dates are there ?",
            "sql": "select count ( distinct song.releasedate )"
        },
        {
            "utterance": "From those songs , which ones are released in the most recent year ?",
            "sql": "select song.song_name , song.releasedate order_by song.releasedate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the id of the longest song?",
        "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the songs by their file size , from large to small .",
            "sql": "select files.* order_by files.file_size desc"
        },
        {
            "utterance": "What about ordering by duration ?",
            "sql": "select files.* order_by files.duration desc"
        },
        {
            "utterance": "From those results , which one is the top 1 , only keep the id of it .",
            "sql": "select files.f_id order_by files.duration desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9"
    },
    "interaction": [
        {
            "utterance": "What is the average rating for all the songs ?",
            "sql": "select avg ( song.rating )"
        },
        {
            "utterance": "How many of the songs which rating is above 9 ?",
            "sql": "select count ( song.* ) where song.rating > value"
        },
        {
            "utterance": "What are singer names and their countries of these songs ?",
            "sql": "select distinct artist.artist_name , artist.country where song.rating > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 3,
    "final": {
        "utterance": "List the file size and format for all songs that have resolution lower than 800.",
        "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"
    },
    "interaction": [
        {
            "utterance": "List all the song names by the resolution in ascending order .",
            "sql": "select song.song_name order_by song.resolution desc"
        },
        {
            "utterance": "How many songs have resolution higher than 800 ?",
            "sql": "select count ( song.song_name ) where song.resolution > value"
        },
        {
            "utterance": "What about lower ?",
            "sql": "select count ( song.song_name ) where song.resolution < value"
        },
        {
            "utterance": "What are the file size and format of them ?",
            "sql": "select distinct files.file_size , files.formats where song.resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the artist who produced the shortest song?",
        "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which song ids are the top three long ones ?",
            "sql": "select files.f_id order_by files.duration desc limit_value"
        },
        {
            "utterance": "What about the shortest one ?",
            "sql": "select files.f_id order_by files.duration asc limit_value"
        },
        {
            "utterance": "What is the artist name of it ?",
            "sql": "select song.artist_name order_by files.duration limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What is the maximum rating for all the songs ?",
            "sql": "select max ( song.rating )"
        },
        {
            "utterance": "Which songs are the top 2 rating ones ?",
            "sql": "select song.* order_by song.rating desc limit_value"
        },
        {
            "utterance": "What about top 3 ?",
            "sql": "select song.* order_by song.rating desc limit_value"
        },
        {
            "utterance": "What are the names and countries of origin for the artists of these songs ?",
            "sql": "select artist.artist_name , artist.country order_by song.rating desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many songs have 4 minute duration?",
        "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
    },
    "interaction": [
        {
            "utterance": "List all the durations of the songs .",
            "sql": "select files.duration"
        },
        {
            "utterance": "How many are there if the duration is only 2 mins to 3 mins ?",
            "sql": "select count ( files.* ) where files.duration like value"
        },
        {
            "utterance": "What about 4 minutes long ?",
            "sql": "select count ( files.* ) where files.duration like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the average rating of songs produced by female artists?",
        "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\""
    },
    "interaction": [
        {
            "utterance": "How many songs are produced by female artists ?",
            "sql": "select count ( * ) where artist.gender = value"
        },
        {
            "utterance": "What is the maximum rating of these songs ?",
            "sql": "select max ( song.rating ) where artist.gender = value"
        },
        {
            "utterance": "How about average rating ?",
            "sql": "select avg ( song.rating ) where artist.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the most popular file format?",
        "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "For each format , how many files are there ?",
            "sql": "select files.formats , count ( files.* ) group_by files.formats"
        },
        {
            "utterance": "So which format is the most common one ?",
            "sql": "select files.formats group_by files.formats order_by count ( files.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of the artists who are from UK and have produced English songs.",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "How many distinct countries are there ?",
            "sql": "select count ( distinct artist.country )"
        },
        {
            "utterance": "How many artists come from India ?",
            "sql": "select count ( artist.* ) where artist.country = value"
        },
        {
            "utterance": "Which ones who come from UK and have songs in English ?",
            "sql": "select artist.artist_name where artist.country = value intersect select song.artist_name where song.languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "List all the durations of the songs .",
            "sql": "select files.duration"
        },
        {
            "utterance": "How many are there if the duration is only 3 mins to 4 mins ?",
            "sql": "select count ( files.* ) where files.duration like value"
        },
        {
            "utterance": "What about the ones which have the format to be mp4 ?",
            "sql": "select count ( files.* ) where files.formats = value"
        },
        {
            "utterance": "Show the ids that the song is in mp4 and resolution is lower than 1000 .",
            "sql": "select files.f_id where files.formats = value intersect select song.f_id where song.resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\""
    },
    "interaction": [
        {
            "utterance": "How many songs are produced by male artists ?",
            "sql": "select count ( * ) where artist.gender = value"
        },
        {
            "utterance": "How about female artisits ?",
            "sql": "select count ( * ) where artist.gender = value"
        },
        {
            "utterance": "Among those songs , which ones are in Bangla ?",
            "sql": "select count ( * ) where artist.gender = value and song.languages = value"
        },
        {
            "utterance": "What are the country of origin for the artists of these songs ?",
            "sql": "select artist.country where artist.gender = value and song.languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"
    },
    "interaction": [
        {
            "utterance": "List all the song names by the resolution in ascending order .",
            "sql": "select song.song_name order_by song.resolution desc"
        },
        {
            "utterance": "How many songs have resolution higher than 900 ?",
            "sql": "select count ( song.song_name ) where song.resolution > value"
        },
        {
            "utterance": "What about lower than 800 ?",
            "sql": "select count ( song.song_name ) where song.resolution < value"
        },
        {
            "utterance": "Among those results , how may have mp3 format ?",
            "sql": "select count ( * ) where files.formats = value and song.resolution < value"
        },
        {
            "utterance": "What is the average duration of those songs ?",
            "sql": "select avg ( files.duration ) where files.formats = value and song.resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the song names and the resolutions in descending order of resolution .",
            "sql": "select song.song_name , song.resolution order_by song.resolution desc"
        },
        {
            "utterance": "Which one has the highest resolution ?",
            "sql": "select song.song_name , song.resolution order_by song.resolution desc limit_value"
        },
        {
            "utterance": "What about the lowest one ?",
            "sql": "select song.song_name , song.resolution order_by song.resolution asc limit_value"
        },
        {
            "utterance": "What is the gender and name of the corresponding artist of that song ?",
            "sql": "select artist.gender , artist.artist_name order_by song.resolution limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
    },
    "interaction": [
        {
            "utterance": "List all the song names and the resolutions in ascending order of resolution .",
            "sql": "select song.song_name , song.resolution order_by song.resolution asc"
        },
        {
            "utterance": "Which ones are the top two of the resolution ?",
            "sql": "select song.song_name , song.resolution order_by song.resolution desc limit_value"
        },
        {
            "utterance": "What is the average resolution for the English songs ?",
            "sql": "select avg ( song.resolution ) where song.languages = value"
        },
        {
            "utterance": "Which songs have a higher resolution than the English ones ?",
            "sql": "select song.song_name where song.resolution > ( select min ( song.resolution ) where song.languages = value )"
        },
        {
            "utterance": "What about the distinct song names of them ?",
            "sql": "select distinct song.song_name where song.resolution > ( select min ( song.resolution ) where song.languages = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")"
    },
    "interaction": [
        {
            "utterance": "List all the song names and the ratings .",
            "sql": "select song.song_name , song.rating"
        },
        {
            "utterance": "What is the maximum rating ?",
            "sql": "select max ( song.rating )"
        },
        {
            "utterance": "Which songs have a lower rating than the average rating ?",
            "sql": "select song.song_name where song.rating < ( select avg ( song.rating ) )"
        },
        {
            "utterance": "What about lower rating than that of blues genre ones ?",
            "sql": "select song.song_name where song.rating < ( select max ( song.rating ) where song.genre_is = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
    },
    "interaction": [
        {
            "utterance": "Show all the names of the song .",
            "sql": "select song.song_name"
        },
        {
            "utterance": "How many of them contain the word 'robe ' ?",
            "sql": "select count ( song.* ) where song.song_name like value"
        },
        {
            "utterance": "How about the word 'love ' ?",
            "sql": "select count ( song.* ) where song.song_name like value"
        },
        {
            "utterance": "What are the name and country of origin for the artists of these songs ?",
            "sql": "select artist.artist_name , artist.country where song.song_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 17,
    "final": {
        "utterance": "List the name and gender for all artists who released songs in March.",
        "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
    },
    "interaction": [
        {
            "utterance": "How many songs are released in January ?",
            "sql": "select count ( song.* ) where song.releasedate like value"
        },
        {
            "utterance": "Who are the artists of these songs , list the name and gender ?",
            "sql": "select artist.artist_name , artist.gender where song.releasedate like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
    },
    "interaction": [
        {
            "utterance": "How many songs have resolution higher than 1000 ?",
            "sql": "select count ( song.song_name ) where song.resolution > value"
        },
        {
            "utterance": "What about higher than 720 ?",
            "sql": "select count ( song.song_name ) where song.resolution > value"
        },
        {
            "utterance": "Among those results , how may have mp4 format ?",
            "sql": "select count ( * ) where files.formats = value and song.resolution > value"
        },
        {
            "utterance": "List the ids of these songs .",
            "sql": "select files.f_id where files.formats = value and song.resolution > value"
        },
        {
            "utterance": "What about the ids of the songs that in mp4 format or resolution above 720 ?",
            "sql": "select files.f_id where files.formats = value union select song.f_id where song.resolution > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 19,
    "final": {
        "utterance": "List the names of all songs that have 4 minute duration or are in English.",
        "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "List all the durations of the songs .",
            "sql": "select files.duration"
        },
        {
            "utterance": "How many are there if the duration is 4 mins ?",
            "sql": "select count ( files.* ) where files.duration like value"
        },
        {
            "utterance": "What are the names of those songs ?",
            "sql": "select song.song_name where files.duration like value"
        },
        {
            "utterance": "What about the song names which has 4 minute duration or is in English ?",
            "sql": "select song.song_name where files.duration like value union select song.song_name where song.languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the language used most often in the songs?",
        "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many distinct languages are there for the songs ?",
            "sql": "select count ( distinct song.languages )"
        },
        {
            "utterance": "Among those languages , which one is the most popular one ?",
            "sql": "select song.languages group_by song.languages order_by count ( song.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the language that was used most often in songs with resolution above 500?",
        "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List each language and how many songs for each ?",
            "sql": "select song.languages , count ( song.* ) group_by song.languages"
        },
        {
            "utterance": "Which one is the most popular language ?",
            "sql": "select song.languages , count ( song.* ) group_by song.languages desc limit_value"
        },
        {
            "utterance": "What about that for the songs which resolution are above 1000 ?",
            "sql": "select song.artist_name where song.resolution > value group_by song.languages order_by count ( song.* ) desc limit_value"
        },
        {
            "utterance": "How about resolution are above 500 ?",
            "sql": "select song.artist_name where song.resolution > value group_by song.languages order_by count ( song.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the names of artists who are Male and are from UK?",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
    },
    "interaction": [
        {
            "utterance": "How many artists come from India ?",
            "sql": "select count ( artist.* ) where artist.country = value"
        },
        {
            "utterance": "How about UK ?",
            "sql": "select count ( artist.* ) where artist.country = value"
        },
        {
            "utterance": "Among those artists , who are male ?",
            "sql": "select artist.artist_name where artist.country = value and artist.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the names of songs whose genre is modern or language is English.",
        "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "Which songs have the genre to be blues ?",
            "sql": "select song.song_name where song.genre_is = value"
        },
        {
            "utterance": "How about folk ?",
            "sql": "select song.song_name where song.genre_is = value"
        },
        {
            "utterance": "What about the songs has genre to be modern OR the songs are in English ?",
            "sql": "select song.song_name where song.genre_is = value or song.languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"
    },
    "interaction": [
        {
            "utterance": "How many songs have a resolution below 900 ?",
            "sql": "select count ( song.* ) where song.resolution < value"
        },
        {
            "utterance": "Among those songs , which ones have mp3 format , show the file size of them .",
            "sql": "select files.file_size where files.formats = value and song.resolution < value"
        },
        {
            "utterance": "What are the names of songs which have mp3 format and the resolution is below 1000 .",
            "sql": "select song.song_name where files.formats = value intersect select song.song_name where song.resolution < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Return the names of singers who are from UK and released an English song.",
        "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""
    },
    "interaction": [
        {
            "utterance": "How many UK male artists ?",
            "sql": "select artist.artist_name where artist.country = value and artist.gender = value"
        },
        {
            "utterance": "Which British artists have released English songs ?",
            "sql": "select artist.artist_name where artist.country = value intersect select artist.artist_name where song.languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the average rating and resolution of songs that are in Bangla?",
        "sql": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
    },
    "interaction": [
        {
            "utterance": "What is the maximum resolution for all the English songs ?",
            "sql": "select max ( song.resolution ) where song.languages = value"
        },
        {
            "utterance": "What about the average rating and resolution for songs in Bangla ?",
            "sql": "select avg ( song.rating ) , avg ( song.resolution ) where song.languages = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\""
    },
    "interaction": [
        {
            "utterance": "List all the durations of the songs .",
            "sql": "select files.duration"
        },
        {
            "utterance": "How many are there when the duration is only 4 mins ?",
            "sql": "select count ( files.* ) where files.duration like value"
        },
        {
            "utterance": "What about that of 3 mins ?",
            "sql": "select count ( files.* ) where files.duration like value"
        },
        {
            "utterance": "How about the maximum and minimum resolutions of these songs ?",
            "sql": "select max ( song.resolution ) , min ( song.resolution ) where files.duration like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages"
    },
    "interaction": [
        {
            "utterance": "For each language , how many songs are there ?",
            "sql": "select song.languages , count ( song.* ) group_by song.languages"
        },
        {
            "utterance": "For each language group in order , what is the average duration value of the songs in the group ?",
            "sql": "select avg ( files.duration ) group_by song.languages order_by song.languages"
        },
        {
            "utterance": "How about the maximum duration and resolution ?",
            "sql": "select max ( files.duration ) , max ( song.resolution ) , song.languages group_by song.languages order_by song.languages"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"
    },
    "interaction": [
        {
            "utterance": "How many genres are there in total ?",
            "sql": "select count ( distinct song.genre_is )"
        },
        {
            "utterance": "How many songs for each of them , show the result in the order of genre ?",
            "sql": "select song.genre_is , count ( song.* ) group_by song.genre_is"
        },
        {
            "utterance": "What are the shortest duration and lowest rating for each group ?",
            "sql": "select min ( files.duration ) , min ( song.rating ) , song.genre_is group_by song.genre_is order_by song.genre_is"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the names and number of works of all artists who have at least one English songs.",
        "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "List the number of songs for each artist .",
            "sql": "select artist.artist_name , count ( * ) group_by song.artist_name"
        },
        {
            "utterance": "How many songs does Farida has ?",
            "sql": "select artist.artist_name , count ( * ) group_by song.artist_name having artist.artist_name = value"
        },
        {
            "utterance": "How about Prity ?",
            "sql": "select artist.artist_name , count ( * ) group_by song.artist_name having artist.artist_name = value"
        },
        {
            "utterance": "What about the people who has at least an English song ?",
            "sql": "select artist.artist_name , count ( * ) where song.languages = value group_by song.artist_name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1"
    },
    "interaction": [
        {
            "utterance": "Which songs have a resolution to be lower than 800 ?",
            "sql": "select song.song_name where song.resolution < value"
        },
        {
            "utterance": "List artist names and the countries of these songs ?",
            "sql": "select artist.artist_name , artist.country where song.resolution < value"
        },
        {
            "utterance": "What about the artist names and countries who have at least one song of resolution above 900 ?",
            "sql": "select artist.artist_name , artist.country where song.resolution > value group_by song.artist_name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the names and number of works of the three artists who have produced the most songs.",
        "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Order the artist names by the number of songs .",
            "sql": "select artist.artist_name group_by song.artist_name order_by count ( * )"
        },
        {
            "utterance": "How about the names and the number of songs for the top one artist ?",
            "sql": "select artist.artist_name , count ( * ) group_by song.artist_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about top three ?",
            "sql": "select artist.artist_name , count ( * ) group_by song.artist_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the country of origin for the artist who made the least number of songs?",
        "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "For each artist , count how many songs .",
            "sql": "select artist.artist_name , count ( * ) group_by artist.artist_name"
        },
        {
            "utterance": "What is the country of origin for the artist who made the least number of songs ?",
            "sql": "select artist.country group_by song.artist_name order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"
    },
    "interaction": [
        {
            "utterance": "What are the minimum , maximum and average values of the ratings ?",
            "sql": "select min ( song.rating ) , max ( song.rating ) , avg ( song.rating )"
        },
        {
            "utterance": "Which songs have a higher rating than the average , list the song names .",
            "sql": "select song.song_name where song.rating > ( select avg ( song.rating ) )"
        },
        {
            "utterance": "What about the names which rating is higher than the rating of all songs in English ?",
            "sql": "select song.song_name where song.rating > ( select min ( song.rating ) where song.languages = value )"
        },
        {
            "utterance": "How about lower ?",
            "sql": "select song.song_name where song.rating < ( select min ( song.rating ) where song.languages = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"
    },
    "interaction": [
        {
            "utterance": "What are the minimum , maximum and average values of the ratings ?",
            "sql": "select min ( song.rating ) , max ( song.rating ) , avg ( song.rating )"
        },
        {
            "utterance": "Which songs have a higher rating than the average , list the song ids .",
            "sql": "select song.f_id where song.rating > ( select avg ( song.rating ) )"
        },
        {
            "utterance": "What about the song ids whose resolution is higher than the resolution of any songs with rating lower than 8 ?",
            "sql": "select song.f_id where song.resolution > ( select max ( song.resolution ) where song.rating < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 36,
    "final": {
        "utterance": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
        "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")"
    },
    "interaction": [
        {
            "utterance": "What are the minimum , maximum and average values of the resolution ?",
            "sql": "select min ( song.resolution ) , max ( song.resolution ) , avg ( song.resolution )"
        },
        {
            "utterance": "Which songs have a higher value than the average , list the song ids .",
            "sql": "select song.f_id where song.resolution > ( select avg ( song.resolution ) )"
        },
        {
            "utterance": "How about the ones that is higher than the average resolution value for the modern genre songs ?",
            "sql": "select song.f_id where song.resolution > ( select avg ( song.resolution ) where song.genre_is = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 37,
    "final": {
        "utterance": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "For each artist , count how many songs .",
            "sql": "select artist.artist_name , count ( * ) group_by song.artist_name"
        },
        {
            "utterance": "Among those , only count the Bangla songs .",
            "sql": "select artist.artist_name , count ( * ) where song.languages = value group_by song.artist_name"
        },
        {
            "utterance": "Which is the top one artist who has the most counts ?",
            "sql": "select artist.artist_name where song.languages = value group_by song.artist_name order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "How about top 3 ?",
            "sql": "select artist.artist_name where song.languages = value group_by song.artist_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 38,
    "final": {
        "utterance": "List the id, genre and artist name of English songs ordered by rating.",
        "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"
    },
    "interaction": [
        {
            "utterance": "What is the average rating of the Bangla songs ?",
            "sql": "select avg ( song.rating ) where song.languages = value"
        },
        {
            "utterance": "How about English songs ?",
            "sql": "select avg ( song.rating ) where song.languages = value"
        },
        {
            "utterance": "How many of them in total ?",
            "sql": "select count ( song.* ) where song.languages = value"
        },
        {
            "utterance": "What are the id , genre and artist name of these songs in the order of rating ?",
            "sql": "select song.f_id , song.genre_is , song.artist_name where song.languages = value order_by song.rating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 39,
    "final": {
        "utterance": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
        "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name"
    },
    "interaction": [
        {
            "utterance": "What is the average duration of the blues songs ?",
            "sql": "select avg ( files.duration ) where song.genre_is = value"
        },
        {
            "utterance": "How about that of pop songs ?",
            "sql": "select avg ( files.duration ) where song.genre_is = value"
        },
        {
            "utterance": "What about the duration , file size and format of those songs , order the results by title ?",
            "sql": "select files.duration , files.file_size , files.formats where song.genre_is = value order_by song.song_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "music_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"
    },
    "interaction": [
        {
            "utterance": "How many artists have Bangla songs ?",
            "sql": "select count ( distinct song.artist_name ) where song.languages = value"
        },
        {
            "utterance": "How about English ?",
            "sql": "select count ( distinct song.artist_name ) where song.languages = value"
        },
        {
            "utterance": "What are the names of them ?",
            "sql": "select song.artist_name where song.languages = value"
        },
        {
            "utterance": "Which of them have never received rating higher than 8 .",
            "sql": "select distinct song.artist_name where song.languages = value except select distinct song.artist_name where song.rating > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 0,
    "final": {
        "utterance": "Show the name of technicians aged either 36 or 37",
        "sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"
    },
    "interaction": [
        {
            "utterance": "How many technicians are there ?",
            "sql": "select count ( technician.* )"
        },
        {
            "utterance": "Show me their names .",
            "sql": "select technician.name"
        },
        {
            "utterance": "What about those that are either 36 or 37 years old ?",
            "sql": "select technician.name where technician.age = value or technician.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the starting year of the oldest technicians?",
        "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many technicians are there ?",
            "sql": "select count ( technician.* )"
        },
        {
            "utterance": "Show me the name of the oldest one .",
            "sql": "select technician.name order_by technician.age desc limit_value"
        },
        {
            "utterance": "What about his starting year ?",
            "sql": "select technician.starting_year order_by technician.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 2,
    "final": {
        "utterance": "Please show the team that has the most number of technicians.",
        "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many technicians are there ?",
            "sql": "select count ( technician.* )"
        },
        {
            "utterance": "What about in terms of teams ?",
            "sql": "select technician.team , count ( technician.* ) group_by technician.team"
        },
        {
            "utterance": "Show me the team with the most of them .",
            "sql": "select technician.team group_by technician.team order_by count ( technician.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the team that have at least two technicians.",
        "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "How many technicians are there ?",
            "sql": "select count ( technician.* )"
        },
        {
            "utterance": "What about in terms of teams ?",
            "sql": "select technician.team , count ( technician.* ) group_by technician.team"
        },
        {
            "utterance": "Show me the teams that have at least two .",
            "sql": "select technician.team group_by technician.team having count ( technician.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 4,
    "final": {
        "utterance": "Show names of technicians and series of machines they are assigned to repair.",
        "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID"
    },
    "interaction": [
        {
            "utterance": "How many repair assignments are there in file ?",
            "sql": "select count ( repair_assignment.* )"
        },
        {
            "utterance": "Show me the name of technicians assigned to those repairs .",
            "sql": "select technician.name"
        },
        {
            "utterance": "What about the series of machines they repaired ?",
            "sql": "select technician.name , machine.machine_series"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 5,
    "final": {
        "utterance": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    "interaction": [
        {
            "utterance": "How many repair assignments are there in file ?",
            "sql": "select count ( repair_assignment.* )"
        },
        {
            "utterance": "Show me the name of technicians assigned to those repairs .",
            "sql": "select technician.name"
        },
        {
            "utterance": "What about the series of machines they repaired ?",
            "sql": "select technician.name , machine.machine_series"
        },
        {
            "utterance": "Show me those machines ' quality ranks .",
            "sql": "select technician.name , machine.machine_series , machine.quality_rank"
        },
        {
            "utterance": "Show them in ascending order of quality rank .",
            "sql": "select technician.name , machine.machine_series , machine.quality_rank order_by machine.quality_rank"
        },
        {
            "utterance": "Only show me the names .",
            "sql": "select technician.name order_by machine.quality_rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 6,
    "final": {
        "utterance": "Show names of technicians who are assigned to repair machines with value point more than 70.",
        "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70"
    },
    "interaction": [
        {
            "utterance": "How many repair assignments are there in file ?",
            "sql": "select count ( repair_assignment.* )"
        },
        {
            "utterance": "Show me the name of technicians assigned to those repairs .",
            "sql": "select technician.name"
        },
        {
            "utterance": "What about the series of machines they repaired ?",
            "sql": "select technician.name , machine.machine_series"
        },
        {
            "utterance": "Show me those with machine 's value points higher than 70 .",
            "sql": "select technician.name , machine.machine_series where machine.value_points > value"
        },
        {
            "utterance": "Only show me the names .",
            "sql": "select technician.name where machine.value_points > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names of technicians and the number of machines they are assigned to repair.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "How many repair assignments are there in file ?",
            "sql": "select count ( repair_assignment.* )"
        },
        {
            "utterance": "What about in terms of technicians ?",
            "sql": "select repair_assignment.technician_id , count ( repair_assignment.* ) group_by repair_assignment.technician_id"
        },
        {
            "utterance": "Show me their names instead of ids .",
            "sql": "select technician.name , count ( * ) group_by technician.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "machine_repair",
    "interaction_id": 8,
    "final": {
        "utterance": "List the names of technicians who have not been assigned to repair machines.",
        "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
    },
    "interaction": [
        {
            "utterance": "How many repair assignments are there in file ?",
            "sql": "select count ( repair_assignment.* )"
        },
        {
            "utterance": "Show me their names .",
            "sql": "select repair_assignment.technician_id"
        },
        {
            "utterance": "What about the technicians in file who are not one of those ?",
            "sql": "select technician.technician_id where technician.technician_id not in ( select repair_assignment.technician_id )"
        },
        {
            "utterance": "Show me their names .",
            "sql": "select technician.name where technician.technician_id not in ( select repair_assignment.technician_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?",
        "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16';"
    },
    "interaction": [
        {
            "utterance": "Show me the grant id for grants where the documents were sent before '1986-08-26 20:49:27 ' .",
            "sql": "select grants.grant_id where documents.sent_date < value"
        },
        {
            "utterance": "Which of those grant ended after '1989-03-16 18:27:16 ' ? Show their id .",
            "sql": "select grants.grant_id where documents.sent_date < value intersect select grants.grant_id where grants.grant_end_date > value"
        },
        {
            "utterance": "What are the distinct grant amount of these grants ?",
            "sql": "select grants.grant_amount where documents.sent_date < value intersect select grants.grant_amount where grants.grant_end_date > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 1,
    "final": {
        "utterance": "List the project details of the project both producing patent and paper as outcomes.",
        "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'"
    },
    "interaction": [
        {
            "utterance": "What are the project details of all projects ?",
            "sql": "select projects.project_details"
        },
        {
            "utterance": "Which ones of the result produced patent ?",
            "sql": "select projects.project_details where project_outcomes.outcome_code = value"
        },
        {
            "utterance": "Among the current result , which ones also had paper outcome ?",
            "sql": "select projects.project_details where project_outcomes.outcome_code = value intersect select projects.project_details where project_outcomes.outcome_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the total grant amount of the organisations described as research?",
        "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research';"
    },
    "interaction": [
        {
            "utterance": "Show me the grant amount of the organisations described as sponser ?",
            "sql": "select grants.grant_amount where organisation_types.organisation_type_description = value"
        },
        {
            "utterance": "How about the organisations described as research ?",
            "sql": "select grants.grant_amount where organisation_types.organisation_type_description = value"
        },
        {
            "utterance": "Show me the sum of the result .",
            "sql": "select sum ( grants.grant_amount ) where organisation_types.organisation_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 3,
    "final": {
        "utterance": "List from which date and to which date these staff work: project staff of the project which hires the most staffs",
        "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader';"
    },
    "interaction": [
        {
            "utterance": "Which project hires the most staffs ?",
            "sql": "select project_staff.project_id group_by project_staff.project_id order_by count ( project_staff.* ) desc limit_value"
        },
        {
            "utterance": "Who 's the leader of this project ? Show me the id .",
            "sql": "select project_staff.staff_id where project_staff.project_id in ( select project_staff.project_id group_by project_staff.project_id order_by count ( project_staff.* ) desc limit_value ) union select project_staff.date_from , project_staff.date_to where project_staff.role_code = value"
        },
        {
            "utterance": "What 's his from-date and to-date of working ?",
            "sql": "select project_staff.date_from , project_staff.date_to where project_staff.project_id in ( select project_staff.project_id group_by project_staff.project_id order_by count ( project_staff.* ) desc limit_value ) union select project_staff.date_from , project_staff.date_to where project_staff.role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the organisation ids and details of the organisations which are involved in more than 6000 grant amount.",
        "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000;"
    },
    "interaction": [
        {
            "utterance": "Show me the id of organizations involved in less then 3000 $ grant amount .",
            "sql": "select organisations.organisation_id group_by organisations.organisation_id having sum ( grants.grant_amount ) < value"
        },
        {
            "utterance": "How about those with a total of more than 6000 $ grants ?",
            "sql": "select organisations.organisation_id group_by organisations.organisation_id having sum ( grants.grant_amount ) > value"
        },
        {
            "utterance": "List their description as well .",
            "sql": "select organisations.organisation_id , organisations.organisation_details group_by organisations.organisation_id having sum ( grants.grant_amount ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which organization has the least number of research staff ?",
            "sql": "select organisations.organisation_id group_by organisations.organisation_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the one with the most number of research staff ?",
            "sql": "select organisations.organisation_id group_by organisations.organisation_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "List the organization type together with the result .",
            "sql": "select organisations.organisation_type , organisations.organisation_id group_by organisations.organisation_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 6,
    "final": {
        "utterance": "Which organisation type hires most research staff?",
        "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me all the organization types .",
            "sql": "select organisations.organisation_type"
        },
        {
            "utterance": "Which of those hires the least research staff ?",
            "sql": "select organisations.organisation_type group_by organisations.organisation_type order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the one hiring the most research staff ?",
            "sql": "select organisations.organisation_type group_by organisations.organisation_type order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 7,
    "final": {
        "utterance": "Find out the send dates of the documents with the grant amount of more than 5000 which were granted by organisation type described research.",
        "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"
    },
    "interaction": [
        {
            "utterance": "Show me the all documents with grant amount more than 5000 dollars .",
            "sql": "select * where grants.grant_amount > value"
        },
        {
            "utterance": "Which of the result were granted by organisation type described research .",
            "sql": "select * where grants.grant_amount > value and organisation_types.organisation_type_description = value"
        },
        {
            "utterance": "Show me their send dates .",
            "sql": "select documents.sent_date where grants.grant_amount > value and organisation_types.organisation_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100"
    },
    "interaction": [
        {
            "utterance": "What 're the response received dates for the documents described as 'Initial Application ' ?",
            "sql": "select documents.response_received_date where document_types.document_description = value"
        },
        {
            "utterance": "How about those granted with more than 100 ?",
            "sql": "select documents.response_received_date where grants.grant_amount > value"
        },
        {
            "utterance": "What are the response received dates for the documents described as 'Regular ' or granted with more than 100 ?",
            "sql": "select documents.response_received_date where document_types.document_description = value or grants.grant_amount > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 9,
    "final": {
        "utterance": "List the project details of the projects which did not hire any staff for a researcher role.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )"
    },
    "interaction": [
        {
            "utterance": "Show me the project ids of the projects which did not hire any staff for a leader role .",
            "sql": "select projects.project_id where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        },
        {
            "utterance": "How about those without a researcher role ?",
            "sql": "select projects.project_id where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        },
        {
            "utterance": "What are their details ?",
            "sql": "select projects.project_details where projects.project_id not in ( select project_staff.project_id where project_staff.role_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show me the task ids for projects detailed as 'omnis ' .",
            "sql": "select tasks.task_id where projects.project_details = value"
        },
        {
            "utterance": "How about the project id for projects which are detailed as 'omnis ' or have more than 2 outcomes ?",
            "sql": "select projects.project_id where projects.project_details = value union select tasks.task_details , tasks.task_id , projects.project_id group_by projects.project_id having count ( * ) > value"
        },
        {
            "utterance": "List the corresponding task details and task id as well .",
            "sql": "select tasks.task_details , tasks.task_id , projects.project_id where projects.project_details = value union select tasks.task_details , tasks.task_id , projects.project_id group_by projects.project_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 11,
    "final": {
        "utterance": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%';"
    },
    "interaction": [
        {
            "utterance": "Show me all the research outcome .",
            "sql": "select research_outcomes.*"
        },
        {
            "utterance": "List those described with the substring 'Published ' in the result .",
            "sql": "select research_outcomes.* where research_outcomes.outcome_description like value"
        },
        {
            "utterance": "How about the project details of the result ?",
            "sql": "select projects.project_details where research_outcomes.outcome_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 12,
    "final": {
        "utterance": "How many staff does each project has? List the project id and the number in an ascending order.",
        "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC;"
    },
    "interaction": [
        {
            "utterance": "Show me the number of staff for project with id 1 .",
            "sql": "select count ( project_staff.* ) where project_staff.project_id = value"
        },
        {
            "utterance": "How about the number of staff each project has ? List the project id and the number .",
            "sql": "select project_staff.project_id , count ( * ) group_by project_staff.project_id"
        },
        {
            "utterance": "Order the result by ascending number of staff .",
            "sql": "select project_staff.project_id , count ( * ) group_by project_staff.project_id order_by count ( * ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 13,
    "final": {
        "utterance": "When did the first staff for the projects started working?",
        "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the end date of all projects staff .",
            "sql": "select project_staff.date_to"
        },
        {
            "utterance": "What about the start date ?",
            "sql": "select project_staff.date_from"
        },
        {
            "utterance": "What 's the earliest date among the result ?",
            "sql": "select project_staff.date_from order_by project_staff.date_from asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 14,
    "final": {
        "utterance": "Which project made the most number of outcomes? List the project details and the project id.",
        "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the project ids of all projects .",
            "sql": "select projects.project_id"
        },
        {
            "utterance": "Which of those had the most number of outcomes ?",
            "sql": "select projects.project_id group_by projects.project_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Show me the project details as well .",
            "sql": "select projects.project_details , projects.project_id group_by projects.project_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 15,
    "final": {
        "utterance": "Which projects have no outcome? List the project details.",
        "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes );"
    },
    "interaction": [
        {
            "utterance": "Show me all the ids of projects with outcomes .",
            "sql": "select project_outcomes.project_id"
        },
        {
            "utterance": "How many projects do not have outcome ?",
            "sql": "select count ( projects.* ) where projects.project_id not in ( select project_outcomes.project_id )"
        },
        {
            "utterance": "List their details .",
            "sql": "select projects.project_details where projects.project_id not in ( select project_outcomes.project_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 16,
    "final": {
        "utterance": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the number of research staff each organisation hired .",
            "sql": "select count ( * ) group_by organisations.organisation_id"
        },
        {
            "utterance": "Which organisation hired the least number ? Show ids .",
            "sql": "select organisations.organisation_id group_by organisations.organisation_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the most number of research staff . List the organisation id , type and detail .",
            "sql": "select organisations.organisation_id , organisations.organisation_type , organisations.organisation_details group_by organisations.organisation_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are the number of project outcomes each project staff involved in ?",
            "sql": "select count ( * ) group_by project_staff.staff_id"
        },
        {
            "utterance": "Who is involved in the most number of project outcomes ? Show ids .",
            "sql": "select project_staff.staff_id group_by project_staff.staff_id order_by count ( * ) desc limit_value"
        },
        {
            "utterance": "Give me the person 's role description .",
            "sql": "select staff_roles.role_description , project_staff.staff_id group_by project_staff.staff_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 18,
    "final": {
        "utterance": "Which document type is described with the prefix 'Initial'?",
        "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%';"
    },
    "interaction": [
        {
            "utterance": "Show me all the document type description .",
            "sql": "select document_types.document_description"
        },
        {
            "utterance": "How about document type code ?",
            "sql": "select document_types.document_type_code"
        },
        {
            "utterance": "Which one is described with the prefix 'Initial ' ?",
            "sql": "select document_types.document_type_code where document_types.document_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 19,
    "final": {
        "utterance": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'"
    },
    "interaction": [
        {
            "utterance": "Show me all the grants start dates .",
            "sql": "select grants.grant_start_date"
        },
        {
            "utterance": "Which ones of those have documents described as 'Regular ' ?",
            "sql": "select grants.grant_start_date where document_types.document_description = value"
        },
        {
            "utterance": "How about ones that have both documents described as 'Regular ' and documents described as 'Initial Application ' ?",
            "sql": "select grants.grant_start_date where document_types.document_description = value intersect select grants.grant_start_date where document_types.document_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 20,
    "final": {
        "utterance": "How many documents can one grant have at most? List the grant id and number.",
        "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many documents are there ?",
            "sql": "select count ( documents.* )"
        },
        {
            "utterance": "How many documents does each grant have ? List the grant id and number .",
            "sql": "select documents.grant_id , count ( documents.* ) group_by documents.grant_id"
        },
        {
            "utterance": "Give me the one having the most documents .",
            "sql": "select documents.grant_id , count ( documents.* ) group_by documents.grant_id order_by count ( documents.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the organisation type description of the organisation detailed as 'quo'.",
        "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo';"
    },
    "interaction": [
        {
            "utterance": "Show me the organisation types .",
            "sql": "select organisation_types.organisation_type"
        },
        {
            "utterance": "How about the type description ?",
            "sql": "select organisation_types.organisation_type_description"
        },
        {
            "utterance": "Find the ones detailed as `` quo '' .",
            "sql": "select organisation_types.organisation_type_description where organisations.organisation_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 22,
    "final": {
        "utterance": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details ASC;"
    },
    "interaction": [
        {
            "utterance": "Show me all the details of organisations .",
            "sql": "select organisations.organisation_details"
        },
        {
            "utterance": "Among the result , which ones are described as 'Sponsor ' ?",
            "sql": "select organisations.organisation_details where organisation_types.organisation_type_description = value"
        },
        {
            "utterance": "Sort the result in an ascending order .",
            "sql": "select organisations.organisation_details where organisation_types.organisation_type_description = value order_by organisations.organisation_details asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 23,
    "final": {
        "utterance": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54';"
    },
    "interaction": [
        {
            "utterance": "Show me the number of project staffs .",
            "sql": "select count ( project_staff.* )"
        },
        {
            "utterance": "How many of those worked as leaders ?",
            "sql": "select count ( project_staff.* ) where project_staff.role_code = value"
        },
        {
            "utterance": "How about the number of those who either worked as leaders or started working before '1989-04-24 23:51:54 ' ?",
            "sql": "select count ( project_staff.* ) where project_staff.role_code = value or project_staff.date_from < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the last date of the staff leaving the projects?",
        "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What are the start dates of project staff ?",
            "sql": "select project_staff.date_from"
        },
        {
            "utterance": "What about the end date of them ?",
            "sql": "select project_staff.date_to"
        },
        {
            "utterance": "What 's the last date among the result ?",
            "sql": "select project_staff.date_to order_by project_staff.date_to desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the result description of the project whose detail is 'sint'?",
        "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint';"
    },
    "interaction": [
        {
            "utterance": "Give me the outcome descriptions of research outcomes .",
            "sql": "select research_outcomes.outcome_description"
        },
        {
            "utterance": "What are the result description of the project whose detail is 'sed ' ?",
            "sql": "select research_outcomes.outcome_description where projects.project_details = value"
        },
        {
            "utterance": "How about 'sint ' ?",
            "sql": "select research_outcomes.outcome_description where projects.project_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 26,
    "final": {
        "utterance": "List the organisation id with the maximum outcome count, and the count.",
        "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Show me the outcome count for each organisation .",
            "sql": "select count ( * ) group_by projects.organisation_id"
        },
        {
            "utterance": "Which organisation has the least number of outcome ? Show ids .",
            "sql": "select projects.organisation_id group_by projects.organisation_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "How about the one with the most outcome count ? Show the count as well .",
            "sql": "select projects.organisation_id , count ( * ) group_by projects.organisation_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 27,
    "final": {
        "utterance": "List the project details of the projects launched by the organisation with the most number of projects.",
        "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 );"
    },
    "interaction": [
        {
            "utterance": "What 're the project details ?",
            "sql": "select projects.project_details"
        },
        {
            "utterance": "Show me only the one launched by the organisation with the most number of projects .",
            "sql": "select projects.project_details where projects.organisation_id in ( select projects.organisation_id group_by projects.organisation_id order_by count ( projects.* ) asc limit_value )"
        },
        {
            "utterance": "How about the one with most projects ?",
            "sql": "select projects.project_details where projects.organisation_id in ( select projects.organisation_id group_by projects.organisation_id order_by count ( projects.* ) desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 28,
    "final": {
        "utterance": "How many tasks does each project have? List the task count and the project detail.",
        "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id;"
    },
    "interaction": [
        {
            "utterance": "How tasks are there ?",
            "sql": "select count ( tasks.* )"
        },
        {
            "utterance": "How many tasks does each project have ?",
            "sql": "select count ( * ) group_by projects.project_id"
        },
        {
            "utterance": "Show the project details as well .",
            "sql": "select count ( * ) , projects.project_details group_by projects.project_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tracking_grants_for_research",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the staff roles of the staff who starts working after 2003-04-19 15:06:20 and ends working before 2016-03-15 00:33:18?",
        "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'"
    },
    "interaction": [
        {
            "utterance": "Show me all the role codes .",
            "sql": "select project_staff.role_code"
        },
        {
            "utterance": "How about those of staff who starts working after 2003-04-19 15:06:20 ?",
            "sql": "select project_staff.role_code where project_staff.date_from > value"
        },
        {
            "utterance": "List those of the staff who starts working after 2003-04-19 15:06:20 and ends working before 2016-03-15 00:33:18 ?",
            "sql": "select project_staff.role_code where project_staff.date_from > value and project_staff.date_to < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the titles of papers published by \"Jeremy Gibbons\"?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "Give me the titles of those who are published by `` Jeremy Gibbons '' ?",
            "sql": "select papers.title where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find all the papers published by \"Aaron Turon\".",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "Show me the ones that are published by `` Aaron Turon '' .",
            "sql": "select papers.title where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many papers have \"Atsushi Ohori\" published?",
        "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\""
    },
    "interaction": [
        {
            "utterance": "How many papers are there ?",
            "sql": "select count ( papers.* )"
        },
        {
            "utterance": "How many authors are there ?",
            "sql": "select count ( authors.* )"
        },
        {
            "utterance": "How many of those papers are published by `` Atsushi Ohori '' ?",
            "sql": "select count ( * ) where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    "interaction": [
        {
            "utterance": "What are the names of all the institutions ?",
            "sql": "select inst.name"
        },
        {
            "utterance": "Which one does `` Matthias Blume '' belong to ?",
            "sql": "select distinct inst.name where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which institution does \"Katsuhiro Ueno\" belong to?",
        "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""
    },
    "interaction": [
        {
            "utterance": "What are all the institutions ?",
            "sql": "select inst.*"
        },
        {
            "utterance": "Which one does `` Katsuhiro Ueno '' belong to ?",
            "sql": "select distinct inst.name where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.",
        "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\""
    },
    "interaction": [
        {
            "utterance": "Show me the name of all the institutions ?",
            "sql": "select inst.name"
        },
        {
            "utterance": "show me the name of all the authors ?",
            "sql": "select authors.fname , authors.lname"
        },
        {
            "utterance": "Give me the first names and last names of those belong to the `` University of Oxford '' .",
            "sql": "select distinct authors.fname , authors.lname where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
        "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    "interaction": [
        {
            "utterance": "What are the name of all the institutions ?",
            "sql": "select inst.name"
        },
        {
            "utterance": "Who are the name of all the authors ?",
            "sql": "select authors.fname , authors.lname"
        },
        {
            "utterance": "Give me those belong to `` Google '' .",
            "sql": "select distinct authors.fname , authors.lname where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""
    },
    "interaction": [
        {
            "utterance": "What are the name of all the authors ?",
            "sql": "select authors.fname , authors.lname"
        },
        {
            "utterance": "Who published the paper `` Binders Unbound '' ?",
            "sql": "select authors.fname , authors.lname where papers.title = value"
        },
        {
            "utterance": "Give me only the last names .",
            "sql": "select authors.fname , authors.lname where papers.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".",
        "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "What are the name of all the authors ?",
            "sql": "select authors.fname , authors.lname"
        },
        {
            "utterance": "Who wrote the paper `` Nameless , Painless '' ?",
            "sql": "select authors.fname , authors.lname where papers.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the papers published under the institution \"Indiana University\"?",
        "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "What are the name of all the institutions ?",
            "sql": "select inst.name"
        },
        {
            "utterance": "Which papers are published under `` Indiana University '' ?",
            "sql": "select distinct papers.title where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find all the papers published by the institution \"Google\".",
        "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "Give me information about the institution `` Google '' .",
            "sql": "select inst.* where inst.name = value"
        },
        {
            "utterance": "Which papers did it publish ?",
            "sql": "select distinct papers.title where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many papers are published by the institution \"Tokohu University\"?",
        "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
    },
    "interaction": [
        {
            "utterance": "How many papers are there ?",
            "sql": "select count ( papers.* )"
        },
        {
            "utterance": "What are all the institutions ?",
            "sql": "select inst.*"
        },
        {
            "utterance": "How many papers are published by `` Tokohu University '' ?",
            "sql": "select count ( distinct papers.title ) where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the number of papers published by the institution \"University of Pennsylvania\".",
        "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\""
    },
    "interaction": [
        {
            "utterance": "How many papers are there ?",
            "sql": "select count ( papers.* )"
        },
        {
            "utterance": "What are all the institutions ?",
            "sql": "select inst.*"
        },
        {
            "utterance": "Give me the number of papers published by `` '' University of Pennsylvania '' '' .",
            "sql": "select count ( distinct papers.title ) where inst.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the papers which have \"Olin Shivers\" as an author.",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "What are the name of all the authors ?",
            "sql": "select authors.fname , authors.lname"
        },
        {
            "utterance": "Which papers did `` Olin Shivers '' write ?",
            "sql": "select papers.title where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which papers have \"Stephanie Weirich\" as an author?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "What are all the authors ?",
            "sql": "select authors.fname , authors.lname"
        },
        {
            "utterance": "Which papers did `` Stephanie Weirich '' write ?",
            "sql": "select papers.title where authors.fname = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\""
    },
    "interaction": [
        {
            "utterance": "What are all institutions in `` USA '' ?",
            "sql": "select inst.* where inst.country = value"
        },
        {
            "utterance": "What papers did they publish ?",
            "sql": "select distinct papers.title where inst.country = value"
        },
        {
            "utterance": "Among those , which have `` Turon '' as its second author ?",
            "sql": "select papers.title where inst.country = value and authorship.authorder = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    "interaction": [
        {
            "utterance": "What are all institutions in `` Japan '' ?",
            "sql": "select inst.* where inst.country = value"
        },
        {
            "utterance": "Which authors belong to them ?",
            "sql": "select authors.fname , authors.lname where inst.country = value"
        },
        {
            "utterance": "Who has last name `` Ohori '' ?",
            "sql": "select authors.fname , authors.lname where inst.country = value and authors.lname = value"
        },
        {
            "utterance": "Give me the titles of papers he wrote as the first author .",
            "sql": "select papers.title where inst.country = value and authorship.authorder = value and authors.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the last name of the author that has published the most papers?",
        "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the name of all the authors ?",
            "sql": "select authors.fname , authors.lname"
        },
        {
            "utterance": "How many papers did each of them publish ?",
            "sql": "select authors.fname , authors.lname , count ( * )"
        },
        {
            "utterance": "Who published the most ? Give me the last name .",
            "sql": "select authors.lname group_by authors.fname , authors.lname order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Retrieve the country that has published the most papers.",
        "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the countries ?",
            "sql": "select inst.country"
        },
        {
            "utterance": "How many papers did each of them publish ?",
            "sql": "select inst.country , count ( * ) group_by inst.country"
        },
        {
            "utterance": "Which country published the most ?",
            "sql": "select inst.country group_by inst.country order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Find the name of the organization that has published the largest number of papers.",
        "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the name of all the organizations ?",
            "sql": "select inst.name"
        },
        {
            "utterance": "How many papers did each of them publish ?",
            "sql": "select inst.name , count ( * ) group_by inst.name"
        },
        {
            "utterance": "Give me the name of the one published the most .",
            "sql": "select inst.name group_by inst.name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the titles of the papers that contain the word \"ML\".",
        "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "Which contains the word `` ML '' ? Give me the titles of them .",
            "sql": "select papers.title where papers.title like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 21,
    "final": {
        "utterance": "Which paper's title contains the word \"Database\"?",
        "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "Which contains the word `` Database '' ? Give me the titles of them .",
            "sql": "select papers.title where papers.title like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".",
        "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "Give me those whose title contains `` Functional '' .",
            "sql": "select papers.* where papers.title like value"
        },
        {
            "utterance": "Who wrote any of those ? Give me the first names only .",
            "sql": "select authors.fname where papers.title like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "icfp_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".",
        "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""
    },
    "interaction": [
        {
            "utterance": "What are all the papers ?",
            "sql": "select papers.*"
        },
        {
            "utterance": "Give me those whose title contains `` Monadic '' .",
            "sql": "select papers.* where papers.title like value"
        },
        {
            "utterance": "Who wrote any of those ? Give me the last names only .",
            "sql": "select authors.lname where papers.title like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 0,
    "final": {
        "utterance": "What is the first name, last name, and phone of the customer with account name 162?",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""
    },
    "interaction": [
        {
            "utterance": "How many custmers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many customers are there that have account name 162 ?",
            "sql": "select count ( * ) where accounts.account_name = value"
        },
        {
            "utterance": "Show his first name , last name , and phone .",
            "sql": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone where accounts.account_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 1,
    "final": {
        "utterance": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "Show the information of the customer with first name Art and last name Turcotte .",
            "sql": "select customers.* where customers.customer_first_name = value and customers.customer_last_name = value"
        },
        {
            "utterance": "Please show the account information of this customer .",
            "sql": "select * where customers.customer_first_name = value and customers.customer_last_name = value"
        },
        {
            "utterance": "How many accounts are there ?",
            "sql": "select count ( * ) where customers.customer_first_name = value and customers.customer_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the customer id and number of accounts with most accounts.",
        "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many accounts are there ?",
            "sql": "select count ( accounts.* )"
        },
        {
            "utterance": "How many accounts does each customer have ?",
            "sql": "select accounts.customer_id , count ( accounts.* ) group_by accounts.customer_id"
        },
        {
            "utterance": "Which customer has most accounts ? Show its id .",
            "sql": "select accounts.customer_id group_by accounts.customer_id order_by count ( accounts.* ) desc limit_value"
        },
        {
            "utterance": "Please also show the number of his accounts .",
            "sql": "select accounts.customer_id , count ( accounts.* ) group_by accounts.customer_id order_by count ( accounts.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the customer first, last name and id with least number of accounts.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many accounts are there ?",
            "sql": "select count ( accounts.* )"
        },
        {
            "utterance": "Which customer has least number of accounts ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name group_by accounts.customer_id order_by count ( * ) asc limit_value"
        },
        {
            "utterance": "Please also show his id .",
            "sql": "select customers.customer_first_name , customers.customer_last_name , accounts.customer_id group_by accounts.customer_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the number of all customers without an account.",
        "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    "interaction": [
        {
            "utterance": "How many customer are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "How many accounts are there ?",
            "sql": "select count ( accounts.* )"
        },
        {
            "utterance": "So , how many customers are there that does not have an account ?",
            "sql": "select count ( customers.* ) where customers.customer_id not in ( select accounts.customer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 5,
    "final": {
        "utterance": "Show the first names and last names of customers without any account.",
        "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    "interaction": [
        {
            "utterance": "How many customers are there ?",
            "sql": "select count ( customers.* )"
        },
        {
            "utterance": "Who have at least one accounts ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name"
        },
        {
            "utterance": "Who does not have any accounts ?",
            "sql": "select customers.customer_first_name , customers.customer_last_name except select customers.customer_first_name , customers.customer_last_name"
        },
        {
            "utterance": "Show his first names and last names .",
            "sql": "select customers.customer_first_name , customers.customer_last_name except select customers.customer_first_name , customers.customer_last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    "interaction": [
        {
            "utterance": "What information do you have for the customer with first name Aniyah and last name Feest ?",
            "sql": "select customers.* where customers.customer_first_name = value and customers.customer_last_name = value"
        },
        {
            "utterance": "Show her address please .",
            "sql": "select customers.customer_address where customers.customer_first_name = value and customers.customer_last_name = value"
        },
        {
            "utterance": "What is the phone and email for this customer ?",
            "sql": "select customers.customer_phone , customers.customer_email where customers.customer_first_name = value and customers.customer_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\""
    },
    "interaction": [
        {
            "utterance": "How many cards are there ?",
            "sql": "select count ( customers_cards.* )"
        },
        {
            "utterance": "Who has the card 4560596484842 ? Show full name .",
            "sql": "select customers.customer_first_name , customers.customer_last_name where customers_cards.card_number = value"
        },
        {
            "utterance": "Please also show his phone number .",
            "sql": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone where customers_cards.card_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "customers_card_transactions",
    "interaction_id": 8,
    "final": {
        "utterance": "How many cards does customer Art Turcotte have?",
        "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    "interaction": [
        {
            "utterance": "What information can you provide for the customer Art Turcotte ?",
            "sql": "select customers.* where customers.customer_first_name = value and customers.customer_last_name = value"
        },
        {
            "utterance": "What is his phone number ?",
            "sql": "select customers.customer_phone where customers.customer_first_name = value and customers.customer_last_name = value"
        },
        {
            "utterance": "How many cards does he have ?",
            "sql": "select count ( * ) where customers.customer_first_name = value and customers.customer_last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 0,
    "final": {
        "utterance": "what are the event details of the services that have the type code 'Marriage'?",
        "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'"
    },
    "interaction": [
        {
            "utterance": "List all the event ids with the type code being `` Death Proof '' .",
            "sql": "select events.event_id where services.service_type_code = value"
        },
        {
            "utterance": "What about 'Marriage ' ?",
            "sql": "select events.event_id where services.service_type_code = value"
        },
        {
            "utterance": "What are the event details of them ?",
            "sql": "select events.event_details where services.service_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the ids and details of events that have more than one participants?",
        "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many participants are there for event 3 ?",
            "sql": "select count ( * ) where events.event_id = value"
        },
        {
            "utterance": "How many events have 3 participants , list the event id and details .",
            "sql": "select events.event_id , events.event_details group_by events.event_id having count ( * ) = value"
        },
        {
            "utterance": "What about more than one participants ?",
            "sql": "select events.event_id , events.event_details group_by events.event_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 2,
    "final": {
        "utterance": "How many events have each participants attended? List the participant id, type and the number.",
        "sql": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID"
    },
    "interaction": [
        {
            "utterance": "List all the events that participant 66 has joined .",
            "sql": "select * where participants_in_events.participant_id = value"
        },
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( * ) where participants_in_events.participant_id = value"
        },
        {
            "utterance": "Show how many events for each participant that one has attended , keep the participant id , type and the count .",
            "sql": "select participants.participant_id , participants.participant_type_code , count ( * ) group_by participants.participant_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 3,
    "final": {
        "utterance": "What are all the the participant ids, type code and details?",
        "sql": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants"
    },
    "interaction": [
        {
            "utterance": "Show all the information about participants .",
            "sql": "select participants.*"
        },
        {
            "utterance": "What are the participant ids , type code and details about them ?",
            "sql": "select participants.participant_id , participants.participant_type_code , participants.participant_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 4,
    "final": {
        "utterance": "How many participants belong to the type 'Organizer'?",
        "sql": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'"
    },
    "interaction": [
        {
            "utterance": "How many unique participant types are there ?",
            "sql": "select count ( distinct participants.participant_type_code )"
        },
        {
            "utterance": "How many people are with the type 'Participant ' ?",
            "sql": "select count ( participants.* ) where participants.participant_type_code = value"
        },
        {
            "utterance": "What about 'Organizer ' ?",
            "sql": "select count ( participants.* ) where participants.participant_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 5,
    "final": {
        "utterance": "List the type of the services in alphabetical order.",
        "sql": "SELECT service_type_code FROM services ORDER BY service_type_code"
    },
    "interaction": [
        {
            "utterance": "How many service type codes are there ?",
            "sql": "select count ( services.service_type_code )"
        },
        {
            "utterance": "Order them in alphabetical order .",
            "sql": "select services.service_type_code order_by services.service_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 6,
    "final": {
        "utterance": "List the service id and details for the events.",
        "sql": "SELECT service_id ,  event_details FROM EVENTS"
    },
    "interaction": [
        {
            "utterance": "List all the information about events .",
            "sql": "select events.*"
        },
        {
            "utterance": "Only keep service id and details .",
            "sql": "select events.service_id , events.event_details"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 7,
    "final": {
        "utterance": "How many events had participants whose details had the substring 'Dr.'",
        "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
    },
    "interaction": [
        {
            "utterance": "How many events are there in total ?",
            "sql": "select count ( participants.* )"
        },
        {
            "utterance": "Among those , which of them had participants whose details had the substring 'Miss '",
            "sql": "select * where participants.participant_details like value"
        },
        {
            "utterance": "What about 'Dr . ' ?",
            "sql": "select * where participants.participant_details like value"
        },
        {
            "utterance": "How many are there in total ?",
            "sql": "select count ( * ) where participants.participant_details like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the most common participant type?",
        "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the participant types .",
            "sql": "select participants.participant_type_code"
        },
        {
            "utterance": "How many unique participant types are there ?",
            "sql": "select count ( distinct participants.participant_type_code )"
        },
        {
            "utterance": "Among those which one is the most popular one ?",
            "sql": "select participants.participant_type_code group_by participants.participant_type_code order_by count ( participants.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 9,
    "final": {
        "utterance": "Which service id and type has the least number of participants?",
        "sql": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of participants for each event .",
            "sql": "select participants_in_events.event_id , count ( participants_in_events.* ) group_by participants_in_events.event_id"
        },
        {
            "utterance": "Among those , which event id has the least participants ?",
            "sql": "select participants_in_events.event_id group_by participants_in_events.event_id order_by count ( participants_in_events.* ) asc limit_value"
        },
        {
            "utterance": "What service id is it ?",
            "sql": "select events.service_id where events.event_id = ( select participants_in_events.event_id group_by participants_in_events.event_id order_by count ( participants_in_events.* ) asc limit_value )"
        },
        {
            "utterance": "Also list the service type of it .",
            "sql": "select events.service_id , services.service_type_code group_by events.service_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the id of the event with the most participants?",
        "sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count the number of participants for each event .",
            "sql": "select participants_in_events.event_id , count ( participants_in_events.* ) group_by participants_in_events.event_id"
        },
        {
            "utterance": "Among those , which event id has the least participants ?",
            "sql": "select participants_in_events.event_id group_by participants_in_events.event_id order_by count ( participants_in_events.* ) asc limit_value"
        },
        {
            "utterance": "What about the one that has the mose participants ?",
            "sql": "select participants_in_events.event_id group_by participants_in_events.event_id order_by count ( participants_in_events.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 11,
    "final": {
        "utterance": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( events.* )"
        },
        {
            "utterance": "List the events that have participant details with 'Lupe Deckow ' ?",
            "sql": "select participants.* where participants.participant_details = value"
        },
        {
            "utterance": "What about the ones with 'Kenyatta Kuhn ' ?",
            "sql": "select participants.* where participants.participant_details = value"
        },
        {
            "utterance": "Show the id of the events where the above participants did not participate .",
            "sql": "select events.event_id except select participants_in_events.event_id where participants.participant_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 12,
    "final": {
        "utterance": "Which services type had both successful and failure event details?",
        "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'"
    },
    "interaction": [
        {
            "utterance": "List all the service types .",
            "sql": "select services.service_type_code"
        },
        {
            "utterance": "Which service code has successful details ?",
            "sql": "select services.service_type_code where events.event_details = value"
        },
        {
            "utterance": "Then which has both successful and failure event details ?",
            "sql": "select services.service_type_code where events.event_details = value intersect select services.service_type_code where events.event_details = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "local_govt_in_alabama",
    "interaction_id": 13,
    "final": {
        "utterance": "How many events did not have any participants?",
        "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
    },
    "interaction": [
        {
            "utterance": "How many events are there ?",
            "sql": "select count ( events.* )"
        },
        {
            "utterance": "List all the event ids .",
            "sql": "select participants_in_events.event_id"
        },
        {
            "utterance": "Show all the event information if the event has someone participated .",
            "sql": "select events.* where events.event_id in ( select participants_in_events.event_id )"
        },
        {
            "utterance": "How about nobody has participated ?",
            "sql": "select events.* where events.event_id not in ( select participants_in_events.event_id )"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( events.* ) where events.event_id not in ( select participants_in_events.event_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 0,
    "final": {
        "utterance": "How many body builders are there?",
        "sql": "SELECT count(*) FROM body_builder"
    },
    "interaction": [
        {
            "utterance": "Show all body builder information .",
            "sql": "select body_builder.*"
        },
        {
            "utterance": "Then how many are there ?",
            "sql": "select count ( body_builder.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 1,
    "final": {
        "utterance": "List the total scores of body builders in ascending order.",
        "sql": "SELECT Total FROM body_builder ORDER BY Total ASC"
    },
    "interaction": [
        {
            "utterance": "What are the total scores for each body builder ?",
            "sql": "select body_builder.total"
        },
        {
            "utterance": "How do you order them in ascending order ?",
            "sql": "select body_builder.total order_by body_builder.total asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 2,
    "final": {
        "utterance": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "sql": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC"
    },
    "interaction": [
        {
            "utterance": "What are the snatch scores of each body builder ?",
            "sql": "select body_builder.snatch"
        },
        {
            "utterance": "What are the snatch score and clean jerk score of each body_builder ?",
            "sql": "select body_builder.snatch , body_builder.clean_jerk"
        },
        {
            "utterance": "Order the results in ascending order of snatch score .",
            "sql": "select body_builder.snatch , body_builder.clean_jerk order_by body_builder.snatch asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average snatch score of body builders?",
        "sql": "SELECT avg(Snatch) FROM body_builder"
    },
    "interaction": [
        {
            "utterance": "What is the snatch score of each body builder ?",
            "sql": "select body_builder.snatch"
        },
        {
            "utterance": "What is the minimum value of the them ?",
            "sql": "select min ( body_builder.snatch )"
        },
        {
            "utterance": "What about the mean value ?",
            "sql": "select avg ( body_builder.snatch )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the clean and jerk score of the body builder with the highest total score?",
        "sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are all the information about the body builders ?",
            "sql": "select body_builder.*"
        },
        {
            "utterance": "Which have the top three total score ?",
            "sql": "select body_builder.* order_by body_builder.total desc limit_value"
        },
        {
            "utterance": "What about top one ?",
            "sql": "select body_builder.* order_by body_builder.total desc limit_value"
        },
        {
            "utterance": "Show the clean and jerk score of it .",
            "sql": "select body_builder.clean_jerk order_by body_builder.total desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the birthdays of people in ascending order of height?",
        "sql": "SELECT Birth_Date FROM People ORDER BY Height ASC"
    },
    "interaction": [
        {
            "utterance": "Show everything about the people .",
            "sql": "select people.*"
        },
        {
            "utterance": "What are the birthdays ?",
            "sql": "select people.birth_date"
        },
        {
            "utterance": "Order the results in descending order of height .",
            "sql": "select people.birth_date order_by people.height desc"
        },
        {
            "utterance": "What about ascending order ?",
            "sql": "select people.birth_date order_by people.height asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of body builders?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the people ?",
            "sql": "select people.name"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( people.name )"
        },
        {
            "utterance": "Show the names of body builders .",
            "sql": "select people.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of body builders whose total score is higher than 300?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the people ?",
            "sql": "select people.name"
        },
        {
            "utterance": "Show the names of body builders .",
            "sql": "select people.name"
        },
        {
            "utterance": "Among those , which total score is higher than 200 ?",
            "sql": "select people.name where body_builder.total > value"
        },
        {
            "utterance": "What about higher than 300 ?",
            "sql": "select people.name where body_builder.total > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the name of the body builder with the greatest body weight?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the people ?",
            "sql": "select people.name"
        },
        {
            "utterance": "Show the names of body builders .",
            "sql": "select people.name"
        },
        {
            "utterance": "Show the names of them which has the greatest body weight .",
            "sql": "select people.name order_by people.weight desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the birth date and birth place of the body builder with the highest total points?",
        "sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the information of all the people .",
            "sql": "select people.*"
        },
        {
            "utterance": "Show the Birth Date and Birth Place about each one .",
            "sql": "select people.birth_date , people.birth_place"
        },
        {
            "utterance": "What about the body builders ?",
            "sql": "select people.birth_date , people.birth_place"
        },
        {
            "utterance": "Among those , show the three which have the highest total points ?",
            "sql": "select people.birth_date , people.birth_place order_by body_builder.total desc limit_value"
        },
        {
            "utterance": "What about the highest total point ?",
            "sql": "select people.birth_date , people.birth_place order_by body_builder.total desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the heights of body builders with total score smaller than 315?",
        "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315"
    },
    "interaction": [
        {
            "utterance": "What are the heights of the people ?",
            "sql": "select people.height"
        },
        {
            "utterance": "What is the average ?",
            "sql": "select avg ( people.height )"
        },
        {
            "utterance": "What are the heights of the body builders ?",
            "sql": "select people.height"
        },
        {
            "utterance": "For those results , which ones have weight larger than 91.0 ?",
            "sql": "select people.height where people.weight > value"
        },
        {
            "utterance": "What about the total score is smaller than 315 ?",
            "sql": "select people.height where body_builder.total < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the average total score of body builders with height bigger than 200?",
        "sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200"
    },
    "interaction": [
        {
            "utterance": "What are the total scores of body builder ?",
            "sql": "select body_builder.total"
        },
        {
            "utterance": "How about the average value of those scores ?",
            "sql": "select avg ( body_builder.total )"
        },
        {
            "utterance": "What are the average scores of those results where the people weight is larger than 100.0 ?",
            "sql": "select avg ( body_builder.total ) where people.weight > value"
        },
        {
            "utterance": "What about the people height larger than 200 ?",
            "sql": "select avg ( body_builder.total ) where people.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the names of body builders in descending order of total scores?",
        "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of body builders ?",
            "sql": "select people.name"
        },
        {
            "utterance": "List these results in ascending order by the weight .",
            "sql": "select people.name order_by people.weight asc"
        },
        {
            "utterance": "Now list them in descending order by the total score .",
            "sql": "select people.name order_by body_builder.total desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 13,
    "final": {
        "utterance": "List each birth place along with the number of people from there.",
        "sql": "SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place"
    },
    "interaction": [
        {
            "utterance": "What are the birth places ?",
            "sql": "select people.birth_place"
        },
        {
            "utterance": "How many people in each birth place ?",
            "sql": "select people.birth_place , count ( people.* ) group_by people.birth_place"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the most common birth place of people?",
        "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the information of all the people ?",
            "sql": "select people.*"
        },
        {
            "utterance": "What are the birth places of all the people ?",
            "sql": "select people.birth_place"
        },
        {
            "utterance": "How many people in each of the birth place ?",
            "sql": "select people.birth_place , count ( people.* ) group_by people.birth_place"
        },
        {
            "utterance": "What are the four most popular birth places ?",
            "sql": "select people.birth_place group_by people.birth_place order_by count ( people.* ) desc limit_value"
        },
        {
            "utterance": "What about top one ?",
            "sql": "select people.birth_place group_by people.birth_place order_by count ( people.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the birth places that are shared by at least two people?",
        "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What are the birth places of all the people ?",
            "sql": "select people.birth_place"
        },
        {
            "utterance": "How many people in each of the birth place ?",
            "sql": "select people.birth_place , count ( people.* ) group_by people.birth_place"
        },
        {
            "utterance": "Keep the birth places where the birth place is only token by one person .",
            "sql": "select people.birth_place group_by people.birth_place having count ( people.* ) = value"
        },
        {
            "utterance": "What about at least two people ?",
            "sql": "select people.birth_place group_by people.birth_place having count ( people.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 16,
    "final": {
        "utterance": "List the height and weight of people in descending order of height.",
        "sql": "SELECT Height ,  Weight FROM people ORDER BY Height DESC"
    },
    "interaction": [
        {
            "utterance": "What are the heights and weights of all the people ?",
            "sql": "select people.height , people.weight"
        },
        {
            "utterance": "Show those results in descending order ?",
            "sql": "select people.height , people.weight order_by people.height desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 17,
    "final": {
        "utterance": "Show all information about each body builder.",
        "sql": "SELECT * FROM body_builder"
    },
    "interaction": [
        {
            "utterance": "What information about all the body builders ?",
            "sql": "select body_builder.*"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 18,
    "final": {
        "utterance": "List the names and origins of people who are not body builders.",
        "sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id"
    },
    "interaction": [
        {
            "utterance": "Show the name and birth place about the people .",
            "sql": "select people.name , people.birth_place"
        },
        {
            "utterance": "Show that of all the body builders",
            "sql": "select people.name , people.birth_place"
        },
        {
            "utterance": "What are the name and birth place of people who are not body builders ?",
            "sql": "select people.name , people.birth_place except select people.name , people.birth_place"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 19,
    "final": {
        "utterance": "How many distinct birth places are there?",
        "sql": "SELECT count(DISTINCT Birth_Place) FROM people"
    },
    "interaction": [
        {
            "utterance": "What are the birth places are there ?",
            "sql": "select people.birth_place"
        },
        {
            "utterance": "What are the unique birth places ?",
            "sql": "select distinct people.birth_place"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct people.birth_place )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 20,
    "final": {
        "utterance": "How many persons are not body builders?",
        "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)"
    },
    "interaction": [
        {
            "utterance": "Show the people Id of the body builders .",
            "sql": "select body_builder.people_id"
        },
        {
            "utterance": "Which people are there ?",
            "sql": "select people.* where people.people_id in ( select body_builder.people_id )"
        },
        {
            "utterance": "What about people who are not there ?",
            "sql": "select people.* where people.people_id not in ( select body_builder.people_id )"
        },
        {
            "utterance": "How many such people in total ?",
            "sql": "select count ( people.* ) where people.people_id not in ( select body_builder.people_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 21,
    "final": {
        "utterance": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;"
    },
    "interaction": [
        {
            "utterance": "What are the weights of the body builders ?",
            "sql": "select people.weight"
        },
        {
            "utterance": "With those weights , keep the ones whose snatch score is higher 180 .",
            "sql": "select people.weight where body_builder.snatch > value"
        },
        {
            "utterance": "What about higher than 140 or the height is greater than 200 ?",
            "sql": "select people.weight where body_builder.snatch > value or people.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "body_builder",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"
    },
    "interaction": [
        {
            "utterance": "What are the total scores of the body builders",
            "sql": "select body_builder.total"
        },
        {
            "utterance": "Among those , show the one who was born in May .",
            "sql": "select body_builder.total where people.birth_date like value"
        },
        {
            "utterance": "What about born in January ?",
            "sql": "select body_builder.total where people.birth_date like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 0,
    "final": {
        "utterance": "How many pilots are there?",
        "sql": "SELECT count(*) FROM pilot"
    },
    "interaction": [
        {
            "utterance": "List all the pilots .",
            "sql": "select pilot.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( pilot.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names of pilots in ascending order of rank.",
        "sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC"
    },
    "interaction": [
        {
            "utterance": "Show all the pilot names",
            "sql": "select pilot.pilot_name"
        },
        {
            "utterance": "How many in total ?",
            "sql": "select count ( pilot.pilot_name )"
        },
        {
            "utterance": "Order them in ascending order of the rank .",
            "sql": "select pilot.pilot_name order_by pilot.rank asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the positions and teams of pilots?",
        "sql": "SELECT POSITION ,  Team FROM pilot"
    },
    "interaction": [
        {
            "utterance": "Show all the pilot names and positions .",
            "sql": "select pilot.pilot_name , pilot.position"
        },
        {
            "utterance": "What about the pilot names and their teams ?",
            "sql": "select pilot.position , pilot.team"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 3,
    "final": {
        "utterance": "List the distinct positions of pilots older than 30.",
        "sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30"
    },
    "interaction": [
        {
            "utterance": "Show all the pilot names and positions",
            "sql": "select pilot.pilot_name , pilot.position"
        },
        {
            "utterance": "Show all the names and their age ?",
            "sql": "select pilot.pilot_name , pilot.age"
        },
        {
            "utterance": "Keep those who are 37 years old .",
            "sql": "select pilot.pilot_name , pilot.age where pilot.age = value"
        },
        {
            "utterance": "Show the distinct positions of pilots older than 30 .",
            "sql": "select distinct pilot.position where pilot.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "sql": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\""
    },
    "interaction": [
        {
            "utterance": "List all pilot names with there team name .",
            "sql": "select pilot.pilot_name , pilot.team"
        },
        {
            "utterance": "Among those , which are from the Team `` Bradley '' ?",
            "sql": "select pilot.pilot_name where pilot.team = value"
        },
        {
            "utterance": "What about `` Eau Claire High School '' ?",
            "sql": "select pilot.pilot_name where pilot.team = value"
        },
        {
            "utterance": "What about `` Bradley '' or `` Fordham '' ?",
            "sql": "select pilot.pilot_name where pilot.team = value or pilot.team = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the joined year of the pilot of the highest rank?",
        "sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the pilot names and the join years .",
            "sql": "select pilot.pilot_name , pilot.join_year"
        },
        {
            "utterance": "How many unique years are there ?",
            "sql": "select count ( pilot.join_year )"
        },
        {
            "utterance": "List the years by the pilot rank in ascending order .",
            "sql": "select pilot.join_year order_by pilot.rank asc"
        },
        {
            "utterance": "In which join year , the pilot has the highest rank ?",
            "sql": "select pilot.join_year order_by pilot.rank asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "sql": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality"
    },
    "interaction": [
        {
            "utterance": "Show the pilot names and their nationalities .",
            "sql": "select pilot.pilot_name , pilot.nationality"
        },
        {
            "utterance": "Which nationalities have the pilots whose position is `` Center Team '' ?",
            "sql": "select pilot.nationality where pilot.position = value"
        },
        {
            "utterance": "Show the nationalities and the number of pilots for each .",
            "sql": "select pilot.nationality , count ( pilot.* ) group_by pilot.nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the most common nationality of pilots.",
        "sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the pilot names and their nationalities .",
            "sql": "select pilot.pilot_name , pilot.nationality"
        },
        {
            "utterance": "Which nationalities have the pilots who is younger than 34 ?",
            "sql": "select pilot.nationality where pilot.age < value"
        },
        {
            "utterance": "Show each one and the number of pilots .",
            "sql": "select pilot.nationality , count ( pilot.* ) group_by pilot.nationality"
        },
        {
            "utterance": "Among those , which one is the most popular one ?",
            "sql": "select pilot.nationality group_by pilot.nationality order_by count ( pilot.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005"
    },
    "interaction": [
        {
            "utterance": "List all the pilot positions .",
            "sql": "select pilot.position"
        },
        {
            "utterance": "Keep the ones whose age is younger than 35",
            "sql": "select pilot.position where pilot.age < value"
        },
        {
            "utterance": "What about the join year is early than 2000 ?",
            "sql": "select pilot.position where pilot.join_year < value"
        },
        {
            "utterance": "What about in the range of year f2000 and 2005 ?",
            "sql": "select pilot.position where pilot.join_year < value intersect select pilot.position where pilot.join_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of pilots and models of aircrafts they have flied with.",
        "sql": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID"
    },
    "interaction": [
        {
            "utterance": "What are all the information about the pilots ?",
            "sql": "select pilot.*"
        },
        {
            "utterance": "What about the fleet series ?",
            "sql": "select aircraft.fleet_series"
        },
        {
            "utterance": "How about the aircraft models ?",
            "sql": "select aircraft.model"
        },
        {
            "utterance": "Show all the flying records with the pilot names and the aircraft 's models .",
            "sql": "select pilot.pilot_name , aircraft.model"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank"
    },
    "interaction": [
        {
            "utterance": "What are all the information about the pilots ?",
            "sql": "select pilot.*"
        },
        {
            "utterance": "What about the fleet series ?",
            "sql": "select aircraft.fleet_series"
        },
        {
            "utterance": "Show all the flying records with the pilot names and the aircraft 's sleet series .",
            "sql": "select pilot.pilot_name , aircraft.fleet_series"
        },
        {
            "utterance": "Now show those results in ascending order of the pilot age .",
            "sql": "select pilot.pilot_name , aircraft.fleet_series order_by pilot.age"
        },
        {
            "utterance": "What about in ascending order of the pilot rank ?",
            "sql": "select pilot.pilot_name , aircraft.fleet_series order_by pilot.rank"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34"
    },
    "interaction": [
        {
            "utterance": "Show all the fleet series ?",
            "sql": "select aircraft.fleet_series"
        },
        {
            "utterance": "Which aircrafts have been flied by pilot whose name is `` Charles Oakley '' ?",
            "sql": "select aircraft.fleet_series where pilot.pilot_name = value"
        },
        {
            "utterance": "What about the ones that have been flied by pilots younger than 34",
            "sql": "select aircraft.fleet_series where pilot.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of pilots and the number of records they have.",
        "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"
    },
    "interaction": [
        {
            "utterance": "How many records in total ?",
            "sql": "select count ( pilot_record.* )"
        },
        {
            "utterance": "Show the pilot names where there is at lease one record .",
            "sql": "select pilot.pilot_name group_by pilot.pilot_name"
        },
        {
            "utterance": "Show the names and the corresponding number of records .",
            "sql": "select pilot.pilot_name , count ( * ) group_by pilot.pilot_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pilot_record",
    "interaction_id": 13,
    "final": {
        "utterance": "Show names of pilots that have more than one record.",
        "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many records are there ?",
            "sql": "select count ( pilot_record.* )"
        },
        {
            "utterance": "Show the pilot names where there is at lease one record .",
            "sql": "select pilot.pilot_name group_by pilot.pilot_name"
        },
        {
            "utterance": "Which pilot has only one record ?",
            "sql": "select pilot.pilot_name , count ( * ) group_by pilot.pilot_name having count ( * ) = value"
        },
        {
            "utterance": "What about the ones who have more than one record ?",
            "sql": "select pilot.pilot_name , count ( * ) group_by pilot.pilot_name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Give me the start station and end station for the trips with the three oldest ids.",
        "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Which trips have the oldest ids ? Limit it to 3 .",
            "sql": "select trip.* order_by trip.id limit_value"
        },
        {
            "utterance": "Just show information on the start station and end station for those .",
            "sql": "select trip.start_station_name , trip.end_station_name order_by trip.id limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the average latitude and longitude of stations located in San Jose city?",
        "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
    },
    "interaction": [
        {
            "utterance": "Which stations are located in San Jose City ?",
            "sql": "select station.name where station.city = value"
        },
        {
            "utterance": "For those , which are their latitude and longitude ?",
            "sql": "select station.lat , station.long where station.city = value"
        },
        {
            "utterance": "Take averages .",
            "sql": "select avg ( station.lat ) , avg ( station.long ) where station.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the id of the trip that has the shortest duration?",
        "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Order the trips by duration , ascending .",
            "sql": "select trip.* order_by trip.duration"
        },
        {
            "utterance": "Limit it to the ids .",
            "sql": "select trip.id order_by trip.duration"
        },
        {
            "utterance": "Limit it to the shortest duration .",
            "sql": "select trip.id order_by trip.duration limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the total and maximum duration of trips with bike id 636?",
        "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
    },
    "interaction": [
        {
            "utterance": "Show records of trips with bike id 636 .",
            "sql": "select trip.* where trip.bike_id = value"
        },
        {
            "utterance": "just show the durations .",
            "sql": "select trip.duration where trip.bike_id = value"
        },
        {
            "utterance": "Take a sum and max .",
            "sql": "select sum ( trip.duration ) , max ( trip.duration ) where trip.bike_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 4,
    "final": {
        "utterance": "For each zip code, return the average mean temperature of August there.",
        "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
    },
    "interaction": [
        {
            "utterance": "Show weather records from August .",
            "sql": "select weather.* where weather.date like value"
        },
        {
            "utterance": "Just show the mean temperature in those records .",
            "sql": "select weather.mean_temperature_f where weather.date like value"
        },
        {
            "utterance": "Group by zipcode and average those records .",
            "sql": "select weather.zip_code , avg ( weather.mean_temperature_f ) where weather.date like value group_by weather.zip_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Return the unique name for stations that have ever had 7 bikes available.",
        "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
    },
    "interaction": [
        {
            "utterance": "Which station ids ever had 7 bikes available ?",
            "sql": "select distinct status.station_id where status.bikes_available = value"
        },
        {
            "utterance": "Give the names for those stations .",
            "sql": "select distinct station.name where status.bikes_available = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show trip records from August .",
            "sql": "select trip.* where trip.start_date like value"
        },
        {
            "utterance": "Limit that to the start station name and id .",
            "sql": "select trip.start_station_name , trip.start_station_id where trip.start_date like value"
        },
        {
            "utterance": "Which start station had the most trips starting from August ? Give me the name and id of the station .",
            "sql": "select trip.start_station_name , trip.start_station_id where trip.start_date like value group_by trip.start_station_name order_by count ( trip.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Which bike traveled the most often in zip code 94002?",
        "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show bike ids that traveled in zip code 94002 .",
            "sql": "select distinct trip.bike_id where trip.zip_code = value"
        },
        {
            "utterance": "Which traveled there most often ?",
            "sql": "select trip.bike_id where trip.zip_code = value group_by trip.bike_id order_by count ( trip.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 8,
    "final": {
        "utterance": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
    },
    "interaction": [
        {
            "utterance": "Show the records of weather events with both mean humidity above 50 and mean visibility above 8 .",
            "sql": "select weather.* where weather.mean_humidity > value and weather.mean_visibility_miles > value"
        },
        {
            "utterance": "Count those days .",
            "sql": "select count ( weather.* ) where weather.mean_humidity > value and weather.mean_visibility_miles > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give records on the lengths of trips .",
            "sql": "select trip.duration"
        },
        {
            "utterance": "Give records on the shortest trip .",
            "sql": "select trip.* order_by trip.duration limit_value"
        },
        {
            "utterance": "From which station id did it originate ?",
            "sql": "select trip.start_station_id order_by trip.duration limit_value"
        },
        {
            "utterance": "For that start station id , give latitude , longitude , and city .",
            "sql": "select station.lat , station.long , station.city order_by trip.duration limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    "interaction": [
        {
            "utterance": "Which station ids have average availability above 10 ?",
            "sql": "select distinct status.station_id group_by status.station_id having avg ( status.bikes_available ) > value"
        },
        {
            "utterance": "And which are located in San Francisco ?",
            "sql": "select distinct station.id where station.city = value"
        },
        {
            "utterance": "Which pass both conditions ?",
            "sql": "select station.id where station.city = value intersect select status.station_id group_by status.station_id having avg ( status.bikes_available ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
    },
    "interaction": [
        {
            "utterance": "Show records ( name and id ) of stations installed in December .",
            "sql": "select station.name , station.id where station.installation_date like value"
        },
        {
            "utterance": "Which had more than 14 bikes available ?",
            "sql": "select station.name , station.id group_by status.station_id having avg ( status.bikes_available ) > value"
        },
        {
            "utterance": "Union those two .",
            "sql": "select station.name , station.id group_by status.station_id having avg ( status.bikes_available ) > value union select station.name , station.id where station.installation_date like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show records on cloud cover ?",
            "sql": "select weather.cloud_cover"
        },
        {
            "utterance": "Just for the zip code 94107 .",
            "sql": "select weather.cloud_cover where weather.zip_code = value"
        },
        {
            "utterance": "What is the 3 most common cloud cover rates in the region of zip code 94107 ?",
            "sql": "select weather.cloud_cover where weather.zip_code = value group_by weather.cloud_cover order_by count ( weather.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the records on mean sea level pressure by zip code .",
            "sql": "select weather.zip_code , weather.mean_sea_level_pressure_inches group_by weather.zip_code"
        },
        {
            "utterance": "Now group by zip code and average over the pressure .",
            "sql": "select weather.zip_code , avg ( weather.mean_sea_level_pressure_inches ) group_by weather.zip_code"
        },
        {
            "utterance": "Which zip code has the lowest of those ?",
            "sql": "select weather.zip_code group_by weather.zip_code order_by avg ( weather.mean_sea_level_pressure_inches ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the average bike availability in stations that are not located in Palo Alto?",
        "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    "interaction": [
        {
            "utterance": "Which stations are located in `` Palo Alto '' ?",
            "sql": "select station.id where station.city = value"
        },
        {
            "utterance": "What is the average bike availability in stations that are not located in Palo Alto ?",
            "sql": "select avg ( status.bikes_available ) where status.station_id not in ( select station.id where station.city = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the average longitude of stations that never had bike availability more than 10?",
        "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    "interaction": [
        {
            "utterance": "Which station ids ever had bike availability more than 10 ?",
            "sql": "select distinct status.station_id group_by status.station_id having max ( status.bikes_available ) > value"
        },
        {
            "utterance": "Which did not ?",
            "sql": "select station.id where station.id not in ( select status.station_id group_by status.station_id having max ( status.bikes_available ) > value )"
        },
        {
            "utterance": "For those , take the average longitude .",
            "sql": "select avg ( station.long ) where station.id not in ( select status.station_id group_by status.station_id having max ( status.bikes_available ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
    },
    "interaction": [
        {
            "utterance": "Give zip codes from trips .",
            "sql": "select distinct trip.zip_code"
        },
        {
            "utterance": "Which zip codes had an average mean temperature greater than 60 ?",
            "sql": "select weather.zip_code group_by weather.zip_code having avg ( weather.mean_temperature_f ) > value"
        },
        {
            "utterance": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60 .",
            "sql": "select trip.id group_by weather.zip_code having avg ( weather.mean_temperature_f ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 17,
    "final": {
        "utterance": "For each zip code, return how many times max wind speed reached 25?",
        "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"
    },
    "interaction": [
        {
            "utterance": "Give weather records with max wind speed greater than or equal to 25 .",
            "sql": "select weather.* where weather.max_wind_speed_mph > = value"
        },
        {
            "utterance": "Count the times that event occurred by zip code .",
            "sql": "select weather.zip_code , count ( weather.* ) where weather.max_wind_speed_mph > = value group_by weather.zip_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 18,
    "final": {
        "utterance": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"
    },
    "interaction": [
        {
            "utterance": "What is the minimum min dew point in zip code 94107 ?",
            "sql": "select min ( weather.min_dew_point_f ) where weather.zip_code = value"
        },
        {
            "utterance": "Give dates and zip codes with lower min dew points than that , even .",
            "sql": "select weather.date , weather.zip_code where weather.min_dew_point_f < ( select min ( weather.min_dew_point_f ) where weather.zip_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the dock counts of stations .",
            "sql": "select station.name , station.dock_count"
        },
        {
            "utterance": "Which dock count is largest ?",
            "sql": "select station.name , station.dock_count order_by station.dock_count desc limit_value"
        },
        {
            "utterance": "Give the trip id of the trip that started there .",
            "sql": "select trip.id order_by station.dock_count desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Count the number of trips that did not end in San Francisco city.",
        "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\""
    },
    "interaction": [
        {
            "utterance": "Which trips ended in San Francisco ?",
            "sql": "select trip.id where station.city = value"
        },
        {
            "utterance": "Which did not ?",
            "sql": "select trip.id where station.city != value"
        },
        {
            "utterance": "Count them .",
            "sql": "select count ( * ) where station.city != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 21,
    "final": {
        "utterance": "In zip code 94107, on which day neither Fog nor Rain was observed?",
        "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
    },
    "interaction": [
        {
            "utterance": "Which weather events had Fog or Rain ?",
            "sql": "select weather.* where weather.events = value or weather.events = value"
        },
        {
            "utterance": "Which had neither ?",
            "sql": "select weather.* where weather.events != value and weather.events != value"
        },
        {
            "utterance": "Limit the search to zip code 94107 .",
            "sql": "select weather.* where weather.zip_code = value and weather.events != value and weather.events != value"
        },
        {
            "utterance": "Just give the date .",
            "sql": "select weather.date where weather.zip_code = value and weather.events != value and weather.events != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
    },
    "interaction": [
        {
            "utterance": "Which station ids ever had bike availability below 7 ?",
            "sql": "select distinct status.station_id group_by status.station_id having min ( status.bikes_available ) < value"
        },
        {
            "utterance": "Which did not ?",
            "sql": "select station.id except select status.station_id group_by status.station_id having min ( status.bikes_available ) < value"
        },
        {
            "utterance": "Force those stations to additionally have latitude above 37.4 .",
            "sql": "select station.id where station.lat > value except select status.station_id group_by status.station_id having min ( status.bikes_available ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    "interaction": [
        {
            "utterance": "Which stations are located in San Jose ?",
            "sql": "select station.name where station.city = value"
        },
        {
            "utterance": "What are names of stations that have average bike availability above 10 and are not located in San Jose city ?",
            "sql": "select station.name group_by status.station_id having avg ( status.bikes_available ) > value except select station.name where station.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the name, latitude, and city of the station with the lowest latitude?",
        "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Give name , latitude , and city from stations .",
            "sql": "select station.name , station.lat , station.city"
        },
        {
            "utterance": "Order that by latitude ascending .",
            "sql": "select station.name , station.lat , station.city order_by station.lat"
        },
        {
            "utterance": "Just limit it to the lowest latitude .",
            "sql": "select station.name , station.lat , station.city order_by station.lat limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Which dates had the largest max gust speed ?",
            "sql": "select weather.date order_by weather.max_gust_speed_mph desc limit_value"
        },
        {
            "utterance": "Also give mean temperature and mean humidity .",
            "sql": "select weather.date , weather.mean_temperature_f , weather.mean_humidity order_by weather.max_gust_speed_mph desc limit_value"
        },
        {
            "utterance": "Give the top 3 days instead .",
            "sql": "select weather.date , weather.mean_temperature_f , weather.mean_humidity order_by weather.max_gust_speed_mph desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 26,
    "final": {
        "utterance": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"
    },
    "interaction": [
        {
            "utterance": "Which city has the most stations ?",
            "sql": "select station.city group_by station.city order_by count ( station.* ) desc limit_value"
        },
        {
            "utterance": "List the name and the number of stations for all the cities that have at least 15 stations .",
            "sql": "select station.city , count ( station.* ) group_by station.city having count ( station.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Find the ids and names of stations from which at least 200 trips started.",
        "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_id HAVING COUNT(*)  >=  200"
    },
    "interaction": [
        {
            "utterance": "Give the ids of start stations together with the count of trips originated there .",
            "sql": "select trip.start_station_id , count ( trip.* ) group_by trip.start_station_id"
        },
        {
            "utterance": "Show the id and name for those with count at least 200 .",
            "sql": "select trip.start_station_id , trip.start_station_name group_by trip.start_station_id having count ( trip.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the zip code in which the average mean visibility is lower than 10.",
        "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
    },
    "interaction": [
        {
            "utterance": "Show the zip codes and average mean visibilities .",
            "sql": "select weather.zip_code , weather.mean_visibility_miles"
        },
        {
            "utterance": "Find the zip code in which the average mean visibility is lower than 10 .",
            "sql": "select weather.zip_code group_by weather.zip_code having avg ( weather.mean_visibility_miles ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 29,
    "final": {
        "utterance": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
    },
    "interaction": [
        {
            "utterance": "What is the highest latitude of any station ?",
            "sql": "select max ( station.lat )"
        },
        {
            "utterance": "Show that for each city",
            "sql": "select station.city , max ( station.lat ) group_by station.city"
        },
        {
            "utterance": "List all the cities in a decreasing order of each city 's stations ' highest latitude .",
            "sql": "select station.city group_by station.city order_by max ( station.lat ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
    },
    "interaction": [
        {
            "utterance": "Show dates ordered by descending cloud cover rate .",
            "sql": "select weather.date order_by weather.cloud_cover"
        },
        {
            "utterance": "Also show me the cloud cover rate .",
            "sql": "select weather.date , weather.cloud_cover order_by weather.cloud_cover"
        },
        {
            "utterance": "Only the top 5 .",
            "sql": "select weather.date , weather.cloud_cover order_by weather.cloud_cover desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the ids and durations of the trips with the top 3 durations?",
        "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Show trip durations .",
            "sql": "select trip.duration"
        },
        {
            "utterance": "What are the ids and durations of the trips with the top 3 durations ?",
            "sql": "select trip.id , trip.duration order_by trip.duration desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 32,
    "final": {
        "utterance": "For each station, return its longitude and the average duration of trips that started from the station.",
        "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"
    },
    "interaction": [
        {
            "utterance": "Show the average duration of trips starting from each station id .",
            "sql": "select trip.start_station_id , avg ( trip.duration ) group_by trip.start_station_id"
        },
        {
            "utterance": "For each station , return its longitude and the average duration of trips that started from the station .",
            "sql": "select station.name , station.long , avg ( trip.duration ) group_by trip.start_station_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 33,
    "final": {
        "utterance": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"
    },
    "interaction": [
        {
            "utterance": "Show the average duration of trips ending at each station id .",
            "sql": "select trip.end_station_id , avg ( trip.duration ) group_by trip.end_station_id"
        },
        {
            "utterance": "For each station , find its latitude and the minimum duration of trips that ended at the station .",
            "sql": "select station.name , station.lat , min ( trip.duration ) group_by trip.end_station_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Find all the zip codes in which the max dew point have never reached 70.",
        "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70"
    },
    "interaction": [
        {
            "utterance": "Which zip codes ever had a max dew point reaching 70 ?",
            "sql": "select distinct weather.zip_code where weather.max_dew_point_f > = value"
        },
        {
            "utterance": "Which did not ?",
            "sql": "select distinct weather.zip_code except select distinct weather.zip_code where weather.max_dew_point_f > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    "interaction": [
        {
            "utterance": "What was the average duration of trips in zip code 94103 ?",
            "sql": "select avg ( trip.duration ) where trip.zip_code = value"
        },
        {
            "utterance": "Which ids of trips lasted at least that long ?",
            "sql": "select trip.id where trip.duration > = ( select avg ( trip.duration ) where trip.zip_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
        "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the min temperature and max temperature for each day .",
            "sql": "select weather.date , weather.max_temperature_f , weather.min_temperature_f"
        },
        {
            "utterance": "Order that by ascending order of difference between the max and min temperatures .",
            "sql": "select weather.date , weather.max_temperature_f , weather.min_temperature_f order_by weather.max_temperature_f - weather.min_temperature_f"
        },
        {
            "utterance": "Find the day in which the difference between the max temperature and min temperature was the smallest . Also report the difference .",
            "sql": "select weather.date , weather.max_temperature_f - weather.min_temperature_f order_by weather.max_temperature_f - weather.min_temperature_f limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
    },
    "interaction": [
        {
            "utterance": "Which station ids never had more than 12 bikes available ?",
            "sql": "select distinct status.station_id where status.station_id not in ( select status.station_id where status.bikes_available > value )"
        },
        {
            "utterance": "Which ones ever had more than 12 bikes available ?",
            "sql": "select distinct status.station_id where status.bikes_available > value"
        },
        {
            "utterance": "What are the id and name of the stations that have ever had more than 12 bikes available ?",
            "sql": "select distinct station.id , station.name where status.bikes_available > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 38,
    "final": {
        "utterance": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
        "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    "interaction": [
        {
            "utterance": "Which zip code had at least 100 trips taking place there ?",
            "sql": "select distinct trip.zip_code group_by trip.zip_code having count ( trip.* ) > = value"
        },
        {
            "utterance": "Give me the zip code where the average mean humidity is below 70",
            "sql": "select weather.zip_code group_by weather.zip_code having avg ( weather.mean_humidity ) < value"
        },
        {
            "utterance": "Intersect those .",
            "sql": "select weather.zip_code group_by weather.zip_code having avg ( weather.mean_humidity ) < value intersect select trip.zip_code group_by trip.zip_code having count ( trip.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
    },
    "interaction": [
        {
            "utterance": "Which end station names have more than 100 trips ending there ?",
            "sql": "select distinct trip.end_station_name group_by trip.end_station_name having count ( trip.* ) > value"
        },
        {
            "utterance": "Which station names are in city `` Palo Alto '' ?",
            "sql": "select station.name where station.city = value"
        },
        {
            "utterance": "Take set minus on the last two results : what are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times ?",
            "sql": "select station.name where station.city = value except select trip.end_station_name group_by trip.end_station_name having count ( trip.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "bike_1",
    "interaction_id": 40,
    "final": {
        "utterance": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
    },
    "interaction": [
        {
            "utterance": "How many trips started from Mountain View city",
            "sql": "select count ( * ) where station.city = value"
        },
        {
            "utterance": "How many trips started from Mountain View city and ended at Palo Alto city ?",
            "sql": "select count ( * ) where station.city = value and station.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 0,
    "final": {
        "utterance": "How many players are there?",
        "sql": "SELECT count(*) FROM player"
    },
    "interaction": [
        {
            "utterance": "Show all the information about the players .",
            "sql": "select player.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( player.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names of players in ascending order of votes.",
        "sql": "SELECT Player_name FROM player ORDER BY Votes ASC"
    },
    "interaction": [
        {
            "utterance": "What are the player names ?",
            "sql": "select player.player_name"
        },
        {
            "utterance": "How many vote does each player has ?",
            "sql": "select player.player_name , player.votes"
        },
        {
            "utterance": "Who has the maximum vote ?",
            "sql": "select player.player_name order_by player.votes desc limit_value"
        },
        {
            "utterance": "Order the names by number of vote in ascending order .",
            "sql": "select player.player_name order_by player.votes asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the gender and occupation of players?",
        "sql": "SELECT Gender ,  Occupation FROM player"
    },
    "interaction": [
        {
            "utterance": "Show the player names and the residences .",
            "sql": "select player.player_name , player.residence"
        },
        {
            "utterance": "Show the names and the occupation of each them .",
            "sql": "select player.gender , player.occupation"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 3,
    "final": {
        "utterance": "List the name and residence for players whose occupation is not \"Researcher\".",
        "sql": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\""
    },
    "interaction": [
        {
            "utterance": "Show the player names and the residences .",
            "sql": "select player.player_name , player.residence"
        },
        {
            "utterance": "Only keep those whose gender is male .",
            "sql": "select player.player_name , player.residence where player.gender = value"
        },
        {
            "utterance": "Show the player names and the residences whose occupation is not `` Researcher '' .",
            "sql": "select player.player_name , player.residence where player.occupation != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "sql": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\""
    },
    "interaction": [
        {
            "utterance": "List the name and the sponsor name of each player .",
            "sql": "select player.player_name , player.sponsor_name"
        },
        {
            "utterance": "How many unique sponsor names are there ?",
            "sql": "select count ( distinct player.sponsor_name )"
        },
        {
            "utterance": "Which sponsor names support female players ?",
            "sql": "select player.sponsor_name where player.gender = value"
        },
        {
            "utterance": "What about supporting players whose residence is `` Brandon '' or `` Birtle '' ?",
            "sql": "select player.sponsor_name where player.residence = value or player.residence = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the name of the player with the largest number of votes?",
        "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the player names and their number of votes ?",
            "sql": "select player.player_name , player.votes"
        },
        {
            "utterance": "Which one has the minimum vote ?",
            "sql": "select player.player_name order_by player.votes asc limit_value"
        },
        {
            "utterance": "What about the one with the maximum vote ?",
            "sql": "select player.player_name order_by player.votes desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 6,
    "final": {
        "utterance": "Show different occupations along with the number of players in each occupation.",
        "sql": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation"
    },
    "interaction": [
        {
            "utterance": "Show the unique occupation for the players ?",
            "sql": "select distinct player.occupation"
        },
        {
            "utterance": "How many in total ?",
            "sql": "select count ( distinct player.occupation )"
        },
        {
            "utterance": "How many are there in each occupation ?",
            "sql": "select player.occupation , count ( player.* ) group_by player.occupation"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 7,
    "final": {
        "utterance": "Please show the most common occupation of players.",
        "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the unique occupation for the players ?",
            "sql": "select distinct player.occupation"
        },
        {
            "utterance": "How many in total ?",
            "sql": "select count ( distinct player.occupation )"
        },
        {
            "utterance": "Which is the most popular occupation ?",
            "sql": "select player.occupation group_by player.occupation order_by count ( player.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the residences that have at least two players.",
        "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the unique residences for the players ?",
            "sql": "select distinct player.residence"
        },
        {
            "utterance": "How many in total ?",
            "sql": "select count ( distinct player.residence )"
        },
        {
            "utterance": "Which residences have only one player ?",
            "sql": "select player.residence group_by player.residence having count ( player.* ) = value"
        },
        {
            "utterance": "What about at least two ?",
            "sql": "select player.residence group_by player.residence having count ( player.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the names of players and names of their coaches.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
    },
    "interaction": [
        {
            "utterance": "List the name and gender of players",
            "sql": "select player.player_name , player.gender"
        },
        {
            "utterance": "How many coaches are there ?",
            "sql": "select count ( coach.* )"
        },
        {
            "utterance": "Show the name of each player and also the corresponding coach name of each .",
            "sql": "select player.player_name , coach.coach_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of players coached by the rank 1 coach.",
        "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1"
    },
    "interaction": [
        {
            "utterance": "Which coaches are rank in the 1st and 2nd place ?",
            "sql": "select coach.coach_name where coach.rank < value"
        },
        {
            "utterance": "Which coach is the 1st , show the name of the coach ?",
            "sql": "select coach.coach_name where coach.rank = value"
        },
        {
            "utterance": "What are the names of players of that coach ?",
            "sql": "select player.player_name where coach.rank = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the names and genders of players with a coach starting after 2011.",
        "sql": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011"
    },
    "interaction": [
        {
            "utterance": "List the name of players",
            "sql": "select player.player_name"
        },
        {
            "utterance": "Show the name of each player and also the corresponding coach name .",
            "sql": "select player.player_name , coach.coach_name"
        },
        {
            "utterance": "Which pair starts before 2012 ?",
            "sql": "select player.player_name , coach.coach_name where player_coach.starting_year < value"
        },
        {
            "utterance": "What about after 2011 ?",
            "sql": "select player.player_name , coach.coach_name where player_coach.starting_year > value"
        },
        {
            "utterance": "Only show the player names and genders of those results .",
            "sql": "select player.player_name , player.gender where player_coach.starting_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC"
    },
    "interaction": [
        {
            "utterance": "List the name of players",
            "sql": "select player.player_name"
        },
        {
            "utterance": "How many coaches in total ?",
            "sql": "select count ( coach.* )"
        },
        {
            "utterance": "Show the name of each player and also the corresponding coach name of each .",
            "sql": "select player.player_name , coach.coach_name"
        },
        {
            "utterance": "Who is Ross Eadie 's coach ?",
            "sql": "select coach.coach_name where player.player_name = value"
        },
        {
            "utterance": "List all the player-coach name pair with the vote of players , in descending order .",
            "sql": "select player.player_name , coach.coach_name order_by player.votes desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 13,
    "final": {
        "utterance": "List the names of players that do not have coaches.",
        "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)"
    },
    "interaction": [
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( player.* )"
        },
        {
            "utterance": "What about coaches ?",
            "sql": "select count ( coach.* )"
        },
        {
            "utterance": "Which players do not have a coach ?",
            "sql": "select player.player_name where player.player_id not in ( select player_coach.player_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\""
    },
    "interaction": [
        {
            "utterance": "How many female players are there ?",
            "sql": "select count ( player.* ) where player.gender = value"
        },
        {
            "utterance": "What about male players ?",
            "sql": "select count ( player.* ) where player.gender = value"
        },
        {
            "utterance": "What are the residences of them ?",
            "sql": "select player.residence where player.gender = value"
        },
        {
            "utterance": "Which residences have both female and male players ?",
            "sql": "select player.residence where player.gender = value intersect select player.residence where player.gender = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "riding_club",
    "interaction_id": 15,
    "final": {
        "utterance": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "sql": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id"
    },
    "interaction": [
        {
            "utterance": "How many clubs are there ?",
            "sql": "select count ( club.club_id )"
        },
        {
            "utterance": "How many coaches in total ?",
            "sql": "select count ( coach.* )"
        },
        {
            "utterance": "How many coaches are there from 'AIK ' club ?",
            "sql": "select count ( * ) where club.club_name = value"
        },
        {
            "utterance": "How many coaches in each club , give the club id , club name and number of coaches .",
            "sql": "select club.club_id , club.club_name , count ( * ) group_by club.club_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 0,
    "final": {
        "utterance": "How many railways are there?",
        "sql": "SELECT count(*) FROM railway"
    },
    "interaction": [
        {
            "utterance": "List all the railways .",
            "sql": "select railway.*"
        },
        {
            "utterance": "How many in total ?",
            "sql": "select count ( railway.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 1,
    "final": {
        "utterance": "List the builders of railways in ascending alphabetical order.",
        "sql": "SELECT Builder FROM railway ORDER BY Builder ASC"
    },
    "interaction": [
        {
            "utterance": "Show all the builders of the railway .",
            "sql": "select railway.builder"
        },
        {
            "utterance": "Order them in ascending alphabetical order .",
            "sql": "select railway.builder order_by railway.builder asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 2,
    "final": {
        "utterance": "List the wheels and locations of the railways.",
        "sql": "SELECT Wheels ,  LOCATION FROM railway"
    },
    "interaction": [
        {
            "utterance": "Show the wheels and also locations of each railway .",
            "sql": "select railway.wheels , railway.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the maximum level of managers in countries that are not \"Australia\"?",
        "sql": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""
    },
    "interaction": [
        {
            "utterance": "Show all the level of managers .",
            "sql": "select manager.level"
        },
        {
            "utterance": "What is the average level ?",
            "sql": "select avg ( manager.level )"
        },
        {
            "utterance": "What is that of the managers that come from `` United States '' ?",
            "sql": "select avg ( manager.level ) where manager.country != value"
        },
        {
            "utterance": "What is the maximum level of managers that do not come from `` Australia '' ?",
            "sql": "select max ( manager.level ) where manager.country != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average age for all managers?",
        "sql": "SELECT avg(Age) FROM manager"
    },
    "interaction": [
        {
            "utterance": "List all the ages of the managers",
            "sql": "select manager.age"
        },
        {
            "utterance": "What is the maximum value of it ?",
            "sql": "select max ( manager.age )"
        },
        {
            "utterance": "How about the average ?",
            "sql": "select avg ( manager.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of managers in ascending order of level?",
        "sql": "SELECT Name FROM manager ORDER BY LEVEL ASC"
    },
    "interaction": [
        {
            "utterance": "Show the names and levels of all managers .",
            "sql": "select manager.name , manager.level"
        },
        {
            "utterance": "Only keep the name whose level is at least 7",
            "sql": "select manager.name where manager.level > = value"
        },
        {
            "utterance": "Order all the names in ascending order of level .",
            "sql": "select manager.name order_by manager.level asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names and arrival times of trains?",
        "sql": "SELECT Name ,  Arrival FROM train"
    },
    "interaction": [
        {
            "utterance": "Show the names of the trains .",
            "sql": "select train.name"
        },
        {
            "utterance": "Add the arrival time for each of them .",
            "sql": "select train.name , train.arrival"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the oldest manager?",
        "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the names and ages of all managers .",
            "sql": "select manager.name , manager.age"
        },
        {
            "utterance": "Only keep the ones whose level is at least 5 .",
            "sql": "select manager.name where manager.level > = value"
        },
        {
            "utterance": "Order all the names in descending order of the age .",
            "sql": "select manager.name order_by manager.age desc"
        },
        {
            "utterance": "Who is the oldest manager ?",
            "sql": "select manager.name order_by manager.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of trains and locations of railways they are in.",
        "sql": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID"
    },
    "interaction": [
        {
            "utterance": "List the names of the trains .",
            "sql": "select train.name"
        },
        {
            "utterance": "Add the locations to each .",
            "sql": "select train.name , railway.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the builder of railways associated with the trains named \"Andaman Exp\".",
        "sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\""
    },
    "interaction": [
        {
            "utterance": "List the train information with the name `` Andaman Exp '' .",
            "sql": "select train.* where train.name = value"
        },
        {
            "utterance": "Which railway is it ? Show the railway name .",
            "sql": "select railway.railway where train.name = value"
        },
        {
            "utterance": "And which builder is it ?",
            "sql": "select railway.builder where train.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 10,
    "final": {
        "utterance": "Show id and location of railways that are associated with more than one train.",
        "sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Show the builders of the railways .",
            "sql": "select railway.builder"
        },
        {
            "utterance": "List the railway id and the location of each railway .",
            "sql": "select train.railway_id , railway.location"
        },
        {
            "utterance": "Only keep the ones that are associated with more than one train .",
            "sql": "select train.railway_id , railway.location group_by train.railway_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the id and builder of the railway that are associated with the most trains.",
        "sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the builders of the railways .",
            "sql": "select railway.builder"
        },
        {
            "utterance": "List the railway id and the builder for each one .",
            "sql": "select train.railway_id , railway.builder"
        },
        {
            "utterance": "Among those results , keep the one that associated with the most trains .",
            "sql": "select train.railway_id , railway.builder group_by train.railway_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 12,
    "final": {
        "utterance": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "sql": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder"
    },
    "interaction": [
        {
            "utterance": "List all the builders about the railways .",
            "sql": "select railway.builder"
        },
        {
            "utterance": "Show each one and the corresponding counts of railways .",
            "sql": "select railway.builder , count ( railway.* ) group_by railway.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the most common builder of railways.",
        "sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the builders .",
            "sql": "select railway.builder"
        },
        {
            "utterance": "Show the builders and the corresponding counts of each .",
            "sql": "select railway.builder , count ( railway.* ) group_by railway.location"
        },
        {
            "utterance": "Which one is the most popular one ?",
            "sql": "select railway.builder group_by railway.builder order_by count ( railway.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 14,
    "final": {
        "utterance": "Show different locations of railways along with the corresponding number of railways at each location.",
        "sql": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION"
    },
    "interaction": [
        {
            "utterance": "List all the locations .",
            "sql": "select railway.location"
        },
        {
            "utterance": "Which ones have more than one railways ?",
            "sql": "select railway.location group_by railway.location having count ( railway.* ) > value"
        },
        {
            "utterance": "Show the locations and the corresponding counts of each .",
            "sql": "select railway.location , count ( railway.* ) group_by railway.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the locations that have more than one railways.",
        "sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List all the locations .",
            "sql": "select railway.location"
        },
        {
            "utterance": "What are the corresponding counts of railways ?",
            "sql": "select railway.location , count ( railway.* ) group_by railway.location"
        },
        {
            "utterance": "Which locations have more than one railways ?",
            "sql": "select railway.location group_by railway.location having count ( railway.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 16,
    "final": {
        "utterance": "List the object number of railways that do not have any trains.",
        "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
    },
    "interaction": [
        {
            "utterance": "Show all the information about each railway .",
            "sql": "select railway.*"
        },
        {
            "utterance": "What are the object numbers ?",
            "sql": "select railway.objectnumber"
        },
        {
            "utterance": "Which of the railway has no trains , keep the object number .",
            "sql": "select railway.objectnumber where railway.railway_id not in ( select train.railway_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46"
    },
    "interaction": [
        {
            "utterance": "List all the countries of the managers .",
            "sql": "select manager.country"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct manager.country )"
        },
        {
            "utterance": "Keep the ones where the manager age is in the range of 50 and 46",
            "sql": "select manager.country where manager.age < value intersect select manager.country where manager.age > value"
        },
        {
            "utterance": "What about the other countries ?",
            "sql": "select manager.country where manager.age > value intersect select manager.country where manager.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the distinct countries of managers.",
        "sql": "SELECT DISTINCT Country FROM manager"
    },
    "interaction": [
        {
            "utterance": "List all the countries of the managers .",
            "sql": "select manager.country"
        },
        {
            "utterance": "How many unique ones are there ?",
            "sql": "select count ( distinct manager.country )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "railway",
    "interaction_id": 19,
    "final": {
        "utterance": "Show the working years of managers in descending order of their level.",
        "sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC"
    },
    "interaction": [
        {
            "utterance": "List the manager names and the working years .",
            "sql": "select manager.name , manager.working_year_starts"
        },
        {
            "utterance": "Which is the maximum working years ?",
            "sql": "select max ( manager.working_year_starts )"
        },
        {
            "utterance": "Order the working years by the manager level .",
            "sql": "select manager.working_year_starts order_by manager.level desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 0,
    "final": {
        "utterance": "How many climbers are there?",
        "sql": "SELECT count(*) FROM climber"
    },
    "interaction": [
        {
            "utterance": "List all the climber information .",
            "sql": "select climber.*"
        },
        {
            "utterance": "How many records are there ?",
            "sql": "select count ( climber.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 1,
    "final": {
        "utterance": "List the names of climbers in descending order of points.",
        "sql": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names of the climbers ?",
            "sql": "select climber.name"
        },
        {
            "utterance": "Keep the ones whose point is at least 6 ?",
            "sql": "select climber.name where climber.points > = value"
        },
        {
            "utterance": "Order all the climber names in descending order of points .",
            "sql": "select climber.name order_by climber.points desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of climbers whose country is not Switzerland.",
        "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
    },
    "interaction": [
        {
            "utterance": "What are the names of the climbers ?",
            "sql": "select climber.name"
        },
        {
            "utterance": "Keep the ones whose point is at least 4.6 ?",
            "sql": "select climber.name where climber.points > = value"
        },
        {
            "utterance": "Keep the ones whose country is `` West Germany '' .",
            "sql": "select climber.name where climber.country = value"
        },
        {
            "utterance": "What about the ones whose country is not `` Switzerland '' ?",
            "sql": "select climber.name where climber.country != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the maximum point for climbers whose country is United Kingdom?",
        "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\""
    },
    "interaction": [
        {
            "utterance": "Which climber comes from Switzerland ?",
            "sql": "select climber.name where climber.country = value"
        },
        {
            "utterance": "What about United Kingdom ?",
            "sql": "select climber.name where climber.country != value"
        },
        {
            "utterance": "List all the points of those climber .",
            "sql": "select climber.points where climber.country != value"
        },
        {
            "utterance": "What is the maximum point number ?",
            "sql": "select max ( climber.points ) where climber.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 4,
    "final": {
        "utterance": "How many distinct countries are the climbers from?",
        "sql": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    "interaction": [
        {
            "utterance": "List all the countries of the climbers .",
            "sql": "select climber.country"
        },
        {
            "utterance": "How many unique countries are there ?",
            "sql": "select count ( distinct climber.country )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of mountains in ascending alphabetical order?",
        "sql": "SELECT Name FROM mountain ORDER BY Name ASC"
    },
    "interaction": [
        {
            "utterance": "Show all the information about the mountains .",
            "sql": "select mountain.*"
        },
        {
            "utterance": "List those results in ascending alphabetical order by the mountain names .",
            "sql": "select mountain.* order_by mountain.name asc"
        },
        {
            "utterance": "What are the mountain names from those results ?",
            "sql": "select mountain.name order_by mountain.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the countries of mountains with height bigger than 5000?",
        "sql": "SELECT Country FROM mountain WHERE Height  >  5000"
    },
    "interaction": [
        {
            "utterance": "List all the countries of the mountains .",
            "sql": "select mountain.country"
        },
        {
            "utterance": "Keep the ones that the mountain height is more than 4985.0 .",
            "sql": "select mountain.country where mountain.height > value"
        },
        {
            "utterance": "What about the height is more than 5000 ?",
            "sql": "select mountain.country where mountain.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name of the highest mountain?",
        "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the names of the mountains .",
            "sql": "select mountain.name"
        },
        {
            "utterance": "Keep the ones that the mountain Prominence is more than 900.0 .",
            "sql": "select mountain.name where mountain.prominence > value"
        },
        {
            "utterance": "So which mountain is the highest one ?",
            "sql": "select mountain.name order_by mountain.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 8,
    "final": {
        "utterance": "List the distinct ranges of the mountains with the top 3 prominence.",
        "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "List all the ranges of the mountains .",
            "sql": "select mountain.range"
        },
        {
            "utterance": "Order those results by Prominence in descending order .",
            "sql": "select distinct mountain.range order_by mountain.prominence desc"
        },
        {
            "utterance": "Which one is the top one ?",
            "sql": "select distinct mountain.range order_by mountain.prominence desc limit_value"
        },
        {
            "utterance": "What about top 3 ?",
            "sql": "select distinct mountain.range order_by mountain.prominence desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 9,
    "final": {
        "utterance": "Show names of climbers and the names of mountains they climb.",
        "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    "interaction": [
        {
            "utterance": "List all the climber names",
            "sql": "select climber.name"
        },
        {
            "utterance": "Show the mountain names for those climbers .",
            "sql": "select climber.name , mountain.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the names of climbers and the heights of mountains they climb.",
        "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    "interaction": [
        {
            "utterance": "Show all the climber names",
            "sql": "select climber.name"
        },
        {
            "utterance": "Also show the mountain height for those climbers .",
            "sql": "select climber.name , mountain.height"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the height of the mountain climbed by the climber with the maximum points.",
        "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which climbers have the point to be 8.0",
            "sql": "select climber.name where climber.points = value"
        },
        {
            "utterance": "Which one has the minimum point ?",
            "sql": "select climber.name order_by climber.points asc limit_value"
        },
        {
            "utterance": "What about the maximum ?",
            "sql": "select climber.name order_by climber.points desc limit_value"
        },
        {
            "utterance": "Show the mountain height of the mountain that climber has climbed .",
            "sql": "select mountain.height order_by climber.points desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    "interaction": [
        {
            "utterance": "List all the climber names who come from `` United Kingdom '' .",
            "sql": "select climber.name where climber.country = value"
        },
        {
            "utterance": "What about from `` West Germany ''",
            "sql": "select climber.name where climber.country = value"
        },
        {
            "utterance": "Show the mountains they have climbed .",
            "sql": "select distinct mountain.name where climber.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the times used by climbers to climb mountains in Country Uganda.",
        "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
    },
    "interaction": [
        {
            "utterance": "How many countries are there ?",
            "sql": "select count ( mountain.* )"
        },
        {
            "utterance": "How many mountains are there in Tanzania ?",
            "sql": "select count ( mountain.* ) where mountain.country = value"
        },
        {
            "utterance": "What about in Uganda ?",
            "sql": "select count ( mountain.* ) where mountain.country = value"
        },
        {
            "utterance": "List the times used by the climbers for those mountains .",
            "sql": "select climber.time where mountain.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 14,
    "final": {
        "utterance": "Please show the countries and the number of climbers from each country.",
        "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
    },
    "interaction": [
        {
            "utterance": "How many unique countries in total ?",
            "sql": "select count ( distinct mountain.country )"
        },
        {
            "utterance": "Show the countries with the number of mountains for each of them .",
            "sql": "select mountain.country , count ( mountain.* ) group_by mountain.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 15,
    "final": {
        "utterance": "List the countries that have more than one mountain.",
        "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many countries in total ?",
            "sql": "select count ( distinct mountain.country )"
        },
        {
            "utterance": "List the countries with the number of mountains for each .",
            "sql": "select mountain.country , count ( mountain.* ) group_by mountain.country"
        },
        {
            "utterance": "Keep the country names that have only one mountain .",
            "sql": "select mountain.country group_by mountain.country having count ( mountain.* ) = value"
        },
        {
            "utterance": "How about more than one mountain ?",
            "sql": "select mountain.country group_by mountain.country having count ( mountain.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 16,
    "final": {
        "utterance": "List the names of mountains that do not have any climber.",
        "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
    },
    "interaction": [
        {
            "utterance": "List the names of all the mountains",
            "sql": "select mountain.name"
        },
        {
            "utterance": "Which of those has no climbers ?",
            "sql": "select mountain.name where mountain.mountain_id not in ( select climber.mountain_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"
    },
    "interaction": [
        {
            "utterance": "List all the countries of the mountains .",
            "sql": "select mountain.country"
        },
        {
            "utterance": "Keep the ones that the mountain height is more than 4985.0 .",
            "sql": "select mountain.country where mountain.height > value"
        },
        {
            "utterance": "What about the height is more than 5600 ?",
            "sql": "select mountain.country where mountain.height > value"
        },
        {
            "utterance": "Keep the country names where the mountain height is within the range of 5200 to 5600 .",
            "sql": "select mountain.country where mountain.height > value intersect select mountain.country where mountain.height < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "climbing",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the range that has the most number of mountains.",
        "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the ranges of mountains .",
            "sql": "select mountain.range"
        },
        {
            "utterance": "How many unique ranges are there ?",
            "sql": "select count ( distinct mountain.range )"
        },
        {
            "utterance": "How many mountains in each range ?",
            "sql": "select mountain.range , count ( mountain.* ) group_by mountain.range"
        },
        {
            "utterance": "Which one has the largest number of mountains ?",
            "sql": "select mountain.range group_by mountain.range order_by count ( mountain.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 0,
    "final": {
        "utterance": "How many devices are there?",
        "sql": "SELECT count(*) FROM device"
    },
    "interaction": [
        {
            "utterance": "List all the devices",
            "sql": "select device.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( device.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 1,
    "final": {
        "utterance": "List the carriers of devices in ascending alphabetical order.",
        "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC"
    },
    "interaction": [
        {
            "utterance": "List all the carrier names of each device",
            "sql": "select device.carrier"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct device.carrier )"
        },
        {
            "utterance": "Order the carrier names in ascending order .",
            "sql": "select device.carrier order_by device.carrier asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'"
    },
    "interaction": [
        {
            "utterance": "List the carrier name and software platform of each device",
            "sql": "select device.carrier , device.software_platform"
        },
        {
            "utterance": "How many of them use Android as software platform ?",
            "sql": "select count ( device.* ) where device.software_platform = value"
        },
        {
            "utterance": "What about not Android ?",
            "sql": "select count ( device.* ) where device.software_platform != value"
        },
        {
            "utterance": "What are the carrier names of them ?",
            "sql": "select device.carrier where device.software_platform != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of shops in ascending order of open year?",
        "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC"
    },
    "interaction": [
        {
            "utterance": "List the shop names and their open year .",
            "sql": "select shop.shop_name , shop.open_year"
        },
        {
            "utterance": "Keep the shop names , then show those names in ascending order of open year .",
            "sql": "select shop.shop_name order_by shop.open_year asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average quantity of stocks?",
        "sql": "SELECT avg(Quantity) FROM stock"
    },
    "interaction": [
        {
            "utterance": "What is the minimum quantity of stocks ?",
            "sql": "select min ( stock.quantity )"
        },
        {
            "utterance": "What about the average value ?",
            "sql": "select avg ( stock.quantity )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names and location of the shops in ascending alphabetical order of name.",
        "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC"
    },
    "interaction": [
        {
            "utterance": "List all the names of the shop and their locations",
            "sql": "select shop.shop_name , shop.location"
        },
        {
            "utterance": "Order those results in ascending alphabetical order of name .",
            "sql": "select shop.shop_name , shop.location order_by shop.shop_name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 6,
    "final": {
        "utterance": "How many different software platforms are there for devices?",
        "sql": "SELECT count(DISTINCT Software_Platform) FROM device"
    },
    "interaction": [
        {
            "utterance": "Show all in the information about devices .",
            "sql": "select device.*"
        },
        {
            "utterance": "What are the unique software platforms",
            "sql": "select distinct device.software_platform"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( distinct device.software_platform )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 7,
    "final": {
        "utterance": "List the open date of open year of the shop named \"Apple\".",
        "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\""
    },
    "interaction": [
        {
            "utterance": "Show the information about the shops that are not `` Apple '' .",
            "sql": "select shop.* where shop.shop_name != value"
        },
        {
            "utterance": "How about the shops are `` Apple '' ?",
            "sql": "select shop.* where shop.shop_name = value"
        },
        {
            "utterance": "What are the open dates and open years of them ?",
            "sql": "select shop.open_date , shop.open_year where shop.shop_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 8,
    "final": {
        "utterance": "List the name of the shop with the latest open year.",
        "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the names and open year of all the shops .",
            "sql": "select shop.shop_name , shop.open_year"
        },
        {
            "utterance": "Keep those opens later than 2010 ?",
            "sql": "select shop.shop_name , shop.open_year where shop.open_year > value"
        },
        {
            "utterance": "Order all the shop names by the open year , from early to late .",
            "sql": "select shop.shop_name , shop.open_year order_by shop.open_year"
        },
        {
            "utterance": "Show the name of the shop with the latest open year .",
            "sql": "select shop.shop_name order_by shop.open_year desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 9,
    "final": {
        "utterance": "Show names of shops and the carriers of devices they have in stock.",
        "sql": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID"
    },
    "interaction": [
        {
            "utterance": "List the shop names .",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "Keep the names where there is a stock",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "Keep the names of shops and the carriers of devices where there is a stock .",
            "sql": "select shop.shop_name , device.carrier"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 10,
    "final": {
        "utterance": "Show names of shops that have more than one kind of device in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List all the shop names .",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "List all the shop names that has stock in the shops .",
            "sql": "select shop.shop_name group_by stock.shop_id"
        },
        {
            "utterance": "Among those , keep the shop names whose open year is later than 2010",
            "sql": "select shop.shop_name group_by stock.shop_id having shop.open_year > value"
        },
        {
            "utterance": "List the names of shops that have more than one kind of device in stock .",
            "sql": "select shop.shop_name group_by stock.shop_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 11,
    "final": {
        "utterance": "Show the name of the shop that has the most kind of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the shop names .",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "Which shop has the least quantity of devices , show the shop name .",
            "sql": "select shop.shop_name group_by stock.shop_id order_by sum ( stock.quantity ) asc limit_value"
        },
        {
            "utterance": "What about the shop that has the most kind of devices in stock ?",
            "sql": "select shop.shop_name group_by stock.shop_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the name of the shop that have the largest quantity of devices in stock.",
        "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the shop names .",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "Which shop has the least quantity of devices , show the shop name .",
            "sql": "select shop.shop_name group_by stock.shop_id order_by sum ( stock.quantity ) asc limit_value"
        },
        {
            "utterance": "What about the largest quantity one ?",
            "sql": "select shop.shop_name group_by stock.shop_id order_by sum ( stock.quantity ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 13,
    "final": {
        "utterance": "Please show different software platforms and the corresponding number of devices using each.",
        "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform"
    },
    "interaction": [
        {
            "utterance": "Show all the software platforms",
            "sql": "select device.software_platform"
        },
        {
            "utterance": "How many for each ?",
            "sql": "select device.software_platform , count ( device.* ) group_by device.software_platform"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 14,
    "final": {
        "utterance": "Please show the software platforms of devices in descending order of the count.",
        "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC"
    },
    "interaction": [
        {
            "utterance": "Show all the software platforms",
            "sql": "select device.software_platform"
        },
        {
            "utterance": "How many device for each ?",
            "sql": "select device.software_platform , count ( device.* ) group_by device.software_platform"
        },
        {
            "utterance": "Order the software platforms by popularity , from the most to the least ?",
            "sql": "select device.software_platform group_by device.software_platform order_by count ( device.* ) desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 15,
    "final": {
        "utterance": "List the software platform shared by the greatest number of devices.",
        "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show all the software platforms",
            "sql": "select device.software_platform"
        },
        {
            "utterance": "How many for each ?",
            "sql": "select device.software_platform , count ( device.* ) group_by device.software_platform"
        },
        {
            "utterance": "Which two are the most popular software platform ?",
            "sql": "select device.software_platform group_by device.software_platform order_by count ( device.* ) desc limit_value"
        },
        {
            "utterance": "What about top 1 ?",
            "sql": "select device.software_platform group_by device.software_platform order_by count ( device.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 16,
    "final": {
        "utterance": "List the names of shops that have no devices in stock.",
        "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"
    },
    "interaction": [
        {
            "utterance": "What are the names of the shops ?",
            "sql": "select shop.shop_name"
        },
        {
            "utterance": "Which shop has some devices in stock ?",
            "sql": "select shop.shop_name where shop.shop_id in ( select stock.shop_id )"
        },
        {
            "utterance": "What about no device at all ?",
            "sql": "select shop.shop_name where shop.shop_id not in ( select stock.shop_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 17,
    "final": {
        "utterance": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008"
    },
    "interaction": [
        {
            "utterance": "Show all the shop names and the location",
            "sql": "select shop.shop_name , shop.location"
        },
        {
            "utterance": "Keep those shops which opened in January .",
            "sql": "select shop.shop_name , shop.location where shop.open_date like value"
        },
        {
            "utterance": "Keep the locations shared by shops with open year later than 2012 and shops with open year before 2008 .",
            "sql": "select shop.location where shop.open_year > value intersect select shop.location where shop.open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "device",
    "interaction_id": 18,
    "final": {
        "utterance": "List the carriers of devices that have no devices in stock.",
        "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)"
    },
    "interaction": [
        {
            "utterance": "List all the carriers",
            "sql": "select device.carrier"
        },
        {
            "utterance": "Show all the unique carriers of the devices in the stock .",
            "sql": "select distinct device.carrier"
        },
        {
            "utterance": "Which carriers have no devices in stock ?",
            "sql": "select device.carrier where device.device_id not in ( select stock.device_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 0,
    "final": {
        "utterance": "How many actors are there?",
        "sql": "SELECT count(*) FROM actor"
    },
    "interaction": [
        {
            "utterance": "List all the actors .",
            "sql": "select actor.*"
        },
        {
            "utterance": "How many are there ?",
            "sql": "select count ( actor.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name of actors in ascending alphabetical order.",
        "sql": "SELECT Name FROM actor ORDER BY Name ASC"
    },
    "interaction": [
        {
            "utterance": "Show all the names of the actors .",
            "sql": "select actor.name"
        },
        {
            "utterance": "List them in ascending alphabetical order .",
            "sql": "select actor.name order_by actor.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the characters and duration of actors?",
        "sql": "SELECT Character ,  Duration FROM actor"
    },
    "interaction": [
        {
            "utterance": "List all the actors .",
            "sql": "select actor.*"
        },
        {
            "utterance": "How many in total ?",
            "sql": "select count ( actor.* )"
        },
        {
            "utterance": "What are the characters and duration of them ?",
            "sql": "select actor.character , actor.duration"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 3,
    "final": {
        "utterance": "List the name of actors whose age is not 20.",
        "sql": "SELECT Name FROM actor WHERE Age != 20"
    },
    "interaction": [
        {
            "utterance": "List all the names and ages .",
            "sql": "select actor.name , actor.age"
        },
        {
            "utterance": "Keep the names who are younger than 21 .",
            "sql": "select actor.name where actor.age < value"
        },
        {
            "utterance": "What about the names of actors whose age is not 20 .",
            "sql": "select actor.name where actor.age != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the characters of actors in descending order of age?",
        "sql": "SELECT Character FROM actor ORDER BY age DESC"
    },
    "interaction": [
        {
            "utterance": "Show the characters of actors .",
            "sql": "select actor.character"
        },
        {
            "utterance": "List them in descending order of age .",
            "sql": "select actor.character order_by actor.age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the duration of the oldest actor?",
        "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the durations of all actors .",
            "sql": "select actor.duration"
        },
        {
            "utterance": "What is the duration of 'Lynne McGranger ' ?",
            "sql": "select actor.duration where actor.name = value"
        },
        {
            "utterance": "What about the oldest actor ?",
            "sql": "select actor.duration order_by actor.age desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""
    },
    "interaction": [
        {
            "utterance": "Show all the musical names information .",
            "sql": "select musical.name"
        },
        {
            "utterance": "Which of them has the award of 'Tony Award ' ?",
            "sql": "select musical.name where musical.award = value"
        },
        {
            "utterance": "What about having the nominee of `` Bob Fosse '' ?",
            "sql": "select musical.name where musical.nominee = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
    },
    "interaction": [
        {
            "utterance": "Show all the musical names information .",
            "sql": "select musical.name"
        },
        {
            "utterance": "Which of them has the nominee of `` Bob Fosse '' ?",
            "sql": "select musical.name where musical.nominee = value"
        },
        {
            "utterance": "How about the award of 'Tony Award ' ?",
            "sql": "select musical.name where musical.award = value"
        },
        {
            "utterance": "What about the distinct nominees of the musicals with the award that is not that award ?",
            "sql": "select distinct musical.nominee where musical.award != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 8,
    "final": {
        "utterance": "Show names of actors and names of musicals they are in.",
        "sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
    },
    "interaction": [
        {
            "utterance": "List all the names of actors .",
            "sql": "select actor.*"
        },
        {
            "utterance": "Show the names of actors and their corresponding musical names .",
            "sql": "select actor.name , musical.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 9,
    "final": {
        "utterance": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
    },
    "interaction": [
        {
            "utterance": "Which actors appeared in musical with name `` Wicked '' ?",
            "sql": "select actor.name where musical.name = value"
        },
        {
            "utterance": "What about `` The Phantom of the Opera '' ?",
            "sql": "select actor.name where musical.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 10,
    "final": {
        "utterance": "Show names of actors in descending order of the year their musical is awarded.",
        "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC"
    },
    "interaction": [
        {
            "utterance": "List the names of actors and their musical names .",
            "sql": "select actor.name , musical.name"
        },
        {
            "utterance": "Order the names of actors in in descending order of the year their musical is awarded .",
            "sql": "select actor.name order_by musical.year desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 11,
    "final": {
        "utterance": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
    },
    "interaction": [
        {
            "utterance": "Which musical name has two actors ?",
            "sql": "select musical.name group_by actor.musical_id having count ( * ) = value"
        },
        {
            "utterance": "Show each musical name and the number of actors .",
            "sql": "select musical.name , count ( * )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 12,
    "final": {
        "utterance": "Show names of musicals which have at least three actors.",
        "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    "interaction": [
        {
            "utterance": "List the names of actors and their musical names .",
            "sql": "select actor.name , musical.name"
        },
        {
            "utterance": "What are the musical names that have two actors ?",
            "sql": "select musical.name group_by actor.musical_id having count ( * ) = value"
        },
        {
            "utterance": "What about at least three actors ?",
            "sql": "select musical.name group_by actor.musical_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 13,
    "final": {
        "utterance": "Show different nominees and the number of musicals they have been nominated.",
        "sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee"
    },
    "interaction": [
        {
            "utterance": "List all the nominee names .",
            "sql": "select musical.nominee"
        },
        {
            "utterance": "Count how many musicals for each .",
            "sql": "select musical.nominee , count ( musical.* ) group_by musical.nominee"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 14,
    "final": {
        "utterance": "Please show the nominee who has been nominated the greatest number of times.",
        "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Count how many musicals for each one .",
            "sql": "select musical.nominee , count ( musical.* ) group_by musical.nominee"
        },
        {
            "utterance": "Which nominee has 2 musicals ?",
            "sql": "select musical.nominee group_by musical.nominee having count ( musical.* ) = value"
        },
        {
            "utterance": "Who has been nominated the greatest number of times ?",
            "sql": "select musical.nominee group_by musical.nominee order_by count ( musical.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 15,
    "final": {
        "utterance": "List the most common result of the musicals.",
        "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the results from the musicals .",
            "sql": "select musical.result"
        },
        {
            "utterance": "How many are there for each result type ?",
            "sql": "select musical.result , count ( musical.* ) group_by musical.result"
        },
        {
            "utterance": "Which one is the most popular result ?",
            "sql": "select musical.result group_by musical.result order_by count ( musical.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 16,
    "final": {
        "utterance": "List the nominees that have been nominated more than two musicals.",
        "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "Show all the nominees .",
            "sql": "select musical.nominee"
        },
        {
            "utterance": "Count how many musicals for each one .",
            "sql": "select musical.nominee , count ( musical.* ) group_by musical.nominee"
        },
        {
            "utterance": "Which nominee has 5 musicals ?",
            "sql": "select musical.nominee group_by musical.nominee having count ( musical.* ) = value"
        },
        {
            "utterance": "How about more than two musicals ?",
            "sql": "select musical.nominee group_by musical.nominee having count ( musical.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 17,
    "final": {
        "utterance": "List the name of musicals that do not have actors.",
        "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
    },
    "interaction": [
        {
            "utterance": "List all the information about musicals .",
            "sql": "select musical.*"
        },
        {
            "utterance": "Show all the names of musicals which have actors .",
            "sql": "select musical.name where musical.musical_id in ( select actor.musical_id )"
        },
        {
            "utterance": "What about having no actors ?",
            "sql": "select musical.name where musical.musical_id not in ( select actor.musical_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "musical",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""
    },
    "interaction": [
        {
            "utterance": "Show all the information about the musical that has the award of 'Tony Award ' ?",
            "sql": "select musical.* where musical.award = value"
        },
        {
            "utterance": "What are the nominees with award `` Bob Fosse '' or `` Cleavant Derricks '' ?",
            "sql": "select musical.nominee where musical.award = value or musical.award = value"
        },
        {
            "utterance": "What about both `` Tony Award '' and `` Drama Desk Award '' ?",
            "sql": "select musical.nominee where musical.award = value intersect select musical.nominee where musical.award = value"
        }
    ]
}
