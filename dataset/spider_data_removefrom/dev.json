{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 0,
    "final": {
        "utterance": "How many documents do we have ?",
        "sql": "select count ( documents.* )"
    },
    "interaction": [
        {
            "utterance": "How many documents do we have ?",
            "sql": "select count ( documents.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 1,
    "final": {
        "utterance": "Count the number of documents .",
        "sql": "select count ( documents.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of documents .",
            "sql": "select count ( documents.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 2,
    "final": {
        "utterance": "List document IDs , document names , and document descriptions for all documents .",
        "sql": "select documents.document_id , documents.document_name , documents.document_description"
    },
    "interaction": [
        {
            "utterance": "List document IDs , document names , and document descriptions for all documents .",
            "sql": "select documents.document_id , documents.document_name , documents.document_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the ids , names , and descriptions for all documents ?",
        "sql": "select documents.document_id , documents.document_name , documents.document_description"
    },
    "interaction": [
        {
            "utterance": "What are the ids , names , and descriptions for all documents ?",
            "sql": "select documents.document_id , documents.document_name , documents.document_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the document name and template id for document with description with the letter 'w ' in it ?",
        "sql": "select documents.document_name , documents.template_id where documents.document_description like value"
    },
    "interaction": [
        {
            "utterance": "What is the document name and template id for document with description with the letter 'w ' in it ?",
            "sql": "select documents.document_name , documents.template_id where documents.document_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 5,
    "final": {
        "utterance": "Return the names and template ids for documents that contain the letter w in their description .",
        "sql": "select documents.document_name , documents.template_id where documents.document_description like value"
    },
    "interaction": [
        {
            "utterance": "Return the names and template ids for documents that contain the letter w in their description .",
            "sql": "select documents.document_name , documents.template_id where documents.document_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the document id , template id and description for document named `` Robbin CV '' ?",
        "sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the document id , template id and description for document named `` Robbin CV '' ?",
            "sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 7,
    "final": {
        "utterance": "Return the document id , template id , and description for the document with the name Robbin CV .",
        "sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "Return the document id , template id , and description for the document with the name Robbin CV .",
            "sql": "select documents.document_id , documents.template_id , documents.document_description where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 8,
    "final": {
        "utterance": "How many different templates do all document use ?",
        "sql": "select count ( distinct documents.template_id )"
    },
    "interaction": [
        {
            "utterance": "How many different templates do all document use ?",
            "sql": "select count ( distinct documents.template_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 9,
    "final": {
        "utterance": "Count the number of different templates used for documents .",
        "sql": "select count ( distinct documents.template_id )"
    },
    "interaction": [
        {
            "utterance": "Count the number of different templates used for documents .",
            "sql": "select count ( distinct documents.template_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 10,
    "final": {
        "utterance": "How many documents are using the template with type code 'PPT ' ?",
        "sql": "select count ( * ) where templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "How many documents are using the template with type code 'PPT ' ?",
            "sql": "select count ( * ) where templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 11,
    "final": {
        "utterance": "Count the number of documents that use the PPT template type .",
        "sql": "select count ( * ) where templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of documents that use the PPT template type .",
            "sql": "select count ( * ) where templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all template ids and number of documents using each template .",
        "sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id"
    },
    "interaction": [
        {
            "utterance": "Show all template ids and number of documents using each template .",
            "sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 13,
    "final": {
        "utterance": "What are all different template ids used for documents , and how many times were each of them used ?",
        "sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id"
    },
    "interaction": [
        {
            "utterance": "What are all different template ids used for documents , and how many times were each of them used ?",
            "sql": "select documents.template_id , count ( documents.* ) group_by documents.template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the id and type code for the template used by the most documents ?",
        "sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the id and type code for the template used by the most documents ?",
            "sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 15,
    "final": {
        "utterance": "Return the id and type code of the template that is used for the greatest number of documents .",
        "sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the id and type code of the template that is used for the greatest number of documents .",
            "sql": "select documents.template_id , templates.template_type_code group_by documents.template_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 16,
    "final": {
        "utterance": "Show ids for all templates that are used by more than one document .",
        "sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value"
    },
    "interaction": [
        {
            "utterance": "Show ids for all templates that are used by more than one document .",
            "sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the template ids of any templates used in more than a single document ?",
        "sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the template ids of any templates used in more than a single document ?",
            "sql": "select documents.template_id group_by documents.template_id having count ( documents.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 18,
    "final": {
        "utterance": "Show ids for all templates not used by any document .",
        "sql": "select templates.template_id except select documents.template_id"
    },
    "interaction": [
        {
            "utterance": "Show ids for all templates not used by any document .",
            "sql": "select templates.template_id except select documents.template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the ids for templates that are not used in any documents ?",
        "sql": "select templates.template_id except select documents.template_id"
    },
    "interaction": [
        {
            "utterance": "What are the ids for templates that are not used in any documents ?",
            "sql": "select templates.template_id except select documents.template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 20,
    "final": {
        "utterance": "How many templates do we have ?",
        "sql": "select count ( templates.* )"
    },
    "interaction": [
        {
            "utterance": "How many templates do we have ?",
            "sql": "select count ( templates.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 21,
    "final": {
        "utterance": "Count the number of templates .",
        "sql": "select count ( templates.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of templates .",
            "sql": "select count ( templates.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 22,
    "final": {
        "utterance": "Show template ids , version numbers , and template type codes for all templates .",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "Show template ids , version numbers , and template type codes for all templates .",
            "sql": "select templates.template_id , templates.version_number , templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the ids , version numbers , and type codes for each template ?",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the ids , version numbers , and type codes for each template ?",
            "sql": "select templates.template_id , templates.version_number , templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 24,
    "final": {
        "utterance": "Show all distinct template type codes for all templates .",
        "sql": "select distinct templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all distinct template type codes for all templates .",
            "sql": "select distinct templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the different template type codes ?",
        "sql": "select distinct templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the different template type codes ?",
            "sql": "select distinct templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the ids of templates with template type code PP or PPT ?",
        "sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "What are the ids of templates with template type code PP or PPT ?",
            "sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 27,
    "final": {
        "utterance": "Return the ids of templates that have the code PP or PPT .",
        "sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "Return the ids of templates that have the code PP or PPT .",
            "sql": "select templates.template_id where templates.template_type_code = value or templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 28,
    "final": {
        "utterance": "How many templates have template type code CV ?",
        "sql": "select count ( templates.* ) where templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "How many templates have template type code CV ?",
            "sql": "select count ( templates.* ) where templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 29,
    "final": {
        "utterance": "Count the number of templates of the type CV .",
        "sql": "select count ( templates.* ) where templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of templates of the type CV .",
            "sql": "select count ( templates.* ) where templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 30,
    "final": {
        "utterance": "What is the version number and template type code for the template with version number later than 5 ?",
        "sql": "select templates.version_number , templates.template_type_code where templates.version_number > value"
    },
    "interaction": [
        {
            "utterance": "What is the version number and template type code for the template with version number later than 5 ?",
            "sql": "select templates.version_number , templates.template_type_code where templates.version_number > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 31,
    "final": {
        "utterance": "Return the version numbers and template type codes of templates with a version number greater than 5 .",
        "sql": "select templates.version_number , templates.template_type_code where templates.version_number > value"
    },
    "interaction": [
        {
            "utterance": "Return the version numbers and template type codes of templates with a version number greater than 5 .",
            "sql": "select templates.version_number , templates.template_type_code where templates.version_number > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 32,
    "final": {
        "utterance": "Show all template type codes and number of templates for each .",
        "sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes and number of templates for each .",
            "sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the different template type codes , and how many templates correspond to each ?",
        "sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the different template type codes , and how many templates correspond to each ?",
            "sql": "select templates.template_type_code , count ( templates.* ) group_by templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 34,
    "final": {
        "utterance": "Which template type code has most number of templates ?",
        "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which template type code has most number of templates ?",
            "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 35,
    "final": {
        "utterance": "Return the type code of the template type that the most templates belong to .",
        "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the type code of the template type that the most templates belong to .",
            "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( templates.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 36,
    "final": {
        "utterance": "Show all template type codes with less than three templates .",
        "sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes with less than three templates .",
            "sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the codes of template types that have fewer than 3 templates ?",
        "sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value"
    },
    "interaction": [
        {
            "utterance": "What are the codes of template types that have fewer than 3 templates ?",
            "sql": "select templates.template_type_code group_by templates.template_type_code having count ( templates.* ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 38,
    "final": {
        "utterance": "What the smallest version number and its template type code ?",
        "sql": "select min ( templates.version_number ) , templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "What the smallest version number and its template type code ?",
            "sql": "select min ( templates.version_number ) , templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 39,
    "final": {
        "utterance": "Return the lowest version number , along with its corresponding template type code .",
        "sql": "select min ( templates.version_number ) , templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "Return the lowest version number , along with its corresponding template type code .",
            "sql": "select min ( templates.version_number ) , templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 40,
    "final": {
        "utterance": "What is the template type code of the template used by document with the name `` Data base '' ?",
        "sql": "select templates.template_type_code where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the template type code of the template used by document with the name `` Data base '' ?",
            "sql": "select templates.template_type_code where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 41,
    "final": {
        "utterance": "Return the template type code of the template that is used by a document named Data base .",
        "sql": "select templates.template_type_code where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "Return the template type code of the template that is used by a document named Data base .",
            "sql": "select templates.template_type_code where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 42,
    "final": {
        "utterance": "Show all document names using templates with template type code BK .",
        "sql": "select documents.document_name where templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "Show all document names using templates with template type code BK .",
            "sql": "select documents.document_name where templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the names of documents that use templates with the code BK ?",
        "sql": "select documents.document_name where templates.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of documents that use templates with the code BK ?",
            "sql": "select documents.document_name where templates.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 44,
    "final": {
        "utterance": "Show all template type codes and the number of documents using each type .",
        "sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes and the number of documents using each type .",
            "sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 45,
    "final": {
        "utterance": "What are the different template type codes , and how many documents use each type ?",
        "sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the different template type codes , and how many documents use each type ?",
            "sql": "select templates.template_type_code , count ( * ) group_by templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 46,
    "final": {
        "utterance": "Which template type code is used by most number of documents ?",
        "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which template type code is used by most number of documents ?",
            "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 47,
    "final": {
        "utterance": "Return the code of the template type that is most commonly used in documents .",
        "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the code of the template type that is most commonly used in documents .",
            "sql": "select templates.template_type_code group_by templates.template_type_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 48,
    "final": {
        "utterance": "Show all template type codes that are not used by any document .",
        "sql": "select templates.template_type_code except select templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes that are not used by any document .",
            "sql": "select templates.template_type_code except select templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 49,
    "final": {
        "utterance": "What are the codes of template types that are not used for any document ?",
        "sql": "select templates.template_type_code except select templates.template_type_code"
    },
    "interaction": [
        {
            "utterance": "What are the codes of template types that are not used for any document ?",
            "sql": "select templates.template_type_code except select templates.template_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 50,
    "final": {
        "utterance": "Show all template type codes and descriptions .",
        "sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description"
    },
    "interaction": [
        {
            "utterance": "Show all template type codes and descriptions .",
            "sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 51,
    "final": {
        "utterance": "What are the type codes and descriptions for all template types ?",
        "sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description"
    },
    "interaction": [
        {
            "utterance": "What are the type codes and descriptions for all template types ?",
            "sql": "select ref_template_types.template_type_code , ref_template_types.template_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 52,
    "final": {
        "utterance": "What is the template type descriptions for template type code `` AD '' .",
        "sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "What is the template type descriptions for template type code `` AD '' .",
            "sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 53,
    "final": {
        "utterance": "Return the template type description of the template type with the code AD .",
        "sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value"
    },
    "interaction": [
        {
            "utterance": "Return the template type description of the template type with the code AD .",
            "sql": "select ref_template_types.template_type_description where ref_template_types.template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 54,
    "final": {
        "utterance": "What is the template type code for template type description `` Book '' .",
        "sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value"
    },
    "interaction": [
        {
            "utterance": "What is the template type code for template type description `` Book '' .",
            "sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 55,
    "final": {
        "utterance": "Return the type code of the template type with the description `` Book '' .",
        "sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value"
    },
    "interaction": [
        {
            "utterance": "Return the type code of the template type with the description `` Book '' .",
            "sql": "select ref_template_types.template_type_code where ref_template_types.template_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 56,
    "final": {
        "utterance": "What are the distinct template type descriptions for the templates ever used by any document ?",
        "sql": "select distinct ref_template_types.template_type_description"
    },
    "interaction": [
        {
            "utterance": "What are the distinct template type descriptions for the templates ever used by any document ?",
            "sql": "select distinct ref_template_types.template_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 57,
    "final": {
        "utterance": "Return the different descriptions for templates that have been used in a document .",
        "sql": "select distinct ref_template_types.template_type_description"
    },
    "interaction": [
        {
            "utterance": "Return the different descriptions for templates that have been used in a document .",
            "sql": "select distinct ref_template_types.template_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 58,
    "final": {
        "utterance": "What are the template ids with template type description `` Presentation '' .",
        "sql": "select templates.template_id where ref_template_types.template_type_description = value"
    },
    "interaction": [
        {
            "utterance": "What are the template ids with template type description `` Presentation '' .",
            "sql": "select templates.template_id where ref_template_types.template_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 59,
    "final": {
        "utterance": "Return the ids corresponding to templates with the description 'Presentation ' .",
        "sql": "select templates.template_id where ref_template_types.template_type_description = value"
    },
    "interaction": [
        {
            "utterance": "Return the ids corresponding to templates with the description 'Presentation ' .",
            "sql": "select templates.template_id where ref_template_types.template_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 60,
    "final": {
        "utterance": "How many paragraphs in total ?",
        "sql": "select count ( paragraphs.* )"
    },
    "interaction": [
        {
            "utterance": "How many paragraphs in total ?",
            "sql": "select count ( paragraphs.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 61,
    "final": {
        "utterance": "Count the number of paragraphs .",
        "sql": "select count ( paragraphs.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of paragraphs .",
            "sql": "select count ( paragraphs.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 62,
    "final": {
        "utterance": "How many paragraphs for the document with name 'Summer Show ' ?",
        "sql": "select count ( * ) where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "How many paragraphs for the document with name 'Summer Show ' ?",
            "sql": "select count ( * ) where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 63,
    "final": {
        "utterance": "Count the number of paragraphs in the document named 'Summer Show ' .",
        "sql": "select count ( * ) where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of paragraphs in the document named 'Summer Show ' .",
            "sql": "select count ( * ) where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 64,
    "final": {
        "utterance": "Show paragraph details for paragraph with text 'Korea ' .",
        "sql": "select paragraphs.other_details where paragraphs.paragraph_text = value"
    },
    "interaction": [
        {
            "utterance": "Show paragraph details for paragraph with text 'Korea ' .",
            "sql": "select paragraphs.other_details where paragraphs.paragraph_text = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 65,
    "final": {
        "utterance": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "sql": "select paragraphs.other_details where paragraphs.paragraph_text = value"
    },
    "interaction": [
        {
            "utterance": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "sql": "select paragraphs.other_details where paragraphs.paragraph_text = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 66,
    "final": {
        "utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY ' .",
        "sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY ' .",
            "sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 67,
    "final": {
        "utterance": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY ' ?",
        "sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY ' ?",
            "sql": "select paragraphs.paragraph_id , paragraphs.paragraph_text where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 68,
    "final": {
        "utterance": "Show all paragraph texts for the document `` Customer reviews '' .",
        "sql": "select paragraphs.paragraph_text where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "Show all paragraph texts for the document `` Customer reviews '' .",
            "sql": "select paragraphs.paragraph_text where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 69,
    "final": {
        "utterance": "What are the paragraph texts for the document with the name 'Customer reviews ' ?",
        "sql": "select paragraphs.paragraph_text where documents.document_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the paragraph texts for the document with the name 'Customer reviews ' ?",
            "sql": "select paragraphs.paragraph_text where documents.document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 70,
    "final": {
        "utterance": "Show all document ids and the number of paragraphs in each document . Order by document id .",
        "sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id"
    },
    "interaction": [
        {
            "utterance": "Show all document ids and the number of paragraphs in each document . Order by document id .",
            "sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 71,
    "final": {
        "utterance": "Return the different document ids along with the number of paragraphs corresponding to each , ordered by id .",
        "sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id"
    },
    "interaction": [
        {
            "utterance": "Return the different document ids along with the number of paragraphs corresponding to each , ordered by id .",
            "sql": "select paragraphs.document_id , count ( paragraphs.* ) group_by paragraphs.document_id order_by paragraphs.document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 72,
    "final": {
        "utterance": "Show all document ids , names and the number of paragraphs in each document .",
        "sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id"
    },
    "interaction": [
        {
            "utterance": "Show all document ids , names and the number of paragraphs in each document .",
            "sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 73,
    "final": {
        "utterance": "What are the ids and names of each document , as well as the number of paragraphs in each ?",
        "sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of each document , as well as the number of paragraphs in each ?",
            "sql": "select paragraphs.document_id , documents.document_name , count ( * ) group_by paragraphs.document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 74,
    "final": {
        "utterance": "List all document ids with at least two paragraphs .",
        "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "List all document ids with at least two paragraphs .",
            "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 75,
    "final": {
        "utterance": "What are the ids of documents that have 2 or more paragraphs ?",
        "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the ids of documents that have 2 or more paragraphs ?",
            "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 76,
    "final": {
        "utterance": "What is the document id and name with greatest number of paragraphs ?",
        "sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the document id and name with greatest number of paragraphs ?",
            "sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 77,
    "final": {
        "utterance": "Return the id and name of the document with the most paragraphs .",
        "sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the id and name of the document with the most paragraphs .",
            "sql": "select paragraphs.document_id , documents.document_name group_by paragraphs.document_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 78,
    "final": {
        "utterance": "What is the document id with least number of paragraphs ?",
        "sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the document id with least number of paragraphs ?",
            "sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 79,
    "final": {
        "utterance": "Return the id of the document with the fewest paragraphs .",
        "sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the id of the document with the fewest paragraphs .",
            "sql": "select paragraphs.document_id group_by paragraphs.document_id order_by count ( paragraphs.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 80,
    "final": {
        "utterance": "What is the document id with 1 to 2 paragraphs ?",
        "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value"
    },
    "interaction": [
        {
            "utterance": "What is the document id with 1 to 2 paragraphs ?",
            "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 81,
    "final": {
        "utterance": "Give the ids of documents that have between one and two paragraphs .",
        "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value"
    },
    "interaction": [
        {
            "utterance": "Give the ids of documents that have between one and two paragraphs .",
            "sql": "select paragraphs.document_id group_by paragraphs.document_id having count ( paragraphs.* ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 82,
    "final": {
        "utterance": "Show the document id with paragraph text 'Brazil ' and 'Ireland ' .",
        "sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value"
    },
    "interaction": [
        {
            "utterance": "Show the document id with paragraph text 'Brazil ' and 'Ireland ' .",
            "sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 83,
    "final": {
        "utterance": "What are the ids of documents that contain the paragraph text 'Brazil ' and 'Ireland ' ?",
        "sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value"
    },
    "interaction": [
        {
            "utterance": "What are the ids of documents that contain the paragraph text 'Brazil ' and 'Ireland ' ?",
            "sql": "select paragraphs.document_id where paragraphs.paragraph_text = value intersect select paragraphs.document_id where paragraphs.paragraph_text = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 0,
    "final": {
        "utterance": "Which states have both owners and professionals living there ?",
        "sql": "select owners.state intersect select professionals.state"
    },
    "interaction": [
        {
            "utterance": "Which states have both owners and professionals living there ?",
            "sql": "select owners.state intersect select professionals.state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the states where both owners and professionals live .",
        "sql": "select owners.state intersect select professionals.state"
    },
    "interaction": [
        {
            "utterance": "Find the states where both owners and professionals live .",
            "sql": "select owners.state intersect select professionals.state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the average age of the dogs who have gone through any treatments ?",
        "sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )"
    },
    "interaction": [
        {
            "utterance": "What is the average age of the dogs who have gone through any treatments ?",
            "sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the average age of the dogs who went through treatments .",
        "sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )"
    },
    "interaction": [
        {
            "utterance": "Find the average age of the dogs who went through treatments .",
            "sql": "select avg ( dogs.age ) where dogs.dog_id in ( select treatments.dog_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 4,
    "final": {
        "utterance": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments ? List his or her id , last name and cell phone .",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value"
    },
    "interaction": [
        {
            "utterance": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments ? List his or her id , last name and cell phone .",
            "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the id , last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments .",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value"
    },
    "interaction": [
        {
            "utterance": "Find the id , last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments .",
            "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number where professionals.state = value union select professionals.professional_id , professionals.last_name , professionals.cell_number group_by professionals.professional_id having count ( professionals.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 6,
    "final": {
        "utterance": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )"
    },
    "interaction": [
        {
            "utterance": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the dogs for which the owner spent more than 1000 for treatment ?",
        "sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )"
    },
    "interaction": [
        {
            "utterance": "What are the names of the dogs for which the owner spent more than 1000 for treatment ?",
            "sql": "select dogs.name where dogs.dog_id not in ( select treatments.dog_id group_by treatments.dog_id having sum ( treatments.cost_of_treatment ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 8,
    "final": {
        "utterance": "Which first names are used for professionals or owners but are not used as dog names ?",
        "sql": "select professionals.first_name union select owners.first_name except select dogs.name"
    },
    "interaction": [
        {
            "utterance": "Which first names are used for professionals or owners but are not used as dog names ?",
            "sql": "select professionals.first_name union select owners.first_name except select dogs.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the first names that are used for professionals or owners but are not used as dog names .",
        "sql": "select professionals.first_name union select owners.first_name except select dogs.name"
    },
    "interaction": [
        {
            "utterance": "Find the first names that are used for professionals or owners but are not used as dog names .",
            "sql": "select professionals.first_name union select owners.first_name except select dogs.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 10,
    "final": {
        "utterance": "Which professional did not operate any treatment on dogs ? List the professional 's id , role and email .",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address"
    },
    "interaction": [
        {
            "utterance": "Which professional did not operate any treatment on dogs ? List the professional 's id , role and email .",
            "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 11,
    "final": {
        "utterance": "Give me the id , role and email of the professionals who did not perform any treatment on dogs .",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address"
    },
    "interaction": [
        {
            "utterance": "Give me the id , role and email of the professionals who did not perform any treatment on dogs .",
            "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address except select professionals.professional_id , professionals.role_code , professionals.email_address"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 12,
    "final": {
        "utterance": "Which owner owns the most dogs ? List the owner id , first name and last name .",
        "sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which owner owns the most dogs ? List the owner id , first name and last name .",
            "sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 13,
    "final": {
        "utterance": "Return the owner id , first name and last name of the owner who has the most dogs .",
        "sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the owner id , first name and last name of the owner who has the most dogs .",
            "sql": "select dogs.owner_id , owners.first_name , owners.last_name group_by dogs.owner_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 14,
    "final": {
        "utterance": "Which professionals have done at least two treatments ? List the professional 's id , role , and first name .",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Which professionals have done at least two treatments ? List the professional 's id , role , and first name .",
            "sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the id , role , and first name of the professionals who have performed two or more treatments ?",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the id , role , and first name of the professionals who have performed two or more treatments ?",
            "sql": "select professionals.professional_id , professionals.role_code , professionals.first_name group_by professionals.professional_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of the breed with the most dogs ?",
        "sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the breed with the most dogs ?",
            "sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 17,
    "final": {
        "utterance": "Which breed do the most dogs have ? Give me the breed name .",
        "sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which breed do the most dogs have ? Give me the breed name .",
            "sql": "select breeds.breed_name group_by breeds.breed_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 18,
    "final": {
        "utterance": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name .",
        "sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name .",
            "sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 19,
    "final": {
        "utterance": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs .",
        "sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs .",
            "sql": "select owners.owner_id , owners.last_name group_by owners.owner_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the description of the treatment type that costs the least money in total ?",
        "sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the description of the treatment type that costs the least money in total ?",
            "sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 21,
    "final": {
        "utterance": "Give me the description of the treatment type whose total cost is the lowest .",
        "sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Give me the description of the treatment type whose total cost is the lowest .",
            "sql": "select treatment_types.treatment_type_description group_by treatment_types.treatment_type_code order_by sum ( treatments.cost_of_treatment ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 22,
    "final": {
        "utterance": "Which owner has paid the largest amount of money in total for their dogs ? Show the owner id and zip code .",
        "sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which owner has paid the largest amount of money in total for their dogs ? Show the owner id and zip code .",
            "sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs .",
        "sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs .",
            "sql": "select owners.owner_id , owners.zip_code group_by owners.owner_id order_by sum ( treatments.cost_of_treatment ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 24,
    "final": {
        "utterance": "Which professionals have done at least two types of treatments ? List the professional id and cell phone .",
        "sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Which professionals have done at least two types of treatments ? List the professional id and cell phone .",
            "sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the id and cell phone of the professionals who operate two or more types of treatments .",
        "sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Find the id and cell phone of the professionals who operate two or more types of treatments .",
            "sql": "select professionals.professional_id , professionals.cell_number group_by professionals.professional_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 26,
    "final": {
        "utterance": "What are the first name and last name of the professionals who have done treatment with cost below average ?",
        "sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )"
    },
    "interaction": [
        {
            "utterance": "What are the first name and last name of the professionals who have done treatment with cost below average ?",
            "sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 27,
    "final": {
        "utterance": "Which professionals have operated a treatment that costs less than the average ? Give me theor first names and last names .",
        "sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )"
    },
    "interaction": [
        {
            "utterance": "Which professionals have operated a treatment that costs less than the average ? Give me theor first names and last names .",
            "sql": "select distinct professionals.first_name , professionals.last_name where treatments.cost_of_treatment < ( select avg ( treatments.cost_of_treatment ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 28,
    "final": {
        "utterance": "List the date of each treatment , together with the first name of the professional who operated it .",
        "sql": "select treatments.date_of_treatment , professionals.first_name"
    },
    "interaction": [
        {
            "utterance": "List the date of each treatment , together with the first name of the professional who operated it .",
            "sql": "select treatments.date_of_treatment , professionals.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the date and the operating professional 's first name of each treatment ?",
        "sql": "select treatments.date_of_treatment , professionals.first_name"
    },
    "interaction": [
        {
            "utterance": "What are the date and the operating professional 's first name of each treatment ?",
            "sql": "select treatments.date_of_treatment , professionals.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 30,
    "final": {
        "utterance": "List the cost of each treatment and the corresponding treatment type description .",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description"
    },
    "interaction": [
        {
            "utterance": "List the cost of each treatment and the corresponding treatment type description .",
            "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the cost and treatment type description of each treatment ?",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description"
    },
    "interaction": [
        {
            "utterance": "What are the cost and treatment type description of each treatment ?",
            "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 32,
    "final": {
        "utterance": "List each owner 's first name , last name , and the size of his for her dog .",
        "sql": "select owners.first_name , owners.last_name , dogs.size_code"
    },
    "interaction": [
        {
            "utterance": "List each owner 's first name , last name , and the size of his for her dog .",
            "sql": "select owners.first_name , owners.last_name , dogs.size_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 33,
    "final": {
        "utterance": "What are each owner 's first name , last name , and the size of their dog ?",
        "sql": "select owners.first_name , owners.last_name , dogs.size_code"
    },
    "interaction": [
        {
            "utterance": "What are each owner 's first name , last name , and the size of their dog ?",
            "sql": "select owners.first_name , owners.last_name , dogs.size_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 34,
    "final": {
        "utterance": "List pairs of the owner 's first name and the dogs 's name .",
        "sql": "select owners.first_name , dogs.name"
    },
    "interaction": [
        {
            "utterance": "List pairs of the owner 's first name and the dogs 's name .",
            "sql": "select owners.first_name , dogs.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 35,
    "final": {
        "utterance": "What are each owner 's first name and their dogs 's name ?",
        "sql": "select owners.first_name , dogs.name"
    },
    "interaction": [
        {
            "utterance": "What are each owner 's first name and their dogs 's name ?",
            "sql": "select owners.first_name , dogs.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 36,
    "final": {
        "utterance": "List the names of the dogs of the rarest breed and the treatment dates of them .",
        "sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )"
    },
    "interaction": [
        {
            "utterance": "List the names of the dogs of the rarest breed and the treatment dates of them .",
            "sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 37,
    "final": {
        "utterance": "Which dogs are of the rarest breed ? Show their names and treatment dates .",
        "sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )"
    },
    "interaction": [
        {
            "utterance": "Which dogs are of the rarest breed ? Show their names and treatment dates .",
            "sql": "select dogs.name , treatments.date_of_treatment where dogs.breed_code = ( select dogs.breed_code group_by dogs.breed_code order_by count ( dogs.* ) asc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 38,
    "final": {
        "utterance": "Which dogs are owned by someone who lives in Virginia ? List the owner 's first name and the dog 's name .",
        "sql": "select owners.first_name , dogs.name where owners.state = value"
    },
    "interaction": [
        {
            "utterance": "Which dogs are owned by someone who lives in Virginia ? List the owner 's first name and the dog 's name .",
            "sql": "select owners.first_name , dogs.name where owners.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 39,
    "final": {
        "utterance": "Find the first names of owners living in Virginia and the names of dogs they own .",
        "sql": "select owners.first_name , dogs.name where owners.state = value"
    },
    "interaction": [
        {
            "utterance": "Find the first names of owners living in Virginia and the names of dogs they own .",
            "sql": "select owners.first_name , dogs.name where owners.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 40,
    "final": {
        "utterance": "What are the arriving date and the departing date of the dogs who have gone through a treatment ?",
        "sql": "select distinct dogs.date_arrived , dogs.date_departed"
    },
    "interaction": [
        {
            "utterance": "What are the arriving date and the departing date of the dogs who have gone through a treatment ?",
            "sql": "select distinct dogs.date_arrived , dogs.date_departed"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 41,
    "final": {
        "utterance": "Find the arriving date and the departing date of the dogs that received a treatment .",
        "sql": "select distinct dogs.date_arrived , dogs.date_departed"
    },
    "interaction": [
        {
            "utterance": "Find the arriving date and the departing date of the dogs that received a treatment .",
            "sql": "select distinct dogs.date_arrived , dogs.date_departed"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 42,
    "final": {
        "utterance": "List the last name of the owner owning the youngest dog .",
        "sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )"
    },
    "interaction": [
        {
            "utterance": "List the last name of the owner owning the youngest dog .",
            "sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 43,
    "final": {
        "utterance": "Who owns the youngest dog ? Give me his or her last name .",
        "sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )"
    },
    "interaction": [
        {
            "utterance": "Who owns the youngest dog ? Give me his or her last name .",
            "sql": "select owners.last_name where dogs.age = ( select max ( dogs.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 44,
    "final": {
        "utterance": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin .",
        "sql": "select professionals.email_address where professionals.state = value or professionals.state = value"
    },
    "interaction": [
        {
            "utterance": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin .",
            "sql": "select professionals.email_address where professionals.state = value or professionals.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 45,
    "final": {
        "utterance": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin ?",
        "sql": "select professionals.email_address where professionals.state = value or professionals.state = value"
    },
    "interaction": [
        {
            "utterance": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin ?",
            "sql": "select professionals.email_address where professionals.state = value or professionals.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 46,
    "final": {
        "utterance": "What are the arriving date and the departing date of all the dogs ?",
        "sql": "select dogs.date_arrived , dogs.date_departed"
    },
    "interaction": [
        {
            "utterance": "What are the arriving date and the departing date of all the dogs ?",
            "sql": "select dogs.date_arrived , dogs.date_departed"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 47,
    "final": {
        "utterance": "List the arrival date and the departure date for all the dogs .",
        "sql": "select dogs.date_arrived , dogs.date_departed"
    },
    "interaction": [
        {
            "utterance": "List the arrival date and the departure date for all the dogs .",
            "sql": "select dogs.date_arrived , dogs.date_departed"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 48,
    "final": {
        "utterance": "How many dogs went through any treatments ?",
        "sql": "select count ( distinct treatments.dog_id )"
    },
    "interaction": [
        {
            "utterance": "How many dogs went through any treatments ?",
            "sql": "select count ( distinct treatments.dog_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 49,
    "final": {
        "utterance": "Count the number of dogs that went through a treatment .",
        "sql": "select count ( distinct treatments.dog_id )"
    },
    "interaction": [
        {
            "utterance": "Count the number of dogs that went through a treatment .",
            "sql": "select count ( distinct treatments.dog_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 50,
    "final": {
        "utterance": "How many professionals have performed any treatment to dogs ?",
        "sql": "select count ( distinct treatments.professional_id )"
    },
    "interaction": [
        {
            "utterance": "How many professionals have performed any treatment to dogs ?",
            "sql": "select count ( distinct treatments.professional_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 51,
    "final": {
        "utterance": "Find the number of professionals who have ever treated dogs .",
        "sql": "select count ( distinct treatments.professional_id )"
    },
    "interaction": [
        {
            "utterance": "Find the number of professionals who have ever treated dogs .",
            "sql": "select count ( distinct treatments.professional_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 52,
    "final": {
        "utterance": "Which professionals live in a city containing the substring 'West ' ? List his or her role , street , city and state .",
        "sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value"
    },
    "interaction": [
        {
            "utterance": "Which professionals live in a city containing the substring 'West ' ? List his or her role , street , city and state .",
            "sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 53,
    "final": {
        "utterance": "Find the role , street , city and state of the professionals living in a city that contains the substring 'West ' .",
        "sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value"
    },
    "interaction": [
        {
            "utterance": "Find the role , street , city and state of the professionals living in a city that contains the substring 'West ' .",
            "sql": "select professionals.role_code , professionals.street , professionals.city , professionals.state where professionals.city like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 54,
    "final": {
        "utterance": "Which owners live in the state whose name contains the substring 'North ' ? List his first name , last name and email .",
        "sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value"
    },
    "interaction": [
        {
            "utterance": "Which owners live in the state whose name contains the substring 'North ' ? List his first name , last name and email .",
            "sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 55,
    "final": {
        "utterance": "Return the first name , last name and email of the owners living in a state whose name contains the substring 'North ' .",
        "sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value"
    },
    "interaction": [
        {
            "utterance": "Return the first name , last name and email of the owners living in a state whose name contains the substring 'North ' .",
            "sql": "select owners.first_name , owners.last_name , owners.email_address where owners.state like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 56,
    "final": {
        "utterance": "How many dogs have an age below the average ?",
        "sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )"
    },
    "interaction": [
        {
            "utterance": "How many dogs have an age below the average ?",
            "sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 57,
    "final": {
        "utterance": "Count the number of dogs of an age below the average .",
        "sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )"
    },
    "interaction": [
        {
            "utterance": "Count the number of dogs of an age below the average .",
            "sql": "select count ( dogs.* ) where dogs.age < ( select avg ( dogs.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 58,
    "final": {
        "utterance": "How much does the most recent treatment cost ?",
        "sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value"
    },
    "interaction": [
        {
            "utterance": "How much does the most recent treatment cost ?",
            "sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 59,
    "final": {
        "utterance": "Show me the cost of the most recently performed treatment .",
        "sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Show me the cost of the most recently performed treatment .",
            "sql": "select treatments.cost_of_treatment order_by treatments.date_of_treatment desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 60,
    "final": {
        "utterance": "How many dogs have not gone through any treatment ?",
        "sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )"
    },
    "interaction": [
        {
            "utterance": "How many dogs have not gone through any treatment ?",
            "sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 61,
    "final": {
        "utterance": "Tell me the number of dogs that have received any treatment .",
        "sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )"
    },
    "interaction": [
        {
            "utterance": "Tell me the number of dogs that have received any treatment .",
            "sql": "select count ( dogs.* ) where dogs.dog_id not in ( select treatments.dog_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 62,
    "final": {
        "utterance": "How many owners temporarily do not have any dogs ?",
        "sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )"
    },
    "interaction": [
        {
            "utterance": "How many owners temporarily do not have any dogs ?",
            "sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 63,
    "final": {
        "utterance": "Find the number of owners who do not own any dogs at this moment .",
        "sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )"
    },
    "interaction": [
        {
            "utterance": "Find the number of owners who do not own any dogs at this moment .",
            "sql": "select count ( owners.* ) where owners.owner_id not in ( select dogs.owner_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 64,
    "final": {
        "utterance": "How many professionals did not operate any treatment on dogs ?",
        "sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )"
    },
    "interaction": [
        {
            "utterance": "How many professionals did not operate any treatment on dogs ?",
            "sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 65,
    "final": {
        "utterance": "Find the number of professionals who have not treated any dogs .",
        "sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )"
    },
    "interaction": [
        {
            "utterance": "Find the number of professionals who have not treated any dogs .",
            "sql": "select count ( professionals.* ) where professionals.professional_id not in ( select treatments.professional_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 66,
    "final": {
        "utterance": "List the dog name , age and weight of the dogs who have been abandoned ? 1 stands for yes , and 0 stands for no .",
        "sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value"
    },
    "interaction": [
        {
            "utterance": "List the dog name , age and weight of the dogs who have been abandoned ? 1 stands for yes , and 0 stands for no .",
            "sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 67,
    "final": {
        "utterance": "What are the dog name , age and weight of the dogs that were abandoned ? Note that 1 stands for yes , and 0 stands for no in the tables .",
        "sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value"
    },
    "interaction": [
        {
            "utterance": "What are the dog name , age and weight of the dogs that were abandoned ? Note that 1 stands for yes , and 0 stands for no in the tables .",
            "sql": "select dogs.name , dogs.age , dogs.weight where dogs.abandoned_yn = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 68,
    "final": {
        "utterance": "What is the average age of all the dogs ?",
        "sql": "select avg ( dogs.age )"
    },
    "interaction": [
        {
            "utterance": "What is the average age of all the dogs ?",
            "sql": "select avg ( dogs.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 69,
    "final": {
        "utterance": "Compute the average age of all the dogs .",
        "sql": "select avg ( dogs.age )"
    },
    "interaction": [
        {
            "utterance": "Compute the average age of all the dogs .",
            "sql": "select avg ( dogs.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 70,
    "final": {
        "utterance": "What is the age of the oldest dog ?",
        "sql": "select max ( dogs.age )"
    },
    "interaction": [
        {
            "utterance": "What is the age of the oldest dog ?",
            "sql": "select max ( dogs.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 71,
    "final": {
        "utterance": "Tell me the age of the oldest dog .",
        "sql": "select max ( dogs.age )"
    },
    "interaction": [
        {
            "utterance": "Tell me the age of the oldest dog .",
            "sql": "select max ( dogs.age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 72,
    "final": {
        "utterance": "How much does each charge type costs ? List both charge type and amount .",
        "sql": "select charges.charge_type , charges.charge_amount"
    },
    "interaction": [
        {
            "utterance": "How much does each charge type costs ? List both charge type and amount .",
            "sql": "select charges.charge_type , charges.charge_amount"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 73,
    "final": {
        "utterance": "List each charge type and its amount .",
        "sql": "select charges.charge_type , charges.charge_amount"
    },
    "interaction": [
        {
            "utterance": "List each charge type and its amount .",
            "sql": "select charges.charge_type , charges.charge_amount"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 74,
    "final": {
        "utterance": "How much does the most expensive charge type costs ?",
        "sql": "select max ( charges.charge_amount )"
    },
    "interaction": [
        {
            "utterance": "How much does the most expensive charge type costs ?",
            "sql": "select max ( charges.charge_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 75,
    "final": {
        "utterance": "What is the charge amount of the most expensive charge type ?",
        "sql": "select max ( charges.charge_amount )"
    },
    "interaction": [
        {
            "utterance": "What is the charge amount of the most expensive charge type ?",
            "sql": "select max ( charges.charge_amount )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 76,
    "final": {
        "utterance": "List the email , cell phone and home phone of all the professionals .",
        "sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone"
    },
    "interaction": [
        {
            "utterance": "List the email , cell phone and home phone of all the professionals .",
            "sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 77,
    "final": {
        "utterance": "What are the email , cell phone and home phone of each professional ?",
        "sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone"
    },
    "interaction": [
        {
            "utterance": "What are the email , cell phone and home phone of each professional ?",
            "sql": "select professionals.email_address , professionals.cell_number , professionals.home_phone"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 78,
    "final": {
        "utterance": "What are all the possible breed type and size type combinations ?",
        "sql": "select distinct dogs.breed_code , dogs.size_code"
    },
    "interaction": [
        {
            "utterance": "What are all the possible breed type and size type combinations ?",
            "sql": "select distinct dogs.breed_code , dogs.size_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 79,
    "final": {
        "utterance": "Find the distinct breed type and size type combinations for dogs .",
        "sql": "select distinct dogs.breed_code , dogs.size_code"
    },
    "interaction": [
        {
            "utterance": "Find the distinct breed type and size type combinations for dogs .",
            "sql": "select distinct dogs.breed_code , dogs.size_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 80,
    "final": {
        "utterance": "List the first name of all the professionals along with the description of the treatment they have done .",
        "sql": "select distinct professionals.first_name , treatment_types.treatment_type_description"
    },
    "interaction": [
        {
            "utterance": "List the first name of all the professionals along with the description of the treatment they have done .",
            "sql": "select distinct professionals.first_name , treatment_types.treatment_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 81,
    "final": {
        "utterance": "What are each professional 's first name and description of the treatment they have performed ?",
        "sql": "select distinct professionals.first_name , treatment_types.treatment_type_description"
    },
    "interaction": [
        {
            "utterance": "What are each professional 's first name and description of the treatment they have performed ?",
            "sql": "select distinct professionals.first_name , treatment_types.treatment_type_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 0,
    "final": {
        "utterance": "How many available features are there in total ?",
        "sql": "select count ( other_available_features.* )"
    },
    "interaction": [
        {
            "utterance": "How many available features are there in total ?",
            "sql": "select count ( other_available_features.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the feature type name of feature AirCon ?",
        "sql": "select ref_feature_types.feature_type_name where other_available_features.feature_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the feature type name of feature AirCon ?",
            "sql": "select ref_feature_types.feature_type_name where other_available_features.feature_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the property type descriptions of properties belonging to that code .",
        "sql": "select ref_property_types.property_type_description group_by properties.property_type_code"
    },
    "interaction": [
        {
            "utterance": "Show the property type descriptions of properties belonging to that code .",
            "sql": "select ref_property_types.property_type_description group_by properties.property_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of properties that are either houses or apartments with more than 1 room ?",
        "sql": "select properties.property_name where properties.property_type_code = value union select properties.property_name where properties.property_type_code = value and properties.room_count > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of properties that are either houses or apartments with more than 1 room ?",
            "sql": "select properties.property_name where properties.property_type_code = value union select properties.property_name where properties.property_type_code = value and properties.room_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 0,
    "final": {
        "utterance": "How many singers are there ?",
        "sql": "select count ( singer.* )"
    },
    "interaction": [
        {
            "utterance": "How many singers are there ?",
            "sql": "select count ( singer.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the count of singers ?",
        "sql": "select count ( singer.* )"
    },
    "interaction": [
        {
            "utterance": "What is the count of singers ?",
            "sql": "select count ( singer.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name of singers in ascending order of net worth .",
        "sql": "select singer.name order_by singer.net_worth_millions asc"
    },
    "interaction": [
        {
            "utterance": "List the name of singers in ascending order of net worth .",
            "sql": "select singer.name order_by singer.net_worth_millions asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of singers ordered by ascending net worth ?",
        "sql": "select singer.name order_by singer.net_worth_millions asc"
    },
    "interaction": [
        {
            "utterance": "What are the names of singers ordered by ascending net worth ?",
            "sql": "select singer.name order_by singer.net_worth_millions asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the birth year and citizenship of singers ?",
        "sql": "select singer.birth_year , singer.citizenship"
    },
    "interaction": [
        {
            "utterance": "What are the birth year and citizenship of singers ?",
            "sql": "select singer.birth_year , singer.citizenship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the birth years and citizenships of the singers ?",
        "sql": "select singer.birth_year , singer.citizenship"
    },
    "interaction": [
        {
            "utterance": "What are the birth years and citizenships of the singers ?",
            "sql": "select singer.birth_year , singer.citizenship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 6,
    "final": {
        "utterance": "List the name of singers whose citizenship is not `` France '' .",
        "sql": "select singer.name where singer.citizenship != value"
    },
    "interaction": [
        {
            "utterance": "List the name of singers whose citizenship is not `` France '' .",
            "sql": "select singer.name where singer.citizenship != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the singers who are not French citizens ?",
        "sql": "select singer.name where singer.citizenship != value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the singers who are not French citizens ?",
            "sql": "select singer.name where singer.citizenship != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of singers whose birth year is either 1948 or 1949 ?",
        "sql": "select singer.name where singer.birth_year = value or singer.birth_year = value"
    },
    "interaction": [
        {
            "utterance": "Show the name of singers whose birth year is either 1948 or 1949 ?",
            "sql": "select singer.name where singer.birth_year = value or singer.birth_year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of the singers whose birth years are either 1948 or 1949 ?",
        "sql": "select singer.name where singer.birth_year = value or singer.birth_year = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the singers whose birth years are either 1948 or 1949 ?",
            "sql": "select singer.name where singer.birth_year = value or singer.birth_year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the name of the singer with the largest net worth ?",
        "sql": "select singer.name order_by singer.net_worth_millions desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the singer with the largest net worth ?",
            "sql": "select singer.name order_by singer.net_worth_millions desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of the singer who is worth the most ?",
        "sql": "select singer.name order_by singer.net_worth_millions desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the singer who is worth the most ?",
            "sql": "select singer.name order_by singer.net_worth_millions desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 12,
    "final": {
        "utterance": "Show different citizenship of singers and the number of singers of each citizenship .",
        "sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship"
    },
    "interaction": [
        {
            "utterance": "Show different citizenship of singers and the number of singers of each citizenship .",
            "sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 13,
    "final": {
        "utterance": "For each citizenship , how many singers are from that country ?",
        "sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship"
    },
    "interaction": [
        {
            "utterance": "For each citizenship , how many singers are from that country ?",
            "sql": "select singer.citizenship , count ( singer.* ) group_by singer.citizenship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 14,
    "final": {
        "utterance": "Please show the most common citizenship of singers .",
        "sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Please show the most common citizenship of singers .",
            "sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the msot common singer citizenship ?",
        "sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the msot common singer citizenship ?",
            "sql": "select singer.citizenship group_by singer.citizenship order_by count ( singer.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 16,
    "final": {
        "utterance": "Show different citizenships and the maximum net worth of singers of each citizenship .",
        "sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship"
    },
    "interaction": [
        {
            "utterance": "Show different citizenships and the maximum net worth of singers of each citizenship .",
            "sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 17,
    "final": {
        "utterance": "For each citizenship , what is the maximum net worth ?",
        "sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship"
    },
    "interaction": [
        {
            "utterance": "For each citizenship , what is the maximum net worth ?",
            "sql": "select singer.citizenship , max ( singer.net_worth_millions ) group_by singer.citizenship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 18,
    "final": {
        "utterance": "Show titles of songs and names of singers .",
        "sql": "select song.title , singer.name"
    },
    "interaction": [
        {
            "utterance": "Show titles of songs and names of singers .",
            "sql": "select song.title , singer.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the song titles and singer names ?",
        "sql": "select song.title , singer.name"
    },
    "interaction": [
        {
            "utterance": "What are the song titles and singer names ?",
            "sql": "select song.title , singer.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 20,
    "final": {
        "utterance": "Show distinct names of singers that have songs with sales more than 300000 .",
        "sql": "select distinct singer.name where song.sales > value"
    },
    "interaction": [
        {
            "utterance": "Show distinct names of singers that have songs with sales more than 300000 .",
            "sql": "select distinct singer.name where song.sales > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 21,
    "final": {
        "utterance": "what are the different names of the singers that have sales more than 300000 ?",
        "sql": "select distinct singer.name where song.sales > value"
    },
    "interaction": [
        {
            "utterance": "what are the different names of the singers that have sales more than 300000 ?",
            "sql": "select distinct singer.name where song.sales > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the names of singers that have more than one song .",
        "sql": "select singer.name group_by singer.name having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Show the names of singers that have more than one song .",
            "sql": "select singer.name group_by singer.name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the names of the singers that have more than one songs ?",
        "sql": "select singer.name group_by singer.name having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the singers that have more than one songs ?",
            "sql": "select singer.name group_by singer.name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 24,
    "final": {
        "utterance": "Show the names of singers and the total sales of their songs .",
        "sql": "select singer.name , sum ( song.sales ) group_by singer.name"
    },
    "interaction": [
        {
            "utterance": "Show the names of singers and the total sales of their songs .",
            "sql": "select singer.name , sum ( song.sales ) group_by singer.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 25,
    "final": {
        "utterance": "For each singer name , what is the total sales for their songs ?",
        "sql": "select singer.name , sum ( song.sales ) group_by singer.name"
    },
    "interaction": [
        {
            "utterance": "For each singer name , what is the total sales for their songs ?",
            "sql": "select singer.name , sum ( song.sales ) group_by singer.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 26,
    "final": {
        "utterance": "List the name of singers that do not have any song .",
        "sql": "select singer.name where singer.singer_id not in ( select song.singer_id )"
    },
    "interaction": [
        {
            "utterance": "List the name of singers that do not have any song .",
            "sql": "select singer.name where singer.singer_id not in ( select song.singer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the sname of every sing that does not have any song ?",
        "sql": "select singer.name where singer.singer_id not in ( select song.singer_id )"
    },
    "interaction": [
        {
            "utterance": "What is the sname of every sing that does not have any song ?",
            "sql": "select singer.name where singer.singer_id not in ( select song.singer_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the citizenship shared by singers with birth year before 1945 and after 1955 .",
        "sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value"
    },
    "interaction": [
        {
            "utterance": "Show the citizenship shared by singers with birth year before 1945 and after 1955 .",
            "sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 ?",
        "sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value"
    },
    "interaction": [
        {
            "utterance": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 ?",
            "sql": "select singer.citizenship where singer.birth_year < value intersect select singer.citizenship where singer.birth_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many high schoolers are there ?",
        "sql": "select count ( highschooler.* )"
    },
    "interaction": [
        {
            "utterance": "How many high schoolers are there ?",
            "sql": "select count ( highschooler.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Count the number of high schoolers .",
        "sql": "select count ( highschooler.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of high schoolers .",
            "sql": "select count ( highschooler.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names and grades of each high schooler .",
        "sql": "select highschooler.name , highschooler.grade"
    },
    "interaction": [
        {
            "utterance": "Show the names and grades of each high schooler .",
            "sql": "select highschooler.name , highschooler.grade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names and grades for each high schooler ?",
        "sql": "select highschooler.name , highschooler.grade"
    },
    "interaction": [
        {
            "utterance": "What are the names and grades for each high schooler ?",
            "sql": "select highschooler.name , highschooler.grade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Show all the grades of the high schoolers .",
        "sql": "select highschooler.grade"
    },
    "interaction": [
        {
            "utterance": "Show all the grades of the high schoolers .",
            "sql": "select highschooler.grade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the grade of each high schooler ?",
        "sql": "select highschooler.grade"
    },
    "interaction": [
        {
            "utterance": "What is the grade of each high schooler ?",
            "sql": "select highschooler.grade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What grade is Kyle in ?",
        "sql": "select highschooler.grade where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "What grade is Kyle in ?",
            "sql": "select highschooler.grade where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Return the grade for the high schooler named Kyle .",
        "sql": "select highschooler.grade where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "Return the grade for the high schooler named Kyle .",
            "sql": "select highschooler.grade where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the names of all high schoolers in grade 10 .",
        "sql": "select highschooler.name where highschooler.grade = value"
    },
    "interaction": [
        {
            "utterance": "Show the names of all high schoolers in grade 10 .",
            "sql": "select highschooler.name where highschooler.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of all high schoolers in grade 10 ?",
        "sql": "select highschooler.name where highschooler.grade = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of all high schoolers in grade 10 ?",
            "sql": "select highschooler.name where highschooler.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Show the ID of the high schooler named Kyle .",
        "sql": "select highschooler.id where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "Show the ID of the high schooler named Kyle .",
            "sql": "select highschooler.id where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is Kyle 's id ?",
        "sql": "select highschooler.id where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "What is Kyle 's id ?",
            "sql": "select highschooler.id where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 12,
    "final": {
        "utterance": "How many high schoolers are there in grade 9 or 10 ?",
        "sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value"
    },
    "interaction": [
        {
            "utterance": "How many high schoolers are there in grade 9 or 10 ?",
            "sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Count the number of high schoolers in grades 9 or 10 .",
        "sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of high schoolers in grades 9 or 10 .",
            "sql": "select count ( highschooler.* ) where highschooler.grade = value or highschooler.grade = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Show the number of high schoolers for each grade .",
        "sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade"
    },
    "interaction": [
        {
            "utterance": "Show the number of high schoolers for each grade .",
            "sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many high schoolers are in each grade ?",
        "sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade"
    },
    "interaction": [
        {
            "utterance": "How many high schoolers are in each grade ?",
            "sql": "select highschooler.grade , count ( highschooler.* ) group_by highschooler.grade"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Which grade has the most high schoolers ?",
        "sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which grade has the most high schoolers ?",
            "sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 17,
    "final": {
        "utterance": "Return the grade that has the greatest number of high schoolers .",
        "sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the grade that has the greatest number of high schoolers .",
            "sql": "select highschooler.grade group_by highschooler.grade order_by count ( highschooler.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Show me all grades that have at least 4 students .",
        "sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "Show me all grades that have at least 4 students .",
            "sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Which grades have 4 or more high schoolers ?",
        "sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "Which grades have 4 or more high schoolers ?",
            "sql": "select highschooler.grade group_by highschooler.grade having count ( highschooler.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the student IDs and numbers of friends corresponding to each .",
        "sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id"
    },
    "interaction": [
        {
            "utterance": "Show the student IDs and numbers of friends corresponding to each .",
            "sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many friends does each student have ?",
        "sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id"
    },
    "interaction": [
        {
            "utterance": "How many friends does each student have ?",
            "sql": "select friend.student_id , count ( friend.* ) group_by friend.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the names of high school students and their corresponding number of friends .",
        "sql": "select highschooler.name , count ( * ) group_by friend.student_id"
    },
    "interaction": [
        {
            "utterance": "Show the names of high school students and their corresponding number of friends .",
            "sql": "select highschooler.name , count ( * ) group_by friend.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the names of the high schoolers and how many friends does each have ?",
        "sql": "select highschooler.name , count ( * ) group_by friend.student_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of the high schoolers and how many friends does each have ?",
            "sql": "select highschooler.name , count ( * ) group_by friend.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the name of the high schooler who has the greatest number of friends ?",
        "sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the high schooler who has the greatest number of friends ?",
            "sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Return the name of the high school student with the most friends .",
        "sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the name of the high school student with the most friends .",
            "sql": "select highschooler.name group_by friend.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Show the names of high schoolers who have at least 3 friends .",
        "sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Show the names of high schoolers who have at least 3 friends .",
            "sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the names of high schoolers who have 3 or more friends ?",
        "sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of high schoolers who have 3 or more friends ?",
            "sql": "select highschooler.name group_by friend.student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the names of all of the high schooler Kyle 's friends .",
        "sql": "select highschooler.name where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "Show the names of all of the high schooler Kyle 's friends .",
            "sql": "select highschooler.name where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Return the names of friends of the high school student Kyle .",
        "sql": "select highschooler.name where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "Return the names of friends of the high school student Kyle .",
            "sql": "select highschooler.name where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many friends does the high school student Kyle have ?",
        "sql": "select count ( * ) where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "How many friends does the high school student Kyle have ?",
            "sql": "select count ( * ) where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Count the number of friends Kyle has .",
        "sql": "select count ( * ) where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of friends Kyle has .",
            "sql": "select count ( * ) where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Show ids of all students who do not have any friends .",
        "sql": "select highschooler.id except select friend.student_id"
    },
    "interaction": [
        {
            "utterance": "Show ids of all students who do not have any friends .",
            "sql": "select highschooler.id except select friend.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the ids of high school students who do not have friends ?",
        "sql": "select highschooler.id except select friend.student_id"
    },
    "interaction": [
        {
            "utterance": "What are the ids of high school students who do not have friends ?",
            "sql": "select highschooler.id except select friend.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Show names of all high school students who do not have any friends .",
        "sql": "select highschooler.name except select highschooler.name"
    },
    "interaction": [
        {
            "utterance": "Show names of all high school students who do not have any friends .",
            "sql": "select highschooler.name except select highschooler.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the names of students who have no friends ?",
        "sql": "select highschooler.name except select highschooler.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of students who have no friends ?",
            "sql": "select highschooler.name except select highschooler.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Show the ids of high schoolers who have friends and are also liked by someone else .",
        "sql": "select friend.student_id intersect select likes.liked_id"
    },
    "interaction": [
        {
            "utterance": "Show the ids of high schoolers who have friends and are also liked by someone else .",
            "sql": "select friend.student_id intersect select likes.liked_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the ids of students who both have friends and are liked ?",
        "sql": "select friend.student_id intersect select likes.liked_id"
    },
    "interaction": [
        {
            "utterance": "What are the ids of students who both have friends and are liked ?",
            "sql": "select friend.student_id intersect select likes.liked_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 38,
    "final": {
        "utterance": "Show name of all students who have some friends and also are liked by someone else .",
        "sql": "select highschooler.name intersect select highschooler.name"
    },
    "interaction": [
        {
            "utterance": "Show name of all students who have some friends and also are liked by someone else .",
            "sql": "select highschooler.name intersect select highschooler.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the names of high schoolers who both have friends and are liked ?",
        "sql": "select highschooler.name intersect select highschooler.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of high schoolers who both have friends and are liked ?",
            "sql": "select highschooler.name intersect select highschooler.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Count the number of likes for each student id .",
        "sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id"
    },
    "interaction": [
        {
            "utterance": "Count the number of likes for each student id .",
            "sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 41,
    "final": {
        "utterance": "How many likes correspond to each student id ?",
        "sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id"
    },
    "interaction": [
        {
            "utterance": "How many likes correspond to each student id ?",
            "sql": "select likes.student_id , count ( likes.* ) group_by likes.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Show the names of high schoolers who have likes , and numbers of likes for each .",
        "sql": "select highschooler.name , count ( * ) group_by likes.student_id"
    },
    "interaction": [
        {
            "utterance": "Show the names of high schoolers who have likes , and numbers of likes for each .",
            "sql": "select highschooler.name , count ( * ) group_by likes.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the names of high schoolers who have likes , and how many likes does each have ?",
        "sql": "select highschooler.name , count ( * ) group_by likes.student_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of high schoolers who have likes , and how many likes does each have ?",
            "sql": "select highschooler.name , count ( * ) group_by likes.student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What is the name of the high schooler who has the greatest number of likes ?",
        "sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the high schooler who has the greatest number of likes ?",
            "sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 45,
    "final": {
        "utterance": "Give the name of the student with the most likes .",
        "sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the name of the student with the most likes .",
            "sql": "select highschooler.name group_by likes.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 46,
    "final": {
        "utterance": "Show the names of students who have at least 2 likes .",
        "sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Show the names of students who have at least 2 likes .",
            "sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 47,
    "final": {
        "utterance": "What are the names of students who have 2 or more likes ?",
        "sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of students who have 2 or more likes ?",
            "sql": "select highschooler.name group_by likes.student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 48,
    "final": {
        "utterance": "Show the names of students who have a grade higher than 5 and have at least 2 friends .",
        "sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Show the names of students who have a grade higher than 5 and have at least 2 friends .",
            "sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 49,
    "final": {
        "utterance": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends ?",
        "sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends ?",
            "sql": "select highschooler.name where highschooler.grade > value group_by friend.student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 50,
    "final": {
        "utterance": "How many likes does Kyle have ?",
        "sql": "select count ( * ) where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "How many likes does Kyle have ?",
            "sql": "select count ( * ) where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 51,
    "final": {
        "utterance": "Return the number of likes that the high schooler named Kyle has .",
        "sql": "select count ( * ) where highschooler.name = value"
    },
    "interaction": [
        {
            "utterance": "Return the number of likes that the high schooler named Kyle has .",
            "sql": "select count ( * ) where highschooler.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 52,
    "final": {
        "utterance": "Find the average grade of all students who have some friends .",
        "sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )"
    },
    "interaction": [
        {
            "utterance": "Find the average grade of all students who have some friends .",
            "sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 53,
    "final": {
        "utterance": "What is the average grade of students who have friends ?",
        "sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )"
    },
    "interaction": [
        {
            "utterance": "What is the average grade of students who have friends ?",
            "sql": "select avg ( highschooler.grade ) where highschooler.id in ( select friend.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 54,
    "final": {
        "utterance": "Find the minimum grade of students who have no friends .",
        "sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )"
    },
    "interaction": [
        {
            "utterance": "Find the minimum grade of students who have no friends .",
            "sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 55,
    "final": {
        "utterance": "What is the lowest grade of students who do not have any friends ?",
        "sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )"
    },
    "interaction": [
        {
            "utterance": "What is the lowest grade of students who do not have any friends ?",
            "sql": "select min ( highschooler.grade ) where highschooler.id not in ( select friend.student_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 0,
    "final": {
        "utterance": "How many poker players are there ?",
        "sql": "select count ( poker_player.* )"
    },
    "interaction": [
        {
            "utterance": "How many poker players are there ?",
            "sql": "select count ( poker_player.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 1,
    "final": {
        "utterance": "Count the number of poker players .",
        "sql": "select count ( poker_player.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of poker players .",
            "sql": "select count ( poker_player.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 2,
    "final": {
        "utterance": "List the earnings of poker players in descending order .",
        "sql": "select poker_player.earnings order_by poker_player.earnings desc"
    },
    "interaction": [
        {
            "utterance": "List the earnings of poker players in descending order .",
            "sql": "select poker_player.earnings order_by poker_player.earnings desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the earnings of poker players , ordered descending by value ?",
        "sql": "select poker_player.earnings order_by poker_player.earnings desc"
    },
    "interaction": [
        {
            "utterance": "What are the earnings of poker players , ordered descending by value ?",
            "sql": "select poker_player.earnings order_by poker_player.earnings desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 4,
    "final": {
        "utterance": "List the final tables made and the best finishes of poker players .",
        "sql": "select poker_player.final_table_made , poker_player.best_finish"
    },
    "interaction": [
        {
            "utterance": "List the final tables made and the best finishes of poker players .",
            "sql": "select poker_player.final_table_made , poker_player.best_finish"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the final tables made and best finishes for all poker players ?",
        "sql": "select poker_player.final_table_made , poker_player.best_finish"
    },
    "interaction": [
        {
            "utterance": "What are the final tables made and best finishes for all poker players ?",
            "sql": "select poker_player.final_table_made , poker_player.best_finish"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the average earnings of poker players ?",
        "sql": "select avg ( poker_player.earnings )"
    },
    "interaction": [
        {
            "utterance": "What is the average earnings of poker players ?",
            "sql": "select avg ( poker_player.earnings )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 7,
    "final": {
        "utterance": "Return the average earnings across all poker players .",
        "sql": "select avg ( poker_player.earnings )"
    },
    "interaction": [
        {
            "utterance": "Return the average earnings across all poker players .",
            "sql": "select avg ( poker_player.earnings )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the money rank of the poker player with the highest earnings ?",
        "sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the money rank of the poker player with the highest earnings ?",
            "sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 9,
    "final": {
        "utterance": "Return the money rank of the player with the greatest earnings .",
        "sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the money rank of the player with the greatest earnings .",
            "sql": "select poker_player.money_rank order_by poker_player.earnings desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the maximum number of final tables made among poker players with earnings less than 200000 ?",
        "sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value"
    },
    "interaction": [
        {
            "utterance": "What is the maximum number of final tables made among poker players with earnings less than 200000 ?",
            "sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the maximum final tables made across all poker players who have earnings below 200000 .",
        "sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value"
    },
    "interaction": [
        {
            "utterance": "Return the maximum final tables made across all poker players who have earnings below 200000 .",
            "sql": "select max ( poker_player.final_table_made ) where poker_player.earnings < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the names of poker players ?",
        "sql": "select people.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of poker players ?",
            "sql": "select people.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 13,
    "final": {
        "utterance": "Return the names of all the poker players .",
        "sql": "select people.name"
    },
    "interaction": [
        {
            "utterance": "Return the names of all the poker players .",
            "sql": "select people.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the names of poker players whose earnings is higher than 300000 ?",
        "sql": "select people.name where poker_player.earnings > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of poker players whose earnings is higher than 300000 ?",
            "sql": "select people.name where poker_player.earnings > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 15,
    "final": {
        "utterance": "Give the names of poker players who have earnings above 300000 .",
        "sql": "select people.name where poker_player.earnings > value"
    },
    "interaction": [
        {
            "utterance": "Give the names of poker players who have earnings above 300000 .",
            "sql": "select people.name where poker_player.earnings > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 16,
    "final": {
        "utterance": "List the names of poker players ordered by the final tables made in ascending order .",
        "sql": "select people.name order_by poker_player.final_table_made"
    },
    "interaction": [
        {
            "utterance": "List the names of poker players ordered by the final tables made in ascending order .",
            "sql": "select people.name order_by poker_player.final_table_made"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the names of poker players , ordered ascending by the number of final tables they have made ?",
        "sql": "select people.name order_by poker_player.final_table_made"
    },
    "interaction": [
        {
            "utterance": "What are the names of poker players , ordered ascending by the number of final tables they have made ?",
            "sql": "select people.name order_by poker_player.final_table_made"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the birth date of the poker player with the lowest earnings ?",
        "sql": "select people.birth_date order_by poker_player.earnings asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the birth date of the poker player with the lowest earnings ?",
            "sql": "select people.birth_date order_by poker_player.earnings asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 19,
    "final": {
        "utterance": "Return the birth date of the poker player with the lowest earnings .",
        "sql": "select people.birth_date order_by poker_player.earnings asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the birth date of the poker player with the lowest earnings .",
            "sql": "select people.birth_date order_by poker_player.earnings asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the money rank of the tallest poker player ?",
        "sql": "select poker_player.money_rank order_by people.height desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the money rank of the tallest poker player ?",
            "sql": "select poker_player.money_rank order_by people.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 21,
    "final": {
        "utterance": "Return the money rank of the poker player with the greatest height .",
        "sql": "select poker_player.money_rank order_by people.height desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the money rank of the poker player with the greatest height .",
            "sql": "select poker_player.money_rank order_by people.height desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the average earnings of poker players with height higher than 200 ?",
        "sql": "select avg ( poker_player.earnings ) where people.height > value"
    },
    "interaction": [
        {
            "utterance": "What is the average earnings of poker players with height higher than 200 ?",
            "sql": "select avg ( poker_player.earnings ) where people.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 23,
    "final": {
        "utterance": "Give average earnings of poker players who are taller than 200 .",
        "sql": "select avg ( poker_player.earnings ) where people.height > value"
    },
    "interaction": [
        {
            "utterance": "Give average earnings of poker players who are taller than 200 .",
            "sql": "select avg ( poker_player.earnings ) where people.height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 24,
    "final": {
        "utterance": "What are the names of poker players in descending order of earnings ?",
        "sql": "select people.name order_by poker_player.earnings desc"
    },
    "interaction": [
        {
            "utterance": "What are the names of poker players in descending order of earnings ?",
            "sql": "select people.name order_by poker_player.earnings desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 25,
    "final": {
        "utterance": "Return the names of poker players sorted by their earnings descending .",
        "sql": "select people.name order_by poker_player.earnings desc"
    },
    "interaction": [
        {
            "utterance": "Return the names of poker players sorted by their earnings descending .",
            "sql": "select people.name order_by poker_player.earnings desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 26,
    "final": {
        "utterance": "What are different nationalities of people and the corresponding number of people from each nation ?",
        "sql": "select people.nationality , count ( people.* ) group_by people.nationality"
    },
    "interaction": [
        {
            "utterance": "What are different nationalities of people and the corresponding number of people from each nation ?",
            "sql": "select people.nationality , count ( people.* ) group_by people.nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 27,
    "final": {
        "utterance": "How many people are there of each nationality ?",
        "sql": "select people.nationality , count ( people.* ) group_by people.nationality"
    },
    "interaction": [
        {
            "utterance": "How many people are there of each nationality ?",
            "sql": "select people.nationality , count ( people.* ) group_by people.nationality"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 28,
    "final": {
        "utterance": "What is the most common nationality of people ?",
        "sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the most common nationality of people ?",
            "sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 29,
    "final": {
        "utterance": "Give the nationality that is most common across all people .",
        "sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the nationality that is most common across all people .",
            "sql": "select people.nationality group_by people.nationality order_by count ( people.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 30,
    "final": {
        "utterance": "What are the nationalities that are shared by at least two people ?",
        "sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the nationalities that are shared by at least two people ?",
            "sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 31,
    "final": {
        "utterance": "Return the nationalities for which there are two or more people .",
        "sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "Return the nationalities for which there are two or more people .",
            "sql": "select people.nationality group_by people.nationality having count ( people.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 32,
    "final": {
        "utterance": "List the names and birth dates of people in ascending alphabetical order of name .",
        "sql": "select people.name , people.birth_date order_by people.name asc"
    },
    "interaction": [
        {
            "utterance": "List the names and birth dates of people in ascending alphabetical order of name .",
            "sql": "select people.name , people.birth_date order_by people.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the names and birth dates of people , ordered by their names in alphabetical order ?",
        "sql": "select people.name , people.birth_date order_by people.name asc"
    },
    "interaction": [
        {
            "utterance": "What are the names and birth dates of people , ordered by their names in alphabetical order ?",
            "sql": "select people.name , people.birth_date order_by people.name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 34,
    "final": {
        "utterance": "Show names of people whose nationality is not `` Russia '' .",
        "sql": "select people.name where people.nationality != value"
    },
    "interaction": [
        {
            "utterance": "Show names of people whose nationality is not `` Russia '' .",
            "sql": "select people.name where people.nationality != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the names of people who are not from Russia ?",
        "sql": "select people.name where people.nationality != value"
    },
    "interaction": [
        {
            "utterance": "What are the names of people who are not from Russia ?",
            "sql": "select people.name where people.nationality != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 36,
    "final": {
        "utterance": "List the names of people that are not poker players .",
        "sql": "select people.name where people.people_id not in ( select poker_player.people_id )"
    },
    "interaction": [
        {
            "utterance": "List the names of people that are not poker players .",
            "sql": "select people.name where people.people_id not in ( select poker_player.people_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the names of people who do not play poker ?",
        "sql": "select people.name where people.people_id not in ( select poker_player.people_id )"
    },
    "interaction": [
        {
            "utterance": "What are the names of people who do not play poker ?",
            "sql": "select people.name where people.people_id not in ( select poker_player.people_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 38,
    "final": {
        "utterance": "How many distinct nationalities are there ?",
        "sql": "select count ( distinct people.nationality )"
    },
    "interaction": [
        {
            "utterance": "How many distinct nationalities are there ?",
            "sql": "select count ( distinct people.nationality )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 39,
    "final": {
        "utterance": "Count the number of different nationalities .",
        "sql": "select count ( distinct people.nationality )"
    },
    "interaction": [
        {
            "utterance": "Count the number of different nationalities .",
            "sql": "select count ( distinct people.nationality )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 0,
    "final": {
        "utterance": "How many visitors below age 30 are there ?",
        "sql": "select count ( visitor.* ) where visitor.age < value"
    },
    "interaction": [
        {
            "utterance": "How many visitors below age 30 are there ?",
            "sql": "select count ( visitor.* ) where visitor.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the names of the visitors whose membership level is higher than 4 , and order the results by the level from high to low .",
        "sql": "select visitor.name where visitor.level_of_membership > value order_by visitor.level_of_membership desc"
    },
    "interaction": [
        {
            "utterance": "Find the names of the visitors whose membership level is higher than 4 , and order the results by the level from high to low .",
            "sql": "select visitor.name where visitor.level_of_membership > value order_by visitor.level_of_membership desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the average age of the visitors whose membership level is not higher than 4 ?",
        "sql": "select avg ( visitor.age ) where visitor.level_of_membership < = value"
    },
    "interaction": [
        {
            "utterance": "What is the average age of the visitors whose membership level is not higher than 4 ?",
            "sql": "select avg ( visitor.age ) where visitor.level_of_membership < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4 , and sort by their age from old to young .",
        "sql": "select visitor.name , visitor.level_of_membership where visitor.level_of_membership > value order_by visitor.age desc"
    },
    "interaction": [
        {
            "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4 , and sort by their age from old to young .",
            "sql": "select visitor.name , visitor.level_of_membership where visitor.level_of_membership > value order_by visitor.age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the id and name of the museum that has the most staff members ?",
        "sql": "select museum.museum_id , museum.name order_by museum.num_of_staff desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the id and name of the museum that has the most staff members ?",
            "sql": "select museum.museum_id , museum.name order_by museum.num_of_staff desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the average number of staff working for the museums that were open before 2009 .",
        "sql": "select avg ( museum.num_of_staff ) where museum.open_year < value"
    },
    "interaction": [
        {
            "utterance": "Find the average number of staff working for the museums that were open before 2009 .",
            "sql": "select avg ( museum.num_of_staff ) where museum.open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the opening year and staff number of the museum named Plaza Museum ?",
        "sql": "select museum.num_of_staff , museum.open_year where museum.name = value"
    },
    "interaction": [
        {
            "utterance": "What are the opening year and staff number of the museum named Plaza Museum ?",
            "sql": "select museum.num_of_staff , museum.open_year where museum.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 7,
    "final": {
        "utterance": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010 .",
        "sql": "select museum.name where museum.num_of_staff > ( select min ( museum.num_of_staff ) where museum.open_year > value )"
    },
    "interaction": [
        {
            "utterance": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010 .",
            "sql": "select museum.name where museum.num_of_staff > ( select min ( museum.num_of_staff ) where museum.open_year > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 8,
    "final": {
        "utterance": "find the id , name and age for visitors who visited some museums more than once .",
        "sql": "select visitor.id , visitor.name , visitor.age group_by visitor.id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "find the id , name and age for visitors who visited some museums more than once .",
            "sql": "select visitor.id , visitor.name , visitor.age group_by visitor.id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the id , name and membership level of visitors who have spent the largest amount of money in total in all museum tickets ?",
        "sql": "select visit.visitor_id , visitor.name , visitor.level_of_membership group_by visit.visitor_id order_by sum ( visit.total_spent ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the id , name and membership level of visitors who have spent the largest amount of money in total in all museum tickets ?",
            "sql": "select visit.visitor_id , visitor.name , visitor.level_of_membership group_by visit.visitor_id order_by sum ( visit.total_spent ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the id and name of the museum visited most times ?",
        "sql": "select visit.museum_id , museum.name group_by visit.museum_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the id and name of the museum visited most times ?",
            "sql": "select visit.museum_id , museum.name group_by visit.museum_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name of the museum that had no visitor yet ?",
        "sql": "select museum.name where museum.museum_id not in ( select visit.museum_id )"
    },
    "interaction": [
        {
            "utterance": "What is the name of the museum that had no visitor yet ?",
            "sql": "select museum.name where museum.museum_id not in ( select visit.museum_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name and age of the visitor who bought the most tickets at once .",
        "sql": "select visitor.name , visitor.age order_by visit.num_of_ticket desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the name and age of the visitor who bought the most tickets at once .",
            "sql": "select visitor.name , visitor.age order_by visit.num_of_ticket desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the average and maximum number of tickets bought in all visits ?",
        "sql": "select avg ( visit.num_of_ticket ) , max ( visit.num_of_ticket )"
    },
    "interaction": [
        {
            "utterance": "What are the average and maximum number of tickets bought in all visits ?",
            "sql": "select avg ( visit.num_of_ticket ) , max ( visit.num_of_ticket )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the total ticket expense of the visitors whose membership level is 1 ?",
        "sql": "select sum ( visit.total_spent ) where visitor.level_of_membership = value"
    },
    "interaction": [
        {
            "utterance": "What is the total ticket expense of the visitors whose membership level is 1 ?",
            "sql": "select sum ( visit.total_spent ) where visitor.level_of_membership = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011 ?",
        "sql": "select visitor.name where museum.open_year < value intersect select visitor.name where museum.open_year > value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011 ?",
            "sql": "select visitor.name where museum.open_year < value intersect select visitor.name where museum.open_year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the number of visitors who did not visit any museum opened after 2010 .",
        "sql": "select count ( visitor.* ) where visitor.id not in ( select visit.visitor_id where museum.open_year > value )"
    },
    "interaction": [
        {
            "utterance": "Find the number of visitors who did not visit any museum opened after 2010 .",
            "sql": "select count ( visitor.* ) where visitor.id not in ( select visit.visitor_id where museum.open_year > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 17,
    "final": {
        "utterance": "How many museums were opened after 2013 or before 2008 ?",
        "sql": "select count ( museum.* ) where museum.open_year > value or museum.open_year < value"
    },
    "interaction": [
        {
            "utterance": "How many museums were opened after 2013 or before 2008 ?",
            "sql": "select count ( museum.* ) where museum.open_year > value or museum.open_year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 0,
    "final": {
        "utterance": "List the title of all cartoons in alphabetical order .",
        "sql": "select cartoon.title order_by cartoon.title"
    },
    "interaction": [
        {
            "utterance": "List the title of all cartoons in alphabetical order .",
            "sql": "select cartoon.title order_by cartoon.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the titles of the cartoons sorted alphabetically ?",
        "sql": "select cartoon.title order_by cartoon.title"
    },
    "interaction": [
        {
            "utterance": "What are the titles of the cartoons sorted alphabetically ?",
            "sql": "select cartoon.title order_by cartoon.title"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 2,
    "final": {
        "utterance": "List all cartoon directed by `` Ben Jones '' .",
        "sql": "select cartoon.title where cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "List all cartoon directed by `` Ben Jones '' .",
            "sql": "select cartoon.title where cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of all cartoons directed by Ben Jones ?",
        "sql": "select cartoon.title where cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of all cartoons directed by Ben Jones ?",
            "sql": "select cartoon.title where cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 4,
    "final": {
        "utterance": "How many cartoons were written by `` Joseph Kuhr '' ?",
        "sql": "select count ( cartoon.* ) where cartoon.written_by = value"
    },
    "interaction": [
        {
            "utterance": "How many cartoons were written by `` Joseph Kuhr '' ?",
            "sql": "select count ( cartoon.* ) where cartoon.written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the number of cartoones written by Joseph Kuhr ?",
        "sql": "select count ( cartoon.* ) where cartoon.written_by = value"
    },
    "interaction": [
        {
            "utterance": "What is the number of cartoones written by Joseph Kuhr ?",
            "sql": "select count ( cartoon.* ) where cartoon.written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 6,
    "final": {
        "utterance": "list all cartoon titles and their directors ordered by their air date",
        "sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date"
    },
    "interaction": [
        {
            "utterance": "list all cartoon titles and their directors ordered by their air date",
            "sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the name and directors of all the cartoons that are ordered by air date ?",
        "sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date"
    },
    "interaction": [
        {
            "utterance": "What is the name and directors of all the cartoons that are ordered by air date ?",
            "sql": "select cartoon.title , cartoon.directed_by order_by cartoon.original_air_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 8,
    "final": {
        "utterance": "List the title of all cartoon directed by `` Ben Jones '' or `` Brandon Vietti '' .",
        "sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "List the title of all cartoon directed by `` Ben Jones '' or `` Brandon Vietti '' .",
            "sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti ?",
        "sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti ?",
            "sql": "select cartoon.title where cartoon.directed_by = value or cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 10,
    "final": {
        "utterance": "Which country has the most of TV Channels ? List the country and number of TV Channels it has .",
        "sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which country has the most of TV Channels ? List the country and number of TV Channels it has .",
            "sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the country with the most number of TV Channels and how many does it have ?",
        "sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the country with the most number of TV Channels and how many does it have ?",
            "sql": "select tv_channel.country , count ( tv_channel.* ) group_by tv_channel.country order_by count ( tv_channel.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 12,
    "final": {
        "utterance": "List the number of different series names and contents in the TV Channel table .",
        "sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )"
    },
    "interaction": [
        {
            "utterance": "List the number of different series names and contents in the TV Channel table .",
            "sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 13,
    "final": {
        "utterance": "How many different series and contents are listed in the TV Channel table ?",
        "sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )"
    },
    "interaction": [
        {
            "utterance": "How many different series and contents are listed in the TV Channel table ?",
            "sql": "select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the content of TV Channel with serial name `` Sky Radio '' ?",
        "sql": "select tv_channel.content where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the content of TV Channel with serial name `` Sky Radio '' ?",
            "sql": "select tv_channel.content where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the content of the series Sky Radio ?",
        "sql": "select tv_channel.content where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the content of the series Sky Radio ?",
            "sql": "select tv_channel.content where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the Package Option of TV Channel with serial name `` Sky Radio '' ?",
        "sql": "select tv_channel.package_option where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the Package Option of TV Channel with serial name `` Sky Radio '' ?",
            "sql": "select tv_channel.package_option where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the Package Options of the TV Channels whose series names are Sky Radio ?",
        "sql": "select tv_channel.package_option where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the Package Options of the TV Channels whose series names are Sky Radio ?",
            "sql": "select tv_channel.package_option where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 18,
    "final": {
        "utterance": "How many TV Channel using language English ?",
        "sql": "select count ( tv_channel.* ) where tv_channel.language = value"
    },
    "interaction": [
        {
            "utterance": "How many TV Channel using language English ?",
            "sql": "select count ( tv_channel.* ) where tv_channel.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 19,
    "final": {
        "utterance": "How many TV Channels use the English language ?",
        "sql": "select count ( tv_channel.* ) where tv_channel.language = value"
    },
    "interaction": [
        {
            "utterance": "How many TV Channels use the English language ?",
            "sql": "select count ( tv_channel.* ) where tv_channel.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 20,
    "final": {
        "utterance": "List the language used least number of TV Channel . List language and number of TV Channel .",
        "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "List the language used least number of TV Channel . List language and number of TV Channel .",
            "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the languages used by the least number of TV Channels and how many channels use it ?",
        "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the languages used by the least number of TV Channels and how many channels use it ?",
            "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language order_by count ( tv_channel.* ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 22,
    "final": {
        "utterance": "List each language and the number of TV Channels using it .",
        "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language"
    },
    "interaction": [
        {
            "utterance": "List each language and the number of TV Channels using it .",
            "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 23,
    "final": {
        "utterance": "For each language , list the number of TV Channels that use it .",
        "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language"
    },
    "interaction": [
        {
            "utterance": "For each language , list the number of TV Channels that use it .",
            "sql": "select tv_channel.language , count ( tv_channel.* ) group_by tv_channel.language"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the TV Channel that shows the cartoon `` The Rise of the Blue Beetle ! '' ? List the TV Channel 's series name .",
        "sql": "select tv_channel.series_name where cartoon.title = value"
    },
    "interaction": [
        {
            "utterance": "What is the TV Channel that shows the cartoon `` The Rise of the Blue Beetle ! '' ? List the TV Channel 's series name .",
            "sql": "select tv_channel.series_name where cartoon.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the series name of the TV Channel that shows the cartoon `` The Rise of the Blue Beetle '' ?",
        "sql": "select tv_channel.series_name where cartoon.title = value"
    },
    "interaction": [
        {
            "utterance": "What is the series name of the TV Channel that shows the cartoon `` The Rise of the Blue Beetle '' ?",
            "sql": "select tv_channel.series_name where cartoon.title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 26,
    "final": {
        "utterance": "List the title of all Cartoons showed on TV Channel with series name `` Sky Radio '' .",
        "sql": "select cartoon.title where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "List the title of all Cartoons showed on TV Channel with series name `` Sky Radio '' .",
            "sql": "select cartoon.title where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the title of all the cartools that are on the TV Channel with the series name `` Sky Radio '' ?",
        "sql": "select cartoon.title where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the title of all the cartools that are on the TV Channel with the series name `` Sky Radio '' ?",
            "sql": "select cartoon.title where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 28,
    "final": {
        "utterance": "List the Episode of all TV series sorted by rating .",
        "sql": "select tv_series.episode order_by tv_series.rating"
    },
    "interaction": [
        {
            "utterance": "List the Episode of all TV series sorted by rating .",
            "sql": "select tv_series.episode order_by tv_series.rating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 29,
    "final": {
        "utterance": "What are all of the episodes ordered by ratings ?",
        "sql": "select tv_series.episode order_by tv_series.rating"
    },
    "interaction": [
        {
            "utterance": "What are all of the episodes ordered by ratings ?",
            "sql": "select tv_series.episode order_by tv_series.rating"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 30,
    "final": {
        "utterance": "List top 3 highest Rating TV series . List the TV series 's Episode and Rating .",
        "sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value"
    },
    "interaction": [
        {
            "utterance": "List top 3 highest Rating TV series . List the TV series 's Episode and Rating .",
            "sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 31,
    "final": {
        "utterance": "What are 3 most highly rated episodes in the TV series table and what were those ratings ?",
        "sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are 3 most highly rated episodes in the TV series table and what were those ratings ?",
            "sql": "select tv_series.episode , tv_series.rating order_by tv_series.rating desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 32,
    "final": {
        "utterance": "What is minimum and maximum share of TV series ?",
        "sql": "select max ( tv_series.share ) , min ( tv_series.share )"
    },
    "interaction": [
        {
            "utterance": "What is minimum and maximum share of TV series ?",
            "sql": "select max ( tv_series.share ) , min ( tv_series.share )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the maximum and minimum share for the TV series ?",
        "sql": "select max ( tv_series.share ) , min ( tv_series.share )"
    },
    "interaction": [
        {
            "utterance": "What is the maximum and minimum share for the TV series ?",
            "sql": "select max ( tv_series.share ) , min ( tv_series.share )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the air date of TV series with Episode `` A Love of a Lifetime '' ?",
        "sql": "select tv_series.air_date where tv_series.episode = value"
    },
    "interaction": [
        {
            "utterance": "What is the air date of TV series with Episode `` A Love of a Lifetime '' ?",
            "sql": "select tv_series.air_date where tv_series.episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 35,
    "final": {
        "utterance": "When did the episode `` A Love of a Lifetime '' air ?",
        "sql": "select tv_series.air_date where tv_series.episode = value"
    },
    "interaction": [
        {
            "utterance": "When did the episode `` A Love of a Lifetime '' air ?",
            "sql": "select tv_series.air_date where tv_series.episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 36,
    "final": {
        "utterance": "What is Weekly Rank of TV series with Episode `` A Love of a Lifetime '' ?",
        "sql": "select tv_series.weekly_rank where tv_series.episode = value"
    },
    "interaction": [
        {
            "utterance": "What is Weekly Rank of TV series with Episode `` A Love of a Lifetime '' ?",
            "sql": "select tv_series.weekly_rank where tv_series.episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the weekly rank for the episode `` A Love of a Lifetime '' ?",
        "sql": "select tv_series.weekly_rank where tv_series.episode = value"
    },
    "interaction": [
        {
            "utterance": "What is the weekly rank for the episode `` A Love of a Lifetime '' ?",
            "sql": "select tv_series.weekly_rank where tv_series.episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the TV Channel of TV series with Episode `` A Love of a Lifetime '' ? List the TV Channel 's series name .",
        "sql": "select tv_channel.series_name where tv_series.episode = value"
    },
    "interaction": [
        {
            "utterance": "What is the TV Channel of TV series with Episode `` A Love of a Lifetime '' ? List the TV Channel 's series name .",
            "sql": "select tv_channel.series_name where tv_series.episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the name of the series that has the episode `` A Love of a Lifetime '' ?",
        "sql": "select tv_channel.series_name where tv_series.episode = value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the series that has the episode `` A Love of a Lifetime '' ?",
            "sql": "select tv_channel.series_name where tv_series.episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 40,
    "final": {
        "utterance": "List the Episode of all TV series showed on TV Channel with series name `` Sky Radio '' .",
        "sql": "select tv_series.episode where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "List the Episode of all TV series showed on TV Channel with series name `` Sky Radio '' .",
            "sql": "select tv_series.episode where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 41,
    "final": {
        "utterance": "What is the episode for the TV series named `` Sky Radio '' ?",
        "sql": "select tv_series.episode where tv_channel.series_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the episode for the TV series named `` Sky Radio '' ?",
            "sql": "select tv_series.episode where tv_channel.series_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the number of cartoons directed by each of the listed directors .",
        "sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by"
    },
    "interaction": [
        {
            "utterance": "Find the number of cartoons directed by each of the listed directors .",
            "sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 43,
    "final": {
        "utterance": "How many cartoons did each director create ?",
        "sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by"
    },
    "interaction": [
        {
            "utterance": "How many cartoons did each director create ?",
            "sql": "select count ( cartoon.* ) , cartoon.directed_by group_by cartoon.directed_by"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 44,
    "final": {
        "utterance": "Find the production code and channel of the most recently aired cartoon .",
        "sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the production code and channel of the most recently aired cartoon .",
            "sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 45,
    "final": {
        "utterance": "What is the produdction code and channel of the most recent cartoon ?",
        "sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the produdction code and channel of the most recent cartoon ?",
            "sql": "select cartoon.production_code , cartoon.channel order_by cartoon.original_air_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 46,
    "final": {
        "utterance": "Find the package choice and series name of the TV channel that has high definition TV .",
        "sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value"
    },
    "interaction": [
        {
            "utterance": "Find the package choice and series name of the TV channel that has high definition TV .",
            "sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 47,
    "final": {
        "utterance": "What are the package options and the name of the series for the TV Channel that supports high definition TV ?",
        "sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value"
    },
    "interaction": [
        {
            "utterance": "What are the package options and the name of the series for the TV Channel that supports high definition TV ?",
            "sql": "select tv_channel.package_option , tv_channel.series_name where tv_channel.hight_definition_tv = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 48,
    "final": {
        "utterance": "which countries ' tv channels are playing some cartoon written by Todd Casey ?",
        "sql": "select tv_channel.country where cartoon.written_by = value"
    },
    "interaction": [
        {
            "utterance": "which countries ' tv channels are playing some cartoon written by Todd Casey ?",
            "sql": "select tv_channel.country where cartoon.written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 49,
    "final": {
        "utterance": "What are the countries that have cartoons on TV that were written by Todd Casey ?",
        "sql": "select tv_channel.country where cartoon.written_by = value"
    },
    "interaction": [
        {
            "utterance": "What are the countries that have cartoons on TV that were written by Todd Casey ?",
            "sql": "select tv_channel.country where cartoon.written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 50,
    "final": {
        "utterance": "which countries ' tv channels are not playing any cartoon written by Todd Casey ?",
        "sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value"
    },
    "interaction": [
        {
            "utterance": "which countries ' tv channels are not playing any cartoon written by Todd Casey ?",
            "sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 51,
    "final": {
        "utterance": "What are the countries that are not playing cartoons written by Todd Casey ?",
        "sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value"
    },
    "interaction": [
        {
            "utterance": "What are the countries that are not playing cartoons written by Todd Casey ?",
            "sql": "select tv_channel.country except select tv_channel.country where cartoon.written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 52,
    "final": {
        "utterance": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang ?",
        "sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang ?",
            "sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 53,
    "final": {
        "utterance": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang ?",
        "sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang ?",
            "sql": "select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value intersect select tv_channel.series_name , tv_channel.country where cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 54,
    "final": {
        "utterance": "find the pixel aspect ratio and nation of the tv channels that do not use English .",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value"
    },
    "interaction": [
        {
            "utterance": "find the pixel aspect ratio and nation of the tv channels that do not use English .",
            "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 55,
    "final": {
        "utterance": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English ?",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value"
    },
    "interaction": [
        {
            "utterance": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English ?",
            "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country where tv_channel.language != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 56,
    "final": {
        "utterance": "find id of the tv channels that from the countries where have more than two tv channels .",
        "sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value"
    },
    "interaction": [
        {
            "utterance": "find id of the tv channels that from the countries where have more than two tv channels .",
            "sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 57,
    "final": {
        "utterance": "What are the ids of all tv channels that have more than 2 TV channels ?",
        "sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the ids of all tv channels that have more than 2 TV channels ?",
            "sql": "select tv_channel.id group_by tv_channel.country having count ( tv_channel.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 58,
    "final": {
        "utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones .",
        "sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones .",
            "sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 59,
    "final": {
        "utterance": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones ?",
        "sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value"
    },
    "interaction": [
        {
            "utterance": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones ?",
            "sql": "select tv_channel.id except select cartoon.channel where cartoon.directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 60,
    "final": {
        "utterance": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones .",
        "sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )"
    },
    "interaction": [
        {
            "utterance": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones .",
            "sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 61,
    "final": {
        "utterance": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones ?",
        "sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )"
    },
    "interaction": [
        {
            "utterance": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones ?",
            "sql": "select tv_channel.package_option where tv_channel.id not in ( select cartoon.channel where cartoon.directed_by = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the number of pets whose weight is heavier than 10 .",
        "sql": "select count ( pets.* ) where pets.weight > value"
    },
    "interaction": [
        {
            "utterance": "Find the number of pets whose weight is heavier than 10 .",
            "sql": "select count ( pets.* ) where pets.weight > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many pets have a greater weight than 10 ?",
        "sql": "select count ( pets.* ) where pets.weight > value"
    },
    "interaction": [
        {
            "utterance": "How many pets have a greater weight than 10 ?",
            "sql": "select count ( pets.* ) where pets.weight > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the weight of the youngest dog .",
        "sql": "select pets.weight order_by pets.pet_age limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the weight of the youngest dog .",
            "sql": "select pets.weight order_by pets.pet_age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How much does the youngest dog weigh ?",
        "sql": "select pets.weight order_by pets.pet_age limit_value"
    },
    "interaction": [
        {
            "utterance": "How much does the youngest dog weigh ?",
            "sql": "select pets.weight order_by pets.pet_age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the maximum weight for each type of pet . List the maximum weight and pet type .",
        "sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype"
    },
    "interaction": [
        {
            "utterance": "Find the maximum weight for each type of pet . List the maximum weight and pet type .",
            "sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 5,
    "final": {
        "utterance": "List the maximum weight and type for each type of pet .",
        "sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype"
    },
    "interaction": [
        {
            "utterance": "List the maximum weight and type for each type of pet .",
            "sql": "select max ( pets.weight ) , pets.pettype group_by pets.pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find number of pets owned by students who are older than 20 .",
        "sql": "select count ( * ) where student.age > value"
    },
    "interaction": [
        {
            "utterance": "Find number of pets owned by students who are older than 20 .",
            "sql": "select count ( * ) where student.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many pets are owned by students that have an age greater than 20 ?",
        "sql": "select count ( * ) where student.age > value"
    },
    "interaction": [
        {
            "utterance": "How many pets are owned by students that have an age greater than 20 ?",
            "sql": "select count ( * ) where student.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of dog pets that are raised by female students ( with sex F ) .",
        "sql": "select count ( * ) where student.sex = value and pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "Find the number of dog pets that are raised by female students ( with sex F ) .",
            "sql": "select count ( * ) where student.sex = value and pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many dog pets are raised by female students ?",
        "sql": "select count ( * ) where student.sex = value and pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "How many dog pets are raised by female students ?",
            "sql": "select count ( * ) where student.sex = value and pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the number of distinct type of pets .",
        "sql": "select count ( distinct pets.pettype )"
    },
    "interaction": [
        {
            "utterance": "Find the number of distinct type of pets .",
            "sql": "select count ( distinct pets.pettype )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 11,
    "final": {
        "utterance": "How many different types of pet are there ?",
        "sql": "select count ( distinct pets.pettype )"
    },
    "interaction": [
        {
            "utterance": "How many different types of pet are there ?",
            "sql": "select count ( distinct pets.pettype )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the first name of students who have cat or dog pet .",
        "sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "Find the first name of students who have cat or dog pet .",
            "sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the first names of every student who has a cat or dog as a pet ?",
        "sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "What are the first names of every student who has a cat or dog as a pet ?",
            "sql": "select distinct student.fname where pets.pettype = value or pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the name of students who have both cat and dog pets .",
        "sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "Find the name of students who have both cat and dog pets .",
            "sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the students ' first names who have both cats and dogs as pets ?",
        "sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "What are the students ' first names who have both cats and dogs as pets ?",
            "sql": "select student.fname where pets.pettype = value intersect select student.fname where pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the major and age of students who do not have a cat pet .",
        "sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )"
    },
    "interaction": [
        {
            "utterance": "Find the major and age of students who do not have a cat pet .",
            "sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What major is every student who does not own a cat as a pet , and also how old are they ?",
        "sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )"
    },
    "interaction": [
        {
            "utterance": "What major is every student who does not own a cat as a pet , and also how old are they ?",
            "sql": "select student.major , student.age where student.stuid not in ( select student.stuid where pets.pettype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 18,
    "final": {
        "utterance": "Find the id of students who do not have a cat pet .",
        "sql": "select student.stuid except select student.stuid where pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "Find the id of students who do not have a cat pet .",
            "sql": "select student.stuid except select student.stuid where pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the ids of the students who do not own cats as pets ?",
        "sql": "select student.stuid except select student.stuid where pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "What are the ids of the students who do not own cats as pets ?",
            "sql": "select student.stuid except select student.stuid where pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the first name and age of students who have a dog but do not have a cat as a pet .",
        "sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )"
    },
    "interaction": [
        {
            "utterance": "Find the first name and age of students who have a dog but do not have a cat as a pet .",
            "sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the first name of every student who has a dog but does not have a cat ?",
        "sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )"
    },
    "interaction": [
        {
            "utterance": "What is the first name of every student who has a dog but does not have a cat ?",
            "sql": "select student.fname , student.age where pets.pettype = value and student.stuid not in ( select student.stuid where pets.pettype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the type and weight of the youngest pet .",
        "sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the type and weight of the youngest pet .",
            "sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What type of pet is the youngest animal , and how much does it weigh ?",
        "sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value"
    },
    "interaction": [
        {
            "utterance": "What type of pet is the youngest animal , and how much does it weigh ?",
            "sql": "select pets.pettype , pets.weight order_by pets.pet_age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the id and weight of all pets whose age is older than 1 .",
        "sql": "select pets.petid , pets.weight where pets.pet_age > value"
    },
    "interaction": [
        {
            "utterance": "Find the id and weight of all pets whose age is older than 1 .",
            "sql": "select pets.petid , pets.weight where pets.pet_age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the id and weight of every pet who is older than 1 ?",
        "sql": "select pets.petid , pets.weight where pets.pet_age > value"
    },
    "interaction": [
        {
            "utterance": "What is the id and weight of every pet who is older than 1 ?",
            "sql": "select pets.petid , pets.weight where pets.pet_age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the average and maximum age for each type of pet .",
        "sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype"
    },
    "interaction": [
        {
            "utterance": "Find the average and maximum age for each type of pet .",
            "sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the average and maximum age for each pet type ?",
        "sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype"
    },
    "interaction": [
        {
            "utterance": "What is the average and maximum age for each pet type ?",
            "sql": "select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pettype group_by pets.pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the average weight for each pet type .",
        "sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype"
    },
    "interaction": [
        {
            "utterance": "Find the average weight for each pet type .",
            "sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the average weight for each type of pet ?",
        "sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype"
    },
    "interaction": [
        {
            "utterance": "What is the average weight for each type of pet ?",
            "sql": "select avg ( pets.weight ) , pets.pettype group_by pets.pettype"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the first name and age of students who have a pet .",
        "sql": "select distinct student.fname , student.age"
    },
    "interaction": [
        {
            "utterance": "Find the first name and age of students who have a pet .",
            "sql": "select distinct student.fname , student.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What are the different first names and ages of the students who do have pets ?",
        "sql": "select distinct student.fname , student.age"
    },
    "interaction": [
        {
            "utterance": "What are the different first names and ages of the students who do have pets ?",
            "sql": "select distinct student.fname , student.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019 .",
        "sql": "select has_pet.petid where student.lname = value"
    },
    "interaction": [
        {
            "utterance": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019 .",
            "sql": "select has_pet.petid where student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the id of the pet owned by the student whose last name is 'Smith ' ?",
        "sql": "select has_pet.petid where student.lname = value"
    },
    "interaction": [
        {
            "utterance": "What is the id of the pet owned by the student whose last name is 'Smith ' ?",
            "sql": "select has_pet.petid where student.lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the number of pets for each student who has any pet and student id .",
        "sql": "select count ( * ) , student.stuid group_by student.stuid"
    },
    "interaction": [
        {
            "utterance": "Find the number of pets for each student who has any pet and student id .",
            "sql": "select count ( * ) , student.stuid group_by student.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 35,
    "final": {
        "utterance": "For students who have pets , how many pets does each student have ?",
        "sql": "select count ( * ) , student.stuid group_by student.stuid"
    },
    "interaction": [
        {
            "utterance": "For students who have pets , how many pets does each student have ?",
            "sql": "select count ( * ) , student.stuid group_by student.stuid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the first name and gender of student who have more than one pet .",
        "sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Find the first name and gender of student who have more than one pet .",
            "sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the first name and gender of the all the students who have more than one pet ?",
        "sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "What is the first name and gender of the all the students who have more than one pet ?",
            "sql": "select student.fname , student.sex group_by student.stuid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 38,
    "final": {
        "utterance": "Find the last name of the student who has a cat that is age 3 .",
        "sql": "select student.lname where pets.pet_age = value and pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "Find the last name of the student who has a cat that is age 3 .",
            "sql": "select student.lname where pets.pet_age = value and pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the last name of the student who has a cat that is 3 years old ?",
        "sql": "select student.lname where pets.pet_age = value and pets.pettype = value"
    },
    "interaction": [
        {
            "utterance": "What is the last name of the student who has a cat that is 3 years old ?",
            "sql": "select student.lname where pets.pet_age = value and pets.pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the average age of students who do not have any pet .",
        "sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )"
    },
    "interaction": [
        {
            "utterance": "Find the average age of students who do not have any pet .",
            "sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 41,
    "final": {
        "utterance": "What is the average age for all students who do not own any pets ?",
        "sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )"
    },
    "interaction": [
        {
            "utterance": "What is the average age for all students who do not own any pets ?",
            "sql": "select avg ( student.age ) where student.stuid not in ( select student.stuid )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 0,
    "final": {
        "utterance": "How many teachers are there ?",
        "sql": "select count ( teacher.* )"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( teacher.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the total count of teachers ?",
        "sql": "select count ( teacher.* )"
    },
    "interaction": [
        {
            "utterance": "What is the total count of teachers ?",
            "sql": "select count ( teacher.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of teachers in ascending order of age .",
        "sql": "select teacher.name order_by teacher.age asc"
    },
    "interaction": [
        {
            "utterance": "List the names of teachers in ascending order of age .",
            "sql": "select teacher.name order_by teacher.age asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of the teachers ordered by ascending age ?",
        "sql": "select teacher.name order_by teacher.age asc"
    },
    "interaction": [
        {
            "utterance": "What are the names of the teachers ordered by ascending age ?",
            "sql": "select teacher.name order_by teacher.age asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the age and hometown of teachers ?",
        "sql": "select teacher.age , teacher.hometown"
    },
    "interaction": [
        {
            "utterance": "What are the age and hometown of teachers ?",
            "sql": "select teacher.age , teacher.hometown"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the age and hometown of every teacher ?",
        "sql": "select teacher.age , teacher.hometown"
    },
    "interaction": [
        {
            "utterance": "What is the age and hometown of every teacher ?",
            "sql": "select teacher.age , teacher.hometown"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 6,
    "final": {
        "utterance": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "sql": "select teacher.name where teacher.hometown != value"
    },
    "interaction": [
        {
            "utterance": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "sql": "select teacher.name where teacher.hometown != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "sql": "select teacher.name where teacher.hometown != value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "sql": "select teacher.name where teacher.hometown != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 8,
    "final": {
        "utterance": "Show the name of teachers aged either 32 or 33 ?",
        "sql": "select teacher.name where teacher.age = value or teacher.age = value"
    },
    "interaction": [
        {
            "utterance": "Show the name of teachers aged either 32 or 33 ?",
            "sql": "select teacher.name where teacher.age = value or teacher.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of the teachers who are aged either 32 or 33 ?",
        "sql": "select teacher.name where teacher.age = value or teacher.age = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the teachers who are aged either 32 or 33 ?",
            "sql": "select teacher.name where teacher.age = value or teacher.age = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the hometown of the youngest teacher ?",
        "sql": "select teacher.hometown order_by teacher.age asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the hometown of the youngest teacher ?",
            "sql": "select teacher.hometown order_by teacher.age asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 11,
    "final": {
        "utterance": "Where is the youngest teacher from ?",
        "sql": "select teacher.hometown order_by teacher.age asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Where is the youngest teacher from ?",
            "sql": "select teacher.hometown order_by teacher.age asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 12,
    "final": {
        "utterance": "Show different hometown of teachers and the number of teachers from each hometown .",
        "sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown"
    },
    "interaction": [
        {
            "utterance": "Show different hometown of teachers and the number of teachers from each hometown .",
            "sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 13,
    "final": {
        "utterance": "For each hometown , how many teachers are there ?",
        "sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown"
    },
    "interaction": [
        {
            "utterance": "For each hometown , how many teachers are there ?",
            "sql": "select teacher.hometown , count ( teacher.* ) group_by teacher.hometown"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 14,
    "final": {
        "utterance": "List the most common hometown of teachers .",
        "sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "List the most common hometown of teachers .",
            "sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the most commmon hometowns for teachers ?",
        "sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the most commmon hometowns for teachers ?",
            "sql": "select teacher.hometown group_by teacher.hometown order_by count ( teacher.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 16,
    "final": {
        "utterance": "Show the hometowns shared by at least two teachers .",
        "sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "Show the hometowns shared by at least two teachers .",
            "sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the towns from which at least two teachers come from ?",
        "sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the towns from which at least two teachers come from ?",
            "sql": "select teacher.hometown group_by teacher.hometown having count ( teacher.* ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 18,
    "final": {
        "utterance": "Show names of teachers and the courses they are arranged to teach .",
        "sql": "select teacher.name , course.course"
    },
    "interaction": [
        {
            "utterance": "Show names of teachers and the courses they are arranged to teach .",
            "sql": "select teacher.name , course.course"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name of each teacher and what course they teach ?",
        "sql": "select teacher.name , course.course"
    },
    "interaction": [
        {
            "utterance": "What is the name of each teacher and what course they teach ?",
            "sql": "select teacher.name , course.course"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 20,
    "final": {
        "utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher 's name .",
        "sql": "select teacher.name , course.course order_by teacher.name"
    },
    "interaction": [
        {
            "utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher 's name .",
            "sql": "select teacher.name , course.course order_by teacher.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher ?",
        "sql": "select teacher.name , course.course order_by teacher.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher ?",
            "sql": "select teacher.name , course.course order_by teacher.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the name of the teacher for the math course .",
        "sql": "select teacher.name where course.course = value"
    },
    "interaction": [
        {
            "utterance": "Show the name of the teacher for the math course .",
            "sql": "select teacher.name where course.course = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the names of the people who teach math courses ?",
        "sql": "select teacher.name where course.course = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the people who teach math courses ?",
            "sql": "select teacher.name where course.course = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 24,
    "final": {
        "utterance": "Show names of teachers and the number of courses they teach .",
        "sql": "select teacher.name , count ( * ) group_by teacher.name"
    },
    "interaction": [
        {
            "utterance": "Show names of teachers and the number of courses they teach .",
            "sql": "select teacher.name , count ( * ) group_by teacher.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the names of the teachers and how many courses do they teach ?",
        "sql": "select teacher.name , count ( * ) group_by teacher.name"
    },
    "interaction": [
        {
            "utterance": "What are the names of the teachers and how many courses do they teach ?",
            "sql": "select teacher.name , count ( * ) group_by teacher.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 26,
    "final": {
        "utterance": "Show names of teachers that teach at least two courses .",
        "sql": "select teacher.name group_by teacher.name having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Show names of teachers that teach at least two courses .",
            "sql": "select teacher.name group_by teacher.name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the names of the teachers who teach at least two courses ?",
        "sql": "select teacher.name group_by teacher.name having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the teachers who teach at least two courses ?",
            "sql": "select teacher.name group_by teacher.name having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 28,
    "final": {
        "utterance": "List the names of teachers who have not been arranged to teach courses .",
        "sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )"
    },
    "interaction": [
        {
            "utterance": "List the names of teachers who have not been arranged to teach courses .",
            "sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the names of the teachers whose courses have not been arranged ?",
        "sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )"
    },
    "interaction": [
        {
            "utterance": "What are the names of the teachers whose courses have not been arranged ?",
            "sql": "select teacher.name where teacher.teacher_id not in ( select course_arrange.teacher_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the total number of players .",
        "sql": "select count ( players.* )"
    },
    "interaction": [
        {
            "utterance": "Find the total number of players .",
            "sql": "select count ( players.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 1,
    "final": {
        "utterance": "How many players are there ?",
        "sql": "select count ( players.* )"
    },
    "interaction": [
        {
            "utterance": "How many players are there ?",
            "sql": "select count ( players.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the total number of matches .",
        "sql": "select count ( matches.* )"
    },
    "interaction": [
        {
            "utterance": "Find the total number of matches .",
            "sql": "select count ( matches.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Count the number of matches .",
        "sql": "select count ( matches.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of matches .",
            "sql": "select count ( matches.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 4,
    "final": {
        "utterance": "List the first name and birth date of all players from the country with code USA .",
        "sql": "select players.first_name , players.birth_date where players.country_code = value"
    },
    "interaction": [
        {
            "utterance": "List the first name and birth date of all players from the country with code USA .",
            "sql": "select players.first_name , players.birth_date where players.country_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the first names and birth dates of players from the USA ?",
        "sql": "select players.first_name , players.birth_date where players.country_code = value"
    },
    "interaction": [
        {
            "utterance": "What are the first names and birth dates of players from the USA ?",
            "sql": "select players.first_name , players.birth_date where players.country_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the average age of losers and winners of all matches .",
        "sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )"
    },
    "interaction": [
        {
            "utterance": "Find the average age of losers and winners of all matches .",
            "sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the average ages of losers and winners across matches ?",
        "sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )"
    },
    "interaction": [
        {
            "utterance": "What are the average ages of losers and winners across matches ?",
            "sql": "select avg ( matches.loser_age ) , avg ( matches.winner_age )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the average rank of winners in all matches .",
        "sql": "select avg ( matches.winner_rank )"
    },
    "interaction": [
        {
            "utterance": "Find the average rank of winners in all matches .",
            "sql": "select avg ( matches.winner_rank )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the average rank for winners in all matches ?",
        "sql": "select avg ( matches.winner_rank )"
    },
    "interaction": [
        {
            "utterance": "What is the average rank for winners in all matches ?",
            "sql": "select avg ( matches.winner_rank )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the highest rank of losers in all matches .",
        "sql": "select min ( matches.loser_rank )"
    },
    "interaction": [
        {
            "utterance": "Find the highest rank of losers in all matches .",
            "sql": "select min ( matches.loser_rank )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the best rank of losers across all matches ?",
        "sql": "select min ( matches.loser_rank )"
    },
    "interaction": [
        {
            "utterance": "What is the best rank of losers across all matches ?",
            "sql": "select min ( matches.loser_rank )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 12,
    "final": {
        "utterance": "find the number of distinct country codes of all players .",
        "sql": "select count ( distinct players.country_code )"
    },
    "interaction": [
        {
            "utterance": "find the number of distinct country codes of all players .",
            "sql": "select count ( distinct players.country_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 13,
    "final": {
        "utterance": "How many distinct countries do players come from ?",
        "sql": "select count ( distinct players.country_code )"
    },
    "interaction": [
        {
            "utterance": "How many distinct countries do players come from ?",
            "sql": "select count ( distinct players.country_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the number of distinct name of losers .",
        "sql": "select count ( distinct matches.loser_name )"
    },
    "interaction": [
        {
            "utterance": "Find the number of distinct name of losers .",
            "sql": "select count ( distinct matches.loser_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 15,
    "final": {
        "utterance": "How many different loser names are there ?",
        "sql": "select count ( distinct matches.loser_name )"
    },
    "interaction": [
        {
            "utterance": "How many different loser names are there ?",
            "sql": "select count ( distinct matches.loser_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the name of tourney that has more than 10 matches .",
        "sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value"
    },
    "interaction": [
        {
            "utterance": "Find the name of tourney that has more than 10 matches .",
            "sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the names of tournaments that have more than 10 matches ?",
        "sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of tournaments that have more than 10 matches ?",
            "sql": "select matches.tourney_name group_by matches.tourney_name having count ( matches.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 18,
    "final": {
        "utterance": "List the names of all winners who played in both 2013 and 2016 .",
        "sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value"
    },
    "interaction": [
        {
            "utterance": "List the names of all winners who played in both 2013 and 2016 .",
            "sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of players who won in both 2013 and 2016 ?",
        "sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of players who won in both 2013 and 2016 ?",
            "sql": "select matches.winner_name where matches.year = value intersect select matches.winner_name where matches.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 20,
    "final": {
        "utterance": "List the number of all matches who played in years of 2013 or 2016 .",
        "sql": "select count ( matches.* ) where matches.year = value or matches.year = value"
    },
    "interaction": [
        {
            "utterance": "List the number of all matches who played in years of 2013 or 2016 .",
            "sql": "select count ( matches.* ) where matches.year = value or matches.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many matches were played in 2013 or 2016 ?",
        "sql": "select count ( matches.* ) where matches.year = value or matches.year = value"
    },
    "interaction": [
        {
            "utterance": "How many matches were played in 2013 or 2016 ?",
            "sql": "select count ( matches.* ) where matches.year = value or matches.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open ?",
        "sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open ?",
            "sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open ?",
        "sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open ?",
            "sql": "select players.country_code , players.first_name where matches.tourney_name = value intersect select players.country_code , players.first_name where matches.tourney_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 24,
    "final": {
        "utterance": "Find the first name and country code of the oldest player .",
        "sql": "select players.first_name , players.country_code order_by players.birth_date limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the first name and country code of the oldest player .",
            "sql": "select players.first_name , players.country_code order_by players.birth_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the first name and country code of the oldest player ?",
        "sql": "select players.first_name , players.country_code order_by players.birth_date limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the first name and country code of the oldest player ?",
            "sql": "select players.first_name , players.country_code order_by players.birth_date limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 26,
    "final": {
        "utterance": "List the first and last name of all players in the order of birth date .",
        "sql": "select players.first_name , players.last_name order_by players.birth_date"
    },
    "interaction": [
        {
            "utterance": "List the first and last name of all players in the order of birth date .",
            "sql": "select players.first_name , players.last_name order_by players.birth_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the full names of all players , sorted by birth date ?",
        "sql": "select players.first_name , players.last_name order_by players.birth_date"
    },
    "interaction": [
        {
            "utterance": "What are the full names of all players , sorted by birth date ?",
            "sql": "select players.first_name , players.last_name order_by players.birth_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 28,
    "final": {
        "utterance": "List the first and last name of all players who are left / L hand in the order of birth date .",
        "sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date"
    },
    "interaction": [
        {
            "utterance": "List the first and last name of all players who are left / L hand in the order of birth date .",
            "sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the full names of all left handed players , in order of birth date ?",
        "sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date"
    },
    "interaction": [
        {
            "utterance": "What are the full names of all left handed players , in order of birth date ?",
            "sql": "select players.first_name , players.last_name where players.hand = value order_by players.birth_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the first name and country code of the player who did the most number of tours .",
        "sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the first name and country code of the player who did the most number of tours .",
            "sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the first name and country code of the player with the most tours ?",
        "sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the first name and country code of the player with the most tours ?",
            "sql": "select players.country_code , players.first_name order_by rankings.tours desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the year that has the most number of matches .",
        "sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the year that has the most number of matches .",
            "sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Which year had the most matches ?",
        "sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which year had the most matches ?",
            "sql": "select matches.year group_by matches.year order_by count ( matches.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 34,
    "final": {
        "utterance": "Find the name and rank points of the winner who won the most times .",
        "sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the name and rank points of the winner who won the most times .",
            "sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What is the name of the winner who has won the most matches , and how many rank points does this player have ?",
        "sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the winner who has won the most matches , and how many rank points does this player have ?",
            "sql": "select matches.winner_name , matches.winner_rank_points group_by matches.winner_name order_by count ( matches.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney .",
        "sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney .",
            "sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the name of the winner with the most rank points who participated in the Australian Open tournament ?",
        "sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the winner with the most rank points who participated in the Australian Open tournament ?",
            "sql": "select matches.winner_name where matches.tourney_name = value order_by matches.winner_rank_points desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 38,
    "final": {
        "utterance": "find the names of loser and winner who played in the match with greatest number of minutes .",
        "sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value"
    },
    "interaction": [
        {
            "utterance": "find the names of loser and winner who played in the match with greatest number of minutes .",
            "sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the names of the winner and loser who played in the longest match ?",
        "sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the winner and loser who played in the longest match ?",
            "sql": "select matches.winner_name , matches.loser_name order_by matches.minutes desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Find the average ranking for each player and their first name .",
        "sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name"
    },
    "interaction": [
        {
            "utterance": "Find the average ranking for each player and their first name .",
            "sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 41,
    "final": {
        "utterance": "What are the first names of all players , and their average rankings ?",
        "sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all players , and their average rankings ?",
            "sql": "select avg ( rankings.ranking ) , players.first_name group_by players.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the total ranking points for each player and their first name .",
        "sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name"
    },
    "interaction": [
        {
            "utterance": "Find the total ranking points for each player and their first name .",
            "sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the first names of all players , and their total ranking points ?",
        "sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name"
    },
    "interaction": [
        {
            "utterance": "What are the first names of all players , and their total ranking points ?",
            "sql": "select sum ( rankings.ranking_points ) , players.first_name group_by players.first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 44,
    "final": {
        "utterance": "find the number of players for each country .",
        "sql": "select count ( players.* ) , players.country_code group_by players.country_code"
    },
    "interaction": [
        {
            "utterance": "find the number of players for each country .",
            "sql": "select count ( players.* ) , players.country_code group_by players.country_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 45,
    "final": {
        "utterance": "How many players are from each country ?",
        "sql": "select count ( players.* ) , players.country_code group_by players.country_code"
    },
    "interaction": [
        {
            "utterance": "How many players are from each country ?",
            "sql": "select count ( players.* ) , players.country_code group_by players.country_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 46,
    "final": {
        "utterance": "find the code of the country where has the greatest number of players .",
        "sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "find the code of the country where has the greatest number of players .",
            "sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 47,
    "final": {
        "utterance": "What is the code of the country with the most players ?",
        "sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the code of the country with the most players ?",
            "sql": "select players.country_code group_by players.country_code order_by count ( players.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 48,
    "final": {
        "utterance": "Find the codes of countries that have more than 50 players .",
        "sql": "select players.country_code group_by players.country_code having count ( players.* ) > value"
    },
    "interaction": [
        {
            "utterance": "Find the codes of countries that have more than 50 players .",
            "sql": "select players.country_code group_by players.country_code having count ( players.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 49,
    "final": {
        "utterance": "What are the codes of countries with more than 50 players ?",
        "sql": "select players.country_code group_by players.country_code having count ( players.* ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the codes of countries with more than 50 players ?",
            "sql": "select players.country_code group_by players.country_code having count ( players.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 50,
    "final": {
        "utterance": "Find the total number of tours for each ranking date .",
        "sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date"
    },
    "interaction": [
        {
            "utterance": "Find the total number of tours for each ranking date .",
            "sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 51,
    "final": {
        "utterance": "How many total tours were there for each ranking date ?",
        "sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date"
    },
    "interaction": [
        {
            "utterance": "How many total tours were there for each ranking date ?",
            "sql": "select sum ( rankings.tours ) , rankings.ranking_date group_by rankings.ranking_date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 52,
    "final": {
        "utterance": "Find the number of matches happened in each year .",
        "sql": "select count ( matches.* ) , matches.year group_by matches.year"
    },
    "interaction": [
        {
            "utterance": "Find the number of matches happened in each year .",
            "sql": "select count ( matches.* ) , matches.year group_by matches.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 53,
    "final": {
        "utterance": "How many matches were played in each year ?",
        "sql": "select count ( matches.* ) , matches.year group_by matches.year"
    },
    "interaction": [
        {
            "utterance": "How many matches were played in each year ?",
            "sql": "select count ( matches.* ) , matches.year group_by matches.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 54,
    "final": {
        "utterance": "Find the name and rank of the 3 youngest winners across all matches .",
        "sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the name and rank of the 3 youngest winners across all matches .",
            "sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 55,
    "final": {
        "utterance": "What are the names and ranks of the three youngest winners across all matches ?",
        "sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the names and ranks of the three youngest winners across all matches ?",
            "sql": "select distinct matches.winner_name , matches.winner_rank order_by matches.winner_age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 56,
    "final": {
        "utterance": "How many different winners both participated in the WTA Championships and were left handed ?",
        "sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value"
    },
    "interaction": [
        {
            "utterance": "How many different winners both participated in the WTA Championships and were left handed ?",
            "sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 57,
    "final": {
        "utterance": "Find the number of left handed winners who participated in the WTA Championships .",
        "sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value"
    },
    "interaction": [
        {
            "utterance": "Find the number of left handed winners who participated in the WTA Championships .",
            "sql": "select count ( distinct matches.winner_name ) where matches.tourney_name = value and matches.winner_hand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 58,
    "final": {
        "utterance": "Find the first name , country code and birth date of the winner who has the highest rank points in all matches .",
        "sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the first name , country code and birth date of the winner who has the highest rank points in all matches .",
            "sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 59,
    "final": {
        "utterance": "What is the first name , country code , and birth date of the player with the most winner rank points across all matches ?",
        "sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the first name , country code , and birth date of the player with the most winner rank points across all matches ?",
            "sql": "select players.first_name , players.country_code , players.birth_date order_by matches.winner_rank_points desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 60,
    "final": {
        "utterance": "Find the number of players for each hand type .",
        "sql": "select count ( players.* ) , players.hand group_by players.hand"
    },
    "interaction": [
        {
            "utterance": "Find the number of players for each hand type .",
            "sql": "select count ( players.* ) , players.hand group_by players.hand"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 61,
    "final": {
        "utterance": "How many players are there for each hand type ?",
        "sql": "select count ( players.* ) , players.hand group_by players.hand"
    },
    "interaction": [
        {
            "utterance": "How many players are there for each hand type ?",
            "sql": "select count ( players.* ) , players.hand group_by players.hand"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 0,
    "final": {
        "utterance": "How many conductors are there ?",
        "sql": "select count ( conductor.* )"
    },
    "interaction": [
        {
            "utterance": "How many conductors are there ?",
            "sql": "select count ( conductor.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 1,
    "final": {
        "utterance": "Count the number of conductors .",
        "sql": "select count ( conductor.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of conductors .",
            "sql": "select count ( conductor.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of conductors in ascending order of age .",
        "sql": "select conductor.name order_by conductor.age asc"
    },
    "interaction": [
        {
            "utterance": "List the names of conductors in ascending order of age .",
            "sql": "select conductor.name order_by conductor.age asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names of conductors , ordered by age ?",
        "sql": "select conductor.name order_by conductor.age asc"
    },
    "interaction": [
        {
            "utterance": "What are the names of conductors , ordered by age ?",
            "sql": "select conductor.name order_by conductor.age asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of conductors whose nationalities are not `` USA '' ?",
        "sql": "select conductor.name where conductor.nationality != value"
    },
    "interaction": [
        {
            "utterance": "What are the names of conductors whose nationalities are not `` USA '' ?",
            "sql": "select conductor.name where conductor.nationality != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 5,
    "final": {
        "utterance": "Return the names of conductors that do not have the nationality `` USA '' .",
        "sql": "select conductor.name where conductor.nationality != value"
    },
    "interaction": [
        {
            "utterance": "Return the names of conductors that do not have the nationality `` USA '' .",
            "sql": "select conductor.name where conductor.nationality != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the record companies of orchestras in descending order of years in which they were founded ?",
        "sql": "select orchestra.record_company order_by orchestra.year_of_founded desc"
    },
    "interaction": [
        {
            "utterance": "What are the record companies of orchestras in descending order of years in which they were founded ?",
            "sql": "select orchestra.record_company order_by orchestra.year_of_founded desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 7,
    "final": {
        "utterance": "Return the record companies of orchestras , sorted descending by the years in which they were founded .",
        "sql": "select orchestra.record_company order_by orchestra.year_of_founded desc"
    },
    "interaction": [
        {
            "utterance": "Return the record companies of orchestras , sorted descending by the years in which they were founded .",
            "sql": "select orchestra.record_company order_by orchestra.year_of_founded desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the average attendance of shows ?",
        "sql": "select avg ( show.attendance )"
    },
    "interaction": [
        {
            "utterance": "What is the average attendance of shows ?",
            "sql": "select avg ( show.attendance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 9,
    "final": {
        "utterance": "Return the average attendance across all shows .",
        "sql": "select avg ( show.attendance )"
    },
    "interaction": [
        {
            "utterance": "Return the average attendance across all shows .",
            "sql": "select avg ( show.attendance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the maximum and minimum share of performances whose type is not `` Live final '' .",
        "sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value"
    },
    "interaction": [
        {
            "utterance": "What are the maximum and minimum share of performances whose type is not `` Live final '' .",
            "sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the maximum and minimum shares for performances that do not have the type `` Live final '' .",
        "sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value"
    },
    "interaction": [
        {
            "utterance": "Return the maximum and minimum shares for performances that do not have the type `` Live final '' .",
            "sql": "select max ( performance.share ) , min ( performance.share ) where performance.type != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 12,
    "final": {
        "utterance": "How many different nationalities do conductors have ?",
        "sql": "select count ( distinct conductor.nationality )"
    },
    "interaction": [
        {
            "utterance": "How many different nationalities do conductors have ?",
            "sql": "select count ( distinct conductor.nationality )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 13,
    "final": {
        "utterance": "Count the number of different nationalities of conductors .",
        "sql": "select count ( distinct conductor.nationality )"
    },
    "interaction": [
        {
            "utterance": "Count the number of different nationalities of conductors .",
            "sql": "select count ( distinct conductor.nationality )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 14,
    "final": {
        "utterance": "List names of conductors in descending order of years of work .",
        "sql": "select conductor.name order_by conductor.year_of_work desc"
    },
    "interaction": [
        {
            "utterance": "List names of conductors in descending order of years of work .",
            "sql": "select conductor.name order_by conductor.year_of_work desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the names of conductors , sorted descending by the number of years they have worked ?",
        "sql": "select conductor.name order_by conductor.year_of_work desc"
    },
    "interaction": [
        {
            "utterance": "What are the names of conductors , sorted descending by the number of years they have worked ?",
            "sql": "select conductor.name order_by conductor.year_of_work desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 16,
    "final": {
        "utterance": "List the name of the conductor with the most years of work .",
        "sql": "select conductor.name order_by conductor.year_of_work desc limit_value"
    },
    "interaction": [
        {
            "utterance": "List the name of the conductor with the most years of work .",
            "sql": "select conductor.name order_by conductor.year_of_work desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the name of the conductor who has worked the greatest number of years ?",
        "sql": "select conductor.name order_by conductor.year_of_work desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the conductor who has worked the greatest number of years ?",
            "sql": "select conductor.name order_by conductor.year_of_work desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the names of conductors and the orchestras they have conducted .",
        "sql": "select conductor.name , orchestra.orchestra"
    },
    "interaction": [
        {
            "utterance": "Show the names of conductors and the orchestras they have conducted .",
            "sql": "select conductor.name , orchestra.orchestra"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names of conductors as well as the corresonding orchestras that they have conducted ?",
        "sql": "select conductor.name , orchestra.orchestra"
    },
    "interaction": [
        {
            "utterance": "What are the names of conductors as well as the corresonding orchestras that they have conducted ?",
            "sql": "select conductor.name , orchestra.orchestra"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 20,
    "final": {
        "utterance": "Show the names of conductors that have conducted more than one orchestras .",
        "sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Show the names of conductors that have conducted more than one orchestras .",
            "sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the names of conductors who have conducted at more than one orchestra ?",
        "sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of conductors who have conducted at more than one orchestra ?",
            "sql": "select conductor.name group_by orchestra.conductor_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the name of the conductor that has conducted the most number of orchestras .",
        "sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Show the name of the conductor that has conducted the most number of orchestras .",
            "sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the name of the conductor who has conducted the most orchestras ?",
        "sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the conductor who has conducted the most orchestras ?",
            "sql": "select conductor.name group_by orchestra.conductor_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 24,
    "final": {
        "utterance": "Please show the name of the conductor that has conducted orchestras founded after 2008 .",
        "sql": "select conductor.name where orchestra.year_of_founded > value"
    },
    "interaction": [
        {
            "utterance": "Please show the name of the conductor that has conducted orchestras founded after 2008 .",
            "sql": "select conductor.name where orchestra.year_of_founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 25,
    "final": {
        "utterance": "What are the names of conductors who have conducted orchestras founded after the year 2008 ?",
        "sql": "select conductor.name where orchestra.year_of_founded > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of conductors who have conducted orchestras founded after the year 2008 ?",
            "sql": "select conductor.name where orchestra.year_of_founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 26,
    "final": {
        "utterance": "Please show the different record companies and the corresponding number of orchestras .",
        "sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company"
    },
    "interaction": [
        {
            "utterance": "Please show the different record companies and the corresponding number of orchestras .",
            "sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 27,
    "final": {
        "utterance": "How many orchestras does each record company manage ?",
        "sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company"
    },
    "interaction": [
        {
            "utterance": "How many orchestras does each record company manage ?",
            "sql": "select orchestra.record_company , count ( orchestra.* ) group_by orchestra.record_company"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 28,
    "final": {
        "utterance": "Please show the record formats of orchestras in ascending order of count .",
        "sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc"
    },
    "interaction": [
        {
            "utterance": "Please show the record formats of orchestras in ascending order of count .",
            "sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the major record formats of orchestras , sorted by their frequency ?",
        "sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc"
    },
    "interaction": [
        {
            "utterance": "What are the major record formats of orchestras , sorted by their frequency ?",
            "sql": "select orchestra.major_record_format group_by orchestra.major_record_format order_by count ( orchestra.* ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 30,
    "final": {
        "utterance": "List the record company shared by the most number of orchestras .",
        "sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "List the record company shared by the most number of orchestras .",
            "sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the record company used by the greatest number of orchestras ?",
        "sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the record company used by the greatest number of orchestras ?",
            "sql": "select orchestra.record_company group_by orchestra.record_company order_by count ( orchestra.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 32,
    "final": {
        "utterance": "List the names of orchestras that have no performance .",
        "sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )"
    },
    "interaction": [
        {
            "utterance": "List the names of orchestras that have no performance .",
            "sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 33,
    "final": {
        "utterance": "What are the orchestras that do not have any performances ?",
        "sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )"
    },
    "interaction": [
        {
            "utterance": "What are the orchestras that do not have any performances ?",
            "sql": "select orchestra.orchestra where orchestra.orchestra_id not in ( select performance.orchestra_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 34,
    "final": {
        "utterance": "Show the record companies shared by orchestras founded before 2003 and after 2003 .",
        "sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value"
    },
    "interaction": [
        {
            "utterance": "Show the record companies shared by orchestras founded before 2003 and after 2003 .",
            "sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 ?",
        "sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value"
    },
    "interaction": [
        {
            "utterance": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 ?",
            "sql": "select orchestra.record_company where orchestra.year_of_founded < value intersect select orchestra.record_company where orchestra.year_of_founded > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 36,
    "final": {
        "utterance": "Find the number of orchestras whose record format is `` CD '' or `` DVD '' .",
        "sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value"
    },
    "interaction": [
        {
            "utterance": "Find the number of orchestras whose record format is `` CD '' or `` DVD '' .",
            "sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 37,
    "final": {
        "utterance": "Count the number of orchestras that have CD or DVD as their record format .",
        "sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of orchestras that have CD or DVD as their record format .",
            "sql": "select count ( orchestra.* ) where orchestra.major_record_format = value or orchestra.major_record_format = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 38,
    "final": {
        "utterance": "Show the years in which orchestras that have given more than one performance are founded .",
        "sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Show the years in which orchestras that have given more than one performance are founded .",
            "sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 39,
    "final": {
        "utterance": "What are years of founding for orchestras that have had more than a single performance ?",
        "sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "What are years of founding for orchestras that have had more than a single performance ?",
            "sql": "select orchestra.year_of_founded group_by performance.orchestra_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 0,
    "final": {
        "utterance": "Which country does Airline `` JetBlue Airways '' belong to ?",
        "sql": "select airlines.country where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "Which country does Airline `` JetBlue Airways '' belong to ?",
            "sql": "select airlines.country where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 1,
    "final": {
        "utterance": "What country is Jetblue Airways affiliated with ?",
        "sql": "select airlines.country where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "What country is Jetblue Airways affiliated with ?",
            "sql": "select airlines.country where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the abbreviation of Airline `` JetBlue Airways '' ?",
        "sql": "select airlines.abbreviation where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "What is the abbreviation of Airline `` JetBlue Airways '' ?",
            "sql": "select airlines.abbreviation where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Which abbreviation corresponds to Jetblue Airways ?",
        "sql": "select airlines.abbreviation where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "Which abbreviation corresponds to Jetblue Airways ?",
            "sql": "select airlines.abbreviation where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 4,
    "final": {
        "utterance": "List all airline names and their abbreviations in `` USA '' .",
        "sql": "select airlines.airline , airlines.abbreviation where airlines.country = value"
    },
    "interaction": [
        {
            "utterance": "List all airline names and their abbreviations in `` USA '' .",
            "sql": "select airlines.airline , airlines.abbreviation where airlines.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the airline names and abbreviations for airlines in the USA ?",
        "sql": "select airlines.airline , airlines.abbreviation where airlines.country = value"
    },
    "interaction": [
        {
            "utterance": "What are the airline names and abbreviations for airlines in the USA ?",
            "sql": "select airlines.airline , airlines.abbreviation where airlines.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 6,
    "final": {
        "utterance": "List the airport code and name in the city of Anthony .",
        "sql": "select airports.airportcode , airports.airportname where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "List the airport code and name in the city of Anthony .",
            "sql": "select airports.airportcode , airports.airportname where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Give the airport code and airport name corresonding to the city Anthony .",
        "sql": "select airports.airportcode , airports.airportname where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "Give the airport code and airport name corresonding to the city Anthony .",
            "sql": "select airports.airportcode , airports.airportname where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 8,
    "final": {
        "utterance": "How many airlines do we have ?",
        "sql": "select count ( airlines.* )"
    },
    "interaction": [
        {
            "utterance": "How many airlines do we have ?",
            "sql": "select count ( airlines.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the total number of airlines ?",
        "sql": "select count ( airlines.* )"
    },
    "interaction": [
        {
            "utterance": "What is the total number of airlines ?",
            "sql": "select count ( airlines.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 10,
    "final": {
        "utterance": "How many airports do we have ?",
        "sql": "select count ( airports.* )"
    },
    "interaction": [
        {
            "utterance": "How many airports do we have ?",
            "sql": "select count ( airports.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 11,
    "final": {
        "utterance": "Return the number of airports .",
        "sql": "select count ( airports.* )"
    },
    "interaction": [
        {
            "utterance": "Return the number of airports .",
            "sql": "select count ( airports.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 12,
    "final": {
        "utterance": "How many flights do we have ?",
        "sql": "select count ( flights.* )"
    },
    "interaction": [
        {
            "utterance": "How many flights do we have ?",
            "sql": "select count ( flights.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 13,
    "final": {
        "utterance": "Return the number of flights .",
        "sql": "select count ( flights.* )"
    },
    "interaction": [
        {
            "utterance": "Return the number of flights .",
            "sql": "select count ( flights.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Which airline has abbreviation 'UAL ' ?",
        "sql": "select airlines.airline where airlines.abbreviation = value"
    },
    "interaction": [
        {
            "utterance": "Which airline has abbreviation 'UAL ' ?",
            "sql": "select airlines.airline where airlines.abbreviation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Give the airline with abbreviation 'UAL ' .",
        "sql": "select airlines.airline where airlines.abbreviation = value"
    },
    "interaction": [
        {
            "utterance": "Give the airline with abbreviation 'UAL ' .",
            "sql": "select airlines.airline where airlines.abbreviation = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 16,
    "final": {
        "utterance": "How many airlines are from USA ?",
        "sql": "select count ( airlines.* ) where airlines.country = value"
    },
    "interaction": [
        {
            "utterance": "How many airlines are from USA ?",
            "sql": "select count ( airlines.* ) where airlines.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 17,
    "final": {
        "utterance": "Return the number of airlines in the USA .",
        "sql": "select count ( airlines.* ) where airlines.country = value"
    },
    "interaction": [
        {
            "utterance": "Return the number of airlines in the USA .",
            "sql": "select count ( airlines.* ) where airlines.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 18,
    "final": {
        "utterance": "Which city and country is the Alton airport at ?",
        "sql": "select airports.city , airports.country where airports.airportname = value"
    },
    "interaction": [
        {
            "utterance": "Which city and country is the Alton airport at ?",
            "sql": "select airports.city , airports.country where airports.airportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 19,
    "final": {
        "utterance": "Give the city and country for the Alton airport .",
        "sql": "select airports.city , airports.country where airports.airportname = value"
    },
    "interaction": [
        {
            "utterance": "Give the city and country for the Alton airport .",
            "sql": "select airports.city , airports.country where airports.airportname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the airport name for airport 'AKO ' ?",
        "sql": "select airports.airportname where airports.airportcode = value"
    },
    "interaction": [
        {
            "utterance": "What is the airport name for airport 'AKO ' ?",
            "sql": "select airports.airportname where airports.airportcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 21,
    "final": {
        "utterance": "Return the name of the airport with code 'AKO ' .",
        "sql": "select airports.airportname where airports.airportcode = value"
    },
    "interaction": [
        {
            "utterance": "Return the name of the airport with code 'AKO ' .",
            "sql": "select airports.airportname where airports.airportcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 22,
    "final": {
        "utterance": "What are airport names at City 'Aberdeen ' ?",
        "sql": "select airports.airportname where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "What are airport names at City 'Aberdeen ' ?",
            "sql": "select airports.airportname where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the names of airports in Aberdeen ?",
        "sql": "select airports.airportname where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of airports in Aberdeen ?",
            "sql": "select airports.airportname where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 24,
    "final": {
        "utterance": "How many flights depart from 'APG ' ?",
        "sql": "select count ( flights.* ) where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "How many flights depart from 'APG ' ?",
            "sql": "select count ( flights.* ) where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 25,
    "final": {
        "utterance": "Count the number of flights departing from 'APG ' .",
        "sql": "select count ( flights.* ) where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of flights departing from 'APG ' .",
            "sql": "select count ( flights.* ) where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 26,
    "final": {
        "utterance": "How many flights have destination ATO ?",
        "sql": "select count ( flights.* ) where flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "How many flights have destination ATO ?",
            "sql": "select count ( flights.* ) where flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 27,
    "final": {
        "utterance": "Count the number of flights into ATO .",
        "sql": "select count ( flights.* ) where flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of flights into ATO .",
            "sql": "select count ( flights.* ) where flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 28,
    "final": {
        "utterance": "How many flights depart from City Aberdeen ?",
        "sql": "select count ( * ) where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "How many flights depart from City Aberdeen ?",
            "sql": "select count ( * ) where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 29,
    "final": {
        "utterance": "Return the number of flights departing from Aberdeen .",
        "sql": "select count ( * ) where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "Return the number of flights departing from Aberdeen .",
            "sql": "select count ( * ) where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 30,
    "final": {
        "utterance": "How many flights arriving in Aberdeen city ?",
        "sql": "select count ( * ) where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "How many flights arriving in Aberdeen city ?",
            "sql": "select count ( * ) where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 31,
    "final": {
        "utterance": "Return the number of flights arriving in Aberdeen .",
        "sql": "select count ( * ) where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "Return the number of flights arriving in Aberdeen .",
            "sql": "select count ( * ) where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 32,
    "final": {
        "utterance": "How many flights depart from City 'Aberdeen ' and have destination City 'Ashley ' ?",
        "sql": "select count ( * ) where airports.city = value and airports.city = value"
    },
    "interaction": [
        {
            "utterance": "How many flights depart from City 'Aberdeen ' and have destination City 'Ashley ' ?",
            "sql": "select count ( * ) where airports.city = value and airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 33,
    "final": {
        "utterance": "How many flights fly from Aberdeen to Ashley ?",
        "sql": "select count ( * ) where airports.city = value and airports.city = value"
    },
    "interaction": [
        {
            "utterance": "How many flights fly from Aberdeen to Ashley ?",
            "sql": "select count ( * ) where airports.city = value and airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 34,
    "final": {
        "utterance": "How many flights does airline 'JetBlue Airways ' have ?",
        "sql": "select count ( * ) where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "How many flights does airline 'JetBlue Airways ' have ?",
            "sql": "select count ( * ) where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 35,
    "final": {
        "utterance": "Give the number of Jetblue Airways flights .",
        "sql": "select count ( * ) where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "Give the number of Jetblue Airways flights .",
            "sql": "select count ( * ) where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 36,
    "final": {
        "utterance": "How many 'United Airlines ' flights go to Airport 'ASY ' ?",
        "sql": "select count ( * ) where airlines.airline = value and flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "How many 'United Airlines ' flights go to Airport 'ASY ' ?",
            "sql": "select count ( * ) where airlines.airline = value and flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 37,
    "final": {
        "utterance": "Count the number of United Airlines flights arriving in ASY Airport .",
        "sql": "select count ( * ) where airlines.airline = value and flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of United Airlines flights arriving in ASY Airport .",
            "sql": "select count ( * ) where airlines.airline = value and flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 38,
    "final": {
        "utterance": "How many 'United Airlines ' flights depart from Airport 'AHD ' ?",
        "sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "How many 'United Airlines ' flights depart from Airport 'AHD ' ?",
            "sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 39,
    "final": {
        "utterance": "Return the number of United Airlines flights leaving from AHD Airport .",
        "sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Return the number of United Airlines flights leaving from AHD Airport .",
            "sql": "select count ( * ) where airlines.airline = value and flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 40,
    "final": {
        "utterance": "How many United Airlines flights go to City 'Aberdeen ' ?",
        "sql": "select count ( * ) where airports.city = value and airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "How many United Airlines flights go to City 'Aberdeen ' ?",
            "sql": "select count ( * ) where airports.city = value and airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 41,
    "final": {
        "utterance": "Count the number of United Airlines flights that arrive in Aberdeen .",
        "sql": "select count ( * ) where airports.city = value and airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of United Airlines flights that arrive in Aberdeen .",
            "sql": "select count ( * ) where airports.city = value and airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 42,
    "final": {
        "utterance": "Which city has most number of arriving flights ?",
        "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which city has most number of arriving flights ?",
            "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 43,
    "final": {
        "utterance": "Which city has the most frequent destination airport ?",
        "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which city has the most frequent destination airport ?",
            "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 44,
    "final": {
        "utterance": "Which city has most number of departing flights ?",
        "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which city has most number of departing flights ?",
            "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 45,
    "final": {
        "utterance": "Which city is the most frequent source airport ?",
        "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which city is the most frequent source airport ?",
            "sql": "select airports.city group_by airports.city order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 46,
    "final": {
        "utterance": "What is the code of airport that has the highest number of flights ?",
        "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the code of airport that has the highest number of flights ?",
            "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 47,
    "final": {
        "utterance": "What is the airport code of the airport with the most flights ?",
        "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the airport code of the airport with the most flights ?",
            "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 48,
    "final": {
        "utterance": "What is the code of airport that has fewest number of flights ?",
        "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the code of airport that has fewest number of flights ?",
            "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 49,
    "final": {
        "utterance": "Give the code of the airport with the least flights .",
        "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the code of the airport with the least flights .",
            "sql": "select airports.airportcode or airports.airportcode = flights.sourceairport group_by airports.airportcode order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 50,
    "final": {
        "utterance": "Which airline has most number of flights ?",
        "sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which airline has most number of flights ?",
            "sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 51,
    "final": {
        "utterance": "What airline serves the most flights ?",
        "sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What airline serves the most flights ?",
            "sql": "select airlines.airline group_by airlines.airline order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 52,
    "final": {
        "utterance": "Find the abbreviation and country of the airline that has fewest number of flights ?",
        "sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the abbreviation and country of the airline that has fewest number of flights ?",
            "sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 53,
    "final": {
        "utterance": "What is the abbreviation of the airilne has the fewest flights and what country is it in ?",
        "sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the abbreviation of the airilne has the fewest flights and what country is it in ?",
            "sql": "select airlines.abbreviation , airlines.country group_by airlines.airline order_by count ( * ) limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 54,
    "final": {
        "utterance": "What are airlines that have some flight departing from airport 'AHD ' ?",
        "sql": "select airlines.airline where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "What are airlines that have some flight departing from airport 'AHD ' ?",
            "sql": "select airlines.airline where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 55,
    "final": {
        "utterance": "Which airlines have a flight with source airport AHD ?",
        "sql": "select airlines.airline where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Which airlines have a flight with source airport AHD ?",
            "sql": "select airlines.airline where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 56,
    "final": {
        "utterance": "What are airlines that have flights arriving at airport 'AHD ' ?",
        "sql": "select airlines.airline where flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "What are airlines that have flights arriving at airport 'AHD ' ?",
            "sql": "select airlines.airline where flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 57,
    "final": {
        "utterance": "Which airlines have a flight with destination airport AHD ?",
        "sql": "select airlines.airline where flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "Which airlines have a flight with destination airport AHD ?",
            "sql": "select airlines.airline where flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 58,
    "final": {
        "utterance": "Find all airlines that have flights from both airports 'APG ' and 'CVO ' .",
        "sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Find all airlines that have flights from both airports 'APG ' and 'CVO ' .",
            "sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 59,
    "final": {
        "utterance": "Which airlines have departing flights from both APG and CVO airports ?",
        "sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Which airlines have departing flights from both APG and CVO airports ?",
            "sql": "select airlines.airline where flights.sourceairport = value intersect select airlines.airline where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 60,
    "final": {
        "utterance": "Find all airlines that have flights from airport 'CVO ' but not from 'APG ' .",
        "sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Find all airlines that have flights from airport 'CVO ' but not from 'APG ' .",
            "sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 61,
    "final": {
        "utterance": "Which airlines have departures from CVO but not from APG airports ?",
        "sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Which airlines have departures from CVO but not from APG airports ?",
            "sql": "select airlines.airline where flights.sourceairport = value except select airlines.airline where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 62,
    "final": {
        "utterance": "Find all airlines that have at least 10 flights .",
        "sql": "select airlines.airline group_by airlines.airline having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Find all airlines that have at least 10 flights .",
            "sql": "select airlines.airline group_by airlines.airline having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 63,
    "final": {
        "utterance": "Which airlines have at least 10 flights ?",
        "sql": "select airlines.airline group_by airlines.airline having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Which airlines have at least 10 flights ?",
            "sql": "select airlines.airline group_by airlines.airline having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 64,
    "final": {
        "utterance": "Find all airlines that have fewer than 200 flights .",
        "sql": "select airlines.airline group_by airlines.airline having count ( * ) < value"
    },
    "interaction": [
        {
            "utterance": "Find all airlines that have fewer than 200 flights .",
            "sql": "select airlines.airline group_by airlines.airline having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 65,
    "final": {
        "utterance": "Which airlines have less than 200 flights ?",
        "sql": "select airlines.airline group_by airlines.airline having count ( * ) < value"
    },
    "interaction": [
        {
            "utterance": "Which airlines have less than 200 flights ?",
            "sql": "select airlines.airline group_by airlines.airline having count ( * ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 66,
    "final": {
        "utterance": "What are flight numbers of Airline `` United Airlines '' ?",
        "sql": "select flights.flightno where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "What are flight numbers of Airline `` United Airlines '' ?",
            "sql": "select flights.flightno where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 67,
    "final": {
        "utterance": "Which flight numbers correspond to United Airlines flights ?",
        "sql": "select flights.flightno where airlines.airline = value"
    },
    "interaction": [
        {
            "utterance": "Which flight numbers correspond to United Airlines flights ?",
            "sql": "select flights.flightno where airlines.airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 68,
    "final": {
        "utterance": "What are flight numbers of flights departing from Airport `` APG '' ?",
        "sql": "select flights.flightno where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "What are flight numbers of flights departing from Airport `` APG '' ?",
            "sql": "select flights.flightno where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 69,
    "final": {
        "utterance": "Give the flight numbers of flights leaving from APG .",
        "sql": "select flights.flightno where flights.sourceairport = value"
    },
    "interaction": [
        {
            "utterance": "Give the flight numbers of flights leaving from APG .",
            "sql": "select flights.flightno where flights.sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 70,
    "final": {
        "utterance": "What are flight numbers of flights arriving at Airport `` APG '' ?",
        "sql": "select flights.flightno where flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "What are flight numbers of flights arriving at Airport `` APG '' ?",
            "sql": "select flights.flightno where flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 71,
    "final": {
        "utterance": "Give the flight numbers of flights landing at APG .",
        "sql": "select flights.flightno where flights.destairport = value"
    },
    "interaction": [
        {
            "utterance": "Give the flight numbers of flights landing at APG .",
            "sql": "select flights.flightno where flights.destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 72,
    "final": {
        "utterance": "What are flight numbers of flights departing from City `` Aberdeen `` ?",
        "sql": "select flights.flightno where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "What are flight numbers of flights departing from City `` Aberdeen `` ?",
            "sql": "select flights.flightno where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 73,
    "final": {
        "utterance": "Give the flight numbers of flights leaving from Aberdeen .",
        "sql": "select flights.flightno where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "Give the flight numbers of flights leaving from Aberdeen .",
            "sql": "select flights.flightno where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 74,
    "final": {
        "utterance": "What are flight numbers of flights arriving at City `` Aberdeen '' ?",
        "sql": "select flights.flightno where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "What are flight numbers of flights arriving at City `` Aberdeen '' ?",
            "sql": "select flights.flightno where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 75,
    "final": {
        "utterance": "Give the flight numbers of flights arriving in Aberdeen .",
        "sql": "select flights.flightno where airports.city = value"
    },
    "interaction": [
        {
            "utterance": "Give the flight numbers of flights arriving in Aberdeen .",
            "sql": "select flights.flightno where airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 76,
    "final": {
        "utterance": "Find the number of flights landing in the city of Aberdeen or Abilene .",
        "sql": "select count ( * ) where airports.city = value or airports.city = value"
    },
    "interaction": [
        {
            "utterance": "Find the number of flights landing in the city of Aberdeen or Abilene .",
            "sql": "select count ( * ) where airports.city = value or airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 77,
    "final": {
        "utterance": "How many flights land in Aberdeen or Abilene ?",
        "sql": "select count ( * ) where airports.city = value or airports.city = value"
    },
    "interaction": [
        {
            "utterance": "How many flights land in Aberdeen or Abilene ?",
            "sql": "select count ( * ) where airports.city = value or airports.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 78,
    "final": {
        "utterance": "Find the name of airports which do not have any flight in and out .",
        "sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )"
    },
    "interaction": [
        {
            "utterance": "Find the name of airports which do not have any flight in and out .",
            "sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 79,
    "final": {
        "utterance": "Which airports do not have departing or arriving flights ?",
        "sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )"
    },
    "interaction": [
        {
            "utterance": "Which airports do not have departing or arriving flights ?",
            "sql": "select airports.airportname where airports.airportcode not in ( select flights.sourceairport union select flights.destairport )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 0,
    "final": {
        "utterance": "How many singers do we have ?",
        "sql": "select count ( singer.* )"
    },
    "interaction": [
        {
            "utterance": "How many singers do we have ?",
            "sql": "select count ( singer.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the total number of singers ?",
        "sql": "select count ( singer.* )"
    },
    "interaction": [
        {
            "utterance": "What is the total number of singers ?",
            "sql": "select count ( singer.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 2,
    "final": {
        "utterance": "Show name , country , age for all singers ordered by age from the oldest to the youngest .",
        "sql": "select singer.name , singer.country , singer.age order_by singer.age desc"
    },
    "interaction": [
        {
            "utterance": "Show name , country , age for all singers ordered by age from the oldest to the youngest .",
            "sql": "select singer.name , singer.country , singer.age order_by singer.age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the names , countries , and ages for every singer in descending order of age ?",
        "sql": "select singer.name , singer.country , singer.age order_by singer.age desc"
    },
    "interaction": [
        {
            "utterance": "What are the names , countries , and ages for every singer in descending order of age ?",
            "sql": "select singer.name , singer.country , singer.age order_by singer.age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average , minimum , and maximum age of all singers from France ?",
        "sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value"
    },
    "interaction": [
        {
            "utterance": "What is the average , minimum , and maximum age of all singers from France ?",
            "sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the average , minimum , and maximum age for all French singers ?",
        "sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value"
    },
    "interaction": [
        {
            "utterance": "What is the average , minimum , and maximum age for all French singers ?",
            "sql": "select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) where singer.country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name and the release year of the song by the youngest singer .",
        "sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value"
    },
    "interaction": [
        {
            "utterance": "Show the name and the release year of the song by the youngest singer .",
            "sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names and release years for all the songs of the youngest singer ?",
        "sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the names and release years for all the songs of the youngest singer ?",
            "sql": "select singer.song_name , singer.song_release_year order_by singer.age limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 8,
    "final": {
        "utterance": "What are all distinct countries where singers above age 20 are from ?",
        "sql": "select distinct singer.country where singer.age > value"
    },
    "interaction": [
        {
            "utterance": "What are all distinct countries where singers above age 20 are from ?",
            "sql": "select distinct singer.country where singer.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the different countries with singers above age 20 ?",
        "sql": "select distinct singer.country where singer.age > value"
    },
    "interaction": [
        {
            "utterance": "What are the different countries with singers above age 20 ?",
            "sql": "select distinct singer.country where singer.age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all countries and the number of singers in each country .",
        "sql": "select singer.country , count ( singer.* ) group_by singer.country"
    },
    "interaction": [
        {
            "utterance": "Show all countries and the number of singers in each country .",
            "sql": "select singer.country , count ( singer.* ) group_by singer.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 11,
    "final": {
        "utterance": "How many singers are from each country ?",
        "sql": "select singer.country , count ( singer.* ) group_by singer.country"
    },
    "interaction": [
        {
            "utterance": "How many singers are from each country ?",
            "sql": "select singer.country , count ( singer.* ) group_by singer.country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 12,
    "final": {
        "utterance": "List all song names by singers above the average age .",
        "sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )"
    },
    "interaction": [
        {
            "utterance": "List all song names by singers above the average age .",
            "sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 13,
    "final": {
        "utterance": "What are all the song names by singers who are older than average ?",
        "sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )"
    },
    "interaction": [
        {
            "utterance": "What are all the song names by singers who are older than average ?",
            "sql": "select singer.song_name where singer.age > ( select avg ( singer.age ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 14,
    "final": {
        "utterance": "Show location and name for all stadiums with a capacity between 5000 and 10000 .",
        "sql": "select stadium.location , stadium.name where stadium.capacity between value and value"
    },
    "interaction": [
        {
            "utterance": "Show location and name for all stadiums with a capacity between 5000 and 10000 .",
            "sql": "select stadium.location , stadium.name where stadium.capacity between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the locations and names of all stations with capacity between 5000 and 10000 ?",
        "sql": "select stadium.location , stadium.name where stadium.capacity between value and value"
    },
    "interaction": [
        {
            "utterance": "What are the locations and names of all stations with capacity between 5000 and 10000 ?",
            "sql": "select stadium.location , stadium.name where stadium.capacity between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the average and the maximum capacity of all stadiums ?",
        "sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )"
    },
    "interaction": [
        {
            "utterance": "What is the average and the maximum capacity of all stadiums ?",
            "sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the average and maximum capacities for all stations ?",
        "sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )"
    },
    "interaction": [
        {
            "utterance": "What is the average and maximum capacities for all stations ?",
            "sql": "select avg ( stadium.capacity ) , max ( stadium.capacity )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the name and capacity for the stadium with highest average attendance ?",
        "sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name and capacity for the stadium with highest average attendance ?",
            "sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name and capacity for the stadium with the highest average attendance ?",
        "sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name and capacity for the stadium with the highest average attendance ?",
            "sql": "select stadium.name , stadium.capacity order_by stadium.average desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 20,
    "final": {
        "utterance": "How many concerts are there in year 2014 or 2015 ?",
        "sql": "select count ( concert.* ) where concert.year = value or concert.year = value"
    },
    "interaction": [
        {
            "utterance": "How many concerts are there in year 2014 or 2015 ?",
            "sql": "select count ( concert.* ) where concert.year = value or concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 21,
    "final": {
        "utterance": "How many concerts occurred in 2014 or 2015 ?",
        "sql": "select count ( concert.* ) where concert.year = value or concert.year = value"
    },
    "interaction": [
        {
            "utterance": "How many concerts occurred in 2014 or 2015 ?",
            "sql": "select count ( concert.* ) where concert.year = value or concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 22,
    "final": {
        "utterance": "Show the stadium name and the number of concerts in each stadium .",
        "sql": "select stadium.name , count ( * ) group_by concert.stadium_id"
    },
    "interaction": [
        {
            "utterance": "Show the stadium name and the number of concerts in each stadium .",
            "sql": "select stadium.name , count ( * ) group_by concert.stadium_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 23,
    "final": {
        "utterance": "For each stadium , how many concerts play there ?",
        "sql": "select stadium.name , count ( * ) group_by concert.stadium_id"
    },
    "interaction": [
        {
            "utterance": "For each stadium , how many concerts play there ?",
            "sql": "select stadium.name , count ( * ) group_by concert.stadium_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 24,
    "final": {
        "utterance": "Show the stadium name and capacity with most number of concerts in year 2014 or after .",
        "sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Show the stadium name and capacity with most number of concerts in year 2014 or after .",
            "sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "sql": "select stadium.name , stadium.capacity where concert.year > = value group_by stadium.stadium_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 26,
    "final": {
        "utterance": "Which year has most number of concerts ?",
        "sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which year has most number of concerts ?",
            "sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the year that had the most concerts ?",
        "sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the year that had the most concerts ?",
            "sql": "select concert.year group_by concert.year order_by count ( concert.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 28,
    "final": {
        "utterance": "Show the stadium names without any concert .",
        "sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )"
    },
    "interaction": [
        {
            "utterance": "Show the stadium names without any concert .",
            "sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the names of the stadiums without any concerts ?",
        "sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )"
    },
    "interaction": [
        {
            "utterance": "What are the names of the stadiums without any concerts ?",
            "sql": "select stadium.name where stadium.stadium_id not in ( select concert.stadium_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 30,
    "final": {
        "utterance": "Show countries where a singer above age 40 and a singer below 30 are from .",
        "sql": "select singer.country where singer.age > value intersect select singer.country where singer.age < value"
    },
    "interaction": [
        {
            "utterance": "Show countries where a singer above age 40 and a singer below 30 are from .",
            "sql": "select singer.country where singer.age > value intersect select singer.country where singer.age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 31,
    "final": {
        "utterance": "Show names for all stadiums except for stadiums having a concert in year 2014 .",
        "sql": "select stadium.name except select stadium.name where concert.year = value"
    },
    "interaction": [
        {
            "utterance": "Show names for all stadiums except for stadiums having a concert in year 2014 .",
            "sql": "select stadium.name except select stadium.name where concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 32,
    "final": {
        "utterance": "What are the names of all stadiums that did not have a concert in 2014 ?",
        "sql": "select stadium.name except select stadium.name where concert.year = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of all stadiums that did not have a concert in 2014 ?",
            "sql": "select stadium.name except select stadium.name where concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 33,
    "final": {
        "utterance": "Show the name and theme for all concerts and the number of singers in each concert .",
        "sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id"
    },
    "interaction": [
        {
            "utterance": "Show the name and theme for all concerts and the number of singers in each concert .",
            "sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 34,
    "final": {
        "utterance": "What are the names , themes , and number of singers for each and every concert ?",
        "sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id"
    },
    "interaction": [
        {
            "utterance": "What are the names , themes , and number of singers for each and every concert ?",
            "sql": "select concert.concert_name , concert.theme , count ( * ) group_by concert.concert_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 35,
    "final": {
        "utterance": "List singer names and number of concerts for each singer .",
        "sql": "select singer.name , count ( * ) group_by singer.singer_id"
    },
    "interaction": [
        {
            "utterance": "List singer names and number of concerts for each singer .",
            "sql": "select singer.name , count ( * ) group_by singer.singer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the names of the singers and number of concerts for each person ?",
        "sql": "select singer.name , count ( * ) group_by singer.singer_id"
    },
    "interaction": [
        {
            "utterance": "What are the names of the singers and number of concerts for each person ?",
            "sql": "select singer.name , count ( * ) group_by singer.singer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 37,
    "final": {
        "utterance": "List all singer names in concerts in year 2014 .",
        "sql": "select singer.name where concert.year = value"
    },
    "interaction": [
        {
            "utterance": "List all singer names in concerts in year 2014 .",
            "sql": "select singer.name where concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 38,
    "final": {
        "utterance": "What are the names of the singers who performed in a concert in 2014 ?",
        "sql": "select singer.name where concert.year = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the singers who performed in a concert in 2014 ?",
            "sql": "select singer.name where concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 39,
    "final": {
        "utterance": "what is the name and nation of the singer who have a song having 'Hey ' in its name ?",
        "sql": "select singer.name , singer.country where singer.song_name like value"
    },
    "interaction": [
        {
            "utterance": "what is the name and nation of the singer who have a song having 'Hey ' in its name ?",
            "sql": "select singer.name , singer.country where singer.song_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 40,
    "final": {
        "utterance": "What is the name and country of origin of every singer who has a song with the word 'Hey ' in its title ?",
        "sql": "select singer.name , singer.country where singer.song_name like value"
    },
    "interaction": [
        {
            "utterance": "What is the name and country of origin of every singer who has a song with the word 'Hey ' in its title ?",
            "sql": "select singer.name , singer.country where singer.song_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 41,
    "final": {
        "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
        "sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value"
    },
    "interaction": [
        {
            "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
            "sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 42,
    "final": {
        "utterance": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015 ?",
        "sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value"
    },
    "interaction": [
        {
            "utterance": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015 ?",
            "sql": "select stadium.name , stadium.location where concert.year = value intersect select stadium.name , stadium.location where concert.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 43,
    "final": {
        "utterance": "Find the number of concerts happened in the stadium with the highest capacity .",
        "sql": "select count ( * ) order_by stadium.capacity desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the number of concerts happened in the stadium with the highest capacity .",
            "sql": "select count ( * ) order_by stadium.capacity desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 44,
    "final": {
        "utterance": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "sql": "select count ( * ) order_by stadium.capacity desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "sql": "select count ( * ) order_by stadium.capacity desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many states are there ?",
        "sql": "select count ( area_code_state.* )"
    },
    "interaction": [
        {
            "utterance": "How many states are there ?",
            "sql": "select count ( area_code_state.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 1,
    "final": {
        "utterance": "List the contestant numbers and names , ordered by contestant name descending .",
        "sql": "select contestants.contestant_number , contestants.contestant_name order_by contestants.contestant_name desc"
    },
    "interaction": [
        {
            "utterance": "List the contestant numbers and names , ordered by contestant name descending .",
            "sql": "select contestants.contestant_number , contestants.contestant_name order_by contestants.contestant_name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the vote ids , phone numbers and states of all votes .",
        "sql": "select votes.vote_id , votes.phone_number , votes.state"
    },
    "interaction": [
        {
            "utterance": "List the vote ids , phone numbers and states of all votes .",
            "sql": "select votes.vote_id , votes.phone_number , votes.state"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the maximum and minimum values of area codes ?",
        "sql": "select max ( area_code_state.area_code ) , min ( area_code_state.area_code )"
    },
    "interaction": [
        {
            "utterance": "What are the maximum and minimum values of area codes ?",
            "sql": "select max ( area_code_state.area_code ) , min ( area_code_state.area_code )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is last date created of votes from the state 'CA ' ?",
        "sql": "select max ( votes.created ) where votes.state = value"
    },
    "interaction": [
        {
            "utterance": "What is last date created of votes from the state 'CA ' ?",
            "sql": "select max ( votes.created ) where votes.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the names of the contestants whose names are not 'Jessie Alloway '",
        "sql": "select contestants.contestant_name where contestants.contestant_name != value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the contestants whose names are not 'Jessie Alloway '",
            "sql": "select contestants.contestant_name where contestants.contestant_name != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the distinct states and create time of all votes ?",
        "sql": "select distinct votes.state , votes.created"
    },
    "interaction": [
        {
            "utterance": "What are the distinct states and create time of all votes ?",
            "sql": "select distinct votes.state , votes.created"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the contestant numbers and names of the contestants who had at least two votes ?",
        "sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the contestant numbers and names of the contestants who had at least two votes ?",
            "sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Of all the contestants who got voted , what is the contestant number and name of the contestant who got least votes ?",
        "sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number order_by count ( * ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Of all the contestants who got voted , what is the contestant number and name of the contestant who got least votes ?",
            "sql": "select contestants.contestant_number , contestants.contestant_name group_by contestants.contestant_number order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the number of votes from state 'NY ' or 'CA ' ?",
        "sql": "select count ( votes.* ) where votes.state = value or votes.state = value"
    },
    "interaction": [
        {
            "utterance": "What are the number of votes from state 'NY ' or 'CA ' ?",
            "sql": "select count ( votes.* ) where votes.state = value or votes.state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How many contestants did not get voted ?",
        "sql": "select count ( contestants.* ) where contestants.contestant_number not in ( select votes.contestant_number )"
    },
    "interaction": [
        {
            "utterance": "How many contestants did not get voted ?",
            "sql": "select count ( contestants.* ) where contestants.contestant_number not in ( select votes.contestant_number )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the area code in which the most voters voted ?",
        "sql": "select area_code_state.area_code group_by area_code_state.area_code order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the area code in which the most voters voted ?",
            "sql": "select area_code_state.area_code group_by area_code_state.area_code order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the create dates , states , and phone numbers of the votes that were for the contestant named 'Tabatha Gehling ' ?",
        "sql": "select votes.created , votes.state , votes.phone_number where contestants.contestant_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the create dates , states , and phone numbers of the votes that were for the contestant named 'Tabatha Gehling ' ?",
            "sql": "select votes.created , votes.state , votes.phone_number where contestants.contestant_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 13,
    "final": {
        "utterance": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling ' and the contestant 'Kelly Clauss ' .",
        "sql": "select area_code_state.area_code where contestants.contestant_name = value intersect select area_code_state.area_code where contestants.contestant_name = value"
    },
    "interaction": [
        {
            "utterance": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling ' and the contestant 'Kelly Clauss ' .",
            "sql": "select area_code_state.area_code where contestants.contestant_name = value intersect select area_code_state.area_code where contestants.contestant_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Return the names the contestants whose names contain the substring 'Al ' .",
        "sql": "select contestants.contestant_name where contestants.contestant_name like value"
    },
    "interaction": [
        {
            "utterance": "Return the names the contestants whose names contain the substring 'Al ' .",
            "sql": "select contestants.contestant_name where contestants.contestant_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many continents are there ?",
        "sql": "select count ( continents.* )"
    },
    "interaction": [
        {
            "utterance": "How many continents are there ?",
            "sql": "select count ( continents.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the number of continents ?",
        "sql": "select count ( continents.* )"
    },
    "interaction": [
        {
            "utterance": "What is the number of continents ?",
            "sql": "select count ( continents.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many countries does each continent have ? List the continent id , continent name and the number of countries .",
        "sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid"
    },
    "interaction": [
        {
            "utterance": "How many countries does each continent have ? List the continent id , continent name and the number of countries .",
            "sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 3,
    "final": {
        "utterance": "For each continent , list its id , name , and how many countries it has ?",
        "sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid"
    },
    "interaction": [
        {
            "utterance": "For each continent , list its id , name , and how many countries it has ?",
            "sql": "select continents.contid , continents.continent , count ( * ) group_by continents.contid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 4,
    "final": {
        "utterance": "How many countries are listed ?",
        "sql": "select count ( countries.* )"
    },
    "interaction": [
        {
            "utterance": "How many countries are listed ?",
            "sql": "select count ( countries.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How many countries exist ?",
        "sql": "select count ( countries.* )"
    },
    "interaction": [
        {
            "utterance": "How many countries exist ?",
            "sql": "select count ( countries.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 6,
    "final": {
        "utterance": "How many models does each car maker produce ? List maker full name , id and the number .",
        "sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id"
    },
    "interaction": [
        {
            "utterance": "How many models does each car maker produce ? List maker full name , id and the number .",
            "sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the full name of each car maker , along with its id and how many models it produces ?",
        "sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id"
    },
    "interaction": [
        {
            "utterance": "What is the full name of each car maker , along with its id and how many models it produces ?",
            "sql": "select car_makers.fullname , car_makers.id , count ( * ) group_by car_makers.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which model of the car has the minimum horsepower ?",
        "sql": "select car_names.model order_by cars_data.horsepower asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which model of the car has the minimum horsepower ?",
            "sql": "select car_names.model order_by cars_data.horsepower asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the model of the car with the smallest amount of horsepower ?",
        "sql": "select car_names.model order_by cars_data.horsepower asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the model of the car with the smallest amount of horsepower ?",
            "sql": "select car_names.model order_by cars_data.horsepower asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the model of the car whose weight is below the average weight .",
        "sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )"
    },
    "interaction": [
        {
            "utterance": "Find the model of the car whose weight is below the average weight .",
            "sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the model for the car with a weight smaller than the average ?",
        "sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )"
    },
    "interaction": [
        {
            "utterance": "What is the model for the car with a weight smaller than the average ?",
            "sql": "select car_names.model where cars_data.weight < ( select avg ( cars_data.weight ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the makers that produced some cars in the year of 1970 ?",
        "sql": "select distinct car_makers.maker where cars_data.year = value"
    },
    "interaction": [
        {
            "utterance": "Find the name of the makers that produced some cars in the year of 1970 ?",
            "sql": "select distinct car_makers.maker where cars_data.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the name of the different car makers who produced a car in 1970 ?",
        "sql": "select distinct car_makers.maker where cars_data.year = value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the different car makers who produced a car in 1970 ?",
            "sql": "select distinct car_makers.maker where cars_data.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the make and production time of the cars that were produced in the earliest year ?",
        "sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )"
    },
    "interaction": [
        {
            "utterance": "Find the make and production time of the cars that were produced in the earliest year ?",
            "sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What is the maker of the carr produced in the earliest year and what year was it ?",
        "sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )"
    },
    "interaction": [
        {
            "utterance": "What is the maker of the carr produced in the earliest year and what year was it ?",
            "sql": "select car_names.make , cars_data.year where cars_data.year = ( select min ( cars_data.year ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 16,
    "final": {
        "utterance": "Which distinct car models are the produced after 1980 ?",
        "sql": "select distinct model_list.model where cars_data.year > value"
    },
    "interaction": [
        {
            "utterance": "Which distinct car models are the produced after 1980 ?",
            "sql": "select distinct model_list.model where cars_data.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the different models for the cards produced after 1980 ?",
        "sql": "select distinct model_list.model where cars_data.year > value"
    },
    "interaction": [
        {
            "utterance": "What are the different models for the cards produced after 1980 ?",
            "sql": "select distinct model_list.model where cars_data.year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many car makers are there in each continents ? List the continent name and the count .",
        "sql": "select continents.continent , count ( * ) group_by continents.continent"
    },
    "interaction": [
        {
            "utterance": "How many car makers are there in each continents ? List the continent name and the count .",
            "sql": "select continents.continent , count ( * ) group_by continents.continent"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the name of each continent and how many car makers are there in each one ?",
        "sql": "select continents.continent , count ( * ) group_by continents.continent"
    },
    "interaction": [
        {
            "utterance": "What is the name of each continent and how many car makers are there in each one ?",
            "sql": "select continents.continent , count ( * ) group_by continents.continent"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which of the countries has the most car makers ? List the country name .",
        "sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which of the countries has the most car makers ? List the country name .",
            "sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the name of the country with the most car makers ?",
        "sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the country with the most car makers ?",
            "sql": "select countries.countryname group_by car_makers.country order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 22,
    "final": {
        "utterance": "How many car models are produced by each maker ? List the count and the maker full name .",
        "sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id"
    },
    "interaction": [
        {
            "utterance": "How many car models are produced by each maker ? List the count and the maker full name .",
            "sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What is the number of car models that are produced by each maker and what is the id and full name of each maker ?",
        "sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id"
    },
    "interaction": [
        {
            "utterance": "What is the number of car models that are produced by each maker and what is the id and full name of each maker ?",
            "sql": "select count ( * ) , car_makers.fullname , car_makers.id group_by car_makers.id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the accelerate of the car make amc hornet sportabout ( sw ) ?",
        "sql": "select cars_data.accelerate where car_names.make = value"
    },
    "interaction": [
        {
            "utterance": "What is the accelerate of the car make amc hornet sportabout ( sw ) ?",
            "sql": "select cars_data.accelerate where car_names.make = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 25,
    "final": {
        "utterance": "How much does the car accelerate that makes amc hornet sportabout ( sw ) ?",
        "sql": "select cars_data.accelerate where car_names.make = value"
    },
    "interaction": [
        {
            "utterance": "How much does the car accelerate that makes amc hornet sportabout ( sw ) ?",
            "sql": "select cars_data.accelerate where car_names.make = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many car makers are there in france ?",
        "sql": "select count ( * ) where countries.countryname = value"
    },
    "interaction": [
        {
            "utterance": "How many car makers are there in france ?",
            "sql": "select count ( * ) where countries.countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the number of makers of care in France ?",
        "sql": "select count ( * ) where countries.countryname = value"
    },
    "interaction": [
        {
            "utterance": "What is the number of makers of care in France ?",
            "sql": "select count ( * ) where countries.countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 28,
    "final": {
        "utterance": "How many car models are produced in the usa ?",
        "sql": "select count ( * ) where countries.countryname = value"
    },
    "interaction": [
        {
            "utterance": "How many car models are produced in the usa ?",
            "sql": "select count ( * ) where countries.countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 29,
    "final": {
        "utterance": "What is the count of the car models produced in the United States ?",
        "sql": "select count ( * ) where countries.countryname = value"
    },
    "interaction": [
        {
            "utterance": "What is the count of the car models produced in the United States ?",
            "sql": "select count ( * ) where countries.countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 30,
    "final": {
        "utterance": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders ?",
        "sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value"
    },
    "interaction": [
        {
            "utterance": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders ?",
            "sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the average miles per gallon of all the cards with 4 cylinders ?",
        "sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value"
    },
    "interaction": [
        {
            "utterance": "What is the average miles per gallon of all the cards with 4 cylinders ?",
            "sql": "select avg ( cars_data.mpg ) where cars_data.cylinders = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the minimu weight of the car with 8 cylinders produced in 1974 ?",
        "sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the minimu weight of the car with 8 cylinders produced in 1974 ?",
            "sql": "select cars_data.weight where cars_data.cylinders = value and cars_data.year = value order_by cars_data.weight asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What are all the makers and models ?",
        "sql": "select model_list.maker , model_list.model"
    },
    "interaction": [
        {
            "utterance": "What are all the makers and models ?",
            "sql": "select model_list.maker , model_list.model"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 35,
    "final": {
        "utterance": "What are the makers and models ?",
        "sql": "select model_list.maker , model_list.model"
    },
    "interaction": [
        {
            "utterance": "What are the makers and models ?",
            "sql": "select model_list.maker , model_list.model"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 36,
    "final": {
        "utterance": "What are the countries having at least one car maker ? List name and id .",
        "sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the countries having at least one car maker ? List name and id .",
            "sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 37,
    "final": {
        "utterance": "What are the names and ids of all countries with at least one car maker ?",
        "sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the names and ids of all countries with at least one car maker ?",
            "sql": "select countries.countryname , countries.countryid group_by countries.countryid having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is the number of the cars with horsepower more than 150 ?",
        "sql": "select count ( cars_data.* ) where cars_data.horsepower > value"
    },
    "interaction": [
        {
            "utterance": "What is the number of the cars with horsepower more than 150 ?",
            "sql": "select count ( cars_data.* ) where cars_data.horsepower > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 39,
    "final": {
        "utterance": "What is the number of cars with a horsepower greater than 150 ?",
        "sql": "select count ( cars_data.* ) where cars_data.horsepower > value"
    },
    "interaction": [
        {
            "utterance": "What is the number of cars with a horsepower greater than 150 ?",
            "sql": "select count ( cars_data.* ) where cars_data.horsepower > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 40,
    "final": {
        "utterance": "What is the average weight of cars each year ?",
        "sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year"
    },
    "interaction": [
        {
            "utterance": "What is the average weight of cars each year ?",
            "sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 41,
    "final": {
        "utterance": "What is the average weight and year for each year ?",
        "sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year"
    },
    "interaction": [
        {
            "utterance": "What is the average weight and year for each year ?",
            "sql": "select avg ( cars_data.weight ) , cars_data.year group_by cars_data.year"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 42,
    "final": {
        "utterance": "Which countries in europe have at least 3 car manufacturers ?",
        "sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Which countries in europe have at least 3 car manufacturers ?",
            "sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the names of all European countries with at least 3 manufacturers ?",
        "sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of all European countries with at least 3 manufacturers ?",
            "sql": "select countries.countryname where continents.continent = value group_by countries.countryname having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What is the maximum horsepower and the make of the car models with 3 cylinders ?",
        "sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the maximum horsepower and the make of the car models with 3 cylinders ?",
            "sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 45,
    "final": {
        "utterance": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it ?",
        "sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it ?",
            "sql": "select cars_data.horsepower , car_names.make where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 46,
    "final": {
        "utterance": "Which model saves the most gasoline ? That is to say , have the maximum miles per gallon .",
        "sql": "select car_names.model order_by cars_data.mpg desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which model saves the most gasoline ? That is to say , have the maximum miles per gallon .",
            "sql": "select car_names.model order_by cars_data.mpg desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 47,
    "final": {
        "utterance": "What is the car wmodel with the highest mpg ?",
        "sql": "select car_names.model order_by cars_data.mpg desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the car wmodel with the highest mpg ?",
            "sql": "select car_names.model order_by cars_data.mpg desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 48,
    "final": {
        "utterance": "What is the average horsepower of the cars before 1980 ?",
        "sql": "select avg ( cars_data.horsepower ) where cars_data.year < value"
    },
    "interaction": [
        {
            "utterance": "What is the average horsepower of the cars before 1980 ?",
            "sql": "select avg ( cars_data.horsepower ) where cars_data.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 49,
    "final": {
        "utterance": "What is the average horsepower for all cards produced before 1980 ?",
        "sql": "select avg ( cars_data.horsepower ) where cars_data.year < value"
    },
    "interaction": [
        {
            "utterance": "What is the average horsepower for all cards produced before 1980 ?",
            "sql": "select avg ( cars_data.horsepower ) where cars_data.year < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 50,
    "final": {
        "utterance": "What is the average edispl of the cars of model volvo ?",
        "sql": "select avg ( cars_data.edispl ) where car_names.model = value"
    },
    "interaction": [
        {
            "utterance": "What is the average edispl of the cars of model volvo ?",
            "sql": "select avg ( cars_data.edispl ) where car_names.model = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 51,
    "final": {
        "utterance": "What is the average edispl for all volvos ?",
        "sql": "select avg ( cars_data.edispl ) where car_names.model = value"
    },
    "interaction": [
        {
            "utterance": "What is the average edispl for all volvos ?",
            "sql": "select avg ( cars_data.edispl ) where car_names.model = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 52,
    "final": {
        "utterance": "What is the maximum accelerate for different number of cylinders ?",
        "sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders"
    },
    "interaction": [
        {
            "utterance": "What is the maximum accelerate for different number of cylinders ?",
            "sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 53,
    "final": {
        "utterance": "What is the maximum accelerate for all the different cylinders ?",
        "sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders"
    },
    "interaction": [
        {
            "utterance": "What is the maximum accelerate for all the different cylinders ?",
            "sql": "select max ( cars_data.accelerate ) , cars_data.cylinders group_by cars_data.cylinders"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 54,
    "final": {
        "utterance": "Which model has the most version ( make ) of cars ?",
        "sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which model has the most version ( make ) of cars ?",
            "sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 55,
    "final": {
        "utterance": "What model has the most different versions ?",
        "sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What model has the most different versions ?",
            "sql": "select car_names.model group_by car_names.model order_by count ( car_names.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 56,
    "final": {
        "utterance": "How many cars have more than 4 cylinders ?",
        "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
    },
    "interaction": [
        {
            "utterance": "How many cars have more than 4 cylinders ?",
            "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 57,
    "final": {
        "utterance": "What is the number of cars with more than 4 cylinders ?",
        "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
    },
    "interaction": [
        {
            "utterance": "What is the number of cars with more than 4 cylinders ?",
            "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 58,
    "final": {
        "utterance": "how many cars were produced in 1980 ?",
        "sql": "select count ( cars_data.* ) where cars_data.year = value"
    },
    "interaction": [
        {
            "utterance": "how many cars were produced in 1980 ?",
            "sql": "select count ( cars_data.* ) where cars_data.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 59,
    "final": {
        "utterance": "In 1980 , how many cars were made ?",
        "sql": "select count ( cars_data.* ) where cars_data.year = value"
    },
    "interaction": [
        {
            "utterance": "In 1980 , how many cars were made ?",
            "sql": "select count ( cars_data.* ) where cars_data.year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 60,
    "final": {
        "utterance": "How many car models were produced by the maker with full name American Motor Company ?",
        "sql": "select count ( * ) where car_makers.fullname = value"
    },
    "interaction": [
        {
            "utterance": "How many car models were produced by the maker with full name American Motor Company ?",
            "sql": "select count ( * ) where car_makers.fullname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 61,
    "final": {
        "utterance": "What is the number of car models created by the car maker American Motor Company ?",
        "sql": "select count ( * ) where car_makers.fullname = value"
    },
    "interaction": [
        {
            "utterance": "What is the number of car models created by the car maker American Motor Company ?",
            "sql": "select count ( * ) where car_makers.fullname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 62,
    "final": {
        "utterance": "Which makers designed more than 3 car models ? List full name and the id .",
        "sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Which makers designed more than 3 car models ? List full name and the id .",
            "sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 63,
    "final": {
        "utterance": "What are the names and ids of all makers with more than 3 models ?",
        "sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the names and ids of all makers with more than 3 models ?",
            "sql": "select car_makers.fullname , car_makers.id group_by car_makers.id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 64,
    "final": {
        "utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500 ?",
        "sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value"
    },
    "interaction": [
        {
            "utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500 ?",
            "sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 65,
    "final": {
        "utterance": "What are the different models created by either the car maker General Motors or weighed more than 3500 ?",
        "sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value"
    },
    "interaction": [
        {
            "utterance": "What are the different models created by either the car maker General Motors or weighed more than 3500 ?",
            "sql": "select distinct model_list.model where car_makers.fullname = value or cars_data.weight > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 66,
    "final": {
        "utterance": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value"
    },
    "interaction": [
        {
            "utterance": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 67,
    "final": {
        "utterance": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value"
    },
    "interaction": [
        {
            "utterance": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "sql": "select distinct cars_data.year where cars_data.weight > value and cars_data.weight < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 68,
    "final": {
        "utterance": "What is the horsepower of the car with the largest accelerate ?",
        "sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the horsepower of the car with the largest accelerate ?",
            "sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 69,
    "final": {
        "utterance": "What is the horsepower of the car with the greatest accelerate ?",
        "sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the horsepower of the car with the greatest accelerate ?",
            "sql": "select cars_data.horsepower order_by cars_data.accelerate desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 70,
    "final": {
        "utterance": "For model volvo , how many cylinders does the car with the least accelerate have ?",
        "sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value"
    },
    "interaction": [
        {
            "utterance": "For model volvo , how many cylinders does the car with the least accelerate have ?",
            "sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 71,
    "final": {
        "utterance": "For a volvo model , how many cylinders does the version with least accelerate have ?",
        "sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value"
    },
    "interaction": [
        {
            "utterance": "For a volvo model , how many cylinders does the version with least accelerate have ?",
            "sql": "select cars_data.cylinders where car_names.model = value order_by cars_data.accelerate asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 72,
    "final": {
        "utterance": "How many cars have a larger accelerate than the car with the largest horsepower ?",
        "sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )"
    },
    "interaction": [
        {
            "utterance": "How many cars have a larger accelerate than the car with the largest horsepower ?",
            "sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 73,
    "final": {
        "utterance": "What is the number of cars with a greater accelerate than the one with the most horsepower ?",
        "sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )"
    },
    "interaction": [
        {
            "utterance": "What is the number of cars with a greater accelerate than the one with the most horsepower ?",
            "sql": "select count ( cars_data.* ) where cars_data.accelerate > ( select cars_data.accelerate order_by cars_data.horsepower desc limit_value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 74,
    "final": {
        "utterance": "How many countries has more than 2 car makers ?",
        "sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )"
    },
    "interaction": [
        {
            "utterance": "How many countries has more than 2 car makers ?",
            "sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 75,
    "final": {
        "utterance": "What is the number of countries with more than 2 car makers ?",
        "sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )"
    },
    "interaction": [
        {
            "utterance": "What is the number of countries with more than 2 car makers ?",
            "sql": "select count ( * ) ( select countries.countryid , count ( * ) group_by countries.countryid having count ( * ) > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 76,
    "final": {
        "utterance": "How many cars has over 6 cylinders ?",
        "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
    },
    "interaction": [
        {
            "utterance": "How many cars has over 6 cylinders ?",
            "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 77,
    "final": {
        "utterance": "What is the number of carsw ith over 6 cylinders ?",
        "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
    },
    "interaction": [
        {
            "utterance": "What is the number of carsw ith over 6 cylinders ?",
            "sql": "select count ( cars_data.* ) where cars_data.cylinders > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 78,
    "final": {
        "utterance": "For the cars with 4 cylinders , which model has the largest horsepower ?",
        "sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
    },
    "interaction": [
        {
            "utterance": "For the cars with 4 cylinders , which model has the largest horsepower ?",
            "sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 79,
    "final": {
        "utterance": "For all of the 4 cylinder cars , which model has the most horsepower ?",
        "sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
    },
    "interaction": [
        {
            "utterance": "For all of the 4 cylinder cars , which model has the most horsepower ?",
            "sql": "select car_names.model where cars_data.cylinders = value order_by cars_data.horsepower desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 80,
    "final": {
        "utterance": "Among the cars with more than lowest horsepower , which ones do not have more than 3 cylinders ? List the car makeid and make name .",
        "sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value"
    },
    "interaction": [
        {
            "utterance": "Among the cars with more than lowest horsepower , which ones do not have more than 3 cylinders ? List the car makeid and make name .",
            "sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 81,
    "final": {
        "utterance": "Among the cars that do not have the minimum horsepower , what are the make ids and names of al those with less than 4 cylinders ?",
        "sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value"
    },
    "interaction": [
        {
            "utterance": "Among the cars that do not have the minimum horsepower , what are the make ids and names of al those with less than 4 cylinders ?",
            "sql": "select car_names.makeid , car_names.make where cars_data.horsepower > ( select min ( cars_data.horsepower ) ) and cars_data.cylinders < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 82,
    "final": {
        "utterance": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 83,
    "final": {
        "utterance": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "sql": "select cars_data.mpg where cars_data.cylinders = value or cars_data.year < value order_by cars_data.mpg desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 84,
    "final": {
        "utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company ' ?",
        "sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value"
    },
    "interaction": [
        {
            "utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company ' ?",
            "sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 85,
    "final": {
        "utterance": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company ?",
        "sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value"
    },
    "interaction": [
        {
            "utterance": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company ?",
            "sql": "select distinct model_list.model where cars_data.weight < value and car_makers.fullname != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 86,
    "final": {
        "utterance": "What are the name of the countries where there is not a single car maker ?",
        "sql": "select countries.countryname except select countries.countryname"
    },
    "interaction": [
        {
            "utterance": "What are the name of the countries where there is not a single car maker ?",
            "sql": "select countries.countryname except select countries.countryname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 87,
    "final": {
        "utterance": "What are the names of the countries with no car makers ?",
        "sql": "select countries.countryname except select countries.countryname"
    },
    "interaction": [
        {
            "utterance": "What are the names of the countries with no car makers ?",
            "sql": "select countries.countryname except select countries.countryname"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 88,
    "final": {
        "utterance": "Which are the car makers which produce at least 2 models and more than 3 car makes ? List the id and the maker .",
        "sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Which are the car makers which produce at least 2 models and more than 3 car makes ? List the id and the maker .",
            "sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 89,
    "final": {
        "utterance": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars ?",
        "sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars ?",
            "sql": "select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > = value intersect select car_makers.id , car_makers.maker group_by car_makers.id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 90,
    "final": {
        "utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat ' model ?",
        "sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value"
    },
    "interaction": [
        {
            "utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat ' model ?",
            "sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 91,
    "final": {
        "utterance": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats ?",
        "sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats ?",
            "sql": "select countries.countryid , countries.countryname group_by countries.countryid having count ( * ) > value union select countries.countryid , countries.countryname where model_list.model = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of all the countries that became independent after 1950 ?",
        "sql": "select country.name where country.indepyear > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of all the countries that became independent after 1950 ?",
            "sql": "select country.name where country.indepyear > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Give the names of the nations that were founded after 1950 .",
        "sql": "select country.name where country.indepyear > value"
    },
    "interaction": [
        {
            "utterance": "Give the names of the nations that were founded after 1950 .",
            "sql": "select country.name where country.indepyear > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many countries have a republic as their form of government ?",
        "sql": "select count ( country.* ) where country.governmentform = value"
    },
    "interaction": [
        {
            "utterance": "How many countries have a republic as their form of government ?",
            "sql": "select count ( country.* ) where country.governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 3,
    "final": {
        "utterance": "How many countries have governments that are republics ?",
        "sql": "select count ( country.* ) where country.governmentform = value"
    },
    "interaction": [
        {
            "utterance": "How many countries have governments that are republics ?",
            "sql": "select count ( country.* ) where country.governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the total surface area of the countries in the Caribbean region ?",
        "sql": "select sum ( country.surfacearea ) where country.region = value"
    },
    "interaction": [
        {
            "utterance": "What is the total surface area of the countries in the Caribbean region ?",
            "sql": "select sum ( country.surfacearea ) where country.region = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 5,
    "final": {
        "utterance": "How much surface area do the countires in the Carribean cover together ?",
        "sql": "select sum ( country.surfacearea ) where country.region = value"
    },
    "interaction": [
        {
            "utterance": "How much surface area do the countires in the Carribean cover together ?",
            "sql": "select sum ( country.surfacearea ) where country.region = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which continent is Anguilla in ?",
        "sql": "select country.continent where country.name = value"
    },
    "interaction": [
        {
            "utterance": "Which continent is Anguilla in ?",
            "sql": "select country.continent where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the continent name which Anguilla belongs to ?",
        "sql": "select country.continent where country.name = value"
    },
    "interaction": [
        {
            "utterance": "What is the continent name which Anguilla belongs to ?",
            "sql": "select country.continent where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which region is the city Kabul located in ?",
        "sql": "select country.region where city.name = value"
    },
    "interaction": [
        {
            "utterance": "Which region is the city Kabul located in ?",
            "sql": "select country.region where city.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 9,
    "final": {
        "utterance": "What region is Kabul in ?",
        "sql": "select country.region where city.name = value"
    },
    "interaction": [
        {
            "utterance": "What region is Kabul in ?",
            "sql": "select country.region where city.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Which language is the most popular in Aruba ?",
        "sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which language is the most popular in Aruba ?",
            "sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What language is predominantly spoken in Aruba ?",
        "sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What language is predominantly spoken in Aruba ?",
            "sql": "select countrylanguage.language where country.name = value order_by countrylanguage.percentage desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 12,
    "final": {
        "utterance": "What are the population and life expectancies in Brazil ?",
        "sql": "select country.population , country.lifeexpectancy where country.name = value"
    },
    "interaction": [
        {
            "utterance": "What are the population and life expectancies in Brazil ?",
            "sql": "select country.population , country.lifeexpectancy where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Give me Brazil\u2019s population and life expectancies .",
        "sql": "select country.population , country.lifeexpectancy where country.name = value"
    },
    "interaction": [
        {
            "utterance": "Give me Brazil\u2019s population and life expectancies .",
            "sql": "select country.population , country.lifeexpectancy where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the region and population of Angola ?",
        "sql": "select country.population , country.region where country.name = value"
    },
    "interaction": [
        {
            "utterance": "What are the region and population of Angola ?",
            "sql": "select country.population , country.region where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What region does Angola belong to and what is its population ?",
        "sql": "select country.population , country.region where country.name = value"
    },
    "interaction": [
        {
            "utterance": "What region does Angola belong to and what is its population ?",
            "sql": "select country.population , country.region where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the average expected life expectancy for countries in the region of Central Africa ?",
        "sql": "select avg ( country.lifeexpectancy ) where country.region = value"
    },
    "interaction": [
        {
            "utterance": "What is the average expected life expectancy for countries in the region of Central Africa ?",
            "sql": "select avg ( country.lifeexpectancy ) where country.region = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 17,
    "final": {
        "utterance": "How long is the people\u2019s average life expectancy in Central Africa ?",
        "sql": "select avg ( country.lifeexpectancy ) where country.region = value"
    },
    "interaction": [
        {
            "utterance": "How long is the people\u2019s average life expectancy in Central Africa ?",
            "sql": "select avg ( country.lifeexpectancy ) where country.region = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 18,
    "final": {
        "utterance": "What is the name of country that has the shortest life expectancy in Asia ?",
        "sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of country that has the shortest life expectancy in Asia ?",
            "sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 19,
    "final": {
        "utterance": "Give the name of the country in Asia with the lowest life expectancy .",
        "sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the name of the country in Asia with the lowest life expectancy .",
            "sql": "select country.name where country.continent = value order_by country.lifeexpectancy limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 20,
    "final": {
        "utterance": "What is the total population and maximum GNP in Asia ?",
        "sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value"
    },
    "interaction": [
        {
            "utterance": "What is the total population and maximum GNP in Asia ?",
            "sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 21,
    "final": {
        "utterance": "How many people live in Asia , and what is the largest GNP among them ?",
        "sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value"
    },
    "interaction": [
        {
            "utterance": "How many people live in Asia , and what is the largest GNP among them ?",
            "sql": "select sum ( country.population ) , max ( country.gnp ) where country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the average life expectancy in African countries that are republics ?",
        "sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value"
    },
    "interaction": [
        {
            "utterance": "What is the average life expectancy in African countries that are republics ?",
            "sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 23,
    "final": {
        "utterance": "Give the average life expectancy for countries in Africa which are republics ?",
        "sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value"
    },
    "interaction": [
        {
            "utterance": "Give the average life expectancy for countries in Africa which are republics ?",
            "sql": "select avg ( country.lifeexpectancy ) where country.continent = value and country.governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the total surface area of the continents Asia and Europe ?",
        "sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value"
    },
    "interaction": [
        {
            "utterance": "What is the total surface area of the continents Asia and Europe ?",
            "sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Give the total surface area covered by countries in Asia or Europe .",
        "sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value"
    },
    "interaction": [
        {
            "utterance": "Give the total surface area covered by countries in Asia or Europe .",
            "sql": "select sum ( country.surfacearea ) where country.continent = value or country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 26,
    "final": {
        "utterance": "How many people live in Gelderland district ?",
        "sql": "select sum ( city.population ) where city.district = value"
    },
    "interaction": [
        {
            "utterance": "How many people live in Gelderland district ?",
            "sql": "select sum ( city.population ) where city.district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What is the total population of Gelderland district ?",
        "sql": "select sum ( city.population ) where city.district = value"
    },
    "interaction": [
        {
            "utterance": "What is the total population of Gelderland district ?",
            "sql": "select sum ( city.population ) where city.district = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 28,
    "final": {
        "utterance": "What is the average GNP and total population in all nations whose government is US territory ?",
        "sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value"
    },
    "interaction": [
        {
            "utterance": "What is the average GNP and total population in all nations whose government is US territory ?",
            "sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Give the mean GNP and total population of nations which are considered US territory .",
        "sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value"
    },
    "interaction": [
        {
            "utterance": "Give the mean GNP and total population of nations which are considered US territory .",
            "sql": "select avg ( country.gnp ) , sum ( country.population ) where country.governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 30,
    "final": {
        "utterance": "How many unique languages are spoken in the world ?",
        "sql": "select count ( distinct countrylanguage.language )"
    },
    "interaction": [
        {
            "utterance": "How many unique languages are spoken in the world ?",
            "sql": "select count ( distinct countrylanguage.language )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the number of distinct languages used around the world ?",
        "sql": "select count ( distinct countrylanguage.language )"
    },
    "interaction": [
        {
            "utterance": "What is the number of distinct languages used around the world ?",
            "sql": "select count ( distinct countrylanguage.language )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 32,
    "final": {
        "utterance": "How many type of governments are in Africa ?",
        "sql": "select count ( distinct country.governmentform ) where country.continent = value"
    },
    "interaction": [
        {
            "utterance": "How many type of governments are in Africa ?",
            "sql": "select count ( distinct country.governmentform ) where country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 33,
    "final": {
        "utterance": "How many different forms of governments are there in Africa ?",
        "sql": "select count ( distinct country.governmentform ) where country.continent = value"
    },
    "interaction": [
        {
            "utterance": "How many different forms of governments are there in Africa ?",
            "sql": "select count ( distinct country.governmentform ) where country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the total number of languages used in Aruba ?",
        "sql": "select count ( countrylanguage.language ) where country.name = value"
    },
    "interaction": [
        {
            "utterance": "What is the total number of languages used in Aruba ?",
            "sql": "select count ( countrylanguage.language ) where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 35,
    "final": {
        "utterance": "How many languages are spoken in Aruba ?",
        "sql": "select count ( countrylanguage.language ) where country.name = value"
    },
    "interaction": [
        {
            "utterance": "How many languages are spoken in Aruba ?",
            "sql": "select count ( countrylanguage.language ) where country.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 36,
    "final": {
        "utterance": "How many official languages does Afghanistan have ?",
        "sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "How many official languages does Afghanistan have ?",
            "sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 37,
    "final": {
        "utterance": "How many official languages are spoken in Afghanistan ?",
        "sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "How many official languages are spoken in Afghanistan ?",
            "sql": "select count ( * ) where country.name = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 38,
    "final": {
        "utterance": "What is name of the country that speaks the largest number of languages ?",
        "sql": "select country.name group_by country.name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is name of the country that speaks the largest number of languages ?",
            "sql": "select country.name group_by country.name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 39,
    "final": {
        "utterance": "Give the name of the nation that uses the greatest amount of languages .",
        "sql": "select country.name group_by country.name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the name of the nation that uses the greatest amount of languages .",
            "sql": "select country.name group_by country.name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 40,
    "final": {
        "utterance": "Which continent has the most diverse languages ?",
        "sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which continent has the most diverse languages ?",
            "sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 41,
    "final": {
        "utterance": "Which continent speaks the most languages ?",
        "sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which continent speaks the most languages ?",
            "sql": "select country.continent group_by country.continent order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 42,
    "final": {
        "utterance": "How many countries speak both English and Dutch ?",
        "sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )"
    },
    "interaction": [
        {
            "utterance": "How many countries speak both English and Dutch ?",
            "sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 43,
    "final": {
        "utterance": "What is the number of nations that use English and Dutch ?",
        "sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )"
    },
    "interaction": [
        {
            "utterance": "What is the number of nations that use English and Dutch ?",
            "sql": "select count ( * ) ( select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 44,
    "final": {
        "utterance": "What are the names of nations speak both English and French ?",
        "sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of nations speak both English and French ?",
            "sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 45,
    "final": {
        "utterance": "Give the names of nations that speak both English and French .",
        "sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "Give the names of nations that speak both English and French .",
            "sql": "select country.name where countrylanguage.language = value intersect select country.name where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 46,
    "final": {
        "utterance": "What are the names of nations where both English and French are official languages ?",
        "sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of nations where both English and French are official languages ?",
            "sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 47,
    "final": {
        "utterance": "Give the names of countries with English and French as official languages .",
        "sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "Give the names of countries with English and French as official languages .",
            "sql": "select country.name where countrylanguage.language = value and countrylanguage.isofficial = value intersect select country.name where countrylanguage.language = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 48,
    "final": {
        "utterance": "What is the number of distinct continents where Chinese is spoken ?",
        "sql": "select count ( distinct country.continent ) where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "What is the number of distinct continents where Chinese is spoken ?",
            "sql": "select count ( distinct country.continent ) where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 49,
    "final": {
        "utterance": "How many continents speak Chinese ?",
        "sql": "select count ( distinct country.continent ) where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "How many continents speak Chinese ?",
            "sql": "select count ( distinct country.continent ) where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 50,
    "final": {
        "utterance": "What are the regions that use English or Dutch ?",
        "sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "What are the regions that use English or Dutch ?",
            "sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 51,
    "final": {
        "utterance": "Which regions speak Dutch or English ?",
        "sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "Which regions speak Dutch or English ?",
            "sql": "select distinct country.region where countrylanguage.language = value or countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 52,
    "final": {
        "utterance": "What are the countries where either English or Dutch is the official language ?",
        "sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "What are the countries where either English or Dutch is the official language ?",
            "sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 53,
    "final": {
        "utterance": "Which countries have either English or Dutch as an official language ?",
        "sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "Which countries have either English or Dutch as an official language ?",
            "sql": "select * where countrylanguage.language = value and countrylanguage.isofficial = value union select * where countrylanguage.language = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 54,
    "final": {
        "utterance": "Which language is the most popular on the Asian continent ?",
        "sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which language is the most popular on the Asian continent ?",
            "sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 55,
    "final": {
        "utterance": "What is the language that is used by the largest number of Asian nations ?",
        "sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the language that is used by the largest number of Asian nations ?",
            "sql": "select countrylanguage.language where country.continent = value group_by countrylanguage.language order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 56,
    "final": {
        "utterance": "Which languages are spoken by only one country in republic governments ?",
        "sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value"
    },
    "interaction": [
        {
            "utterance": "Which languages are spoken by only one country in republic governments ?",
            "sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 57,
    "final": {
        "utterance": "What languages are only used by a single country with a republic government ?",
        "sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value"
    },
    "interaction": [
        {
            "utterance": "What languages are only used by a single country with a republic government ?",
            "sql": "select countrylanguage.language where country.governmentform = value group_by countrylanguage.language having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 58,
    "final": {
        "utterance": "Find the city with the largest population that uses English .",
        "sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the city with the largest population that uses English .",
            "sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 59,
    "final": {
        "utterance": "What is the most populace city that speaks English ?",
        "sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the most populace city that speaks English ?",
            "sql": "select city.name , city.population where countrylanguage.language = value order_by city.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 60,
    "final": {
        "utterance": "Find the name , population and expected life length of asian country with the largest area ?",
        "sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the name , population and expected life length of asian country with the largest area ?",
            "sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 61,
    "final": {
        "utterance": "What are the name , population , and life expectancy of the largest Asian country by land ?",
        "sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the name , population , and life expectancy of the largest Asian country by land ?",
            "sql": "select country.name , country.population , country.lifeexpectancy where country.continent = value order_by country.surfacearea desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 62,
    "final": {
        "utterance": "What is average life expectancy in the countries where English is not the official language ?",
        "sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )"
    },
    "interaction": [
        {
            "utterance": "What is average life expectancy in the countries where English is not the official language ?",
            "sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 63,
    "final": {
        "utterance": "Give the mean life expectancy of countries in which English is not the official language .",
        "sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )"
    },
    "interaction": [
        {
            "utterance": "Give the mean life expectancy of countries in which English is not the official language .",
            "sql": "select avg ( country.lifeexpectancy ) where country.name not in ( select country.name where countrylanguage.language = value and countrylanguage.isofficial = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 64,
    "final": {
        "utterance": "What is the total number of people living in the nations that do not use English ?",
        "sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )"
    },
    "interaction": [
        {
            "utterance": "What is the total number of people living in the nations that do not use English ?",
            "sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 65,
    "final": {
        "utterance": "How many people live in countries that do not speak English ?",
        "sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )"
    },
    "interaction": [
        {
            "utterance": "How many people live in countries that do not speak English ?",
            "sql": "select sum ( country.population ) where country.name not in ( select country.name where countrylanguage.language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 66,
    "final": {
        "utterance": "What is the official language spoken in the country whose head of state is Beatrix ?",
        "sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "What is the official language spoken in the country whose head of state is Beatrix ?",
            "sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 67,
    "final": {
        "utterance": "What is the official language used in the country the name of whose head of state is Beatrix .",
        "sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "What is the official language used in the country the name of whose head of state is Beatrix .",
            "sql": "select countrylanguage.language where country.headofstate = value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 68,
    "final": {
        "utterance": "What is the total number of unique official languages spoken in the countries that are founded before 1930 ?",
        "sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "What is the total number of unique official languages spoken in the countries that are founded before 1930 ?",
            "sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 69,
    "final": {
        "utterance": "For the countries founded before 1930 , what is the total number of distinct official languages ?",
        "sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value"
    },
    "interaction": [
        {
            "utterance": "For the countries founded before 1930 , what is the total number of distinct official languages ?",
            "sql": "select count ( distinct countrylanguage.language ) where country.indepyear < value and countrylanguage.isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 70,
    "final": {
        "utterance": "What are the countries that have greater surface area than any country in Europe ?",
        "sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )"
    },
    "interaction": [
        {
            "utterance": "What are the countries that have greater surface area than any country in Europe ?",
            "sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 71,
    "final": {
        "utterance": "Which countries have greater area than that of any country in Europe ?",
        "sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )"
    },
    "interaction": [
        {
            "utterance": "Which countries have greater area than that of any country in Europe ?",
            "sql": "select country.name where country.surfacearea > ( select min ( country.surfacearea ) where country.continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 72,
    "final": {
        "utterance": "What are the African countries that have a population less than any country in Asia ?",
        "sql": "select country.name where country.continent = value and country.population < ( select max ( country.population ) where country.continent = value )"
    },
    "interaction": [
        {
            "utterance": "What are the African countries that have a population less than any country in Asia ?",
            "sql": "select country.name where country.continent = value and country.population < ( select max ( country.population ) where country.continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 73,
    "final": {
        "utterance": "Which African countries have a smaller population than that of any country in Asia ?",
        "sql": "select country.name where country.continent = value and country.population < ( select min ( country.population ) where country.continent = value )"
    },
    "interaction": [
        {
            "utterance": "Which African countries have a smaller population than that of any country in Asia ?",
            "sql": "select country.name where country.continent = value and country.population < ( select min ( country.population ) where country.continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 74,
    "final": {
        "utterance": "Which Asian countries have a population that is larger than any country in Africa ?",
        "sql": "select country.name where country.continent = value and country.population > ( select max ( country.population ) where country.continent = value )"
    },
    "interaction": [
        {
            "utterance": "Which Asian countries have a population that is larger than any country in Africa ?",
            "sql": "select country.name where country.continent = value and country.population > ( select max ( country.population ) where country.continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 75,
    "final": {
        "utterance": "What are the Asian countries which have a population larger than that of any country in Africa ?",
        "sql": "select country.name where country.continent = value and country.population > ( select min ( country.population ) where country.continent = value )"
    },
    "interaction": [
        {
            "utterance": "What are the Asian countries which have a population larger than that of any country in Africa ?",
            "sql": "select country.name where country.continent = value and country.population > ( select min ( country.population ) where country.continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 76,
    "final": {
        "utterance": "What are the country codes for countries that do not speak English ?",
        "sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "What are the country codes for countries that do not speak English ?",
            "sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 77,
    "final": {
        "utterance": "Return the country codes for countries that do not speak English .",
        "sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "Return the country codes for countries that do not speak English .",
            "sql": "select countrylanguage.countrycode except select countrylanguage.countrycode where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 78,
    "final": {
        "utterance": "What are the country codes of countries where people use languages other than English ?",
        "sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value"
    },
    "interaction": [
        {
            "utterance": "What are the country codes of countries where people use languages other than English ?",
            "sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 79,
    "final": {
        "utterance": "Give the country codes for countries in which people speak langauges that are not English .",
        "sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value"
    },
    "interaction": [
        {
            "utterance": "Give the country codes for countries in which people speak langauges that are not English .",
            "sql": "select distinct countrylanguage.countrycode where countrylanguage.language != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 80,
    "final": {
        "utterance": "What are the codes of the countries that do not speak English and whose government forms are not Republic ?",
        "sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "What are the codes of the countries that do not speak English and whose government forms are not Republic ?",
            "sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 81,
    "final": {
        "utterance": "Return the codes of countries that do not speak English and do not have Republics for governments .",
        "sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value"
    },
    "interaction": [
        {
            "utterance": "Return the codes of countries that do not speak English and do not have Republics for governments .",
            "sql": "select country.code where country.governmentform != value except select countrylanguage.countrycode where countrylanguage.language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 82,
    "final": {
        "utterance": "Which cities are in European countries where English is not the official language ?",
        "sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )"
    },
    "interaction": [
        {
            "utterance": "Which cities are in European countries where English is not the official language ?",
            "sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 83,
    "final": {
        "utterance": "What are the names of cities in Europe for which English is not the official language ?",
        "sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )"
    },
    "interaction": [
        {
            "utterance": "What are the names of cities in Europe for which English is not the official language ?",
            "sql": "select distinct city.name where country.continent = value and country.name not in ( select country.name where countrylanguage.isofficial = value and countrylanguage.language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 84,
    "final": {
        "utterance": "Whic`h unique cities are in Asian countries where Chinese is the official language ?",
        "sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value"
    },
    "interaction": [
        {
            "utterance": "Whic`h unique cities are in Asian countries where Chinese is the official language ?",
            "sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 85,
    "final": {
        "utterance": "Return the different names of cities that are in Asia and for which Chinese is the official language .",
        "sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value"
    },
    "interaction": [
        {
            "utterance": "Return the different names of cities that are in Asia and for which Chinese is the official language .",
            "sql": "select distinct city.name where countrylanguage.isofficial = value and countrylanguage.language = value and country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 86,
    "final": {
        "utterance": "What are the name , independence year , and surface area of the country with the smallest population ?",
        "sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the name , independence year , and surface area of the country with the smallest population ?",
            "sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 87,
    "final": {
        "utterance": "Give the name , year of independence , and surface area of the country that has the lowest population .",
        "sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the name , year of independence , and surface area of the country that has the lowest population .",
            "sql": "select country.name , country.surfacearea , country.indepyear order_by country.population limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 88,
    "final": {
        "utterance": "What are the population , name and leader of the country with the largest area ?",
        "sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the population , name and leader of the country with the largest area ?",
            "sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 89,
    "final": {
        "utterance": "Give the name , population , and head of state for the country that has the largest area .",
        "sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the name , population , and head of state for the country that has the largest area .",
            "sql": "select country.name , country.population , country.headofstate order_by country.surfacearea desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 90,
    "final": {
        "utterance": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages .",
        "sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages .",
            "sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 91,
    "final": {
        "utterance": "What are the names of countries that speak more than 2 languages , as well as how many languages they speak ?",
        "sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the names of countries that speak more than 2 languages , as well as how many languages they speak ?",
            "sql": "select count ( countrylanguage.language ) , country.name group_by country.name having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 92,
    "final": {
        "utterance": "Find the number of cities in each district whose population is greater than the average population of cities ?",
        "sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district"
    },
    "interaction": [
        {
            "utterance": "Find the number of cities in each district whose population is greater than the average population of cities ?",
            "sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 93,
    "final": {
        "utterance": "How many cities in each district have a population that is above the average population across all cities ?",
        "sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district"
    },
    "interaction": [
        {
            "utterance": "How many cities in each district have a population that is above the average population across all cities ?",
            "sql": "select count ( city.* ) , city.district where city.population > ( select avg ( city.population ) ) group_by city.district"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 94,
    "final": {
        "utterance": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
        "sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value"
    },
    "interaction": [
        {
            "utterance": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
            "sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 95,
    "final": {
        "utterance": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
        "sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
            "sql": "select sum ( country.population ) , country.governmentform group_by country.governmentform having avg ( country.lifeexpectancy ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 96,
    "final": {
        "utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 ?",
        "sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value"
    },
    "interaction": [
        {
            "utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 ?",
            "sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 97,
    "final": {
        "utterance": "What are the different continents and the total popuation and average life expectancy corresponding to each , for continents that have an average life expectancy less than 72 ?",
        "sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value"
    },
    "interaction": [
        {
            "utterance": "What are the different continents and the total popuation and average life expectancy corresponding to each , for continents that have an average life expectancy less than 72 ?",
            "sql": "select sum ( country.population ) , avg ( country.lifeexpectancy ) , country.continent group_by country.continent having avg ( country.lifeexpectancy ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 98,
    "final": {
        "utterance": "What are the names and areas of countries with the top 5 largest area ?",
        "sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the names and areas of countries with the top 5 largest area ?",
            "sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 99,
    "final": {
        "utterance": "Return the names and surface areas of the 5 largest countries .",
        "sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the names and surface areas of the 5 largest countries .",
            "sql": "select country.name , country.surfacearea order_by country.surfacearea desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 100,
    "final": {
        "utterance": "What are names of countries with the top 3 largest population ?",
        "sql": "select country.name order_by country.population desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are names of countries with the top 3 largest population ?",
            "sql": "select country.name order_by country.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 101,
    "final": {
        "utterance": "Return the names of the 3 most populated countries .",
        "sql": "select country.name order_by country.population desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the names of the 3 most populated countries .",
            "sql": "select country.name order_by country.population desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 102,
    "final": {
        "utterance": "What are the names of the nations with the 3 lowest populations ?",
        "sql": "select country.name order_by country.population asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the nations with the 3 lowest populations ?",
            "sql": "select country.name order_by country.population asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 103,
    "final": {
        "utterance": "Return the names of the 3 countries with the fewest people .",
        "sql": "select country.name order_by country.population asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Return the names of the 3 countries with the fewest people .",
            "sql": "select country.name order_by country.population asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 104,
    "final": {
        "utterance": "how many countries are in Asia ?",
        "sql": "select count ( country.* ) where country.continent = value"
    },
    "interaction": [
        {
            "utterance": "how many countries are in Asia ?",
            "sql": "select count ( country.* ) where country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 105,
    "final": {
        "utterance": "Count the number of countries in Asia .",
        "sql": "select count ( country.* ) where country.continent = value"
    },
    "interaction": [
        {
            "utterance": "Count the number of countries in Asia .",
            "sql": "select count ( country.* ) where country.continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 106,
    "final": {
        "utterance": "What are the names of the countries that are in the continent of Europe and have a population of 80000 ?",
        "sql": "select country.name where country.continent = value and country.population = value"
    },
    "interaction": [
        {
            "utterance": "What are the names of the countries that are in the continent of Europe and have a population of 80000 ?",
            "sql": "select country.name where country.continent = value and country.population = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 107,
    "final": {
        "utterance": "Give the names of countries that are in Europe and have a population equal to 80000 .",
        "sql": "select country.name where country.continent = value and country.population = value"
    },
    "interaction": [
        {
            "utterance": "Give the names of countries that are in Europe and have a population equal to 80000 .",
            "sql": "select country.name where country.continent = value and country.population = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 108,
    "final": {
        "utterance": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value"
    },
    "interaction": [
        {
            "utterance": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
            "sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 109,
    "final": {
        "utterance": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000 .",
        "sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value"
    },
    "interaction": [
        {
            "utterance": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000 .",
            "sql": "select sum ( country.population ) , avg ( country.surfacearea ) where country.continent = value and country.surfacearea > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 110,
    "final": {
        "utterance": "What are the cities whose population is between 160000 and 900000 ?",
        "sql": "select city.name where city.population between value and value"
    },
    "interaction": [
        {
            "utterance": "What are the cities whose population is between 160000 and 900000 ?",
            "sql": "select city.name where city.population between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 111,
    "final": {
        "utterance": "Return the names of cities that have a population between 160000 and 900000 .",
        "sql": "select city.name where city.population between value and value"
    },
    "interaction": [
        {
            "utterance": "Return the names of cities that have a population between 160000 and 900000 .",
            "sql": "select city.name where city.population between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 112,
    "final": {
        "utterance": "Which language is spoken by the largest number of countries ?",
        "sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which language is spoken by the largest number of countries ?",
            "sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 113,
    "final": {
        "utterance": "Give the language that is spoken in the most countries .",
        "sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Give the language that is spoken in the most countries .",
            "sql": "select countrylanguage.language group_by countrylanguage.language order_by count ( countrylanguage.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 114,
    "final": {
        "utterance": "What is the language spoken by the largest percentage of people in each country ?",
        "sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode"
    },
    "interaction": [
        {
            "utterance": "What is the language spoken by the largest percentage of people in each country ?",
            "sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 115,
    "final": {
        "utterance": "What are the country codes of the different countries , and what are the languages spoken by the greatest percentage of people for each ?",
        "sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode"
    },
    "interaction": [
        {
            "utterance": "What are the country codes of the different countries , and what are the languages spoken by the greatest percentage of people for each ?",
            "sql": "select countrylanguage.language , countrylanguage.countrycode , max ( countrylanguage.percentage ) group_by countrylanguage.countrycode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 116,
    "final": {
        "utterance": "What is the total number of countries where Spanish is spoken by the largest percentage of people ?",
        "sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
    },
    "interaction": [
        {
            "utterance": "What is the total number of countries where Spanish is spoken by the largest percentage of people ?",
            "sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 117,
    "final": {
        "utterance": "Count the number of countries for which Spanish is the predominantly spoken language .",
        "sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
    },
    "interaction": [
        {
            "utterance": "Count the number of countries for which Spanish is the predominantly spoken language .",
            "sql": "select count ( countrylanguage.* ) , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 118,
    "final": {
        "utterance": "What are the codes of countries where Spanish is spoken by the largest percentage of people ?",
        "sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
    },
    "interaction": [
        {
            "utterance": "What are the codes of countries where Spanish is spoken by the largest percentage of people ?",
            "sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 119,
    "final": {
        "utterance": "Return the codes of countries for which Spanish is the predominantly spoken language .",
        "sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
    },
    "interaction": [
        {
            "utterance": "Return the codes of countries for which Spanish is the predominantly spoken language .",
            "sql": "select countrylanguage.countrycode , max ( countrylanguage.percentage ) where countrylanguage.language = value group_by countrylanguage.countrycode"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 0,
    "final": {
        "utterance": "what are all the addresses including line 1 and line 2 ?",
        "sql": "select addresses.line_1 , addresses.line_2"
    },
    "interaction": [
        {
            "utterance": "what are all the addresses including line 1 and line 2 ?",
            "sql": "select addresses.line_1 , addresses.line_2"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the first and second line for all addresses ?",
        "sql": "select addresses.line_1 , addresses.line_2"
    },
    "interaction": [
        {
            "utterance": "What is the first and second line for all addresses ?",
            "sql": "select addresses.line_1 , addresses.line_2"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 2,
    "final": {
        "utterance": "How many courses in total are listed ?",
        "sql": "select count ( courses.* )"
    },
    "interaction": [
        {
            "utterance": "How many courses in total are listed ?",
            "sql": "select count ( courses.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 3,
    "final": {
        "utterance": "How many courses are there ?",
        "sql": "select count ( courses.* )"
    },
    "interaction": [
        {
            "utterance": "How many courses are there ?",
            "sql": "select count ( courses.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 4,
    "final": {
        "utterance": "How is the math course described ?",
        "sql": "select courses.course_description where courses.course_name = value"
    },
    "interaction": [
        {
            "utterance": "How is the math course described ?",
            "sql": "select courses.course_description where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the descriptions for all the math courses ?",
        "sql": "select courses.course_description where courses.course_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the descriptions for all the math courses ?",
            "sql": "select courses.course_description where courses.course_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the zip code of the address in the city Port Chelsea ?",
        "sql": "select addresses.zip_postcode where addresses.city = value"
    },
    "interaction": [
        {
            "utterance": "What is the zip code of the address in the city Port Chelsea ?",
            "sql": "select addresses.zip_postcode where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the zip code for Port Chelsea ?",
        "sql": "select addresses.zip_postcode where addresses.city = value"
    },
    "interaction": [
        {
            "utterance": "What is the zip code for Port Chelsea ?",
            "sql": "select addresses.zip_postcode where addresses.city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 8,
    "final": {
        "utterance": "Which department offers the most number of degrees ? List department name and id .",
        "sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which department offers the most number of degrees ? List department name and id .",
            "sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 9,
    "final": {
        "utterance": "For each department id , what is the name of the department with the most number of degrees ?",
        "sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "For each department id , what is the name of the department with the most number of degrees ?",
            "sql": "select departments.department_name , degree_programs.department_id group_by degree_programs.department_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 10,
    "final": {
        "utterance": "How many departments offer any degree ?",
        "sql": "select count ( distinct degree_programs.department_id )"
    },
    "interaction": [
        {
            "utterance": "How many departments offer any degree ?",
            "sql": "select count ( distinct degree_programs.department_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 11,
    "final": {
        "utterance": "How many different departments offer degrees ?",
        "sql": "select count ( distinct degree_programs.department_id )"
    },
    "interaction": [
        {
            "utterance": "How many different departments offer degrees ?",
            "sql": "select count ( distinct degree_programs.department_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 12,
    "final": {
        "utterance": "How many different degree names are offered ?",
        "sql": "select count ( distinct degree_programs.degree_summary_name )"
    },
    "interaction": [
        {
            "utterance": "How many different degree names are offered ?",
            "sql": "select count ( distinct degree_programs.degree_summary_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 13,
    "final": {
        "utterance": "How many different degrees are offered ?",
        "sql": "select count ( distinct degree_programs.degree_summary_name )"
    },
    "interaction": [
        {
            "utterance": "How many different degrees are offered ?",
            "sql": "select count ( distinct degree_programs.degree_summary_name )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 14,
    "final": {
        "utterance": "How many degrees does the engineering department offer ?",
        "sql": "select count ( * ) where departments.department_name = value"
    },
    "interaction": [
        {
            "utterance": "How many degrees does the engineering department offer ?",
            "sql": "select count ( * ) where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 15,
    "final": {
        "utterance": "How many degrees does the engineering department have ?",
        "sql": "select count ( * ) where departments.department_name = value"
    },
    "interaction": [
        {
            "utterance": "How many degrees does the engineering department have ?",
            "sql": "select count ( * ) where departments.department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 16,
    "final": {
        "utterance": "What are the names and descriptions of all the sections ?",
        "sql": "select sections.section_name , sections.section_description"
    },
    "interaction": [
        {
            "utterance": "What are the names and descriptions of all the sections ?",
            "sql": "select sections.section_name , sections.section_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the names and descriptions for all the sections ?",
        "sql": "select sections.section_name , sections.section_description"
    },
    "interaction": [
        {
            "utterance": "What are the names and descriptions for all the sections ?",
            "sql": "select sections.section_name , sections.section_description"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 18,
    "final": {
        "utterance": "What are the names and id of courses having at most 2 sections ?",
        "sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value"
    },
    "interaction": [
        {
            "utterance": "What are the names and id of courses having at most 2 sections ?",
            "sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the names and ids of every course with less than 2 sections ?",
        "sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value"
    },
    "interaction": [
        {
            "utterance": "What are the names and ids of every course with less than 2 sections ?",
            "sql": "select courses.course_name , courses.course_id group_by courses.course_id having count ( * ) < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 20,
    "final": {
        "utterance": "List the section_name in reversed lexicographical order .",
        "sql": "select sections.section_name order_by sections.section_name desc"
    },
    "interaction": [
        {
            "utterance": "List the section_name in reversed lexicographical order .",
            "sql": "select sections.section_name order_by sections.section_name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the names of the sections in reverse alphabetical order ?",
        "sql": "select sections.section_name order_by sections.section_name desc"
    },
    "interaction": [
        {
            "utterance": "What are the names of the sections in reverse alphabetical order ?",
            "sql": "select sections.section_name order_by sections.section_name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 22,
    "final": {
        "utterance": "What is the semester which most student registered in ? Show both the name and the id .",
        "sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the semester which most student registered in ? Show both the name and the id .",
            "sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 23,
    "final": {
        "utterance": "For each semester , what is the name and id of the one with the most students registered ?",
        "sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "For each semester , what is the name and id of the one with the most students registered ?",
            "sql": "select semesters.semester_name , semesters.semester_id group_by semesters.semester_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the description of the department whose name has the substring the computer ?",
        "sql": "select departments.department_description where departments.department_name like value"
    },
    "interaction": [
        {
            "utterance": "What is the description of the department whose name has the substring the computer ?",
            "sql": "select departments.department_description where departments.department_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 25,
    "final": {
        "utterance": "What is the department description for the one whose name has the word computer ?",
        "sql": "select departments.department_description where departments.department_name like value"
    },
    "interaction": [
        {
            "utterance": "What is the department description for the one whose name has the word computer ?",
            "sql": "select departments.department_description where departments.department_name like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 26,
    "final": {
        "utterance": "Who are enrolled in 2 degree programs in one semester ? List the first name , middle name and last name and the id .",
        "sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value"
    },
    "interaction": [
        {
            "utterance": "Who are enrolled in 2 degree programs in one semester ? List the first name , middle name and last name and the id .",
            "sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the first , middle , and last names , along with the ids , of all students who enrolled in 2 degree programs in one semester ?",
        "sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value"
    },
    "interaction": [
        {
            "utterance": "What are the first , middle , and last names , along with the ids , of all students who enrolled in 2 degree programs in one semester ?",
            "sql": "select students.first_name , students.middle_name , students.last_name , students.student_id group_by students.student_id having count ( * ) = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 28,
    "final": {
        "utterance": "Who is enrolled in a Bachelor degree program ? List the first name , middle name , last name .",
        "sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value"
    },
    "interaction": [
        {
            "utterance": "Who is enrolled in a Bachelor degree program ? List the first name , middle name , last name .",
            "sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 29,
    "final": {
        "utterance": "What are the first , middle , and last names for everybody enrolled in a Bachelors program ?",
        "sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value"
    },
    "interaction": [
        {
            "utterance": "What are the first , middle , and last names for everybody enrolled in a Bachelors program ?",
            "sql": "select distinct students.first_name , students.middle_name , students.last_name where degree_programs.degree_summary_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 30,
    "final": {
        "utterance": "Find the kind of program which most number of students are enrolled in ?",
        "sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the kind of program which most number of students are enrolled in ?",
            "sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 31,
    "final": {
        "utterance": "What is the degree summary name that has the most number of students enrolled ?",
        "sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the degree summary name that has the most number of students enrolled ?",
            "sql": "select degree_programs.degree_summary_name group_by degree_programs.degree_summary_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 32,
    "final": {
        "utterance": "Find the program which most number of students are enrolled in . List both the id and the summary .",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the program which most number of students are enrolled in . List both the id and the summary .",
            "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 33,
    "final": {
        "utterance": "What is the program id and the summary of the degree that has the most students enrolled ?",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the program id and the summary of the degree that has the most students enrolled ?",
            "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name group_by degree_programs.degree_program_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 34,
    "final": {
        "utterance": "Which student has enrolled for the most times in any program ? List the id , first name , middle name , last name , the number of enrollments and student id .",
        "sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which student has enrolled for the most times in any program ? List the id , first name , middle name , last name , the number of enrollments and student id .",
            "sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 35,
    "final": {
        "utterance": "What is the first , middle , and last name , along with the id and number of enrollments , for the student who enrolled the most in any program ?",
        "sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the first , middle , and last name , along with the id and number of enrollments , for the student who enrolled the most in any program ?",
            "sql": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id group_by students.student_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 36,
    "final": {
        "utterance": "Which semesters do not have any student enrolled ? List the semester name .",
        "sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )"
    },
    "interaction": [
        {
            "utterance": "Which semesters do not have any student enrolled ? List the semester name .",
            "sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 37,
    "final": {
        "utterance": "What is the name of the semester with no students enrolled ?",
        "sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )"
    },
    "interaction": [
        {
            "utterance": "What is the name of the semester with no students enrolled ?",
            "sql": "select semesters.semester_name where semesters.semester_id not in ( select student_enrolment.semester_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 38,
    "final": {
        "utterance": "What are all the course names of the courses which ever have students enrolled in ?",
        "sql": "select distinct courses.course_name"
    },
    "interaction": [
        {
            "utterance": "What are all the course names of the courses which ever have students enrolled in ?",
            "sql": "select distinct courses.course_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 39,
    "final": {
        "utterance": "What are the names of all courses that have some students enrolled ?",
        "sql": "select distinct courses.course_name"
    },
    "interaction": [
        {
            "utterance": "What are the names of all courses that have some students enrolled ?",
            "sql": "select distinct courses.course_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 40,
    "final": {
        "utterance": "What 's the name of the course with most number of enrollments ?",
        "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What 's the name of the course with most number of enrollments ?",
            "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 41,
    "final": {
        "utterance": "What is the name of the course with the most students enrolled ?",
        "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the course with the most students enrolled ?",
            "sql": "select courses.course_name group_by courses.course_name order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 42,
    "final": {
        "utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program .",
        "sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name"
    },
    "interaction": [
        {
            "utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program .",
            "sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 43,
    "final": {
        "utterance": "What are the last name of the students who live in North Carolina but have not registered in any degree programs ?",
        "sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name"
    },
    "interaction": [
        {
            "utterance": "What are the last name of the students who live in North Carolina but have not registered in any degree programs ?",
            "sql": "select students.last_name where addresses.state_province_county = value except select distinct students.last_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 44,
    "final": {
        "utterance": "Show the date and id of the transcript with at least 2 course results .",
        "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "Show the date and id of the transcript with at least 2 course results .",
            "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 45,
    "final": {
        "utterance": "What is the date and id of the transcript with at least 2 courses listed ?",
        "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value"
    },
    "interaction": [
        {
            "utterance": "What is the date and id of the transcript with at least 2 courses listed ?",
            "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 46,
    "final": {
        "utterance": "What is the phone number of the man with the first name Timmothy and the last name Ward ?",
        "sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the phone number of the man with the first name Timmothy and the last name Ward ?",
            "sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 47,
    "final": {
        "utterance": "What is the mobile phone number of the student named Timothy Ward ?",
        "sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the mobile phone number of the student named Timothy Ward ?",
            "sql": "select students.cell_mobile_number where students.first_name = value and students.last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 48,
    "final": {
        "utterance": "Who is the first student to register ? List the first name , middle name and last name .",
        "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Who is the first student to register ? List the first name , middle name and last name .",
            "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 49,
    "final": {
        "utterance": "What is the first , middle , and last name of the first student to register ?",
        "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the first , middle , and last name of the first student to register ?",
            "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_first_registered asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 50,
    "final": {
        "utterance": "Who is the earliest graduate of the school ? List the first name , middle name and last name .",
        "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Who is the earliest graduate of the school ? List the first name , middle name and last name .",
            "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 51,
    "final": {
        "utterance": "What is the first , middle , and last name of the earliest school graduate ?",
        "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the first , middle , and last name of the earliest school graduate ?",
            "sql": "select students.first_name , students.middle_name , students.last_name order_by students.date_left asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 52,
    "final": {
        "utterance": "Whose permanent address is different from his or her current address ? List his or her first name .",
        "sql": "select students.first_name where students.current_address_id != students.permanent_address_id"
    },
    "interaction": [
        {
            "utterance": "Whose permanent address is different from his or her current address ? List his or her first name .",
            "sql": "select students.first_name where students.current_address_id != students.permanent_address_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 53,
    "final": {
        "utterance": "What is the first name of the student whose permanent address is different from his or her current one ?",
        "sql": "select students.first_name where students.current_address_id != students.permanent_address_id"
    },
    "interaction": [
        {
            "utterance": "What is the first name of the student whose permanent address is different from his or her current one ?",
            "sql": "select students.first_name where students.current_address_id != students.permanent_address_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 54,
    "final": {
        "utterance": "Which address holds the most number of students currently ? List the address id and all lines .",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which address holds the most number of students currently ? List the address id and all lines .",
            "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 55,
    "final": {
        "utterance": "What is the id , line 1 , and line 2 of the address with the most students ?",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the id , line 1 , and line 2 of the address with the most students ?",
            "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 group_by addresses.address_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 56,
    "final": {
        "utterance": "On average , when were the transcripts printed ?",
        "sql": "select avg ( transcripts.transcript_date )"
    },
    "interaction": [
        {
            "utterance": "On average , when were the transcripts printed ?",
            "sql": "select avg ( transcripts.transcript_date )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 57,
    "final": {
        "utterance": "What is the average transcript date ?",
        "sql": "select avg ( transcripts.transcript_date )"
    },
    "interaction": [
        {
            "utterance": "What is the average transcript date ?",
            "sql": "select avg ( transcripts.transcript_date )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 58,
    "final": {
        "utterance": "When is the first transcript released ? List the date and details .",
        "sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value"
    },
    "interaction": [
        {
            "utterance": "When is the first transcript released ? List the date and details .",
            "sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 59,
    "final": {
        "utterance": "What is the earliest date of a transcript release , and what details can you tell me ?",
        "sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the earliest date of a transcript release , and what details can you tell me ?",
            "sql": "select transcripts.transcript_date , transcripts.other_details order_by transcripts.transcript_date asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 60,
    "final": {
        "utterance": "How many transcripts are released ?",
        "sql": "select count ( transcripts.* )"
    },
    "interaction": [
        {
            "utterance": "How many transcripts are released ?",
            "sql": "select count ( transcripts.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 61,
    "final": {
        "utterance": "How many transcripts are listed ?",
        "sql": "select count ( transcripts.* )"
    },
    "interaction": [
        {
            "utterance": "How many transcripts are listed ?",
            "sql": "select count ( transcripts.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 62,
    "final": {
        "utterance": "What is the last transcript release date ?",
        "sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the last transcript release date ?",
            "sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 63,
    "final": {
        "utterance": "When was the last transcript released ?",
        "sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value"
    },
    "interaction": [
        {
            "utterance": "When was the last transcript released ?",
            "sql": "select transcripts.transcript_date order_by transcripts.transcript_date desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 64,
    "final": {
        "utterance": "How many times at most can a course enrollment result show in different transcripts ? Also show the course enrollment id .",
        "sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "How many times at most can a course enrollment result show in different transcripts ? Also show the course enrollment id .",
            "sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 65,
    "final": {
        "utterance": "What is the maximum number of times that a course shows up in different transcripts and what is that course 's enrollment id ?",
        "sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the maximum number of times that a course shows up in different transcripts and what is that course 's enrollment id ?",
            "sql": "select count ( transcript_contents.* ) , transcript_contents.student_course_id group_by transcript_contents.student_course_id order_by count ( transcript_contents.* ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 66,
    "final": {
        "utterance": "Show the date of the transcript which shows the least number of results , also list the id .",
        "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "Show the date of the transcript which shows the least number of results , also list the id .",
            "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 67,
    "final": {
        "utterance": "What is the date and id of the transcript with the least number of results ?",
        "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the date and id of the transcript with the least number of results ?",
            "sql": "select transcripts.transcript_date , transcript_contents.transcript_id group_by transcript_contents.transcript_id order_by count ( * ) asc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 68,
    "final": {
        "utterance": "Find the semester when both Master students and Bachelor students got enrolled in .",
        "sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value"
    },
    "interaction": [
        {
            "utterance": "Find the semester when both Master students and Bachelor students got enrolled in .",
            "sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 69,
    "final": {
        "utterance": "What is the id of the semester that had both Masters and Bachelors students enrolled ?",
        "sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the id of the semester that had both Masters and Bachelors students enrolled ?",
            "sql": "select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value intersect select distinct student_enrolment.semester_id where degree_programs.degree_summary_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 70,
    "final": {
        "utterance": "How many different addresses do the students currently live ?",
        "sql": "select count ( distinct students.current_address_id )"
    },
    "interaction": [
        {
            "utterance": "How many different addresses do the students currently live ?",
            "sql": "select count ( distinct students.current_address_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 71,
    "final": {
        "utterance": "What are the different addresses that have students living there ?",
        "sql": "select count ( distinct students.current_address_id )"
    },
    "interaction": [
        {
            "utterance": "What are the different addresses that have students living there ?",
            "sql": "select count ( distinct students.current_address_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 72,
    "final": {
        "utterance": "List all the student details in reversed lexicographical order .",
        "sql": "select students.other_student_details order_by students.other_student_details desc"
    },
    "interaction": [
        {
            "utterance": "List all the student details in reversed lexicographical order .",
            "sql": "select students.other_student_details order_by students.other_student_details desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 73,
    "final": {
        "utterance": "What other details can you tell me about students in reverse alphabetical order ?",
        "sql": "select students.other_student_details order_by students.other_student_details desc"
    },
    "interaction": [
        {
            "utterance": "What other details can you tell me about students in reverse alphabetical order ?",
            "sql": "select students.other_student_details order_by students.other_student_details desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 74,
    "final": {
        "utterance": "Describe the section h .",
        "sql": "select sections.section_description where sections.section_name = value"
    },
    "interaction": [
        {
            "utterance": "Describe the section h .",
            "sql": "select sections.section_description where sections.section_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 75,
    "final": {
        "utterance": "What is the description for the section named h ?",
        "sql": "select sections.section_description where sections.section_name = value"
    },
    "interaction": [
        {
            "utterance": "What is the description for the section named h ?",
            "sql": "select sections.section_description where sections.section_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 76,
    "final": {
        "utterance": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value"
    },
    "interaction": [
        {
            "utterance": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 77,
    "final": {
        "utterance": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value"
    },
    "interaction": [
        {
            "utterance": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "sql": "select students.first_name where addresses.country = value union select students.first_name where students.cell_mobile_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 0,
    "final": {
        "utterance": "How many ships ended up being 'Captured ' ?",
        "sql": "select count ( ship.* ) where ship.disposition_of_ship = value"
    },
    "interaction": [
        {
            "utterance": "How many ships ended up being 'Captured ' ?",
            "sql": "select count ( ship.* ) where ship.disposition_of_ship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 1,
    "final": {
        "utterance": "List the name and tonnage ordered by in descending alphaetical order for the names .",
        "sql": "select ship.name , ship.tonnage order_by ship.name desc"
    },
    "interaction": [
        {
            "utterance": "List the name and tonnage ordered by in descending alphaetical order for the names .",
            "sql": "select ship.name , ship.tonnage order_by ship.name desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name , date and result of each battle .",
        "sql": "select battle.name , battle.date"
    },
    "interaction": [
        {
            "utterance": "List the name , date and result of each battle .",
            "sql": "select battle.name , battle.date"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 3,
    "final": {
        "utterance": "What is maximum and minimum death toll caused each time ?",
        "sql": "select max ( death.killed ) , min ( death.killed )"
    },
    "interaction": [
        {
            "utterance": "What is maximum and minimum death toll caused each time ?",
            "sql": "select max ( death.killed ) , min ( death.killed )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the average number of injuries caused each time ?",
        "sql": "select avg ( death.injured )"
    },
    "interaction": [
        {
            "utterance": "What is the average number of injuries caused each time ?",
            "sql": "select avg ( death.injured )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the death and injury situations caused by the ship with tonnage 't ' ?",
        "sql": "select death.killed , death.injured where ship.tonnage = value"
    },
    "interaction": [
        {
            "utterance": "What are the death and injury situations caused by the ship with tonnage 't ' ?",
            "sql": "select death.killed , death.injured where ship.tonnage = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the name and results of the battles when the bulgarian commander is not 'Boril '",
        "sql": "select battle.name , battle.result where battle.bulgarian_commander != value"
    },
    "interaction": [
        {
            "utterance": "What are the name and results of the battles when the bulgarian commander is not 'Boril '",
            "sql": "select battle.name , battle.result where battle.bulgarian_commander != value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the different ids and names of the battles that lost any 'Brig ' type shipes ?",
        "sql": "select distinct battle.id , battle.name where ship.ship_type = value"
    },
    "interaction": [
        {
            "utterance": "What are the different ids and names of the battles that lost any 'Brig ' type shipes ?",
            "sql": "select distinct battle.id , battle.name where ship.ship_type = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the ids and names of the battles that led to more than 10 people killed in total .",
        "sql": "select battle.id , battle.name group_by battle.id having sum ( death.killed ) > value"
    },
    "interaction": [
        {
            "utterance": "What are the ids and names of the battles that led to more than 10 people killed in total .",
            "sql": "select battle.id , battle.name group_by battle.id having sum ( death.killed ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the ship id and name that caused most total injuries ?",
        "sql": "select ship.id , ship.name group_by ship.id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the ship id and name that caused most total injuries ?",
            "sql": "select ship.id , ship.name group_by ship.id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 10,
    "final": {
        "utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan ' and latin commander 'Baldwin I ' ?",
        "sql": "select battle.name where battle.bulgarian_commander = value and battle.latin_commander = value"
    },
    "interaction": [
        {
            "utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan ' and latin commander 'Baldwin I ' ?",
            "sql": "select battle.name where battle.bulgarian_commander = value and battle.latin_commander = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 11,
    "final": {
        "utterance": "How many different results are there for the battles ?",
        "sql": "select count ( distinct battle.result )"
    },
    "interaction": [
        {
            "utterance": "How many different results are there for the battles ?",
            "sql": "select count ( distinct battle.result )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 12,
    "final": {
        "utterance": "How many battles did not lose any ship with tonnage '225 ' ?",
        "sql": "select count ( battle.* ) where battle.id not in ( select ship.lost_in_battle where ship.tonnage = value )"
    },
    "interaction": [
        {
            "utterance": "How many battles did not lose any ship with tonnage '225 ' ?",
            "sql": "select count ( battle.* ) where battle.id not in ( select ship.lost_in_battle where ship.tonnage = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 13,
    "final": {
        "utterance": "List the name and date the battle that has lost the ship named 'Lettice ' and the ship named 'HMS Atalanta '",
        "sql": "select battle.name , battle.date where ship.name = value intersect select battle.name , battle.date where ship.name = value"
    },
    "interaction": [
        {
            "utterance": "List the name and date the battle that has lost the ship named 'Lettice ' and the ship named 'HMS Atalanta '",
            "sql": "select battle.name , battle.date where ship.name = value intersect select battle.name , battle.date where ship.name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 14,
    "final": {
        "utterance": "Show names , results and bulgarian commanders of the battles with no ships lost in the 'English Channel ' .",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander except select battle.name , battle.result , battle.bulgarian_commander where ship.location = value"
    },
    "interaction": [
        {
            "utterance": "Show names , results and bulgarian commanders of the battles with no ships lost in the 'English Channel ' .",
            "sql": "select battle.name , battle.result , battle.bulgarian_commander except select battle.name , battle.result , battle.bulgarian_commander where ship.location = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the notes of the death events which has substring 'East ' ?",
        "sql": "select death.note where death.note like value"
    },
    "interaction": [
        {
            "utterance": "What are the notes of the death events which has substring 'East ' ?",
            "sql": "select death.note where death.note like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 0,
    "final": {
        "utterance": "How many employees are there ?",
        "sql": "select count ( employee.* )"
    },
    "interaction": [
        {
            "utterance": "How many employees are there ?",
            "sql": "select count ( employee.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 1,
    "final": {
        "utterance": "Count the number of employees",
        "sql": "select count ( employee.* )"
    },
    "interaction": [
        {
            "utterance": "Count the number of employees",
            "sql": "select count ( employee.* )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 2,
    "final": {
        "utterance": "Sort employee names by their age in ascending order .",
        "sql": "select employee.name order_by employee.age"
    },
    "interaction": [
        {
            "utterance": "Sort employee names by their age in ascending order .",
            "sql": "select employee.name order_by employee.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 3,
    "final": {
        "utterance": "List the names of employees and sort in ascending order of age .",
        "sql": "select employee.name order_by employee.age"
    },
    "interaction": [
        {
            "utterance": "List the names of employees and sort in ascending order of age .",
            "sql": "select employee.name order_by employee.age"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the number of employees from each city ?",
        "sql": "select count ( employee.* ) , employee.city group_by employee.city"
    },
    "interaction": [
        {
            "utterance": "What is the number of employees from each city ?",
            "sql": "select count ( employee.* ) , employee.city group_by employee.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 5,
    "final": {
        "utterance": "Count the number of employees for each city .",
        "sql": "select count ( employee.* ) , employee.city group_by employee.city"
    },
    "interaction": [
        {
            "utterance": "Count the number of employees for each city .",
            "sql": "select count ( employee.* ) , employee.city group_by employee.city"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 6,
    "final": {
        "utterance": "Which cities do more than one employee under age 30 come from ?",
        "sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value"
    },
    "interaction": [
        {
            "utterance": "Which cities do more than one employee under age 30 come from ?",
            "sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the cities that have more than one employee under age 30 .",
        "sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value"
    },
    "interaction": [
        {
            "utterance": "Find the cities that have more than one employee under age 30 .",
            "sql": "select employee.city where employee.age < value group_by employee.city having count ( employee.* ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the number of shops in each location .",
        "sql": "select count ( shop.* ) , shop.location group_by shop.location"
    },
    "interaction": [
        {
            "utterance": "Find the number of shops in each location .",
            "sql": "select count ( shop.* ) , shop.location group_by shop.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 9,
    "final": {
        "utterance": "How many shops are there in each location ?",
        "sql": "select count ( shop.* ) , shop.location group_by shop.location"
    },
    "interaction": [
        {
            "utterance": "How many shops are there in each location ?",
            "sql": "select count ( shop.* ) , shop.location group_by shop.location"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the manager name and district of the shop whose number of products is the largest .",
        "sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the manager name and district of the shop whose number of products is the largest .",
            "sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the manager name and district of the shop that sells the largest number of products ?",
        "sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What are the manager name and district of the shop that sells the largest number of products ?",
            "sql": "select shop.manager_name , shop.district order_by shop.number_products desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 12,
    "final": {
        "utterance": "find the minimum and maximum number of products of all stores .",
        "sql": "select min ( shop.number_products ) , max ( shop.number_products )"
    },
    "interaction": [
        {
            "utterance": "find the minimum and maximum number of products of all stores .",
            "sql": "select min ( shop.number_products ) , max ( shop.number_products )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the minimum and maximum number of products across all the shops ?",
        "sql": "select min ( shop.number_products ) , max ( shop.number_products )"
    },
    "interaction": [
        {
            "utterance": "What are the minimum and maximum number of products across all the shops ?",
            "sql": "select min ( shop.number_products ) , max ( shop.number_products )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 14,
    "final": {
        "utterance": "Return the name , location and district of all shops in descending order of number of products .",
        "sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc"
    },
    "interaction": [
        {
            "utterance": "Return the name , location and district of all shops in descending order of number of products .",
            "sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 15,
    "final": {
        "utterance": "Sort all the shops by number products in descending order , and return the name , location and district of each shop .",
        "sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc"
    },
    "interaction": [
        {
            "utterance": "Sort all the shops by number products in descending order , and return the name , location and district of each shop .",
            "sql": "select shop.name , shop.location , shop.district order_by shop.number_products desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 16,
    "final": {
        "utterance": "Find the names of stores whose number products is more than the average number of products .",
        "sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )"
    },
    "interaction": [
        {
            "utterance": "Find the names of stores whose number products is more than the average number of products .",
            "sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 17,
    "final": {
        "utterance": "Which shops ' number products is above the average ? Give me the shop names .",
        "sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )"
    },
    "interaction": [
        {
            "utterance": "Which shops ' number products is above the average ? Give me the shop names .",
            "sql": "select shop.name where shop.number_products > ( select avg ( shop.number_products ) )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 18,
    "final": {
        "utterance": "find the name of employee who was awarded the most times in the evaluation .",
        "sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "find the name of employee who was awarded the most times in the evaluation .",
            "sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 19,
    "final": {
        "utterance": "Which employee received the most awards in evaluations ? Give me the employee name .",
        "sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which employee received the most awards in evaluations ? Give me the employee name .",
            "sql": "select employee.name group_by evaluation.employee_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the name of the employee who got the highest one time bonus .",
        "sql": "select employee.name order_by evaluation.bonus desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Find the name of the employee who got the highest one time bonus .",
            "sql": "select employee.name order_by evaluation.bonus desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 21,
    "final": {
        "utterance": "Which employee received the biggest bonus ? Give me the employee name .",
        "sql": "select employee.name order_by evaluation.bonus desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which employee received the biggest bonus ? Give me the employee name .",
            "sql": "select employee.name order_by evaluation.bonus desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 22,
    "final": {
        "utterance": "Find the names of employees who never won any award in the evaluation .",
        "sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )"
    },
    "interaction": [
        {
            "utterance": "Find the names of employees who never won any award in the evaluation .",
            "sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the names of the employees who never received any evaluation ?",
        "sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )"
    },
    "interaction": [
        {
            "utterance": "What are the names of the employees who never received any evaluation ?",
            "sql": "select employee.name where employee.employee_id not in ( select evaluation.employee_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the name of the shop that is hiring the largest number of employees ?",
        "sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "What is the name of the shop that is hiring the largest number of employees ?",
            "sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 25,
    "final": {
        "utterance": "Which shop has the most employees ? Give me the shop name .",
        "sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value"
    },
    "interaction": [
        {
            "utterance": "Which shop has the most employees ? Give me the shop name .",
            "sql": "select shop.name group_by hiring.shop_id order_by count ( * ) desc limit_value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 26,
    "final": {
        "utterance": "Find the name of the shops that do not hire any employee .",
        "sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )"
    },
    "interaction": [
        {
            "utterance": "Find the name of the shops that do not hire any employee .",
            "sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 27,
    "final": {
        "utterance": "Which shops run with no employees ? Find the shop names",
        "sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )"
    },
    "interaction": [
        {
            "utterance": "Which shops run with no employees ? Find the shop names",
            "sql": "select shop.name where shop.shop_id not in ( select hiring.shop_id )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 28,
    "final": {
        "utterance": "Find the number of employees hired in each shop ; show the shop name as well .",
        "sql": "select count ( * ) , shop.name group_by shop.name"
    },
    "interaction": [
        {
            "utterance": "Find the number of employees hired in each shop ; show the shop name as well .",
            "sql": "select count ( * ) , shop.name group_by shop.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 29,
    "final": {
        "utterance": "For each shop , return the number of employees working there and the name of the shop .",
        "sql": "select count ( * ) , shop.name group_by shop.name"
    },
    "interaction": [
        {
            "utterance": "For each shop , return the number of employees working there and the name of the shop .",
            "sql": "select count ( * ) , shop.name group_by shop.name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 30,
    "final": {
        "utterance": "What is total bonus given in all evaluations ?",
        "sql": "select sum ( evaluation.bonus )"
    },
    "interaction": [
        {
            "utterance": "What is total bonus given in all evaluations ?",
            "sql": "select sum ( evaluation.bonus )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 31,
    "final": {
        "utterance": "Find the total amount of bonus given in all the evaluations .",
        "sql": "select sum ( evaluation.bonus )"
    },
    "interaction": [
        {
            "utterance": "Find the total amount of bonus given in all the evaluations .",
            "sql": "select sum ( evaluation.bonus )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 32,
    "final": {
        "utterance": "Give me all the information about hiring .",
        "sql": "select hiring.*"
    },
    "interaction": [
        {
            "utterance": "Give me all the information about hiring .",
            "sql": "select hiring.*"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 33,
    "final": {
        "utterance": "What is all the information about hiring ?",
        "sql": "select hiring.*"
    },
    "interaction": [
        {
            "utterance": "What is all the information about hiring ?",
            "sql": "select hiring.*"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 34,
    "final": {
        "utterance": "Which district has both stores with less than 3000 products and stores with more than 10000 products ?",
        "sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value"
    },
    "interaction": [
        {
            "utterance": "Which district has both stores with less than 3000 products and stores with more than 10000 products ?",
            "sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 35,
    "final": {
        "utterance": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products .",
        "sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value"
    },
    "interaction": [
        {
            "utterance": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products .",
            "sql": "select shop.district where shop.number_products < value intersect select shop.district where shop.number_products > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 36,
    "final": {
        "utterance": "How many different store locations are there ?",
        "sql": "select count ( distinct shop.location )"
    },
    "interaction": [
        {
            "utterance": "How many different store locations are there ?",
            "sql": "select count ( distinct shop.location )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 37,
    "final": {
        "utterance": "Count the number of distinct store locations .",
        "sql": "select count ( distinct shop.location )"
    },
    "interaction": [
        {
            "utterance": "Count the number of distinct store locations .",
            "sql": "select count ( distinct shop.location )"
        }
    ]
}
