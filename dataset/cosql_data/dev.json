{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 0,
    "final": {
        "utterance": "Show ids for all templates that are used by more than one document.",
        "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hi ! Can you tell me how many unique template IDs there are ?",
            "sql": "select count ( distinct template_id ) from documents"
        },
        {
            "utterance": "How many of those 12 template IDs are used by more than one document ?",
            "sql": "select count ( template_id ) from documents group by template_id having count ( * ) > value"
        },
        {
            "utterance": "Great ! Can you show me the corresponding document that used each of those template IDs on the list you just provided me ?",
            "sql": "select document_id from documents group by template_id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the document name and template id for document with description with the letter 'w' in it?",
        "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    "interaction": [
        {
            "utterance": "Can I get all the documents with 'w ' in them | Do you want documents with 'w ' in the name or description ? | Description pls",
            "sql": "select * from documents where document_description like value"
        },
        {
            "utterance": "Ok can I get just their names",
            "sql": "select document_name from documents where document_description like value"
        },
        {
            "utterance": "I need the template ids too oops",
            "sql": "select document_name , template_id from documents where document_description like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 2,
    "final": {
        "utterance": "What are the template ids with template type description \"Presentation\".",
        "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    "interaction": [
        {
            "utterance": "Hello ! How many template IDs have the description of `` Presentation '' ?",
            "sql": "select count ( * ) from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code where t1 . template_type_description = value"
        },
        {
            "utterance": "Thank you ! Can you please provide me with the list of the template ids with the template type description of `` Presentation '' ?",
            "sql": "select t2 . template_id from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code where t1 . template_type_description = value"
        },
        {
            "utterance": "Can you provide me with the template type code for these three Temple ids ?",
            "sql": "select t2 . template_id , t2 . template_type_code from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code where t1 . template_type_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 3,
    "final": {
        "utterance": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    "interaction": [
        {
            "utterance": "Can you show me document ids ?",
            "sql": "select document_id from paragraphs"
        },
        {
            "utterance": "Can you show the number of paragraphs in each document ?",
            "sql": "select document_id , count ( * ) from paragraphs group by document_id"
        },
        {
            "utterance": "Can you order it by document id ?",
            "sql": "select document_id , count ( * ) from paragraphs group by document_id order by document_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 4,
    "final": {
        "utterance": "Show ids for all templates not used by any document.",
        "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you please list all the template IDs and which document IDs they are associated with ?",
            "sql": "select template_id from documents"
        },
        {
            "utterance": "Thanks ! Unfortunately , I am seeing only the Template_IDs . Can you update the list to show the document IDs as well ?",
            "sql": "select template_id , document_id from documents"
        },
        {
            "utterance": "Alright ! Can you show me a list of the Template_IDs for each template that is not associated with a Document_ID ?",
            "sql": "select template_id from templates except select template_id from documents"
        },
        {
            "utterance": "Nice ! Finally , can you update that list to show the associated template type code for each of these ?",
            "sql": "select t1 . template_id , t1 . template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 5,
    "final": {
        "utterance": "Show all document names using templates with template type code BK.",
        "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    "interaction": [
        {
            "utterance": "How many documents have template type code BK ?",
            "sql": "select count ( * ) from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id where t1 . template_type_code = value"
        },
        {
            "utterance": "And their names ?",
            "sql": "select t2 . document_name from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id where t1 . template_type_code = value"
        },
        {
            "utterance": "How many documents do not have template type code BK ?",
            "sql": "select count ( * ) from documents where document_name not in ( select t2 . document_name from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id where t1 . template_type_code = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 6,
    "final": {
        "utterance": "Which template type code has most number of templates?",
        "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many templates there",
            "sql": "select count ( * ) from templates"
        },
        {
            "utterance": "what is the date effective of template id 1",
            "sql": "select date_effective_from , date_effective_to from templates where template_id = value"
        },
        {
            "utterance": "what is the template type code of template id 4",
            "sql": "select template_type_code from templates where template_id = value"
        },
        {
            "utterance": "what is the version number of template id 0",
            "sql": "select version_number from templates where template_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 7,
    "final": {
        "utterance": "Show ids for all templates not used by any document.",
        "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    "interaction": [
        {
            "utterance": "what are all of the template ids ?",
            "sql": "select template_id from templates"
        },
        {
            "utterance": "which of those is not used in a document",
            "sql": "select template_id from templates except select template_id from documents"
        },
        {
            "utterance": "are those still effective ? | Do you mean the effective-to date of those templates ? | yes",
            "sql": "select date_effective_to from templates where template_id in ( select template_id from templates except select template_id from documents )"
        },
        {
            "utterance": "how many are used in documents ? | 12 templates are used in a document . | and how many templates are not used ?",
            "sql": "select count ( * ) from templates where template_id in ( select template_id from templates except select template_id from documents )"
        },
        {
            "utterance": "what were those IDs again ?",
            "sql": "select template_id from templates except select template_id from documents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the distinct template type descriptions for the templates ever used by any document?",
        "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    "interaction": [
        {
            "utterance": "What are the templates ever used by any document ?",
            "sql": "select * from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "What are the template type descriptions for these templates ?",
            "sql": "select t1 . template_type_description from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code join documents as t3 on t2 . template_id = t3 . template_id"
        },
        {
            "utterance": "Can I get the distinct template type descriptions for these templates ?",
            "sql": "select distinct t1 . template_type_description from ref_template_types as t1 join templates as t2 on t1 . template_type_code = t2 . template_type_code join documents as t3 on t2 . template_id = t3 . template_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 9,
    "final": {
        "utterance": "What is the document id with 1 to 2 paragraphs?",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE DOCUMENT ID WITH 1 TO 2 PARAGRAPH ?",
            "sql": "select document_id from paragraphs group by document_id having count ( * ) between value and value"
        },
        {
            "utterance": "WHAT IS THE DOCUMENT TEXT | Did you mean the Paragraph Text ? | YES",
            "sql": "select paragraph_text from paragraphs group by document_id having count ( * ) between value and value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 10,
    "final": {
        "utterance": "Show all template type codes that are not used by any document.",
        "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    "interaction": [
        {
            "utterance": "What is the version number of template id 3 ?",
            "sql": "select version_number from templates where template_id = value"
        },
        {
            "utterance": "What is the document name of template id 25 ?",
            "sql": "select t2 . document_name from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id where t1 . template_id = value"
        },
        {
            "utterance": "Show all template types codes that are not used by any document ?",
            "sql": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "What is the version number of template id 4 ?",
            "sql": "select version_number from templates where template_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 11,
    "final": {
        "utterance": "Show all document ids, names and the number of paragraphs in each document.",
        "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    "interaction": [
        {
            "utterance": "Hello ! How are you ? First , I 'll start with a straightforward request ... Can you show me all document IDs and their corresponding document names and number of paragraphs ?",
            "sql": "select t1 . document_id , t2 . document_name , count ( * ) from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id group by t1 . document_id"
        },
        {
            "utterance": "Okay ... I 'll ask something different . Can you show me a list of all of the paragraph text values ?",
            "sql": "select paragraph_text from paragraphs"
        },
        {
            "utterance": "Thanks ! Can you filter this list to show the Paragraph_Texts which have something other than `` NULL '' as the Other Details ?",
            "sql": "select paragraph_text from paragraphs where other_details ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 12,
    "final": {
        "utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    "interaction": [
        {
            "utterance": "How many ids are in document 'Welcome to NY ' ? | Do you mean how many paragraphs are associated with document 'Welcome to NY ' ? | yes",
            "sql": "select count ( * ) from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id where t2 . document_name = value"
        },
        {
            "utterance": "What are their texts ?",
            "sql": "select t1 . paragraph_text from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id where t2 . document_name = value"
        },
        {
            "utterance": "What are their id numbers ?",
            "sql": "select t1 . paragraph_id from paragraphs as t1 join documents as t2 on t1 . document_id = t2 . document_id where t2 . document_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 13,
    "final": {
        "utterance": "What is the document id with least number of paragraphs?",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the document id with least number of paragraphs ?",
            "sql": "select document_id from paragraphs group by document_id order by count ( * ) asc limit value"
        },
        {
            "utterance": "and the document with the most number of paragraphs ?",
            "sql": "select document_id from paragraphs group by document_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "how many paragraphs are in that document with id of 2394 ?",
            "sql": "select count ( paragraph_id ) from paragraphs where document_id = value"
        },
        {
            "utterance": "What are the paragraph texts of those three paragraphs ?",
            "sql": "select paragraph_text from paragraphs where document_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "cre_Doc_Template_Mgt",
    "interaction_id": 14,
    "final": {
        "utterance": "How many documents are using the template with type code 'PPT'?",
        "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    "interaction": [
        {
            "utterance": "Show me the documents",
            "sql": "select * from documents"
        },
        {
            "utterance": "Show me the documents using template",
            "sql": "select * from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id"
        },
        {
            "utterance": "How many of them are using the template with code 'PPT ' ?",
            "sql": "select count ( * ) from documents as t1 join templates as t2 on t1 . template_id = t2 . template_id where t2 . template_type_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 0,
    "final": {
        "utterance": "How many dogs have not gone through any treatment?",
        "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "how many female dogs have gone through treatment",
            "sql": "select count ( * ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "what are their ages",
            "sql": "select age from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "what is the highest weight of age 2",
            "sql": "select weight from dogs where age = value order by weight desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 1,
    "final": {
        "utterance": "How much does the most recent treatment cost?",
        "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many different treatments are there ?",
            "sql": "select count ( * ) from ( select distinct treatment_type_code from treatments )"
        },
        {
            "utterance": "which one is the most expensive ?",
            "sql": "select * from treatments order by cost_of_treatment desc limit value"
        },
        {
            "utterance": "And how about the price of the most recent treatment ?",
            "sql": "select cost_of_treatment from treatments order by date_of_treatment desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    "interaction": [
        {
            "utterance": "Show me all the dogs | do you want to show all the attributes of the dogs ? | just show me the names of the dogs",
            "sql": "select name from dogs"
        },
        {
            "utterance": "Nice ! Tell me which of these dogs are the rarest breed",
            "sql": "select name from dogs where breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit value )"
        },
        {
            "utterance": "What are the genders of these dogs ?",
            "sql": "select name , gender from dogs where breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit value )"
        },
        {
            "utterance": "Ok sure . Tell me who treated these dogs | Sorry , could you specify your question , There are all attributes of the dog treatments , which one do you want to show ? | Alright ! just show me the treatment dates of these dogs",
            "sql": "select t1 . name , t2 . date_of_treatment from dogs as t1 join treatments as t2 on t1 . dog_id = t2 . dog_id where t1 . breed_code = ( select breed_code from dogs group by breed_code order by count ( * ) asc limit value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the average age of the dogs who have gone through any treatments?",
        "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "Hello , how many dogs have gone through treatments ?",
            "sql": "select count ( * ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "What is the age of the youngest dog to go through treatment ?",
            "sql": "select min ( age ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "What about the oldest ?",
            "sql": "select max ( age ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "How about the average age ?",
            "sql": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the name of the breed with the most dogs?",
        "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many dog breeds are there ?",
            "sql": "select count ( * ) from breeds"
        },
        {
            "utterance": "What is the biggest of those dog breeds ?",
            "sql": "select t1 . breed_name from breeds as t1 join dogs as t2 on t1 . breed_code = t2 . breed_code group by t1 . breed_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "How big is the bulldog ?",
            "sql": "select t2 . size_code from breeds as t1 join dogs as t2 on t1 . breed_code = t2 . breed_code where t1 . breed_name = value"
        },
        {
            "utterance": "What is the name of the breed with the most dogs ?",
            "sql": "select t1 . breed_name from breeds as t1 join dogs as t2 on t1 . breed_code = t2 . breed_code group by t1 . breed_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 5,
    "final": {
        "utterance": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "which professional has done the most treatments ?",
            "sql": "select * from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "what about the least treatments ?",
            "sql": "select * from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id order by count ( * ) limit value"
        },
        {
            "utterance": "How many professionals have at most 3 treatments ?",
            "sql": "select count ( * ) from ( select * from professionals as t1 join treatments as t2 group by t2 . professional_id having count ( * ) < = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 6,
    "final": {
        "utterance": "How many dogs have an age below the average?",
        "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    "interaction": [
        {
            "utterance": "how many dogs on the table",
            "sql": "select count ( * ) from dogs"
        },
        {
            "utterance": "what is the age of Kacey",
            "sql": "select age from dogs where name = value"
        },
        {
            "utterance": "which dog is highest weight on table | Do you want the name of the dog with the highest weight ? | exactly",
            "sql": "select name from dogs order by weight desc limit value"
        },
        {
            "utterance": "what is the size code of BUL | Did you mean the size codes of dogs with a breed code BUL ? | exactly",
            "sql": "select size_code from dogs where breed_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 7,
    "final": {
        "utterance": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    "interaction": [
        {
            "utterance": "Can you show the names of owners and the states they live in ? | Do you want the first and last names of owners and the states they live in ? | Yes please .",
            "sql": "select first_name , last_name , state from owners"
        },
        {
            "utterance": "Hmm , I want to know the first and last names of owners and also their emails .",
            "sql": "select first_name , last_name , email_address from owners"
        },
        {
            "utterance": "Can you list the first and last name with emails of owners living in the state whose name contains the substring `` North '' ?",
            "sql": "select first_name , last_name , email_address from owners where state like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 8,
    "final": {
        "utterance": "List the last name of the owner owning the youngest dog.",
        "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    "interaction": [
        {
            "utterance": "How many dog owner 's are there ?",
            "sql": "select count ( * ) from owners"
        },
        {
            "utterance": "What is the age of the youngest dog ?",
            "sql": "select age from dogs order by age asc limit value"
        },
        {
            "utterance": "What is the name of the dog who is 1 year old ?",
            "sql": "select name from dogs order by age asc limit value"
        },
        {
            "utterance": "Of the 15 owners , what is the name of the owner who owns Evangeline ?",
            "sql": "select t1 . first_name , t1 . last_name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 9,
    "final": {
        "utterance": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you show me a list of owner ids and zip codes ? | can you give more infor about this question ? | I want you to extract just the owner ids and zip codes from the table . Does it make sense ?",
            "sql": "select owner_id , zip_code from owners"
        },
        {
            "utterance": "Hmm , can you put the owner ids , dog ids and the cost of treatment in a table ?",
            "sql": "select t1 . owner_id , t2 . dog_id , t3 . cost_of_treatment from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id"
        },
        {
            "utterance": "Which owner name and id has paid the largest amount of money in total for their dogs ? | Did you mean the full name ? | Just the first name will be fine .",
            "sql": "select t1 . first_name , t1 . owner_id from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id group by t1 . owner_id order by sum ( t3 . cost_of_treatment ) desc limit value"
        },
        {
            "utterance": "To make sure , can you also show me the last name of Jaclyn ?",
            "sql": "select last_name from owners where first_name = value"
        },
        {
            "utterance": "As a last thing , can you also tell me the owner id and zip code of Jaclyn Stoltenberg , who has paid the largest amount of money in total for their dogs ?",
            "sql": "select t1 . owner_id , t1 . zip_code from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id group by t1 . owner_id order by sum ( t3 . cost_of_treatment ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 10,
    "final": {
        "utterance": "Which first names are used for professionals or owners but are not used as dog names?",
        "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    "interaction": [
        {
            "utterance": "kindly give me the names that might be used for professionals or owners but can not be use for dog names",
            "sql": "select first_name from professionals union select first_name from owners except select name from dogs"
        },
        {
            "utterance": "What email can i use to contact Taryn | Would you like the email address of professionals with name Taryn ? | Yes",
            "sql": "select email_address from professionals where first_name = value"
        },
        {
            "utterance": "In what state can i find Jayson",
            "sql": "select state from professionals where first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the average age of the dogs who have gone through any treatments?",
        "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "Tell me how many dogs have gone through any treatments .",
            "sql": "select count ( * ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "Tell me how old the youngest is . | Do you mean the youngest among those that have gone through any treatment ? | yes",
            "sql": "select min ( age ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "And how old is the oldest that has gone through any treatment ?",
            "sql": "select max ( age ) from dogs where dog_id in ( select dog_id from treatments )"
        },
        {
            "utterance": "How about the average age ? | Do you mean the average age of those that have gone through any treatment ? | yes",
            "sql": "select avg ( age ) from dogs where dog_id in ( select dog_id from treatments )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 12,
    "final": {
        "utterance": "What is the name of the breed with the most dogs?",
        "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which breed is the top ranked ?",
            "sql": "select t1 . breed_name from breeds as t1 join dogs as t2 on t1 . breed_code = t2 . breed_code group by t1 . breed_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "what is the total count for bulldog ?",
            "sql": "select count ( * ) from breeds as t1 join dogs as t2 on t1 . breed_code = t2 . breed_code where t1 . breed_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 13,
    "final": {
        "utterance": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    "interaction": [
        {
            "utterance": "How many dog owners live in Virginia ?",
            "sql": "select count ( * ) from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . state = value"
        },
        {
            "utterance": "What is their name ?",
            "sql": "select t1 . first_name , t1 . last_name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . state = value"
        },
        {
            "utterance": "And the name of their dog ?",
            "sql": "select t2 . name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . state = value"
        },
        {
            "utterance": "What breed of dog is bessie ?",
            "sql": "select t2 . breed_code from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t2 . name = value"
        },
        {
            "utterance": "And what size dog is she ?",
            "sql": "select t2 . size_code from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 14,
    "final": {
        "utterance": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "sql": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )"
    },
    "interaction": [
        {
            "utterance": "LIST THE DOG NAMES WITH TREATMENT COST",
            "sql": "select name , cost_of_treatment from dogs join treatments"
        },
        {
            "utterance": "ARRANGE THE COST OF TREATMENT IN DESCENDING ORDER | The result table of the treatment cost is listed in descending order of the cost of treatment . | FIND THE DOG NAMES WHICH COST LESS THAN 1000 FOR TREATMENT",
            "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum ( cost_of_treatment ) < value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 15,
    "final": {
        "utterance": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    "interaction": [
        {
            "utterance": "List the names of all the professionals .",
            "sql": "select first_name , last_name from professionals"
        },
        {
            "utterance": "List the names of all professionals that live in a city containing the substring West .",
            "sql": "select first_name , last_name from professionals where city like value"
        },
        {
            "utterance": "List the role of the professional named Taryn . | The role code of the professional with first name Taryn is Employee | List the role , street , city , and state of the professional with first name Taryn .",
            "sql": "select role_code , street , city , state from professionals where first_name = value"
        },
        {
            "utterance": "List the names of all the professionals and their state .",
            "sql": "select first_name , state from professionals"
        },
        {
            "utterance": "List the names of all professionals with the state Indiana .",
            "sql": "select first_name from professionals where state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 16,
    "final": {
        "utterance": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "which professionals live in state of indiana ? | What information do you want to know about these professionals ? | I would like to know all the information about professionals ?",
            "sql": "select * from professionals where state = value"
        },
        {
            "utterance": "ok , I need to know the cell number of taryn",
            "sql": "select cell_number from professionals where first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 17,
    "final": {
        "utterance": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    "interaction": [
        {
            "utterance": "What are the ids of the professionals ?",
            "sql": "select professional_id from professionals"
        },
        {
            "utterance": "What is the role of each of the professionals ?",
            "sql": "select professional_id , role_code from professionals"
        },
        {
            "utterance": "Could I please have their email address and which of them did not perform any operate any treatment on dogs .",
            "sql": "select professional_id , role_code , email_address from professionals except select t1 . professional_id , t1 . role_code , t1 . email_address from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 18,
    "final": {
        "utterance": "Which first names are used for professionals or owners but are not used as dog names?",
        "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    "interaction": [
        {
            "utterance": "Which first names are used for professionals or owners ?",
            "sql": "select first_name from professionals union select first_name from owners"
        },
        {
            "utterance": "Which first names are used for professionals or owners , but are not used as dog names ?",
            "sql": "select first_name from professionals union select first_name from owners except select name from dogs"
        },
        {
            "utterance": "Which first names are used for professionals or owners , and are used as dog names ?",
            "sql": "select first_name from professionals union select first_name from owners union select name from dogs"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 19,
    "final": {
        "utterance": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What is the phone number of the professional who has done the most treatment .",
            "sql": "select t1 . cell_number from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the professional id of the professionals who have done at least two types of treatments ?",
            "sql": "select t1 . professional_id from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) > = value"
        },
        {
            "utterance": "How many professionals have done only one treatment ?",
            "sql": "select count ( * ) from ( select * from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id group by t1 . professional_id having count ( * ) = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 20,
    "final": {
        "utterance": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    "interaction": [
        {
            "utterance": "Please list the emails of all the professionals who live in the state of Hawaii ?",
            "sql": "select email_address from professionals where state = value"
        },
        {
            "utterance": "Please list the emails of all the professionals who live in the state of Wisconsin ?",
            "sql": "select email_address from professionals where state = value"
        },
        {
            "utterance": "Could you tell me the first names of all employees with the role code `` Employee '' ?",
            "sql": "select first_name from professionals where role_code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 21,
    "final": {
        "utterance": "How many dogs have not gone through any treatment?",
        "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many dogs have not gone through any treatment ?",
            "sql": "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )"
        },
        {
            "utterance": "Thank you for that ! Can you tell me how many of these dogs were abandoned ?",
            "sql": "select count ( * ) from dogs where abandoned_yn = value and dog_id not in ( select dog_id from treatments )"
        },
        {
            "utterance": "Can you provide me with a list of all dog Ids for all of the abandoned dogs , as well as their associated treatment type code ?",
            "sql": "select t1 . dog_id , t2 . treatment_type_code from dogs as t1 join treatments as t2 on t1 . dog_id = t2 . dog_id where abandoned_yn = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 22,
    "final": {
        "utterance": "How many professionals did not operate any treatment on dogs?",
        "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    "interaction": [
        {
            "utterance": "whats is total cost of treatment ?",
            "sql": "select sum ( cost_of_treatment ) from treatments"
        },
        {
            "utterance": "could you please find who 's provide lowest cost of treatment ? | you want first name or last name or both ? | both",
            "sql": "select t1 . first_name , t1 . last_name from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id order by t2 . cost_of_treatment asc limit value"
        },
        {
            "utterance": "ok , can you show lowest cost treatment 's dog id ?",
            "sql": "select dog_id from treatments order by cost_of_treatment asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 23,
    "final": {
        "utterance": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    "interaction": [
        {
            "utterance": "Show me the first and last name whose id number 1 | Do you mean the owner id is 1 or dog id is 1 ? | owner id please .",
            "sql": "select t1 . first_name , t1 . last_name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . owner_id = value"
        },
        {
            "utterance": "name the dog which aged 6 ?",
            "sql": "select name from dogs where age = value"
        },
        {
            "utterance": "name the dog having age more than 5",
            "sql": "select name from dogs where age > value"
        },
        {
            "utterance": "which dogs are owned by someone who lives in virginia ? List the name .",
            "sql": "select t2 . name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id where t1 . state = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 24,
    "final": {
        "utterance": "How many owners temporarily do not have any dogs?",
        "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    "interaction": [
        {
            "utterance": "Hi ! How many owners temporarily do not have dogs ?",
            "sql": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )"
        },
        {
            "utterance": "What are their full names ?",
            "sql": "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 25,
    "final": {
        "utterance": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    "interaction": [
        {
            "utterance": "Which street does Nora Haley live ?",
            "sql": "select street from owners where first_name = value and last_name = value"
        },
        {
            "utterance": "What is her home phone number ?",
            "sql": "select home_phone from owners where first_name = value and last_name = value"
        },
        {
            "utterance": "What is the email address of Jaclyn ? | Do you mean the owner with first name Jaclyn ? | Yes Jaclyn Stoltenberg",
            "sql": "select email_address from owners where first_name = value and last_name = value"
        },
        {
            "utterance": "What is the first name of DuBuque ?",
            "sql": "select first_name from owners where last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 26,
    "final": {
        "utterance": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "can you tell me the email id of the owner id ? | Do you mean all owner id and all email address ? | owner id 1",
            "sql": "select email_address from owners where owner_id = value"
        },
        {
            "utterance": "what is the weight of dog id 1 ?",
            "sql": "select weight from dogs where dog_id = value"
        },
        {
            "utterance": "Can you tell me age of dog id 1 ?",
            "sql": "select age from dogs where dog_id = value"
        },
        {
            "utterance": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name .",
            "sql": "select t1 . owner_id , t1 . last_name from owners as t1 join dogs as t2 on t1 . owner_id = t2 . owner_id join treatments as t3 on t2 . dog_id = t3 . dog_id group by t1 . owner_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 27,
    "final": {
        "utterance": "Which states have both owners and professionals living there?",
        "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    "interaction": [
        {
            "utterance": "Which states have professionals living there ?",
            "sql": "select state from professionals"
        },
        {
            "utterance": "May I have a list of states that has both owners and professionals living there ?",
            "sql": "select state from owners intersect select state from professionals"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 28,
    "final": {
        "utterance": "List the first name of all the professionals along with the description of the treatment they have done.",
        "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    "interaction": [
        {
            "utterance": "List the first name of professionals",
            "sql": "select distinct first_name from professionals"
        },
        {
            "utterance": "List the first name of professionals along with the description",
            "sql": "select distinct t1 . first_name , t3 . treatment_type_description from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id join treatment_types as t3 on t2 . treatment_type_code = t3 . treatment_type_code"
        },
        {
            "utterance": "List the first name of professionals along with the description of the treatment they have done ?",
            "sql": "select distinct t1 . first_name , t3 . treatment_type_description from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id join treatment_types as t3 on t2 . treatment_type_code = t3 . treatment_type_code"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "dog_kennels",
    "interaction_id": 29,
    "final": {
        "utterance": "List the first name of all the professionals along with the description of the treatment they have done.",
        "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you tell me how many different professional IDs are on this list ?",
            "sql": "select count ( distinct professional_id ) from professionals"
        },
        {
            "utterance": "Great ! Could you update this list to include both the first names and treatment type codes for each of these professionals IDs ? | Do you want the ids , first name for all professionals , along with the type codes of the treatment they have done ? | Yes please !",
            "sql": "select t1 . professional_id , t1 . first_name , t3 . treatment_type_code from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id join treatment_types as t3 on t2 . treatment_type_code = t3 . treatment_type_code"
        },
        {
            "utterance": "Excellent ! Can you filter this list to show me just the entries for the 5 most recent treatments ?",
            "sql": "select t1 . professional_id , t1 . first_name , t3 . treatment_type_code from professionals as t1 join treatments as t2 on t1 . professional_id = t2 . professional_id join treatment_types as t3 on t2 . treatment_type_code = t3 . treatment_type_code order by t2 . date_of_treatment desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
    },
    "interaction": [
        {
            "utterance": "What are the names of the properties with more that one room ?",
            "sql": "select property_name from properties where room_count > value"
        },
        {
            "utterance": "What are the names of the properties that are either houses or apartments with more than one room ?",
            "sql": "select property_name from properties where property_type_code = value union select property_name from properties where property_type_code = value and room_count > value"
        },
        {
            "utterance": "How many rooms do each of those have ?",
            "sql": "select property_name , room_count from properties where property_type_code = value union select property_name , room_count from properties where property_type_code = value and room_count > value"
        },
        {
            "utterance": "What is the average agreed selling price of all houses with more than one room ?",
            "sql": "select avg ( agreed_selling_price ) from properties where property_type_code = value and room_count > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "real_estate_properties",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the feature type name of feature AirCon?",
        "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
    },
    "interaction": [
        {
            "utterance": "What is the feature type name of the feature AirCon ?",
            "sql": "select t2 . feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1 . feature_type_code = t2 . feature_type_code where t1 . feature_name = value"
        },
        {
            "utterance": "What is the full feature description of the feature name AirCon ?",
            "sql": "select feature_description from other_available_features where feature_name = value"
        },
        {
            "utterance": "How many different feature IDs are there ?",
            "sql": "select count ( * ) from ( select distinct feature_id from other_available_features )"
        },
        {
            "utterance": "What sort of feature type code is associated with AirCon ?",
            "sql": "select feature_type_code from other_available_features where feature_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 0,
    "final": {
        "utterance": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    "interaction": [
        {
            "utterance": "how many singer there",
            "sql": "select count ( * ) from singer"
        },
        {
            "utterance": "what is the Citizenship of Alice Walton",
            "sql": "select citizenship from singer where name = value"
        },
        {
            "utterance": "how many sales from song id 3",
            "sql": "select sales from song where song_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 1,
    "final": {
        "utterance": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    "interaction": [
        {
            "utterance": "how many singers are on the table ?",
            "sql": "select count ( distinct singer_id ) from singer"
        },
        {
            "utterance": "how many singers have songs with sales more than 300000 ?",
            "sql": "select count ( distinct t1 . name ) from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id where t2 . sales > value"
        },
        {
            "utterance": "show distinct names of singers that have songs with sales more than 300000",
            "sql": "select distinct t1 . name from singer as t1 join song as t2 on t1 . singer_id = t2 . singer_id where t2 . sales > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 2,
    "final": {
        "utterance": "List the name of singers that do not have any song.",
        "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    "interaction": [
        {
            "utterance": "Can you list all the singer ids that are n't present in the song table ?",
            "sql": "select name from singer where singer_id not in ( select singer_id from song )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the name of singers whose birth year is either 1948 or 1949?",
        "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    "interaction": [
        {
            "utterance": "What are the names of the singers who were born in either 1948 or 1949 ?",
            "sql": "select name from singer where birth_year = value or birth_year = value"
        },
        {
            "utterance": "What is their citizenship ?",
            "sql": "select citizenship from singer where birth_year = value or birth_year = value"
        },
        {
            "utterance": "Of the singers that were born in 1948 or 1949 , which had the highest net worth ?",
            "sql": "select name from singer where birth_year = value or birth_year = value order by net_worth_millions desc limit value"
        },
        {
            "utterance": "Did she have a net worth that was over 30 million ?",
            "sql": "select name , net_worth_millions from singer where birth_year = value or birth_year = value order by net_worth_millions desc limit value"
        },
        {
            "utterance": "What was the lowest net worth of any singer who was born between 1948 and 1949 ?",
            "sql": "select name from singer where birth_year = value or birth_year = value order by net_worth_millions limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of singers that have more than one song.",
        "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "who is the singers name ? | did you mean List the names of all singers | yes tell me singers name ?",
            "sql": "select name from singer"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the most common citizenship of singers.",
        "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the most common citizenship of singers , please ?",
            "sql": "select citizenship from singer group by citizenship order by count ( * ) desc limit value"
        },
        {
            "utterance": "What about the least common ?",
            "sql": "select citizenship from singer group by citizenship order by count ( * ) asc limit value"
        },
        {
            "utterance": "What are the names of all the singers from Australia , please ?",
            "sql": "select name from singer where citizenship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "singer",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    "interaction": [
        {
            "utterance": "which singers were born before 1945 ?",
            "sql": "select * from singer where birth_year < value"
        },
        {
            "utterance": "how about after 1955 ?",
            "sql": "select * from singer where birth_year > value"
        },
        {
            "utterance": "which singers born before 1945 and after 1955 have the same citizenship ? | Did you mean the singers born before 1945 OR after 1955 ? | what is the citizenship of the singers born before 1945 ?",
            "sql": "select citizenship from singer where birth_year < value"
        },
        {
            "utterance": "and after 1955 ?",
            "sql": "select citizenship from singer where birth_year < value or birth_year > value"
        },
        {
            "utterance": "Which singers with a citizenship of United States were born before 1945 ?",
            "sql": "select * from singer where birth_year < value and citizenship = value"
        },
        {
            "utterance": "and after 1955",
            "sql": "select * from singer where birth_year < value and citizenship = value union select * from singer where birth_year > value and citizenship = value"
        },
        {
            "utterance": "Which singers with a citizenship of France were born before 1945 ?",
            "sql": "select * from singer where birth_year < value and citizenship = value"
        },
        {
            "utterance": "and after 1955 ?",
            "sql": "select * from singer where birth_year < value and citizenship = value union select * from singer where birth_year > value and citizenship = value"
        },
        {
            "utterance": "Which singers with a citizenship of Chile were born before 1945 or after 1955 ?",
            "sql": "select * from singer where birth_year < value and citizenship = value union select * from singer where birth_year > value and citizenship = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Show names of all high school students who do not have any friends.",
        "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    "interaction": [
        {
            "utterance": "How many friends in this table ?",
            "sql": "select count ( * ) from friend"
        },
        {
            "utterance": "Find average grade of the students ? | Do you want me to find the average grade of entries in the Highschooler table ? | Yes ?",
            "sql": "select avg ( grade ) from highschooler"
        },
        {
            "utterance": "Show names of all high school students ?",
            "sql": "select distinct name from highschooler"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "what is the average of friend id ?",
            "sql": "select avg ( friend_id ) from friend"
        },
        {
            "utterance": "what is the average of grades ?",
            "sql": "select avg ( grade ) from highschooler"
        },
        {
            "utterance": "what is the highest grade ?",
            "sql": "select max ( grade ) from highschooler"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Show the names of high school students and their corresponding number of friends.",
        "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( * ) from highschooler"
        },
        {
            "utterance": "What about friends ?",
            "sql": "select count ( * ) from friend"
        },
        {
            "utterance": "What are the names of all the highschoolers who have friends ?",
            "sql": "select t2 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you see all of the ids of the high school students ?",
            "sql": "select student_id from friend"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 4,
    "final": {
        "utterance": "How many friends does the high school student Kyle have?",
        "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "How many students in this table ?",
            "sql": "select count ( * ) from highschooler"
        },
        {
            "utterance": "To find average grade of these students ?",
            "sql": "select avg ( grade ) from highschooler"
        },
        {
            "utterance": "Find top grade of the student ?",
            "sql": "select grade from highschooler order by grade desc limit value"
        },
        {
            "utterance": "Find the lowest grade of the student ?",
            "sql": "select grade from highschooler order by grade limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Show ids of all students who do not have any friends.",
        "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    "interaction": [
        {
            "utterance": "Can you show me a list of student IDs and their friends IDs ?",
            "sql": "select student_id , friend_id from friend"
        },
        {
            "utterance": "Can you show me a list of all student IDs ? | Did you mean the id of all High schoolers ? | Yes",
            "sql": "select id from highschooler"
        },
        {
            "utterance": "Can you tell me the total number of student IDs ?",
            "sql": "select count ( id ) from highschooler"
        },
        {
            "utterance": "Can you tell me the total number of Friend IDs ?",
            "sql": "select count ( distinct friend_id ) from friend"
        },
        {
            "utterance": "Can you tell me which Student ID is not on the list of Friend IDs ? | by student id , do you mean the student id in the table friend or all high schoolers ' ids . | All high schoolers ' ids",
            "sql": "select id from highschooler except select friend_id from friend"
        },
        {
            "utterance": "Can you tell me the name and the grade of student ID 1510 ?",
            "sql": "select name , grade from highschooler where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the high schooler who has the greatest number of likes?",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the names of all of the high schoolers ?",
            "sql": "select name from highschooler"
        },
        {
            "utterance": "What is the value of the greatest number of likes for each high schooler ? | what did you mean the value ? | Sorry , the amount of the greatest number of likes .",
            "sql": "select count ( * ) from likes group by student_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the name of the high schooler who has the greatest number of likes ?",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the names of students who have at least 2 likes.",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show the names of students who have at least 2 likes .",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        },
        {
            "utterance": "How about 1 like ?",
            "sql": "select t2 . name from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        },
        {
            "utterance": "What are their IDs ?",
            "sql": "select t2 . id from likes as t1 join highschooler as t2 on t1 . student_id = t2 . id group by t1 . student_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 8,
    "final": {
        "utterance": "How many high schoolers are there in grade 9 or 10?",
        "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    "interaction": [
        {
            "utterance": "what is the average of grades ?",
            "sql": "select avg ( grade ) from highschooler"
        },
        {
            "utterance": "what is the name of higshoolers that starting with 'A ' ?",
            "sql": "select avg ( grade ) from highschooler"
        },
        {
            "utterance": "what is the best grade ? | Did you mean to ask for the highest grade ? | yes",
            "sql": "select max ( grade ) from highschooler"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the average grade of all students who have some friends.",
        "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    "interaction": [
        {
            "utterance": "What is the average grade of all students who have some friends , please ?",
            "sql": "select avg ( grade ) from highschooler where id in ( select t1 . student_id from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id )"
        },
        {
            "utterance": "Are there any students that have no friends ?",
            "sql": "select * from highschooler where id not in ( select student_id from friend )"
        },
        {
            "utterance": "What are their grades ?",
            "sql": "select grade from highschooler where id not in ( select student_id from friend )"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select name from highschooler where id not in ( select student_id from friend )"
        },
        {
            "utterance": "What are the names of the students with friends ?",
            "sql": "select name from highschooler where id in ( select student_id from friend )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How many likes does Kyle have?",
        "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( * ) from highschooler"
        },
        {
            "utterance": "How many students have grade 9",
            "sql": "select count ( * ) from highschooler where grade = value"
        },
        {
            "utterance": "What is his grade ?",
            "sql": "select grade from highschooler where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Which grade has the most high schoolers?",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which grade has the most high schoolers",
            "sql": "select grade from highschooler group by grade order by count ( * ) desc limit value"
        },
        {
            "utterance": "what are the name of high schoolers in grade 9",
            "sql": "select name from highschooler where grade = value"
        },
        {
            "utterance": "what grade is tiffany",
            "sql": "select grade from highschooler where name = value"
        },
        {
            "utterance": "how many high schoolers in grade 9",
            "sql": "select count ( * ) from highschooler where grade = value"
        },
        {
            "utterance": "what grade is gabriel | Did you mean the Gabriel with ID 1689 ? | yes",
            "sql": "select grade from highschooler where name = value and id = value"
        },
        {
            "utterance": "What ID is Tiffany ?",
            "sql": "select id from highschooler where name = value"
        },
        {
            "utterance": "Which high schooler has ID of 1510 ?",
            "sql": "select name from highschooler where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the names of all of the high schooler Kyle's friends.",
        "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    "interaction": [
        {
            "utterance": "Show the names of all of the high schoolers .",
            "sql": "select name from highschooler"
        },
        {
            "utterance": "Which of the high schoolers are friends with Kyle ?",
            "sql": "select t3 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . friend_id = t3 . id where t2 . name = value"
        },
        {
            "utterance": "What is Kyle 's ID ?",
            "sql": "select id from highschooler where name = value"
        },
        {
            "utterance": "Who has the ID 1709 ?",
            "sql": "select name from highschooler where id = value"
        },
        {
            "utterance": "Who else is Jordan friends with ?",
            "sql": "select t3 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . friend_id = t3 . id where t2 . name = value"
        },
        {
            "utterance": "Who is friends with Gabriel ?",
            "sql": "select t3 . name from friend as t1 join highschooler as t2 on t1 . student_id = t2 . id join highschooler as t3 on t1 . friend_id = t3 . id where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "network_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    "interaction": [
        {
            "utterance": "how many Likes there",
            "sql": "select count ( * ) from likes"
        },
        {
            "utterance": "how many friends there",
            "sql": "select count ( * ) from friend"
        },
        {
            "utterance": "what is the friend id of 1689 | Do you mean the id of students with friend id 1689 ? | yes sir",
            "sql": "select student_id from friend where friend_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the nationalities that are shared by at least two people?",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Hello ! Which nationalities are shared by more than one person ?",
            "sql": "select nationality from people group by nationality having count ( * ) > value"
        },
        {
            "utterance": "Okay . Thanks for that ! Can you show me all of the people IDs that have Russia as the nationality ?",
            "sql": "select people_id from people where nationality = value"
        },
        {
            "utterance": "Excellent ! Can you update this list to show the names of all of the associated individuals ?",
            "sql": "select people_id , name from people where nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the birth date of the poker player with the lowest earnings?",
        "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the birth date of the poker player with the lowest earnings ?",
            "sql": "select t1 . birth_date from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings asc limit value"
        },
        {
            "utterance": "What is the name of the poker player with the lowest earnings ?",
            "sql": "select name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings asc limit value"
        },
        {
            "utterance": "What is the nationality of the poker player with the lowest earnings ?",
            "sql": "select nationality from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the average earnings of poker players with height higher than 200?",
        "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    "interaction": [
        {
            "utterance": "how many poker players are on the table",
            "sql": "select count ( * ) from poker_player"
        },
        {
            "utterance": "how many have height higher than 200",
            "sql": "select count ( * ) from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t1 . height > value"
        },
        {
            "utterance": "what is the average earnings of poker players with height higher than 200",
            "sql": "select avg ( t2 . earnings ) from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t1 . height > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 3,
    "final": {
        "utterance": "What is the most common nationality of people?",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List all the nationalities in the table with no duplicate records",
            "sql": "select distinct nationality from people"
        },
        {
            "utterance": "List all the nationalities in the table",
            "sql": "select nationality from people"
        },
        {
            "utterance": "Count the number of records where nationality is Russia",
            "sql": "select count ( * ) from people where nationality = value"
        },
        {
            "utterance": "Count the number of records where nationality is Bulgaria",
            "sql": "select count ( * ) from people where nationality = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the names of poker players whose earnings is higher than 300000?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    "interaction": [
        {
            "utterance": "How many poker players are there ?",
            "sql": "select count ( * ) from poker_player"
        },
        {
            "utterance": "How many of them earning more than 300000",
            "sql": "select count ( * ) from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t2 . earnings > value"
        },
        {
            "utterance": "May i get the name detail of both players",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t2 . earnings > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the money rank of the poker player with the highest earnings?",
        "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the money rank of the poker player with the highest earnings ?",
            "sql": "select money_rank from poker_player order by earnings desc limit value"
        },
        {
            "utterance": "What is the highest earner 's people ID ?",
            "sql": "select people_id from poker_player order by earnings desc limit value"
        },
        {
            "utterance": "What was their best finish ?",
            "sql": "select best_finish from poker_player order by earnings desc limit value"
        },
        {
            "utterance": "And what is the highest earning ?",
            "sql": "select earnings from poker_player order by earnings desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the money rank of the poker player with the highest earnings?",
        "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How much did the winning poker player make ?",
            "sql": "select earnings from poker_player"
        },
        {
            "utterance": "Can you rank the poker players earnings from highest to lowest ?",
            "sql": "select earnings from poker_player order by earnings desc"
        },
        {
            "utterance": "How many final tables did the poker player with the least amount of earnings make ?",
            "sql": "select final_table_made from poker_player order by earnings asc limit value"
        },
        {
            "utterance": "What about the poker player with the most earnings how many final table did they make ?",
            "sql": "select final_table_made from poker_player order by earnings desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 7,
    "final": {
        "utterance": "List the names of people that are not poker players.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    "interaction": [
        {
            "utterance": "What are the names of non poker players ?",
            "sql": "select name from people where people_id not in ( select people_id from poker_player )"
        },
        {
            "utterance": "What are the names of people who play poker ?",
            "sql": "select name from people where people_id in ( select people_id from poker_player )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 8,
    "final": {
        "utterance": "What are the nationalities that are shared by at least two people?",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Which height of Aleksey Ostapenko ?",
            "sql": "select height from people where name = value"
        },
        {
            "utterance": "Who the person is born on August 16 , 1982 ?",
            "sql": "select name from people where birth_date = value"
        },
        {
            "utterance": "What are the people id of nationality Russia ?",
            "sql": "select people_id from people where nationality = value"
        },
        {
            "utterance": "What are the nationalities that are shared by at least two people ?",
            "sql": "select nationality from people group by nationality having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the names of poker players whose earnings is higher than 300000?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    "interaction": [
        {
            "utterance": "Name players whose earnings are more than 300000 . | Do you mean the names of the poker players whose earnings is more than 300000 ? | yes names",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id where t2 . earnings > value"
        },
        {
            "utterance": "how many poker players ?",
            "sql": "select count ( poker_player_id ) from poker_player"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 10,
    "final": {
        "utterance": "List the names of poker players ordered by the final tables made in ascending order.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    "interaction": [
        {
            "utterance": "Can you list all the names of the poker players ordered by the final tables in ascending order please ?",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . final_table_made"
        },
        {
            "utterance": "What are the nationalities of the poker players ordered by the final tables in ascending order ?",
            "sql": "select t1 . nationality from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . final_table_made"
        },
        {
            "utterance": "What is the name of the poker player with the highest earnings ?",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings desc limit value"
        },
        {
            "utterance": "What about the poker player with the lowest earnings ?",
            "sql": "select t1 . name from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings limit value"
        },
        {
            "utterance": "What was his best finish ?",
            "sql": "select t2 . best_finish from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t2 . earnings limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "poker_player",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the money rank of the tallest poker player?",
        "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "To which nationality does the people_id 1 belongs to ?",
            "sql": "select nationality from people where people_id = value"
        },
        {
            "utterance": "Tell me the birthday date of Teodor Salparov ?",
            "sql": "select birth_date from people where name = value"
        },
        {
            "utterance": "Tell me the earnings of the people id 5 ?",
            "sql": "select earnings from poker_player where people_id = value"
        },
        {
            "utterance": "What is the money rank of the tallest poker player ?",
            "sql": "select t2 . money_rank from people as t1 join poker_player as t2 on t1 . people_id = t2 . people_id order by t1 . height desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the id and name of the museum visited most times?",
        "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the name of the museums ?",
            "sql": "select name from museum"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
    },
    "interaction": [
        {
            "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011 ?",
            "sql": "select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id join museum as t3 on t3 . museum_id = t2 . museum_id where t3 . open_year < value intersect select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id join museum as t3 on t3 . museum_id = t2 . museum_id where t3 . open_year > value"
        },
        {
            "utterance": "What museum did he visit before 2009 ?",
            "sql": "select t3 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id join museum as t3 on t3 . museum_id = t2 . museum_id where t3 . open_year < value and t1 . name = ( select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id join museum as t3 on t3 . museum_id = t2 . museum_id where t3 . open_year < value intersect select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id join museum as t3 on t3 . museum_id = t2 . museum_id where t3 . open_year > value )"
        },
        {
            "utterance": "What is Fernando Gago 's membership level ?",
            "sql": "select level_of_membership from visitor where name = value"
        },
        {
            "utterance": "How old is Fernando Gago ?",
            "sql": "select age from visitor where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the id and name of the museum that has the most staff members?",
        "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many museums do you have ?",
            "sql": "select count ( * ) from museum"
        },
        {
            "utterance": "What is the number of staff members in each museum ?",
            "sql": "select num_of_staff from museum"
        },
        {
            "utterance": "Can you tell me the id and the name of the museum , which has the most staff members ?",
            "sql": "select museum_id , name from museum order by num_of_staff desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    "interaction": [
        {
            "utterance": "What is the membership level of Gonzalo Higua\u00edn ?",
            "sql": "select level_of_membership from visitor where name = value"
        },
        {
            "utterance": "whose membership level is 5 ?",
            "sql": "select name from visitor where level_of_membership = value"
        },
        {
            "utterance": "how many numbers of persons whose membership level is greater than 5 ?",
            "sql": "select count ( * ) from visitor where level_of_membership > value"
        },
        {
            "utterance": "What is the age of membership level 8 ?",
            "sql": "select age from visitor where level_of_membership = value"
        },
        {
            "utterance": "how many persons who have membership level greater than 4 ?",
            "sql": "select count ( * ) from visitor where level_of_membership > value"
        },
        {
            "utterance": "please sort the names of persons whose age from old to young according to the membership level ?",
            "sql": "select name , level_of_membership from visitor where level_of_membership > value order by age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    "interaction": [
        {
            "utterance": "What are the names who have a membership level higher than 4 ?",
            "sql": "select name from visitor where level_of_membership > value"
        },
        {
            "utterance": "And can you add a column showing their age ?",
            "sql": "select name , age from visitor where level_of_membership > value"
        },
        {
            "utterance": "And now sort the list by age with oldest first .",
            "sql": "select name , age from visitor where level_of_membership > value order by age desc"
        },
        {
            "utterance": "OK ... what are their customer IDs ?",
            "sql": "select id from visitor where level_of_membership > value order by age desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name and age of the visitor who bought the most tickets at once.",
        "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What age of Gonzalo Higua\u00edn ?",
            "sql": "select age from visitor where name = value"
        },
        {
            "utterance": "How many tickets of customer id 5 ?",
            "sql": "select num_of_ticket from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id where visitor_id = value"
        },
        {
            "utterance": "How many spent of Arjen Robben ?",
            "sql": "select total_spent from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id where name = value"
        },
        {
            "utterance": "Find the name and age of the visitor who bought the most tickets at once .",
            "sql": "select t1 . name , t1 . age from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id order by t2 . num_of_ticket desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 6,
    "final": {
        "utterance": "What is the name of the museum that had no visitor yet?",
        "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
    },
    "interaction": [
        {
            "utterance": "how many museum id in the list ?",
            "sql": "select count ( museum_id ) from museum"
        },
        {
            "utterance": "find the staff count in the museum with an id 3 ?",
            "sql": "select num_of_staff from museum where museum . museum_id = value"
        },
        {
            "utterance": "which year open the capital plaza museum ?",
            "sql": "select open_year from museum where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 7,
    "final": {
        "utterance": "find the id, name and age for visitors who visited some museums more than once.",
        "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "List the names of all visitors who visited some museums more than once , please .",
            "sql": "select t1 . name from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "Can you list their IDs and ages too ?",
            "sql": "select t1 . name , t1 . id , t1 . age from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "What are the names and level of membership for all visitors over the age of 20 ?",
            "sql": "select name , level_of_membership from visitor where age > value"
        },
        {
            "utterance": "What are the names and ages of all the customers who spent over 100 ?",
            "sql": "select t1 . name , t1 . age from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id where t2 . total_spent > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    "interaction": [
        {
            "utterance": "Whats the level of membership customer id 1 has ?",
            "sql": "select level_of_membership from visitor where id = value"
        },
        {
            "utterance": "What is the name of customer id 1 ?",
            "sql": "select name from visitor where id = value"
        },
        {
            "utterance": "What is the age of customer id 1 ?",
            "sql": "select age from visitor where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 9,
    "final": {
        "utterance": "What are the average and maximum number of tickets bought in all visits?",
        "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
    },
    "interaction": [
        {
            "utterance": "List the number of tickets bought in all visits | the total number of tickets bought in all visits is 63 . | what is the maximum number of tickets bought in all visits",
            "sql": "select max ( num_of_ticket ) from visit"
        },
        {
            "utterance": "what is the average number of tickets bought in all visits",
            "sql": "select avg ( num_of_ticket ) from visit"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the total ticket expense of the visitors whose membership level is 1?",
        "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the total amount spent on tickets by visitors with membership level 1 ?",
            "sql": "select sum ( t2 . total_spent ) from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id where t1 . level_of_membership = value"
        },
        {
            "utterance": "Can you tell me how many visitors there are at membership level 1 ?",
            "sql": "select count ( id ) from visitor where level_of_membership = value"
        },
        {
            "utterance": "How many membership levels are there ?",
            "sql": "select count ( distinct level_of_membership ) from visitor"
        },
        {
            "utterance": "Can you show me the names of each visitor with membership level 1 ?",
            "sql": "select name from visitor where level_of_membership = value"
        },
        {
            "utterance": "I 'd like to know how much was spent on tickets at each membership level , can you show me ?",
            "sql": "select t1 . level_of_membership , sum ( total_spent ) from visitor as t1 join visit as t2 on t1 . id = t2 . visitor_id group by level_of_membership"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    "interaction": [
        {
            "utterance": "How many visitors are ther ?",
            "sql": "select count ( * ) from visitor"
        },
        {
            "utterance": "How many of them have membership levels higher than 4 ?",
            "sql": "select count ( * ) from visitor where level_of_membership > value"
        },
        {
            "utterance": "Can you please list their names ?",
            "sql": "select name from visitor where level_of_membership > value"
        },
        {
            "utterance": "Can you rank them by their membership level from high to low ?",
            "sql": "select name from visitor where level_of_membership > value order by level_of_membership desc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "museum_visit",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the number of visitors who did not visit any museum opened after 2010.",
        "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
    },
    "interaction": [
        {
            "utterance": "Hello there ! Can you tell me the total number of visitors who did not visit any museum that was opened after 2010 ?",
            "sql": "select count ( * ) from visitor where id not in ( select t2 . visitor_id from museum as t1 join visit as t2 on t1 . museum_id = t2 . museum_id where t1 . open_year > value )"
        },
        {
            "utterance": "Can you please provide me with the names and membership levels of these three members ?",
            "sql": "select name , level_of_membership from visitor where id not in ( select t2 . visitor_id from museum as t1 join visit as t2 on t1 . museum_id = t2 . museum_id where t1 . open_year > value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 0,
    "final": {
        "utterance": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    "interaction": [
        {
            "utterance": "how many TV Channels there",
            "sql": "select count ( * ) from tv_channel"
        },
        {
            "utterance": "what is the language of sky music",
            "sql": "select language from tv_channel where series_name = value"
        },
        {
            "utterance": "what is the title of id 2.0",
            "sql": "select title from cartoon where id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 1,
    "final": {
        "utterance": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    "interaction": [
        {
            "utterance": "Which titles were directed by Ben Jones or Brandon Vietti ?",
            "sql": "select title from cartoon where directed_by = value or directed_by = value"
        },
        {
            "utterance": "What are their original air dates ?",
            "sql": "select title , original_air_date from cartoon where directed_by = value or directed_by = value"
        },
        {
            "utterance": "Who are the writers of these cartoons ?",
            "sql": "select title , written_by from cartoon where directed_by = value or directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 2,
    "final": {
        "utterance": "find id of the tv channels that from the countries where have more than two tv channels.",
        "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    "interaction": [
        {
            "utterance": "find id of the tv channels that are from countries with more than two tv channels",
            "sql": "select id from tv_channel where country in ( select country from tv_channel group by country having count ( * ) > value )"
        },
        {
            "utterance": "What is the package option for that channel ?",
            "sql": "select package_option from tv_channel where country in ( select country from tv_channel group by country having count ( * ) > value )"
        },
        {
            "utterance": "List all series names in alphabetical order",
            "sql": "select series_name from tv_channel order by series_name asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 3,
    "final": {
        "utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    "interaction": [
        {
            "utterance": "Which TV channels do not play any cartoons by Ben Jones ? List the ids .",
            "sql": "select id from tv_channel except select channel from cartoon where directed_by = value"
        },
        {
            "utterance": "And which channels play Ben Jones 's cartoons ?",
            "sql": "select id from tv_channel where id in ( select channel from cartoon where directed_by = value )"
        },
        {
            "utterance": "What cartoon titles do channels play ?",
            "sql": "select title from cartoon where directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 4,
    "final": {
        "utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    "interaction": [
        {
            "utterance": "List the cartoons that are directed by Ben Jones . | Here are the titles of cartoons that are directed by Ben Jones | List all tv channels with their id 's ... ..",
            "sql": "select channel , id from cartoon"
        },
        {
            "utterance": "Is there any other tv channel other than italian language ?",
            "sql": "select series_name from tv_channel except select series_name from tv_channel where language = value"
        },
        {
            "utterance": "Find the id of tv channels that do not play any cartoon directed by Ben Jones .",
            "sql": "select id from tv_channel except select channel from cartoon where directed_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 5,
    "final": {
        "utterance": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    "interaction": [
        {
            "utterance": "Which country tv channels some cartoon written by todd casey ?",
            "sql": "select t1 . country from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . written_by = value"
        },
        {
            "utterance": "What is the title of cartoon written by todd casey ?",
            "sql": "select title from cartoon where written_by = value"
        },
        {
            "utterance": "Who directed the cartoon titled enter the outsiders ?",
            "sql": "select directed_by from cartoon where title = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 6,
    "final": {
        "utterance": "List the number of different series names and contents in the TV Channel table.",
        "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    "interaction": [
        {
            "utterance": "IN WHAT LANGUAGE SKY MUSIC AVAILABLE ?",
            "sql": "select language from tv_channel where series_name = value"
        },
        {
            "utterance": "WHAT IS THE PACKAGE OPTION OF ALL CHANNELS ?",
            "sql": "select distinct package_option from tv_channel"
        },
        {
            "utterance": "what is the content of all the channels ?",
            "sql": "select distinct content from tv_channel"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 7,
    "final": {
        "utterance": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Can you please tell me the language used on the least number of TV Channels ?",
            "sql": "select language from tv_channel group by language order by count ( * ) asc limit value"
        },
        {
            "utterance": "What language is used on the most number of TV channels ?",
            "sql": "select language from tv_channel group by language order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the most common content of those TV channels ?",
            "sql": "select content from tv_channel group by content order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the least common content ?",
            "sql": "select content from tv_channel group by content order by count ( * ) limit value"
        },
        {
            "utterance": "Can you please tell me the series name of those TV Channels ?",
            "sql": "select series_name from tv_channel"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 8,
    "final": {
        "utterance": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    "interaction": [
        {
            "utterance": "What is the TV Channel of TV series `` A love of a lifetime '' ?",
            "sql": "select t1 . series_name from tv_channel as t1 join tv_series as t2 on t1 . id = t2 . channel where t2 . episode = value"
        },
        {
            "utterance": "How may viewers does `` A love of a lifetime '' have ?",
            "sql": "select viewers_m from tv_series where episode = value"
        },
        {
            "utterance": "How about the rating of `` A love of a lifetime ? ''",
            "sql": "select weekly_rank from tv_series where episode = value"
        },
        {
            "utterance": "And when was `` A love of a lifetime '' aired ?",
            "sql": "select air_date from tv_series where episode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the production code and channel of the most recently aired cartoon.",
        "sql": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "which is the most recently aired cartoon ?",
            "sql": "select title from cartoon order by original_air_date limit value"
        },
        {
            "utterance": "find the channel of the most recently aired cartoon .",
            "sql": "select channel from cartoon order by original_air_date limit value"
        },
        {
            "utterance": "Find the production code and channel of the most recently aired cartoon .",
            "sql": "select production_code , channel , original_air_date from cartoon order by original_air_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 10,
    "final": {
        "utterance": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you provide me with a list of all cartoons written by Todd Casey ?",
            "sql": "select * from cartoon where written_by = value"
        },
        {
            "utterance": "Can you update the list to show only those Titles which are cartoons ?",
            "sql": "select title from cartoon where written_by = value"
        },
        {
            "utterance": "Can you update this list to include the corresponding television channel ?",
            "sql": "select t1 . id from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . written_by = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the production code and channel of the most recently aired cartoon.",
        "sql": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which cartoon aired first ?",
            "sql": "select title from cartoon order by original_air_date limit value"
        },
        {
            "utterance": "What was the last cartoon to air ?",
            "sql": "select title from cartoon order by original_air_date desc limit value"
        },
        {
            "utterance": "What channel was it on ?",
            "sql": "select channel from cartoon order by original_air_date desc limit value"
        },
        {
            "utterance": "What is the production code ?",
            "sql": "select production_code from cartoon order by original_air_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "tvshow",
    "interaction_id": 12,
    "final": {
        "utterance": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    "interaction": [
        {
            "utterance": "which countries tv channels are not playing any cartoon written todd casey",
            "sql": "select country from tv_channel except select t1 . country from tv_channel as t1 join cartoon as t2 on t1 . id = t2 . channel where t2 . written_by = value"
        },
        {
            "utterance": "who directed the cartoon the rise of blue beetle written by Michael Jelenic ?",
            "sql": "select directed_by from cartoon where title = value and written_by = value"
        },
        {
            "utterance": "whats the package option for TV channels in itally ?",
            "sql": "select package_option from tv_channel where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the id of students who do not have a cat pet.",
        "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    "interaction": [
        {
            "utterance": "How many students have a cat pet ?",
            "sql": "select count ( * ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "And what about students that do n't have a cat pet ?",
            "sql": "select count ( * ) from ( select stuid from student except select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value )"
        },
        {
            "utterance": "And what are their ids ?",
            "sql": "select stuid from student except select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    "interaction": [
        {
            "utterance": "Can you show me a list of all of the students IDs for students who have dogs as their pet type ?",
            "sql": "select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "Which of those two students have a cat as their pet in addition also having a dog ?",
            "sql": "select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value intersect select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "Thanks ! Can you please list the first name and ages of the two students who have dogs as pets ?",
            "sql": "select t1 . fname , t1 . age from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 2,
    "final": {
        "utterance": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    "interaction": [
        {
            "utterance": "How many students are there ?",
            "sql": "select count ( stuid ) from student"
        },
        {
            "utterance": "How old is the student whose last name is 'Smith \u2019 ?",
            "sql": "select age from student where lname = value"
        },
        {
            "utterance": "Can you plsease include their pets ' id too ?",
            "sql": "select t2 . petid , age from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid where t1 . lname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the major and age of students who do not have a cat pet.",
        "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you show me a list of all of the student IDs for students who have pets ?",
            "sql": "select distinct t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid"
        },
        {
            "utterance": "Great ! Can you show me the name ( first and last ) , major and age of those two students ?",
            "sql": "select distinct t1 . fname , t1 . lname , t1 . major , t1 . age from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid"
        },
        {
            "utterance": "Great ! Now can you filter this list to show me which student ( s ) have a pet other than a cat ?",
            "sql": "select fname , lname , major , age from student where stuid not in ( select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the first name and gender of student who have more than one pet.",
        "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "How many students have more than one pet ?",
            "sql": "select count ( * ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid group by t1 . stuid having count ( * ) > value"
        },
        {
            "utterance": "What are their names ?",
            "sql": "select t1 . lname , t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid group by t1 . stuid having count ( * ) > value"
        },
        {
            "utterance": "What gender is Kim Tracy ?",
            "sql": "select t1 . lname , t1 . fname , t1 . sex from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid group by t1 . stuid having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the average age of students who do not have any pet.",
        "sql": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)"
    },
    "interaction": [
        {
            "utterance": "How many female students are on the list ?",
            "sql": "select count ( * ) from student where sex = value"
        },
        {
            "utterance": "What is the full names of least aged students on the list ?",
            "sql": "select lname , fname from student order by age limit value"
        },
        {
            "utterance": "Find the average age of students who do not have any pet ?",
            "sql": "select avg ( age ) from student where stuid not in ( select t1 . stuid from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid )"
        },
        {
            "utterance": "What is the city code of student id 1003 ?",
            "sql": "select city_code from student where stuid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of students who have both cat and dog pets.",
        "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
    },
    "interaction": [
        {
            "utterance": "What are the names of all students who have cat pets ? | Linda is the first name of the student who has a cat pet . | What are the first names of all students who have dog pets ?",
            "sql": "select t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "How many students have any type of pet ?",
            "sql": "select count ( t2 . stuid ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid"
        },
        {
            "utterance": "What is the age of Linda 's pet ?",
            "sql": "select t3 . pet_age from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t1 . fname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the last name of the student who has a cat that is age 3.",
        "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the last names of students who have pets ?",
            "sql": "select lname from student as t1 join has_pet as t2 on t2 . stuid = t1 . stuid"
        },
        {
            "utterance": "Hmm , I want to know the last names of students who have cats .",
            "sql": "select t1 . lname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "Please find out the last name of the student who has a cat that is age 3 .",
            "sql": "select t1 . lname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pet_age = value and t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Find the average and maximum age for each type of pet.",
        "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    "interaction": [
        {
            "utterance": "Hey can you tell me the average age for cats ?",
            "sql": "select avg ( pet_age ) from pets where pettype = value"
        },
        {
            "utterance": "What about for dogs ?",
            "sql": "select avg ( pet_age ) from pets where pettype = value"
        },
        {
            "utterance": "Thanks ! Now what 's the maximum age for dogs ?",
            "sql": "select max ( pet_age ) from pets where pettype = value"
        },
        {
            "utterance": "And the maximum age for cats and dogs ?",
            "sql": "select max ( pet_age ) , pettype from pets group by pettype"
        },
        {
            "utterance": "So what 's the maximum age for just cats ?",
            "sql": "select max ( pet_age ) from pets where pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the number of dog pets that are raised by female students (with sex F).",
        "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    "interaction": [
        {
            "utterance": "That are available",
            "sql": "select fname , lname from student where sex = value"
        },
        {
            "utterance": "What are the city codes for all available students",
            "sql": "select distinct city_code from student"
        },
        {
            "utterance": "Can i have the weight of the pets that were raised by female student",
            "sql": "select t3 . weight from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t2 . petid = t3 . petid where t1 . sex = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find number of pets owned by students who are older than 20.",
        "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    "interaction": [
        {
            "utterance": "How many students in the `` Student '' table are over the age of 20 ?",
            "sql": "select count ( * ) from student where age > value"
        },
        {
            "utterance": "How many of those students own pets ?",
            "sql": "select count ( * ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid where t1 . age > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the weight of the youngest dog.",
        "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi . What are the different types of pets ?",
            "sql": "select distinct pettype from pets"
        },
        {
            "utterance": "Between the cats and dogs , how many of them are dogs ?",
            "sql": "select count ( * ) from pets where pettype = value"
        },
        {
            "utterance": "What are the ages of the 2 dogs ?",
            "sql": "select pet_age from pets where pettype = value"
        },
        {
            "utterance": "How much does the youngest dog , the 1 year old , weigh ?",
            "sql": "select weight from pets where pettype = value and pet_age = ( select min ( pet_age ) from pets where pettype = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "pets_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the first name of students who have cat or dog pet.",
        "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    "interaction": [
        {
            "utterance": "hi , what number of students have a dog as a pet ?",
            "sql": "select count ( * ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "and what about the number that have a cat as a pet ?",
            "sql": "select count ( * ) from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value"
        },
        {
            "utterance": "Great . Can you tell me the first names of these 3 students ?",
            "sql": "select distinct t1 . fname from student as t1 join has_pet as t2 on t1 . stuid = t2 . stuid join pets as t3 on t3 . petid = t2 . petid where t3 . pettype = value or t3 . pettype = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 0,
    "final": {
        "utterance": "Show names of teachers and the number of courses they teach.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "How many teachers are there ?",
            "sql": "select count ( * ) from teacher"
        },
        {
            "utterance": "How many courses do you have ?",
            "sql": "select count ( * ) from course_arrange"
        },
        {
            "utterance": "Can you tell me the names of teachers and the number of courses they teach ?",
            "sql": "select t2 . name , count ( * ) from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id group by t2 . name"
        },
        {
            "utterance": "Sure . Can you tell me the age of each teacher ?",
            "sql": "select name , age from teacher"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 1,
    "final": {
        "utterance": "Show the name of the teacher for the math course.",
        "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    "interaction": [
        {
            "utterance": "Show the name of the teacher for the math course please ?",
            "sql": "select t3 . name from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id where t2 . course = value"
        },
        {
            "utterance": "What grades do they teach ? | The grades of courses that the teachers for the math teach are 1 and 3 | What dates do those courses start ?",
            "sql": "select t2 . staring_date from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id where t2 . course = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 2,
    "final": {
        "utterance": "Show names of teachers and the number of courses they teach.",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    "interaction": [
        {
            "utterance": "Can you show me the names of teachers with the course id for the courses they teach ?",
            "sql": "select t2 . name , t1 . course_id from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id"
        },
        {
            "utterance": "Show me the teacher id with the number of courses they teach .",
            "sql": "select t2 . name , count ( * ) from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id group by t2 . name"
        },
        {
            "utterance": "I want to know the names of the teachers below age 30 .",
            "sql": "select name from teacher where age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 3,
    "final": {
        "utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    "interaction": [
        {
            "utterance": "list the name of the teachers and the courses assigned for them to teach",
            "sql": "select t3 . name , t2 . course from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id"
        },
        {
            "utterance": "arrange this list with the teachers name in ascending order",
            "sql": "select t3 . name , t2 . course from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id order by t3 . name"
        },
        {
            "utterance": "include teachers id in tha same list",
            "sql": "select t3 . name , t2 . course , t1 . teacher_id from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id order by t3 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 4,
    "final": {
        "utterance": "What is the hometown of the youngest teacher?",
        "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Who is the youngest teacher ?",
            "sql": "select name from teacher order by age asc limit value"
        },
        {
            "utterance": "What is his hometown ?",
            "sql": "select hometown from teacher order by age asc limit value"
        },
        {
            "utterance": "What is the age of Vicente Carretero ?",
            "sql": "select age from teacher where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 5,
    "final": {
        "utterance": "Show names of teachers that teach at least two courses.",
        "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "What 're the names of the teachers who teach two or more courses ?",
            "sql": "select t2 . name from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id group by t2 . name having count ( * ) > = value"
        },
        {
            "utterance": "What is her age and hometown ?",
            "sql": "select t2 . age , t2 . hometown from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id group by t2 . name having count ( * ) > = value"
        },
        {
            "utterance": "What grade does the oldest teacher teach ?",
            "sql": "select t1 . grade from course_arrange as t1 join teacher as t2 on t1 . teacher_id = t2 . teacher_id order by t2 . age desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "course_teach",
    "interaction_id": 6,
    "final": {
        "utterance": "Show the name of the teacher for the math course.",
        "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    "interaction": [
        {
            "utterance": "how many course id numbers",
            "sql": "select count ( course_id ) from course"
        },
        {
            "utterance": "what are the courses",
            "sql": "select course from course"
        },
        {
            "utterance": "great , how many teachers available to conduct the course",
            "sql": "select count ( teacher_id ) from teacher"
        },
        {
            "utterance": "which teacher takes math class",
            "sql": "select t3 . name from course_arrange as t1 join course as t2 on t1 . course_id = t2 . course_id join teacher as t3 on t1 . teacher_id = t3 . teacher_id where t2 . course = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the average age of losers and winners of all matches.",
        "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    "interaction": [
        {
            "utterance": "What 's the average age of all losers of all matches ?",
            "sql": "select avg ( loser_age ) from matches"
        },
        {
            "utterance": "What 's the average age of all winners of all matches ?",
            "sql": "select avg ( winner_age ) from matches"
        },
        {
            "utterance": "What are the average minutes of all matches ?",
            "sql": "select avg ( minutes ) from matches"
        },
        {
            "utterance": "What was the longest match in minutes ?",
            "sql": "select max ( minutes ) from matches"
        },
        {
            "utterance": "What was the shortest match in minutes ?",
            "sql": "select min ( minutes ) from matches"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the average age of losers and winners of all matches.",
        "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    "interaction": [
        {
            "utterance": "What is the average age of the losers from all matches ?",
            "sql": "select avg ( loser_age ) from matches"
        },
        {
            "utterance": "What about the average age of the winners from all matches ?",
            "sql": "select avg ( winner_age ) from matches"
        },
        {
            "utterance": "How many winners are left handed ?",
            "sql": "select count ( * ) from matches where winner_hand = value"
        },
        {
            "utterance": "What are the names of the winner and loser from the longest match ?",
            "sql": "select winner_name , loser_name from matches where minutes = ( select max ( minutes ) from matches )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    "interaction": [
        {
            "utterance": "hi , what are the names of the players ?",
            "sql": "select first_name , last_name from players"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select first_name , last_name from players where hand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the name of tourney that has more than 10 matches.",
        "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    "interaction": [
        {
            "utterance": "what are the names of the tourneys ?",
            "sql": "select distinct tourney_name from matches"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the name and rank of the 3 youngest winners across all matches.",
        "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "Find the names of the 3 youngest winners across all matches",
            "sql": "select distinct winner_name from matches order by winner_age limit value"
        },
        {
            "utterance": "What are points of the 3 youngest winners ?",
            "sql": "select loser_rank_points from matches order by winner_age limit value"
        },
        {
            "utterance": "Give me the age of the 3 youngest winners across all matches",
            "sql": "select winner_age from matches order by winner_age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the codes of countries that have more than 50 players.",
        "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    "interaction": [
        {
            "utterance": "Can you show the birth date of player id 200002 ?",
            "sql": "select birth_date from players where player_id = value"
        },
        {
            "utterance": "What is the first name of player id 200001 ?",
            "sql": "select first_name from players where player_id = value"
        },
        {
            "utterance": "Can you show the codes of countries that have more than 50 players ?",
            "sql": "select country_code from players group by country_code having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the year that has the most number of matches.",
        "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What year has the most number of matches , please ?",
            "sql": "select year from matches group by year order by count ( * ) desc limit value"
        },
        {
            "utterance": "What year has the least number of matches , please ?",
            "sql": "select year from matches group by year order by count ( * ) limit value"
        },
        {
            "utterance": "How many matches were there that year ?",
            "sql": "select year , count ( * ) from matches group by year order by count ( * ) limit value"
        },
        {
            "utterance": "What about in 2016 ?",
            "sql": "select year , count ( * ) from matches where year = value"
        },
        {
            "utterance": "How many of those were played on a hard surface ?",
            "sql": "select count ( * ) from matches where surface = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the codes of countries that have more than 50 players.",
        "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    "interaction": [
        {
            "utterance": "What are the codes of countries that have more than 50 players ?",
            "sql": "select country_code from players group by country_code having count ( * ) > value"
        },
        {
            "utterance": "What are the codes of countries that have less than 40 players ?",
            "sql": "select country_code from players group by country_code having count ( * ) < value"
        },
        {
            "utterance": "What are the player names from the country code AHO ? | Do you want first name and last name ? | yes",
            "sql": "select first_name , last_name from players where country_code = value"
        },
        {
            "utterance": "What are their player IDs ?",
            "sql": "select player_id from players where country_code = value"
        },
        {
            "utterance": "What hand is player id 206449 ?",
            "sql": "select hand from players where player_id = value"
        },
        {
            "utterance": "How many other players have that ?",
            "sql": "select count ( * ) from players where hand = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 8,
    "final": {
        "utterance": "find the code of the country where has the greatest number of players.",
        "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many players are presented on the table",
            "sql": "select count ( * ) from players"
        },
        {
            "utterance": "list out the players first name",
            "sql": "select first_name from players"
        },
        {
            "utterance": "what is the country code of Mirjana",
            "sql": "select country_code from players where first_name = value"
        },
        {
            "utterance": "what is the birth date of Justine",
            "sql": "select birth_date from players where first_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the name and rank of the 3 youngest winners across all matches.",
        "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names of the 3 youngest winners across all matches ?",
            "sql": "select winner_name from matches order by winner_age limit value"
        },
        {
            "utterance": "What are their ranks ? | do you want to show their names as well ? | yes , please",
            "sql": "select distinct winner_name , winner_rank from matches order by winner_age limit value"
        },
        {
            "utterance": "What is the loser name for each of those matches ?",
            "sql": "select loser_name from matches order by winner_age limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the first name and country code of the oldest player.",
        "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the player id for the youngest player ?",
            "sql": "select player_id from players order by birth_date desc limit value"
        },
        {
            "utterance": "What about the oldest ?",
            "sql": "select player_id from players order by birth_date limit value"
        },
        {
            "utterance": "What is their first name and country code ?",
            "sql": "select first_name , country_code from players order by birth_date limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 11,
    "final": {
        "utterance": "Find the name and rank points of the winner who won the most times.",
        "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Tell me the loser_name whose age is 24.626967830300003",
            "sql": "select distinct loser_name from matches where loser_age = value"
        },
        {
            "utterance": "Tell me the total number of matches played by Petra Kvitova ...",
            "sql": "select count ( * ) from matches where loser_name = value or winner_name = value"
        },
        {
            "utterance": "Who has high loser_rank_points higher than 3500 ? | What attributes of the people with loser_rank_points higher than 3500 would you like to know ? | based on loser_id",
            "sql": "select distinct loser_id from matches where loser_rank_points > value"
        },
        {
            "utterance": "Find the name and rank points of the winner who won the most times ...",
            "sql": "select winner_name , winner_rank_points from matches group by winner_name order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 12,
    "final": {
        "utterance": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    "interaction": [
        {
            "utterance": "what is the first name of player id 200001 ?",
            "sql": "select first_name from players where player_id = value"
        },
        {
            "utterance": "When is birth date for Martina ? | There are a lot of Martina . Do you mean the Marina with id 200001 ? | Martina with id 200001",
            "sql": "select birth_date from players where player_id = value"
        },
        {
            "utterance": "what is the country code for player id 200003 ?",
            "sql": "select country_code from players where player_id = value"
        },
        {
            "utterance": "what is the last name of Justine of player id 200003 ?",
            "sql": "select last_name from players where player_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 13,
    "final": {
        "utterance": "Find the total ranking points for each player and their first name.",
        "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    "interaction": [
        {
            "utterance": "find the total ranking point for each player and their first name",
            "sql": "select sum ( ranking_points ) , t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . first_name"
        },
        {
            "utterance": "which player got first rank and their name | Do you want the first name or last name ? | first name",
            "sql": "select distinct t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id where t2 . ranking = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the average ranking for each player and their first name.",
        "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    "interaction": [
        {
            "utterance": "Could you list the average ranking for each player with their first name ?",
            "sql": "select avg ( ranking ) , t1 . first_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . player_id"
        },
        {
            "utterance": "Could you add in their last names please ?",
            "sql": "select avg ( ranking ) , t1 . first_name , t1 . last_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id group by t1 . player_id"
        },
        {
            "utterance": "What are the full names of all left-handed players ( hand value `` L '' ) ?",
            "sql": "select t1 . first_name , t1 . last_name from players as t1 where t1 . hand = value"
        },
        {
            "utterance": "Could you just show their last names , please ?",
            "sql": "select t1 . last_name from players as t1 where t1 . hand = value"
        },
        {
            "utterance": "Would you also add in their rankings ? | Do you mean their average rankings ? | Yes , please .",
            "sql": "select avg ( ranking ) , t1 . last_name from players as t1 join rankings as t2 on t1 . player_id = t2 . player_id where t1 . hand = value group by t1 . first_name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 15,
    "final": {
        "utterance": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "find the name of loser and winner who played in the match with the greatest number of minutes",
            "sql": "select winner_name , loser_name from matches order by minutes desc limit value"
        },
        {
            "utterance": "what were the player 's scores ?",
            "sql": "select score from matches order by minutes desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "wta_1",
    "interaction_id": 16,
    "final": {
        "utterance": "List the number of all matches who played in years of 2013 or 2016.",
        "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    "interaction": [
        {
            "utterance": "How many matches played in 2013 ?",
            "sql": "select count ( * ) from matches where year = value"
        },
        {
            "utterance": "How many matches played in 2016 ?",
            "sql": "select count ( * ) from matches where year = value"
        },
        {
            "utterance": "What is the loser id of petra kvitota ? | Do you mean loser id | Yes",
            "sql": "select distinct loser_id from matches where loser_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 0,
    "final": {
        "utterance": "List the name of the conductor with the most years of work.",
        "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "List the name of the conductor with the most years of work .",
            "sql": "select name from conductor order by year_of_work desc limit value"
        },
        {
            "utterance": "How many years did Robert Craft work ?",
            "sql": "select year_of_work from conductor where name = value"
        },
        {
            "utterance": "List the name of the conductor with the least years of work",
            "sql": "select name from conductor order by year_of_work asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    "interaction": [
        {
            "utterance": "When are the auditions ? | Would you like to know the dates of all performances with the type audition ? | Yes that 's exactly it",
            "sql": "select date from performance where type like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 2,
    "final": {
        "utterance": "List the names of orchestras that have no performance.",
        "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    "interaction": [
        {
            "utterance": "How many orchestras are there ?",
            "sql": "select count ( distinct orchestra ) from orchestra"
        },
        {
            "utterance": "How many of them are there have no performance ? | Did you mean to ask for the number of orchestras that have no performance ? | Yes",
            "sql": "select count ( orchestra ) from orchestra where orchestra_id not in ( select orchestra_id from performance )"
        },
        {
            "utterance": "Can you show me its id and its name please ?",
            "sql": "select orchestra_id , orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 3,
    "final": {
        "utterance": "List the record company shared by the most number of orchestras.",
        "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many record companies are there ?",
            "sql": "select count ( record_company ) from orchestra"
        },
        {
            "utterance": "How many orchestras are there ?",
            "sql": "select count ( orchestra_id ) from orchestra"
        },
        {
            "utterance": "Can you list the orchestras by the date they were founded for me starting with the oldest ? | Do you mean listing the names of the orchestras by the date they were founded starting with the oldest ? | yes .",
            "sql": "select orchestra from orchestra order by year_of_founded"
        },
        {
            "utterance": "What year was the Royal Danish Orchestra founded ?",
            "sql": "select year_of_founded from orchestra where orchestra = value"
        },
        {
            "utterance": "What record company is shared by the most orchestras ?",
            "sql": "select record_company from orchestra group by record_company order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 4,
    "final": {
        "utterance": "Show the names of conductors that have conducted more than one orchestras.",
        "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Please answer the question.what is the orchestra of conductor ? | Do you want all the orchestras of all conductors ? | yes",
            "sql": "select t2 . orchestra from conductor as t1 join orchestra as t2 on t1 . conductor_id = t2 . conductor_id"
        },
        {
            "utterance": "what is the name of all conductors ?",
            "sql": "select name from conductor"
        },
        {
            "utterance": "What is the age of Colin Davis ?",
            "sql": "select age from conductor where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "orchestra",
    "interaction_id": 5,
    "final": {
        "utterance": "Please show the record formats of orchestras in ascending order of count.",
        "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    "interaction": [
        {
            "utterance": "Can you show me orchestra names and the major record formats ?",
            "sql": "select orchestra , major_record_format from orchestra"
        },
        {
            "utterance": "I want a list of orchestra names in ascending order .",
            "sql": "select orchestra from orchestra order by orchestra"
        },
        {
            "utterance": "Hmm , please show me the record formats of orchestras in ascending order of count .",
            "sql": "select major_record_format from orchestra group by major_record_format order by count ( * ) asc"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 0,
    "final": {
        "utterance": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    "interaction": [
        {
            "utterance": "how many airline 's there",
            "sql": "select count ( * ) from airlines"
        },
        {
            "utterance": "what is the name of the usa airline | What did you mean by `` the name of the USA airline ? '' | united sates of america",
            "sql": "select airline from airlines where airline = value"
        },
        {
            "utterance": "what is the abbreviation of us airways",
            "sql": "select abbreviation from airlines where airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 1,
    "final": {
        "utterance": "Which airline has most number of flights?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "delta airline is from which country ?",
            "sql": "select country from airlines where airline = value"
        },
        {
            "utterance": "what is the destination airport of flight no 44 ?",
            "sql": "select destairport from flights where flightno = value"
        },
        {
            "utterance": "which airline has most number of flights ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 2,
    "final": {
        "utterance": "Find all airlines that have fewer than 200 flights.",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    "interaction": [
        {
            "utterance": "Find all airlines that have fewer than 200 flights .",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline having count ( * ) < value"
        },
        {
            "utterance": "what country is their destination of the first three ?",
            "sql": "select t1 . airline , t2 . destairport from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline having count ( * ) < value limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 3,
    "final": {
        "utterance": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    "interaction": [
        {
            "utterance": "how many flights are landing in the city of aberdeen or abilene",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city like value or t2 . city like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 4,
    "final": {
        "utterance": "What are flight numbers of Airline \"United Airlines\"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    "interaction": [
        {
            "utterance": "what is the source airport for United Airlines ?",
            "sql": "select t1 . sourceairport from flights as t1 join airlines as t2 on t2 . uid = t1 . airline where t2 . airline = value"
        },
        {
            "utterance": "What are the flight numbers for United Airlines ?",
            "sql": "select t1 . flightno from flights as t1 join airlines as t2 on t2 . uid = t1 . airline where t2 . airline = value"
        },
        {
            "utterance": "Where is flight 28 going to ?",
            "sql": "select destairport from flights where flightno = value"
        },
        {
            "utterance": "What about flight 29 ?",
            "sql": "select destairport from flights where flightno = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 5,
    "final": {
        "utterance": "How many United Airlines flights go to City 'Aberdeen'?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    "interaction": [
        {
            "utterance": "How many United Airlines flights go to the city called Aberdeen ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode join airlines as t3 on t3 . uid = t1 . airline where t2 . city = value and t3 . airline = value"
        },
        {
            "utterance": "What other cities does United Airlines go to ?",
            "sql": "select t2 . city from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode join airlines as t3 on t3 . uid = t1 . airline where t2 . city ! = value and t3 . airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 6,
    "final": {
        "utterance": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "hi , list out all airport name",
            "sql": "select airportname from airports"
        },
        {
            "utterance": "show me the total no of flight number",
            "sql": "select count ( distinct flightno ) from flights"
        },
        {
            "utterance": "how many country name are there",
            "sql": "select count ( distinct country ) from airports"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 7,
    "final": {
        "utterance": "Find the name of airports which do not have any flight in and out.",
        "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    "interaction": [
        {
            "utterance": "Can you show the SourceAirport FlightNo 28 ?",
            "sql": "select sourceairport from flights where flightno = value"
        },
        {
            "utterance": "Can you show the City of Airportcode APG ?",
            "sql": "select city from airports where airportcode = value"
        },
        {
            "utterance": "Can Show the names of airports which do not have any flight in and out ?",
            "sql": "select airportname from airports where airportcode not in ( select sourceairport from flights union select destairport from flights )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 8,
    "final": {
        "utterance": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "How many airports are there ?",
            "sql": "select count ( * ) from airports"
        },
        {
            "utterance": "How many have departing flights ?",
            "sql": "select count ( distinct sourceairport ) from flights"
        },
        {
            "utterance": "How many will arrive in ASY ?",
            "sql": "select count ( * ) from flights where destairport like value"
        },
        {
            "utterance": "Of those flights , how many come from APG and ABR ?",
            "sql": "select count ( * ) from flights where destairport like value and sourceairport like value union select count ( * ) from flights where destairport like value and sourceairport like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 9,
    "final": {
        "utterance": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    "interaction": [
        {
            "utterance": "how many flights does United Airlines operate in USA ? | What do you mean by operate in USA ? | how many flights does United Airlines have ?",
            "sql": "select count ( * ) from airlines as t1 join flights as t2 on t2 . airline = t1 . uid where t1 . airline = value"
        },
        {
            "utterance": "and how many destination airports do these flights have ?",
            "sql": "select count ( distinct t2 . destairport ) from airlines as t1 join flights as t2 on t2 . airline = t1 . uid where t1 . airline = value"
        },
        {
            "utterance": "how many of those flights go to airport `` ASY '' ?",
            "sql": "select count ( * ) from airlines as t1 join flights as t2 on t2 . airline = t1 . uid where t1 . airline = value and t2 . destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    "interaction": [
        {
            "utterance": "Howdy ! Can you show me a list of all flight numbers ?",
            "sql": "select flightno from flights"
        },
        {
            "utterance": "Excellent ! Can you update this list to include a column with the destination airport code for each of these ?",
            "sql": "select flightno , destairport from flights"
        },
        {
            "utterance": "Nice ! Can you tell the quantity of flights that had Aberdeen or Abilene as their destination cities ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value or t2 . city = value"
        },
        {
            "utterance": "Okay ! Can you tell me the airport city that has the most flights landing in it ?",
            "sql": "select destairport from flights group by destairport order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 11,
    "final": {
        "utterance": "How many flights arriving in Aberdeen city?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    "interaction": [
        {
            "utterance": "How many flights are arriving in the city called Aberdeen ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . destairport = t2 . airportcode where t2 . city = value"
        },
        {
            "utterance": "How many flights are there departing Aberdeen ?",
            "sql": "select count ( * ) from flights as t1 join airports as t2 on t1 . sourceairport = t2 . airportcode where t2 . city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 12,
    "final": {
        "utterance": "Which city has most number of departing flights?",
        "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many flights in this table ?",
            "sql": "select count ( * ) from flights"
        },
        {
            "utterance": "Which city has least number of departing flights ?",
            "sql": "select t1 . city from airports as t1 join flights as t2 on t1 . airportcode = t2 . sourceairport group by t1 . city order by count ( * ) asc limit value"
        },
        {
            "utterance": "Find the flight number of APG ?",
            "sql": "select flightno from flights where sourceairport = value"
        },
        {
            "utterance": "Find the airport names of DYS ?",
            "sql": "select airportname from airports where airportcode = value"
        },
        {
            "utterance": "Fin the city of ABR ?",
            "sql": "select city from airports where airportcode = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 13,
    "final": {
        "utterance": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    "interaction": [
        {
            "utterance": "How many 'United Airlines ' flights go to the Airport 'ASY ' ?",
            "sql": "select count ( * ) from airlines as t1 join flights as t2 on t2 . airline = t1 . uid where t1 . airline = value and t2 . destairport = value"
        },
        {
            "utterance": "What is the airline ID of United Airlines ?",
            "sql": "select uid from airlines where airline = value"
        },
        {
            "utterance": "How many airlines with airline id 1 go to the destination airport ASY ?",
            "sql": "select count ( * ) from flights where airline = value and destairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 14,
    "final": {
        "utterance": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi , What Airline has the largest number of flights ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the Airline with the fewest number of flights ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline group by t1 . airline order by count ( * ) asc limit value"
        },
        {
            "utterance": "What is the abbreviation of AirTran Airways ?",
            "sql": "select abbreviation from airlines where airline = value"
        },
        {
            "utterance": "Ah , and what is the country of AirTran Airways ?",
            "sql": "select country from airlines where airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 15,
    "final": {
        "utterance": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    "interaction": [
        {
            "utterance": "Find Flight from CVO to SNA",
            "sql": "select flightno from flights where sourceairport = value and destairport = value"
        },
        {
            "utterance": "Flight from CVO to DFW",
            "sql": "select * from flights where sourceairport = value and destairport = value"
        },
        {
            "utterance": "Which airlines have flight from CVO ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 16,
    "final": {
        "utterance": "What are airlines that have flights arriving at airport 'AHD'?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    "interaction": [
        {
            "utterance": "What is the destination airport of United Airlines ?",
            "sql": "select t2 . destairport from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t1 . airline = value"
        },
        {
            "utterance": "How many airlines have flights departing from APG ?",
            "sql": "select count ( t1 . airline ) from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport like value"
        },
        {
            "utterance": "What is the flight number of Delta Airlines | Did you mean to ask for the flight numbers of all flights on Delta Airlines ? | yes flight numbers of all flights on Delta Airlines",
            "sql": "select t2 . flightno from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t1 . airline = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 17,
    "final": {
        "utterance": "What are airlines that have some flight departing from airport 'AHD'?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    "interaction": [
        {
            "utterance": "what is the dest airport of airline 1",
            "sql": "select destairport from flights where airline = value"
        },
        {
            "utterance": "what is the country of united airlines",
            "sql": "select country from airlines where airline = value"
        },
        {
            "utterance": "what is the source airport of ASY | What is ASY ? | dest airport",
            "sql": "select sourceairport from flights where destairport = value"
        },
        {
            "utterance": "what is the country of us airways",
            "sql": "select country from airlines where airline = value"
        },
        {
            "utterance": "what is the airline of country usa",
            "sql": "select airline from airlines where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "flight_2",
    "interaction_id": 18,
    "final": {
        "utterance": "What are airlines that have some flight departing from airport 'AHD'?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    "interaction": [
        {
            "utterance": "Can you list all the flight numbers that have a source airport value of AHD ?",
            "sql": "select flightno from flights where sourceairport = value"
        },
        {
            "utterance": "Can you list the names of all the unique airlines that belong to those flight numbers ?",
            "sql": "select t1 . airline from airlines as t1 join flights as t2 on t1 . uid = t2 . airline where t2 . sourceairport = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 0,
    "final": {
        "utterance": "List singer names and number of concerts for each singer.",
        "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    "interaction": [
        {
            "utterance": "please list the singers | did you mean list their names ? | yes",
            "sql": "select name from singer"
        },
        {
            "utterance": "can you also give number of concerts for each singer",
            "sql": "select t2 . name , count ( * ) from singer_in_concert as t1 join singer as t2 on t1 . singer_id = t2 . singer_id group by t2 . singer_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 1,
    "final": {
        "utterance": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    "interaction": [
        {
            "utterance": "what is the name of the stadium that does not have a concert in year 2014 ?",
            "sql": "select name from stadium except select t2 . name from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value"
        },
        {
            "utterance": "what is the capacity of Balmoor ?",
            "sql": "select capacity from stadium where name = value"
        },
        {
            "utterance": "what is the theme of Balmoor ?",
            "sql": "select t2 . theme from stadium as t1 join concert as t2 on t1 . stadium_id = t2 . stadium_id where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 2,
    "final": {
        "utterance": "List singer names and number of concerts for each singer.",
        "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    "interaction": [
        {
            "utterance": "what are the singers name on this list ?",
            "sql": "select name from singer"
        },
        {
            "utterance": "Joe Sharp song `` You '' was released in what year ?",
            "sql": "select song_release_year from singer where name = value and song_name = value"
        },
        {
            "utterance": "how many number of concert has Joe Sharp held ?",
            "sql": "select count ( * ) from singer_in_concert as t1 join singer as t2 on t1 . singer_id = t2 . singer_id where t2 . name = value group by t2 . singer_id"
        },
        {
            "utterance": "ok. what country is Joe sharp from ?",
            "sql": "select country from singer where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 3,
    "final": {
        "utterance": "Show the stadium name and the number of concerts in each stadium.",
        "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    "interaction": [
        {
            "utterance": "how many concert are presented on the table",
            "sql": "select count ( * ) from concert"
        },
        {
            "utterance": "show the stadium name and the number of concerts in each stadium",
            "sql": "select t2 . name , count ( * ) from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id group by t1 . stadium_id"
        },
        {
            "utterance": "what is the capacity of Stark 's Park",
            "sql": "select capacity from stadium where name = value"
        },
        {
            "utterance": "list out the concert names",
            "sql": "select concert_name from concert"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 4,
    "final": {
        "utterance": "How many concerts are there in year 2014 or 2015?",
        "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    "interaction": [
        {
            "utterance": "When was the Auditions concert ?",
            "sql": "select year from concert where concert_name = value"
        },
        {
            "utterance": "When was the Super bootcamp concert ?",
            "sql": "select year from concert where concert_name = value"
        },
        {
            "utterance": "When was the Home Visits concert ?",
            "sql": "select year from concert where concert_name = value"
        },
        {
            "utterance": "How many concerts were there total in 2014 or 2015 ?",
            "sql": "select count ( * ) from concert where year = value or year = value"
        },
        {
            "utterance": "And how many concerts were there just in 2014 ?",
            "sql": "select count ( * ) from concert where year = value"
        },
        {
            "utterance": "And how many were there in 2015 ?",
            "sql": "select count ( * ) from concert where year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 5,
    "final": {
        "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    "interaction": [
        {
            "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
            "sql": "select t2 . name , t2 . location from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value intersect select t2 . name , t2 . location from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value"
        },
        {
            "utterance": "Which year did the concert Super bootcamp happen in ?",
            "sql": "select year from concert where concert_name like value"
        },
        {
            "utterance": "And the concert named Auditions ?",
            "sql": "select year from concert where concert_name like value"
        },
        {
            "utterance": "What stadium did it happen in ?",
            "sql": "select t1 . name from stadium as t1 join concert as t2 on t1 . stadium_id = t2 . stadium_id where t2 . concert_name like value"
        },
        {
            "utterance": "What are the names and locations of stadiums which had some concerts in either 2014 or 2015 ?",
            "sql": "select t2 . name , t2 . location from concert as t1 join stadium as t2 on t1 . stadium_id = t2 . stadium_id where t1 . year = value or t1 . year = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 6,
    "final": {
        "utterance": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
    },
    "interaction": [
        {
            "utterance": "Can you tell me which countries a singer above age 40 are from please ?",
            "sql": "select country from singer where age > value"
        },
        {
            "utterance": "Can you tell me which countries a singer below age 30 are from please ?",
            "sql": "select distinct ( country ) from singer where age < value"
        },
        {
            "utterance": "Can you tell me which countries a singer above age 40 and below age 30 are from please ?",
            "sql": "select country from singer where age > value intersect select country from singer where age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 7,
    "final": {
        "utterance": "Show the name and theme for all concerts and the number of singers in each concert.",
        "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    "interaction": [
        {
            "utterance": "show the name and theme for all concerts and the number of singers in each concert .",
            "sql": "select t2 . concert_name , t2 . theme , count ( * ) from singer_in_concert as t1 join concert as t2 on t1 . concert_id = t2 . concert_id group by t2 . concert_id"
        },
        {
            "utterance": "what year was super bootcamp ?",
            "sql": "select year from concert where concert_name = value"
        },
        {
            "utterance": "what is the Stadium ID for Super bootcamp ?",
            "sql": "select stadium_id from concert where concert_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 8,
    "final": {
        "utterance": "List all song names by singers above the average age.",
        "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    "interaction": [
        {
            "utterance": "What are the names of the singers whose song release year is greater than the average song release year",
            "sql": "select song_name from singer where song_release_year > ( select avg ( song_release_year ) from singer )"
        },
        {
            "utterance": "What is the average song release year ?",
            "sql": "select avg ( song_release_year ) from singer"
        },
        {
            "utterance": "List the songs in increasing release years | Do you want the names of the songs ordered by their release year ? | Yes I do",
            "sql": "select song_name from singer order by song_release_year"
        },
        {
            "utterance": "List all song names by singers above the average age",
            "sql": "select song_name from singer where age > ( select avg ( age ) from singer )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 9,
    "final": {
        "utterance": "Show the name and the release year of the song by the youngest singer.",
        "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the youngest singer ?",
            "sql": "select name from singer order by age limit value"
        },
        {
            "utterance": "What 's the name of the song by Tribal King ?",
            "sql": "select song_name from singer where name = value"
        },
        {
            "utterance": "What was the release year of that song ?",
            "sql": "select song_release_year from singer where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 10,
    "final": {
        "utterance": "What is the average, minimum, and maximum age of all singers from France?",
        "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    "interaction": [
        {
            "utterance": "what is the age of Joe sharp",
            "sql": "select age from singer where name = value"
        },
        {
            "utterance": "How many US Singers ?",
            "sql": "select count ( * ) from singer where country = value"
        },
        {
            "utterance": "How many Male Singers ?",
            "sql": "select count ( * ) from singer where is_male = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the name and capacity for the stadium with highest average attendance?",
        "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many stadiums can accommodate more than 1000 people in average . ?",
            "sql": "select count ( * ) from stadium where average > value"
        },
        {
            "utterance": "sorry , What is the name of the stadium with the lowest attendance in average . ?",
            "sql": "select name from stadium order by average limit value"
        },
        {
            "utterance": "What about the one with highest average attendance ?",
            "sql": "select name from stadium order by average desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 12,
    "final": {
        "utterance": "Show the stadium names without any concert.",
        "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    "interaction": [
        {
            "utterance": "show the stadium names without any concern",
            "sql": "select name from stadium where stadium_id not in ( select stadium_id from concert )"
        },
        {
            "utterance": "football stadium | If you meant which football stadium has held the highest number of audience , that would be this one . | yes",
            "sql": "select name from stadium order by highest desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "concert_singer",
    "interaction_id": 13,
    "final": {
        "utterance": "Show the name and the release year of the song by the youngest singer.",
        "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Show the name and the release year of the song by the youngest singer",
            "sql": "select song_name , song_release_year from singer order by age limit value"
        },
        {
            "utterance": "Ok. Can you show me the name and the release year of the song by the oldest singer",
            "sql": "select song_name , song_release_year from singer order by age desc limit value"
        },
        {
            "utterance": "Can you also show me the name of the youngest singer",
            "sql": "select name from singer order by age limit value"
        },
        {
            "utterance": "And what is the name of the oldest singer and his age",
            "sql": "select name , age from singer order by age desc limit value"
        },
        {
            "utterance": "and what country was he from ?",
            "sql": "select country from singer order by age desc limit value"
        },
        {
            "utterance": "give me the names of the singers from United States",
            "sql": "select name from singer where country = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Return the names the contestants whose names contain the substring 'Al'.",
        "sql": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\""
    },
    "interaction": [
        {
            "utterance": "who all are the contest | Did you mean to ask for the names of all contestants ? | yes .",
            "sql": "select contestant_name from contestants"
        },
        {
            "utterance": "can you send the total contestant number ?",
            "sql": "select count ( contestant_name ) from contestants"
        },
        {
            "utterance": "who is the first contestant ? | Did you mean to ask for the name of the contestant with contestant number 1 ? | yes can tell me ?",
            "sql": "select contestant_name from contestants where contestant_number = value"
        },
        {
            "utterance": "who is the 2 contestant ?",
            "sql": "select contestant_name from contestants where contestant_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What are the number of votes from state 'NY' or 'CA'?",
        "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    "interaction": [
        {
            "utterance": "Can you tell me what the total number of votes are for the states of `` NY '' and `` CA '' ?",
            "sql": "select count ( * ) from votes where state = value or state = value"
        },
        {
            "utterance": "Thank you ! Can you provide me with a list of all of the different contestant numbers ?",
            "sql": "select distinct contestant_number from votes"
        },
        {
            "utterance": "Okay . How many vote IDs correspond to contestant number 5 ?",
            "sql": "select count ( * ) from votes where contestant_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "voter_1",
    "interaction_id": 2,
    "final": {
        "utterance": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
    },
    "interaction": [
        {
            "utterance": "What are all the area codes ?",
            "sql": "select area_code from area_code_state"
        },
        {
            "utterance": "What area codes voted for the contestant 'Tabatha Gehling ' ?",
            "sql": "select t3 . area_code from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number join area_code_state as t3 on t2 . state = t3 . state where t1 . contestant_name = value"
        },
        {
            "utterance": "What area codes voted for the contestant 'Kelly Clauss ' ?",
            "sql": "select t3 . area_code from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number join area_code_state as t3 on t2 . state = t3 . state where t1 . contestant_name = value"
        },
        {
            "utterance": "What area codes voted for both the contestant 'Kelly Clauss ' and 'Tabatha Gehling ' ?",
            "sql": "select t3 . area_code from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number join area_code_state as t3 on t2 . state = t3 . state where t1 . contestant_name = value intersect select t3 . area_code from contestants as t1 join votes as t2 on t1 . contestant_number = t2 . contestant_number join area_code_state as t3 on t2 . state = t3 . state where t1 . contestant_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 0,
    "final": {
        "utterance": "How many car models are produced by each maker? List the count and the maker full name.",
        "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
    },
    "interaction": [
        {
            "utterance": "How many car models are produced by each maker ? List the count and the maker full name .",
            "sql": "select count ( * ) , t2 . fullname from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id group by t2 . id"
        },
        {
            "utterance": "Which models are the most popular ?",
            "sql": "select t1 . model from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id group by t2 . id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Which companies have three or more models ?",
            "sql": "select count ( * ) , t2 . fullname , t2 . id from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id group by t2 . id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "sql": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "what is the highest horsepower on the table ?",
            "sql": "select horsepower from cars_data order by horsepower desc limit value"
        },
        {
            "utterance": "how many cars data on the table ?",
            "sql": "select count ( * ) from cars_data"
        },
        {
            "utterance": "how many cylinders on the table ?",
            "sql": "select sum ( cylinders ) from cars_data"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 2,
    "final": {
        "utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    "interaction": [
        {
            "utterance": "Can you list all the continents ?",
            "sql": "select continent from continents"
        },
        {
            "utterance": "Okay , now can you list the number of countries belonging to each continent , including the continent id as well ?",
            "sql": "select t1 . contid , t1 . continent , count ( * ) from continents as t1 join countries as t2 on t1 . contid = t2 . continent group by t1 . contid"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    "interaction": [
        {
            "utterance": "which models are lighter than 3500 ?",
            "sql": "select distinct t1 . model from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id join car_makers as t4 on t1 . maker = t4 . id where t3 . weight < value"
        },
        {
            "utterance": "what is the weight of BMW ?",
            "sql": "select distinct t3 . weight from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id join car_makers as t4 on t1 . maker = t4 . id where t1 . model = value"
        },
        {
            "utterance": "what is the name of the id 2 ? | Are you asking about the car or the carmaker ? | carmaker ?",
            "sql": "select model from car_names where makeid = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 4,
    "final": {
        "utterance": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "What is the weight of make id 1 ? | Did you mean to ask for the weight of the car with make id 1 ? | Yes",
            "sql": "select t2 . weight from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t1 . makeid = value"
        },
        {
            "utterance": "Which year launch the car model buick ? | Did you want to ask for the year on which the car model buick was launched ? | Yes",
            "sql": "select t2 . year from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t1 . model = value"
        },
        {
            "utterance": "Find the horsepower of model plymouth .",
            "sql": "select t2 . horsepower from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t1 . model = value"
        },
        {
            "utterance": "For the cars with 4 cylinders , which model has the largest horspower ?",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value order by t2 . horsepower desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "sql": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many different cars on this list were produced in 1974 ?",
            "sql": "select count ( * ) from cars_data where year = value"
        },
        {
            "utterance": "Can you list just the car IDs produced in 1974 with 8 cylinders ?",
            "sql": "select id from cars_data where year = value and cylinders = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 6,
    "final": {
        "utterance": "Which makers designed more than 3 car models? List full name and the id.",
        "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    "interaction": [
        {
            "utterance": "list the makers who designed more than 3 car models",
            "sql": "select * from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "what is the id of these makers",
            "sql": "select t1 . id from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > value"
        },
        {
            "utterance": "make a list so that the full name and id of the makers who designed more than 3 car models appear in the same table",
            "sql": "select t1 . fullname , t1 . id from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker group by t1 . id having count ( * ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 7,
    "final": {
        "utterance": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    "interaction": [
        {
            "utterance": "What is the average horsepower ?",
            "sql": "select avg ( horsepower ) from cars_data"
        },
        {
            "utterance": "Which car has the largest horsepower ?",
            "sql": "select id from cars_data order by horsepower desc limit value"
        },
        {
            "utterance": "What is the accelerate of car 39 ?",
            "sql": "select accelerate from cars_data order by horsepower desc limit value"
        },
        {
            "utterance": "Which cars have an accelerate larger than 19.0 ?",
            "sql": "select count ( * ) from cars_data where accelerate > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which model has the most version(make) of cars?",
        "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many makes are there for Chevrolet ?",
            "sql": "select count ( distinct make ) from car_names where model = value"
        },
        {
            "utterance": "How many models are in the list ?",
            "sql": "select count ( distinct model ) from car_names"
        },
        {
            "utterance": "Can you tell me which model has the most makes of cars ?",
            "sql": "select model from car_names group by model order by count ( distinct make ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 9,
    "final": {
        "utterance": "How many models does each car maker produce? List maker full name, id and the number.",
        "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    "interaction": [
        {
            "utterance": "How many models does each car maker make ? | Here is the result table of the full name of car makers and the number of models they made . For example , the car maker `` American Motor Company '' made 1 model . | What are all the ids of car makers ?",
            "sql": "select id from car_makers"
        },
        {
            "utterance": "And what is their country ids ?",
            "sql": "select country from car_makers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 10,
    "final": {
        "utterance": "How many car makers are there in france?",
        "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    "interaction": [
        {
            "utterance": "how many car makers are their in germany",
            "sql": "select count ( * ) from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid where t2 . countryname = value"
        },
        {
            "utterance": "what are their names",
            "sql": "select t1 . maker from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid where t2 . countryname = value"
        },
        {
            "utterance": "how many cars are their in usa | do you mean car makers ? | yes",
            "sql": "select count ( t1 . maker ) from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid where t2 . countryname = value"
        },
        {
            "utterance": "what are their names",
            "sql": "select t1 . maker from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid where t2 . countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
    },
    "interaction": [
        {
            "utterance": "tell me the FullName of the maker amc",
            "sql": "select fullname from car_makers where maker = value"
        },
        {
            "utterance": "Tell me CountryName for Countryid 1 , 2 , and 3 .",
            "sql": "select countryname from countries where countryid = value or countryid = value or countryid = value )"
        },
        {
            "utterance": "Tell me the model id made by amc ...",
            "sql": "select modelid from model_list where model = value"
        },
        {
            "utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat ' model ?",
            "sql": "select t1 . countryid , t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country group by t1 . countryid having count ( * ) > value union select t1 . countryid , t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country join model_list as t3 on t2 . id = t3 . maker where t3 . model = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the name of the makers that produced some cars in the year of 1970?",
        "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    "interaction": [
        {
            "utterance": "What are the names of the makers who produced some cars in the year 1970 ?",
            "sql": "select distinct t1 . maker from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker join car_names as t3 on t2 . model = t3 . model join cars_data as t4 on t3 . makeid = t4 . id where t4 . year = value"
        },
        {
            "utterance": "What are the models and makes of the cars produced that year ?",
            "sql": "select t3 . model , t3 . make from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker join car_names as t3 on t2 . model = t3 . model join cars_data as t4 on t3 . makeid = t4 . id where t4 . year = value"
        },
        {
            "utterance": "What is the full name of the maker that produced the heaviest car in the year 1970 ?",
            "sql": "select t1 . fullname from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker join car_names as t3 on t2 . model = t3 . model join cars_data as t4 on t3 . makeid = t4 . id where t4 . year = value order by t4 . weight desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 13,
    "final": {
        "utterance": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "How many Volvo cars are there ?",
            "sql": "select count ( * ) from car_names where model = value"
        },
        {
            "utterance": "Which Volvo car has the least accelerate ? | Do you want its car id ? | Yes",
            "sql": "select t1 . id from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . model = value order by t1 . accelerate asc limit value"
        },
        {
            "utterance": "How many cylinders does that car have ?",
            "sql": "select t1 . cylinders from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . model = value order by t1 . accelerate asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 14,
    "final": {
        "utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "Which model saves the most gasoline ? That is to say , have the maximum miles per gallon ?",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id order by t2 . mpg desc limit value"
        },
        {
            "utterance": "Which model has the highest horsepower ?",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id order by t2 . horsepower desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 15,
    "final": {
        "utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    "interaction": [
        {
            "utterance": "what models are produced by the make General Motors ?",
            "sql": "select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value"
        },
        {
            "utterance": "what models have a weight greater than 3500",
            "sql": "select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t4 . weight > value"
        },
        {
            "utterance": "could you list the models from the previous two questions with no duplicates please",
            "sql": "select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value or t4 . weight < = value"
        },
        {
            "utterance": "can you list the models that weight greater than 3500 or have the maker General Motors , but not both",
            "sql": "select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value or t4 . weight < = value except select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value and t4 . weight < = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 16,
    "final": {
        "utterance": "How many car makers are there in each continents? List the continent name and the count.",
        "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    "interaction": [
        {
            "utterance": "Can you list the number of car makers on each continent ?",
            "sql": "select t1 . continent , count ( * ) from continents as t1 join countries as t2 on t1 . contid = t2 . continent join car_makers as t3 on t2 . countryid = t3 . country group by t1 . continent"
        },
        {
            "utterance": "What about the number of car makers in the country USA ?",
            "sql": "select count ( * ) from car_makers as t1 join countries as t2 on t2 . countryid = t1 . country where t2 . countryname = value"
        },
        {
            "utterance": "How about in the country Germany ?",
            "sql": "select count ( * ) from car_makers as t1 join countries as t2 on t2 . countryid = t1 . country where t2 . countryname = value"
        },
        {
            "utterance": "What about France ?",
            "sql": "select count ( * ) from car_makers as t1 join countries as t2 on t2 . countryid = t1 . country where t2 . countryname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    "interaction": [
        {
            "utterance": "WHAT IS THE ACCELERATE OF THE CAR MAKE AMC HORNET SPORTABOUT ( SW )",
            "sql": "select t1 . accelerate from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t2 . make = value"
        },
        {
            "utterance": "CAN YOU WHICH CAR MODEL IS MOST RECENT RELEASED",
            "sql": "select t2 . model from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid order by t1 . year desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many car models were produced by the maker with full name American Motor Company?",
        "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    "interaction": [
        {
            "utterance": "Can you tell me the ID of the american motor company ?",
            "sql": "select id from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker where t1 . fullname = value"
        },
        {
            "utterance": "Can you tell me the model id of the maker amc ?",
            "sql": "select modelid from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker where t1 . maker = value"
        },
        {
            "utterance": "Who is maker for the ID number 2 ? | Did you mean Id or ModelId ? | I mean id",
            "sql": "select distinct ( t1 . maker ) from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker where t1 . id = value"
        },
        {
            "utterance": "How many car models were produced by the maker with the full name American Motor Company ?",
            "sql": "select count ( * ) from car_makers as t1 join model_list as t2 on t1 . id = t2 . maker where t1 . fullname = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
    },
    "interaction": [
        {
            "utterance": "What are the full name of amc ? | Did you mean the full name of the car maker amc ? | Yes",
            "sql": "select fullname from car_makers where maker = value"
        },
        {
            "utterance": "What kind of car is produced in Germany ? | Did you mean the car models produced in Germany ? | Yes",
            "sql": "select t3 . model from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country join model_list as t3 on t2 . id = t3 . maker where t1 . countryname = value"
        },
        {
            "utterance": "What are the model id of BMW ?",
            "sql": "select modelid from model_list where model = value"
        },
        {
            "utterance": "What are the id and names of the countries which have more than 3 cars makers or produce the 'flat ' model ?",
            "sql": "select t1 . countryid , t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country group by t1 . countryid having count ( * ) > value union select t1 . countryid , t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country join model_list as t3 on t2 . id = t3 . maker where t3 . model = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
    },
    "interaction": [
        {
            "utterance": "What are the cars with the lowest horsepower ? | Do you mean the id of the car with the lowest horsepower ? | Yes please .",
            "sql": "select id from cars_data order by horsepower limit value"
        },
        {
            "utterance": "What is the average horsepower of all the cars ?",
            "sql": "select avg ( horsepower ) from cars_data"
        },
        {
            "utterance": "Can you list the car ids of all the cars with lower than the average horsepower ?",
            "sql": "select t1 . id from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . horsepower < ( select avg ( horsepower ) from cars_data )"
        },
        {
            "utterance": "Could you add the model and make of each of those into the table please ?",
            "sql": "select t1 . id , t2 . model from cars_data as t1 join car_names as t2 on t1 . id = t2 . makeid where t1 . horsepower < ( select avg ( horsepower ) from cars_data )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What is the horsepower of the car with the largest accelerate?",
        "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "how many cylinders in the cars_data table",
            "sql": "select sum ( cylinders ) from cars_data"
        },
        {
            "utterance": "i want to highest weight in the cars_data table",
            "sql": "select weight from cars_data order by weight desc limit value"
        },
        {
            "utterance": "how many year in the cars_data table",
            "sql": "select count ( * ) from cars_data"
        },
        {
            "utterance": "what is the highest accelerate in the cars_data table",
            "sql": "select accelerate from cars_data order by accelerate desc limit value"
        },
        {
            "utterance": "i want to highest edispl in the cars_data table",
            "sql": "select t1 . horsepower from cars_data as t1 order by t1 . accelerate desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 22,
    "final": {
        "utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    "interaction": [
        {
            "utterance": "Which models are manufactured by the maker with the name `` General Motors '' ?",
            "sql": "select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value"
        },
        {
            "utterance": "How about models that weight more than 3500 ?",
            "sql": "select distinct t2 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t4 . weight > value"
        },
        {
            "utterance": "What is the make and model of the car with the largest horsepower ?",
            "sql": "select distinct t2 . model , t3 . maker from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value order by t4 . horsepower desc limit value"
        },
        {
            "utterance": "How many cars manufactured by General Motors get more than 15 mpg ?",
            "sql": "select count ( * ) from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value and t4 . mpg > value"
        },
        {
            "utterance": "What is the make and model of the car manufactured by General Motors that gets the highest mpg ?",
            "sql": "select distinct t1 . make , t1 . model from car_names as t1 join model_list as t2 on t1 . model = t2 . model join car_makers as t3 on t2 . maker = t3 . id join cars_data as t4 on t1 . makeid = t4 . id where t3 . fullname = value order by t4 . mpg desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the name of the countries where there is not a single car maker?",
        "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    "interaction": [
        {
            "utterance": "What countries produced cars ?",
            "sql": "select t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country"
        },
        {
            "utterance": "What country does not have a car maker ?",
            "sql": "select countryname from countries except select t1 . countryname from countries as t1 join car_makers as t2 on t1 . countryid = t2 . country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 24,
    "final": {
        "utterance": "How many car models are produced in the usa?",
        "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    "interaction": [
        {
            "utterance": "how many car models are produced in the USA ?",
            "sql": "select count ( * ) from model_list as t1 join car_makers as t2 on t1 . maker = t2 . id join countries as t3 on t2 . country = t3 . countryid where t3 . countryname = value"
        },
        {
            "utterance": "which companies produce those models ?",
            "sql": "select distinct t1 . maker from car_makers as t1 join countries as t2 on t1 . country = t2 . countryid where t2 . countryname = value"
        },
        {
            "utterance": "how many Models has Ford produced ?",
            "sql": "select count ( * ) from model_list as t1 join car_makers as t2 where t1 . maker = t2 . id and t2 . maker = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 25,
    "final": {
        "utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    "interaction": [
        {
            "utterance": "Show me continent IDs of each continent",
            "sql": "select contid , continent from continents"
        },
        {
            "utterance": "Show me continent names and the number of countries they have",
            "sql": "select t1 . continent , count ( * ) from continents as t1 join countries as t2 on t1 . contid = t2 . continent group by t1 . contid"
        },
        {
            "utterance": "Which continent has the highest number of countries ?",
            "sql": "select t1 . continent , count ( * ) from continents as t1 join countries as t2 on t1 . contid = t2 . continent group by t1 . contid order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 26,
    "final": {
        "utterance": "Which distinct car models are the produced after 1980?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    "interaction": [
        {
            "utterance": "What are all the car models available ?",
            "sql": "select distinct model from car_names"
        },
        {
            "utterance": "Which of those distinct models are produced after 1980 ?",
            "sql": "select distinct t1 . model from model_list as t1 join car_names as t2 on t1 . model = t2 . model join cars_data as t3 on t2 . makeid = t3 . id where t3 . year > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 27,
    "final": {
        "utterance": "Which countries in europe have at least 3 car manufacturers?",
        "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    "interaction": [
        {
            "utterance": "Hi ! which countries are in europe ?",
            "sql": "select distinct t1 . countryname from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value"
        },
        {
            "utterance": "How many car manufacturers are in each of those countries ?",
            "sql": "select t1 . countryname , count ( * ) from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value group by t1 . countryname"
        },
        {
            "utterance": "which of those has at least 3 ?",
            "sql": "select t1 . countryname from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value group by t1 . countryname having count ( * ) > = value"
        },
        {
            "utterance": "how many do each of those have ?",
            "sql": "select t1 . countryname , count ( * ) from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value group by t1 . countryname having count ( * ) > = value"
        },
        {
            "utterance": "how many total car manufacturers does europe have ?",
            "sql": "select count ( * ) from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value"
        },
        {
            "utterance": "what about america ?",
            "sql": "select count ( * ) from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value"
        },
        {
            "utterance": "what are those ?",
            "sql": "select t3 . fullname from countries as t1 join continents as t2 on t1 . continent = t2 . contid join car_makers as t3 on t1 . countryid = t3 . country where t2 . continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 28,
    "final": {
        "utterance": "How many car makers are there in each continents? List the continent name and the count.",
        "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    "interaction": [
        {
            "utterance": "Can you list how many car makers are on each continent please ? | Do you want the name of the continent and the count of car makers on each of them ? | Yes please , in a table if possible ?",
            "sql": "select t1 . continent , count ( * ) from continents as t1 join countries as t2 on t1 . contid = t2 . continent join car_makers as t3 on t2 . countryid = t3 . country group by t1 . continent"
        },
        {
            "utterance": "Can you list the full name and country of every car maker from asia ? | Do you want the full name and country name of the car makers from asia ? | Yes please",
            "sql": "select t3 . fullname , t2 . countryname from continents as t1 join countries as t2 on t1 . contid = t2 . continent join car_makers as t3 on t2 . countryid = t3 . country where t1 . continent = value"
        },
        {
            "utterance": "What about from Europe ?",
            "sql": "select t3 . fullname , t2 . countryname from continents as t1 join countries as t2 on t1 . contid = t2 . continent join car_makers as t3 on t2 . countryid = t3 . country where t1 . continent = value"
        },
        {
            "utterance": "How about America ?",
            "sql": "select t3 . fullname , t2 . countryname from continents as t1 join countries as t2 on t1 . contid = t2 . continent join car_makers as t3 on t2 . countryid = t3 . country where t1 . continent = value"
        },
        {
            "utterance": "How many car makers are there total ?",
            "sql": "select count ( * ) from car_makers"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "car_1",
    "interaction_id": 29,
    "final": {
        "utterance": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    "interaction": [
        {
            "utterance": "whats the average acceleration",
            "sql": "select avg ( accelerate ) from cars_data"
        },
        {
            "utterance": "whats the average horse power",
            "sql": "select avg ( horsepower ) from cars_data"
        },
        {
            "utterance": "for the cars with 4 cylinders which model has the largest horsepower",
            "sql": "select t1 . model from car_names as t1 join cars_data as t2 on t1 . makeid = t2 . id where t2 . cylinders = value order by t2 . horsepower desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    "interaction": [
        {
            "utterance": "I want to know the average population of all cities please",
            "sql": "select avg ( population ) from city"
        },
        {
            "utterance": "And which districts have cities with populations greater than the average ?",
            "sql": "select district from city where population > ( select avg ( population ) from city )"
        },
        {
            "utterance": "Within these districts , how many cities does each have with a population greater than the average ?",
            "sql": "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 1,
    "final": {
        "utterance": "What is the average GNP and total population in all nations whose government is US territory?",
        "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    "interaction": [
        {
            "utterance": "Can you list all nations whose government is US territory ?",
            "sql": "select name from country where governmentform = value"
        },
        {
            "utterance": "Hmm , I also want to know their GNP and population .",
            "sql": "select gnp , population from country where governmentform = value"
        },
        {
            "utterance": "Please find out the average GNP and total population of those nations .",
            "sql": "select avg ( gnp ) , sum ( population ) from country where governmentform = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the total surface area of the continents Asia and Europe?",
        "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    "interaction": [
        {
            "utterance": "give me the total surface area of the continent Asia",
            "sql": "select sum ( surfacearea ) from country where continent = value"
        },
        {
            "utterance": "what is the local name | Did you mean to ask for all local names ? | yes",
            "sql": "select localname from country"
        },
        {
            "utterance": "What is Aruba 's code ?",
            "sql": "select code from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 3,
    "final": {
        "utterance": "Which languages are spoken by only one country in republic governments?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    "interaction": [
        {
            "utterance": "Hi . How many countries are listed in total ?",
            "sql": "select count ( * ) from country"
        },
        {
            "utterance": "Of the 239 countries , how many different forms of government are there among them ?",
            "sql": "select count ( distinct governmentform ) from country"
        },
        {
            "utterance": "What are the 35 different forms of government from the 239 countries listed ?",
            "sql": "select distinct governmentform from country"
        },
        {
            "utterance": "Of the 239 countries , how many of them have a Republic government form ?",
            "sql": "select count ( * ) from country where governmentform = value"
        },
        {
            "utterance": "What are the names of the 122 countries that have a Republic government form ?",
            "sql": "select name from country where governmentform = value"
        },
        {
            "utterance": "Since Latvia is a country with a Republic government form , which languages are spoken there ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 4,
    "final": {
        "utterance": "Which cities are in European countries where English is not the official language?",
        "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    "interaction": [
        {
            "utterance": "how many country there",
            "sql": "select count ( * ) from country"
        },
        {
            "utterance": "what is the Country Code of Herat | Do you mean the country code of city Herat ? | yes sir",
            "sql": "select countrycode from city where name = value"
        },
        {
            "utterance": "what is the Population of Qandahar",
            "sql": "select population from city where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 5,
    "final": {
        "utterance": "What is the total number of people living in the nations that do not use English?",
        "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    "interaction": [
        {
            "utterance": "LIST THE NATIONS WHICH DO NOT USE ENGLISH",
            "sql": "select name from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value )"
        },
        {
            "utterance": "WHAT IS THE POPULATION OF THE PEOPLE LIVING IN THE NATIONS NOT USING ENGLISH | did you mean you want the Population of the country DO NOT USE ENGLISH | YES , THE TOTAL NUMBER OF PEOPLE LIVING IN THE NATIONS THAT DO NOT USE ENGLISH",
            "sql": "select name , sum ( population ) from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value ) group by name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    "interaction": [
        {
            "utterance": "The given codes of country is not speak in English please tell | Did you mean the codes of countries that do not speak English ? | Thanks ! Which countries do not speak English please tell country names",
            "sql": "select name from country where code not in ( select countrycode from countrylanguage where language = value )"
        },
        {
            "utterance": "Thanks ! Whose government forms Republic | Did you want the names of countries that do not speak English and whose government forms are not Republic ? | Thanks ! yes",
            "sql": "select name from country where code in ( select code from country where governmentform ! = value except select countrycode from countrylanguage where language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 7,
    "final": {
        "utterance": "What are the names of the nations with the 3 lowest populations?",
        "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    "interaction": [
        {
            "utterance": "What are the names of the nations with the 3 lowest populations ?",
            "sql": "select name from country order by population asc limit value"
        },
        {
            "utterance": "Which nation has the largest surface area ?",
            "sql": "select name from country order by surfacearea desc limit value"
        },
        {
            "utterance": "What is the total population of Antarctica ?",
            "sql": "select population from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 8,
    "final": {
        "utterance": "Which region is the city Kabul located in?",
        "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    "interaction": [
        {
            "utterance": "which region is the city kabul located",
            "sql": "select region from country as t1 join city as t2 on t1 . code = t2 . countrycode where t2 . name = value"
        },
        {
            "utterance": "which region is the city herat located",
            "sql": "select region from country as t1 join city as t2 on t1 . code = t2 . countrycode where t2 . name = value"
        },
        {
            "utterance": "which region is the city quandahar",
            "sql": "select region from country as t1 join city as t2 on t1 . code = t2 . countrycode where t2 . name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 9,
    "final": {
        "utterance": "Which language is spoken by the largest number of countries?",
        "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the average percent ?",
            "sql": "select avg ( percentage ) from countrylanguage"
        },
        {
            "utterance": "Which code of country has the highest dutch speaking population ?",
            "sql": "select countrycode from countrylanguage where language = value order by percentage desc limit value"
        },
        {
            "utterance": "The difference of the overall percent | Do you mean average percent ? | yes",
            "sql": "select avg ( percentage ) from countrylanguage where language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 10,
    "final": {
        "utterance": "What is name of the country that speaks the largest number of languages?",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which country speaks the largest number of languages ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode group by t1 . name order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many languages are spoken in Canada ?",
            "sql": "select count ( * ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        },
        {
            "utterance": "What are the names of those languages ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        },
        {
            "utterance": "How many countries is Chinese spoken in ?",
            "sql": "select count ( distinct countrycode ) from countrylanguage where language = value"
        },
        {
            "utterance": "Which countries are in North America ?",
            "sql": "select name from country where continent = value"
        },
        {
            "utterance": "What are the official languages of these countries ?",
            "sql": "select language from countrylanguage where countrycode in ( select code from country where continent = value ) and isofficial = value"
        },
        {
            "utterance": "What is the life expectancy in Canada ?",
            "sql": "select lifeexpectancy from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 11,
    "final": {
        "utterance": "What is the total surface area of the continents Asia and Europe?",
        "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    "interaction": [
        {
            "utterance": "HOw many regions are there in ASia ?",
            "sql": "select count ( * ) from ( select region from country where continent = value group by region )"
        },
        {
            "utterance": "What about in Europe ?",
            "sql": "select count ( * ) from ( select region from country where continent = value group by region )"
        },
        {
            "utterance": "What is the surface area of all 10 of them ?",
            "sql": "select sum ( surfacearea ) from country where continent = value or continent = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    "interaction": [
        {
            "utterance": "What is the average life expectancy for each government form ?",
            "sql": "select governmentform , avg ( lifeexpectancy ) from country group by governmentform"
        },
        {
            "utterance": "Can you show me only those government forms whose average life expectancy is greater than 72 ?",
            "sql": "select governmentform from country group by governmentform having avg ( lifeexpectancy ) > value"
        },
        {
            "utterance": "What is the population of each of those ?",
            "sql": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 13,
    "final": {
        "utterance": "What are the African countries that have a  population less than any country in Asia?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    "interaction": [
        {
            "utterance": "WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA",
            "sql": "select name from country where continent = value and population < ( select max ( population ) from country where continent = value )"
        },
        {
            "utterance": "FROM WHICH CONTINENT IS ARUBA",
            "sql": "select continent from country where name = value"
        },
        {
            "utterance": "WHAT IS THE LOCAL NAME OF ANGOLA",
            "sql": "select localname from country where name = value"
        },
        {
            "utterance": "SURFACE AREA OF AFGHANISTAN",
            "sql": "select surfacearea from country where name = value"
        },
        {
            "utterance": "WHAT IS THE CODE OF ARUBA",
            "sql": "select code from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 14,
    "final": {
        "utterance": "What are the countries where either English or Dutch is the official language?",
        "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "What are the countries where either English or Dutch is the official language ?",
            "sql": "select * from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and isofficial = value union select * from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and isofficial = value"
        },
        {
            "utterance": "What is the official language in Belgium ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value and t2 . isofficial = value"
        },
        {
            "utterance": "What are the countries where arabic language is spoken",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "Please tell me all the languages spoken in Egypt .",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        },
        {
            "utterance": "Can you tell me the number of countries where Arabic is the official language .",
            "sql": "select count ( t1 . name ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value"
        },
        {
            "utterance": "Can you please give me the names of these countries ?",
            "sql": "select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 15,
    "final": {
        "utterance": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    "interaction": [
        {
            "utterance": "What are the populations of every country in Africa ?",
            "sql": "select name , population from country where continent = value"
        },
        {
            "utterance": "What are the names and populations of every country in Asia ?",
            "sql": "select name , population from country where continent = value"
        },
        {
            "utterance": "What are the names of the Asian countries that have a larger population than that of any country in Africa ?",
            "sql": "select name from country where continent = value and population > ( select min ( population ) from country where continent = value )"
        },
        {
            "utterance": "What are the populations of those countries ?",
            "sql": "select name , population from country where continent = value and population > ( select min ( population ) from country where continent = value )"
        },
        {
            "utterance": "What are the government forms of those countries ?",
            "sql": "select name , governmentform from country where continent = value and population > ( select min ( population ) from country where continent = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 16,
    "final": {
        "utterance": "What is the name of country that has the shortest life expectancy in Asia?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What is the name of the country with the shortest life expectancy in Asia ?",
            "sql": "select name from country where continent = value order by lifeexpectancy limit value"
        },
        {
            "utterance": "And in Africa ? | Do you mean among country in Africa , or among the country in Africa and in Asia . | Among country in Africa",
            "sql": "select name from country where continent = value order by lifeexpectancy limit value"
        },
        {
            "utterance": "What is the GNP of Afghanistan ?",
            "sql": "select gnp from country where name = value"
        },
        {
            "utterance": "What is the population of Afghanistan ?",
            "sql": "select population from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 17,
    "final": {
        "utterance": "What are the names of nations speak both English and French?",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    "interaction": [
        {
            "utterance": "HOW MANY LANGUAGE ARE THERE ?",
            "sql": "select count ( distinct language ) from countrylanguage"
        },
        {
            "utterance": "WHAT IS THE POPULATION OF Aruba",
            "sql": "select population from country where name = value"
        },
        {
            "utterance": "WHAT IS Afghanistan GNPOld ?",
            "sql": "select gnpold from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 18,
    "final": {
        "utterance": "How many official languages does Afghanistan have?",
        "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "What is the population of Afghanistan ?",
            "sql": "select population from country where name = value"
        },
        {
            "utterance": "And for Aruba ?",
            "sql": "select population from country where name = value"
        },
        {
            "utterance": "What languages are spoken in Aruba ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value"
        },
        {
            "utterance": "Is there an official language for the country ? | For which country ? Aruba ? | Yes .",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value and t2 . isofficial = value"
        },
        {
            "utterance": "What about for Afghanistan ?",
            "sql": "select t2 . language from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t1 . name = value and t2 . isofficial = value"
        },
        {
            "utterance": "How many other countries speak Dari ?",
            "sql": "select count ( * ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t1 . name ! = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 19,
    "final": {
        "utterance": "What are the regions that use English or Dutch?",
        "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    "interaction": [
        {
            "utterance": "What are the regions that use English , please ?",
            "sql": "select distinct t1 . region from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "What are the regions that use Dutch , please ?",
            "sql": "select distinct t1 . region from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        },
        {
            "utterance": "What are the life expectancies of those regions ?",
            "sql": "select distinct t1 . lifeexpectancy from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 20,
    "final": {
        "utterance": "Which region is the city Kabul located in?",
        "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    "interaction": [
        {
            "utterance": "What is the total number of countries ?",
            "sql": "select count ( * ) from country"
        },
        {
            "utterance": "How many cities are there ?",
            "sql": "select count ( * ) from city"
        },
        {
            "utterance": "Can you tell me the region where the city of Kabul is ?",
            "sql": "select region from country as t1 join city as t2 on t1 . code = t2 . countrycode where t2 . name = value"
        },
        {
            "utterance": "Yes . How many cities are the in the region ?",
            "sql": "select count ( t2 . name ) from country as t1 join city as t2 on t1 . code = t2 . countrycode where t1 . region = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 21,
    "final": {
        "utterance": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    "interaction": [
        {
            "utterance": "What are the codes of the countries that do not speak English ?",
            "sql": "select countrycode from countrylanguage where language ! = value"
        },
        {
            "utterance": "What are the codes of the countries that do not speak English whose government forms are not Republic ?",
            "sql": "select code from country where governmentform ! = value except select countrycode from countrylanguage where language = value"
        },
        {
            "utterance": "What language do each of those speak , please ?",
            "sql": "select countrycode , language from countrylanguage where countrycode in ( select code from country where governmentform ! = value except select countrycode from countrylanguage where language = value )"
        },
        {
            "utterance": "Which of those countries is on the continent North America ?",
            "sql": "select code from country where continent = value and code in ( select code from country where governmentform ! = value except select countrycode from countrylanguage where language = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 22,
    "final": {
        "utterance": "How many countries speak both English and Dutch?",
        "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    "interaction": [
        {
            "utterance": "What is the population in Asian continent ?",
            "sql": "select sum ( population ) from country where continent = value"
        },
        {
            "utterance": "Which language has 9.5 % ?",
            "sql": "select language from countrylanguage where percentage = value"
        },
        {
            "utterance": "What is the life expectancy rate in Angola ?",
            "sql": "select lifeexpectancy from country where localname = value"
        },
        {
            "utterance": "What is the GNP rate of Aruba ? | did you mean the GNP or GNP old ? | GNP",
            "sql": "select gnp from country where localname = value"
        },
        {
            "utterance": "What is the GNP old of Afghanistan ?",
            "sql": "select gnpold from country where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 23,
    "final": {
        "utterance": "What are the population, name and leader of the country with the largest area?",
        "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which country has the largest area ? | Russian Federation is the name of the country with the largest area . | And what is the population of this country ?",
            "sql": "select population from country order by surfacearea desc limit value"
        },
        {
            "utterance": "Who is it 's leader ?",
            "sql": "select headofstate from country order by surfacearea desc limit value"
        },
        {
            "utterance": "Yes , on which continent is this country located ?",
            "sql": "select continent from country order by surfacearea desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 24,
    "final": {
        "utterance": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "sql": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000"
    },
    "interaction": [
        {
            "utterance": "can you show countries name ?",
            "sql": "select name from country"
        },
        {
            "utterance": "what is the countries government form ?",
            "sql": "select governmentform from country"
        },
        {
            "utterance": "can you show me the countries ' surface area ?",
            "sql": "select surfacearea from country"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 25,
    "final": {
        "utterance": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    "interaction": [
        {
            "utterance": "How many government forms are in the table ?",
            "sql": "select count ( governmentform ) from country"
        },
        {
            "utterance": "How many of those have an average life expectancy that is longer than 72 ?",
            "sql": "select governmentform from country group by governmentform having avg ( lifeexpectancy ) > value"
        },
        {
            "utterance": "What is the population of each of those government forms ?",
            "sql": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > value"
        },
        {
            "utterance": "What is the life expectancy for each of these ?",
            "sql": "select avg ( lifeexpectancy ) from country group by governmentform having avg ( lifeexpectancy ) > value"
        },
        {
            "utterance": "Which government forms and their populations are those for ? | Sorry , I can not understand this question . Can you elaborate ? | Which government forms have an average life expectancy over 72 , and what are their populations ?",
            "sql": "select sum ( population ) , governmentform from country group by governmentform having avg ( lifeexpectancy ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 26,
    "final": {
        "utterance": "What is average life expectancy in the countries where English is not the official language?",
        "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    "interaction": [
        {
            "utterance": "What are all of the countries where English is n't the official language ?",
            "sql": "select name from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value )"
        },
        {
            "utterance": "What is the average life expectancy in each of those countries ?",
            "sql": "select avg ( lifeexpectancy ) from country where name not in ( select t1 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value )"
        },
        {
            "utterance": "* I have left the chat *",
            "sql": "select avg ( lifeexpectancy ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where t2 . language = value and t2 . isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 27,
    "final": {
        "utterance": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    "interaction": [
        {
            "utterance": "Can you please list all the names of the countries that are in the continent of Europe ?",
            "sql": "select name from country where continent = value"
        },
        {
            "utterance": "Can you please only show those countries with a population of 80000 in the table ?",
            "sql": "select name from country where continent = value and population = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 28,
    "final": {
        "utterance": "Which African countries have a smaller population than that of any country in Asia?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    "interaction": [
        {
            "utterance": "Which African countries have a smaller population than that of any Asian country ?",
            "sql": "select name from country where continent = value and population < ( select min ( population ) from country where continent = value )"
        },
        {
            "utterance": "Which Asian countries have a smaller population than that of any African country ?",
            "sql": "select name from country where continent = value and population < ( select min ( population ) from country where continent = value )"
        },
        {
            "utterance": "Which Asian country has the highest life expectancy ?",
            "sql": "select name from country where continent = value order by lifeexpectancy desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 29,
    "final": {
        "utterance": "Which Asian countries have a population that is larger than any country in Africa?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    "interaction": [
        {
            "utterance": "What African country has the largest population ?",
            "sql": "select name from country where continent = value order by population desc limit value"
        },
        {
            "utterance": "And what is the population of Nigeria ?",
            "sql": "select population from country where name = value"
        },
        {
            "utterance": "What Asian country has the largest population ?",
            "sql": "select name from country where continent = value order by population desc limit value"
        },
        {
            "utterance": "What is China 's population ?",
            "sql": "select population from country where name = value"
        },
        {
            "utterance": "How many Asian countries have a population greater than that of Nigeria ?",
            "sql": "select count ( name ) from country where continent = value and population > ( select population from country where name = value )"
        },
        {
            "utterance": "Can you list those countries ?",
            "sql": "select name from country where continent = value and population > ( select population from country where name = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 30,
    "final": {
        "utterance": "Whic`h unique cities are in  Asian countries where Chinese is the official language?",
        "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
    },
    "interaction": [
        {
            "utterance": "Which unique cities are in Asian countries ?",
            "sql": "select distinct t3 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode join city as t3 on t1 . code = t3 . countrycode where t1 . continent = value"
        },
        {
            "utterance": "Which of those cities have a population over 200,000 ?",
            "sql": "select distinct t3 . name from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode join city as t3 on t1 . code = t3 . countrycode where t3 . population > value"
        },
        {
            "utterance": "What is the average population of all cities in China ?",
            "sql": "select avg ( t3 . population ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode join city as t3 on t1 . code = t3 . countrycode where t1 . name = value"
        },
        {
            "utterance": "What is the average population of all cities that speak the Dutch language ?",
            "sql": "select avg ( t3 . population ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode join city as t3 on t1 . code = t3 . countrycode where t2 . language = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 31,
    "final": {
        "utterance": "Which cities are in European countries where English is not the official language?",
        "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    "interaction": [
        {
            "utterance": "how many country code in the city table | Do you want to know the distinct country code ? | how many language in the countrylanguage table",
            "sql": "select count ( distinct language ) from countrylanguage"
        },
        {
            "utterance": "what the highest percentage in the countrylanguage table",
            "sql": "select max ( percentage ) from countrylanguage"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 32,
    "final": {
        "utterance": "What is the number of distinct continents where Chinese is spoken?",
        "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    "interaction": [
        {
            "utterance": "how many country there",
            "sql": "select count ( * ) from country"
        },
        {
            "utterance": "how many country languages there",
            "sql": "select count ( distinct language ) from countrylanguage"
        },
        {
            "utterance": "what is the surface area of code AFG",
            "sql": "select surfacearea from country where code = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 33,
    "final": {
        "utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    "interaction": [
        {
            "utterance": "Hi , what is the population of the Caribbean ?",
            "sql": "select sum ( population ) from country where region = value"
        },
        {
            "utterance": "What continents have an average life expectancy shorter than 72 ?",
            "sql": "select continent from country group by continent having avg ( lifeexpectancy ) < value"
        },
        {
            "utterance": "Can you give me the total population for each of those continents ?",
            "sql": "select sum ( population ) , continent from country group by continent having avg ( lifeexpectancy ) < value"
        },
        {
            "utterance": "What is the average life expectancy of those continents ?",
            "sql": "select avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < value"
        },
        {
            "utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 ?",
            "sql": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country group by continent having avg ( lifeexpectancy ) < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "world_1",
    "interaction_id": 34,
    "final": {
        "utterance": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    "interaction": [
        {
            "utterance": "what are the official unique official language spoken in the country | In which country ? | what are the unique official languages spoken that are found before 1930",
            "sql": "select count ( distinct t2 . language ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where indepyear < value and t2 . isofficial = value"
        },
        {
            "utterance": "what is the total number of unique official languages spoken in the countries that are founded before 1930",
            "sql": "select count ( distinct t2 . language ) from country as t1 join countrylanguage as t2 on t1 . code = t2 . countrycode where indepyear < value and t2 . isofficial = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
        "sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'"
    },
    "interaction": [
        {
            "utterance": "Find the first name of the students who permanently live in the country Haiti .",
            "sql": "select t1 . first_name from students as t1 join addresses as t2 on t1 . permanent_address_id = t2 . address_id where t2 . country = value"
        },
        {
            "utterance": "Please also find the first name of the students who have the cell phone number 09700166582",
            "sql": "select first_name from students where cell_mobile_number = value"
        },
        {
            "utterance": "Can you show me the last name and address for him ? | Do you want his current address or the permanent address ? | current address please",
            "sql": "select t1 . last_name , * from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t1 . cell_mobile_number = value"
        },
        {
            "utterance": "Ok. Can you also give me his email address ?",
            "sql": "select email_address from students where cell_mobile_number = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 1,
    "final": {
        "utterance": "What's the name of the course with most number of enrollments?",
        "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many courses in this table ? | Do you mean the number of the courses with different course ids ? | Yes .",
            "sql": "select count ( distinct course_id ) from courses"
        },
        {
            "utterance": "What 's the name of the course with least number of students of enrollments ?",
            "sql": "select t1 . course_name from courses as t1 join student_enrolment_courses as t2 on t1 . course_id = t2 . course_id group by t1 . course_name order by count ( * ) limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 2,
    "final": {
        "utterance": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many graduates of the school are there ?",
            "sql": "select count ( * ) from students"
        },
        {
            "utterance": "Ok. Who graduated the earliest ? | What attributes of this student who graduated the earliest would you like to know ? | Please tell me the first name , middle name , and last name .",
            "sql": "select first_name , middle_name , last_name from students order by date_left asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 3,
    "final": {
        "utterance": "When is the first transcript released? List the date and details.",
        "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "when is the first transcript released ?",
            "sql": "select * from transcripts order by transcript_date asc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 4,
    "final": {
        "utterance": "Who is the first student to register? List the first name, middle name and last name.",
        "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you tell me how many students in total there are on this list ?",
            "sql": "select count ( * ) from students"
        },
        {
            "utterance": "Excellent ! Can you show me a list of all 15 students and list their first names , middle names , and last names ?",
            "sql": "select first_name , middle_name , last_name from students"
        },
        {
            "utterance": "Thanks ! Can you update this list to include the `` date first registered '' information associated with each student ?",
            "sql": "select date_first_registered from students"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 5,
    "final": {
        "utterance": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    "interaction": [
        {
            "utterance": "how many students are enrolled in a bachelor degree program ?",
            "sql": "select count ( * ) from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t3 . degree_summary_name = value"
        },
        {
            "utterance": "what are their student IDs ?",
            "sql": "select t1 . student_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t3 . degree_summary_name = value"
        },
        {
            "utterance": "Who are the students with student id 9 ?",
            "sql": "select distinct t1 . first_name , t1 . middle_name , t1 . last_name from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t1 . student_id = value"
        },
        {
            "utterance": "what about id 7 ?",
            "sql": "select distinct t1 . first_name , t1 . middle_name , t1 . last_name from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t1 . student_id = value"
        },
        {
            "utterance": "what are the degrees of the students in the bachelor program ?",
            "sql": "select distinct t1 . first_name , t1 . middle_name , t1 . last_name , t3 . degree_summary_name from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t3 . degree_summary_name = value"
        },
        {
            "utterance": "what are the different degree descriptions available ?",
            "sql": "select distinct t3 . degree_summary_description from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id"
        },
        {
            "utterance": "what were the student ids in the bachelor program again ?",
            "sql": "select distinct t1 . student_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t3 . degree_summary_name = value"
        },
        {
            "utterance": "what are those students first name , middle name , and last names ?",
            "sql": "select distinct t1 . first_name , t1 . middle_name , t1 . last_name from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id join degree_programs as t3 on t2 . degree_program_id = t3 . degree_program_id where t3 . degree_summary_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 6,
    "final": {
        "utterance": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "How many times at most can a course enrollment result show in different transcripts ?",
            "sql": "select count ( * ) from transcript_contents group by student_course_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What are the course enrollment ids for those , please ?",
            "sql": "select student_course_id from transcript_contents group by student_course_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the least number of times of a course enrollment result shows in different transcripts ?",
            "sql": "select count ( * ) from transcript_contents group by student_course_id order by count ( * ) limit value"
        },
        {
            "utterance": "What are the course enrollment ids for those , please ?",
            "sql": "select student_course_id from transcript_contents group by student_course_id order by count ( * ) limit value"
        },
        {
            "utterance": "What is the average student course id ?",
            "sql": "select avg ( student_course_id ) from transcript_contents"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 7,
    "final": {
        "utterance": "What is the semester which most student registered in? Show both the name and the id.",
        "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what are the degree_program_id in the Table Name : Student_Enrolment ?",
            "sql": "select degree_program_id from student_enrolment"
        },
        {
            "utterance": "what are the semester_id in the Table Name : Student_Enrolment ?",
            "sql": "select semester_id from student_enrolment"
        },
        {
            "utterance": "what are the semester_name in the Table Name : Semesters ?",
            "sql": "select semester_name from semesters"
        },
        {
            "utterance": "what is the semester which most student registered in ? show both the name and the id .",
            "sql": "select t1 . semester_name , t1 . semester_id from semesters as t1 join student_enrolment as t2 on t1 . semester_id = t2 . semester_id group by t1 . semester_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 8,
    "final": {
        "utterance": "Which semesters do not have any student enrolled? List the semester name.",
        "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    "interaction": [
        {
            "utterance": "Hi there ! How many different semesters does this list have ? | Do you mean the type of semester name\uff1f | Yes ! My apologies for being unclear . How many different semester name types are on this list ?",
            "sql": "select distinct semester_name from semesters"
        },
        {
            "utterance": "Awesome ! Much appreciated ! Can you filter this list to show just the semester names which do not have any student enrolment ids associated , or in other words semesters which do not have any students enrolled ?",
            "sql": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )"
        },
        {
            "utterance": "Thank you ! Can you update this list to show the associated semester IDs and semester descriptions ?",
            "sql": "select semester_id , semester_name , semester_description from semesters where semester_id not in ( select semester_id from student_enrolment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 9,
    "final": {
        "utterance": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    "interaction": [
        {
            "utterance": "who are the students enrolled in 2 degree programs in one semester ? | did you want to return their first , middle and last names ? | yes",
            "sql": "select t1 . first_name , t1 . middle_name , t1 . last_name , t1 . student_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) = value"
        },
        {
            "utterance": "what are their student_id ?",
            "sql": "select t1 . student_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id group by t1 . student_id having count ( * ) = value"
        },
        {
            "utterance": "what is student_id 4 email address",
            "sql": "select email_address from students where student_id = value"
        },
        {
            "utterance": "what is Timothy Anna Ward 's date first registered ?",
            "sql": "select date_first_registered from students where first_name = value and middle_name = value and last_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 10,
    "final": {
        "utterance": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    "interaction": [
        {
            "utterance": "Which semester did bachelor students enroll ? List the id .",
            "sql": "select distinct t2 . semester_id from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id where degree_summary_name = value"
        },
        {
            "utterance": "What is the degree summary description of student with id 14 ?",
            "sql": "select t1 . degree_summary_description from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id where t2 . student_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 11,
    "final": {
        "utterance": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "how many students there",
            "sql": "select count ( * ) from students"
        },
        {
            "utterance": "what is the first name of student id 3",
            "sql": "select first_name from students where student_id = value"
        },
        {
            "utterance": "what is email address of student id 2",
            "sql": "select email_address from students where student_id = value"
        },
        {
            "utterance": "how many student enrolment there",
            "sql": "select count ( * ) from student_enrolment"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 12,
    "final": {
        "utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    "interaction": [
        {
            "utterance": "how many students live in North Carolina ?",
            "sql": "select count ( * ) from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value"
        },
        {
            "utterance": "What are their first and last names ?",
            "sql": "select t1 . first_name , t1 . last_name from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value"
        },
        {
            "utterance": "Which of those do not have degree program id ?",
            "sql": "select t1 . first_name , t1 . last_name from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value except select t3 . first_name , t3 . last_name from students as t3 join student_enrolment as t4 on t3 . student_id = t4 . student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 13,
    "final": {
        "utterance": "Which department offers the most number of degrees? List department name and id.",
        "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you list all of the deparatment names and department IDs ?",
            "sql": "select department_id , department_name from departments"
        },
        {
            "utterance": "Cool ! Can you show me all of the degree summary names associated with this department ?",
            "sql": "select t2 . degree_summary_name from departments as t1 join degree_programs as t2 on t1 . department_id = t2 . department_id where t1 . department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 14,
    "final": {
        "utterance": "What is the last transcript release date?",
        "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Hi what is the latest transcript ?",
            "sql": "select transcript_id from transcripts order by transcript_date desc limit value"
        },
        {
            "utterance": "what is the date of transcript number 5 ?",
            "sql": "select transcript_date from transcripts where transcript_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 15,
    "final": {
        "utterance": "Show the date and id of the transcript with at least 2 course results.",
        "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    "interaction": [
        {
            "utterance": "Show me the date and id of the transcript with at least 2 course results .",
            "sql": "select t2 . transcript_date , t1 . transcript_id from transcript_contents as t1 join transcripts as t2 on t1 . transcript_id = t2 . transcript_id group by t1 . transcript_id having count ( * ) > = value"
        },
        {
            "utterance": "Show me other details of those transcripts | Do you mean other details of those transcripts with at least 2 course results ? | Yes !",
            "sql": "select t2 . other_details from transcript_contents as t1 join transcripts as t2 on t1 . transcript_id = t2 . transcript_id group by t1 . transcript_id having count ( * ) > = value"
        },
        {
            "utterance": "Show me transcript dates of those transcripts",
            "sql": "select t2 . transcript_date from transcript_contents as t1 join transcripts as t2 on t1 . transcript_id = t2 . transcript_id group by t1 . transcript_id having count ( * ) > = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 16,
    "final": {
        "utterance": "Which semesters do not have any student enrolled? List the semester name.",
        "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    "interaction": [
        {
            "utterance": "Can you list the semester names and their enrollments ?",
            "sql": "select t1 . semester_name , count ( * ) from semesters as t1 join student_enrolment as t2 on t1 . semester_id = t2 . semester_id group by t2 . semester_id"
        },
        {
            "utterance": "Which semester has the most enrollments ?",
            "sql": "select t1 . semester_name from semesters as t1 join student_enrolment as t2 on t1 . semester_id = t2 . semester_id group by t2 . semester_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "Can you list the student enrollment ids and the degree program ids ?",
            "sql": "select student_enrolment_id , degree_program_id from student_enrolment"
        },
        {
            "utterance": "Hmm , which semesters do not have any student enrolled ? I want the semester names .",
            "sql": "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 17,
    "final": {
        "utterance": "What is the description of the department whose name has the substring the computer?",
        "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    "interaction": [
        {
            "utterance": "What is the full name of the department that has the substring computer in its name ?",
            "sql": "select department_name from departments where department_name like value"
        },
        {
            "utterance": "What 's the description of that department ?",
            "sql": "select department_description from departments where department_name like value"
        },
        {
            "utterance": "What is that department 's id ?",
            "sql": "select department_id from departments where department_name like value"
        },
        {
            "utterance": "What about for history ? | What do you mean exactly ? | What are the other details for the department named history ?",
            "sql": "select other_details from departments where department_name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 18,
    "final": {
        "utterance": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Can you list the transcript date that appears least often ?",
            "sql": "select transcript_date from transcripts group by transcript_date order by count ( * ) asc limit value"
        },
        {
            "utterance": "How many times does the transcript date 1975-05-06 12:04:47 show up in the table ?",
            "sql": "select count ( * ) from transcripts where transcript_date = value"
        },
        {
            "utterance": "Which transcript date shows up the most number of times ?",
            "sql": "select transcript_date from transcripts group by transcript_date order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 19,
    "final": {
        "utterance": "What is the last transcript release date?",
        "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "What are the release dates for transcripts ?",
            "sql": "select transcript_date from transcripts"
        },
        {
            "utterance": "What is the most recent date for release of transcripts ?",
            "sql": "select transcript_date from transcripts order by transcript_date desc limit value"
        },
        {
            "utterance": "What is the last transcript release date ?",
            "sql": "select transcript_date from transcripts order by transcript_date desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 20,
    "final": {
        "utterance": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Find the program which most number of students are enrolled in . List both the id and the summary .",
            "sql": "select t1 . degree_program_id , t1 . degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_program_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "for id program 9 , which degree summary is the most common | Could you please clarify your question ? Since one program has only one degree summary . | which program has the most students",
            "sql": "select t1 . degree_program_id from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_program_id order by count ( * ) desc limit value"
        },
        {
            "utterance": "How many students are in program 9",
            "sql": "select count ( * ) from student_enrolment where degree_program_id = value"
        },
        {
            "utterance": "how many master are in program 9",
            "sql": "select count ( * ) from degree_programs where degree_summary_name = value and degree_program_id = value"
        },
        {
            "utterance": "which program has the least students",
            "sql": "select t1 . degree_program_id , t1 . degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_program_id order by count ( * ) limit value"
        },
        {
            "utterance": "how many students does id 3 have",
            "sql": "select count ( * ) from student_enrolment where degree_program_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 21,
    "final": {
        "utterance": "Find the kind of program which most number of students are enrolled in?",
        "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which program had the least number of students enrolled ?",
            "sql": "select t1 . degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1 . degree_program_id = t2 . degree_program_id group by t1 . degree_summary_name order by count ( * ) desc limit value"
        },
        {
            "utterance": "What is the degree ID for architecto ?",
            "sql": "select degree_program_id from degree_programs where degree_summary_description = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 22,
    "final": {
        "utterance": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which programs has the student by the first name Timmothy enrolled ?",
            "sql": "select t2 . degree_program_id from students as t1 join student_enrolment as t2 on t1 . student_id = t2 . student_id where t1 . first_name = value"
        },
        {
            "utterance": "Which date did he register and also which date did he leave ?",
            "sql": "select date_first_registered , date_left from students where first_name = value"
        },
        {
            "utterance": "What is the middle name of the student with email address johns.unique @ example.net ?",
            "sql": "select middle_name from students where email_address = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 23,
    "final": {
        "utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    "interaction": [
        {
            "utterance": "Could you tell me the last names of all the students who live in the state of North Carolina ?",
            "sql": "select t1 . last_name from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value"
        },
        {
            "utterance": "What about their first names ?",
            "sql": "select t1 . first_name from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value"
        },
        {
            "utterance": "What are the last names of the students who live in North Carolina but have not registered in any degree program ?",
            "sql": "select t1 . last_name from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value except select distinct t3 . last_name from students as t3 join student_enrolment as t4 on t3 . student_id = t4 . student_id"
        },
        {
            "utterance": "What are their first names ?",
            "sql": "select t1 . first_name from students as t1 join addresses as t2 on t1 . current_address_id = t2 . address_id where t2 . state_province_county = value except select distinct t3 . last_name from students as t3 join student_enrolment as t4 on t3 . student_id = t4 . student_id"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "student_transcripts_tracking",
    "interaction_id": 24,
    "final": {
        "utterance": "What's the name of the course with most number of enrollments?",
        "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which cause has the least enrollment ? | Do you want the course id or course name ? | the course name",
            "sql": "select t1 . course_name from courses as t1 join student_enrolment_courses as t2 on t1 . course_id = t2 . course_id group by t1 . course_name order by count ( * ) limit value"
        },
        {
            "utterance": "What is the course ID of Math ?",
            "sql": "select course_id from courses where course_name = value"
        },
        {
            "utterance": "How many students enrolled a course with the id of 14",
            "sql": "select count ( * ) from courses as t1 join student_enrolment_courses as t2 on t1 . course_id = t2 . course_id group by t1 . course_name having t1 . course_id = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 0,
    "final": {
        "utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    "interaction": [
        {
            "utterance": "What is the Latin commander of Battle of Serres ?",
            "sql": "select latin_commander from battle where name = value"
        },
        {
            "utterance": "What is the result of 31st January 1206 ?",
            "sql": "select result from battle where date = value"
        },
        {
            "utterance": "Who is the Bulgarian commander on June 1205 ?",
            "sql": "select bulgarian_commander from battle where date = value"
        },
        {
            "utterance": "What is the name of battle who has Latin commander is Baldwin 1 ?",
            "sql": "select name from battle where latin_commander = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 1,
    "final": {
        "utterance": "How many battles did not lose any ship with tonnage '225'?",
        "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
    },
    "interaction": [
        {
            "utterance": "How many battles did not lose any ship with tonnage 225 ?",
            "sql": "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = value )"
        },
        {
            "utterance": "How many battles did lose a ship with tonnage 225 ?",
            "sql": "select count ( * ) from battle where id in ( select lost_in_battle from ship where tonnage = value )"
        },
        {
            "utterance": "How many ships have a tonnage of 225 ?",
            "sql": "select count ( * ) from ship where tonnage = value"
        },
        {
            "utterance": "Who won in the battle when the ship with a tonnage of 225 was sunk ?",
            "sql": "select result from battle where id in ( select lost_in_battle from ship where tonnage = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 2,
    "final": {
        "utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
    },
    "interaction": [
        {
            "utterance": "Can you please show the names of the battles that had no ships lost in the 'English Channel ' ?",
            "sql": "select name from battle except select t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value"
        },
        {
            "utterance": "What are the results of those battles ?",
            "sql": "select result from battle where name not in ( select t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value )"
        },
        {
            "utterance": "Who are the Bulgarian commanders of those battles , please ?",
            "sql": "select bulgarian_commander from battle where name not in ( select t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value )"
        },
        {
            "utterance": "What were the dates of those battles ?",
            "sql": "select date from battle where name not in ( select t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value )"
        },
        {
            "utterance": "Who were the latin commanders of those battles ?",
            "sql": "select latin_commander from battle where name not in ( select t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value )"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 3,
    "final": {
        "utterance": "What are the notes of the death events which has substring 'East'?",
        "sql": "SELECT note FROM death WHERE note LIKE '%East%'"
    },
    "interaction": [
        {
            "utterance": "How many death events are there ?",
            "sql": "select count ( * ) from death"
        },
        {
            "utterance": "Which event has the most deaths ? | What information do you need ? all the information of this event or some specific information , like the note ? | Which death event has the highest number killed ?",
            "sql": "select * from death where killed = ( select max ( killed ) from death )"
        },
        {
            "utterance": "Yes , please list them",
            "sql": "select * from death where note like value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 4,
    "final": {
        "utterance": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
    },
    "interaction": [
        {
            "utterance": "What are the death situations caused by the ship with tonnage 't ' ?",
            "sql": "select t1 . killed from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id where t2 . tonnage = value"
        },
        {
            "utterance": "What are the injury situations caused by the ship with tonnage 't ' ?",
            "sql": "select t1 . injured from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id where t2 . tonnage = value"
        },
        {
            "utterance": "Tell me the total number of death and injury situations caused by the ship with tonnage 't'..",
            "sql": "select count ( t1 . id ) from death as t1 join ship as t2 on t1 . caused_by_ship_id = t2 . id where t2 . tonnage = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 5,
    "final": {
        "utterance": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
    },
    "interaction": [
        {
            "utterance": "Hi there ! Can you show me a list of all of the battle ids and the corresponding battle names ?",
            "sql": "select t1 . id , t1 . name from battle as t1"
        },
        {
            "utterance": "Great ! Can you filter this list to show just the battle IDs and battle names of the battles that had more than 10 deaths associated with them ?",
            "sql": "select t1 . id , t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle join death as t3 on t2 . id = t3 . caused_by_ship_id group by t1 . id having sum ( t3 . killed ) > value"
        },
        {
            "utterance": "Wonderful ! Can you update this list to include the date of each of these three battles ?",
            "sql": "select t1 . id , t1 . name , t1 . date from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle join death as t3 on t2 . id = t3 . caused_by_ship_id group by t1 . id having sum ( t3 . killed ) > value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 6,
    "final": {
        "utterance": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    "interaction": [
        {
            "utterance": "how many ships are there ?",
            "sql": "select count ( * ) from ship"
        },
        {
            "utterance": "what are their names ?",
            "sql": "select name from ship"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "battle_death",
    "interaction_id": 7,
    "final": {
        "utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
    },
    "interaction": [
        {
            "utterance": "Show the names of all the battles .",
            "sql": "select name from battle"
        },
        {
            "utterance": "Show the names of all the battles and their Bulgarian commanders .",
            "sql": "select name , bulgarian_commander from battle"
        },
        {
            "utterance": "Show the names of all the battles with no ships lost in the English Channel .",
            "sql": "select name from battle except select t1 . name from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value"
        },
        {
            "utterance": "Show the names and results of all battles with no ships lost in the English channel .",
            "sql": "select name , result from battle except select t1 . name , t1 . result from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value"
        },
        {
            "utterance": "Show the names , results , and Bulgarian commanders of all battles with no ships lost in the English channel .",
            "sql": "select name , result , bulgarian_commander from battle except select t1 . name , t1 . result , t1 . bulgarian_commander from battle as t1 join ship as t2 on t1 . id = t2 . lost_in_battle where t2 . location = value"
        },
        {
            "utterance": "What are the dates of all the battles with the result of Bulgarian victory .",
            "sql": "select date from battle where result = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 0,
    "final": {
        "utterance": "Find the manager name and district of the shop whose number of products is the largest.",
        "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "Which district has the largest number of products ?",
            "sql": "select district from shop order by number_products desc limit value"
        },
        {
            "utterance": "What is the manager 's name of that shop ?",
            "sql": "select manager_name from shop order by number_products desc limit value"
        },
        {
            "utterance": "How many products did he produce at that shop ?",
            "sql": "select number_products from shop order by number_products desc limit value"
        },
        {
            "utterance": "Where is the location of that district ?",
            "sql": "select location from shop order by number_products desc limit value"
        },
        {
            "utterance": "What is the shop ID number ?",
            "sql": "select shop_id from shop order by number_products desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 1,
    "final": {
        "utterance": "Find the number of employees hired in each shop; show the shop name as well.",
        "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    "interaction": [
        {
            "utterance": "How many shops do we have data for ?",
            "sql": "select count ( * ) from shop"
        },
        {
            "utterance": "Can you give me their names ?",
            "sql": "select * from shop"
        },
        {
            "utterance": "And how many employees were hired by each shop ?",
            "sql": "select count ( * ) from hiring as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t2 . name"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 2,
    "final": {
        "utterance": "What is the name of the shop that is hiring the largest number of employees?",
        "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "I 'd like to see Shop names .",
            "sql": "select name from shop"
        },
        {
            "utterance": "Which of these are hiring ?",
            "sql": "select t2 . name from hiring as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id"
        },
        {
            "utterance": "Which shop is hiring the highest number of employees ? | do you want the name of the shop ? | Yes",
            "sql": "select t2 . name from hiring as t1 join shop as t2 on t1 . shop_id = t2 . shop_id group by t1 . shop_id order by count ( * ) desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 3,
    "final": {
        "utterance": "Which cities do more than one employee under age 30 come from?",
        "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Which cities do more than one employee under age 30 come from ?",
            "sql": "select city from employee where age < value group by city having count ( * ) > value"
        },
        {
            "utterance": "Which cities do more than one employee over age 30 come from ?",
            "sql": "select city from employee where age > value group by city having count ( * ) > value"
        },
        {
            "utterance": "What are the names and ages of all employees over age 30 ?",
            "sql": "select name , age from employee where age > value"
        },
        {
            "utterance": "What are the names and ages of all employees under age 30 ?",
            "sql": "select name , age from employee where age < value"
        },
        {
            "utterance": "What cities are all employees under age 29 from ?",
            "sql": "select city from employee where age < value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 4,
    "final": {
        "utterance": "Find the names of stores whose number products is more than the average number of products.",
        "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    "interaction": [
        {
            "utterance": "What is the average number of products of all stores ?",
            "sql": "select avg ( number_products ) from shop"
        },
        {
            "utterance": "what are the names of stores whose number of products is bigger than 6685 ?",
            "sql": "select name from shop where number_products > value"
        },
        {
            "utterance": "how many stores in total ?",
            "sql": "select count ( * ) from shop"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 5,
    "final": {
        "utterance": "find the minimum and maximum number of products of all stores.",
        "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    "interaction": [
        {
            "utterance": "How many stores are there ? | Did you mean to ask for the number of shops ? | Yes",
            "sql": "select count ( * ) from shop"
        },
        {
            "utterance": "What is the most products that one shop has ?",
            "sql": "select max ( number_products ) from shop"
        },
        {
            "utterance": "What about the minimum number or products that one shop has ?",
            "sql": "select min ( number_products ) from shop"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 6,
    "final": {
        "utterance": "Find the name of the employee who got the highest one time bonus.",
        "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    "interaction": [
        {
            "utterance": "what is the age of George Chuter ?",
            "sql": "select age from employee where name = value"
        },
        {
            "utterance": "what is the age of lee mears ?",
            "sql": "select age from employee where name = value"
        },
        {
            "utterance": "find the name of the employee who got the highest one time bonus ?",
            "sql": "select t1 . name from employee as t1 join evaluation as t2 on t1 . employee_id = t2 . employee_id order by t2 . bonus desc limit value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 7,
    "final": {
        "utterance": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    "interaction": [
        {
            "utterance": "how many shop are presented on the table",
            "sql": "select count ( * ) from shop"
        },
        {
            "utterance": "list out the shop names",
            "sql": "select name from shop"
        },
        {
            "utterance": "what is the location of FC Haka",
            "sql": "select location from shop where name = value"
        },
        {
            "utterance": "what is the number of products in HJK",
            "sql": "select number_products from shop where name = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 8,
    "final": {
        "utterance": "Which cities do more than one employee under age 30 come from?",
        "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    "interaction": [
        {
            "utterance": "Hello ! Can you please provide me with a list of all of the cities in this database ?",
            "sql": "select city from employee"
        },
        {
            "utterance": "Great ! Can you update this list to show only the cities with more than one employee under the age of 30 ?",
            "sql": "select city from employee where age < value group by city having count ( * ) > value"
        },
        {
            "utterance": "Yay ! Thank you ! Can you update this list to include the ages of all residents of Bath ?",
            "sql": "select age from employee where city = value"
        }
    ]
}
{
    "id": "",
    "scenario": "",
    "database_id": "employee_hire_evaluation",
    "interaction_id": 9,
    "final": {
        "utterance": "Find the names of employees who never won any award in the evaluation.",
        "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    "interaction": [
        {
            "utterance": "how old is George Chuter ?",
            "sql": "select age from employee where name = value"
        },
        {
            "utterance": "how much bonus was Employee with ID 1 awarded ? | The employee with employee id 1 got a total amount of 5900.0 bonus . | What city is Lee Mears from ?",
            "sql": "select city from employee where name = value"
        }
    ]
}
